/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChildPolicy;
import org.openapitools.client.model.ContinueAsNewWorkflowExecutionDecisionAttributesTaskList;
import org.openapitools.client.model.WorkflowExecutionStartedEventAttributesWorkflowType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistoryEventWorkflowExecutionContinuedAsNewEventAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:07.181417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoryEventWorkflowExecutionContinuedAsNewEventAttributes {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_DECISION_TASK_COMPLETED_EVENT_ID = "decisionTaskCompletedEventId";
  @SerializedName(SERIALIZED_NAME_DECISION_TASK_COMPLETED_EVENT_ID)
  private Integer decisionTaskCompletedEventId;

  public static final String SERIALIZED_NAME_NEW_EXECUTION_RUN_ID = "newExecutionRunId";
  @SerializedName(SERIALIZED_NAME_NEW_EXECUTION_RUN_ID)
  private String newExecutionRunId;

  public static final String SERIALIZED_NAME_EXECUTION_START_TO_CLOSE_TIMEOUT = "executionStartToCloseTimeout";
  @SerializedName(SERIALIZED_NAME_EXECUTION_START_TO_CLOSE_TIMEOUT)
  private String executionStartToCloseTimeout;

  public static final String SERIALIZED_NAME_TASK_LIST = "taskList";
  @SerializedName(SERIALIZED_NAME_TASK_LIST)
  private ContinueAsNewWorkflowExecutionDecisionAttributesTaskList taskList;

  public static final String SERIALIZED_NAME_TASK_PRIORITY = "taskPriority";
  @SerializedName(SERIALIZED_NAME_TASK_PRIORITY)
  private String taskPriority;

  public static final String SERIALIZED_NAME_TASK_START_TO_CLOSE_TIMEOUT = "taskStartToCloseTimeout";
  @SerializedName(SERIALIZED_NAME_TASK_START_TO_CLOSE_TIMEOUT)
  private String taskStartToCloseTimeout;

  public static final String SERIALIZED_NAME_CHILD_POLICY = "childPolicy";
  @SerializedName(SERIALIZED_NAME_CHILD_POLICY)
  private ChildPolicy childPolicy;

  public static final String SERIALIZED_NAME_TAG_LIST = "tagList";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private List tagList;

  public static final String SERIALIZED_NAME_WORKFLOW_TYPE = "workflowType";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_TYPE)
  private WorkflowExecutionStartedEventAttributesWorkflowType workflowType;

  public static final String SERIALIZED_NAME_LAMBDA_ROLE = "lambdaRole";
  @SerializedName(SERIALIZED_NAME_LAMBDA_ROLE)
  private String lambdaRole;

  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes() {
  }

  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes input(String input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes decisionTaskCompletedEventId(Integer decisionTaskCompletedEventId) {
    this.decisionTaskCompletedEventId = decisionTaskCompletedEventId;
    return this;
  }

  /**
   * Get decisionTaskCompletedEventId
   * @return decisionTaskCompletedEventId
   */
  @javax.annotation.Nonnull
  public Integer getDecisionTaskCompletedEventId() {
    return decisionTaskCompletedEventId;
  }

  public void setDecisionTaskCompletedEventId(Integer decisionTaskCompletedEventId) {
    this.decisionTaskCompletedEventId = decisionTaskCompletedEventId;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes newExecutionRunId(String newExecutionRunId) {
    this.newExecutionRunId = newExecutionRunId;
    return this;
  }

  /**
   * Get newExecutionRunId
   * @return newExecutionRunId
   */
  @javax.annotation.Nonnull
  public String getNewExecutionRunId() {
    return newExecutionRunId;
  }

  public void setNewExecutionRunId(String newExecutionRunId) {
    this.newExecutionRunId = newExecutionRunId;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes executionStartToCloseTimeout(String executionStartToCloseTimeout) {
    this.executionStartToCloseTimeout = executionStartToCloseTimeout;
    return this;
  }

  /**
   * Get executionStartToCloseTimeout
   * @return executionStartToCloseTimeout
   */
  @javax.annotation.Nullable
  public String getExecutionStartToCloseTimeout() {
    return executionStartToCloseTimeout;
  }

  public void setExecutionStartToCloseTimeout(String executionStartToCloseTimeout) {
    this.executionStartToCloseTimeout = executionStartToCloseTimeout;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes taskList(ContinueAsNewWorkflowExecutionDecisionAttributesTaskList taskList) {
    this.taskList = taskList;
    return this;
  }

  /**
   * Get taskList
   * @return taskList
   */
  @javax.annotation.Nonnull
  public ContinueAsNewWorkflowExecutionDecisionAttributesTaskList getTaskList() {
    return taskList;
  }

  public void setTaskList(ContinueAsNewWorkflowExecutionDecisionAttributesTaskList taskList) {
    this.taskList = taskList;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes taskPriority(String taskPriority) {
    this.taskPriority = taskPriority;
    return this;
  }

  /**
   * Get taskPriority
   * @return taskPriority
   */
  @javax.annotation.Nullable
  public String getTaskPriority() {
    return taskPriority;
  }

  public void setTaskPriority(String taskPriority) {
    this.taskPriority = taskPriority;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes taskStartToCloseTimeout(String taskStartToCloseTimeout) {
    this.taskStartToCloseTimeout = taskStartToCloseTimeout;
    return this;
  }

  /**
   * Get taskStartToCloseTimeout
   * @return taskStartToCloseTimeout
   */
  @javax.annotation.Nullable
  public String getTaskStartToCloseTimeout() {
    return taskStartToCloseTimeout;
  }

  public void setTaskStartToCloseTimeout(String taskStartToCloseTimeout) {
    this.taskStartToCloseTimeout = taskStartToCloseTimeout;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes childPolicy(ChildPolicy childPolicy) {
    this.childPolicy = childPolicy;
    return this;
  }

  /**
   * Get childPolicy
   * @return childPolicy
   */
  @javax.annotation.Nonnull
  public ChildPolicy getChildPolicy() {
    return childPolicy;
  }

  public void setChildPolicy(ChildPolicy childPolicy) {
    this.childPolicy = childPolicy;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes tagList(List tagList) {
    this.tagList = tagList;
    return this;
  }

  /**
   * Get tagList
   * @return tagList
   */
  @javax.annotation.Nullable
  public List getTagList() {
    return tagList;
  }

  public void setTagList(List tagList) {
    this.tagList = tagList;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes workflowType(WorkflowExecutionStartedEventAttributesWorkflowType workflowType) {
    this.workflowType = workflowType;
    return this;
  }

  /**
   * Get workflowType
   * @return workflowType
   */
  @javax.annotation.Nonnull
  public WorkflowExecutionStartedEventAttributesWorkflowType getWorkflowType() {
    return workflowType;
  }

  public void setWorkflowType(WorkflowExecutionStartedEventAttributesWorkflowType workflowType) {
    this.workflowType = workflowType;
  }


  public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes lambdaRole(String lambdaRole) {
    this.lambdaRole = lambdaRole;
    return this;
  }

  /**
   * Get lambdaRole
   * @return lambdaRole
   */
  @javax.annotation.Nullable
  public String getLambdaRole() {
    return lambdaRole;
  }

  public void setLambdaRole(String lambdaRole) {
    this.lambdaRole = lambdaRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryEventWorkflowExecutionContinuedAsNewEventAttributes historyEventWorkflowExecutionContinuedAsNewEventAttributes = (HistoryEventWorkflowExecutionContinuedAsNewEventAttributes) o;
    return Objects.equals(this.input, historyEventWorkflowExecutionContinuedAsNewEventAttributes.input) &&
        Objects.equals(this.decisionTaskCompletedEventId, historyEventWorkflowExecutionContinuedAsNewEventAttributes.decisionTaskCompletedEventId) &&
        Objects.equals(this.newExecutionRunId, historyEventWorkflowExecutionContinuedAsNewEventAttributes.newExecutionRunId) &&
        Objects.equals(this.executionStartToCloseTimeout, historyEventWorkflowExecutionContinuedAsNewEventAttributes.executionStartToCloseTimeout) &&
        Objects.equals(this.taskList, historyEventWorkflowExecutionContinuedAsNewEventAttributes.taskList) &&
        Objects.equals(this.taskPriority, historyEventWorkflowExecutionContinuedAsNewEventAttributes.taskPriority) &&
        Objects.equals(this.taskStartToCloseTimeout, historyEventWorkflowExecutionContinuedAsNewEventAttributes.taskStartToCloseTimeout) &&
        Objects.equals(this.childPolicy, historyEventWorkflowExecutionContinuedAsNewEventAttributes.childPolicy) &&
        Objects.equals(this.tagList, historyEventWorkflowExecutionContinuedAsNewEventAttributes.tagList) &&
        Objects.equals(this.workflowType, historyEventWorkflowExecutionContinuedAsNewEventAttributes.workflowType) &&
        Objects.equals(this.lambdaRole, historyEventWorkflowExecutionContinuedAsNewEventAttributes.lambdaRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, decisionTaskCompletedEventId, newExecutionRunId, executionStartToCloseTimeout, taskList, taskPriority, taskStartToCloseTimeout, childPolicy, tagList, workflowType, lambdaRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryEventWorkflowExecutionContinuedAsNewEventAttributes {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    decisionTaskCompletedEventId: ").append(toIndentedString(decisionTaskCompletedEventId)).append("\n");
    sb.append("    newExecutionRunId: ").append(toIndentedString(newExecutionRunId)).append("\n");
    sb.append("    executionStartToCloseTimeout: ").append(toIndentedString(executionStartToCloseTimeout)).append("\n");
    sb.append("    taskList: ").append(toIndentedString(taskList)).append("\n");
    sb.append("    taskPriority: ").append(toIndentedString(taskPriority)).append("\n");
    sb.append("    taskStartToCloseTimeout: ").append(toIndentedString(taskStartToCloseTimeout)).append("\n");
    sb.append("    childPolicy: ").append(toIndentedString(childPolicy)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    lambdaRole: ").append(toIndentedString(lambdaRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("input");
    openapiFields.add("decisionTaskCompletedEventId");
    openapiFields.add("newExecutionRunId");
    openapiFields.add("executionStartToCloseTimeout");
    openapiFields.add("taskList");
    openapiFields.add("taskPriority");
    openapiFields.add("taskStartToCloseTimeout");
    openapiFields.add("childPolicy");
    openapiFields.add("tagList");
    openapiFields.add("workflowType");
    openapiFields.add("lambdaRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("decisionTaskCompletedEventId");
    openapiRequiredFields.add("newExecutionRunId");
    openapiRequiredFields.add("taskList");
    openapiRequiredFields.add("childPolicy");
    openapiRequiredFields.add("workflowType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoryEventWorkflowExecutionContinuedAsNewEventAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoryEventWorkflowExecutionContinuedAsNewEventAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoryEventWorkflowExecutionContinuedAsNewEventAttributes is not found in the empty JSON string", HistoryEventWorkflowExecutionContinuedAsNewEventAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoryEventWorkflowExecutionContinuedAsNewEventAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoryEventWorkflowExecutionContinuedAsNewEventAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HistoryEventWorkflowExecutionContinuedAsNewEventAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("input"));
      }
      // validate the required field `decisionTaskCompletedEventId`
      Integer.validateJsonElement(jsonObj.get("decisionTaskCompletedEventId"));
      // validate the required field `newExecutionRunId`
      String.validateJsonElement(jsonObj.get("newExecutionRunId"));
      // validate the optional field `executionStartToCloseTimeout`
      if (jsonObj.get("executionStartToCloseTimeout") != null && !jsonObj.get("executionStartToCloseTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("executionStartToCloseTimeout"));
      }
      // validate the required field `taskList`
      ContinueAsNewWorkflowExecutionDecisionAttributesTaskList.validateJsonElement(jsonObj.get("taskList"));
      // validate the optional field `taskPriority`
      if (jsonObj.get("taskPriority") != null && !jsonObj.get("taskPriority").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskPriority"));
      }
      // validate the optional field `taskStartToCloseTimeout`
      if (jsonObj.get("taskStartToCloseTimeout") != null && !jsonObj.get("taskStartToCloseTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskStartToCloseTimeout"));
      }
      // validate the required field `childPolicy`
      ChildPolicy.validateJsonElement(jsonObj.get("childPolicy"));
      // validate the optional field `tagList`
      if (jsonObj.get("tagList") != null && !jsonObj.get("tagList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tagList"));
      }
      // validate the required field `workflowType`
      WorkflowExecutionStartedEventAttributesWorkflowType.validateJsonElement(jsonObj.get("workflowType"));
      // validate the optional field `lambdaRole`
      if (jsonObj.get("lambdaRole") != null && !jsonObj.get("lambdaRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lambdaRole"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoryEventWorkflowExecutionContinuedAsNewEventAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoryEventWorkflowExecutionContinuedAsNewEventAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoryEventWorkflowExecutionContinuedAsNewEventAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoryEventWorkflowExecutionContinuedAsNewEventAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoryEventWorkflowExecutionContinuedAsNewEventAttributes>() {
           @Override
           public void write(JsonWriter out, HistoryEventWorkflowExecutionContinuedAsNewEventAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoryEventWorkflowExecutionContinuedAsNewEventAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoryEventWorkflowExecutionContinuedAsNewEventAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoryEventWorkflowExecutionContinuedAsNewEventAttributes
   * @throws IOException if the JSON string is invalid with respect to HistoryEventWorkflowExecutionContinuedAsNewEventAttributes
   */
  public static HistoryEventWorkflowExecutionContinuedAsNewEventAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoryEventWorkflowExecutionContinuedAsNewEventAttributes.class);
  }

  /**
   * Convert an instance of HistoryEventWorkflowExecutionContinuedAsNewEventAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

