/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets EventType
 */
@JsonAdapter(EventType.Adapter.class)
public enum EventType {
  
  WORKFLOW_EXECUTION_STARTED("WorkflowExecutionStarted"),
  
  WORKFLOW_EXECUTION_CANCEL_REQUESTED("WorkflowExecutionCancelRequested"),
  
  WORKFLOW_EXECUTION_COMPLETED("WorkflowExecutionCompleted"),
  
  COMPLETE_WORKFLOW_EXECUTION_FAILED("CompleteWorkflowExecutionFailed"),
  
  WORKFLOW_EXECUTION_FAILED("WorkflowExecutionFailed"),
  
  FAIL_WORKFLOW_EXECUTION_FAILED("FailWorkflowExecutionFailed"),
  
  WORKFLOW_EXECUTION_TIMED_OUT("WorkflowExecutionTimedOut"),
  
  WORKFLOW_EXECUTION_CANCELED("WorkflowExecutionCanceled"),
  
  CANCEL_WORKFLOW_EXECUTION_FAILED("CancelWorkflowExecutionFailed"),
  
  WORKFLOW_EXECUTION_CONTINUED_AS_NEW("WorkflowExecutionContinuedAsNew"),
  
  CONTINUE_AS_NEW_WORKFLOW_EXECUTION_FAILED("ContinueAsNewWorkflowExecutionFailed"),
  
  WORKFLOW_EXECUTION_TERMINATED("WorkflowExecutionTerminated"),
  
  DECISION_TASK_SCHEDULED("DecisionTaskScheduled"),
  
  DECISION_TASK_STARTED("DecisionTaskStarted"),
  
  DECISION_TASK_COMPLETED("DecisionTaskCompleted"),
  
  DECISION_TASK_TIMED_OUT("DecisionTaskTimedOut"),
  
  ACTIVITY_TASK_SCHEDULED("ActivityTaskScheduled"),
  
  SCHEDULE_ACTIVITY_TASK_FAILED("ScheduleActivityTaskFailed"),
  
  ACTIVITY_TASK_STARTED("ActivityTaskStarted"),
  
  ACTIVITY_TASK_COMPLETED("ActivityTaskCompleted"),
  
  ACTIVITY_TASK_FAILED("ActivityTaskFailed"),
  
  ACTIVITY_TASK_TIMED_OUT("ActivityTaskTimedOut"),
  
  ACTIVITY_TASK_CANCELED("ActivityTaskCanceled"),
  
  ACTIVITY_TASK_CANCEL_REQUESTED("ActivityTaskCancelRequested"),
  
  REQUEST_CANCEL_ACTIVITY_TASK_FAILED("RequestCancelActivityTaskFailed"),
  
  WORKFLOW_EXECUTION_SIGNALED("WorkflowExecutionSignaled"),
  
  MARKER_RECORDED("MarkerRecorded"),
  
  RECORD_MARKER_FAILED("RecordMarkerFailed"),
  
  TIMER_STARTED("TimerStarted"),
  
  START_TIMER_FAILED("StartTimerFailed"),
  
  TIMER_FIRED("TimerFired"),
  
  TIMER_CANCELED("TimerCanceled"),
  
  CANCEL_TIMER_FAILED("CancelTimerFailed"),
  
  START_CHILD_WORKFLOW_EXECUTION_INITIATED("StartChildWorkflowExecutionInitiated"),
  
  START_CHILD_WORKFLOW_EXECUTION_FAILED("StartChildWorkflowExecutionFailed"),
  
  CHILD_WORKFLOW_EXECUTION_STARTED("ChildWorkflowExecutionStarted"),
  
  CHILD_WORKFLOW_EXECUTION_COMPLETED("ChildWorkflowExecutionCompleted"),
  
  CHILD_WORKFLOW_EXECUTION_FAILED("ChildWorkflowExecutionFailed"),
  
  CHILD_WORKFLOW_EXECUTION_TIMED_OUT("ChildWorkflowExecutionTimedOut"),
  
  CHILD_WORKFLOW_EXECUTION_CANCELED("ChildWorkflowExecutionCanceled"),
  
  CHILD_WORKFLOW_EXECUTION_TERMINATED("ChildWorkflowExecutionTerminated"),
  
  SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED("SignalExternalWorkflowExecutionInitiated"),
  
  SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED("SignalExternalWorkflowExecutionFailed"),
  
  EXTERNAL_WORKFLOW_EXECUTION_SIGNALED("ExternalWorkflowExecutionSignaled"),
  
  REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED("RequestCancelExternalWorkflowExecutionInitiated"),
  
  REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED("RequestCancelExternalWorkflowExecutionFailed"),
  
  EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED("ExternalWorkflowExecutionCancelRequested"),
  
  LAMBDA_FUNCTION_SCHEDULED("LambdaFunctionScheduled"),
  
  LAMBDA_FUNCTION_STARTED("LambdaFunctionStarted"),
  
  LAMBDA_FUNCTION_COMPLETED("LambdaFunctionCompleted"),
  
  LAMBDA_FUNCTION_FAILED("LambdaFunctionFailed"),
  
  LAMBDA_FUNCTION_TIMED_OUT("LambdaFunctionTimedOut"),
  
  SCHEDULE_LAMBDA_FUNCTION_FAILED("ScheduleLambdaFunctionFailed"),
  
  START_LAMBDA_FUNCTION_FAILED("StartLambdaFunctionFailed");

  private String value;

  EventType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EventType fromValue(String value) {
    for (EventType b : EventType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EventType> {
    @Override
    public void write(final JsonWriter jsonWriter, final EventType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EventType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EventType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EventType.fromValue(value);
  }
}

