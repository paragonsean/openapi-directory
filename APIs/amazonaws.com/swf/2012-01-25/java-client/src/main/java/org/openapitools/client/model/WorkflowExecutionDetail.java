/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.WorkflowExecutionDetailExecutionConfiguration;
import org.openapitools.client.model.WorkflowExecutionDetailExecutionInfo;
import org.openapitools.client.model.WorkflowExecutionDetailOpenCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details about a workflow execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:07.181417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowExecutionDetail {
  public static final String SERIALIZED_NAME_EXECUTION_INFO = "executionInfo";
  @SerializedName(SERIALIZED_NAME_EXECUTION_INFO)
  private WorkflowExecutionDetailExecutionInfo executionInfo;

  public static final String SERIALIZED_NAME_EXECUTION_CONFIGURATION = "executionConfiguration";
  @SerializedName(SERIALIZED_NAME_EXECUTION_CONFIGURATION)
  private WorkflowExecutionDetailExecutionConfiguration executionConfiguration;

  public static final String SERIALIZED_NAME_OPEN_COUNTS = "openCounts";
  @SerializedName(SERIALIZED_NAME_OPEN_COUNTS)
  private WorkflowExecutionDetailOpenCounts openCounts;

  public static final String SERIALIZED_NAME_LATEST_ACTIVITY_TASK_TIMESTAMP = "latestActivityTaskTimestamp";
  @SerializedName(SERIALIZED_NAME_LATEST_ACTIVITY_TASK_TIMESTAMP)
  private OffsetDateTime latestActivityTaskTimestamp;

  public static final String SERIALIZED_NAME_LATEST_EXECUTION_CONTEXT = "latestExecutionContext";
  @SerializedName(SERIALIZED_NAME_LATEST_EXECUTION_CONTEXT)
  private String latestExecutionContext;

  public WorkflowExecutionDetail() {
  }

  public WorkflowExecutionDetail executionInfo(WorkflowExecutionDetailExecutionInfo executionInfo) {
    this.executionInfo = executionInfo;
    return this;
  }

  /**
   * Get executionInfo
   * @return executionInfo
   */
  @javax.annotation.Nonnull
  public WorkflowExecutionDetailExecutionInfo getExecutionInfo() {
    return executionInfo;
  }

  public void setExecutionInfo(WorkflowExecutionDetailExecutionInfo executionInfo) {
    this.executionInfo = executionInfo;
  }


  public WorkflowExecutionDetail executionConfiguration(WorkflowExecutionDetailExecutionConfiguration executionConfiguration) {
    this.executionConfiguration = executionConfiguration;
    return this;
  }

  /**
   * Get executionConfiguration
   * @return executionConfiguration
   */
  @javax.annotation.Nonnull
  public WorkflowExecutionDetailExecutionConfiguration getExecutionConfiguration() {
    return executionConfiguration;
  }

  public void setExecutionConfiguration(WorkflowExecutionDetailExecutionConfiguration executionConfiguration) {
    this.executionConfiguration = executionConfiguration;
  }


  public WorkflowExecutionDetail openCounts(WorkflowExecutionDetailOpenCounts openCounts) {
    this.openCounts = openCounts;
    return this;
  }

  /**
   * Get openCounts
   * @return openCounts
   */
  @javax.annotation.Nonnull
  public WorkflowExecutionDetailOpenCounts getOpenCounts() {
    return openCounts;
  }

  public void setOpenCounts(WorkflowExecutionDetailOpenCounts openCounts) {
    this.openCounts = openCounts;
  }


  public WorkflowExecutionDetail latestActivityTaskTimestamp(OffsetDateTime latestActivityTaskTimestamp) {
    this.latestActivityTaskTimestamp = latestActivityTaskTimestamp;
    return this;
  }

  /**
   * Get latestActivityTaskTimestamp
   * @return latestActivityTaskTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestActivityTaskTimestamp() {
    return latestActivityTaskTimestamp;
  }

  public void setLatestActivityTaskTimestamp(OffsetDateTime latestActivityTaskTimestamp) {
    this.latestActivityTaskTimestamp = latestActivityTaskTimestamp;
  }


  public WorkflowExecutionDetail latestExecutionContext(String latestExecutionContext) {
    this.latestExecutionContext = latestExecutionContext;
    return this;
  }

  /**
   * Get latestExecutionContext
   * @return latestExecutionContext
   */
  @javax.annotation.Nullable
  public String getLatestExecutionContext() {
    return latestExecutionContext;
  }

  public void setLatestExecutionContext(String latestExecutionContext) {
    this.latestExecutionContext = latestExecutionContext;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowExecutionDetail workflowExecutionDetail = (WorkflowExecutionDetail) o;
    return Objects.equals(this.executionInfo, workflowExecutionDetail.executionInfo) &&
        Objects.equals(this.executionConfiguration, workflowExecutionDetail.executionConfiguration) &&
        Objects.equals(this.openCounts, workflowExecutionDetail.openCounts) &&
        Objects.equals(this.latestActivityTaskTimestamp, workflowExecutionDetail.latestActivityTaskTimestamp) &&
        Objects.equals(this.latestExecutionContext, workflowExecutionDetail.latestExecutionContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionInfo, executionConfiguration, openCounts, latestActivityTaskTimestamp, latestExecutionContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowExecutionDetail {\n");
    sb.append("    executionInfo: ").append(toIndentedString(executionInfo)).append("\n");
    sb.append("    executionConfiguration: ").append(toIndentedString(executionConfiguration)).append("\n");
    sb.append("    openCounts: ").append(toIndentedString(openCounts)).append("\n");
    sb.append("    latestActivityTaskTimestamp: ").append(toIndentedString(latestActivityTaskTimestamp)).append("\n");
    sb.append("    latestExecutionContext: ").append(toIndentedString(latestExecutionContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionInfo");
    openapiFields.add("executionConfiguration");
    openapiFields.add("openCounts");
    openapiFields.add("latestActivityTaskTimestamp");
    openapiFields.add("latestExecutionContext");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("executionInfo");
    openapiRequiredFields.add("executionConfiguration");
    openapiRequiredFields.add("openCounts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowExecutionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowExecutionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowExecutionDetail is not found in the empty JSON string", WorkflowExecutionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowExecutionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowExecutionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowExecutionDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `executionInfo`
      WorkflowExecutionDetailExecutionInfo.validateJsonElement(jsonObj.get("executionInfo"));
      // validate the required field `executionConfiguration`
      WorkflowExecutionDetailExecutionConfiguration.validateJsonElement(jsonObj.get("executionConfiguration"));
      // validate the required field `openCounts`
      WorkflowExecutionDetailOpenCounts.validateJsonElement(jsonObj.get("openCounts"));
      // validate the optional field `latestActivityTaskTimestamp`
      if (jsonObj.get("latestActivityTaskTimestamp") != null && !jsonObj.get("latestActivityTaskTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("latestActivityTaskTimestamp"));
      }
      // validate the optional field `latestExecutionContext`
      if (jsonObj.get("latestExecutionContext") != null && !jsonObj.get("latestExecutionContext").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("latestExecutionContext"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowExecutionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowExecutionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowExecutionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowExecutionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowExecutionDetail>() {
           @Override
           public void write(JsonWriter out, WorkflowExecutionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowExecutionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowExecutionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowExecutionDetail
   * @throws IOException if the JSON string is invalid with respect to WorkflowExecutionDetail
   */
  public static WorkflowExecutionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowExecutionDetail.class);
  }

  /**
   * Convert an instance of WorkflowExecutionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

