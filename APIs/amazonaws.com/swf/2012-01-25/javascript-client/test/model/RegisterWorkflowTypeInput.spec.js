/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonSimpleWorkflowService);
  }
}(this, function(expect, AmazonSimpleWorkflowService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RegisterWorkflowTypeInput', function() {
    it('should create an instance of RegisterWorkflowTypeInput', function() {
      // uncomment below and update the code to test RegisterWorkflowTypeInput
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be.a(AmazonSimpleWorkflowService.RegisterWorkflowTypeInput);
    });

    it('should have the property domain (base name: "domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property defaultTaskStartToCloseTimeout (base name: "defaultTaskStartToCloseTimeout")', function() {
      // uncomment below and update the code to test the property defaultTaskStartToCloseTimeout
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property defaultExecutionStartToCloseTimeout (base name: "defaultExecutionStartToCloseTimeout")', function() {
      // uncomment below and update the code to test the property defaultExecutionStartToCloseTimeout
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property defaultTaskList (base name: "defaultTaskList")', function() {
      // uncomment below and update the code to test the property defaultTaskList
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property defaultTaskPriority (base name: "defaultTaskPriority")', function() {
      // uncomment below and update the code to test the property defaultTaskPriority
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property defaultChildPolicy (base name: "defaultChildPolicy")', function() {
      // uncomment below and update the code to test the property defaultChildPolicy
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

    it('should have the property defaultLambdaRole (base name: "defaultLambdaRole")', function() {
      // uncomment below and update the code to test the property defaultLambdaRole
      //var instance = new AmazonSimpleWorkflowService.RegisterWorkflowTypeInput();
      //expect(instance).to.be();
    });

  });

}));
