/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonSimpleWorkflowService);
  }
}(this, function(expect, AmazonSimpleWorkflowService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonSimpleWorkflowService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('countClosedWorkflowExecutions', function() {
      it('should call countClosedWorkflowExecutions successfully', function(done) {
        //uncomment below and update the code to test countClosedWorkflowExecutions
        //instance.countClosedWorkflowExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('countOpenWorkflowExecutions', function() {
      it('should call countOpenWorkflowExecutions successfully', function(done) {
        //uncomment below and update the code to test countOpenWorkflowExecutions
        //instance.countOpenWorkflowExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('countPendingActivityTasks', function() {
      it('should call countPendingActivityTasks successfully', function(done) {
        //uncomment below and update the code to test countPendingActivityTasks
        //instance.countPendingActivityTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('countPendingDecisionTasks', function() {
      it('should call countPendingDecisionTasks successfully', function(done) {
        //uncomment below and update the code to test countPendingDecisionTasks
        //instance.countPendingDecisionTasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deprecateActivityType', function() {
      it('should call deprecateActivityType successfully', function(done) {
        //uncomment below and update the code to test deprecateActivityType
        //instance.deprecateActivityType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deprecateDomain', function() {
      it('should call deprecateDomain successfully', function(done) {
        //uncomment below and update the code to test deprecateDomain
        //instance.deprecateDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deprecateWorkflowType', function() {
      it('should call deprecateWorkflowType successfully', function(done) {
        //uncomment below and update the code to test deprecateWorkflowType
        //instance.deprecateWorkflowType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeActivityType', function() {
      it('should call describeActivityType successfully', function(done) {
        //uncomment below and update the code to test describeActivityType
        //instance.describeActivityType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomain', function() {
      it('should call describeDomain successfully', function(done) {
        //uncomment below and update the code to test describeDomain
        //instance.describeDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkflowExecution', function() {
      it('should call describeWorkflowExecution successfully', function(done) {
        //uncomment below and update the code to test describeWorkflowExecution
        //instance.describeWorkflowExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkflowType', function() {
      it('should call describeWorkflowType successfully', function(done) {
        //uncomment below and update the code to test describeWorkflowType
        //instance.describeWorkflowType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkflowExecutionHistory', function() {
      it('should call getWorkflowExecutionHistory successfully', function(done) {
        //uncomment below and update the code to test getWorkflowExecutionHistory
        //instance.getWorkflowExecutionHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listActivityTypes', function() {
      it('should call listActivityTypes successfully', function(done) {
        //uncomment below and update the code to test listActivityTypes
        //instance.listActivityTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listClosedWorkflowExecutions', function() {
      it('should call listClosedWorkflowExecutions successfully', function(done) {
        //uncomment below and update the code to test listClosedWorkflowExecutions
        //instance.listClosedWorkflowExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDomains', function() {
      it('should call listDomains successfully', function(done) {
        //uncomment below and update the code to test listDomains
        //instance.listDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOpenWorkflowExecutions', function() {
      it('should call listOpenWorkflowExecutions successfully', function(done) {
        //uncomment below and update the code to test listOpenWorkflowExecutions
        //instance.listOpenWorkflowExecutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkflowTypes', function() {
      it('should call listWorkflowTypes successfully', function(done) {
        //uncomment below and update the code to test listWorkflowTypes
        //instance.listWorkflowTypes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pollForActivityTask', function() {
      it('should call pollForActivityTask successfully', function(done) {
        //uncomment below and update the code to test pollForActivityTask
        //instance.pollForActivityTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pollForDecisionTask', function() {
      it('should call pollForDecisionTask successfully', function(done) {
        //uncomment below and update the code to test pollForDecisionTask
        //instance.pollForDecisionTask(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recordActivityTaskHeartbeat', function() {
      it('should call recordActivityTaskHeartbeat successfully', function(done) {
        //uncomment below and update the code to test recordActivityTaskHeartbeat
        //instance.recordActivityTaskHeartbeat(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerActivityType', function() {
      it('should call registerActivityType successfully', function(done) {
        //uncomment below and update the code to test registerActivityType
        //instance.registerActivityType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerDomain', function() {
      it('should call registerDomain successfully', function(done) {
        //uncomment below and update the code to test registerDomain
        //instance.registerDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerWorkflowType', function() {
      it('should call registerWorkflowType successfully', function(done) {
        //uncomment below and update the code to test registerWorkflowType
        //instance.registerWorkflowType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestCancelWorkflowExecution', function() {
      it('should call requestCancelWorkflowExecution successfully', function(done) {
        //uncomment below and update the code to test requestCancelWorkflowExecution
        //instance.requestCancelWorkflowExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('respondActivityTaskCanceled', function() {
      it('should call respondActivityTaskCanceled successfully', function(done) {
        //uncomment below and update the code to test respondActivityTaskCanceled
        //instance.respondActivityTaskCanceled(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('respondActivityTaskCompleted', function() {
      it('should call respondActivityTaskCompleted successfully', function(done) {
        //uncomment below and update the code to test respondActivityTaskCompleted
        //instance.respondActivityTaskCompleted(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('respondActivityTaskFailed', function() {
      it('should call respondActivityTaskFailed successfully', function(done) {
        //uncomment below and update the code to test respondActivityTaskFailed
        //instance.respondActivityTaskFailed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('respondDecisionTaskCompleted', function() {
      it('should call respondDecisionTaskCompleted successfully', function(done) {
        //uncomment below and update the code to test respondDecisionTaskCompleted
        //instance.respondDecisionTaskCompleted(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalWorkflowExecution', function() {
      it('should call signalWorkflowExecution successfully', function(done) {
        //uncomment below and update the code to test signalWorkflowExecution
        //instance.signalWorkflowExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startWorkflowExecution', function() {
      it('should call startWorkflowExecution successfully', function(done) {
        //uncomment below and update the code to test startWorkflowExecution
        //instance.startWorkflowExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('terminateWorkflowExecution', function() {
      it('should call terminateWorkflowExecution successfully', function(done) {
        //uncomment below and update the code to test terminateWorkflowExecution
        //instance.terminateWorkflowExecution(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('undeprecateActivityType', function() {
      it('should call undeprecateActivityType successfully', function(done) {
        //uncomment below and update the code to test undeprecateActivityType
        //instance.undeprecateActivityType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('undeprecateDomain', function() {
      it('should call undeprecateDomain successfully', function(done) {
        //uncomment below and update the code to test undeprecateDomain
        //instance.undeprecateDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('undeprecateWorkflowType', function() {
      it('should call undeprecateWorkflowType successfully', function(done) {
        //uncomment below and update the code to test undeprecateWorkflowType
        //instance.undeprecateWorkflowType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
