/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityTaskActivityType from './ActivityTaskActivityType';
import ActivityTaskWorkflowExecution from './ActivityTaskWorkflowExecution';

/**
 * The ActivityTask model module.
 * @module model/ActivityTask
 * @version 2012-01-25
 */
class ActivityTask {
    /**
     * Constructs a new <code>ActivityTask</code>.
     * Unit of work sent to an activity worker.
     * @alias module:model/ActivityTask
     * @param taskToken {String} 
     * @param activityId {String} 
     * @param startedEventId {Number} 
     * @param workflowExecution {module:model/ActivityTaskWorkflowExecution} 
     * @param activityType {module:model/ActivityTaskActivityType} 
     */
    constructor(taskToken, activityId, startedEventId, workflowExecution, activityType) { 
        
        ActivityTask.initialize(this, taskToken, activityId, startedEventId, workflowExecution, activityType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taskToken, activityId, startedEventId, workflowExecution, activityType) { 
        obj['taskToken'] = taskToken;
        obj['activityId'] = activityId;
        obj['startedEventId'] = startedEventId;
        obj['workflowExecution'] = workflowExecution;
        obj['activityType'] = activityType;
    }

    /**
     * Constructs a <code>ActivityTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityTask} obj Optional instance to populate.
     * @return {module:model/ActivityTask} The populated <code>ActivityTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityTask();

            if (data.hasOwnProperty('taskToken')) {
                obj['taskToken'] = ApiClient.convertToType(data['taskToken'], 'String');
            }
            if (data.hasOwnProperty('activityId')) {
                obj['activityId'] = ApiClient.convertToType(data['activityId'], 'String');
            }
            if (data.hasOwnProperty('startedEventId')) {
                obj['startedEventId'] = ApiClient.convertToType(data['startedEventId'], 'Number');
            }
            if (data.hasOwnProperty('workflowExecution')) {
                obj['workflowExecution'] = ActivityTaskWorkflowExecution.constructFromObject(data['workflowExecution']);
            }
            if (data.hasOwnProperty('activityType')) {
                obj['activityType'] = ActivityTaskActivityType.constructFromObject(data['activityType']);
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityTask</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActivityTask.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `taskToken`
        if (data['taskToken']) { // data not null
          String.validateJSON(data['taskToken']);
        }
        // validate the optional field `activityId`
        if (data['activityId']) { // data not null
          String.validateJSON(data['activityId']);
        }
        // validate the optional field `startedEventId`
        if (data['startedEventId']) { // data not null
          Number.validateJSON(data['startedEventId']);
        }
        // validate the optional field `workflowExecution`
        if (data['workflowExecution']) { // data not null
          ActivityTaskWorkflowExecution.validateJSON(data['workflowExecution']);
        }
        // validate the optional field `activityType`
        if (data['activityType']) { // data not null
          ActivityTaskActivityType.validateJSON(data['activityType']);
        }
        // validate the optional field `input`
        if (data['input']) { // data not null
          String.validateJSON(data['input']);
        }

        return true;
    }


}

ActivityTask.RequiredProperties = ["taskToken", "activityId", "startedEventId", "workflowExecution", "activityType"];

/**
 * @member {String} taskToken
 */
ActivityTask.prototype['taskToken'] = undefined;

/**
 * @member {String} activityId
 */
ActivityTask.prototype['activityId'] = undefined;

/**
 * @member {Number} startedEventId
 */
ActivityTask.prototype['startedEventId'] = undefined;

/**
 * @member {module:model/ActivityTaskWorkflowExecution} workflowExecution
 */
ActivityTask.prototype['workflowExecution'] = undefined;

/**
 * @member {module:model/ActivityTaskActivityType} activityType
 */
ActivityTask.prototype['activityType'] = undefined;

/**
 * @member {String} input
 */
ActivityTask.prototype['input'] = undefined;






export default ActivityTask;

