/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecordMarkerDecisionAttributes from './RecordMarkerDecisionAttributes';

/**
 * The DecisionRecordMarkerDecisionAttributes model module.
 * @module model/DecisionRecordMarkerDecisionAttributes
 * @version 2012-01-25
 */
class DecisionRecordMarkerDecisionAttributes {
    /**
     * Constructs a new <code>DecisionRecordMarkerDecisionAttributes</code>.
     * @alias module:model/DecisionRecordMarkerDecisionAttributes
     * @implements module:model/RecordMarkerDecisionAttributes
     * @param markerName {String} 
     */
    constructor(markerName) { 
        RecordMarkerDecisionAttributes.initialize(this, markerName);
        DecisionRecordMarkerDecisionAttributes.initialize(this, markerName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, markerName) { 
        obj['markerName'] = markerName;
    }

    /**
     * Constructs a <code>DecisionRecordMarkerDecisionAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DecisionRecordMarkerDecisionAttributes} obj Optional instance to populate.
     * @return {module:model/DecisionRecordMarkerDecisionAttributes} The populated <code>DecisionRecordMarkerDecisionAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DecisionRecordMarkerDecisionAttributes();
            RecordMarkerDecisionAttributes.constructFromObject(data, obj);

            if (data.hasOwnProperty('markerName')) {
                obj['markerName'] = ApiClient.convertToType(data['markerName'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DecisionRecordMarkerDecisionAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DecisionRecordMarkerDecisionAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DecisionRecordMarkerDecisionAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `markerName`
        if (data['markerName']) { // data not null
          String.validateJSON(data['markerName']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          String.validateJSON(data['details']);
        }

        return true;
    }


}

DecisionRecordMarkerDecisionAttributes.RequiredProperties = ["markerName"];

/**
 * @member {String} markerName
 */
DecisionRecordMarkerDecisionAttributes.prototype['markerName'] = undefined;

/**
 * @member {String} details
 */
DecisionRecordMarkerDecisionAttributes.prototype['details'] = undefined;


// Implement RecordMarkerDecisionAttributes interface:
/**
 * @member {String} markerName
 */
RecordMarkerDecisionAttributes.prototype['markerName'] = undefined;
/**
 * @member {String} details
 */
RecordMarkerDecisionAttributes.prototype['details'] = undefined;




export default DecisionRecordMarkerDecisionAttributes;

