/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StartLambdaFunctionFailedCause from './StartLambdaFunctionFailedCause';
import StartLambdaFunctionFailedEventAttributes from './StartLambdaFunctionFailedEventAttributes';

/**
 * The HistoryEventStartLambdaFunctionFailedEventAttributes model module.
 * @module model/HistoryEventStartLambdaFunctionFailedEventAttributes
 * @version 2012-01-25
 */
class HistoryEventStartLambdaFunctionFailedEventAttributes {
    /**
     * Constructs a new <code>HistoryEventStartLambdaFunctionFailedEventAttributes</code>.
     * @alias module:model/HistoryEventStartLambdaFunctionFailedEventAttributes
     * @implements module:model/StartLambdaFunctionFailedEventAttributes
     */
    constructor() { 
        StartLambdaFunctionFailedEventAttributes.initialize(this);
        HistoryEventStartLambdaFunctionFailedEventAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HistoryEventStartLambdaFunctionFailedEventAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoryEventStartLambdaFunctionFailedEventAttributes} obj Optional instance to populate.
     * @return {module:model/HistoryEventStartLambdaFunctionFailedEventAttributes} The populated <code>HistoryEventStartLambdaFunctionFailedEventAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoryEventStartLambdaFunctionFailedEventAttributes();
            StartLambdaFunctionFailedEventAttributes.constructFromObject(data, obj);

            if (data.hasOwnProperty('scheduledEventId')) {
                obj['scheduledEventId'] = ApiClient.convertToType(data['scheduledEventId'], 'Number');
            }
            if (data.hasOwnProperty('cause')) {
                obj['cause'] = ApiClient.convertToType(data['cause'], StartLambdaFunctionFailedCause);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistoryEventStartLambdaFunctionFailedEventAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistoryEventStartLambdaFunctionFailedEventAttributes</code>.
     */
    static validateJSON(data) {
        // validate the optional field `scheduledEventId`
        if (data['scheduledEventId']) { // data not null
          Number.validateJSON(data['scheduledEventId']);
        }
        // validate the optional field `cause`
        if (data['cause']) { // data not null
          StartLambdaFunctionFailedCause.validateJSON(data['cause']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          String.validateJSON(data['message']);
        }

        return true;
    }


}



/**
 * @member {Number} scheduledEventId
 */
HistoryEventStartLambdaFunctionFailedEventAttributes.prototype['scheduledEventId'] = undefined;

/**
 * @member {module:model/StartLambdaFunctionFailedCause} cause
 */
HistoryEventStartLambdaFunctionFailedEventAttributes.prototype['cause'] = undefined;

/**
 * @member {String} message
 */
HistoryEventStartLambdaFunctionFailedEventAttributes.prototype['message'] = undefined;


// Implement StartLambdaFunctionFailedEventAttributes interface:
/**
 * @member {Number} scheduledEventId
 */
StartLambdaFunctionFailedEventAttributes.prototype['scheduledEventId'] = undefined;
/**
 * @member {module:model/StartLambdaFunctionFailedCause} cause
 */
StartLambdaFunctionFailedEventAttributes.prototype['cause'] = undefined;
/**
 * @member {String} message
 */
StartLambdaFunctionFailedEventAttributes.prototype['message'] = undefined;




export default HistoryEventStartLambdaFunctionFailedEventAttributes;

