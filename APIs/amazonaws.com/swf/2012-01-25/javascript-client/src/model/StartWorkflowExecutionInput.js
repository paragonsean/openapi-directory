/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChildPolicy from './ChildPolicy';
import StartWorkflowExecutionInputTaskList from './StartWorkflowExecutionInputTaskList';
import StartWorkflowExecutionInputWorkflowType from './StartWorkflowExecutionInputWorkflowType';

/**
 * The StartWorkflowExecutionInput model module.
 * @module model/StartWorkflowExecutionInput
 * @version 2012-01-25
 */
class StartWorkflowExecutionInput {
    /**
     * Constructs a new <code>StartWorkflowExecutionInput</code>.
     * @alias module:model/StartWorkflowExecutionInput
     * @param domain {String} 
     * @param workflowId {String} 
     * @param workflowType {module:model/StartWorkflowExecutionInputWorkflowType} 
     */
    constructor(domain, workflowId, workflowType) { 
        
        StartWorkflowExecutionInput.initialize(this, domain, workflowId, workflowType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domain, workflowId, workflowType) { 
        obj['domain'] = domain;
        obj['workflowId'] = workflowId;
        obj['workflowType'] = workflowType;
    }

    /**
     * Constructs a <code>StartWorkflowExecutionInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartWorkflowExecutionInput} obj Optional instance to populate.
     * @return {module:model/StartWorkflowExecutionInput} The populated <code>StartWorkflowExecutionInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartWorkflowExecutionInput();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('workflowId')) {
                obj['workflowId'] = ApiClient.convertToType(data['workflowId'], 'String');
            }
            if (data.hasOwnProperty('workflowType')) {
                obj['workflowType'] = StartWorkflowExecutionInputWorkflowType.constructFromObject(data['workflowType']);
            }
            if (data.hasOwnProperty('taskList')) {
                obj['taskList'] = StartWorkflowExecutionInputTaskList.constructFromObject(data['taskList']);
            }
            if (data.hasOwnProperty('taskPriority')) {
                obj['taskPriority'] = ApiClient.convertToType(data['taskPriority'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('executionStartToCloseTimeout')) {
                obj['executionStartToCloseTimeout'] = ApiClient.convertToType(data['executionStartToCloseTimeout'], 'String');
            }
            if (data.hasOwnProperty('tagList')) {
                obj['tagList'] = ApiClient.convertToType(data['tagList'], Array);
            }
            if (data.hasOwnProperty('taskStartToCloseTimeout')) {
                obj['taskStartToCloseTimeout'] = ApiClient.convertToType(data['taskStartToCloseTimeout'], 'String');
            }
            if (data.hasOwnProperty('childPolicy')) {
                obj['childPolicy'] = ApiClient.convertToType(data['childPolicy'], ChildPolicy);
            }
            if (data.hasOwnProperty('lambdaRole')) {
                obj['lambdaRole'] = ApiClient.convertToType(data['lambdaRole'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartWorkflowExecutionInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartWorkflowExecutionInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartWorkflowExecutionInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `domain`
        if (data['domain']) { // data not null
          String.validateJSON(data['domain']);
        }
        // validate the optional field `workflowId`
        if (data['workflowId']) { // data not null
          String.validateJSON(data['workflowId']);
        }
        // validate the optional field `workflowType`
        if (data['workflowType']) { // data not null
          StartWorkflowExecutionInputWorkflowType.validateJSON(data['workflowType']);
        }
        // validate the optional field `taskList`
        if (data['taskList']) { // data not null
          StartWorkflowExecutionInputTaskList.validateJSON(data['taskList']);
        }
        // validate the optional field `taskPriority`
        if (data['taskPriority']) { // data not null
          String.validateJSON(data['taskPriority']);
        }
        // validate the optional field `input`
        if (data['input']) { // data not null
          String.validateJSON(data['input']);
        }
        // validate the optional field `executionStartToCloseTimeout`
        if (data['executionStartToCloseTimeout']) { // data not null
          String.validateJSON(data['executionStartToCloseTimeout']);
        }
        // validate the optional field `tagList`
        if (data['tagList']) { // data not null
          Array.validateJSON(data['tagList']);
        }
        // validate the optional field `taskStartToCloseTimeout`
        if (data['taskStartToCloseTimeout']) { // data not null
          String.validateJSON(data['taskStartToCloseTimeout']);
        }
        // validate the optional field `childPolicy`
        if (data['childPolicy']) { // data not null
          ChildPolicy.validateJSON(data['childPolicy']);
        }
        // validate the optional field `lambdaRole`
        if (data['lambdaRole']) { // data not null
          String.validateJSON(data['lambdaRole']);
        }

        return true;
    }


}

StartWorkflowExecutionInput.RequiredProperties = ["domain", "workflowId", "workflowType"];

/**
 * @member {String} domain
 */
StartWorkflowExecutionInput.prototype['domain'] = undefined;

/**
 * @member {String} workflowId
 */
StartWorkflowExecutionInput.prototype['workflowId'] = undefined;

/**
 * @member {module:model/StartWorkflowExecutionInputWorkflowType} workflowType
 */
StartWorkflowExecutionInput.prototype['workflowType'] = undefined;

/**
 * @member {module:model/StartWorkflowExecutionInputTaskList} taskList
 */
StartWorkflowExecutionInput.prototype['taskList'] = undefined;

/**
 * @member {String} taskPriority
 */
StartWorkflowExecutionInput.prototype['taskPriority'] = undefined;

/**
 * @member {String} input
 */
StartWorkflowExecutionInput.prototype['input'] = undefined;

/**
 * @member {String} executionStartToCloseTimeout
 */
StartWorkflowExecutionInput.prototype['executionStartToCloseTimeout'] = undefined;

/**
 * @member {Array} tagList
 */
StartWorkflowExecutionInput.prototype['tagList'] = undefined;

/**
 * @member {String} taskStartToCloseTimeout
 */
StartWorkflowExecutionInput.prototype['taskStartToCloseTimeout'] = undefined;

/**
 * @member {module:model/ChildPolicy} childPolicy
 */
StartWorkflowExecutionInput.prototype['childPolicy'] = undefined;

/**
 * @member {String} lambdaRole
 */
StartWorkflowExecutionInput.prototype['lambdaRole'] = undefined;






export default StartWorkflowExecutionInput;

