/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloseStatus from './CloseStatus';
import ExecutionStatus from './ExecutionStatus';
import WorkflowExecutionInfo from './WorkflowExecutionInfo';
import WorkflowExecutionInfoExecution from './WorkflowExecutionInfoExecution';
import WorkflowExecutionInfoParent from './WorkflowExecutionInfoParent';
import WorkflowExecutionInfoWorkflowType from './WorkflowExecutionInfoWorkflowType';

/**
 * The WorkflowExecutionDetailExecutionInfo model module.
 * @module model/WorkflowExecutionDetailExecutionInfo
 * @version 2012-01-25
 */
class WorkflowExecutionDetailExecutionInfo {
    /**
     * Constructs a new <code>WorkflowExecutionDetailExecutionInfo</code>.
     * @alias module:model/WorkflowExecutionDetailExecutionInfo
     * @implements module:model/WorkflowExecutionInfo
     * @param execution {module:model/WorkflowExecutionInfoExecution} 
     * @param workflowType {module:model/WorkflowExecutionInfoWorkflowType} 
     * @param startTimestamp {Date} 
     * @param executionStatus {module:model/ExecutionStatus} 
     */
    constructor(execution, workflowType, startTimestamp, executionStatus) { 
        WorkflowExecutionInfo.initialize(this, execution, workflowType, startTimestamp, executionStatus);
        WorkflowExecutionDetailExecutionInfo.initialize(this, execution, workflowType, startTimestamp, executionStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, execution, workflowType, startTimestamp, executionStatus) { 
        obj['execution'] = execution;
        obj['workflowType'] = workflowType;
        obj['startTimestamp'] = startTimestamp;
        obj['executionStatus'] = executionStatus;
    }

    /**
     * Constructs a <code>WorkflowExecutionDetailExecutionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowExecutionDetailExecutionInfo} obj Optional instance to populate.
     * @return {module:model/WorkflowExecutionDetailExecutionInfo} The populated <code>WorkflowExecutionDetailExecutionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowExecutionDetailExecutionInfo();
            WorkflowExecutionInfo.constructFromObject(data, obj);

            if (data.hasOwnProperty('execution')) {
                obj['execution'] = WorkflowExecutionInfoExecution.constructFromObject(data['execution']);
            }
            if (data.hasOwnProperty('workflowType')) {
                obj['workflowType'] = WorkflowExecutionInfoWorkflowType.constructFromObject(data['workflowType']);
            }
            if (data.hasOwnProperty('startTimestamp')) {
                obj['startTimestamp'] = ApiClient.convertToType(data['startTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('closeTimestamp')) {
                obj['closeTimestamp'] = ApiClient.convertToType(data['closeTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('executionStatus')) {
                obj['executionStatus'] = ApiClient.convertToType(data['executionStatus'], ExecutionStatus);
            }
            if (data.hasOwnProperty('closeStatus')) {
                obj['closeStatus'] = ApiClient.convertToType(data['closeStatus'], CloseStatus);
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = WorkflowExecutionInfoParent.constructFromObject(data['parent']);
            }
            if (data.hasOwnProperty('tagList')) {
                obj['tagList'] = ApiClient.convertToType(data['tagList'], Array);
            }
            if (data.hasOwnProperty('cancelRequested')) {
                obj['cancelRequested'] = ApiClient.convertToType(data['cancelRequested'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowExecutionDetailExecutionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowExecutionDetailExecutionInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowExecutionDetailExecutionInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `execution`
        if (data['execution']) { // data not null
          WorkflowExecutionInfoExecution.validateJSON(data['execution']);
        }
        // validate the optional field `workflowType`
        if (data['workflowType']) { // data not null
          WorkflowExecutionInfoWorkflowType.validateJSON(data['workflowType']);
        }
        // validate the optional field `startTimestamp`
        if (data['startTimestamp']) { // data not null
          Date.validateJSON(data['startTimestamp']);
        }
        // validate the optional field `closeTimestamp`
        if (data['closeTimestamp']) { // data not null
          Date.validateJSON(data['closeTimestamp']);
        }
        // validate the optional field `executionStatus`
        if (data['executionStatus']) { // data not null
          ExecutionStatus.validateJSON(data['executionStatus']);
        }
        // validate the optional field `closeStatus`
        if (data['closeStatus']) { // data not null
          CloseStatus.validateJSON(data['closeStatus']);
        }
        // validate the optional field `parent`
        if (data['parent']) { // data not null
          WorkflowExecutionInfoParent.validateJSON(data['parent']);
        }
        // validate the optional field `tagList`
        if (data['tagList']) { // data not null
          Array.validateJSON(data['tagList']);
        }
        // validate the optional field `cancelRequested`
        if (data['cancelRequested']) { // data not null
          Boolean.validateJSON(data['cancelRequested']);
        }

        return true;
    }


}

WorkflowExecutionDetailExecutionInfo.RequiredProperties = ["execution", "workflowType", "startTimestamp", "executionStatus"];

/**
 * @member {module:model/WorkflowExecutionInfoExecution} execution
 */
WorkflowExecutionDetailExecutionInfo.prototype['execution'] = undefined;

/**
 * @member {module:model/WorkflowExecutionInfoWorkflowType} workflowType
 */
WorkflowExecutionDetailExecutionInfo.prototype['workflowType'] = undefined;

/**
 * @member {Date} startTimestamp
 */
WorkflowExecutionDetailExecutionInfo.prototype['startTimestamp'] = undefined;

/**
 * @member {Date} closeTimestamp
 */
WorkflowExecutionDetailExecutionInfo.prototype['closeTimestamp'] = undefined;

/**
 * @member {module:model/ExecutionStatus} executionStatus
 */
WorkflowExecutionDetailExecutionInfo.prototype['executionStatus'] = undefined;

/**
 * @member {module:model/CloseStatus} closeStatus
 */
WorkflowExecutionDetailExecutionInfo.prototype['closeStatus'] = undefined;

/**
 * @member {module:model/WorkflowExecutionInfoParent} parent
 */
WorkflowExecutionDetailExecutionInfo.prototype['parent'] = undefined;

/**
 * @member {Array} tagList
 */
WorkflowExecutionDetailExecutionInfo.prototype['tagList'] = undefined;

/**
 * @member {Boolean} cancelRequested
 */
WorkflowExecutionDetailExecutionInfo.prototype['cancelRequested'] = undefined;


// Implement WorkflowExecutionInfo interface:
/**
 * @member {module:model/WorkflowExecutionInfoExecution} execution
 */
WorkflowExecutionInfo.prototype['execution'] = undefined;
/**
 * @member {module:model/WorkflowExecutionInfoWorkflowType} workflowType
 */
WorkflowExecutionInfo.prototype['workflowType'] = undefined;
/**
 * @member {Date} startTimestamp
 */
WorkflowExecutionInfo.prototype['startTimestamp'] = undefined;
/**
 * @member {Date} closeTimestamp
 */
WorkflowExecutionInfo.prototype['closeTimestamp'] = undefined;
/**
 * @member {module:model/ExecutionStatus} executionStatus
 */
WorkflowExecutionInfo.prototype['executionStatus'] = undefined;
/**
 * @member {module:model/CloseStatus} closeStatus
 */
WorkflowExecutionInfo.prototype['closeStatus'] = undefined;
/**
 * @member {module:model/WorkflowExecutionInfoParent} parent
 */
WorkflowExecutionInfo.prototype['parent'] = undefined;
/**
 * @member {Array} tagList
 */
WorkflowExecutionInfo.prototype['tagList'] = undefined;
/**
 * @member {Boolean} cancelRequested
 */
WorkflowExecutionInfo.prototype['cancelRequested'] = undefined;




export default WorkflowExecutionDetailExecutionInfo;

