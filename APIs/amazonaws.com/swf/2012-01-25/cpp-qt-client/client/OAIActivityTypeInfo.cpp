/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityTypeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityTypeInfo::OAIActivityTypeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityTypeInfo::OAIActivityTypeInfo() {
    this->initializeModel();
}

OAIActivityTypeInfo::~OAIActivityTypeInfo() {}

void OAIActivityTypeInfo::initializeModel() {

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_deprecation_date_isSet = false;
    m_deprecation_date_isValid = false;
}

void OAIActivityTypeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityTypeInfo::fromJsonObject(QJsonObject json) {

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_deprecation_date_isValid = ::OpenAPI::fromJsonValue(m_deprecation_date, json[QString("deprecationDate")]);
    m_deprecation_date_isSet = !json[QString("deprecationDate")].isNull() && m_deprecation_date_isValid;
}

QString OAIActivityTypeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityTypeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_type.isSet()) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_deprecation_date_isSet) {
        obj.insert(QString("deprecationDate"), ::OpenAPI::toJsonValue(m_deprecation_date));
    }
    return obj;
}

OAIActivityTypeInfo_activityType OAIActivityTypeInfo::getActivityType() const {
    return m_activity_type;
}
void OAIActivityTypeInfo::setActivityType(const OAIActivityTypeInfo_activityType &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIActivityTypeInfo::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIActivityTypeInfo::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

OAIRegistrationStatus OAIActivityTypeInfo::getStatus() const {
    return m_status;
}
void OAIActivityTypeInfo::setStatus(const OAIRegistrationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIActivityTypeInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIActivityTypeInfo::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIActivityTypeInfo::getDescription() const {
    return m_description;
}
void OAIActivityTypeInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActivityTypeInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActivityTypeInfo::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIActivityTypeInfo::getCreationDate() const {
    return m_creation_date;
}
void OAIActivityTypeInfo::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIActivityTypeInfo::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIActivityTypeInfo::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIActivityTypeInfo::getDeprecationDate() const {
    return m_deprecation_date;
}
void OAIActivityTypeInfo::setDeprecationDate(const QDateTime &deprecation_date) {
    m_deprecation_date = deprecation_date;
    m_deprecation_date_isSet = true;
}

bool OAIActivityTypeInfo::is_deprecation_date_Set() const{
    return m_deprecation_date_isSet;
}

bool OAIActivityTypeInfo::is_deprecation_date_Valid() const{
    return m_deprecation_date_isValid;
}

bool OAIActivityTypeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecation_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityTypeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_type_isValid && m_status_isValid && m_creation_date_isValid && true;
}

} // namespace OpenAPI
