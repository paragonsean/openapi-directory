/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListClosedWorkflowExecutionsInput_startTimeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListClosedWorkflowExecutionsInput_startTimeFilter::OAIListClosedWorkflowExecutionsInput_startTimeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListClosedWorkflowExecutionsInput_startTimeFilter::OAIListClosedWorkflowExecutionsInput_startTimeFilter() {
    this->initializeModel();
}

OAIListClosedWorkflowExecutionsInput_startTimeFilter::~OAIListClosedWorkflowExecutionsInput_startTimeFilter() {}

void OAIListClosedWorkflowExecutionsInput_startTimeFilter::initializeModel() {

    m_oldest_date_isSet = false;
    m_oldest_date_isValid = false;

    m_latest_date_isSet = false;
    m_latest_date_isValid = false;
}

void OAIListClosedWorkflowExecutionsInput_startTimeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListClosedWorkflowExecutionsInput_startTimeFilter::fromJsonObject(QJsonObject json) {

    m_oldest_date_isValid = ::OpenAPI::fromJsonValue(m_oldest_date, json[QString("oldestDate")]);
    m_oldest_date_isSet = !json[QString("oldestDate")].isNull() && m_oldest_date_isValid;

    m_latest_date_isValid = ::OpenAPI::fromJsonValue(m_latest_date, json[QString("latestDate")]);
    m_latest_date_isSet = !json[QString("latestDate")].isNull() && m_latest_date_isValid;
}

QString OAIListClosedWorkflowExecutionsInput_startTimeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListClosedWorkflowExecutionsInput_startTimeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_oldest_date_isSet) {
        obj.insert(QString("oldestDate"), ::OpenAPI::toJsonValue(m_oldest_date));
    }
    if (m_latest_date_isSet) {
        obj.insert(QString("latestDate"), ::OpenAPI::toJsonValue(m_latest_date));
    }
    return obj;
}

QDateTime OAIListClosedWorkflowExecutionsInput_startTimeFilter::getOldestDate() const {
    return m_oldest_date;
}
void OAIListClosedWorkflowExecutionsInput_startTimeFilter::setOldestDate(const QDateTime &oldest_date) {
    m_oldest_date = oldest_date;
    m_oldest_date_isSet = true;
}

bool OAIListClosedWorkflowExecutionsInput_startTimeFilter::is_oldest_date_Set() const{
    return m_oldest_date_isSet;
}

bool OAIListClosedWorkflowExecutionsInput_startTimeFilter::is_oldest_date_Valid() const{
    return m_oldest_date_isValid;
}

QDateTime OAIListClosedWorkflowExecutionsInput_startTimeFilter::getLatestDate() const {
    return m_latest_date;
}
void OAIListClosedWorkflowExecutionsInput_startTimeFilter::setLatestDate(const QDateTime &latest_date) {
    m_latest_date = latest_date;
    m_latest_date_isSet = true;
}

bool OAIListClosedWorkflowExecutionsInput_startTimeFilter::is_latest_date_Set() const{
    return m_latest_date_isSet;
}

bool OAIListClosedWorkflowExecutionsInput_startTimeFilter::is_latest_date_Valid() const{
    return m_latest_date_isValid;
}

bool OAIListClosedWorkflowExecutionsInput_startTimeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_oldest_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListClosedWorkflowExecutionsInput_startTimeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_oldest_date_isValid && true;
}

} // namespace OpenAPI
