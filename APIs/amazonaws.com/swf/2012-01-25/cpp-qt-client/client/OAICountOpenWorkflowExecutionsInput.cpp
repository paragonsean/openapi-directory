/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountOpenWorkflowExecutionsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountOpenWorkflowExecutionsInput::OAICountOpenWorkflowExecutionsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountOpenWorkflowExecutionsInput::OAICountOpenWorkflowExecutionsInput() {
    this->initializeModel();
}

OAICountOpenWorkflowExecutionsInput::~OAICountOpenWorkflowExecutionsInput() {}

void OAICountOpenWorkflowExecutionsInput::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_start_time_filter_isSet = false;
    m_start_time_filter_isValid = false;

    m_type_filter_isSet = false;
    m_type_filter_isValid = false;

    m_tag_filter_isSet = false;
    m_tag_filter_isValid = false;

    m_execution_filter_isSet = false;
    m_execution_filter_isValid = false;
}

void OAICountOpenWorkflowExecutionsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountOpenWorkflowExecutionsInput::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_start_time_filter_isValid = ::OpenAPI::fromJsonValue(m_start_time_filter, json[QString("startTimeFilter")]);
    m_start_time_filter_isSet = !json[QString("startTimeFilter")].isNull() && m_start_time_filter_isValid;

    m_type_filter_isValid = ::OpenAPI::fromJsonValue(m_type_filter, json[QString("typeFilter")]);
    m_type_filter_isSet = !json[QString("typeFilter")].isNull() && m_type_filter_isValid;

    m_tag_filter_isValid = ::OpenAPI::fromJsonValue(m_tag_filter, json[QString("tagFilter")]);
    m_tag_filter_isSet = !json[QString("tagFilter")].isNull() && m_tag_filter_isValid;

    m_execution_filter_isValid = ::OpenAPI::fromJsonValue(m_execution_filter, json[QString("executionFilter")]);
    m_execution_filter_isSet = !json[QString("executionFilter")].isNull() && m_execution_filter_isValid;
}

QString OAICountOpenWorkflowExecutionsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountOpenWorkflowExecutionsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_start_time_filter.isSet()) {
        obj.insert(QString("startTimeFilter"), ::OpenAPI::toJsonValue(m_start_time_filter));
    }
    if (m_type_filter.isSet()) {
        obj.insert(QString("typeFilter"), ::OpenAPI::toJsonValue(m_type_filter));
    }
    if (m_tag_filter.isSet()) {
        obj.insert(QString("tagFilter"), ::OpenAPI::toJsonValue(m_tag_filter));
    }
    if (m_execution_filter.isSet()) {
        obj.insert(QString("executionFilter"), ::OpenAPI::toJsonValue(m_execution_filter));
    }
    return obj;
}

QString OAICountOpenWorkflowExecutionsInput::getDomain() const {
    return m_domain;
}
void OAICountOpenWorkflowExecutionsInput::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICountOpenWorkflowExecutionsInput::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICountOpenWorkflowExecutionsInput::is_domain_Valid() const{
    return m_domain_isValid;
}

OAICountOpenWorkflowExecutionsInput_startTimeFilter OAICountOpenWorkflowExecutionsInput::getStartTimeFilter() const {
    return m_start_time_filter;
}
void OAICountOpenWorkflowExecutionsInput::setStartTimeFilter(const OAICountOpenWorkflowExecutionsInput_startTimeFilter &start_time_filter) {
    m_start_time_filter = start_time_filter;
    m_start_time_filter_isSet = true;
}

bool OAICountOpenWorkflowExecutionsInput::is_start_time_filter_Set() const{
    return m_start_time_filter_isSet;
}

bool OAICountOpenWorkflowExecutionsInput::is_start_time_filter_Valid() const{
    return m_start_time_filter_isValid;
}

OAICountOpenWorkflowExecutionsInput_typeFilter OAICountOpenWorkflowExecutionsInput::getTypeFilter() const {
    return m_type_filter;
}
void OAICountOpenWorkflowExecutionsInput::setTypeFilter(const OAICountOpenWorkflowExecutionsInput_typeFilter &type_filter) {
    m_type_filter = type_filter;
    m_type_filter_isSet = true;
}

bool OAICountOpenWorkflowExecutionsInput::is_type_filter_Set() const{
    return m_type_filter_isSet;
}

bool OAICountOpenWorkflowExecutionsInput::is_type_filter_Valid() const{
    return m_type_filter_isValid;
}

OAICountOpenWorkflowExecutionsInput_tagFilter OAICountOpenWorkflowExecutionsInput::getTagFilter() const {
    return m_tag_filter;
}
void OAICountOpenWorkflowExecutionsInput::setTagFilter(const OAICountOpenWorkflowExecutionsInput_tagFilter &tag_filter) {
    m_tag_filter = tag_filter;
    m_tag_filter_isSet = true;
}

bool OAICountOpenWorkflowExecutionsInput::is_tag_filter_Set() const{
    return m_tag_filter_isSet;
}

bool OAICountOpenWorkflowExecutionsInput::is_tag_filter_Valid() const{
    return m_tag_filter_isValid;
}

OAICountOpenWorkflowExecutionsInput_executionFilter OAICountOpenWorkflowExecutionsInput::getExecutionFilter() const {
    return m_execution_filter;
}
void OAICountOpenWorkflowExecutionsInput::setExecutionFilter(const OAICountOpenWorkflowExecutionsInput_executionFilter &execution_filter) {
    m_execution_filter = execution_filter;
    m_execution_filter_isSet = true;
}

bool OAICountOpenWorkflowExecutionsInput::is_execution_filter_Set() const{
    return m_execution_filter_isSet;
}

bool OAICountOpenWorkflowExecutionsInput::is_execution_filter_Valid() const{
    return m_execution_filter_isValid;
}

bool OAICountOpenWorkflowExecutionsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountOpenWorkflowExecutionsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_start_time_filter_isValid && true;
}

} // namespace OpenAPI
