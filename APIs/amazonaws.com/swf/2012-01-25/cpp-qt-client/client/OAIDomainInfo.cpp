/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainInfo::OAIDomainInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainInfo::OAIDomainInfo() {
    this->initializeModel();
}

OAIDomainInfo::~OAIDomainInfo() {}

void OAIDomainInfo::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIDomainInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainInfo::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;
}

QString OAIDomainInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QString OAIDomainInfo::getName() const {
    return m_name;
}
void OAIDomainInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDomainInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDomainInfo::is_name_Valid() const{
    return m_name_isValid;
}

OAIRegistrationStatus OAIDomainInfo::getStatus() const {
    return m_status;
}
void OAIDomainInfo::setStatus(const OAIRegistrationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDomainInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDomainInfo::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDomainInfo::getDescription() const {
    return m_description;
}
void OAIDomainInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDomainInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDomainInfo::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDomainInfo::getArn() const {
    return m_arn;
}
void OAIDomainInfo::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDomainInfo::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDomainInfo::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIDomainInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
