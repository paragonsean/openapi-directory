/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelWorkflowExecutionFailedCause.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelWorkflowExecutionFailedCause::OAICancelWorkflowExecutionFailedCause(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelWorkflowExecutionFailedCause::OAICancelWorkflowExecutionFailedCause() {
    this->initializeModel();
}

OAICancelWorkflowExecutionFailedCause::~OAICancelWorkflowExecutionFailedCause() {}

void OAICancelWorkflowExecutionFailedCause::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICancelWorkflowExecutionFailedCause::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICancelWorkflowExecutionFailedCause::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNHANDLED_DECISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAICancelWorkflowExecutionFailedCause::UNHANDLED_DECISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPERATION_NOT_PERMITTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICancelWorkflowExecutionFailedCause::OPERATION_NOT_PERMITTED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICancelWorkflowExecutionFailedCause::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICancelWorkflowExecutionFailedCause::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICancelWorkflowExecutionFailedCause::UNHANDLED_DECISION:
            val = "UNHANDLED_DECISION";
            break;
        case eOAICancelWorkflowExecutionFailedCause::OPERATION_NOT_PERMITTED:
            val = "OPERATION_NOT_PERMITTED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICancelWorkflowExecutionFailedCause::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICancelWorkflowExecutionFailedCause::eOAICancelWorkflowExecutionFailedCause OAICancelWorkflowExecutionFailedCause::getValue() const {
    return m_value;
}

void OAICancelWorkflowExecutionFailedCause::setValue(const OAICancelWorkflowExecutionFailedCause::eOAICancelWorkflowExecutionFailedCause& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICancelWorkflowExecutionFailedCause::isSet() const {
    
    return m_value_isSet;
}

bool OAICancelWorkflowExecutionFailedCause::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
