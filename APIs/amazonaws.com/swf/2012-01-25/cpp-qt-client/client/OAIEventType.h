/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventType.h
 *
 * 
 */

#ifndef OAIEventType_H
#define OAIEventType_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEventType : public OAIEnum {
public:
    OAIEventType();
    OAIEventType(QString json);
    ~OAIEventType() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIEventType {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        WORKFLOWEXECUTIONSTARTED, 
        WORKFLOWEXECUTIONCANCELREQUESTED, 
        WORKFLOWEXECUTIONCOMPLETED, 
        COMPLETEWORKFLOWEXECUTIONFAILED, 
        WORKFLOWEXECUTIONFAILED, 
        FAILWORKFLOWEXECUTIONFAILED, 
        WORKFLOWEXECUTIONTIMEDOUT, 
        WORKFLOWEXECUTIONCANCELED, 
        CANCELWORKFLOWEXECUTIONFAILED, 
        WORKFLOWEXECUTIONCONTINUEDASNEW, 
        CONTINUEASNEWWORKFLOWEXECUTIONFAILED, 
        WORKFLOWEXECUTIONTERMINATED, 
        DECISIONTASKSCHEDULED, 
        DECISIONTASKSTARTED, 
        DECISIONTASKCOMPLETED, 
        DECISIONTASKTIMEDOUT, 
        ACTIVITYTASKSCHEDULED, 
        SCHEDULEACTIVITYTASKFAILED, 
        ACTIVITYTASKSTARTED, 
        ACTIVITYTASKCOMPLETED, 
        ACTIVITYTASKFAILED, 
        ACTIVITYTASKTIMEDOUT, 
        ACTIVITYTASKCANCELED, 
        ACTIVITYTASKCANCELREQUESTED, 
        REQUESTCANCELACTIVITYTASKFAILED, 
        WORKFLOWEXECUTIONSIGNALED, 
        MARKERRECORDED, 
        RECORDMARKERFAILED, 
        TIMERSTARTED, 
        STARTTIMERFAILED, 
        TIMERFIRED, 
        TIMERCANCELED, 
        CANCELTIMERFAILED, 
        STARTCHILDWORKFLOWEXECUTIONINITIATED, 
        STARTCHILDWORKFLOWEXECUTIONFAILED, 
        CHILDWORKFLOWEXECUTIONSTARTED, 
        CHILDWORKFLOWEXECUTIONCOMPLETED, 
        CHILDWORKFLOWEXECUTIONFAILED, 
        CHILDWORKFLOWEXECUTIONTIMEDOUT, 
        CHILDWORKFLOWEXECUTIONCANCELED, 
        CHILDWORKFLOWEXECUTIONTERMINATED, 
        SIGNALEXTERNALWORKFLOWEXECUTIONINITIATED, 
        SIGNALEXTERNALWORKFLOWEXECUTIONFAILED, 
        EXTERNALWORKFLOWEXECUTIONSIGNALED, 
        REQUESTCANCELEXTERNALWORKFLOWEXECUTIONINITIATED, 
        REQUESTCANCELEXTERNALWORKFLOWEXECUTIONFAILED, 
        EXTERNALWORKFLOWEXECUTIONCANCELREQUESTED, 
        LAMBDAFUNCTIONSCHEDULED, 
        LAMBDAFUNCTIONSTARTED, 
        LAMBDAFUNCTIONCOMPLETED, 
        LAMBDAFUNCTIONFAILED, 
        LAMBDAFUNCTIONTIMEDOUT, 
        SCHEDULELAMBDAFUNCTIONFAILED, 
        STARTLAMBDAFUNCTIONFAILED
    };
    OAIEventType::eOAIEventType getValue() const;
    void setValue(const OAIEventType::eOAIEventType& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIEventType m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventType)

#endif // OAIEventType_H
