/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkflowExecutionInfo.h
 *
 * Contains information about a workflow execution.
 */

#ifndef OAIWorkflowExecutionInfo_H
#define OAIWorkflowExecutionInfo_H

#include <QJsonObject>

#include "OAICloseStatus.h"
#include "OAIExecutionStatus.h"
#include "OAIWorkflowExecutionInfo_execution.h"
#include "OAIWorkflowExecutionInfo_parent.h"
#include "OAIWorkflowExecutionInfo_workflowType.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWorkflowExecutionInfo_execution;
class OAIWorkflowExecutionInfo_workflowType;
class OAIWorkflowExecutionInfo_parent;

class OAIWorkflowExecutionInfo : public OAIObject {
public:
    OAIWorkflowExecutionInfo();
    OAIWorkflowExecutionInfo(QString json);
    ~OAIWorkflowExecutionInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIWorkflowExecutionInfo_execution getExecution() const;
    void setExecution(const OAIWorkflowExecutionInfo_execution &execution);
    bool is_execution_Set() const;
    bool is_execution_Valid() const;

    OAIWorkflowExecutionInfo_workflowType getWorkflowType() const;
    void setWorkflowType(const OAIWorkflowExecutionInfo_workflowType &workflow_type);
    bool is_workflow_type_Set() const;
    bool is_workflow_type_Valid() const;

    QDateTime getStartTimestamp() const;
    void setStartTimestamp(const QDateTime &start_timestamp);
    bool is_start_timestamp_Set() const;
    bool is_start_timestamp_Valid() const;

    QDateTime getCloseTimestamp() const;
    void setCloseTimestamp(const QDateTime &close_timestamp);
    bool is_close_timestamp_Set() const;
    bool is_close_timestamp_Valid() const;

    OAIExecutionStatus getExecutionStatus() const;
    void setExecutionStatus(const OAIExecutionStatus &execution_status);
    bool is_execution_status_Set() const;
    bool is_execution_status_Valid() const;

    OAICloseStatus getCloseStatus() const;
    void setCloseStatus(const OAICloseStatus &close_status);
    bool is_close_status_Set() const;
    bool is_close_status_Valid() const;

    OAIWorkflowExecutionInfo_parent getParent() const;
    void setParent(const OAIWorkflowExecutionInfo_parent &parent);
    bool is_parent_Set() const;
    bool is_parent_Valid() const;

    QList getTagList() const;
    void setTagList(const QList &tag_list);
    bool is_tag_list_Set() const;
    bool is_tag_list_Valid() const;

    bool getCancelRequested() const;
    void setCancelRequested(const bool &cancel_requested);
    bool is_cancel_requested_Set() const;
    bool is_cancel_requested_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIWorkflowExecutionInfo_execution m_execution;
    bool m_execution_isSet;
    bool m_execution_isValid;

    OAIWorkflowExecutionInfo_workflowType m_workflow_type;
    bool m_workflow_type_isSet;
    bool m_workflow_type_isValid;

    QDateTime m_start_timestamp;
    bool m_start_timestamp_isSet;
    bool m_start_timestamp_isValid;

    QDateTime m_close_timestamp;
    bool m_close_timestamp_isSet;
    bool m_close_timestamp_isValid;

    OAIExecutionStatus m_execution_status;
    bool m_execution_status_isSet;
    bool m_execution_status_isValid;

    OAICloseStatus m_close_status;
    bool m_close_status_isSet;
    bool m_close_status_isValid;

    OAIWorkflowExecutionInfo_parent m_parent;
    bool m_parent_isSet;
    bool m_parent_isValid;

    QList m_tag_list;
    bool m_tag_list_isSet;
    bool m_tag_list_isValid;

    bool m_cancel_requested;
    bool m_cancel_requested_isSet;
    bool m_cancel_requested_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkflowExecutionInfo)

#endif // OAIWorkflowExecutionInfo_H
