/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowExecutionDetail_openCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowExecutionDetail_openCounts::OAIWorkflowExecutionDetail_openCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowExecutionDetail_openCounts::OAIWorkflowExecutionDetail_openCounts() {
    this->initializeModel();
}

OAIWorkflowExecutionDetail_openCounts::~OAIWorkflowExecutionDetail_openCounts() {}

void OAIWorkflowExecutionDetail_openCounts::initializeModel() {

    m_open_activity_tasks_isSet = false;
    m_open_activity_tasks_isValid = false;

    m_open_decision_tasks_isSet = false;
    m_open_decision_tasks_isValid = false;

    m_open_timers_isSet = false;
    m_open_timers_isValid = false;

    m_open_child_workflow_executions_isSet = false;
    m_open_child_workflow_executions_isValid = false;

    m_open_lambda_functions_isSet = false;
    m_open_lambda_functions_isValid = false;
}

void OAIWorkflowExecutionDetail_openCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowExecutionDetail_openCounts::fromJsonObject(QJsonObject json) {

    m_open_activity_tasks_isValid = ::OpenAPI::fromJsonValue(m_open_activity_tasks, json[QString("openActivityTasks")]);
    m_open_activity_tasks_isSet = !json[QString("openActivityTasks")].isNull() && m_open_activity_tasks_isValid;

    m_open_decision_tasks_isValid = ::OpenAPI::fromJsonValue(m_open_decision_tasks, json[QString("openDecisionTasks")]);
    m_open_decision_tasks_isSet = !json[QString("openDecisionTasks")].isNull() && m_open_decision_tasks_isValid;

    m_open_timers_isValid = ::OpenAPI::fromJsonValue(m_open_timers, json[QString("openTimers")]);
    m_open_timers_isSet = !json[QString("openTimers")].isNull() && m_open_timers_isValid;

    m_open_child_workflow_executions_isValid = ::OpenAPI::fromJsonValue(m_open_child_workflow_executions, json[QString("openChildWorkflowExecutions")]);
    m_open_child_workflow_executions_isSet = !json[QString("openChildWorkflowExecutions")].isNull() && m_open_child_workflow_executions_isValid;

    m_open_lambda_functions_isValid = ::OpenAPI::fromJsonValue(m_open_lambda_functions, json[QString("openLambdaFunctions")]);
    m_open_lambda_functions_isSet = !json[QString("openLambdaFunctions")].isNull() && m_open_lambda_functions_isValid;
}

QString OAIWorkflowExecutionDetail_openCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowExecutionDetail_openCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_open_activity_tasks_isSet) {
        obj.insert(QString("openActivityTasks"), ::OpenAPI::toJsonValue(m_open_activity_tasks));
    }
    if (m_open_decision_tasks_isSet) {
        obj.insert(QString("openDecisionTasks"), ::OpenAPI::toJsonValue(m_open_decision_tasks));
    }
    if (m_open_timers_isSet) {
        obj.insert(QString("openTimers"), ::OpenAPI::toJsonValue(m_open_timers));
    }
    if (m_open_child_workflow_executions_isSet) {
        obj.insert(QString("openChildWorkflowExecutions"), ::OpenAPI::toJsonValue(m_open_child_workflow_executions));
    }
    if (m_open_lambda_functions_isSet) {
        obj.insert(QString("openLambdaFunctions"), ::OpenAPI::toJsonValue(m_open_lambda_functions));
    }
    return obj;
}

qint32 OAIWorkflowExecutionDetail_openCounts::getOpenActivityTasks() const {
    return m_open_activity_tasks;
}
void OAIWorkflowExecutionDetail_openCounts::setOpenActivityTasks(const qint32 &open_activity_tasks) {
    m_open_activity_tasks = open_activity_tasks;
    m_open_activity_tasks_isSet = true;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_activity_tasks_Set() const{
    return m_open_activity_tasks_isSet;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_activity_tasks_Valid() const{
    return m_open_activity_tasks_isValid;
}

qint32 OAIWorkflowExecutionDetail_openCounts::getOpenDecisionTasks() const {
    return m_open_decision_tasks;
}
void OAIWorkflowExecutionDetail_openCounts::setOpenDecisionTasks(const qint32 &open_decision_tasks) {
    m_open_decision_tasks = open_decision_tasks;
    m_open_decision_tasks_isSet = true;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_decision_tasks_Set() const{
    return m_open_decision_tasks_isSet;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_decision_tasks_Valid() const{
    return m_open_decision_tasks_isValid;
}

qint32 OAIWorkflowExecutionDetail_openCounts::getOpenTimers() const {
    return m_open_timers;
}
void OAIWorkflowExecutionDetail_openCounts::setOpenTimers(const qint32 &open_timers) {
    m_open_timers = open_timers;
    m_open_timers_isSet = true;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_timers_Set() const{
    return m_open_timers_isSet;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_timers_Valid() const{
    return m_open_timers_isValid;
}

qint32 OAIWorkflowExecutionDetail_openCounts::getOpenChildWorkflowExecutions() const {
    return m_open_child_workflow_executions;
}
void OAIWorkflowExecutionDetail_openCounts::setOpenChildWorkflowExecutions(const qint32 &open_child_workflow_executions) {
    m_open_child_workflow_executions = open_child_workflow_executions;
    m_open_child_workflow_executions_isSet = true;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_child_workflow_executions_Set() const{
    return m_open_child_workflow_executions_isSet;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_child_workflow_executions_Valid() const{
    return m_open_child_workflow_executions_isValid;
}

qint32 OAIWorkflowExecutionDetail_openCounts::getOpenLambdaFunctions() const {
    return m_open_lambda_functions;
}
void OAIWorkflowExecutionDetail_openCounts::setOpenLambdaFunctions(const qint32 &open_lambda_functions) {
    m_open_lambda_functions = open_lambda_functions;
    m_open_lambda_functions_isSet = true;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_lambda_functions_Set() const{
    return m_open_lambda_functions_isSet;
}

bool OAIWorkflowExecutionDetail_openCounts::is_open_lambda_functions_Valid() const{
    return m_open_lambda_functions_isValid;
}

bool OAIWorkflowExecutionDetail_openCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_open_activity_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_decision_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_timers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_child_workflow_executions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_lambda_functions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowExecutionDetail_openCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_open_activity_tasks_isValid && m_open_decision_tasks_isValid && m_open_timers_isValid && m_open_child_workflow_executions_isValid && true;
}

} // namespace OpenAPI
