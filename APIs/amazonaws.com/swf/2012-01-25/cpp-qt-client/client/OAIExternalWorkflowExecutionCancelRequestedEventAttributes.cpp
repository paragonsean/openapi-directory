/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalWorkflowExecutionCancelRequestedEventAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalWorkflowExecutionCancelRequestedEventAttributes::OAIExternalWorkflowExecutionCancelRequestedEventAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalWorkflowExecutionCancelRequestedEventAttributes::OAIExternalWorkflowExecutionCancelRequestedEventAttributes() {
    this->initializeModel();
}

OAIExternalWorkflowExecutionCancelRequestedEventAttributes::~OAIExternalWorkflowExecutionCancelRequestedEventAttributes() {}

void OAIExternalWorkflowExecutionCancelRequestedEventAttributes::initializeModel() {

    m_workflow_execution_isSet = false;
    m_workflow_execution_isValid = false;

    m_initiated_event_id_isSet = false;
    m_initiated_event_id_isValid = false;
}

void OAIExternalWorkflowExecutionCancelRequestedEventAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalWorkflowExecutionCancelRequestedEventAttributes::fromJsonObject(QJsonObject json) {

    m_workflow_execution_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution, json[QString("workflowExecution")]);
    m_workflow_execution_isSet = !json[QString("workflowExecution")].isNull() && m_workflow_execution_isValid;

    m_initiated_event_id_isValid = ::OpenAPI::fromJsonValue(m_initiated_event_id, json[QString("initiatedEventId")]);
    m_initiated_event_id_isSet = !json[QString("initiatedEventId")].isNull() && m_initiated_event_id_isValid;
}

QString OAIExternalWorkflowExecutionCancelRequestedEventAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalWorkflowExecutionCancelRequestedEventAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_workflow_execution.isSet()) {
        obj.insert(QString("workflowExecution"), ::OpenAPI::toJsonValue(m_workflow_execution));
    }
    if (m_initiated_event_id_isSet) {
        obj.insert(QString("initiatedEventId"), ::OpenAPI::toJsonValue(m_initiated_event_id));
    }
    return obj;
}

OAIExternalWorkflowExecutionCancelRequestedEventAttributes_workflowExecution OAIExternalWorkflowExecutionCancelRequestedEventAttributes::getWorkflowExecution() const {
    return m_workflow_execution;
}
void OAIExternalWorkflowExecutionCancelRequestedEventAttributes::setWorkflowExecution(const OAIExternalWorkflowExecutionCancelRequestedEventAttributes_workflowExecution &workflow_execution) {
    m_workflow_execution = workflow_execution;
    m_workflow_execution_isSet = true;
}

bool OAIExternalWorkflowExecutionCancelRequestedEventAttributes::is_workflow_execution_Set() const{
    return m_workflow_execution_isSet;
}

bool OAIExternalWorkflowExecutionCancelRequestedEventAttributes::is_workflow_execution_Valid() const{
    return m_workflow_execution_isValid;
}

qint32 OAIExternalWorkflowExecutionCancelRequestedEventAttributes::getInitiatedEventId() const {
    return m_initiated_event_id;
}
void OAIExternalWorkflowExecutionCancelRequestedEventAttributes::setInitiatedEventId(const qint32 &initiated_event_id) {
    m_initiated_event_id = initiated_event_id;
    m_initiated_event_id_isSet = true;
}

bool OAIExternalWorkflowExecutionCancelRequestedEventAttributes::is_initiated_event_id_Set() const{
    return m_initiated_event_id_isSet;
}

bool OAIExternalWorkflowExecutionCancelRequestedEventAttributes::is_initiated_event_id_Valid() const{
    return m_initiated_event_id_isValid;
}

bool OAIExternalWorkflowExecutionCancelRequestedEventAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workflow_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiated_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalWorkflowExecutionCancelRequestedEventAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workflow_execution_isValid && m_initiated_event_id_isValid && true;
}

} // namespace OpenAPI
