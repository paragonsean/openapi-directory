/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryEvent_workflowExecutionStartedEventAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryEvent_workflowExecutionStartedEventAttributes::OAIHistoryEvent_workflowExecutionStartedEventAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryEvent_workflowExecutionStartedEventAttributes::OAIHistoryEvent_workflowExecutionStartedEventAttributes() {
    this->initializeModel();
}

OAIHistoryEvent_workflowExecutionStartedEventAttributes::~OAIHistoryEvent_workflowExecutionStartedEventAttributes() {}

void OAIHistoryEvent_workflowExecutionStartedEventAttributes::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;

    m_execution_start_to_close_timeout_isSet = false;
    m_execution_start_to_close_timeout_isValid = false;

    m_task_start_to_close_timeout_isSet = false;
    m_task_start_to_close_timeout_isValid = false;

    m_child_policy_isSet = false;
    m_child_policy_isValid = false;

    m_task_list_isSet = false;
    m_task_list_isValid = false;

    m_task_priority_isSet = false;
    m_task_priority_isValid = false;

    m_workflow_type_isSet = false;
    m_workflow_type_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_continued_execution_run_id_isSet = false;
    m_continued_execution_run_id_isValid = false;

    m_parent_workflow_execution_isSet = false;
    m_parent_workflow_execution_isValid = false;

    m_parent_initiated_event_id_isSet = false;
    m_parent_initiated_event_id_isValid = false;

    m_lambda_role_isSet = false;
    m_lambda_role_isValid = false;
}

void OAIHistoryEvent_workflowExecutionStartedEventAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryEvent_workflowExecutionStartedEventAttributes::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_execution_start_to_close_timeout_isValid = ::OpenAPI::fromJsonValue(m_execution_start_to_close_timeout, json[QString("executionStartToCloseTimeout")]);
    m_execution_start_to_close_timeout_isSet = !json[QString("executionStartToCloseTimeout")].isNull() && m_execution_start_to_close_timeout_isValid;

    m_task_start_to_close_timeout_isValid = ::OpenAPI::fromJsonValue(m_task_start_to_close_timeout, json[QString("taskStartToCloseTimeout")]);
    m_task_start_to_close_timeout_isSet = !json[QString("taskStartToCloseTimeout")].isNull() && m_task_start_to_close_timeout_isValid;

    m_child_policy_isValid = ::OpenAPI::fromJsonValue(m_child_policy, json[QString("childPolicy")]);
    m_child_policy_isSet = !json[QString("childPolicy")].isNull() && m_child_policy_isValid;

    m_task_list_isValid = ::OpenAPI::fromJsonValue(m_task_list, json[QString("taskList")]);
    m_task_list_isSet = !json[QString("taskList")].isNull() && m_task_list_isValid;

    m_task_priority_isValid = ::OpenAPI::fromJsonValue(m_task_priority, json[QString("taskPriority")]);
    m_task_priority_isSet = !json[QString("taskPriority")].isNull() && m_task_priority_isValid;

    m_workflow_type_isValid = ::OpenAPI::fromJsonValue(m_workflow_type, json[QString("workflowType")]);
    m_workflow_type_isSet = !json[QString("workflowType")].isNull() && m_workflow_type_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tagList")]);
    m_tag_list_isSet = !json[QString("tagList")].isNull() && m_tag_list_isValid;

    m_continued_execution_run_id_isValid = ::OpenAPI::fromJsonValue(m_continued_execution_run_id, json[QString("continuedExecutionRunId")]);
    m_continued_execution_run_id_isSet = !json[QString("continuedExecutionRunId")].isNull() && m_continued_execution_run_id_isValid;

    m_parent_workflow_execution_isValid = ::OpenAPI::fromJsonValue(m_parent_workflow_execution, json[QString("parentWorkflowExecution")]);
    m_parent_workflow_execution_isSet = !json[QString("parentWorkflowExecution")].isNull() && m_parent_workflow_execution_isValid;

    m_parent_initiated_event_id_isValid = ::OpenAPI::fromJsonValue(m_parent_initiated_event_id, json[QString("parentInitiatedEventId")]);
    m_parent_initiated_event_id_isSet = !json[QString("parentInitiatedEventId")].isNull() && m_parent_initiated_event_id_isValid;

    m_lambda_role_isValid = ::OpenAPI::fromJsonValue(m_lambda_role, json[QString("lambdaRole")]);
    m_lambda_role_isSet = !json[QString("lambdaRole")].isNull() && m_lambda_role_isValid;
}

QString OAIHistoryEvent_workflowExecutionStartedEventAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryEvent_workflowExecutionStartedEventAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_execution_start_to_close_timeout_isSet) {
        obj.insert(QString("executionStartToCloseTimeout"), ::OpenAPI::toJsonValue(m_execution_start_to_close_timeout));
    }
    if (m_task_start_to_close_timeout_isSet) {
        obj.insert(QString("taskStartToCloseTimeout"), ::OpenAPI::toJsonValue(m_task_start_to_close_timeout));
    }
    if (m_child_policy.isSet()) {
        obj.insert(QString("childPolicy"), ::OpenAPI::toJsonValue(m_child_policy));
    }
    if (m_task_list.isSet()) {
        obj.insert(QString("taskList"), ::OpenAPI::toJsonValue(m_task_list));
    }
    if (m_task_priority_isSet) {
        obj.insert(QString("taskPriority"), ::OpenAPI::toJsonValue(m_task_priority));
    }
    if (m_workflow_type.isSet()) {
        obj.insert(QString("workflowType"), ::OpenAPI::toJsonValue(m_workflow_type));
    }
    if (m_tag_list.isSet()) {
        obj.insert(QString("tagList"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_continued_execution_run_id_isSet) {
        obj.insert(QString("continuedExecutionRunId"), ::OpenAPI::toJsonValue(m_continued_execution_run_id));
    }
    if (m_parent_workflow_execution.isSet()) {
        obj.insert(QString("parentWorkflowExecution"), ::OpenAPI::toJsonValue(m_parent_workflow_execution));
    }
    if (m_parent_initiated_event_id_isSet) {
        obj.insert(QString("parentInitiatedEventId"), ::OpenAPI::toJsonValue(m_parent_initiated_event_id));
    }
    if (m_lambda_role_isSet) {
        obj.insert(QString("lambdaRole"), ::OpenAPI::toJsonValue(m_lambda_role));
    }
    return obj;
}

QString OAIHistoryEvent_workflowExecutionStartedEventAttributes::getInput() const {
    return m_input;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_input_Set() const{
    return m_input_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIHistoryEvent_workflowExecutionStartedEventAttributes::getExecutionStartToCloseTimeout() const {
    return m_execution_start_to_close_timeout;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setExecutionStartToCloseTimeout(const QString &execution_start_to_close_timeout) {
    m_execution_start_to_close_timeout = execution_start_to_close_timeout;
    m_execution_start_to_close_timeout_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_execution_start_to_close_timeout_Set() const{
    return m_execution_start_to_close_timeout_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_execution_start_to_close_timeout_Valid() const{
    return m_execution_start_to_close_timeout_isValid;
}

QString OAIHistoryEvent_workflowExecutionStartedEventAttributes::getTaskStartToCloseTimeout() const {
    return m_task_start_to_close_timeout;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setTaskStartToCloseTimeout(const QString &task_start_to_close_timeout) {
    m_task_start_to_close_timeout = task_start_to_close_timeout;
    m_task_start_to_close_timeout_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_task_start_to_close_timeout_Set() const{
    return m_task_start_to_close_timeout_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_task_start_to_close_timeout_Valid() const{
    return m_task_start_to_close_timeout_isValid;
}

OAIChildPolicy OAIHistoryEvent_workflowExecutionStartedEventAttributes::getChildPolicy() const {
    return m_child_policy;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setChildPolicy(const OAIChildPolicy &child_policy) {
    m_child_policy = child_policy;
    m_child_policy_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_child_policy_Set() const{
    return m_child_policy_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_child_policy_Valid() const{
    return m_child_policy_isValid;
}

OAIWorkflowExecutionStartedEventAttributes_taskList OAIHistoryEvent_workflowExecutionStartedEventAttributes::getTaskList() const {
    return m_task_list;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setTaskList(const OAIWorkflowExecutionStartedEventAttributes_taskList &task_list) {
    m_task_list = task_list;
    m_task_list_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_task_list_Set() const{
    return m_task_list_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_task_list_Valid() const{
    return m_task_list_isValid;
}

QString OAIHistoryEvent_workflowExecutionStartedEventAttributes::getTaskPriority() const {
    return m_task_priority;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setTaskPriority(const QString &task_priority) {
    m_task_priority = task_priority;
    m_task_priority_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_task_priority_Set() const{
    return m_task_priority_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_task_priority_Valid() const{
    return m_task_priority_isValid;
}

OAIWorkflowExecutionStartedEventAttributes_workflowType OAIHistoryEvent_workflowExecutionStartedEventAttributes::getWorkflowType() const {
    return m_workflow_type;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setWorkflowType(const OAIWorkflowExecutionStartedEventAttributes_workflowType &workflow_type) {
    m_workflow_type = workflow_type;
    m_workflow_type_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_workflow_type_Set() const{
    return m_workflow_type_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_workflow_type_Valid() const{
    return m_workflow_type_isValid;
}

QList OAIHistoryEvent_workflowExecutionStartedEventAttributes::getTagList() const {
    return m_tag_list;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setTagList(const QList &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

QString OAIHistoryEvent_workflowExecutionStartedEventAttributes::getContinuedExecutionRunId() const {
    return m_continued_execution_run_id;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setContinuedExecutionRunId(const QString &continued_execution_run_id) {
    m_continued_execution_run_id = continued_execution_run_id;
    m_continued_execution_run_id_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_continued_execution_run_id_Set() const{
    return m_continued_execution_run_id_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_continued_execution_run_id_Valid() const{
    return m_continued_execution_run_id_isValid;
}

OAIWorkflowExecutionStartedEventAttributes_parentWorkflowExecution OAIHistoryEvent_workflowExecutionStartedEventAttributes::getParentWorkflowExecution() const {
    return m_parent_workflow_execution;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setParentWorkflowExecution(const OAIWorkflowExecutionStartedEventAttributes_parentWorkflowExecution &parent_workflow_execution) {
    m_parent_workflow_execution = parent_workflow_execution;
    m_parent_workflow_execution_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_parent_workflow_execution_Set() const{
    return m_parent_workflow_execution_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_parent_workflow_execution_Valid() const{
    return m_parent_workflow_execution_isValid;
}

qint32 OAIHistoryEvent_workflowExecutionStartedEventAttributes::getParentInitiatedEventId() const {
    return m_parent_initiated_event_id;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setParentInitiatedEventId(const qint32 &parent_initiated_event_id) {
    m_parent_initiated_event_id = parent_initiated_event_id;
    m_parent_initiated_event_id_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_parent_initiated_event_id_Set() const{
    return m_parent_initiated_event_id_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_parent_initiated_event_id_Valid() const{
    return m_parent_initiated_event_id_isValid;
}

QString OAIHistoryEvent_workflowExecutionStartedEventAttributes::getLambdaRole() const {
    return m_lambda_role;
}
void OAIHistoryEvent_workflowExecutionStartedEventAttributes::setLambdaRole(const QString &lambda_role) {
    m_lambda_role = lambda_role;
    m_lambda_role_isSet = true;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_lambda_role_Set() const{
    return m_lambda_role_isSet;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::is_lambda_role_Valid() const{
    return m_lambda_role_isValid;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_start_to_close_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_start_to_close_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_continued_execution_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_workflow_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_initiated_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryEvent_workflowExecutionStartedEventAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_child_policy_isValid && m_task_list_isValid && m_workflow_type_isValid && true;
}

} // namespace OpenAPI
