/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListWorkflowTypesInput.h
 *
 * 
 */

#ifndef OAIListWorkflowTypesInput_H
#define OAIListWorkflowTypesInput_H

#include <QJsonObject>

#include "OAIRegistrationStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListWorkflowTypesInput : public OAIObject {
public:
    OAIListWorkflowTypesInput();
    OAIListWorkflowTypesInput(QString json);
    ~OAIListWorkflowTypesInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIRegistrationStatus getRegistrationStatus() const;
    void setRegistrationStatus(const OAIRegistrationStatus &registration_status);
    bool is_registration_status_Set() const;
    bool is_registration_status_Valid() const;

    QString getNextPageToken() const;
    void setNextPageToken(const QString &next_page_token);
    bool is_next_page_token_Set() const;
    bool is_next_page_token_Valid() const;

    qint32 getMaximumPageSize() const;
    void setMaximumPageSize(const qint32 &maximum_page_size);
    bool is_maximum_page_size_Set() const;
    bool is_maximum_page_size_Valid() const;

    bool getReverseOrder() const;
    void setReverseOrder(const bool &reverse_order);
    bool is_reverse_order_Set() const;
    bool is_reverse_order_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIRegistrationStatus m_registration_status;
    bool m_registration_status_isSet;
    bool m_registration_status_isValid;

    QString m_next_page_token;
    bool m_next_page_token_isSet;
    bool m_next_page_token_isValid;

    qint32 m_maximum_page_size;
    bool m_maximum_page_size_isSet;
    bool m_maximum_page_size_isValid;

    bool m_reverse_order;
    bool m_reverse_order_isSet;
    bool m_reverse_order_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListWorkflowTypesInput)

#endif // OAIListWorkflowTypesInput_H
