/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIActivityTaskScheduledEventAttributes.h
 *
 * Provides the details of the &lt;code&gt;ActivityTaskScheduled&lt;/code&gt; event.
 */

#ifndef OAIActivityTaskScheduledEventAttributes_H
#define OAIActivityTaskScheduledEventAttributes_H

#include <QJsonObject>

#include "OAIActivityTaskScheduledEventAttributes_activityType.h"
#include "OAIActivityTaskScheduledEventAttributes_taskList.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIActivityTaskScheduledEventAttributes_activityType;
class OAIActivityTaskScheduledEventAttributes_taskList;

class OAIActivityTaskScheduledEventAttributes : public OAIObject {
public:
    OAIActivityTaskScheduledEventAttributes();
    OAIActivityTaskScheduledEventAttributes(QString json);
    ~OAIActivityTaskScheduledEventAttributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIActivityTaskScheduledEventAttributes_activityType getActivityType() const;
    void setActivityType(const OAIActivityTaskScheduledEventAttributes_activityType &activity_type);
    bool is_activity_type_Set() const;
    bool is_activity_type_Valid() const;

    QString getActivityId() const;
    void setActivityId(const QString &activity_id);
    bool is_activity_id_Set() const;
    bool is_activity_id_Valid() const;

    QString getInput() const;
    void setInput(const QString &input);
    bool is_input_Set() const;
    bool is_input_Valid() const;

    QString getControl() const;
    void setControl(const QString &control);
    bool is_control_Set() const;
    bool is_control_Valid() const;

    QString getScheduleToStartTimeout() const;
    void setScheduleToStartTimeout(const QString &schedule_to_start_timeout);
    bool is_schedule_to_start_timeout_Set() const;
    bool is_schedule_to_start_timeout_Valid() const;

    QString getScheduleToCloseTimeout() const;
    void setScheduleToCloseTimeout(const QString &schedule_to_close_timeout);
    bool is_schedule_to_close_timeout_Set() const;
    bool is_schedule_to_close_timeout_Valid() const;

    QString getStartToCloseTimeout() const;
    void setStartToCloseTimeout(const QString &start_to_close_timeout);
    bool is_start_to_close_timeout_Set() const;
    bool is_start_to_close_timeout_Valid() const;

    OAIActivityTaskScheduledEventAttributes_taskList getTaskList() const;
    void setTaskList(const OAIActivityTaskScheduledEventAttributes_taskList &task_list);
    bool is_task_list_Set() const;
    bool is_task_list_Valid() const;

    QString getTaskPriority() const;
    void setTaskPriority(const QString &task_priority);
    bool is_task_priority_Set() const;
    bool is_task_priority_Valid() const;

    qint32 getDecisionTaskCompletedEventId() const;
    void setDecisionTaskCompletedEventId(const qint32 &decision_task_completed_event_id);
    bool is_decision_task_completed_event_id_Set() const;
    bool is_decision_task_completed_event_id_Valid() const;

    QString getHeartbeatTimeout() const;
    void setHeartbeatTimeout(const QString &heartbeat_timeout);
    bool is_heartbeat_timeout_Set() const;
    bool is_heartbeat_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIActivityTaskScheduledEventAttributes_activityType m_activity_type;
    bool m_activity_type_isSet;
    bool m_activity_type_isValid;

    QString m_activity_id;
    bool m_activity_id_isSet;
    bool m_activity_id_isValid;

    QString m_input;
    bool m_input_isSet;
    bool m_input_isValid;

    QString m_control;
    bool m_control_isSet;
    bool m_control_isValid;

    QString m_schedule_to_start_timeout;
    bool m_schedule_to_start_timeout_isSet;
    bool m_schedule_to_start_timeout_isValid;

    QString m_schedule_to_close_timeout;
    bool m_schedule_to_close_timeout_isSet;
    bool m_schedule_to_close_timeout_isValid;

    QString m_start_to_close_timeout;
    bool m_start_to_close_timeout_isSet;
    bool m_start_to_close_timeout_isValid;

    OAIActivityTaskScheduledEventAttributes_taskList m_task_list;
    bool m_task_list_isSet;
    bool m_task_list_isValid;

    QString m_task_priority;
    bool m_task_priority_isSet;
    bool m_task_priority_isValid;

    qint32 m_decision_task_completed_event_id;
    bool m_decision_task_completed_event_id_isSet;
    bool m_decision_task_completed_event_id_isValid;

    QString m_heartbeat_timeout;
    bool m_heartbeat_timeout_isSet;
    bool m_heartbeat_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIActivityTaskScheduledEventAttributes)

#endif // OAIActivityTaskScheduledEventAttributes_H
