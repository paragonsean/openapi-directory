/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkflowExecutionOpenCounts.h
 *
 * Contains the counts of open tasks, child workflow executions and timers for a workflow execution.
 */

#ifndef OAIWorkflowExecutionOpenCounts_H
#define OAIWorkflowExecutionOpenCounts_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWorkflowExecutionOpenCounts : public OAIObject {
public:
    OAIWorkflowExecutionOpenCounts();
    OAIWorkflowExecutionOpenCounts(QString json);
    ~OAIWorkflowExecutionOpenCounts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getOpenActivityTasks() const;
    void setOpenActivityTasks(const qint32 &open_activity_tasks);
    bool is_open_activity_tasks_Set() const;
    bool is_open_activity_tasks_Valid() const;

    qint32 getOpenDecisionTasks() const;
    void setOpenDecisionTasks(const qint32 &open_decision_tasks);
    bool is_open_decision_tasks_Set() const;
    bool is_open_decision_tasks_Valid() const;

    qint32 getOpenTimers() const;
    void setOpenTimers(const qint32 &open_timers);
    bool is_open_timers_Set() const;
    bool is_open_timers_Valid() const;

    qint32 getOpenChildWorkflowExecutions() const;
    void setOpenChildWorkflowExecutions(const qint32 &open_child_workflow_executions);
    bool is_open_child_workflow_executions_Set() const;
    bool is_open_child_workflow_executions_Valid() const;

    qint32 getOpenLambdaFunctions() const;
    void setOpenLambdaFunctions(const qint32 &open_lambda_functions);
    bool is_open_lambda_functions_Set() const;
    bool is_open_lambda_functions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_open_activity_tasks;
    bool m_open_activity_tasks_isSet;
    bool m_open_activity_tasks_isValid;

    qint32 m_open_decision_tasks;
    bool m_open_decision_tasks_isSet;
    bool m_open_decision_tasks_isValid;

    qint32 m_open_timers;
    bool m_open_timers_isSet;
    bool m_open_timers_isValid;

    qint32 m_open_child_workflow_executions;
    bool m_open_child_workflow_executions_isSet;
    bool m_open_child_workflow_executions_isValid;

    qint32 m_open_lambda_functions;
    bool m_open_lambda_functions_isSet;
    bool m_open_lambda_functions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkflowExecutionOpenCounts)

#endif // OAIWorkflowExecutionOpenCounts_H
