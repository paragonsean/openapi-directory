/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDecision_startTimerDecisionAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDecision_startTimerDecisionAttributes::OAIDecision_startTimerDecisionAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDecision_startTimerDecisionAttributes::OAIDecision_startTimerDecisionAttributes() {
    this->initializeModel();
}

OAIDecision_startTimerDecisionAttributes::~OAIDecision_startTimerDecisionAttributes() {}

void OAIDecision_startTimerDecisionAttributes::initializeModel() {

    m_timer_id_isSet = false;
    m_timer_id_isValid = false;

    m_control_isSet = false;
    m_control_isValid = false;

    m_start_to_fire_timeout_isSet = false;
    m_start_to_fire_timeout_isValid = false;
}

void OAIDecision_startTimerDecisionAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDecision_startTimerDecisionAttributes::fromJsonObject(QJsonObject json) {

    m_timer_id_isValid = ::OpenAPI::fromJsonValue(m_timer_id, json[QString("timerId")]);
    m_timer_id_isSet = !json[QString("timerId")].isNull() && m_timer_id_isValid;

    m_control_isValid = ::OpenAPI::fromJsonValue(m_control, json[QString("control")]);
    m_control_isSet = !json[QString("control")].isNull() && m_control_isValid;

    m_start_to_fire_timeout_isValid = ::OpenAPI::fromJsonValue(m_start_to_fire_timeout, json[QString("startToFireTimeout")]);
    m_start_to_fire_timeout_isSet = !json[QString("startToFireTimeout")].isNull() && m_start_to_fire_timeout_isValid;
}

QString OAIDecision_startTimerDecisionAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDecision_startTimerDecisionAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_timer_id_isSet) {
        obj.insert(QString("timerId"), ::OpenAPI::toJsonValue(m_timer_id));
    }
    if (m_control_isSet) {
        obj.insert(QString("control"), ::OpenAPI::toJsonValue(m_control));
    }
    if (m_start_to_fire_timeout_isSet) {
        obj.insert(QString("startToFireTimeout"), ::OpenAPI::toJsonValue(m_start_to_fire_timeout));
    }
    return obj;
}

QString OAIDecision_startTimerDecisionAttributes::getTimerId() const {
    return m_timer_id;
}
void OAIDecision_startTimerDecisionAttributes::setTimerId(const QString &timer_id) {
    m_timer_id = timer_id;
    m_timer_id_isSet = true;
}

bool OAIDecision_startTimerDecisionAttributes::is_timer_id_Set() const{
    return m_timer_id_isSet;
}

bool OAIDecision_startTimerDecisionAttributes::is_timer_id_Valid() const{
    return m_timer_id_isValid;
}

QString OAIDecision_startTimerDecisionAttributes::getControl() const {
    return m_control;
}
void OAIDecision_startTimerDecisionAttributes::setControl(const QString &control) {
    m_control = control;
    m_control_isSet = true;
}

bool OAIDecision_startTimerDecisionAttributes::is_control_Set() const{
    return m_control_isSet;
}

bool OAIDecision_startTimerDecisionAttributes::is_control_Valid() const{
    return m_control_isValid;
}

QString OAIDecision_startTimerDecisionAttributes::getStartToFireTimeout() const {
    return m_start_to_fire_timeout;
}
void OAIDecision_startTimerDecisionAttributes::setStartToFireTimeout(const QString &start_to_fire_timeout) {
    m_start_to_fire_timeout = start_to_fire_timeout;
    m_start_to_fire_timeout_isSet = true;
}

bool OAIDecision_startTimerDecisionAttributes::is_start_to_fire_timeout_Set() const{
    return m_start_to_fire_timeout_isSet;
}

bool OAIDecision_startTimerDecisionAttributes::is_start_to_fire_timeout_Valid() const{
    return m_start_to_fire_timeout_isValid;
}

bool OAIDecision_startTimerDecisionAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_to_fire_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDecision_startTimerDecisionAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timer_id_isValid && m_start_to_fire_timeout_isValid && true;
}

} // namespace OpenAPI
