/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDecision_scheduleActivityTaskDecisionAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDecision_scheduleActivityTaskDecisionAttributes::OAIDecision_scheduleActivityTaskDecisionAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDecision_scheduleActivityTaskDecisionAttributes::OAIDecision_scheduleActivityTaskDecisionAttributes() {
    this->initializeModel();
}

OAIDecision_scheduleActivityTaskDecisionAttributes::~OAIDecision_scheduleActivityTaskDecisionAttributes() {}

void OAIDecision_scheduleActivityTaskDecisionAttributes::initializeModel() {

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_control_isSet = false;
    m_control_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_schedule_to_close_timeout_isSet = false;
    m_schedule_to_close_timeout_isValid = false;

    m_task_list_isSet = false;
    m_task_list_isValid = false;

    m_task_priority_isSet = false;
    m_task_priority_isValid = false;

    m_schedule_to_start_timeout_isSet = false;
    m_schedule_to_start_timeout_isValid = false;

    m_start_to_close_timeout_isSet = false;
    m_start_to_close_timeout_isValid = false;

    m_heartbeat_timeout_isSet = false;
    m_heartbeat_timeout_isValid = false;
}

void OAIDecision_scheduleActivityTaskDecisionAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDecision_scheduleActivityTaskDecisionAttributes::fromJsonObject(QJsonObject json) {

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("activityId")]);
    m_activity_id_isSet = !json[QString("activityId")].isNull() && m_activity_id_isValid;

    m_control_isValid = ::OpenAPI::fromJsonValue(m_control, json[QString("control")]);
    m_control_isSet = !json[QString("control")].isNull() && m_control_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_schedule_to_close_timeout_isValid = ::OpenAPI::fromJsonValue(m_schedule_to_close_timeout, json[QString("scheduleToCloseTimeout")]);
    m_schedule_to_close_timeout_isSet = !json[QString("scheduleToCloseTimeout")].isNull() && m_schedule_to_close_timeout_isValid;

    m_task_list_isValid = ::OpenAPI::fromJsonValue(m_task_list, json[QString("taskList")]);
    m_task_list_isSet = !json[QString("taskList")].isNull() && m_task_list_isValid;

    m_task_priority_isValid = ::OpenAPI::fromJsonValue(m_task_priority, json[QString("taskPriority")]);
    m_task_priority_isSet = !json[QString("taskPriority")].isNull() && m_task_priority_isValid;

    m_schedule_to_start_timeout_isValid = ::OpenAPI::fromJsonValue(m_schedule_to_start_timeout, json[QString("scheduleToStartTimeout")]);
    m_schedule_to_start_timeout_isSet = !json[QString("scheduleToStartTimeout")].isNull() && m_schedule_to_start_timeout_isValid;

    m_start_to_close_timeout_isValid = ::OpenAPI::fromJsonValue(m_start_to_close_timeout, json[QString("startToCloseTimeout")]);
    m_start_to_close_timeout_isSet = !json[QString("startToCloseTimeout")].isNull() && m_start_to_close_timeout_isValid;

    m_heartbeat_timeout_isValid = ::OpenAPI::fromJsonValue(m_heartbeat_timeout, json[QString("heartbeatTimeout")]);
    m_heartbeat_timeout_isSet = !json[QString("heartbeatTimeout")].isNull() && m_heartbeat_timeout_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDecision_scheduleActivityTaskDecisionAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_type.isSet()) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_activity_id_isSet) {
        obj.insert(QString("activityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_control_isSet) {
        obj.insert(QString("control"), ::OpenAPI::toJsonValue(m_control));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_schedule_to_close_timeout_isSet) {
        obj.insert(QString("scheduleToCloseTimeout"), ::OpenAPI::toJsonValue(m_schedule_to_close_timeout));
    }
    if (m_task_list.isSet()) {
        obj.insert(QString("taskList"), ::OpenAPI::toJsonValue(m_task_list));
    }
    if (m_task_priority_isSet) {
        obj.insert(QString("taskPriority"), ::OpenAPI::toJsonValue(m_task_priority));
    }
    if (m_schedule_to_start_timeout_isSet) {
        obj.insert(QString("scheduleToStartTimeout"), ::OpenAPI::toJsonValue(m_schedule_to_start_timeout));
    }
    if (m_start_to_close_timeout_isSet) {
        obj.insert(QString("startToCloseTimeout"), ::OpenAPI::toJsonValue(m_start_to_close_timeout));
    }
    if (m_heartbeat_timeout_isSet) {
        obj.insert(QString("heartbeatTimeout"), ::OpenAPI::toJsonValue(m_heartbeat_timeout));
    }
    return obj;
}

OAIScheduleActivityTaskDecisionAttributes_activityType OAIDecision_scheduleActivityTaskDecisionAttributes::getActivityType() const {
    return m_activity_type;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setActivityType(const OAIScheduleActivityTaskDecisionAttributes_activityType &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::getActivityId() const {
    return m_activity_id;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::getControl() const {
    return m_control;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setControl(const QString &control) {
    m_control = control;
    m_control_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_control_Set() const{
    return m_control_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_control_Valid() const{
    return m_control_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::getInput() const {
    return m_input;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_input_Set() const{
    return m_input_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::getScheduleToCloseTimeout() const {
    return m_schedule_to_close_timeout;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setScheduleToCloseTimeout(const QString &schedule_to_close_timeout) {
    m_schedule_to_close_timeout = schedule_to_close_timeout;
    m_schedule_to_close_timeout_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_schedule_to_close_timeout_Set() const{
    return m_schedule_to_close_timeout_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_schedule_to_close_timeout_Valid() const{
    return m_schedule_to_close_timeout_isValid;
}

OAIScheduleActivityTaskDecisionAttributes_taskList OAIDecision_scheduleActivityTaskDecisionAttributes::getTaskList() const {
    return m_task_list;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setTaskList(const OAIScheduleActivityTaskDecisionAttributes_taskList &task_list) {
    m_task_list = task_list;
    m_task_list_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_task_list_Set() const{
    return m_task_list_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_task_list_Valid() const{
    return m_task_list_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::getTaskPriority() const {
    return m_task_priority;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setTaskPriority(const QString &task_priority) {
    m_task_priority = task_priority;
    m_task_priority_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_task_priority_Set() const{
    return m_task_priority_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_task_priority_Valid() const{
    return m_task_priority_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::getScheduleToStartTimeout() const {
    return m_schedule_to_start_timeout;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setScheduleToStartTimeout(const QString &schedule_to_start_timeout) {
    m_schedule_to_start_timeout = schedule_to_start_timeout;
    m_schedule_to_start_timeout_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_schedule_to_start_timeout_Set() const{
    return m_schedule_to_start_timeout_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_schedule_to_start_timeout_Valid() const{
    return m_schedule_to_start_timeout_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::getStartToCloseTimeout() const {
    return m_start_to_close_timeout;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setStartToCloseTimeout(const QString &start_to_close_timeout) {
    m_start_to_close_timeout = start_to_close_timeout;
    m_start_to_close_timeout_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_start_to_close_timeout_Set() const{
    return m_start_to_close_timeout_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_start_to_close_timeout_Valid() const{
    return m_start_to_close_timeout_isValid;
}

QString OAIDecision_scheduleActivityTaskDecisionAttributes::getHeartbeatTimeout() const {
    return m_heartbeat_timeout;
}
void OAIDecision_scheduleActivityTaskDecisionAttributes::setHeartbeatTimeout(const QString &heartbeat_timeout) {
    m_heartbeat_timeout = heartbeat_timeout;
    m_heartbeat_timeout_isSet = true;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_heartbeat_timeout_Set() const{
    return m_heartbeat_timeout_isSet;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::is_heartbeat_timeout_Valid() const{
    return m_heartbeat_timeout_isValid;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_to_close_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_to_start_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_to_close_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_heartbeat_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDecision_scheduleActivityTaskDecisionAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_type_isValid && m_activity_id_isValid && true;
}

} // namespace OpenAPI
