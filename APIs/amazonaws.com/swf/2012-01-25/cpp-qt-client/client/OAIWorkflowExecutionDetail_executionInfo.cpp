/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowExecutionDetail_executionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowExecutionDetail_executionInfo::OAIWorkflowExecutionDetail_executionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowExecutionDetail_executionInfo::OAIWorkflowExecutionDetail_executionInfo() {
    this->initializeModel();
}

OAIWorkflowExecutionDetail_executionInfo::~OAIWorkflowExecutionDetail_executionInfo() {}

void OAIWorkflowExecutionDetail_executionInfo::initializeModel() {

    m_execution_isSet = false;
    m_execution_isValid = false;

    m_workflow_type_isSet = false;
    m_workflow_type_isValid = false;

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;

    m_close_timestamp_isSet = false;
    m_close_timestamp_isValid = false;

    m_execution_status_isSet = false;
    m_execution_status_isValid = false;

    m_close_status_isSet = false;
    m_close_status_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_cancel_requested_isSet = false;
    m_cancel_requested_isValid = false;
}

void OAIWorkflowExecutionDetail_executionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowExecutionDetail_executionInfo::fromJsonObject(QJsonObject json) {

    m_execution_isValid = ::OpenAPI::fromJsonValue(m_execution, json[QString("execution")]);
    m_execution_isSet = !json[QString("execution")].isNull() && m_execution_isValid;

    m_workflow_type_isValid = ::OpenAPI::fromJsonValue(m_workflow_type, json[QString("workflowType")]);
    m_workflow_type_isSet = !json[QString("workflowType")].isNull() && m_workflow_type_isValid;

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("startTimestamp")]);
    m_start_timestamp_isSet = !json[QString("startTimestamp")].isNull() && m_start_timestamp_isValid;

    m_close_timestamp_isValid = ::OpenAPI::fromJsonValue(m_close_timestamp, json[QString("closeTimestamp")]);
    m_close_timestamp_isSet = !json[QString("closeTimestamp")].isNull() && m_close_timestamp_isValid;

    m_execution_status_isValid = ::OpenAPI::fromJsonValue(m_execution_status, json[QString("executionStatus")]);
    m_execution_status_isSet = !json[QString("executionStatus")].isNull() && m_execution_status_isValid;

    m_close_status_isValid = ::OpenAPI::fromJsonValue(m_close_status, json[QString("closeStatus")]);
    m_close_status_isSet = !json[QString("closeStatus")].isNull() && m_close_status_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tagList")]);
    m_tag_list_isSet = !json[QString("tagList")].isNull() && m_tag_list_isValid;

    m_cancel_requested_isValid = ::OpenAPI::fromJsonValue(m_cancel_requested, json[QString("cancelRequested")]);
    m_cancel_requested_isSet = !json[QString("cancelRequested")].isNull() && m_cancel_requested_isValid;
}

QString OAIWorkflowExecutionDetail_executionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowExecutionDetail_executionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_execution.isSet()) {
        obj.insert(QString("execution"), ::OpenAPI::toJsonValue(m_execution));
    }
    if (m_workflow_type.isSet()) {
        obj.insert(QString("workflowType"), ::OpenAPI::toJsonValue(m_workflow_type));
    }
    if (m_start_timestamp_isSet) {
        obj.insert(QString("startTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    if (m_close_timestamp_isSet) {
        obj.insert(QString("closeTimestamp"), ::OpenAPI::toJsonValue(m_close_timestamp));
    }
    if (m_execution_status.isSet()) {
        obj.insert(QString("executionStatus"), ::OpenAPI::toJsonValue(m_execution_status));
    }
    if (m_close_status.isSet()) {
        obj.insert(QString("closeStatus"), ::OpenAPI::toJsonValue(m_close_status));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_tag_list.isSet()) {
        obj.insert(QString("tagList"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_cancel_requested_isSet) {
        obj.insert(QString("cancelRequested"), ::OpenAPI::toJsonValue(m_cancel_requested));
    }
    return obj;
}

OAIWorkflowExecutionInfo_execution OAIWorkflowExecutionDetail_executionInfo::getExecution() const {
    return m_execution;
}
void OAIWorkflowExecutionDetail_executionInfo::setExecution(const OAIWorkflowExecutionInfo_execution &execution) {
    m_execution = execution;
    m_execution_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_execution_Set() const{
    return m_execution_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_execution_Valid() const{
    return m_execution_isValid;
}

OAIWorkflowExecutionInfo_workflowType OAIWorkflowExecutionDetail_executionInfo::getWorkflowType() const {
    return m_workflow_type;
}
void OAIWorkflowExecutionDetail_executionInfo::setWorkflowType(const OAIWorkflowExecutionInfo_workflowType &workflow_type) {
    m_workflow_type = workflow_type;
    m_workflow_type_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_workflow_type_Set() const{
    return m_workflow_type_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_workflow_type_Valid() const{
    return m_workflow_type_isValid;
}

QDateTime OAIWorkflowExecutionDetail_executionInfo::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIWorkflowExecutionDetail_executionInfo::setStartTimestamp(const QDateTime &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

QDateTime OAIWorkflowExecutionDetail_executionInfo::getCloseTimestamp() const {
    return m_close_timestamp;
}
void OAIWorkflowExecutionDetail_executionInfo::setCloseTimestamp(const QDateTime &close_timestamp) {
    m_close_timestamp = close_timestamp;
    m_close_timestamp_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_close_timestamp_Set() const{
    return m_close_timestamp_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_close_timestamp_Valid() const{
    return m_close_timestamp_isValid;
}

OAIExecutionStatus OAIWorkflowExecutionDetail_executionInfo::getExecutionStatus() const {
    return m_execution_status;
}
void OAIWorkflowExecutionDetail_executionInfo::setExecutionStatus(const OAIExecutionStatus &execution_status) {
    m_execution_status = execution_status;
    m_execution_status_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_execution_status_Set() const{
    return m_execution_status_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_execution_status_Valid() const{
    return m_execution_status_isValid;
}

OAICloseStatus OAIWorkflowExecutionDetail_executionInfo::getCloseStatus() const {
    return m_close_status;
}
void OAIWorkflowExecutionDetail_executionInfo::setCloseStatus(const OAICloseStatus &close_status) {
    m_close_status = close_status;
    m_close_status_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_close_status_Set() const{
    return m_close_status_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_close_status_Valid() const{
    return m_close_status_isValid;
}

OAIWorkflowExecutionInfo_parent OAIWorkflowExecutionDetail_executionInfo::getParent() const {
    return m_parent;
}
void OAIWorkflowExecutionDetail_executionInfo::setParent(const OAIWorkflowExecutionInfo_parent &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_parent_Valid() const{
    return m_parent_isValid;
}

QList OAIWorkflowExecutionDetail_executionInfo::getTagList() const {
    return m_tag_list;
}
void OAIWorkflowExecutionDetail_executionInfo::setTagList(const QList &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

bool OAIWorkflowExecutionDetail_executionInfo::getCancelRequested() const {
    return m_cancel_requested;
}
void OAIWorkflowExecutionDetail_executionInfo::setCancelRequested(const bool &cancel_requested) {
    m_cancel_requested = cancel_requested;
    m_cancel_requested_isSet = true;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_cancel_requested_Set() const{
    return m_cancel_requested_isSet;
}

bool OAIWorkflowExecutionDetail_executionInfo::is_cancel_requested_Valid() const{
    return m_cancel_requested_isValid;
}

bool OAIWorkflowExecutionDetail_executionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_requested_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowExecutionDetail_executionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_execution_isValid && m_workflow_type_isValid && m_start_timestamp_isValid && m_execution_status_isValid && true;
}

} // namespace OpenAPI
