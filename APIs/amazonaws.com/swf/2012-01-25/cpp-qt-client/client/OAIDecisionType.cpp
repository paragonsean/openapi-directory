/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDecisionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDecisionType::OAIDecisionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDecisionType::OAIDecisionType() {
    this->initializeModel();
}

OAIDecisionType::~OAIDecisionType() {}

void OAIDecisionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDecisionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDecisionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ScheduleActivityTask", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::SCHEDULEACTIVITYTASK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RequestCancelActivityTask", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::REQUESTCANCELACTIVITYTASK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CompleteWorkflowExecution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::COMPLETEWORKFLOWEXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FailWorkflowExecution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::FAILWORKFLOWEXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CancelWorkflowExecution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::CANCELWORKFLOWEXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ContinueAsNewWorkflowExecution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::CONTINUEASNEWWORKFLOWEXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RecordMarker", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::RECORDMARKER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StartTimer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::STARTTIMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CancelTimer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::CANCELTIMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SignalExternalWorkflowExecution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::SIGNALEXTERNALWORKFLOWEXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RequestCancelExternalWorkflowExecution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::REQUESTCANCELEXTERNALWORKFLOWEXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StartChildWorkflowExecution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::STARTCHILDWORKFLOWEXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ScheduleLambdaFunction", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDecisionType::SCHEDULELAMBDAFUNCTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDecisionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDecisionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDecisionType::SCHEDULEACTIVITYTASK:
            val = "ScheduleActivityTask";
            break;
        case eOAIDecisionType::REQUESTCANCELACTIVITYTASK:
            val = "RequestCancelActivityTask";
            break;
        case eOAIDecisionType::COMPLETEWORKFLOWEXECUTION:
            val = "CompleteWorkflowExecution";
            break;
        case eOAIDecisionType::FAILWORKFLOWEXECUTION:
            val = "FailWorkflowExecution";
            break;
        case eOAIDecisionType::CANCELWORKFLOWEXECUTION:
            val = "CancelWorkflowExecution";
            break;
        case eOAIDecisionType::CONTINUEASNEWWORKFLOWEXECUTION:
            val = "ContinueAsNewWorkflowExecution";
            break;
        case eOAIDecisionType::RECORDMARKER:
            val = "RecordMarker";
            break;
        case eOAIDecisionType::STARTTIMER:
            val = "StartTimer";
            break;
        case eOAIDecisionType::CANCELTIMER:
            val = "CancelTimer";
            break;
        case eOAIDecisionType::SIGNALEXTERNALWORKFLOWEXECUTION:
            val = "SignalExternalWorkflowExecution";
            break;
        case eOAIDecisionType::REQUESTCANCELEXTERNALWORKFLOWEXECUTION:
            val = "RequestCancelExternalWorkflowExecution";
            break;
        case eOAIDecisionType::STARTCHILDWORKFLOWEXECUTION:
            val = "StartChildWorkflowExecution";
            break;
        case eOAIDecisionType::SCHEDULELAMBDAFUNCTION:
            val = "ScheduleLambdaFunction";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDecisionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDecisionType::eOAIDecisionType OAIDecisionType::getValue() const {
    return m_value;
}

void OAIDecisionType::setValue(const OAIDecisionType::eOAIDecisionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDecisionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDecisionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
