/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDecision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDecision::OAIDecision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDecision::OAIDecision() {
    this->initializeModel();
}

OAIDecision::~OAIDecision() {}

void OAIDecision::initializeModel() {

    m_decision_type_isSet = false;
    m_decision_type_isValid = false;

    m_schedule_activity_task_decision_attributes_isSet = false;
    m_schedule_activity_task_decision_attributes_isValid = false;

    m_request_cancel_activity_task_decision_attributes_isSet = false;
    m_request_cancel_activity_task_decision_attributes_isValid = false;

    m_complete_workflow_execution_decision_attributes_isSet = false;
    m_complete_workflow_execution_decision_attributes_isValid = false;

    m_fail_workflow_execution_decision_attributes_isSet = false;
    m_fail_workflow_execution_decision_attributes_isValid = false;

    m_cancel_workflow_execution_decision_attributes_isSet = false;
    m_cancel_workflow_execution_decision_attributes_isValid = false;

    m_continue_as_new_workflow_execution_decision_attributes_isSet = false;
    m_continue_as_new_workflow_execution_decision_attributes_isValid = false;

    m_record_marker_decision_attributes_isSet = false;
    m_record_marker_decision_attributes_isValid = false;

    m_start_timer_decision_attributes_isSet = false;
    m_start_timer_decision_attributes_isValid = false;

    m_cancel_timer_decision_attributes_isSet = false;
    m_cancel_timer_decision_attributes_isValid = false;

    m_signal_external_workflow_execution_decision_attributes_isSet = false;
    m_signal_external_workflow_execution_decision_attributes_isValid = false;

    m_request_cancel_external_workflow_execution_decision_attributes_isSet = false;
    m_request_cancel_external_workflow_execution_decision_attributes_isValid = false;

    m_start_child_workflow_execution_decision_attributes_isSet = false;
    m_start_child_workflow_execution_decision_attributes_isValid = false;

    m_schedule_lambda_function_decision_attributes_isSet = false;
    m_schedule_lambda_function_decision_attributes_isValid = false;
}

void OAIDecision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDecision::fromJsonObject(QJsonObject json) {

    m_decision_type_isValid = ::OpenAPI::fromJsonValue(m_decision_type, json[QString("decisionType")]);
    m_decision_type_isSet = !json[QString("decisionType")].isNull() && m_decision_type_isValid;

    m_schedule_activity_task_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_schedule_activity_task_decision_attributes, json[QString("scheduleActivityTaskDecisionAttributes")]);
    m_schedule_activity_task_decision_attributes_isSet = !json[QString("scheduleActivityTaskDecisionAttributes")].isNull() && m_schedule_activity_task_decision_attributes_isValid;

    m_request_cancel_activity_task_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_cancel_activity_task_decision_attributes, json[QString("requestCancelActivityTaskDecisionAttributes")]);
    m_request_cancel_activity_task_decision_attributes_isSet = !json[QString("requestCancelActivityTaskDecisionAttributes")].isNull() && m_request_cancel_activity_task_decision_attributes_isValid;

    m_complete_workflow_execution_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_complete_workflow_execution_decision_attributes, json[QString("completeWorkflowExecutionDecisionAttributes")]);
    m_complete_workflow_execution_decision_attributes_isSet = !json[QString("completeWorkflowExecutionDecisionAttributes")].isNull() && m_complete_workflow_execution_decision_attributes_isValid;

    m_fail_workflow_execution_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_fail_workflow_execution_decision_attributes, json[QString("failWorkflowExecutionDecisionAttributes")]);
    m_fail_workflow_execution_decision_attributes_isSet = !json[QString("failWorkflowExecutionDecisionAttributes")].isNull() && m_fail_workflow_execution_decision_attributes_isValid;

    m_cancel_workflow_execution_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_cancel_workflow_execution_decision_attributes, json[QString("cancelWorkflowExecutionDecisionAttributes")]);
    m_cancel_workflow_execution_decision_attributes_isSet = !json[QString("cancelWorkflowExecutionDecisionAttributes")].isNull() && m_cancel_workflow_execution_decision_attributes_isValid;

    m_continue_as_new_workflow_execution_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_continue_as_new_workflow_execution_decision_attributes, json[QString("continueAsNewWorkflowExecutionDecisionAttributes")]);
    m_continue_as_new_workflow_execution_decision_attributes_isSet = !json[QString("continueAsNewWorkflowExecutionDecisionAttributes")].isNull() && m_continue_as_new_workflow_execution_decision_attributes_isValid;

    m_record_marker_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_record_marker_decision_attributes, json[QString("recordMarkerDecisionAttributes")]);
    m_record_marker_decision_attributes_isSet = !json[QString("recordMarkerDecisionAttributes")].isNull() && m_record_marker_decision_attributes_isValid;

    m_start_timer_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_start_timer_decision_attributes, json[QString("startTimerDecisionAttributes")]);
    m_start_timer_decision_attributes_isSet = !json[QString("startTimerDecisionAttributes")].isNull() && m_start_timer_decision_attributes_isValid;

    m_cancel_timer_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_cancel_timer_decision_attributes, json[QString("cancelTimerDecisionAttributes")]);
    m_cancel_timer_decision_attributes_isSet = !json[QString("cancelTimerDecisionAttributes")].isNull() && m_cancel_timer_decision_attributes_isValid;

    m_signal_external_workflow_execution_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_signal_external_workflow_execution_decision_attributes, json[QString("signalExternalWorkflowExecutionDecisionAttributes")]);
    m_signal_external_workflow_execution_decision_attributes_isSet = !json[QString("signalExternalWorkflowExecutionDecisionAttributes")].isNull() && m_signal_external_workflow_execution_decision_attributes_isValid;

    m_request_cancel_external_workflow_execution_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_cancel_external_workflow_execution_decision_attributes, json[QString("requestCancelExternalWorkflowExecutionDecisionAttributes")]);
    m_request_cancel_external_workflow_execution_decision_attributes_isSet = !json[QString("requestCancelExternalWorkflowExecutionDecisionAttributes")].isNull() && m_request_cancel_external_workflow_execution_decision_attributes_isValid;

    m_start_child_workflow_execution_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_start_child_workflow_execution_decision_attributes, json[QString("startChildWorkflowExecutionDecisionAttributes")]);
    m_start_child_workflow_execution_decision_attributes_isSet = !json[QString("startChildWorkflowExecutionDecisionAttributes")].isNull() && m_start_child_workflow_execution_decision_attributes_isValid;

    m_schedule_lambda_function_decision_attributes_isValid = ::OpenAPI::fromJsonValue(m_schedule_lambda_function_decision_attributes, json[QString("scheduleLambdaFunctionDecisionAttributes")]);
    m_schedule_lambda_function_decision_attributes_isSet = !json[QString("scheduleLambdaFunctionDecisionAttributes")].isNull() && m_schedule_lambda_function_decision_attributes_isValid;
}

QString OAIDecision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDecision::asJsonObject() const {
    QJsonObject obj;
    if (m_decision_type.isSet()) {
        obj.insert(QString("decisionType"), ::OpenAPI::toJsonValue(m_decision_type));
    }
    if (m_schedule_activity_task_decision_attributes.isSet()) {
        obj.insert(QString("scheduleActivityTaskDecisionAttributes"), ::OpenAPI::toJsonValue(m_schedule_activity_task_decision_attributes));
    }
    if (m_request_cancel_activity_task_decision_attributes.isSet()) {
        obj.insert(QString("requestCancelActivityTaskDecisionAttributes"), ::OpenAPI::toJsonValue(m_request_cancel_activity_task_decision_attributes));
    }
    if (m_complete_workflow_execution_decision_attributes.isSet()) {
        obj.insert(QString("completeWorkflowExecutionDecisionAttributes"), ::OpenAPI::toJsonValue(m_complete_workflow_execution_decision_attributes));
    }
    if (m_fail_workflow_execution_decision_attributes.isSet()) {
        obj.insert(QString("failWorkflowExecutionDecisionAttributes"), ::OpenAPI::toJsonValue(m_fail_workflow_execution_decision_attributes));
    }
    if (m_cancel_workflow_execution_decision_attributes.isSet()) {
        obj.insert(QString("cancelWorkflowExecutionDecisionAttributes"), ::OpenAPI::toJsonValue(m_cancel_workflow_execution_decision_attributes));
    }
    if (m_continue_as_new_workflow_execution_decision_attributes.isSet()) {
        obj.insert(QString("continueAsNewWorkflowExecutionDecisionAttributes"), ::OpenAPI::toJsonValue(m_continue_as_new_workflow_execution_decision_attributes));
    }
    if (m_record_marker_decision_attributes.isSet()) {
        obj.insert(QString("recordMarkerDecisionAttributes"), ::OpenAPI::toJsonValue(m_record_marker_decision_attributes));
    }
    if (m_start_timer_decision_attributes.isSet()) {
        obj.insert(QString("startTimerDecisionAttributes"), ::OpenAPI::toJsonValue(m_start_timer_decision_attributes));
    }
    if (m_cancel_timer_decision_attributes.isSet()) {
        obj.insert(QString("cancelTimerDecisionAttributes"), ::OpenAPI::toJsonValue(m_cancel_timer_decision_attributes));
    }
    if (m_signal_external_workflow_execution_decision_attributes.isSet()) {
        obj.insert(QString("signalExternalWorkflowExecutionDecisionAttributes"), ::OpenAPI::toJsonValue(m_signal_external_workflow_execution_decision_attributes));
    }
    if (m_request_cancel_external_workflow_execution_decision_attributes.isSet()) {
        obj.insert(QString("requestCancelExternalWorkflowExecutionDecisionAttributes"), ::OpenAPI::toJsonValue(m_request_cancel_external_workflow_execution_decision_attributes));
    }
    if (m_start_child_workflow_execution_decision_attributes.isSet()) {
        obj.insert(QString("startChildWorkflowExecutionDecisionAttributes"), ::OpenAPI::toJsonValue(m_start_child_workflow_execution_decision_attributes));
    }
    if (m_schedule_lambda_function_decision_attributes.isSet()) {
        obj.insert(QString("scheduleLambdaFunctionDecisionAttributes"), ::OpenAPI::toJsonValue(m_schedule_lambda_function_decision_attributes));
    }
    return obj;
}

OAIDecisionType OAIDecision::getDecisionType() const {
    return m_decision_type;
}
void OAIDecision::setDecisionType(const OAIDecisionType &decision_type) {
    m_decision_type = decision_type;
    m_decision_type_isSet = true;
}

bool OAIDecision::is_decision_type_Set() const{
    return m_decision_type_isSet;
}

bool OAIDecision::is_decision_type_Valid() const{
    return m_decision_type_isValid;
}

OAIDecision_scheduleActivityTaskDecisionAttributes OAIDecision::getScheduleActivityTaskDecisionAttributes() const {
    return m_schedule_activity_task_decision_attributes;
}
void OAIDecision::setScheduleActivityTaskDecisionAttributes(const OAIDecision_scheduleActivityTaskDecisionAttributes &schedule_activity_task_decision_attributes) {
    m_schedule_activity_task_decision_attributes = schedule_activity_task_decision_attributes;
    m_schedule_activity_task_decision_attributes_isSet = true;
}

bool OAIDecision::is_schedule_activity_task_decision_attributes_Set() const{
    return m_schedule_activity_task_decision_attributes_isSet;
}

bool OAIDecision::is_schedule_activity_task_decision_attributes_Valid() const{
    return m_schedule_activity_task_decision_attributes_isValid;
}

OAIDecision_requestCancelActivityTaskDecisionAttributes OAIDecision::getRequestCancelActivityTaskDecisionAttributes() const {
    return m_request_cancel_activity_task_decision_attributes;
}
void OAIDecision::setRequestCancelActivityTaskDecisionAttributes(const OAIDecision_requestCancelActivityTaskDecisionAttributes &request_cancel_activity_task_decision_attributes) {
    m_request_cancel_activity_task_decision_attributes = request_cancel_activity_task_decision_attributes;
    m_request_cancel_activity_task_decision_attributes_isSet = true;
}

bool OAIDecision::is_request_cancel_activity_task_decision_attributes_Set() const{
    return m_request_cancel_activity_task_decision_attributes_isSet;
}

bool OAIDecision::is_request_cancel_activity_task_decision_attributes_Valid() const{
    return m_request_cancel_activity_task_decision_attributes_isValid;
}

OAIDecision_completeWorkflowExecutionDecisionAttributes OAIDecision::getCompleteWorkflowExecutionDecisionAttributes() const {
    return m_complete_workflow_execution_decision_attributes;
}
void OAIDecision::setCompleteWorkflowExecutionDecisionAttributes(const OAIDecision_completeWorkflowExecutionDecisionAttributes &complete_workflow_execution_decision_attributes) {
    m_complete_workflow_execution_decision_attributes = complete_workflow_execution_decision_attributes;
    m_complete_workflow_execution_decision_attributes_isSet = true;
}

bool OAIDecision::is_complete_workflow_execution_decision_attributes_Set() const{
    return m_complete_workflow_execution_decision_attributes_isSet;
}

bool OAIDecision::is_complete_workflow_execution_decision_attributes_Valid() const{
    return m_complete_workflow_execution_decision_attributes_isValid;
}

OAIDecision_failWorkflowExecutionDecisionAttributes OAIDecision::getFailWorkflowExecutionDecisionAttributes() const {
    return m_fail_workflow_execution_decision_attributes;
}
void OAIDecision::setFailWorkflowExecutionDecisionAttributes(const OAIDecision_failWorkflowExecutionDecisionAttributes &fail_workflow_execution_decision_attributes) {
    m_fail_workflow_execution_decision_attributes = fail_workflow_execution_decision_attributes;
    m_fail_workflow_execution_decision_attributes_isSet = true;
}

bool OAIDecision::is_fail_workflow_execution_decision_attributes_Set() const{
    return m_fail_workflow_execution_decision_attributes_isSet;
}

bool OAIDecision::is_fail_workflow_execution_decision_attributes_Valid() const{
    return m_fail_workflow_execution_decision_attributes_isValid;
}

OAIDecision_cancelWorkflowExecutionDecisionAttributes OAIDecision::getCancelWorkflowExecutionDecisionAttributes() const {
    return m_cancel_workflow_execution_decision_attributes;
}
void OAIDecision::setCancelWorkflowExecutionDecisionAttributes(const OAIDecision_cancelWorkflowExecutionDecisionAttributes &cancel_workflow_execution_decision_attributes) {
    m_cancel_workflow_execution_decision_attributes = cancel_workflow_execution_decision_attributes;
    m_cancel_workflow_execution_decision_attributes_isSet = true;
}

bool OAIDecision::is_cancel_workflow_execution_decision_attributes_Set() const{
    return m_cancel_workflow_execution_decision_attributes_isSet;
}

bool OAIDecision::is_cancel_workflow_execution_decision_attributes_Valid() const{
    return m_cancel_workflow_execution_decision_attributes_isValid;
}

OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes OAIDecision::getContinueAsNewWorkflowExecutionDecisionAttributes() const {
    return m_continue_as_new_workflow_execution_decision_attributes;
}
void OAIDecision::setContinueAsNewWorkflowExecutionDecisionAttributes(const OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes &continue_as_new_workflow_execution_decision_attributes) {
    m_continue_as_new_workflow_execution_decision_attributes = continue_as_new_workflow_execution_decision_attributes;
    m_continue_as_new_workflow_execution_decision_attributes_isSet = true;
}

bool OAIDecision::is_continue_as_new_workflow_execution_decision_attributes_Set() const{
    return m_continue_as_new_workflow_execution_decision_attributes_isSet;
}

bool OAIDecision::is_continue_as_new_workflow_execution_decision_attributes_Valid() const{
    return m_continue_as_new_workflow_execution_decision_attributes_isValid;
}

OAIDecision_recordMarkerDecisionAttributes OAIDecision::getRecordMarkerDecisionAttributes() const {
    return m_record_marker_decision_attributes;
}
void OAIDecision::setRecordMarkerDecisionAttributes(const OAIDecision_recordMarkerDecisionAttributes &record_marker_decision_attributes) {
    m_record_marker_decision_attributes = record_marker_decision_attributes;
    m_record_marker_decision_attributes_isSet = true;
}

bool OAIDecision::is_record_marker_decision_attributes_Set() const{
    return m_record_marker_decision_attributes_isSet;
}

bool OAIDecision::is_record_marker_decision_attributes_Valid() const{
    return m_record_marker_decision_attributes_isValid;
}

OAIDecision_startTimerDecisionAttributes OAIDecision::getStartTimerDecisionAttributes() const {
    return m_start_timer_decision_attributes;
}
void OAIDecision::setStartTimerDecisionAttributes(const OAIDecision_startTimerDecisionAttributes &start_timer_decision_attributes) {
    m_start_timer_decision_attributes = start_timer_decision_attributes;
    m_start_timer_decision_attributes_isSet = true;
}

bool OAIDecision::is_start_timer_decision_attributes_Set() const{
    return m_start_timer_decision_attributes_isSet;
}

bool OAIDecision::is_start_timer_decision_attributes_Valid() const{
    return m_start_timer_decision_attributes_isValid;
}

OAIDecision_cancelTimerDecisionAttributes OAIDecision::getCancelTimerDecisionAttributes() const {
    return m_cancel_timer_decision_attributes;
}
void OAIDecision::setCancelTimerDecisionAttributes(const OAIDecision_cancelTimerDecisionAttributes &cancel_timer_decision_attributes) {
    m_cancel_timer_decision_attributes = cancel_timer_decision_attributes;
    m_cancel_timer_decision_attributes_isSet = true;
}

bool OAIDecision::is_cancel_timer_decision_attributes_Set() const{
    return m_cancel_timer_decision_attributes_isSet;
}

bool OAIDecision::is_cancel_timer_decision_attributes_Valid() const{
    return m_cancel_timer_decision_attributes_isValid;
}

OAIDecision_signalExternalWorkflowExecutionDecisionAttributes OAIDecision::getSignalExternalWorkflowExecutionDecisionAttributes() const {
    return m_signal_external_workflow_execution_decision_attributes;
}
void OAIDecision::setSignalExternalWorkflowExecutionDecisionAttributes(const OAIDecision_signalExternalWorkflowExecutionDecisionAttributes &signal_external_workflow_execution_decision_attributes) {
    m_signal_external_workflow_execution_decision_attributes = signal_external_workflow_execution_decision_attributes;
    m_signal_external_workflow_execution_decision_attributes_isSet = true;
}

bool OAIDecision::is_signal_external_workflow_execution_decision_attributes_Set() const{
    return m_signal_external_workflow_execution_decision_attributes_isSet;
}

bool OAIDecision::is_signal_external_workflow_execution_decision_attributes_Valid() const{
    return m_signal_external_workflow_execution_decision_attributes_isValid;
}

OAIDecision_requestCancelExternalWorkflowExecutionDecisionAttributes OAIDecision::getRequestCancelExternalWorkflowExecutionDecisionAttributes() const {
    return m_request_cancel_external_workflow_execution_decision_attributes;
}
void OAIDecision::setRequestCancelExternalWorkflowExecutionDecisionAttributes(const OAIDecision_requestCancelExternalWorkflowExecutionDecisionAttributes &request_cancel_external_workflow_execution_decision_attributes) {
    m_request_cancel_external_workflow_execution_decision_attributes = request_cancel_external_workflow_execution_decision_attributes;
    m_request_cancel_external_workflow_execution_decision_attributes_isSet = true;
}

bool OAIDecision::is_request_cancel_external_workflow_execution_decision_attributes_Set() const{
    return m_request_cancel_external_workflow_execution_decision_attributes_isSet;
}

bool OAIDecision::is_request_cancel_external_workflow_execution_decision_attributes_Valid() const{
    return m_request_cancel_external_workflow_execution_decision_attributes_isValid;
}

OAIDecision_startChildWorkflowExecutionDecisionAttributes OAIDecision::getStartChildWorkflowExecutionDecisionAttributes() const {
    return m_start_child_workflow_execution_decision_attributes;
}
void OAIDecision::setStartChildWorkflowExecutionDecisionAttributes(const OAIDecision_startChildWorkflowExecutionDecisionAttributes &start_child_workflow_execution_decision_attributes) {
    m_start_child_workflow_execution_decision_attributes = start_child_workflow_execution_decision_attributes;
    m_start_child_workflow_execution_decision_attributes_isSet = true;
}

bool OAIDecision::is_start_child_workflow_execution_decision_attributes_Set() const{
    return m_start_child_workflow_execution_decision_attributes_isSet;
}

bool OAIDecision::is_start_child_workflow_execution_decision_attributes_Valid() const{
    return m_start_child_workflow_execution_decision_attributes_isValid;
}

OAIDecision_scheduleLambdaFunctionDecisionAttributes OAIDecision::getScheduleLambdaFunctionDecisionAttributes() const {
    return m_schedule_lambda_function_decision_attributes;
}
void OAIDecision::setScheduleLambdaFunctionDecisionAttributes(const OAIDecision_scheduleLambdaFunctionDecisionAttributes &schedule_lambda_function_decision_attributes) {
    m_schedule_lambda_function_decision_attributes = schedule_lambda_function_decision_attributes;
    m_schedule_lambda_function_decision_attributes_isSet = true;
}

bool OAIDecision::is_schedule_lambda_function_decision_attributes_Set() const{
    return m_schedule_lambda_function_decision_attributes_isSet;
}

bool OAIDecision::is_schedule_lambda_function_decision_attributes_Valid() const{
    return m_schedule_lambda_function_decision_attributes_isValid;
}

bool OAIDecision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decision_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_activity_task_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_cancel_activity_task_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_workflow_execution_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fail_workflow_execution_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_workflow_execution_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_continue_as_new_workflow_execution_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_marker_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timer_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_timer_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_external_workflow_execution_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_cancel_external_workflow_execution_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_child_workflow_execution_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_lambda_function_decision_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDecision::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_decision_type_isValid && true;
}

} // namespace OpenAPI
