/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDecision.h
 *
 * &lt;p&gt;Specifies a decision made by the decider. A decision can be one of these types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CancelTimer&lt;/code&gt; – Cancels a previously started timer and records a &lt;code&gt;TimerCanceled&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CancelWorkflowExecution&lt;/code&gt; – Closes the workflow execution and records a &lt;code&gt;WorkflowExecutionCanceled&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CompleteWorkflowExecution&lt;/code&gt; – Closes the workflow execution and records a &lt;code&gt;WorkflowExecutionCompleted&lt;/code&gt; event in the history .&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContinueAsNewWorkflowExecution&lt;/code&gt; – Closes the workflow execution and starts a new workflow execution of the same type using the same workflow ID and a unique run Id. A &lt;code&gt;WorkflowExecutionContinuedAsNew&lt;/code&gt; event is recorded in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FailWorkflowExecution&lt;/code&gt; – Closes the workflow execution and records a &lt;code&gt;WorkflowExecutionFailed&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RecordMarker&lt;/code&gt; – Records a &lt;code&gt;MarkerRecorded&lt;/code&gt; event in the history. Markers can be used for adding custom information in the history for instance to let deciders know that they don&#39;t need to look at the history beyond the marker event.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestCancelActivityTask&lt;/code&gt; – Attempts to cancel a previously scheduled activity task. If the activity task was scheduled but has not been assigned to a worker, then it is canceled. If the activity task was already assigned to a worker, then the worker is informed that cancellation has been requested in the response to &lt;a&gt;RecordActivityTaskHeartbeat&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestCancelExternalWorkflowExecution&lt;/code&gt; – Requests that a request be made to cancel the specified external workflow execution and records a &lt;code&gt;RequestCancelExternalWorkflowExecutionInitiated&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduleActivityTask&lt;/code&gt; – Schedules an activity task.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignalExternalWorkflowExecution&lt;/code&gt; – Requests a signal to be delivered to the specified external workflow execution and records a &lt;code&gt;SignalExternalWorkflowExecutionInitiated&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StartChildWorkflowExecution&lt;/code&gt; – Requests that a child workflow execution be started and records a &lt;code&gt;StartChildWorkflowExecutionInitiated&lt;/code&gt; event in the history. The child workflow execution is a separate workflow execution with its own history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StartTimer&lt;/code&gt; – Starts a timer for this workflow execution and records a &lt;code&gt;TimerStarted&lt;/code&gt; event in the history. This timer fires after the specified delay and record a &lt;code&gt;TimerFired&lt;/code&gt; event.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Access Control&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If you grant permission to use &lt;code&gt;RespondDecisionTaskCompleted&lt;/code&gt;, you can use IAM policies to express permissions for the list of decisions returned by this action as if they were members of the API. Treating decisions as a pseudo API maintains a uniform conceptual model and helps keep policies readable. For details and example IAM policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\&quot;&gt;Using IAM to Manage Access to Amazon SWF Workflows&lt;/a&gt; in the &lt;i&gt;Amazon SWF Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Decision Failure&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Decisions can fail for several reasons&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and therefore fails.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A limit on your account was reached.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The decision lacks sufficient permissions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;One of the following events might be added to the history to indicate an error. The event attribute&#39;s &lt;code&gt;cause&lt;/code&gt; parameter indicates the cause. If &lt;code&gt;cause&lt;/code&gt; is set to &lt;code&gt;OPERATION_NOT_PERMITTED&lt;/code&gt;, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\&quot;&gt;Using IAM to Manage Access to Amazon SWF Workflows&lt;/a&gt; in the &lt;i&gt;Amazon SWF Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduleActivityTaskFailed&lt;/code&gt; – A &lt;code&gt;ScheduleActivityTask&lt;/code&gt; decision failed. This could happen if the activity type specified in the decision isn&#39;t registered, is in a deprecated state, or the decision isn&#39;t properly configured.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestCancelActivityTaskFailed&lt;/code&gt; – A &lt;code&gt;RequestCancelActivityTask&lt;/code&gt; decision failed. This could happen if there is no open activity task with the specified activityId.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StartTimerFailed&lt;/code&gt; – A &lt;code&gt;StartTimer&lt;/code&gt; decision failed. This could happen if there is another open timer with the same timerId.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CancelTimerFailed&lt;/code&gt; – A &lt;code&gt;CancelTimer&lt;/code&gt; decision failed. This could happen if there is no open timer with the specified timerId.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StartChildWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;StartChildWorkflowExecution&lt;/code&gt; decision failed. This could happen if the workflow type specified isn&#39;t registered, is deprecated, or the decision isn&#39;t properly configured.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignalExternalWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;SignalExternalWorkflowExecution&lt;/code&gt; decision failed. This could happen if the &lt;code&gt;workflowID&lt;/code&gt; specified in the decision was incorrect.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestCancelExternalWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;RequestCancelExternalWorkflowExecution&lt;/code&gt; decision failed. This could happen if the &lt;code&gt;workflowID&lt;/code&gt; specified in the decision was incorrect.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CancelWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;CancelWorkflowExecution&lt;/code&gt; decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CompleteWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;CompleteWorkflowExecution&lt;/code&gt; decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContinueAsNewWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;ContinueAsNewWorkflowExecution&lt;/code&gt; decision failed. This could happen if there is an unhandled decision task pending in the workflow execution or the ContinueAsNewWorkflowExecution decision was not configured correctly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FailWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;FailWorkflowExecution&lt;/code&gt; decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause field in the event structure for the error event indicates the cause of the error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A workflow execution may be closed by the decider by returning one of the following decisions when completing a decision task: &lt;code&gt;CompleteWorkflowExecution&lt;/code&gt;, &lt;code&gt;FailWorkflowExecution&lt;/code&gt;, &lt;code&gt;CancelWorkflowExecution&lt;/code&gt; and &lt;code&gt;ContinueAsNewWorkflowExecution&lt;/code&gt;. An &lt;code&gt;UnhandledDecision&lt;/code&gt; fault is returned if a workflow closing decision is specified and a signal or activity event had been added to the history while the decision task was being performed by the decider. Unlike the above situations which are logic issues, this fault is always possible because of race conditions in a distributed system. The right action here is to call &lt;a&gt;RespondDecisionTaskCompleted&lt;/a&gt; without any decisions. This would result in another decision task with these new events included in the history. The decider should handle the new events and may decide to close the workflow execution.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;How to Code a Decision&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes field shown below:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;ScheduleActivityTaskDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;RequestCancelActivityTaskDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;CompleteWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;FailWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;CancelWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;ContinueAsNewWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;RecordMarkerDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;StartTimerDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;CancelTimerDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;SignalExternalWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;RequestCancelExternalWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;StartChildWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIDecision_H
#define OAIDecision_H

#include <QJsonObject>

#include "OAIDecisionType.h"
#include "OAIDecision_cancelTimerDecisionAttributes.h"
#include "OAIDecision_cancelWorkflowExecutionDecisionAttributes.h"
#include "OAIDecision_completeWorkflowExecutionDecisionAttributes.h"
#include "OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes.h"
#include "OAIDecision_failWorkflowExecutionDecisionAttributes.h"
#include "OAIDecision_recordMarkerDecisionAttributes.h"
#include "OAIDecision_requestCancelActivityTaskDecisionAttributes.h"
#include "OAIDecision_requestCancelExternalWorkflowExecutionDecisionAttributes.h"
#include "OAIDecision_scheduleActivityTaskDecisionAttributes.h"
#include "OAIDecision_scheduleLambdaFunctionDecisionAttributes.h"
#include "OAIDecision_signalExternalWorkflowExecutionDecisionAttributes.h"
#include "OAIDecision_startChildWorkflowExecutionDecisionAttributes.h"
#include "OAIDecision_startTimerDecisionAttributes.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDecision_scheduleActivityTaskDecisionAttributes;
class OAIDecision_requestCancelActivityTaskDecisionAttributes;
class OAIDecision_completeWorkflowExecutionDecisionAttributes;
class OAIDecision_failWorkflowExecutionDecisionAttributes;
class OAIDecision_cancelWorkflowExecutionDecisionAttributes;
class OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes;
class OAIDecision_recordMarkerDecisionAttributes;
class OAIDecision_startTimerDecisionAttributes;
class OAIDecision_cancelTimerDecisionAttributes;
class OAIDecision_signalExternalWorkflowExecutionDecisionAttributes;
class OAIDecision_requestCancelExternalWorkflowExecutionDecisionAttributes;
class OAIDecision_startChildWorkflowExecutionDecisionAttributes;
class OAIDecision_scheduleLambdaFunctionDecisionAttributes;

class OAIDecision : public OAIObject {
public:
    OAIDecision();
    OAIDecision(QString json);
    ~OAIDecision() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDecisionType getDecisionType() const;
    void setDecisionType(const OAIDecisionType &decision_type);
    bool is_decision_type_Set() const;
    bool is_decision_type_Valid() const;

    OAIDecision_scheduleActivityTaskDecisionAttributes getScheduleActivityTaskDecisionAttributes() const;
    void setScheduleActivityTaskDecisionAttributes(const OAIDecision_scheduleActivityTaskDecisionAttributes &schedule_activity_task_decision_attributes);
    bool is_schedule_activity_task_decision_attributes_Set() const;
    bool is_schedule_activity_task_decision_attributes_Valid() const;

    OAIDecision_requestCancelActivityTaskDecisionAttributes getRequestCancelActivityTaskDecisionAttributes() const;
    void setRequestCancelActivityTaskDecisionAttributes(const OAIDecision_requestCancelActivityTaskDecisionAttributes &request_cancel_activity_task_decision_attributes);
    bool is_request_cancel_activity_task_decision_attributes_Set() const;
    bool is_request_cancel_activity_task_decision_attributes_Valid() const;

    OAIDecision_completeWorkflowExecutionDecisionAttributes getCompleteWorkflowExecutionDecisionAttributes() const;
    void setCompleteWorkflowExecutionDecisionAttributes(const OAIDecision_completeWorkflowExecutionDecisionAttributes &complete_workflow_execution_decision_attributes);
    bool is_complete_workflow_execution_decision_attributes_Set() const;
    bool is_complete_workflow_execution_decision_attributes_Valid() const;

    OAIDecision_failWorkflowExecutionDecisionAttributes getFailWorkflowExecutionDecisionAttributes() const;
    void setFailWorkflowExecutionDecisionAttributes(const OAIDecision_failWorkflowExecutionDecisionAttributes &fail_workflow_execution_decision_attributes);
    bool is_fail_workflow_execution_decision_attributes_Set() const;
    bool is_fail_workflow_execution_decision_attributes_Valid() const;

    OAIDecision_cancelWorkflowExecutionDecisionAttributes getCancelWorkflowExecutionDecisionAttributes() const;
    void setCancelWorkflowExecutionDecisionAttributes(const OAIDecision_cancelWorkflowExecutionDecisionAttributes &cancel_workflow_execution_decision_attributes);
    bool is_cancel_workflow_execution_decision_attributes_Set() const;
    bool is_cancel_workflow_execution_decision_attributes_Valid() const;

    OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes getContinueAsNewWorkflowExecutionDecisionAttributes() const;
    void setContinueAsNewWorkflowExecutionDecisionAttributes(const OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes &continue_as_new_workflow_execution_decision_attributes);
    bool is_continue_as_new_workflow_execution_decision_attributes_Set() const;
    bool is_continue_as_new_workflow_execution_decision_attributes_Valid() const;

    OAIDecision_recordMarkerDecisionAttributes getRecordMarkerDecisionAttributes() const;
    void setRecordMarkerDecisionAttributes(const OAIDecision_recordMarkerDecisionAttributes &record_marker_decision_attributes);
    bool is_record_marker_decision_attributes_Set() const;
    bool is_record_marker_decision_attributes_Valid() const;

    OAIDecision_startTimerDecisionAttributes getStartTimerDecisionAttributes() const;
    void setStartTimerDecisionAttributes(const OAIDecision_startTimerDecisionAttributes &start_timer_decision_attributes);
    bool is_start_timer_decision_attributes_Set() const;
    bool is_start_timer_decision_attributes_Valid() const;

    OAIDecision_cancelTimerDecisionAttributes getCancelTimerDecisionAttributes() const;
    void setCancelTimerDecisionAttributes(const OAIDecision_cancelTimerDecisionAttributes &cancel_timer_decision_attributes);
    bool is_cancel_timer_decision_attributes_Set() const;
    bool is_cancel_timer_decision_attributes_Valid() const;

    OAIDecision_signalExternalWorkflowExecutionDecisionAttributes getSignalExternalWorkflowExecutionDecisionAttributes() const;
    void setSignalExternalWorkflowExecutionDecisionAttributes(const OAIDecision_signalExternalWorkflowExecutionDecisionAttributes &signal_external_workflow_execution_decision_attributes);
    bool is_signal_external_workflow_execution_decision_attributes_Set() const;
    bool is_signal_external_workflow_execution_decision_attributes_Valid() const;

    OAIDecision_requestCancelExternalWorkflowExecutionDecisionAttributes getRequestCancelExternalWorkflowExecutionDecisionAttributes() const;
    void setRequestCancelExternalWorkflowExecutionDecisionAttributes(const OAIDecision_requestCancelExternalWorkflowExecutionDecisionAttributes &request_cancel_external_workflow_execution_decision_attributes);
    bool is_request_cancel_external_workflow_execution_decision_attributes_Set() const;
    bool is_request_cancel_external_workflow_execution_decision_attributes_Valid() const;

    OAIDecision_startChildWorkflowExecutionDecisionAttributes getStartChildWorkflowExecutionDecisionAttributes() const;
    void setStartChildWorkflowExecutionDecisionAttributes(const OAIDecision_startChildWorkflowExecutionDecisionAttributes &start_child_workflow_execution_decision_attributes);
    bool is_start_child_workflow_execution_decision_attributes_Set() const;
    bool is_start_child_workflow_execution_decision_attributes_Valid() const;

    OAIDecision_scheduleLambdaFunctionDecisionAttributes getScheduleLambdaFunctionDecisionAttributes() const;
    void setScheduleLambdaFunctionDecisionAttributes(const OAIDecision_scheduleLambdaFunctionDecisionAttributes &schedule_lambda_function_decision_attributes);
    bool is_schedule_lambda_function_decision_attributes_Set() const;
    bool is_schedule_lambda_function_decision_attributes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDecisionType m_decision_type;
    bool m_decision_type_isSet;
    bool m_decision_type_isValid;

    OAIDecision_scheduleActivityTaskDecisionAttributes m_schedule_activity_task_decision_attributes;
    bool m_schedule_activity_task_decision_attributes_isSet;
    bool m_schedule_activity_task_decision_attributes_isValid;

    OAIDecision_requestCancelActivityTaskDecisionAttributes m_request_cancel_activity_task_decision_attributes;
    bool m_request_cancel_activity_task_decision_attributes_isSet;
    bool m_request_cancel_activity_task_decision_attributes_isValid;

    OAIDecision_completeWorkflowExecutionDecisionAttributes m_complete_workflow_execution_decision_attributes;
    bool m_complete_workflow_execution_decision_attributes_isSet;
    bool m_complete_workflow_execution_decision_attributes_isValid;

    OAIDecision_failWorkflowExecutionDecisionAttributes m_fail_workflow_execution_decision_attributes;
    bool m_fail_workflow_execution_decision_attributes_isSet;
    bool m_fail_workflow_execution_decision_attributes_isValid;

    OAIDecision_cancelWorkflowExecutionDecisionAttributes m_cancel_workflow_execution_decision_attributes;
    bool m_cancel_workflow_execution_decision_attributes_isSet;
    bool m_cancel_workflow_execution_decision_attributes_isValid;

    OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes m_continue_as_new_workflow_execution_decision_attributes;
    bool m_continue_as_new_workflow_execution_decision_attributes_isSet;
    bool m_continue_as_new_workflow_execution_decision_attributes_isValid;

    OAIDecision_recordMarkerDecisionAttributes m_record_marker_decision_attributes;
    bool m_record_marker_decision_attributes_isSet;
    bool m_record_marker_decision_attributes_isValid;

    OAIDecision_startTimerDecisionAttributes m_start_timer_decision_attributes;
    bool m_start_timer_decision_attributes_isSet;
    bool m_start_timer_decision_attributes_isValid;

    OAIDecision_cancelTimerDecisionAttributes m_cancel_timer_decision_attributes;
    bool m_cancel_timer_decision_attributes_isSet;
    bool m_cancel_timer_decision_attributes_isValid;

    OAIDecision_signalExternalWorkflowExecutionDecisionAttributes m_signal_external_workflow_execution_decision_attributes;
    bool m_signal_external_workflow_execution_decision_attributes_isSet;
    bool m_signal_external_workflow_execution_decision_attributes_isValid;

    OAIDecision_requestCancelExternalWorkflowExecutionDecisionAttributes m_request_cancel_external_workflow_execution_decision_attributes;
    bool m_request_cancel_external_workflow_execution_decision_attributes_isSet;
    bool m_request_cancel_external_workflow_execution_decision_attributes_isValid;

    OAIDecision_startChildWorkflowExecutionDecisionAttributes m_start_child_workflow_execution_decision_attributes;
    bool m_start_child_workflow_execution_decision_attributes_isSet;
    bool m_start_child_workflow_execution_decision_attributes_isValid;

    OAIDecision_scheduleLambdaFunctionDecisionAttributes m_schedule_lambda_function_decision_attributes;
    bool m_schedule_lambda_function_decision_attributes_isSet;
    bool m_schedule_lambda_function_decision_attributes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDecision)

#endif // OAIDecision_H
