/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes() {
    this->initializeModel();
}

OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::~OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes() {}

void OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::initializeModel() {

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_activity_id_isSet = false;
    m_activity_id_isValid = false;

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_decision_task_completed_event_id_isSet = false;
    m_decision_task_completed_event_id_isValid = false;
}

void OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::fromJsonObject(QJsonObject json) {

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_activity_id_isValid = ::OpenAPI::fromJsonValue(m_activity_id, json[QString("activityId")]);
    m_activity_id_isSet = !json[QString("activityId")].isNull() && m_activity_id_isValid;

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_decision_task_completed_event_id_isValid = ::OpenAPI::fromJsonValue(m_decision_task_completed_event_id, json[QString("decisionTaskCompletedEventId")]);
    m_decision_task_completed_event_id_isSet = !json[QString("decisionTaskCompletedEventId")].isNull() && m_decision_task_completed_event_id_isValid;
}

QString OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_type.isSet()) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_activity_id_isSet) {
        obj.insert(QString("activityId"), ::OpenAPI::toJsonValue(m_activity_id));
    }
    if (m_cause.isSet()) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_decision_task_completed_event_id_isSet) {
        obj.insert(QString("decisionTaskCompletedEventId"), ::OpenAPI::toJsonValue(m_decision_task_completed_event_id));
    }
    return obj;
}

OAIScheduleActivityTaskFailedEventAttributes_activityType OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::getActivityType() const {
    return m_activity_type;
}
void OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::setActivityType(const OAIScheduleActivityTaskFailedEventAttributes_activityType &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

QString OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::getActivityId() const {
    return m_activity_id;
}
void OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::setActivityId(const QString &activity_id) {
    m_activity_id = activity_id;
    m_activity_id_isSet = true;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::is_activity_id_Set() const{
    return m_activity_id_isSet;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::is_activity_id_Valid() const{
    return m_activity_id_isValid;
}

OAIScheduleActivityTaskFailedCause OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::getCause() const {
    return m_cause;
}
void OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::setCause(const OAIScheduleActivityTaskFailedCause &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::is_cause_Valid() const{
    return m_cause_isValid;
}

qint32 OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::getDecisionTaskCompletedEventId() const {
    return m_decision_task_completed_event_id;
}
void OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::setDecisionTaskCompletedEventId(const qint32 &decision_task_completed_event_id) {
    m_decision_task_completed_event_id = decision_task_completed_event_id;
    m_decision_task_completed_event_id_isSet = true;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::is_decision_task_completed_event_id_Set() const{
    return m_decision_task_completed_event_id_isSet;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::is_decision_task_completed_event_id_Valid() const{
    return m_decision_task_completed_event_id_isValid;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_task_completed_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_type_isValid && m_activity_id_isValid && m_cause_isValid && m_decision_task_completed_event_id_isValid && true;
}

} // namespace OpenAPI
