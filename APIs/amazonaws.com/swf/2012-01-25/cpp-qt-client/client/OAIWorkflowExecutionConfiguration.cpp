/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowExecutionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowExecutionConfiguration::OAIWorkflowExecutionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowExecutionConfiguration::OAIWorkflowExecutionConfiguration() {
    this->initializeModel();
}

OAIWorkflowExecutionConfiguration::~OAIWorkflowExecutionConfiguration() {}

void OAIWorkflowExecutionConfiguration::initializeModel() {

    m_task_start_to_close_timeout_isSet = false;
    m_task_start_to_close_timeout_isValid = false;

    m_execution_start_to_close_timeout_isSet = false;
    m_execution_start_to_close_timeout_isValid = false;

    m_task_list_isSet = false;
    m_task_list_isValid = false;

    m_task_priority_isSet = false;
    m_task_priority_isValid = false;

    m_child_policy_isSet = false;
    m_child_policy_isValid = false;

    m_lambda_role_isSet = false;
    m_lambda_role_isValid = false;
}

void OAIWorkflowExecutionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowExecutionConfiguration::fromJsonObject(QJsonObject json) {

    m_task_start_to_close_timeout_isValid = ::OpenAPI::fromJsonValue(m_task_start_to_close_timeout, json[QString("taskStartToCloseTimeout")]);
    m_task_start_to_close_timeout_isSet = !json[QString("taskStartToCloseTimeout")].isNull() && m_task_start_to_close_timeout_isValid;

    m_execution_start_to_close_timeout_isValid = ::OpenAPI::fromJsonValue(m_execution_start_to_close_timeout, json[QString("executionStartToCloseTimeout")]);
    m_execution_start_to_close_timeout_isSet = !json[QString("executionStartToCloseTimeout")].isNull() && m_execution_start_to_close_timeout_isValid;

    m_task_list_isValid = ::OpenAPI::fromJsonValue(m_task_list, json[QString("taskList")]);
    m_task_list_isSet = !json[QString("taskList")].isNull() && m_task_list_isValid;

    m_task_priority_isValid = ::OpenAPI::fromJsonValue(m_task_priority, json[QString("taskPriority")]);
    m_task_priority_isSet = !json[QString("taskPriority")].isNull() && m_task_priority_isValid;

    m_child_policy_isValid = ::OpenAPI::fromJsonValue(m_child_policy, json[QString("childPolicy")]);
    m_child_policy_isSet = !json[QString("childPolicy")].isNull() && m_child_policy_isValid;

    m_lambda_role_isValid = ::OpenAPI::fromJsonValue(m_lambda_role, json[QString("lambdaRole")]);
    m_lambda_role_isSet = !json[QString("lambdaRole")].isNull() && m_lambda_role_isValid;
}

QString OAIWorkflowExecutionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowExecutionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_task_start_to_close_timeout_isSet) {
        obj.insert(QString("taskStartToCloseTimeout"), ::OpenAPI::toJsonValue(m_task_start_to_close_timeout));
    }
    if (m_execution_start_to_close_timeout_isSet) {
        obj.insert(QString("executionStartToCloseTimeout"), ::OpenAPI::toJsonValue(m_execution_start_to_close_timeout));
    }
    if (m_task_list.isSet()) {
        obj.insert(QString("taskList"), ::OpenAPI::toJsonValue(m_task_list));
    }
    if (m_task_priority_isSet) {
        obj.insert(QString("taskPriority"), ::OpenAPI::toJsonValue(m_task_priority));
    }
    if (m_child_policy.isSet()) {
        obj.insert(QString("childPolicy"), ::OpenAPI::toJsonValue(m_child_policy));
    }
    if (m_lambda_role_isSet) {
        obj.insert(QString("lambdaRole"), ::OpenAPI::toJsonValue(m_lambda_role));
    }
    return obj;
}

QString OAIWorkflowExecutionConfiguration::getTaskStartToCloseTimeout() const {
    return m_task_start_to_close_timeout;
}
void OAIWorkflowExecutionConfiguration::setTaskStartToCloseTimeout(const QString &task_start_to_close_timeout) {
    m_task_start_to_close_timeout = task_start_to_close_timeout;
    m_task_start_to_close_timeout_isSet = true;
}

bool OAIWorkflowExecutionConfiguration::is_task_start_to_close_timeout_Set() const{
    return m_task_start_to_close_timeout_isSet;
}

bool OAIWorkflowExecutionConfiguration::is_task_start_to_close_timeout_Valid() const{
    return m_task_start_to_close_timeout_isValid;
}

QString OAIWorkflowExecutionConfiguration::getExecutionStartToCloseTimeout() const {
    return m_execution_start_to_close_timeout;
}
void OAIWorkflowExecutionConfiguration::setExecutionStartToCloseTimeout(const QString &execution_start_to_close_timeout) {
    m_execution_start_to_close_timeout = execution_start_to_close_timeout;
    m_execution_start_to_close_timeout_isSet = true;
}

bool OAIWorkflowExecutionConfiguration::is_execution_start_to_close_timeout_Set() const{
    return m_execution_start_to_close_timeout_isSet;
}

bool OAIWorkflowExecutionConfiguration::is_execution_start_to_close_timeout_Valid() const{
    return m_execution_start_to_close_timeout_isValid;
}

OAIWorkflowExecutionConfiguration_taskList OAIWorkflowExecutionConfiguration::getTaskList() const {
    return m_task_list;
}
void OAIWorkflowExecutionConfiguration::setTaskList(const OAIWorkflowExecutionConfiguration_taskList &task_list) {
    m_task_list = task_list;
    m_task_list_isSet = true;
}

bool OAIWorkflowExecutionConfiguration::is_task_list_Set() const{
    return m_task_list_isSet;
}

bool OAIWorkflowExecutionConfiguration::is_task_list_Valid() const{
    return m_task_list_isValid;
}

QString OAIWorkflowExecutionConfiguration::getTaskPriority() const {
    return m_task_priority;
}
void OAIWorkflowExecutionConfiguration::setTaskPriority(const QString &task_priority) {
    m_task_priority = task_priority;
    m_task_priority_isSet = true;
}

bool OAIWorkflowExecutionConfiguration::is_task_priority_Set() const{
    return m_task_priority_isSet;
}

bool OAIWorkflowExecutionConfiguration::is_task_priority_Valid() const{
    return m_task_priority_isValid;
}

OAIChildPolicy OAIWorkflowExecutionConfiguration::getChildPolicy() const {
    return m_child_policy;
}
void OAIWorkflowExecutionConfiguration::setChildPolicy(const OAIChildPolicy &child_policy) {
    m_child_policy = child_policy;
    m_child_policy_isSet = true;
}

bool OAIWorkflowExecutionConfiguration::is_child_policy_Set() const{
    return m_child_policy_isSet;
}

bool OAIWorkflowExecutionConfiguration::is_child_policy_Valid() const{
    return m_child_policy_isValid;
}

QString OAIWorkflowExecutionConfiguration::getLambdaRole() const {
    return m_lambda_role;
}
void OAIWorkflowExecutionConfiguration::setLambdaRole(const QString &lambda_role) {
    m_lambda_role = lambda_role;
    m_lambda_role_isSet = true;
}

bool OAIWorkflowExecutionConfiguration::is_lambda_role_Set() const{
    return m_lambda_role_isSet;
}

bool OAIWorkflowExecutionConfiguration::is_lambda_role_Valid() const{
    return m_lambda_role_isValid;
}

bool OAIWorkflowExecutionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_start_to_close_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_start_to_close_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowExecutionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_start_to_close_timeout_isValid && m_execution_start_to_close_timeout_isValid && m_task_list_isValid && m_child_policy_isValid && true;
}

} // namespace OpenAPI
