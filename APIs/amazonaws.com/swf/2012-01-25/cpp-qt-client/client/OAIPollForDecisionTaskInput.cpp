/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPollForDecisionTaskInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPollForDecisionTaskInput::OAIPollForDecisionTaskInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPollForDecisionTaskInput::OAIPollForDecisionTaskInput() {
    this->initializeModel();
}

OAIPollForDecisionTaskInput::~OAIPollForDecisionTaskInput() {}

void OAIPollForDecisionTaskInput::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_task_list_isSet = false;
    m_task_list_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_maximum_page_size_isSet = false;
    m_maximum_page_size_isValid = false;

    m_reverse_order_isSet = false;
    m_reverse_order_isValid = false;

    m_start_at_previous_started_event_isSet = false;
    m_start_at_previous_started_event_isValid = false;
}

void OAIPollForDecisionTaskInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPollForDecisionTaskInput::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_task_list_isValid = ::OpenAPI::fromJsonValue(m_task_list, json[QString("taskList")]);
    m_task_list_isSet = !json[QString("taskList")].isNull() && m_task_list_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_maximum_page_size_isValid = ::OpenAPI::fromJsonValue(m_maximum_page_size, json[QString("maximumPageSize")]);
    m_maximum_page_size_isSet = !json[QString("maximumPageSize")].isNull() && m_maximum_page_size_isValid;

    m_reverse_order_isValid = ::OpenAPI::fromJsonValue(m_reverse_order, json[QString("reverseOrder")]);
    m_reverse_order_isSet = !json[QString("reverseOrder")].isNull() && m_reverse_order_isValid;

    m_start_at_previous_started_event_isValid = ::OpenAPI::fromJsonValue(m_start_at_previous_started_event, json[QString("startAtPreviousStartedEvent")]);
    m_start_at_previous_started_event_isSet = !json[QString("startAtPreviousStartedEvent")].isNull() && m_start_at_previous_started_event_isValid;
}

QString OAIPollForDecisionTaskInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPollForDecisionTaskInput::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_task_list.isSet()) {
        obj.insert(QString("taskList"), ::OpenAPI::toJsonValue(m_task_list));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_maximum_page_size_isSet) {
        obj.insert(QString("maximumPageSize"), ::OpenAPI::toJsonValue(m_maximum_page_size));
    }
    if (m_reverse_order_isSet) {
        obj.insert(QString("reverseOrder"), ::OpenAPI::toJsonValue(m_reverse_order));
    }
    if (m_start_at_previous_started_event_isSet) {
        obj.insert(QString("startAtPreviousStartedEvent"), ::OpenAPI::toJsonValue(m_start_at_previous_started_event));
    }
    return obj;
}

QString OAIPollForDecisionTaskInput::getDomain() const {
    return m_domain;
}
void OAIPollForDecisionTaskInput::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIPollForDecisionTaskInput::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIPollForDecisionTaskInput::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIPollForDecisionTaskInput_taskList OAIPollForDecisionTaskInput::getTaskList() const {
    return m_task_list;
}
void OAIPollForDecisionTaskInput::setTaskList(const OAIPollForDecisionTaskInput_taskList &task_list) {
    m_task_list = task_list;
    m_task_list_isSet = true;
}

bool OAIPollForDecisionTaskInput::is_task_list_Set() const{
    return m_task_list_isSet;
}

bool OAIPollForDecisionTaskInput::is_task_list_Valid() const{
    return m_task_list_isValid;
}

QString OAIPollForDecisionTaskInput::getIdentity() const {
    return m_identity;
}
void OAIPollForDecisionTaskInput::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIPollForDecisionTaskInput::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIPollForDecisionTaskInput::is_identity_Valid() const{
    return m_identity_isValid;
}

QString OAIPollForDecisionTaskInput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIPollForDecisionTaskInput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIPollForDecisionTaskInput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIPollForDecisionTaskInput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIPollForDecisionTaskInput::getMaximumPageSize() const {
    return m_maximum_page_size;
}
void OAIPollForDecisionTaskInput::setMaximumPageSize(const qint32 &maximum_page_size) {
    m_maximum_page_size = maximum_page_size;
    m_maximum_page_size_isSet = true;
}

bool OAIPollForDecisionTaskInput::is_maximum_page_size_Set() const{
    return m_maximum_page_size_isSet;
}

bool OAIPollForDecisionTaskInput::is_maximum_page_size_Valid() const{
    return m_maximum_page_size_isValid;
}

bool OAIPollForDecisionTaskInput::getReverseOrder() const {
    return m_reverse_order;
}
void OAIPollForDecisionTaskInput::setReverseOrder(const bool &reverse_order) {
    m_reverse_order = reverse_order;
    m_reverse_order_isSet = true;
}

bool OAIPollForDecisionTaskInput::is_reverse_order_Set() const{
    return m_reverse_order_isSet;
}

bool OAIPollForDecisionTaskInput::is_reverse_order_Valid() const{
    return m_reverse_order_isValid;
}

bool OAIPollForDecisionTaskInput::getStartAtPreviousStartedEvent() const {
    return m_start_at_previous_started_event;
}
void OAIPollForDecisionTaskInput::setStartAtPreviousStartedEvent(const bool &start_at_previous_started_event) {
    m_start_at_previous_started_event = start_at_previous_started_event;
    m_start_at_previous_started_event_isSet = true;
}

bool OAIPollForDecisionTaskInput::is_start_at_previous_started_event_Set() const{
    return m_start_at_previous_started_event_isSet;
}

bool OAIPollForDecisionTaskInput::is_start_at_previous_started_event_Valid() const{
    return m_start_at_previous_started_event_isValid;
}

bool OAIPollForDecisionTaskInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_previous_started_event_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPollForDecisionTaskInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_task_list_isValid && true;
}

} // namespace OpenAPI
