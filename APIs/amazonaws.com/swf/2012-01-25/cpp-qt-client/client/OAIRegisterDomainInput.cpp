/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterDomainInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterDomainInput::OAIRegisterDomainInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterDomainInput::OAIRegisterDomainInput() {
    this->initializeModel();
}

OAIRegisterDomainInput::~OAIRegisterDomainInput() {}

void OAIRegisterDomainInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_workflow_execution_retention_period_in_days_isSet = false;
    m_workflow_execution_retention_period_in_days_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIRegisterDomainInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterDomainInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_workflow_execution_retention_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_retention_period_in_days, json[QString("workflowExecutionRetentionPeriodInDays")]);
    m_workflow_execution_retention_period_in_days_isSet = !json[QString("workflowExecutionRetentionPeriodInDays")].isNull() && m_workflow_execution_retention_period_in_days_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIRegisterDomainInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterDomainInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_workflow_execution_retention_period_in_days_isSet) {
        obj.insert(QString("workflowExecutionRetentionPeriodInDays"), ::OpenAPI::toJsonValue(m_workflow_execution_retention_period_in_days));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIRegisterDomainInput::getName() const {
    return m_name;
}
void OAIRegisterDomainInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegisterDomainInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegisterDomainInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRegisterDomainInput::getDescription() const {
    return m_description;
}
void OAIRegisterDomainInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRegisterDomainInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRegisterDomainInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRegisterDomainInput::getWorkflowExecutionRetentionPeriodInDays() const {
    return m_workflow_execution_retention_period_in_days;
}
void OAIRegisterDomainInput::setWorkflowExecutionRetentionPeriodInDays(const QString &workflow_execution_retention_period_in_days) {
    m_workflow_execution_retention_period_in_days = workflow_execution_retention_period_in_days;
    m_workflow_execution_retention_period_in_days_isSet = true;
}

bool OAIRegisterDomainInput::is_workflow_execution_retention_period_in_days_Set() const{
    return m_workflow_execution_retention_period_in_days_isSet;
}

bool OAIRegisterDomainInput::is_workflow_execution_retention_period_in_days_Valid() const{
    return m_workflow_execution_retention_period_in_days_isValid;
}

QList OAIRegisterDomainInput::getTags() const {
    return m_tags;
}
void OAIRegisterDomainInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRegisterDomainInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRegisterDomainInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRegisterDomainInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_retention_period_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterDomainInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_workflow_execution_retention_period_in_days_isValid && true;
}

} // namespace OpenAPI
