/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryEvent::OAIHistoryEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryEvent::OAIHistoryEvent() {
    this->initializeModel();
}

OAIHistoryEvent::~OAIHistoryEvent() {}

void OAIHistoryEvent::initializeModel() {

    m_event_timestamp_isSet = false;
    m_event_timestamp_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_workflow_execution_started_event_attributes_isSet = false;
    m_workflow_execution_started_event_attributes_isValid = false;

    m_workflow_execution_completed_event_attributes_isSet = false;
    m_workflow_execution_completed_event_attributes_isValid = false;

    m_complete_workflow_execution_failed_event_attributes_isSet = false;
    m_complete_workflow_execution_failed_event_attributes_isValid = false;

    m_workflow_execution_failed_event_attributes_isSet = false;
    m_workflow_execution_failed_event_attributes_isValid = false;

    m_fail_workflow_execution_failed_event_attributes_isSet = false;
    m_fail_workflow_execution_failed_event_attributes_isValid = false;

    m_workflow_execution_timed_out_event_attributes_isSet = false;
    m_workflow_execution_timed_out_event_attributes_isValid = false;

    m_workflow_execution_canceled_event_attributes_isSet = false;
    m_workflow_execution_canceled_event_attributes_isValid = false;

    m_cancel_workflow_execution_failed_event_attributes_isSet = false;
    m_cancel_workflow_execution_failed_event_attributes_isValid = false;

    m_workflow_execution_continued_as_new_event_attributes_isSet = false;
    m_workflow_execution_continued_as_new_event_attributes_isValid = false;

    m_continue_as_new_workflow_execution_failed_event_attributes_isSet = false;
    m_continue_as_new_workflow_execution_failed_event_attributes_isValid = false;

    m_workflow_execution_terminated_event_attributes_isSet = false;
    m_workflow_execution_terminated_event_attributes_isValid = false;

    m_workflow_execution_cancel_requested_event_attributes_isSet = false;
    m_workflow_execution_cancel_requested_event_attributes_isValid = false;

    m_decision_task_scheduled_event_attributes_isSet = false;
    m_decision_task_scheduled_event_attributes_isValid = false;

    m_decision_task_started_event_attributes_isSet = false;
    m_decision_task_started_event_attributes_isValid = false;

    m_decision_task_completed_event_attributes_isSet = false;
    m_decision_task_completed_event_attributes_isValid = false;

    m_decision_task_timed_out_event_attributes_isSet = false;
    m_decision_task_timed_out_event_attributes_isValid = false;

    m_activity_task_scheduled_event_attributes_isSet = false;
    m_activity_task_scheduled_event_attributes_isValid = false;

    m_activity_task_started_event_attributes_isSet = false;
    m_activity_task_started_event_attributes_isValid = false;

    m_activity_task_completed_event_attributes_isSet = false;
    m_activity_task_completed_event_attributes_isValid = false;

    m_activity_task_failed_event_attributes_isSet = false;
    m_activity_task_failed_event_attributes_isValid = false;

    m_activity_task_timed_out_event_attributes_isSet = false;
    m_activity_task_timed_out_event_attributes_isValid = false;

    m_activity_task_canceled_event_attributes_isSet = false;
    m_activity_task_canceled_event_attributes_isValid = false;

    m_activity_task_cancel_requested_event_attributes_isSet = false;
    m_activity_task_cancel_requested_event_attributes_isValid = false;

    m_workflow_execution_signaled_event_attributes_isSet = false;
    m_workflow_execution_signaled_event_attributes_isValid = false;

    m_marker_recorded_event_attributes_isSet = false;
    m_marker_recorded_event_attributes_isValid = false;

    m_record_marker_failed_event_attributes_isSet = false;
    m_record_marker_failed_event_attributes_isValid = false;

    m_timer_started_event_attributes_isSet = false;
    m_timer_started_event_attributes_isValid = false;

    m_timer_fired_event_attributes_isSet = false;
    m_timer_fired_event_attributes_isValid = false;

    m_timer_canceled_event_attributes_isSet = false;
    m_timer_canceled_event_attributes_isValid = false;

    m_start_child_workflow_execution_initiated_event_attributes_isSet = false;
    m_start_child_workflow_execution_initiated_event_attributes_isValid = false;

    m_child_workflow_execution_started_event_attributes_isSet = false;
    m_child_workflow_execution_started_event_attributes_isValid = false;

    m_child_workflow_execution_completed_event_attributes_isSet = false;
    m_child_workflow_execution_completed_event_attributes_isValid = false;

    m_child_workflow_execution_failed_event_attributes_isSet = false;
    m_child_workflow_execution_failed_event_attributes_isValid = false;

    m_child_workflow_execution_timed_out_event_attributes_isSet = false;
    m_child_workflow_execution_timed_out_event_attributes_isValid = false;

    m_child_workflow_execution_canceled_event_attributes_isSet = false;
    m_child_workflow_execution_canceled_event_attributes_isValid = false;

    m_child_workflow_execution_terminated_event_attributes_isSet = false;
    m_child_workflow_execution_terminated_event_attributes_isValid = false;

    m_signal_external_workflow_execution_initiated_event_attributes_isSet = false;
    m_signal_external_workflow_execution_initiated_event_attributes_isValid = false;

    m_external_workflow_execution_signaled_event_attributes_isSet = false;
    m_external_workflow_execution_signaled_event_attributes_isValid = false;

    m_signal_external_workflow_execution_failed_event_attributes_isSet = false;
    m_signal_external_workflow_execution_failed_event_attributes_isValid = false;

    m_external_workflow_execution_cancel_requested_event_attributes_isSet = false;
    m_external_workflow_execution_cancel_requested_event_attributes_isValid = false;

    m_request_cancel_external_workflow_execution_initiated_event_attributes_isSet = false;
    m_request_cancel_external_workflow_execution_initiated_event_attributes_isValid = false;

    m_request_cancel_external_workflow_execution_failed_event_attributes_isSet = false;
    m_request_cancel_external_workflow_execution_failed_event_attributes_isValid = false;

    m_schedule_activity_task_failed_event_attributes_isSet = false;
    m_schedule_activity_task_failed_event_attributes_isValid = false;

    m_request_cancel_activity_task_failed_event_attributes_isSet = false;
    m_request_cancel_activity_task_failed_event_attributes_isValid = false;

    m_start_timer_failed_event_attributes_isSet = false;
    m_start_timer_failed_event_attributes_isValid = false;

    m_cancel_timer_failed_event_attributes_isSet = false;
    m_cancel_timer_failed_event_attributes_isValid = false;

    m_start_child_workflow_execution_failed_event_attributes_isSet = false;
    m_start_child_workflow_execution_failed_event_attributes_isValid = false;

    m_lambda_function_scheduled_event_attributes_isSet = false;
    m_lambda_function_scheduled_event_attributes_isValid = false;

    m_lambda_function_started_event_attributes_isSet = false;
    m_lambda_function_started_event_attributes_isValid = false;

    m_lambda_function_completed_event_attributes_isSet = false;
    m_lambda_function_completed_event_attributes_isValid = false;

    m_lambda_function_failed_event_attributes_isSet = false;
    m_lambda_function_failed_event_attributes_isValid = false;

    m_lambda_function_timed_out_event_attributes_isSet = false;
    m_lambda_function_timed_out_event_attributes_isValid = false;

    m_schedule_lambda_function_failed_event_attributes_isSet = false;
    m_schedule_lambda_function_failed_event_attributes_isValid = false;

    m_start_lambda_function_failed_event_attributes_isSet = false;
    m_start_lambda_function_failed_event_attributes_isValid = false;
}

void OAIHistoryEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryEvent::fromJsonObject(QJsonObject json) {

    m_event_timestamp_isValid = ::OpenAPI::fromJsonValue(m_event_timestamp, json[QString("eventTimestamp")]);
    m_event_timestamp_isSet = !json[QString("eventTimestamp")].isNull() && m_event_timestamp_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_workflow_execution_started_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_started_event_attributes, json[QString("workflowExecutionStartedEventAttributes")]);
    m_workflow_execution_started_event_attributes_isSet = !json[QString("workflowExecutionStartedEventAttributes")].isNull() && m_workflow_execution_started_event_attributes_isValid;

    m_workflow_execution_completed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_completed_event_attributes, json[QString("workflowExecutionCompletedEventAttributes")]);
    m_workflow_execution_completed_event_attributes_isSet = !json[QString("workflowExecutionCompletedEventAttributes")].isNull() && m_workflow_execution_completed_event_attributes_isValid;

    m_complete_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_complete_workflow_execution_failed_event_attributes, json[QString("completeWorkflowExecutionFailedEventAttributes")]);
    m_complete_workflow_execution_failed_event_attributes_isSet = !json[QString("completeWorkflowExecutionFailedEventAttributes")].isNull() && m_complete_workflow_execution_failed_event_attributes_isValid;

    m_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_failed_event_attributes, json[QString("workflowExecutionFailedEventAttributes")]);
    m_workflow_execution_failed_event_attributes_isSet = !json[QString("workflowExecutionFailedEventAttributes")].isNull() && m_workflow_execution_failed_event_attributes_isValid;

    m_fail_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_fail_workflow_execution_failed_event_attributes, json[QString("failWorkflowExecutionFailedEventAttributes")]);
    m_fail_workflow_execution_failed_event_attributes_isSet = !json[QString("failWorkflowExecutionFailedEventAttributes")].isNull() && m_fail_workflow_execution_failed_event_attributes_isValid;

    m_workflow_execution_timed_out_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_timed_out_event_attributes, json[QString("workflowExecutionTimedOutEventAttributes")]);
    m_workflow_execution_timed_out_event_attributes_isSet = !json[QString("workflowExecutionTimedOutEventAttributes")].isNull() && m_workflow_execution_timed_out_event_attributes_isValid;

    m_workflow_execution_canceled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_canceled_event_attributes, json[QString("workflowExecutionCanceledEventAttributes")]);
    m_workflow_execution_canceled_event_attributes_isSet = !json[QString("workflowExecutionCanceledEventAttributes")].isNull() && m_workflow_execution_canceled_event_attributes_isValid;

    m_cancel_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_cancel_workflow_execution_failed_event_attributes, json[QString("cancelWorkflowExecutionFailedEventAttributes")]);
    m_cancel_workflow_execution_failed_event_attributes_isSet = !json[QString("cancelWorkflowExecutionFailedEventAttributes")].isNull() && m_cancel_workflow_execution_failed_event_attributes_isValid;

    m_workflow_execution_continued_as_new_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_continued_as_new_event_attributes, json[QString("workflowExecutionContinuedAsNewEventAttributes")]);
    m_workflow_execution_continued_as_new_event_attributes_isSet = !json[QString("workflowExecutionContinuedAsNewEventAttributes")].isNull() && m_workflow_execution_continued_as_new_event_attributes_isValid;

    m_continue_as_new_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_continue_as_new_workflow_execution_failed_event_attributes, json[QString("continueAsNewWorkflowExecutionFailedEventAttributes")]);
    m_continue_as_new_workflow_execution_failed_event_attributes_isSet = !json[QString("continueAsNewWorkflowExecutionFailedEventAttributes")].isNull() && m_continue_as_new_workflow_execution_failed_event_attributes_isValid;

    m_workflow_execution_terminated_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_terminated_event_attributes, json[QString("workflowExecutionTerminatedEventAttributes")]);
    m_workflow_execution_terminated_event_attributes_isSet = !json[QString("workflowExecutionTerminatedEventAttributes")].isNull() && m_workflow_execution_terminated_event_attributes_isValid;

    m_workflow_execution_cancel_requested_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_cancel_requested_event_attributes, json[QString("workflowExecutionCancelRequestedEventAttributes")]);
    m_workflow_execution_cancel_requested_event_attributes_isSet = !json[QString("workflowExecutionCancelRequestedEventAttributes")].isNull() && m_workflow_execution_cancel_requested_event_attributes_isValid;

    m_decision_task_scheduled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_decision_task_scheduled_event_attributes, json[QString("decisionTaskScheduledEventAttributes")]);
    m_decision_task_scheduled_event_attributes_isSet = !json[QString("decisionTaskScheduledEventAttributes")].isNull() && m_decision_task_scheduled_event_attributes_isValid;

    m_decision_task_started_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_decision_task_started_event_attributes, json[QString("decisionTaskStartedEventAttributes")]);
    m_decision_task_started_event_attributes_isSet = !json[QString("decisionTaskStartedEventAttributes")].isNull() && m_decision_task_started_event_attributes_isValid;

    m_decision_task_completed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_decision_task_completed_event_attributes, json[QString("decisionTaskCompletedEventAttributes")]);
    m_decision_task_completed_event_attributes_isSet = !json[QString("decisionTaskCompletedEventAttributes")].isNull() && m_decision_task_completed_event_attributes_isValid;

    m_decision_task_timed_out_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_decision_task_timed_out_event_attributes, json[QString("decisionTaskTimedOutEventAttributes")]);
    m_decision_task_timed_out_event_attributes_isSet = !json[QString("decisionTaskTimedOutEventAttributes")].isNull() && m_decision_task_timed_out_event_attributes_isValid;

    m_activity_task_scheduled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_activity_task_scheduled_event_attributes, json[QString("activityTaskScheduledEventAttributes")]);
    m_activity_task_scheduled_event_attributes_isSet = !json[QString("activityTaskScheduledEventAttributes")].isNull() && m_activity_task_scheduled_event_attributes_isValid;

    m_activity_task_started_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_activity_task_started_event_attributes, json[QString("activityTaskStartedEventAttributes")]);
    m_activity_task_started_event_attributes_isSet = !json[QString("activityTaskStartedEventAttributes")].isNull() && m_activity_task_started_event_attributes_isValid;

    m_activity_task_completed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_activity_task_completed_event_attributes, json[QString("activityTaskCompletedEventAttributes")]);
    m_activity_task_completed_event_attributes_isSet = !json[QString("activityTaskCompletedEventAttributes")].isNull() && m_activity_task_completed_event_attributes_isValid;

    m_activity_task_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_activity_task_failed_event_attributes, json[QString("activityTaskFailedEventAttributes")]);
    m_activity_task_failed_event_attributes_isSet = !json[QString("activityTaskFailedEventAttributes")].isNull() && m_activity_task_failed_event_attributes_isValid;

    m_activity_task_timed_out_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_activity_task_timed_out_event_attributes, json[QString("activityTaskTimedOutEventAttributes")]);
    m_activity_task_timed_out_event_attributes_isSet = !json[QString("activityTaskTimedOutEventAttributes")].isNull() && m_activity_task_timed_out_event_attributes_isValid;

    m_activity_task_canceled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_activity_task_canceled_event_attributes, json[QString("activityTaskCanceledEventAttributes")]);
    m_activity_task_canceled_event_attributes_isSet = !json[QString("activityTaskCanceledEventAttributes")].isNull() && m_activity_task_canceled_event_attributes_isValid;

    m_activity_task_cancel_requested_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_activity_task_cancel_requested_event_attributes, json[QString("activityTaskCancelRequestedEventAttributes")]);
    m_activity_task_cancel_requested_event_attributes_isSet = !json[QString("activityTaskCancelRequestedEventAttributes")].isNull() && m_activity_task_cancel_requested_event_attributes_isValid;

    m_workflow_execution_signaled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_workflow_execution_signaled_event_attributes, json[QString("workflowExecutionSignaledEventAttributes")]);
    m_workflow_execution_signaled_event_attributes_isSet = !json[QString("workflowExecutionSignaledEventAttributes")].isNull() && m_workflow_execution_signaled_event_attributes_isValid;

    m_marker_recorded_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_marker_recorded_event_attributes, json[QString("markerRecordedEventAttributes")]);
    m_marker_recorded_event_attributes_isSet = !json[QString("markerRecordedEventAttributes")].isNull() && m_marker_recorded_event_attributes_isValid;

    m_record_marker_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_record_marker_failed_event_attributes, json[QString("recordMarkerFailedEventAttributes")]);
    m_record_marker_failed_event_attributes_isSet = !json[QString("recordMarkerFailedEventAttributes")].isNull() && m_record_marker_failed_event_attributes_isValid;

    m_timer_started_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_timer_started_event_attributes, json[QString("timerStartedEventAttributes")]);
    m_timer_started_event_attributes_isSet = !json[QString("timerStartedEventAttributes")].isNull() && m_timer_started_event_attributes_isValid;

    m_timer_fired_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_timer_fired_event_attributes, json[QString("timerFiredEventAttributes")]);
    m_timer_fired_event_attributes_isSet = !json[QString("timerFiredEventAttributes")].isNull() && m_timer_fired_event_attributes_isValid;

    m_timer_canceled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_timer_canceled_event_attributes, json[QString("timerCanceledEventAttributes")]);
    m_timer_canceled_event_attributes_isSet = !json[QString("timerCanceledEventAttributes")].isNull() && m_timer_canceled_event_attributes_isValid;

    m_start_child_workflow_execution_initiated_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_start_child_workflow_execution_initiated_event_attributes, json[QString("startChildWorkflowExecutionInitiatedEventAttributes")]);
    m_start_child_workflow_execution_initiated_event_attributes_isSet = !json[QString("startChildWorkflowExecutionInitiatedEventAttributes")].isNull() && m_start_child_workflow_execution_initiated_event_attributes_isValid;

    m_child_workflow_execution_started_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_child_workflow_execution_started_event_attributes, json[QString("childWorkflowExecutionStartedEventAttributes")]);
    m_child_workflow_execution_started_event_attributes_isSet = !json[QString("childWorkflowExecutionStartedEventAttributes")].isNull() && m_child_workflow_execution_started_event_attributes_isValid;

    m_child_workflow_execution_completed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_child_workflow_execution_completed_event_attributes, json[QString("childWorkflowExecutionCompletedEventAttributes")]);
    m_child_workflow_execution_completed_event_attributes_isSet = !json[QString("childWorkflowExecutionCompletedEventAttributes")].isNull() && m_child_workflow_execution_completed_event_attributes_isValid;

    m_child_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_child_workflow_execution_failed_event_attributes, json[QString("childWorkflowExecutionFailedEventAttributes")]);
    m_child_workflow_execution_failed_event_attributes_isSet = !json[QString("childWorkflowExecutionFailedEventAttributes")].isNull() && m_child_workflow_execution_failed_event_attributes_isValid;

    m_child_workflow_execution_timed_out_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_child_workflow_execution_timed_out_event_attributes, json[QString("childWorkflowExecutionTimedOutEventAttributes")]);
    m_child_workflow_execution_timed_out_event_attributes_isSet = !json[QString("childWorkflowExecutionTimedOutEventAttributes")].isNull() && m_child_workflow_execution_timed_out_event_attributes_isValid;

    m_child_workflow_execution_canceled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_child_workflow_execution_canceled_event_attributes, json[QString("childWorkflowExecutionCanceledEventAttributes")]);
    m_child_workflow_execution_canceled_event_attributes_isSet = !json[QString("childWorkflowExecutionCanceledEventAttributes")].isNull() && m_child_workflow_execution_canceled_event_attributes_isValid;

    m_child_workflow_execution_terminated_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_child_workflow_execution_terminated_event_attributes, json[QString("childWorkflowExecutionTerminatedEventAttributes")]);
    m_child_workflow_execution_terminated_event_attributes_isSet = !json[QString("childWorkflowExecutionTerminatedEventAttributes")].isNull() && m_child_workflow_execution_terminated_event_attributes_isValid;

    m_signal_external_workflow_execution_initiated_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_signal_external_workflow_execution_initiated_event_attributes, json[QString("signalExternalWorkflowExecutionInitiatedEventAttributes")]);
    m_signal_external_workflow_execution_initiated_event_attributes_isSet = !json[QString("signalExternalWorkflowExecutionInitiatedEventAttributes")].isNull() && m_signal_external_workflow_execution_initiated_event_attributes_isValid;

    m_external_workflow_execution_signaled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_external_workflow_execution_signaled_event_attributes, json[QString("externalWorkflowExecutionSignaledEventAttributes")]);
    m_external_workflow_execution_signaled_event_attributes_isSet = !json[QString("externalWorkflowExecutionSignaledEventAttributes")].isNull() && m_external_workflow_execution_signaled_event_attributes_isValid;

    m_signal_external_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_signal_external_workflow_execution_failed_event_attributes, json[QString("signalExternalWorkflowExecutionFailedEventAttributes")]);
    m_signal_external_workflow_execution_failed_event_attributes_isSet = !json[QString("signalExternalWorkflowExecutionFailedEventAttributes")].isNull() && m_signal_external_workflow_execution_failed_event_attributes_isValid;

    m_external_workflow_execution_cancel_requested_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_external_workflow_execution_cancel_requested_event_attributes, json[QString("externalWorkflowExecutionCancelRequestedEventAttributes")]);
    m_external_workflow_execution_cancel_requested_event_attributes_isSet = !json[QString("externalWorkflowExecutionCancelRequestedEventAttributes")].isNull() && m_external_workflow_execution_cancel_requested_event_attributes_isValid;

    m_request_cancel_external_workflow_execution_initiated_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_cancel_external_workflow_execution_initiated_event_attributes, json[QString("requestCancelExternalWorkflowExecutionInitiatedEventAttributes")]);
    m_request_cancel_external_workflow_execution_initiated_event_attributes_isSet = !json[QString("requestCancelExternalWorkflowExecutionInitiatedEventAttributes")].isNull() && m_request_cancel_external_workflow_execution_initiated_event_attributes_isValid;

    m_request_cancel_external_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_cancel_external_workflow_execution_failed_event_attributes, json[QString("requestCancelExternalWorkflowExecutionFailedEventAttributes")]);
    m_request_cancel_external_workflow_execution_failed_event_attributes_isSet = !json[QString("requestCancelExternalWorkflowExecutionFailedEventAttributes")].isNull() && m_request_cancel_external_workflow_execution_failed_event_attributes_isValid;

    m_schedule_activity_task_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_schedule_activity_task_failed_event_attributes, json[QString("scheduleActivityTaskFailedEventAttributes")]);
    m_schedule_activity_task_failed_event_attributes_isSet = !json[QString("scheduleActivityTaskFailedEventAttributes")].isNull() && m_schedule_activity_task_failed_event_attributes_isValid;

    m_request_cancel_activity_task_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_cancel_activity_task_failed_event_attributes, json[QString("requestCancelActivityTaskFailedEventAttributes")]);
    m_request_cancel_activity_task_failed_event_attributes_isSet = !json[QString("requestCancelActivityTaskFailedEventAttributes")].isNull() && m_request_cancel_activity_task_failed_event_attributes_isValid;

    m_start_timer_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_start_timer_failed_event_attributes, json[QString("startTimerFailedEventAttributes")]);
    m_start_timer_failed_event_attributes_isSet = !json[QString("startTimerFailedEventAttributes")].isNull() && m_start_timer_failed_event_attributes_isValid;

    m_cancel_timer_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_cancel_timer_failed_event_attributes, json[QString("cancelTimerFailedEventAttributes")]);
    m_cancel_timer_failed_event_attributes_isSet = !json[QString("cancelTimerFailedEventAttributes")].isNull() && m_cancel_timer_failed_event_attributes_isValid;

    m_start_child_workflow_execution_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_start_child_workflow_execution_failed_event_attributes, json[QString("startChildWorkflowExecutionFailedEventAttributes")]);
    m_start_child_workflow_execution_failed_event_attributes_isSet = !json[QString("startChildWorkflowExecutionFailedEventAttributes")].isNull() && m_start_child_workflow_execution_failed_event_attributes_isValid;

    m_lambda_function_scheduled_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_scheduled_event_attributes, json[QString("lambdaFunctionScheduledEventAttributes")]);
    m_lambda_function_scheduled_event_attributes_isSet = !json[QString("lambdaFunctionScheduledEventAttributes")].isNull() && m_lambda_function_scheduled_event_attributes_isValid;

    m_lambda_function_started_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_started_event_attributes, json[QString("lambdaFunctionStartedEventAttributes")]);
    m_lambda_function_started_event_attributes_isSet = !json[QString("lambdaFunctionStartedEventAttributes")].isNull() && m_lambda_function_started_event_attributes_isValid;

    m_lambda_function_completed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_completed_event_attributes, json[QString("lambdaFunctionCompletedEventAttributes")]);
    m_lambda_function_completed_event_attributes_isSet = !json[QString("lambdaFunctionCompletedEventAttributes")].isNull() && m_lambda_function_completed_event_attributes_isValid;

    m_lambda_function_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_failed_event_attributes, json[QString("lambdaFunctionFailedEventAttributes")]);
    m_lambda_function_failed_event_attributes_isSet = !json[QString("lambdaFunctionFailedEventAttributes")].isNull() && m_lambda_function_failed_event_attributes_isValid;

    m_lambda_function_timed_out_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_timed_out_event_attributes, json[QString("lambdaFunctionTimedOutEventAttributes")]);
    m_lambda_function_timed_out_event_attributes_isSet = !json[QString("lambdaFunctionTimedOutEventAttributes")].isNull() && m_lambda_function_timed_out_event_attributes_isValid;

    m_schedule_lambda_function_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_schedule_lambda_function_failed_event_attributes, json[QString("scheduleLambdaFunctionFailedEventAttributes")]);
    m_schedule_lambda_function_failed_event_attributes_isSet = !json[QString("scheduleLambdaFunctionFailedEventAttributes")].isNull() && m_schedule_lambda_function_failed_event_attributes_isValid;

    m_start_lambda_function_failed_event_attributes_isValid = ::OpenAPI::fromJsonValue(m_start_lambda_function_failed_event_attributes, json[QString("startLambdaFunctionFailedEventAttributes")]);
    m_start_lambda_function_failed_event_attributes_isSet = !json[QString("startLambdaFunctionFailedEventAttributes")].isNull() && m_start_lambda_function_failed_event_attributes_isValid;
}

QString OAIHistoryEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_timestamp_isSet) {
        obj.insert(QString("eventTimestamp"), ::OpenAPI::toJsonValue(m_event_timestamp));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_workflow_execution_started_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionStartedEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_started_event_attributes));
    }
    if (m_workflow_execution_completed_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionCompletedEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_completed_event_attributes));
    }
    if (m_complete_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("completeWorkflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_complete_workflow_execution_failed_event_attributes));
    }
    if (m_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_failed_event_attributes));
    }
    if (m_fail_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("failWorkflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_fail_workflow_execution_failed_event_attributes));
    }
    if (m_workflow_execution_timed_out_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionTimedOutEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_timed_out_event_attributes));
    }
    if (m_workflow_execution_canceled_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionCanceledEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_canceled_event_attributes));
    }
    if (m_cancel_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("cancelWorkflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_cancel_workflow_execution_failed_event_attributes));
    }
    if (m_workflow_execution_continued_as_new_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionContinuedAsNewEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_continued_as_new_event_attributes));
    }
    if (m_continue_as_new_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("continueAsNewWorkflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_continue_as_new_workflow_execution_failed_event_attributes));
    }
    if (m_workflow_execution_terminated_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionTerminatedEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_terminated_event_attributes));
    }
    if (m_workflow_execution_cancel_requested_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionCancelRequestedEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_cancel_requested_event_attributes));
    }
    if (m_decision_task_scheduled_event_attributes.isSet()) {
        obj.insert(QString("decisionTaskScheduledEventAttributes"), ::OpenAPI::toJsonValue(m_decision_task_scheduled_event_attributes));
    }
    if (m_decision_task_started_event_attributes.isSet()) {
        obj.insert(QString("decisionTaskStartedEventAttributes"), ::OpenAPI::toJsonValue(m_decision_task_started_event_attributes));
    }
    if (m_decision_task_completed_event_attributes.isSet()) {
        obj.insert(QString("decisionTaskCompletedEventAttributes"), ::OpenAPI::toJsonValue(m_decision_task_completed_event_attributes));
    }
    if (m_decision_task_timed_out_event_attributes.isSet()) {
        obj.insert(QString("decisionTaskTimedOutEventAttributes"), ::OpenAPI::toJsonValue(m_decision_task_timed_out_event_attributes));
    }
    if (m_activity_task_scheduled_event_attributes.isSet()) {
        obj.insert(QString("activityTaskScheduledEventAttributes"), ::OpenAPI::toJsonValue(m_activity_task_scheduled_event_attributes));
    }
    if (m_activity_task_started_event_attributes.isSet()) {
        obj.insert(QString("activityTaskStartedEventAttributes"), ::OpenAPI::toJsonValue(m_activity_task_started_event_attributes));
    }
    if (m_activity_task_completed_event_attributes.isSet()) {
        obj.insert(QString("activityTaskCompletedEventAttributes"), ::OpenAPI::toJsonValue(m_activity_task_completed_event_attributes));
    }
    if (m_activity_task_failed_event_attributes.isSet()) {
        obj.insert(QString("activityTaskFailedEventAttributes"), ::OpenAPI::toJsonValue(m_activity_task_failed_event_attributes));
    }
    if (m_activity_task_timed_out_event_attributes.isSet()) {
        obj.insert(QString("activityTaskTimedOutEventAttributes"), ::OpenAPI::toJsonValue(m_activity_task_timed_out_event_attributes));
    }
    if (m_activity_task_canceled_event_attributes.isSet()) {
        obj.insert(QString("activityTaskCanceledEventAttributes"), ::OpenAPI::toJsonValue(m_activity_task_canceled_event_attributes));
    }
    if (m_activity_task_cancel_requested_event_attributes.isSet()) {
        obj.insert(QString("activityTaskCancelRequestedEventAttributes"), ::OpenAPI::toJsonValue(m_activity_task_cancel_requested_event_attributes));
    }
    if (m_workflow_execution_signaled_event_attributes.isSet()) {
        obj.insert(QString("workflowExecutionSignaledEventAttributes"), ::OpenAPI::toJsonValue(m_workflow_execution_signaled_event_attributes));
    }
    if (m_marker_recorded_event_attributes.isSet()) {
        obj.insert(QString("markerRecordedEventAttributes"), ::OpenAPI::toJsonValue(m_marker_recorded_event_attributes));
    }
    if (m_record_marker_failed_event_attributes.isSet()) {
        obj.insert(QString("recordMarkerFailedEventAttributes"), ::OpenAPI::toJsonValue(m_record_marker_failed_event_attributes));
    }
    if (m_timer_started_event_attributes.isSet()) {
        obj.insert(QString("timerStartedEventAttributes"), ::OpenAPI::toJsonValue(m_timer_started_event_attributes));
    }
    if (m_timer_fired_event_attributes.isSet()) {
        obj.insert(QString("timerFiredEventAttributes"), ::OpenAPI::toJsonValue(m_timer_fired_event_attributes));
    }
    if (m_timer_canceled_event_attributes.isSet()) {
        obj.insert(QString("timerCanceledEventAttributes"), ::OpenAPI::toJsonValue(m_timer_canceled_event_attributes));
    }
    if (m_start_child_workflow_execution_initiated_event_attributes.isSet()) {
        obj.insert(QString("startChildWorkflowExecutionInitiatedEventAttributes"), ::OpenAPI::toJsonValue(m_start_child_workflow_execution_initiated_event_attributes));
    }
    if (m_child_workflow_execution_started_event_attributes.isSet()) {
        obj.insert(QString("childWorkflowExecutionStartedEventAttributes"), ::OpenAPI::toJsonValue(m_child_workflow_execution_started_event_attributes));
    }
    if (m_child_workflow_execution_completed_event_attributes.isSet()) {
        obj.insert(QString("childWorkflowExecutionCompletedEventAttributes"), ::OpenAPI::toJsonValue(m_child_workflow_execution_completed_event_attributes));
    }
    if (m_child_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("childWorkflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_child_workflow_execution_failed_event_attributes));
    }
    if (m_child_workflow_execution_timed_out_event_attributes.isSet()) {
        obj.insert(QString("childWorkflowExecutionTimedOutEventAttributes"), ::OpenAPI::toJsonValue(m_child_workflow_execution_timed_out_event_attributes));
    }
    if (m_child_workflow_execution_canceled_event_attributes.isSet()) {
        obj.insert(QString("childWorkflowExecutionCanceledEventAttributes"), ::OpenAPI::toJsonValue(m_child_workflow_execution_canceled_event_attributes));
    }
    if (m_child_workflow_execution_terminated_event_attributes.isSet()) {
        obj.insert(QString("childWorkflowExecutionTerminatedEventAttributes"), ::OpenAPI::toJsonValue(m_child_workflow_execution_terminated_event_attributes));
    }
    if (m_signal_external_workflow_execution_initiated_event_attributes.isSet()) {
        obj.insert(QString("signalExternalWorkflowExecutionInitiatedEventAttributes"), ::OpenAPI::toJsonValue(m_signal_external_workflow_execution_initiated_event_attributes));
    }
    if (m_external_workflow_execution_signaled_event_attributes.isSet()) {
        obj.insert(QString("externalWorkflowExecutionSignaledEventAttributes"), ::OpenAPI::toJsonValue(m_external_workflow_execution_signaled_event_attributes));
    }
    if (m_signal_external_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("signalExternalWorkflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_signal_external_workflow_execution_failed_event_attributes));
    }
    if (m_external_workflow_execution_cancel_requested_event_attributes.isSet()) {
        obj.insert(QString("externalWorkflowExecutionCancelRequestedEventAttributes"), ::OpenAPI::toJsonValue(m_external_workflow_execution_cancel_requested_event_attributes));
    }
    if (m_request_cancel_external_workflow_execution_initiated_event_attributes.isSet()) {
        obj.insert(QString("requestCancelExternalWorkflowExecutionInitiatedEventAttributes"), ::OpenAPI::toJsonValue(m_request_cancel_external_workflow_execution_initiated_event_attributes));
    }
    if (m_request_cancel_external_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("requestCancelExternalWorkflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_request_cancel_external_workflow_execution_failed_event_attributes));
    }
    if (m_schedule_activity_task_failed_event_attributes.isSet()) {
        obj.insert(QString("scheduleActivityTaskFailedEventAttributes"), ::OpenAPI::toJsonValue(m_schedule_activity_task_failed_event_attributes));
    }
    if (m_request_cancel_activity_task_failed_event_attributes.isSet()) {
        obj.insert(QString("requestCancelActivityTaskFailedEventAttributes"), ::OpenAPI::toJsonValue(m_request_cancel_activity_task_failed_event_attributes));
    }
    if (m_start_timer_failed_event_attributes.isSet()) {
        obj.insert(QString("startTimerFailedEventAttributes"), ::OpenAPI::toJsonValue(m_start_timer_failed_event_attributes));
    }
    if (m_cancel_timer_failed_event_attributes.isSet()) {
        obj.insert(QString("cancelTimerFailedEventAttributes"), ::OpenAPI::toJsonValue(m_cancel_timer_failed_event_attributes));
    }
    if (m_start_child_workflow_execution_failed_event_attributes.isSet()) {
        obj.insert(QString("startChildWorkflowExecutionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_start_child_workflow_execution_failed_event_attributes));
    }
    if (m_lambda_function_scheduled_event_attributes.isSet()) {
        obj.insert(QString("lambdaFunctionScheduledEventAttributes"), ::OpenAPI::toJsonValue(m_lambda_function_scheduled_event_attributes));
    }
    if (m_lambda_function_started_event_attributes.isSet()) {
        obj.insert(QString("lambdaFunctionStartedEventAttributes"), ::OpenAPI::toJsonValue(m_lambda_function_started_event_attributes));
    }
    if (m_lambda_function_completed_event_attributes.isSet()) {
        obj.insert(QString("lambdaFunctionCompletedEventAttributes"), ::OpenAPI::toJsonValue(m_lambda_function_completed_event_attributes));
    }
    if (m_lambda_function_failed_event_attributes.isSet()) {
        obj.insert(QString("lambdaFunctionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_lambda_function_failed_event_attributes));
    }
    if (m_lambda_function_timed_out_event_attributes.isSet()) {
        obj.insert(QString("lambdaFunctionTimedOutEventAttributes"), ::OpenAPI::toJsonValue(m_lambda_function_timed_out_event_attributes));
    }
    if (m_schedule_lambda_function_failed_event_attributes.isSet()) {
        obj.insert(QString("scheduleLambdaFunctionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_schedule_lambda_function_failed_event_attributes));
    }
    if (m_start_lambda_function_failed_event_attributes.isSet()) {
        obj.insert(QString("startLambdaFunctionFailedEventAttributes"), ::OpenAPI::toJsonValue(m_start_lambda_function_failed_event_attributes));
    }
    return obj;
}

QDateTime OAIHistoryEvent::getEventTimestamp() const {
    return m_event_timestamp;
}
void OAIHistoryEvent::setEventTimestamp(const QDateTime &event_timestamp) {
    m_event_timestamp = event_timestamp;
    m_event_timestamp_isSet = true;
}

bool OAIHistoryEvent::is_event_timestamp_Set() const{
    return m_event_timestamp_isSet;
}

bool OAIHistoryEvent::is_event_timestamp_Valid() const{
    return m_event_timestamp_isValid;
}

OAIEventType OAIHistoryEvent::getEventType() const {
    return m_event_type;
}
void OAIHistoryEvent::setEventType(const OAIEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIHistoryEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIHistoryEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

qint32 OAIHistoryEvent::getEventId() const {
    return m_event_id;
}
void OAIHistoryEvent::setEventId(const qint32 &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIHistoryEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIHistoryEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

OAIHistoryEvent_workflowExecutionStartedEventAttributes OAIHistoryEvent::getWorkflowExecutionStartedEventAttributes() const {
    return m_workflow_execution_started_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionStartedEventAttributes(const OAIHistoryEvent_workflowExecutionStartedEventAttributes &workflow_execution_started_event_attributes) {
    m_workflow_execution_started_event_attributes = workflow_execution_started_event_attributes;
    m_workflow_execution_started_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_started_event_attributes_Set() const{
    return m_workflow_execution_started_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_started_event_attributes_Valid() const{
    return m_workflow_execution_started_event_attributes_isValid;
}

OAIHistoryEvent_workflowExecutionCompletedEventAttributes OAIHistoryEvent::getWorkflowExecutionCompletedEventAttributes() const {
    return m_workflow_execution_completed_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionCompletedEventAttributes(const OAIHistoryEvent_workflowExecutionCompletedEventAttributes &workflow_execution_completed_event_attributes) {
    m_workflow_execution_completed_event_attributes = workflow_execution_completed_event_attributes;
    m_workflow_execution_completed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_completed_event_attributes_Set() const{
    return m_workflow_execution_completed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_completed_event_attributes_Valid() const{
    return m_workflow_execution_completed_event_attributes_isValid;
}

OAIHistoryEvent_completeWorkflowExecutionFailedEventAttributes OAIHistoryEvent::getCompleteWorkflowExecutionFailedEventAttributes() const {
    return m_complete_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setCompleteWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_completeWorkflowExecutionFailedEventAttributes &complete_workflow_execution_failed_event_attributes) {
    m_complete_workflow_execution_failed_event_attributes = complete_workflow_execution_failed_event_attributes;
    m_complete_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_complete_workflow_execution_failed_event_attributes_Set() const{
    return m_complete_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_complete_workflow_execution_failed_event_attributes_Valid() const{
    return m_complete_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_workflowExecutionFailedEventAttributes OAIHistoryEvent::getWorkflowExecutionFailedEventAttributes() const {
    return m_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_workflowExecutionFailedEventAttributes &workflow_execution_failed_event_attributes) {
    m_workflow_execution_failed_event_attributes = workflow_execution_failed_event_attributes;
    m_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_failed_event_attributes_Set() const{
    return m_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_failed_event_attributes_Valid() const{
    return m_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_failWorkflowExecutionFailedEventAttributes OAIHistoryEvent::getFailWorkflowExecutionFailedEventAttributes() const {
    return m_fail_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setFailWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_failWorkflowExecutionFailedEventAttributes &fail_workflow_execution_failed_event_attributes) {
    m_fail_workflow_execution_failed_event_attributes = fail_workflow_execution_failed_event_attributes;
    m_fail_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_fail_workflow_execution_failed_event_attributes_Set() const{
    return m_fail_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_fail_workflow_execution_failed_event_attributes_Valid() const{
    return m_fail_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_workflowExecutionTimedOutEventAttributes OAIHistoryEvent::getWorkflowExecutionTimedOutEventAttributes() const {
    return m_workflow_execution_timed_out_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionTimedOutEventAttributes(const OAIHistoryEvent_workflowExecutionTimedOutEventAttributes &workflow_execution_timed_out_event_attributes) {
    m_workflow_execution_timed_out_event_attributes = workflow_execution_timed_out_event_attributes;
    m_workflow_execution_timed_out_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_timed_out_event_attributes_Set() const{
    return m_workflow_execution_timed_out_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_timed_out_event_attributes_Valid() const{
    return m_workflow_execution_timed_out_event_attributes_isValid;
}

OAIHistoryEvent_workflowExecutionCanceledEventAttributes OAIHistoryEvent::getWorkflowExecutionCanceledEventAttributes() const {
    return m_workflow_execution_canceled_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionCanceledEventAttributes(const OAIHistoryEvent_workflowExecutionCanceledEventAttributes &workflow_execution_canceled_event_attributes) {
    m_workflow_execution_canceled_event_attributes = workflow_execution_canceled_event_attributes;
    m_workflow_execution_canceled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_canceled_event_attributes_Set() const{
    return m_workflow_execution_canceled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_canceled_event_attributes_Valid() const{
    return m_workflow_execution_canceled_event_attributes_isValid;
}

OAIHistoryEvent_cancelWorkflowExecutionFailedEventAttributes OAIHistoryEvent::getCancelWorkflowExecutionFailedEventAttributes() const {
    return m_cancel_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setCancelWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_cancelWorkflowExecutionFailedEventAttributes &cancel_workflow_execution_failed_event_attributes) {
    m_cancel_workflow_execution_failed_event_attributes = cancel_workflow_execution_failed_event_attributes;
    m_cancel_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_cancel_workflow_execution_failed_event_attributes_Set() const{
    return m_cancel_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_cancel_workflow_execution_failed_event_attributes_Valid() const{
    return m_cancel_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_workflowExecutionContinuedAsNewEventAttributes OAIHistoryEvent::getWorkflowExecutionContinuedAsNewEventAttributes() const {
    return m_workflow_execution_continued_as_new_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionContinuedAsNewEventAttributes(const OAIHistoryEvent_workflowExecutionContinuedAsNewEventAttributes &workflow_execution_continued_as_new_event_attributes) {
    m_workflow_execution_continued_as_new_event_attributes = workflow_execution_continued_as_new_event_attributes;
    m_workflow_execution_continued_as_new_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_continued_as_new_event_attributes_Set() const{
    return m_workflow_execution_continued_as_new_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_continued_as_new_event_attributes_Valid() const{
    return m_workflow_execution_continued_as_new_event_attributes_isValid;
}

OAIHistoryEvent_continueAsNewWorkflowExecutionFailedEventAttributes OAIHistoryEvent::getContinueAsNewWorkflowExecutionFailedEventAttributes() const {
    return m_continue_as_new_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setContinueAsNewWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_continueAsNewWorkflowExecutionFailedEventAttributes &continue_as_new_workflow_execution_failed_event_attributes) {
    m_continue_as_new_workflow_execution_failed_event_attributes = continue_as_new_workflow_execution_failed_event_attributes;
    m_continue_as_new_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_continue_as_new_workflow_execution_failed_event_attributes_Set() const{
    return m_continue_as_new_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_continue_as_new_workflow_execution_failed_event_attributes_Valid() const{
    return m_continue_as_new_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_workflowExecutionTerminatedEventAttributes OAIHistoryEvent::getWorkflowExecutionTerminatedEventAttributes() const {
    return m_workflow_execution_terminated_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionTerminatedEventAttributes(const OAIHistoryEvent_workflowExecutionTerminatedEventAttributes &workflow_execution_terminated_event_attributes) {
    m_workflow_execution_terminated_event_attributes = workflow_execution_terminated_event_attributes;
    m_workflow_execution_terminated_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_terminated_event_attributes_Set() const{
    return m_workflow_execution_terminated_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_terminated_event_attributes_Valid() const{
    return m_workflow_execution_terminated_event_attributes_isValid;
}

OAIHistoryEvent_workflowExecutionCancelRequestedEventAttributes OAIHistoryEvent::getWorkflowExecutionCancelRequestedEventAttributes() const {
    return m_workflow_execution_cancel_requested_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionCancelRequestedEventAttributes(const OAIHistoryEvent_workflowExecutionCancelRequestedEventAttributes &workflow_execution_cancel_requested_event_attributes) {
    m_workflow_execution_cancel_requested_event_attributes = workflow_execution_cancel_requested_event_attributes;
    m_workflow_execution_cancel_requested_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_cancel_requested_event_attributes_Set() const{
    return m_workflow_execution_cancel_requested_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_cancel_requested_event_attributes_Valid() const{
    return m_workflow_execution_cancel_requested_event_attributes_isValid;
}

OAIHistoryEvent_decisionTaskScheduledEventAttributes OAIHistoryEvent::getDecisionTaskScheduledEventAttributes() const {
    return m_decision_task_scheduled_event_attributes;
}
void OAIHistoryEvent::setDecisionTaskScheduledEventAttributes(const OAIHistoryEvent_decisionTaskScheduledEventAttributes &decision_task_scheduled_event_attributes) {
    m_decision_task_scheduled_event_attributes = decision_task_scheduled_event_attributes;
    m_decision_task_scheduled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_decision_task_scheduled_event_attributes_Set() const{
    return m_decision_task_scheduled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_decision_task_scheduled_event_attributes_Valid() const{
    return m_decision_task_scheduled_event_attributes_isValid;
}

OAIHistoryEvent_decisionTaskStartedEventAttributes OAIHistoryEvent::getDecisionTaskStartedEventAttributes() const {
    return m_decision_task_started_event_attributes;
}
void OAIHistoryEvent::setDecisionTaskStartedEventAttributes(const OAIHistoryEvent_decisionTaskStartedEventAttributes &decision_task_started_event_attributes) {
    m_decision_task_started_event_attributes = decision_task_started_event_attributes;
    m_decision_task_started_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_decision_task_started_event_attributes_Set() const{
    return m_decision_task_started_event_attributes_isSet;
}

bool OAIHistoryEvent::is_decision_task_started_event_attributes_Valid() const{
    return m_decision_task_started_event_attributes_isValid;
}

OAIHistoryEvent_decisionTaskCompletedEventAttributes OAIHistoryEvent::getDecisionTaskCompletedEventAttributes() const {
    return m_decision_task_completed_event_attributes;
}
void OAIHistoryEvent::setDecisionTaskCompletedEventAttributes(const OAIHistoryEvent_decisionTaskCompletedEventAttributes &decision_task_completed_event_attributes) {
    m_decision_task_completed_event_attributes = decision_task_completed_event_attributes;
    m_decision_task_completed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_decision_task_completed_event_attributes_Set() const{
    return m_decision_task_completed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_decision_task_completed_event_attributes_Valid() const{
    return m_decision_task_completed_event_attributes_isValid;
}

OAIHistoryEvent_decisionTaskTimedOutEventAttributes OAIHistoryEvent::getDecisionTaskTimedOutEventAttributes() const {
    return m_decision_task_timed_out_event_attributes;
}
void OAIHistoryEvent::setDecisionTaskTimedOutEventAttributes(const OAIHistoryEvent_decisionTaskTimedOutEventAttributes &decision_task_timed_out_event_attributes) {
    m_decision_task_timed_out_event_attributes = decision_task_timed_out_event_attributes;
    m_decision_task_timed_out_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_decision_task_timed_out_event_attributes_Set() const{
    return m_decision_task_timed_out_event_attributes_isSet;
}

bool OAIHistoryEvent::is_decision_task_timed_out_event_attributes_Valid() const{
    return m_decision_task_timed_out_event_attributes_isValid;
}

OAIHistoryEvent_activityTaskScheduledEventAttributes OAIHistoryEvent::getActivityTaskScheduledEventAttributes() const {
    return m_activity_task_scheduled_event_attributes;
}
void OAIHistoryEvent::setActivityTaskScheduledEventAttributes(const OAIHistoryEvent_activityTaskScheduledEventAttributes &activity_task_scheduled_event_attributes) {
    m_activity_task_scheduled_event_attributes = activity_task_scheduled_event_attributes;
    m_activity_task_scheduled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_activity_task_scheduled_event_attributes_Set() const{
    return m_activity_task_scheduled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_activity_task_scheduled_event_attributes_Valid() const{
    return m_activity_task_scheduled_event_attributes_isValid;
}

OAIHistoryEvent_activityTaskStartedEventAttributes OAIHistoryEvent::getActivityTaskStartedEventAttributes() const {
    return m_activity_task_started_event_attributes;
}
void OAIHistoryEvent::setActivityTaskStartedEventAttributes(const OAIHistoryEvent_activityTaskStartedEventAttributes &activity_task_started_event_attributes) {
    m_activity_task_started_event_attributes = activity_task_started_event_attributes;
    m_activity_task_started_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_activity_task_started_event_attributes_Set() const{
    return m_activity_task_started_event_attributes_isSet;
}

bool OAIHistoryEvent::is_activity_task_started_event_attributes_Valid() const{
    return m_activity_task_started_event_attributes_isValid;
}

OAIHistoryEvent_activityTaskCompletedEventAttributes OAIHistoryEvent::getActivityTaskCompletedEventAttributes() const {
    return m_activity_task_completed_event_attributes;
}
void OAIHistoryEvent::setActivityTaskCompletedEventAttributes(const OAIHistoryEvent_activityTaskCompletedEventAttributes &activity_task_completed_event_attributes) {
    m_activity_task_completed_event_attributes = activity_task_completed_event_attributes;
    m_activity_task_completed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_activity_task_completed_event_attributes_Set() const{
    return m_activity_task_completed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_activity_task_completed_event_attributes_Valid() const{
    return m_activity_task_completed_event_attributes_isValid;
}

OAIHistoryEvent_activityTaskFailedEventAttributes OAIHistoryEvent::getActivityTaskFailedEventAttributes() const {
    return m_activity_task_failed_event_attributes;
}
void OAIHistoryEvent::setActivityTaskFailedEventAttributes(const OAIHistoryEvent_activityTaskFailedEventAttributes &activity_task_failed_event_attributes) {
    m_activity_task_failed_event_attributes = activity_task_failed_event_attributes;
    m_activity_task_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_activity_task_failed_event_attributes_Set() const{
    return m_activity_task_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_activity_task_failed_event_attributes_Valid() const{
    return m_activity_task_failed_event_attributes_isValid;
}

OAIHistoryEvent_activityTaskTimedOutEventAttributes OAIHistoryEvent::getActivityTaskTimedOutEventAttributes() const {
    return m_activity_task_timed_out_event_attributes;
}
void OAIHistoryEvent::setActivityTaskTimedOutEventAttributes(const OAIHistoryEvent_activityTaskTimedOutEventAttributes &activity_task_timed_out_event_attributes) {
    m_activity_task_timed_out_event_attributes = activity_task_timed_out_event_attributes;
    m_activity_task_timed_out_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_activity_task_timed_out_event_attributes_Set() const{
    return m_activity_task_timed_out_event_attributes_isSet;
}

bool OAIHistoryEvent::is_activity_task_timed_out_event_attributes_Valid() const{
    return m_activity_task_timed_out_event_attributes_isValid;
}

OAIHistoryEvent_activityTaskCanceledEventAttributes OAIHistoryEvent::getActivityTaskCanceledEventAttributes() const {
    return m_activity_task_canceled_event_attributes;
}
void OAIHistoryEvent::setActivityTaskCanceledEventAttributes(const OAIHistoryEvent_activityTaskCanceledEventAttributes &activity_task_canceled_event_attributes) {
    m_activity_task_canceled_event_attributes = activity_task_canceled_event_attributes;
    m_activity_task_canceled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_activity_task_canceled_event_attributes_Set() const{
    return m_activity_task_canceled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_activity_task_canceled_event_attributes_Valid() const{
    return m_activity_task_canceled_event_attributes_isValid;
}

OAIHistoryEvent_activityTaskCancelRequestedEventAttributes OAIHistoryEvent::getActivityTaskCancelRequestedEventAttributes() const {
    return m_activity_task_cancel_requested_event_attributes;
}
void OAIHistoryEvent::setActivityTaskCancelRequestedEventAttributes(const OAIHistoryEvent_activityTaskCancelRequestedEventAttributes &activity_task_cancel_requested_event_attributes) {
    m_activity_task_cancel_requested_event_attributes = activity_task_cancel_requested_event_attributes;
    m_activity_task_cancel_requested_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_activity_task_cancel_requested_event_attributes_Set() const{
    return m_activity_task_cancel_requested_event_attributes_isSet;
}

bool OAIHistoryEvent::is_activity_task_cancel_requested_event_attributes_Valid() const{
    return m_activity_task_cancel_requested_event_attributes_isValid;
}

OAIHistoryEvent_workflowExecutionSignaledEventAttributes OAIHistoryEvent::getWorkflowExecutionSignaledEventAttributes() const {
    return m_workflow_execution_signaled_event_attributes;
}
void OAIHistoryEvent::setWorkflowExecutionSignaledEventAttributes(const OAIHistoryEvent_workflowExecutionSignaledEventAttributes &workflow_execution_signaled_event_attributes) {
    m_workflow_execution_signaled_event_attributes = workflow_execution_signaled_event_attributes;
    m_workflow_execution_signaled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_workflow_execution_signaled_event_attributes_Set() const{
    return m_workflow_execution_signaled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_workflow_execution_signaled_event_attributes_Valid() const{
    return m_workflow_execution_signaled_event_attributes_isValid;
}

OAIHistoryEvent_markerRecordedEventAttributes OAIHistoryEvent::getMarkerRecordedEventAttributes() const {
    return m_marker_recorded_event_attributes;
}
void OAIHistoryEvent::setMarkerRecordedEventAttributes(const OAIHistoryEvent_markerRecordedEventAttributes &marker_recorded_event_attributes) {
    m_marker_recorded_event_attributes = marker_recorded_event_attributes;
    m_marker_recorded_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_marker_recorded_event_attributes_Set() const{
    return m_marker_recorded_event_attributes_isSet;
}

bool OAIHistoryEvent::is_marker_recorded_event_attributes_Valid() const{
    return m_marker_recorded_event_attributes_isValid;
}

OAIHistoryEvent_recordMarkerFailedEventAttributes OAIHistoryEvent::getRecordMarkerFailedEventAttributes() const {
    return m_record_marker_failed_event_attributes;
}
void OAIHistoryEvent::setRecordMarkerFailedEventAttributes(const OAIHistoryEvent_recordMarkerFailedEventAttributes &record_marker_failed_event_attributes) {
    m_record_marker_failed_event_attributes = record_marker_failed_event_attributes;
    m_record_marker_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_record_marker_failed_event_attributes_Set() const{
    return m_record_marker_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_record_marker_failed_event_attributes_Valid() const{
    return m_record_marker_failed_event_attributes_isValid;
}

OAIHistoryEvent_timerStartedEventAttributes OAIHistoryEvent::getTimerStartedEventAttributes() const {
    return m_timer_started_event_attributes;
}
void OAIHistoryEvent::setTimerStartedEventAttributes(const OAIHistoryEvent_timerStartedEventAttributes &timer_started_event_attributes) {
    m_timer_started_event_attributes = timer_started_event_attributes;
    m_timer_started_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_timer_started_event_attributes_Set() const{
    return m_timer_started_event_attributes_isSet;
}

bool OAIHistoryEvent::is_timer_started_event_attributes_Valid() const{
    return m_timer_started_event_attributes_isValid;
}

OAIHistoryEvent_timerFiredEventAttributes OAIHistoryEvent::getTimerFiredEventAttributes() const {
    return m_timer_fired_event_attributes;
}
void OAIHistoryEvent::setTimerFiredEventAttributes(const OAIHistoryEvent_timerFiredEventAttributes &timer_fired_event_attributes) {
    m_timer_fired_event_attributes = timer_fired_event_attributes;
    m_timer_fired_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_timer_fired_event_attributes_Set() const{
    return m_timer_fired_event_attributes_isSet;
}

bool OAIHistoryEvent::is_timer_fired_event_attributes_Valid() const{
    return m_timer_fired_event_attributes_isValid;
}

OAIHistoryEvent_timerCanceledEventAttributes OAIHistoryEvent::getTimerCanceledEventAttributes() const {
    return m_timer_canceled_event_attributes;
}
void OAIHistoryEvent::setTimerCanceledEventAttributes(const OAIHistoryEvent_timerCanceledEventAttributes &timer_canceled_event_attributes) {
    m_timer_canceled_event_attributes = timer_canceled_event_attributes;
    m_timer_canceled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_timer_canceled_event_attributes_Set() const{
    return m_timer_canceled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_timer_canceled_event_attributes_Valid() const{
    return m_timer_canceled_event_attributes_isValid;
}

OAIHistoryEvent_startChildWorkflowExecutionInitiatedEventAttributes OAIHistoryEvent::getStartChildWorkflowExecutionInitiatedEventAttributes() const {
    return m_start_child_workflow_execution_initiated_event_attributes;
}
void OAIHistoryEvent::setStartChildWorkflowExecutionInitiatedEventAttributes(const OAIHistoryEvent_startChildWorkflowExecutionInitiatedEventAttributes &start_child_workflow_execution_initiated_event_attributes) {
    m_start_child_workflow_execution_initiated_event_attributes = start_child_workflow_execution_initiated_event_attributes;
    m_start_child_workflow_execution_initiated_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_start_child_workflow_execution_initiated_event_attributes_Set() const{
    return m_start_child_workflow_execution_initiated_event_attributes_isSet;
}

bool OAIHistoryEvent::is_start_child_workflow_execution_initiated_event_attributes_Valid() const{
    return m_start_child_workflow_execution_initiated_event_attributes_isValid;
}

OAIHistoryEvent_childWorkflowExecutionStartedEventAttributes OAIHistoryEvent::getChildWorkflowExecutionStartedEventAttributes() const {
    return m_child_workflow_execution_started_event_attributes;
}
void OAIHistoryEvent::setChildWorkflowExecutionStartedEventAttributes(const OAIHistoryEvent_childWorkflowExecutionStartedEventAttributes &child_workflow_execution_started_event_attributes) {
    m_child_workflow_execution_started_event_attributes = child_workflow_execution_started_event_attributes;
    m_child_workflow_execution_started_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_child_workflow_execution_started_event_attributes_Set() const{
    return m_child_workflow_execution_started_event_attributes_isSet;
}

bool OAIHistoryEvent::is_child_workflow_execution_started_event_attributes_Valid() const{
    return m_child_workflow_execution_started_event_attributes_isValid;
}

OAIHistoryEvent_childWorkflowExecutionCompletedEventAttributes OAIHistoryEvent::getChildWorkflowExecutionCompletedEventAttributes() const {
    return m_child_workflow_execution_completed_event_attributes;
}
void OAIHistoryEvent::setChildWorkflowExecutionCompletedEventAttributes(const OAIHistoryEvent_childWorkflowExecutionCompletedEventAttributes &child_workflow_execution_completed_event_attributes) {
    m_child_workflow_execution_completed_event_attributes = child_workflow_execution_completed_event_attributes;
    m_child_workflow_execution_completed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_child_workflow_execution_completed_event_attributes_Set() const{
    return m_child_workflow_execution_completed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_child_workflow_execution_completed_event_attributes_Valid() const{
    return m_child_workflow_execution_completed_event_attributes_isValid;
}

OAIHistoryEvent_childWorkflowExecutionFailedEventAttributes OAIHistoryEvent::getChildWorkflowExecutionFailedEventAttributes() const {
    return m_child_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setChildWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_childWorkflowExecutionFailedEventAttributes &child_workflow_execution_failed_event_attributes) {
    m_child_workflow_execution_failed_event_attributes = child_workflow_execution_failed_event_attributes;
    m_child_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_child_workflow_execution_failed_event_attributes_Set() const{
    return m_child_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_child_workflow_execution_failed_event_attributes_Valid() const{
    return m_child_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_childWorkflowExecutionTimedOutEventAttributes OAIHistoryEvent::getChildWorkflowExecutionTimedOutEventAttributes() const {
    return m_child_workflow_execution_timed_out_event_attributes;
}
void OAIHistoryEvent::setChildWorkflowExecutionTimedOutEventAttributes(const OAIHistoryEvent_childWorkflowExecutionTimedOutEventAttributes &child_workflow_execution_timed_out_event_attributes) {
    m_child_workflow_execution_timed_out_event_attributes = child_workflow_execution_timed_out_event_attributes;
    m_child_workflow_execution_timed_out_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_child_workflow_execution_timed_out_event_attributes_Set() const{
    return m_child_workflow_execution_timed_out_event_attributes_isSet;
}

bool OAIHistoryEvent::is_child_workflow_execution_timed_out_event_attributes_Valid() const{
    return m_child_workflow_execution_timed_out_event_attributes_isValid;
}

OAIHistoryEvent_childWorkflowExecutionCanceledEventAttributes OAIHistoryEvent::getChildWorkflowExecutionCanceledEventAttributes() const {
    return m_child_workflow_execution_canceled_event_attributes;
}
void OAIHistoryEvent::setChildWorkflowExecutionCanceledEventAttributes(const OAIHistoryEvent_childWorkflowExecutionCanceledEventAttributes &child_workflow_execution_canceled_event_attributes) {
    m_child_workflow_execution_canceled_event_attributes = child_workflow_execution_canceled_event_attributes;
    m_child_workflow_execution_canceled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_child_workflow_execution_canceled_event_attributes_Set() const{
    return m_child_workflow_execution_canceled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_child_workflow_execution_canceled_event_attributes_Valid() const{
    return m_child_workflow_execution_canceled_event_attributes_isValid;
}

OAIHistoryEvent_childWorkflowExecutionTerminatedEventAttributes OAIHistoryEvent::getChildWorkflowExecutionTerminatedEventAttributes() const {
    return m_child_workflow_execution_terminated_event_attributes;
}
void OAIHistoryEvent::setChildWorkflowExecutionTerminatedEventAttributes(const OAIHistoryEvent_childWorkflowExecutionTerminatedEventAttributes &child_workflow_execution_terminated_event_attributes) {
    m_child_workflow_execution_terminated_event_attributes = child_workflow_execution_terminated_event_attributes;
    m_child_workflow_execution_terminated_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_child_workflow_execution_terminated_event_attributes_Set() const{
    return m_child_workflow_execution_terminated_event_attributes_isSet;
}

bool OAIHistoryEvent::is_child_workflow_execution_terminated_event_attributes_Valid() const{
    return m_child_workflow_execution_terminated_event_attributes_isValid;
}

OAIHistoryEvent_signalExternalWorkflowExecutionInitiatedEventAttributes OAIHistoryEvent::getSignalExternalWorkflowExecutionInitiatedEventAttributes() const {
    return m_signal_external_workflow_execution_initiated_event_attributes;
}
void OAIHistoryEvent::setSignalExternalWorkflowExecutionInitiatedEventAttributes(const OAIHistoryEvent_signalExternalWorkflowExecutionInitiatedEventAttributes &signal_external_workflow_execution_initiated_event_attributes) {
    m_signal_external_workflow_execution_initiated_event_attributes = signal_external_workflow_execution_initiated_event_attributes;
    m_signal_external_workflow_execution_initiated_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_signal_external_workflow_execution_initiated_event_attributes_Set() const{
    return m_signal_external_workflow_execution_initiated_event_attributes_isSet;
}

bool OAIHistoryEvent::is_signal_external_workflow_execution_initiated_event_attributes_Valid() const{
    return m_signal_external_workflow_execution_initiated_event_attributes_isValid;
}

OAIHistoryEvent_externalWorkflowExecutionSignaledEventAttributes OAIHistoryEvent::getExternalWorkflowExecutionSignaledEventAttributes() const {
    return m_external_workflow_execution_signaled_event_attributes;
}
void OAIHistoryEvent::setExternalWorkflowExecutionSignaledEventAttributes(const OAIHistoryEvent_externalWorkflowExecutionSignaledEventAttributes &external_workflow_execution_signaled_event_attributes) {
    m_external_workflow_execution_signaled_event_attributes = external_workflow_execution_signaled_event_attributes;
    m_external_workflow_execution_signaled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_external_workflow_execution_signaled_event_attributes_Set() const{
    return m_external_workflow_execution_signaled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_external_workflow_execution_signaled_event_attributes_Valid() const{
    return m_external_workflow_execution_signaled_event_attributes_isValid;
}

OAIHistoryEvent_signalExternalWorkflowExecutionFailedEventAttributes OAIHistoryEvent::getSignalExternalWorkflowExecutionFailedEventAttributes() const {
    return m_signal_external_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setSignalExternalWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_signalExternalWorkflowExecutionFailedEventAttributes &signal_external_workflow_execution_failed_event_attributes) {
    m_signal_external_workflow_execution_failed_event_attributes = signal_external_workflow_execution_failed_event_attributes;
    m_signal_external_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_signal_external_workflow_execution_failed_event_attributes_Set() const{
    return m_signal_external_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_signal_external_workflow_execution_failed_event_attributes_Valid() const{
    return m_signal_external_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_externalWorkflowExecutionCancelRequestedEventAttributes OAIHistoryEvent::getExternalWorkflowExecutionCancelRequestedEventAttributes() const {
    return m_external_workflow_execution_cancel_requested_event_attributes;
}
void OAIHistoryEvent::setExternalWorkflowExecutionCancelRequestedEventAttributes(const OAIHistoryEvent_externalWorkflowExecutionCancelRequestedEventAttributes &external_workflow_execution_cancel_requested_event_attributes) {
    m_external_workflow_execution_cancel_requested_event_attributes = external_workflow_execution_cancel_requested_event_attributes;
    m_external_workflow_execution_cancel_requested_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_external_workflow_execution_cancel_requested_event_attributes_Set() const{
    return m_external_workflow_execution_cancel_requested_event_attributes_isSet;
}

bool OAIHistoryEvent::is_external_workflow_execution_cancel_requested_event_attributes_Valid() const{
    return m_external_workflow_execution_cancel_requested_event_attributes_isValid;
}

OAIHistoryEvent_requestCancelExternalWorkflowExecutionInitiatedEventAttributes OAIHistoryEvent::getRequestCancelExternalWorkflowExecutionInitiatedEventAttributes() const {
    return m_request_cancel_external_workflow_execution_initiated_event_attributes;
}
void OAIHistoryEvent::setRequestCancelExternalWorkflowExecutionInitiatedEventAttributes(const OAIHistoryEvent_requestCancelExternalWorkflowExecutionInitiatedEventAttributes &request_cancel_external_workflow_execution_initiated_event_attributes) {
    m_request_cancel_external_workflow_execution_initiated_event_attributes = request_cancel_external_workflow_execution_initiated_event_attributes;
    m_request_cancel_external_workflow_execution_initiated_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_request_cancel_external_workflow_execution_initiated_event_attributes_Set() const{
    return m_request_cancel_external_workflow_execution_initiated_event_attributes_isSet;
}

bool OAIHistoryEvent::is_request_cancel_external_workflow_execution_initiated_event_attributes_Valid() const{
    return m_request_cancel_external_workflow_execution_initiated_event_attributes_isValid;
}

OAIHistoryEvent_requestCancelExternalWorkflowExecutionFailedEventAttributes OAIHistoryEvent::getRequestCancelExternalWorkflowExecutionFailedEventAttributes() const {
    return m_request_cancel_external_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setRequestCancelExternalWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_requestCancelExternalWorkflowExecutionFailedEventAttributes &request_cancel_external_workflow_execution_failed_event_attributes) {
    m_request_cancel_external_workflow_execution_failed_event_attributes = request_cancel_external_workflow_execution_failed_event_attributes;
    m_request_cancel_external_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_request_cancel_external_workflow_execution_failed_event_attributes_Set() const{
    return m_request_cancel_external_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_request_cancel_external_workflow_execution_failed_event_attributes_Valid() const{
    return m_request_cancel_external_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes OAIHistoryEvent::getScheduleActivityTaskFailedEventAttributes() const {
    return m_schedule_activity_task_failed_event_attributes;
}
void OAIHistoryEvent::setScheduleActivityTaskFailedEventAttributes(const OAIHistoryEvent_scheduleActivityTaskFailedEventAttributes &schedule_activity_task_failed_event_attributes) {
    m_schedule_activity_task_failed_event_attributes = schedule_activity_task_failed_event_attributes;
    m_schedule_activity_task_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_schedule_activity_task_failed_event_attributes_Set() const{
    return m_schedule_activity_task_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_schedule_activity_task_failed_event_attributes_Valid() const{
    return m_schedule_activity_task_failed_event_attributes_isValid;
}

OAIHistoryEvent_requestCancelActivityTaskFailedEventAttributes OAIHistoryEvent::getRequestCancelActivityTaskFailedEventAttributes() const {
    return m_request_cancel_activity_task_failed_event_attributes;
}
void OAIHistoryEvent::setRequestCancelActivityTaskFailedEventAttributes(const OAIHistoryEvent_requestCancelActivityTaskFailedEventAttributes &request_cancel_activity_task_failed_event_attributes) {
    m_request_cancel_activity_task_failed_event_attributes = request_cancel_activity_task_failed_event_attributes;
    m_request_cancel_activity_task_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_request_cancel_activity_task_failed_event_attributes_Set() const{
    return m_request_cancel_activity_task_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_request_cancel_activity_task_failed_event_attributes_Valid() const{
    return m_request_cancel_activity_task_failed_event_attributes_isValid;
}

OAIHistoryEvent_startTimerFailedEventAttributes OAIHistoryEvent::getStartTimerFailedEventAttributes() const {
    return m_start_timer_failed_event_attributes;
}
void OAIHistoryEvent::setStartTimerFailedEventAttributes(const OAIHistoryEvent_startTimerFailedEventAttributes &start_timer_failed_event_attributes) {
    m_start_timer_failed_event_attributes = start_timer_failed_event_attributes;
    m_start_timer_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_start_timer_failed_event_attributes_Set() const{
    return m_start_timer_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_start_timer_failed_event_attributes_Valid() const{
    return m_start_timer_failed_event_attributes_isValid;
}

OAIHistoryEvent_cancelTimerFailedEventAttributes OAIHistoryEvent::getCancelTimerFailedEventAttributes() const {
    return m_cancel_timer_failed_event_attributes;
}
void OAIHistoryEvent::setCancelTimerFailedEventAttributes(const OAIHistoryEvent_cancelTimerFailedEventAttributes &cancel_timer_failed_event_attributes) {
    m_cancel_timer_failed_event_attributes = cancel_timer_failed_event_attributes;
    m_cancel_timer_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_cancel_timer_failed_event_attributes_Set() const{
    return m_cancel_timer_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_cancel_timer_failed_event_attributes_Valid() const{
    return m_cancel_timer_failed_event_attributes_isValid;
}

OAIHistoryEvent_startChildWorkflowExecutionFailedEventAttributes OAIHistoryEvent::getStartChildWorkflowExecutionFailedEventAttributes() const {
    return m_start_child_workflow_execution_failed_event_attributes;
}
void OAIHistoryEvent::setStartChildWorkflowExecutionFailedEventAttributes(const OAIHistoryEvent_startChildWorkflowExecutionFailedEventAttributes &start_child_workflow_execution_failed_event_attributes) {
    m_start_child_workflow_execution_failed_event_attributes = start_child_workflow_execution_failed_event_attributes;
    m_start_child_workflow_execution_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_start_child_workflow_execution_failed_event_attributes_Set() const{
    return m_start_child_workflow_execution_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_start_child_workflow_execution_failed_event_attributes_Valid() const{
    return m_start_child_workflow_execution_failed_event_attributes_isValid;
}

OAIHistoryEvent_lambdaFunctionScheduledEventAttributes OAIHistoryEvent::getLambdaFunctionScheduledEventAttributes() const {
    return m_lambda_function_scheduled_event_attributes;
}
void OAIHistoryEvent::setLambdaFunctionScheduledEventAttributes(const OAIHistoryEvent_lambdaFunctionScheduledEventAttributes &lambda_function_scheduled_event_attributes) {
    m_lambda_function_scheduled_event_attributes = lambda_function_scheduled_event_attributes;
    m_lambda_function_scheduled_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_scheduled_event_attributes_Set() const{
    return m_lambda_function_scheduled_event_attributes_isSet;
}

bool OAIHistoryEvent::is_lambda_function_scheduled_event_attributes_Valid() const{
    return m_lambda_function_scheduled_event_attributes_isValid;
}

OAIHistoryEvent_lambdaFunctionStartedEventAttributes OAIHistoryEvent::getLambdaFunctionStartedEventAttributes() const {
    return m_lambda_function_started_event_attributes;
}
void OAIHistoryEvent::setLambdaFunctionStartedEventAttributes(const OAIHistoryEvent_lambdaFunctionStartedEventAttributes &lambda_function_started_event_attributes) {
    m_lambda_function_started_event_attributes = lambda_function_started_event_attributes;
    m_lambda_function_started_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_started_event_attributes_Set() const{
    return m_lambda_function_started_event_attributes_isSet;
}

bool OAIHistoryEvent::is_lambda_function_started_event_attributes_Valid() const{
    return m_lambda_function_started_event_attributes_isValid;
}

OAIHistoryEvent_lambdaFunctionCompletedEventAttributes OAIHistoryEvent::getLambdaFunctionCompletedEventAttributes() const {
    return m_lambda_function_completed_event_attributes;
}
void OAIHistoryEvent::setLambdaFunctionCompletedEventAttributes(const OAIHistoryEvent_lambdaFunctionCompletedEventAttributes &lambda_function_completed_event_attributes) {
    m_lambda_function_completed_event_attributes = lambda_function_completed_event_attributes;
    m_lambda_function_completed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_completed_event_attributes_Set() const{
    return m_lambda_function_completed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_lambda_function_completed_event_attributes_Valid() const{
    return m_lambda_function_completed_event_attributes_isValid;
}

OAIHistoryEvent_lambdaFunctionFailedEventAttributes OAIHistoryEvent::getLambdaFunctionFailedEventAttributes() const {
    return m_lambda_function_failed_event_attributes;
}
void OAIHistoryEvent::setLambdaFunctionFailedEventAttributes(const OAIHistoryEvent_lambdaFunctionFailedEventAttributes &lambda_function_failed_event_attributes) {
    m_lambda_function_failed_event_attributes = lambda_function_failed_event_attributes;
    m_lambda_function_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_failed_event_attributes_Set() const{
    return m_lambda_function_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_lambda_function_failed_event_attributes_Valid() const{
    return m_lambda_function_failed_event_attributes_isValid;
}

OAIHistoryEvent_lambdaFunctionTimedOutEventAttributes OAIHistoryEvent::getLambdaFunctionTimedOutEventAttributes() const {
    return m_lambda_function_timed_out_event_attributes;
}
void OAIHistoryEvent::setLambdaFunctionTimedOutEventAttributes(const OAIHistoryEvent_lambdaFunctionTimedOutEventAttributes &lambda_function_timed_out_event_attributes) {
    m_lambda_function_timed_out_event_attributes = lambda_function_timed_out_event_attributes;
    m_lambda_function_timed_out_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_lambda_function_timed_out_event_attributes_Set() const{
    return m_lambda_function_timed_out_event_attributes_isSet;
}

bool OAIHistoryEvent::is_lambda_function_timed_out_event_attributes_Valid() const{
    return m_lambda_function_timed_out_event_attributes_isValid;
}

OAIHistoryEvent_scheduleLambdaFunctionFailedEventAttributes OAIHistoryEvent::getScheduleLambdaFunctionFailedEventAttributes() const {
    return m_schedule_lambda_function_failed_event_attributes;
}
void OAIHistoryEvent::setScheduleLambdaFunctionFailedEventAttributes(const OAIHistoryEvent_scheduleLambdaFunctionFailedEventAttributes &schedule_lambda_function_failed_event_attributes) {
    m_schedule_lambda_function_failed_event_attributes = schedule_lambda_function_failed_event_attributes;
    m_schedule_lambda_function_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_schedule_lambda_function_failed_event_attributes_Set() const{
    return m_schedule_lambda_function_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_schedule_lambda_function_failed_event_attributes_Valid() const{
    return m_schedule_lambda_function_failed_event_attributes_isValid;
}

OAIHistoryEvent_startLambdaFunctionFailedEventAttributes OAIHistoryEvent::getStartLambdaFunctionFailedEventAttributes() const {
    return m_start_lambda_function_failed_event_attributes;
}
void OAIHistoryEvent::setStartLambdaFunctionFailedEventAttributes(const OAIHistoryEvent_startLambdaFunctionFailedEventAttributes &start_lambda_function_failed_event_attributes) {
    m_start_lambda_function_failed_event_attributes = start_lambda_function_failed_event_attributes;
    m_start_lambda_function_failed_event_attributes_isSet = true;
}

bool OAIHistoryEvent::is_start_lambda_function_failed_event_attributes_Set() const{
    return m_start_lambda_function_failed_event_attributes_isSet;
}

bool OAIHistoryEvent::is_start_lambda_function_failed_event_attributes_Valid() const{
    return m_start_lambda_function_failed_event_attributes_isValid;
}

bool OAIHistoryEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_started_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_completed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fail_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_timed_out_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_canceled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_continued_as_new_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_continue_as_new_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_terminated_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_cancel_requested_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_task_scheduled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_task_started_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_task_completed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_task_timed_out_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_task_scheduled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_task_started_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_task_completed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_task_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_task_timed_out_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_task_canceled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_task_cancel_requested_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_execution_signaled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_recorded_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_marker_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_started_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_fired_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_canceled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_child_workflow_execution_initiated_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_workflow_execution_started_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_workflow_execution_completed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_workflow_execution_timed_out_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_workflow_execution_canceled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_workflow_execution_terminated_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_external_workflow_execution_initiated_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_workflow_execution_signaled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_external_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_workflow_execution_cancel_requested_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_cancel_external_workflow_execution_initiated_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_cancel_external_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_activity_task_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_cancel_activity_task_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timer_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_timer_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_child_workflow_execution_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_scheduled_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_started_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_completed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_function_timed_out_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_lambda_function_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_lambda_function_failed_event_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_timestamp_isValid && m_event_type_isValid && m_event_id_isValid && true;
}

} // namespace OpenAPI
