/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWorkflowExecutionHistoryInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWorkflowExecutionHistoryInput::OAIGetWorkflowExecutionHistoryInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWorkflowExecutionHistoryInput::OAIGetWorkflowExecutionHistoryInput() {
    this->initializeModel();
}

OAIGetWorkflowExecutionHistoryInput::~OAIGetWorkflowExecutionHistoryInput() {}

void OAIGetWorkflowExecutionHistoryInput::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_execution_isSet = false;
    m_execution_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_maximum_page_size_isSet = false;
    m_maximum_page_size_isValid = false;

    m_reverse_order_isSet = false;
    m_reverse_order_isValid = false;
}

void OAIGetWorkflowExecutionHistoryInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWorkflowExecutionHistoryInput::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_execution_isValid = ::OpenAPI::fromJsonValue(m_execution, json[QString("execution")]);
    m_execution_isSet = !json[QString("execution")].isNull() && m_execution_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_maximum_page_size_isValid = ::OpenAPI::fromJsonValue(m_maximum_page_size, json[QString("maximumPageSize")]);
    m_maximum_page_size_isSet = !json[QString("maximumPageSize")].isNull() && m_maximum_page_size_isValid;

    m_reverse_order_isValid = ::OpenAPI::fromJsonValue(m_reverse_order, json[QString("reverseOrder")]);
    m_reverse_order_isSet = !json[QString("reverseOrder")].isNull() && m_reverse_order_isValid;
}

QString OAIGetWorkflowExecutionHistoryInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWorkflowExecutionHistoryInput::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_execution.isSet()) {
        obj.insert(QString("execution"), ::OpenAPI::toJsonValue(m_execution));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_maximum_page_size_isSet) {
        obj.insert(QString("maximumPageSize"), ::OpenAPI::toJsonValue(m_maximum_page_size));
    }
    if (m_reverse_order_isSet) {
        obj.insert(QString("reverseOrder"), ::OpenAPI::toJsonValue(m_reverse_order));
    }
    return obj;
}

QString OAIGetWorkflowExecutionHistoryInput::getDomain() const {
    return m_domain;
}
void OAIGetWorkflowExecutionHistoryInput::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIGetWorkflowExecutionHistoryInput::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIGetWorkflowExecutionHistoryInput::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIGetWorkflowExecutionHistoryInput_execution OAIGetWorkflowExecutionHistoryInput::getExecution() const {
    return m_execution;
}
void OAIGetWorkflowExecutionHistoryInput::setExecution(const OAIGetWorkflowExecutionHistoryInput_execution &execution) {
    m_execution = execution;
    m_execution_isSet = true;
}

bool OAIGetWorkflowExecutionHistoryInput::is_execution_Set() const{
    return m_execution_isSet;
}

bool OAIGetWorkflowExecutionHistoryInput::is_execution_Valid() const{
    return m_execution_isValid;
}

QString OAIGetWorkflowExecutionHistoryInput::getNextPageToken() const {
    return m_next_page_token;
}
void OAIGetWorkflowExecutionHistoryInput::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIGetWorkflowExecutionHistoryInput::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIGetWorkflowExecutionHistoryInput::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIGetWorkflowExecutionHistoryInput::getMaximumPageSize() const {
    return m_maximum_page_size;
}
void OAIGetWorkflowExecutionHistoryInput::setMaximumPageSize(const qint32 &maximum_page_size) {
    m_maximum_page_size = maximum_page_size;
    m_maximum_page_size_isSet = true;
}

bool OAIGetWorkflowExecutionHistoryInput::is_maximum_page_size_Set() const{
    return m_maximum_page_size_isSet;
}

bool OAIGetWorkflowExecutionHistoryInput::is_maximum_page_size_Valid() const{
    return m_maximum_page_size_isValid;
}

bool OAIGetWorkflowExecutionHistoryInput::getReverseOrder() const {
    return m_reverse_order;
}
void OAIGetWorkflowExecutionHistoryInput::setReverseOrder(const bool &reverse_order) {
    m_reverse_order = reverse_order;
    m_reverse_order_isSet = true;
}

bool OAIGetWorkflowExecutionHistoryInput::is_reverse_order_Set() const{
    return m_reverse_order_isSet;
}

bool OAIGetWorkflowExecutionHistoryInput::is_reverse_order_Valid() const{
    return m_reverse_order_isValid;
}

bool OAIGetWorkflowExecutionHistoryInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWorkflowExecutionHistoryInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_execution_isValid && true;
}

} // namespace OpenAPI
