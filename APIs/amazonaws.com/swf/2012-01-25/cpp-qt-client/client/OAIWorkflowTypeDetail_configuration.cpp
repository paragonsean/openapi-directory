/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTypeDetail_configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTypeDetail_configuration::OAIWorkflowTypeDetail_configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTypeDetail_configuration::OAIWorkflowTypeDetail_configuration() {
    this->initializeModel();
}

OAIWorkflowTypeDetail_configuration::~OAIWorkflowTypeDetail_configuration() {}

void OAIWorkflowTypeDetail_configuration::initializeModel() {

    m_default_task_start_to_close_timeout_isSet = false;
    m_default_task_start_to_close_timeout_isValid = false;

    m_default_execution_start_to_close_timeout_isSet = false;
    m_default_execution_start_to_close_timeout_isValid = false;

    m_default_task_list_isSet = false;
    m_default_task_list_isValid = false;

    m_default_task_priority_isSet = false;
    m_default_task_priority_isValid = false;

    m_default_child_policy_isSet = false;
    m_default_child_policy_isValid = false;

    m_default_lambda_role_isSet = false;
    m_default_lambda_role_isValid = false;
}

void OAIWorkflowTypeDetail_configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTypeDetail_configuration::fromJsonObject(QJsonObject json) {

    m_default_task_start_to_close_timeout_isValid = ::OpenAPI::fromJsonValue(m_default_task_start_to_close_timeout, json[QString("defaultTaskStartToCloseTimeout")]);
    m_default_task_start_to_close_timeout_isSet = !json[QString("defaultTaskStartToCloseTimeout")].isNull() && m_default_task_start_to_close_timeout_isValid;

    m_default_execution_start_to_close_timeout_isValid = ::OpenAPI::fromJsonValue(m_default_execution_start_to_close_timeout, json[QString("defaultExecutionStartToCloseTimeout")]);
    m_default_execution_start_to_close_timeout_isSet = !json[QString("defaultExecutionStartToCloseTimeout")].isNull() && m_default_execution_start_to_close_timeout_isValid;

    m_default_task_list_isValid = ::OpenAPI::fromJsonValue(m_default_task_list, json[QString("defaultTaskList")]);
    m_default_task_list_isSet = !json[QString("defaultTaskList")].isNull() && m_default_task_list_isValid;

    m_default_task_priority_isValid = ::OpenAPI::fromJsonValue(m_default_task_priority, json[QString("defaultTaskPriority")]);
    m_default_task_priority_isSet = !json[QString("defaultTaskPriority")].isNull() && m_default_task_priority_isValid;

    m_default_child_policy_isValid = ::OpenAPI::fromJsonValue(m_default_child_policy, json[QString("defaultChildPolicy")]);
    m_default_child_policy_isSet = !json[QString("defaultChildPolicy")].isNull() && m_default_child_policy_isValid;

    m_default_lambda_role_isValid = ::OpenAPI::fromJsonValue(m_default_lambda_role, json[QString("defaultLambdaRole")]);
    m_default_lambda_role_isSet = !json[QString("defaultLambdaRole")].isNull() && m_default_lambda_role_isValid;
}

QString OAIWorkflowTypeDetail_configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTypeDetail_configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_default_task_start_to_close_timeout_isSet) {
        obj.insert(QString("defaultTaskStartToCloseTimeout"), ::OpenAPI::toJsonValue(m_default_task_start_to_close_timeout));
    }
    if (m_default_execution_start_to_close_timeout_isSet) {
        obj.insert(QString("defaultExecutionStartToCloseTimeout"), ::OpenAPI::toJsonValue(m_default_execution_start_to_close_timeout));
    }
    if (m_default_task_list.isSet()) {
        obj.insert(QString("defaultTaskList"), ::OpenAPI::toJsonValue(m_default_task_list));
    }
    if (m_default_task_priority_isSet) {
        obj.insert(QString("defaultTaskPriority"), ::OpenAPI::toJsonValue(m_default_task_priority));
    }
    if (m_default_child_policy.isSet()) {
        obj.insert(QString("defaultChildPolicy"), ::OpenAPI::toJsonValue(m_default_child_policy));
    }
    if (m_default_lambda_role_isSet) {
        obj.insert(QString("defaultLambdaRole"), ::OpenAPI::toJsonValue(m_default_lambda_role));
    }
    return obj;
}

QString OAIWorkflowTypeDetail_configuration::getDefaultTaskStartToCloseTimeout() const {
    return m_default_task_start_to_close_timeout;
}
void OAIWorkflowTypeDetail_configuration::setDefaultTaskStartToCloseTimeout(const QString &default_task_start_to_close_timeout) {
    m_default_task_start_to_close_timeout = default_task_start_to_close_timeout;
    m_default_task_start_to_close_timeout_isSet = true;
}

bool OAIWorkflowTypeDetail_configuration::is_default_task_start_to_close_timeout_Set() const{
    return m_default_task_start_to_close_timeout_isSet;
}

bool OAIWorkflowTypeDetail_configuration::is_default_task_start_to_close_timeout_Valid() const{
    return m_default_task_start_to_close_timeout_isValid;
}

QString OAIWorkflowTypeDetail_configuration::getDefaultExecutionStartToCloseTimeout() const {
    return m_default_execution_start_to_close_timeout;
}
void OAIWorkflowTypeDetail_configuration::setDefaultExecutionStartToCloseTimeout(const QString &default_execution_start_to_close_timeout) {
    m_default_execution_start_to_close_timeout = default_execution_start_to_close_timeout;
    m_default_execution_start_to_close_timeout_isSet = true;
}

bool OAIWorkflowTypeDetail_configuration::is_default_execution_start_to_close_timeout_Set() const{
    return m_default_execution_start_to_close_timeout_isSet;
}

bool OAIWorkflowTypeDetail_configuration::is_default_execution_start_to_close_timeout_Valid() const{
    return m_default_execution_start_to_close_timeout_isValid;
}

OAIWorkflowTypeConfiguration_defaultTaskList OAIWorkflowTypeDetail_configuration::getDefaultTaskList() const {
    return m_default_task_list;
}
void OAIWorkflowTypeDetail_configuration::setDefaultTaskList(const OAIWorkflowTypeConfiguration_defaultTaskList &default_task_list) {
    m_default_task_list = default_task_list;
    m_default_task_list_isSet = true;
}

bool OAIWorkflowTypeDetail_configuration::is_default_task_list_Set() const{
    return m_default_task_list_isSet;
}

bool OAIWorkflowTypeDetail_configuration::is_default_task_list_Valid() const{
    return m_default_task_list_isValid;
}

QString OAIWorkflowTypeDetail_configuration::getDefaultTaskPriority() const {
    return m_default_task_priority;
}
void OAIWorkflowTypeDetail_configuration::setDefaultTaskPriority(const QString &default_task_priority) {
    m_default_task_priority = default_task_priority;
    m_default_task_priority_isSet = true;
}

bool OAIWorkflowTypeDetail_configuration::is_default_task_priority_Set() const{
    return m_default_task_priority_isSet;
}

bool OAIWorkflowTypeDetail_configuration::is_default_task_priority_Valid() const{
    return m_default_task_priority_isValid;
}

OAIChildPolicy OAIWorkflowTypeDetail_configuration::getDefaultChildPolicy() const {
    return m_default_child_policy;
}
void OAIWorkflowTypeDetail_configuration::setDefaultChildPolicy(const OAIChildPolicy &default_child_policy) {
    m_default_child_policy = default_child_policy;
    m_default_child_policy_isSet = true;
}

bool OAIWorkflowTypeDetail_configuration::is_default_child_policy_Set() const{
    return m_default_child_policy_isSet;
}

bool OAIWorkflowTypeDetail_configuration::is_default_child_policy_Valid() const{
    return m_default_child_policy_isValid;
}

QString OAIWorkflowTypeDetail_configuration::getDefaultLambdaRole() const {
    return m_default_lambda_role;
}
void OAIWorkflowTypeDetail_configuration::setDefaultLambdaRole(const QString &default_lambda_role) {
    m_default_lambda_role = default_lambda_role;
    m_default_lambda_role_isSet = true;
}

bool OAIWorkflowTypeDetail_configuration::is_default_lambda_role_Set() const{
    return m_default_lambda_role_isSet;
}

bool OAIWorkflowTypeDetail_configuration::is_default_lambda_role_Valid() const{
    return m_default_lambda_role_isValid;
}

bool OAIWorkflowTypeDetail_configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_task_start_to_close_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_execution_start_to_close_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_task_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_task_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_child_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_lambda_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTypeDetail_configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
