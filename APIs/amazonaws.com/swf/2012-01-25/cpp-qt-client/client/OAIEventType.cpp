/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventType::OAIEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventType::OAIEventType() {
    this->initializeModel();
}

OAIEventType::~OAIEventType() {}

void OAIEventType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("WorkflowExecutionStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WorkflowExecutionCancelRequested", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONCANCELREQUESTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WorkflowExecutionCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CompleteWorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::COMPLETEWORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FailWorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::FAILWORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WorkflowExecutionTimedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONTIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WorkflowExecutionCanceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONCANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CancelWorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CANCELWORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WorkflowExecutionContinuedAsNew", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONCONTINUEDASNEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ContinueAsNewWorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CONTINUEASNEWWORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WorkflowExecutionTerminated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONTERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DecisionTaskScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::DECISIONTASKSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DecisionTaskStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::DECISIONTASKSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DecisionTaskCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::DECISIONTASKCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DecisionTaskTimedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::DECISIONTASKTIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityTaskScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ACTIVITYTASKSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ScheduleActivityTaskFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::SCHEDULEACTIVITYTASKFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityTaskStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ACTIVITYTASKSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityTaskCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ACTIVITYTASKCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityTaskFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ACTIVITYTASKFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityTaskTimedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ACTIVITYTASKTIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityTaskCanceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ACTIVITYTASKCANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivityTaskCancelRequested", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::ACTIVITYTASKCANCELREQUESTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RequestCancelActivityTaskFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::REQUESTCANCELACTIVITYTASKFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WorkflowExecutionSignaled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::WORKFLOWEXECUTIONSIGNALED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MarkerRecorded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::MARKERRECORDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RecordMarkerFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::RECORDMARKERFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TimerStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::TIMERSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StartTimerFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::STARTTIMERFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TimerFired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::TIMERFIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TimerCanceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::TIMERCANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CancelTimerFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CANCELTIMERFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StartChildWorkflowExecutionInitiated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::STARTCHILDWORKFLOWEXECUTIONINITIATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StartChildWorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::STARTCHILDWORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChildWorkflowExecutionStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CHILDWORKFLOWEXECUTIONSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChildWorkflowExecutionCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CHILDWORKFLOWEXECUTIONCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChildWorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CHILDWORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChildWorkflowExecutionTimedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CHILDWORKFLOWEXECUTIONTIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChildWorkflowExecutionCanceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CHILDWORKFLOWEXECUTIONCANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ChildWorkflowExecutionTerminated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CHILDWORKFLOWEXECUTIONTERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SignalExternalWorkflowExecutionInitiated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::SIGNALEXTERNALWORKFLOWEXECUTIONINITIATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SignalExternalWorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::SIGNALEXTERNALWORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExternalWorkflowExecutionSignaled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::EXTERNALWORKFLOWEXECUTIONSIGNALED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RequestCancelExternalWorkflowExecutionInitiated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::REQUESTCANCELEXTERNALWORKFLOWEXECUTIONINITIATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RequestCancelExternalWorkflowExecutionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::REQUESTCANCELEXTERNALWORKFLOWEXECUTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExternalWorkflowExecutionCancelRequested", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::EXTERNALWORKFLOWEXECUTIONCANCELREQUESTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LambdaFunctionScheduled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::LAMBDAFUNCTIONSCHEDULED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LambdaFunctionStarted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::LAMBDAFUNCTIONSTARTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LambdaFunctionCompleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::LAMBDAFUNCTIONCOMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LambdaFunctionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::LAMBDAFUNCTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LambdaFunctionTimedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::LAMBDAFUNCTIONTIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ScheduleLambdaFunctionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::SCHEDULELAMBDAFUNCTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StartLambdaFunctionFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::STARTLAMBDAFUNCTIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventType::WORKFLOWEXECUTIONSTARTED:
            val = "WorkflowExecutionStarted";
            break;
        case eOAIEventType::WORKFLOWEXECUTIONCANCELREQUESTED:
            val = "WorkflowExecutionCancelRequested";
            break;
        case eOAIEventType::WORKFLOWEXECUTIONCOMPLETED:
            val = "WorkflowExecutionCompleted";
            break;
        case eOAIEventType::COMPLETEWORKFLOWEXECUTIONFAILED:
            val = "CompleteWorkflowExecutionFailed";
            break;
        case eOAIEventType::WORKFLOWEXECUTIONFAILED:
            val = "WorkflowExecutionFailed";
            break;
        case eOAIEventType::FAILWORKFLOWEXECUTIONFAILED:
            val = "FailWorkflowExecutionFailed";
            break;
        case eOAIEventType::WORKFLOWEXECUTIONTIMEDOUT:
            val = "WorkflowExecutionTimedOut";
            break;
        case eOAIEventType::WORKFLOWEXECUTIONCANCELED:
            val = "WorkflowExecutionCanceled";
            break;
        case eOAIEventType::CANCELWORKFLOWEXECUTIONFAILED:
            val = "CancelWorkflowExecutionFailed";
            break;
        case eOAIEventType::WORKFLOWEXECUTIONCONTINUEDASNEW:
            val = "WorkflowExecutionContinuedAsNew";
            break;
        case eOAIEventType::CONTINUEASNEWWORKFLOWEXECUTIONFAILED:
            val = "ContinueAsNewWorkflowExecutionFailed";
            break;
        case eOAIEventType::WORKFLOWEXECUTIONTERMINATED:
            val = "WorkflowExecutionTerminated";
            break;
        case eOAIEventType::DECISIONTASKSCHEDULED:
            val = "DecisionTaskScheduled";
            break;
        case eOAIEventType::DECISIONTASKSTARTED:
            val = "DecisionTaskStarted";
            break;
        case eOAIEventType::DECISIONTASKCOMPLETED:
            val = "DecisionTaskCompleted";
            break;
        case eOAIEventType::DECISIONTASKTIMEDOUT:
            val = "DecisionTaskTimedOut";
            break;
        case eOAIEventType::ACTIVITYTASKSCHEDULED:
            val = "ActivityTaskScheduled";
            break;
        case eOAIEventType::SCHEDULEACTIVITYTASKFAILED:
            val = "ScheduleActivityTaskFailed";
            break;
        case eOAIEventType::ACTIVITYTASKSTARTED:
            val = "ActivityTaskStarted";
            break;
        case eOAIEventType::ACTIVITYTASKCOMPLETED:
            val = "ActivityTaskCompleted";
            break;
        case eOAIEventType::ACTIVITYTASKFAILED:
            val = "ActivityTaskFailed";
            break;
        case eOAIEventType::ACTIVITYTASKTIMEDOUT:
            val = "ActivityTaskTimedOut";
            break;
        case eOAIEventType::ACTIVITYTASKCANCELED:
            val = "ActivityTaskCanceled";
            break;
        case eOAIEventType::ACTIVITYTASKCANCELREQUESTED:
            val = "ActivityTaskCancelRequested";
            break;
        case eOAIEventType::REQUESTCANCELACTIVITYTASKFAILED:
            val = "RequestCancelActivityTaskFailed";
            break;
        case eOAIEventType::WORKFLOWEXECUTIONSIGNALED:
            val = "WorkflowExecutionSignaled";
            break;
        case eOAIEventType::MARKERRECORDED:
            val = "MarkerRecorded";
            break;
        case eOAIEventType::RECORDMARKERFAILED:
            val = "RecordMarkerFailed";
            break;
        case eOAIEventType::TIMERSTARTED:
            val = "TimerStarted";
            break;
        case eOAIEventType::STARTTIMERFAILED:
            val = "StartTimerFailed";
            break;
        case eOAIEventType::TIMERFIRED:
            val = "TimerFired";
            break;
        case eOAIEventType::TIMERCANCELED:
            val = "TimerCanceled";
            break;
        case eOAIEventType::CANCELTIMERFAILED:
            val = "CancelTimerFailed";
            break;
        case eOAIEventType::STARTCHILDWORKFLOWEXECUTIONINITIATED:
            val = "StartChildWorkflowExecutionInitiated";
            break;
        case eOAIEventType::STARTCHILDWORKFLOWEXECUTIONFAILED:
            val = "StartChildWorkflowExecutionFailed";
            break;
        case eOAIEventType::CHILDWORKFLOWEXECUTIONSTARTED:
            val = "ChildWorkflowExecutionStarted";
            break;
        case eOAIEventType::CHILDWORKFLOWEXECUTIONCOMPLETED:
            val = "ChildWorkflowExecutionCompleted";
            break;
        case eOAIEventType::CHILDWORKFLOWEXECUTIONFAILED:
            val = "ChildWorkflowExecutionFailed";
            break;
        case eOAIEventType::CHILDWORKFLOWEXECUTIONTIMEDOUT:
            val = "ChildWorkflowExecutionTimedOut";
            break;
        case eOAIEventType::CHILDWORKFLOWEXECUTIONCANCELED:
            val = "ChildWorkflowExecutionCanceled";
            break;
        case eOAIEventType::CHILDWORKFLOWEXECUTIONTERMINATED:
            val = "ChildWorkflowExecutionTerminated";
            break;
        case eOAIEventType::SIGNALEXTERNALWORKFLOWEXECUTIONINITIATED:
            val = "SignalExternalWorkflowExecutionInitiated";
            break;
        case eOAIEventType::SIGNALEXTERNALWORKFLOWEXECUTIONFAILED:
            val = "SignalExternalWorkflowExecutionFailed";
            break;
        case eOAIEventType::EXTERNALWORKFLOWEXECUTIONSIGNALED:
            val = "ExternalWorkflowExecutionSignaled";
            break;
        case eOAIEventType::REQUESTCANCELEXTERNALWORKFLOWEXECUTIONINITIATED:
            val = "RequestCancelExternalWorkflowExecutionInitiated";
            break;
        case eOAIEventType::REQUESTCANCELEXTERNALWORKFLOWEXECUTIONFAILED:
            val = "RequestCancelExternalWorkflowExecutionFailed";
            break;
        case eOAIEventType::EXTERNALWORKFLOWEXECUTIONCANCELREQUESTED:
            val = "ExternalWorkflowExecutionCancelRequested";
            break;
        case eOAIEventType::LAMBDAFUNCTIONSCHEDULED:
            val = "LambdaFunctionScheduled";
            break;
        case eOAIEventType::LAMBDAFUNCTIONSTARTED:
            val = "LambdaFunctionStarted";
            break;
        case eOAIEventType::LAMBDAFUNCTIONCOMPLETED:
            val = "LambdaFunctionCompleted";
            break;
        case eOAIEventType::LAMBDAFUNCTIONFAILED:
            val = "LambdaFunctionFailed";
            break;
        case eOAIEventType::LAMBDAFUNCTIONTIMEDOUT:
            val = "LambdaFunctionTimedOut";
            break;
        case eOAIEventType::SCHEDULELAMBDAFUNCTIONFAILED:
            val = "ScheduleLambdaFunctionFailed";
            break;
        case eOAIEventType::STARTLAMBDAFUNCTIONFAILED:
            val = "StartLambdaFunctionFailed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventType::eOAIEventType OAIEventType::getValue() const {
    return m_value;
}

void OAIEventType::setValue(const OAIEventType::eOAIEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
