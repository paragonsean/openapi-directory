/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowExecutionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowExecutionDetail::OAIWorkflowExecutionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowExecutionDetail::OAIWorkflowExecutionDetail() {
    this->initializeModel();
}

OAIWorkflowExecutionDetail::~OAIWorkflowExecutionDetail() {}

void OAIWorkflowExecutionDetail::initializeModel() {

    m_execution_info_isSet = false;
    m_execution_info_isValid = false;

    m_execution_configuration_isSet = false;
    m_execution_configuration_isValid = false;

    m_open_counts_isSet = false;
    m_open_counts_isValid = false;

    m_latest_activity_task_timestamp_isSet = false;
    m_latest_activity_task_timestamp_isValid = false;

    m_latest_execution_context_isSet = false;
    m_latest_execution_context_isValid = false;
}

void OAIWorkflowExecutionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowExecutionDetail::fromJsonObject(QJsonObject json) {

    m_execution_info_isValid = ::OpenAPI::fromJsonValue(m_execution_info, json[QString("executionInfo")]);
    m_execution_info_isSet = !json[QString("executionInfo")].isNull() && m_execution_info_isValid;

    m_execution_configuration_isValid = ::OpenAPI::fromJsonValue(m_execution_configuration, json[QString("executionConfiguration")]);
    m_execution_configuration_isSet = !json[QString("executionConfiguration")].isNull() && m_execution_configuration_isValid;

    m_open_counts_isValid = ::OpenAPI::fromJsonValue(m_open_counts, json[QString("openCounts")]);
    m_open_counts_isSet = !json[QString("openCounts")].isNull() && m_open_counts_isValid;

    m_latest_activity_task_timestamp_isValid = ::OpenAPI::fromJsonValue(m_latest_activity_task_timestamp, json[QString("latestActivityTaskTimestamp")]);
    m_latest_activity_task_timestamp_isSet = !json[QString("latestActivityTaskTimestamp")].isNull() && m_latest_activity_task_timestamp_isValid;

    m_latest_execution_context_isValid = ::OpenAPI::fromJsonValue(m_latest_execution_context, json[QString("latestExecutionContext")]);
    m_latest_execution_context_isSet = !json[QString("latestExecutionContext")].isNull() && m_latest_execution_context_isValid;
}

QString OAIWorkflowExecutionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowExecutionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_info.isSet()) {
        obj.insert(QString("executionInfo"), ::OpenAPI::toJsonValue(m_execution_info));
    }
    if (m_execution_configuration.isSet()) {
        obj.insert(QString("executionConfiguration"), ::OpenAPI::toJsonValue(m_execution_configuration));
    }
    if (m_open_counts.isSet()) {
        obj.insert(QString("openCounts"), ::OpenAPI::toJsonValue(m_open_counts));
    }
    if (m_latest_activity_task_timestamp_isSet) {
        obj.insert(QString("latestActivityTaskTimestamp"), ::OpenAPI::toJsonValue(m_latest_activity_task_timestamp));
    }
    if (m_latest_execution_context_isSet) {
        obj.insert(QString("latestExecutionContext"), ::OpenAPI::toJsonValue(m_latest_execution_context));
    }
    return obj;
}

OAIWorkflowExecutionDetail_executionInfo OAIWorkflowExecutionDetail::getExecutionInfo() const {
    return m_execution_info;
}
void OAIWorkflowExecutionDetail::setExecutionInfo(const OAIWorkflowExecutionDetail_executionInfo &execution_info) {
    m_execution_info = execution_info;
    m_execution_info_isSet = true;
}

bool OAIWorkflowExecutionDetail::is_execution_info_Set() const{
    return m_execution_info_isSet;
}

bool OAIWorkflowExecutionDetail::is_execution_info_Valid() const{
    return m_execution_info_isValid;
}

OAIWorkflowExecutionDetail_executionConfiguration OAIWorkflowExecutionDetail::getExecutionConfiguration() const {
    return m_execution_configuration;
}
void OAIWorkflowExecutionDetail::setExecutionConfiguration(const OAIWorkflowExecutionDetail_executionConfiguration &execution_configuration) {
    m_execution_configuration = execution_configuration;
    m_execution_configuration_isSet = true;
}

bool OAIWorkflowExecutionDetail::is_execution_configuration_Set() const{
    return m_execution_configuration_isSet;
}

bool OAIWorkflowExecutionDetail::is_execution_configuration_Valid() const{
    return m_execution_configuration_isValid;
}

OAIWorkflowExecutionDetail_openCounts OAIWorkflowExecutionDetail::getOpenCounts() const {
    return m_open_counts;
}
void OAIWorkflowExecutionDetail::setOpenCounts(const OAIWorkflowExecutionDetail_openCounts &open_counts) {
    m_open_counts = open_counts;
    m_open_counts_isSet = true;
}

bool OAIWorkflowExecutionDetail::is_open_counts_Set() const{
    return m_open_counts_isSet;
}

bool OAIWorkflowExecutionDetail::is_open_counts_Valid() const{
    return m_open_counts_isValid;
}

QDateTime OAIWorkflowExecutionDetail::getLatestActivityTaskTimestamp() const {
    return m_latest_activity_task_timestamp;
}
void OAIWorkflowExecutionDetail::setLatestActivityTaskTimestamp(const QDateTime &latest_activity_task_timestamp) {
    m_latest_activity_task_timestamp = latest_activity_task_timestamp;
    m_latest_activity_task_timestamp_isSet = true;
}

bool OAIWorkflowExecutionDetail::is_latest_activity_task_timestamp_Set() const{
    return m_latest_activity_task_timestamp_isSet;
}

bool OAIWorkflowExecutionDetail::is_latest_activity_task_timestamp_Valid() const{
    return m_latest_activity_task_timestamp_isValid;
}

QString OAIWorkflowExecutionDetail::getLatestExecutionContext() const {
    return m_latest_execution_context;
}
void OAIWorkflowExecutionDetail::setLatestExecutionContext(const QString &latest_execution_context) {
    m_latest_execution_context = latest_execution_context;
    m_latest_execution_context_isSet = true;
}

bool OAIWorkflowExecutionDetail::is_latest_execution_context_Set() const{
    return m_latest_execution_context_isSet;
}

bool OAIWorkflowExecutionDetail::is_latest_execution_context_Valid() const{
    return m_latest_execution_context_isValid;
}

bool OAIWorkflowExecutionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_activity_task_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_execution_context_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowExecutionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_execution_info_isValid && m_execution_configuration_isValid && m_open_counts_isValid && true;
}

} // namespace OpenAPI
