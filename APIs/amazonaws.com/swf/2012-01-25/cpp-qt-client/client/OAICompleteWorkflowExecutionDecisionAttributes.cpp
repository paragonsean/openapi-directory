/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompleteWorkflowExecutionDecisionAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompleteWorkflowExecutionDecisionAttributes::OAICompleteWorkflowExecutionDecisionAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompleteWorkflowExecutionDecisionAttributes::OAICompleteWorkflowExecutionDecisionAttributes() {
    this->initializeModel();
}

OAICompleteWorkflowExecutionDecisionAttributes::~OAICompleteWorkflowExecutionDecisionAttributes() {}

void OAICompleteWorkflowExecutionDecisionAttributes::initializeModel() {

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAICompleteWorkflowExecutionDecisionAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompleteWorkflowExecutionDecisionAttributes::fromJsonObject(QJsonObject json) {

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAICompleteWorkflowExecutionDecisionAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompleteWorkflowExecutionDecisionAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QString OAICompleteWorkflowExecutionDecisionAttributes::getResult() const {
    return m_result;
}
void OAICompleteWorkflowExecutionDecisionAttributes::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAICompleteWorkflowExecutionDecisionAttributes::is_result_Set() const{
    return m_result_isSet;
}

bool OAICompleteWorkflowExecutionDecisionAttributes::is_result_Valid() const{
    return m_result_isValid;
}

bool OAICompleteWorkflowExecutionDecisionAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompleteWorkflowExecutionDecisionAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
