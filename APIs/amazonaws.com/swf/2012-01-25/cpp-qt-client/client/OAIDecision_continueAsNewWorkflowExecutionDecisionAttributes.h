/**
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes.h
 *
 * 
 */

#ifndef OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes_H
#define OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes_H

#include <QJsonObject>

#include "OAIChildPolicy.h"
#include "OAIContinueAsNewWorkflowExecutionDecisionAttributes_taskList.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContinueAsNewWorkflowExecutionDecisionAttributes_taskList;

class OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes : public OAIObject {
public:
    OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes();
    OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes(QString json);
    ~OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInput() const;
    void setInput(const QString &input);
    bool is_input_Set() const;
    bool is_input_Valid() const;

    QString getExecutionStartToCloseTimeout() const;
    void setExecutionStartToCloseTimeout(const QString &execution_start_to_close_timeout);
    bool is_execution_start_to_close_timeout_Set() const;
    bool is_execution_start_to_close_timeout_Valid() const;

    OAIContinueAsNewWorkflowExecutionDecisionAttributes_taskList getTaskList() const;
    void setTaskList(const OAIContinueAsNewWorkflowExecutionDecisionAttributes_taskList &task_list);
    bool is_task_list_Set() const;
    bool is_task_list_Valid() const;

    QString getTaskPriority() const;
    void setTaskPriority(const QString &task_priority);
    bool is_task_priority_Set() const;
    bool is_task_priority_Valid() const;

    QString getTaskStartToCloseTimeout() const;
    void setTaskStartToCloseTimeout(const QString &task_start_to_close_timeout);
    bool is_task_start_to_close_timeout_Set() const;
    bool is_task_start_to_close_timeout_Valid() const;

    OAIChildPolicy getChildPolicy() const;
    void setChildPolicy(const OAIChildPolicy &child_policy);
    bool is_child_policy_Set() const;
    bool is_child_policy_Valid() const;

    QList getTagList() const;
    void setTagList(const QList &tag_list);
    bool is_tag_list_Set() const;
    bool is_tag_list_Valid() const;

    QString getWorkflowTypeVersion() const;
    void setWorkflowTypeVersion(const QString &workflow_type_version);
    bool is_workflow_type_version_Set() const;
    bool is_workflow_type_version_Valid() const;

    QString getLambdaRole() const;
    void setLambdaRole(const QString &lambda_role);
    bool is_lambda_role_Set() const;
    bool is_lambda_role_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_input;
    bool m_input_isSet;
    bool m_input_isValid;

    QString m_execution_start_to_close_timeout;
    bool m_execution_start_to_close_timeout_isSet;
    bool m_execution_start_to_close_timeout_isValid;

    OAIContinueAsNewWorkflowExecutionDecisionAttributes_taskList m_task_list;
    bool m_task_list_isSet;
    bool m_task_list_isValid;

    QString m_task_priority;
    bool m_task_priority_isSet;
    bool m_task_priority_isValid;

    QString m_task_start_to_close_timeout;
    bool m_task_start_to_close_timeout_isSet;
    bool m_task_start_to_close_timeout_isValid;

    OAIChildPolicy m_child_policy;
    bool m_child_policy_isSet;
    bool m_child_policy_isValid;

    QList m_tag_list;
    bool m_tag_list_isSet;
    bool m_tag_list_isValid;

    QString m_workflow_type_version;
    bool m_workflow_type_version_isSet;
    bool m_workflow_type_version_isValid;

    QString m_lambda_role;
    bool m_lambda_role_isSet;
    bool m_lambda_role_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes)

#endif // OAIDecision_continueAsNewWorkflowExecutionDecisionAttributes_H
