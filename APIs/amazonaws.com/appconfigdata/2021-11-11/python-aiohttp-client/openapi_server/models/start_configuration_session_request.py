# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartConfigurationSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_identifier: str=None, environment_identifier: str=None, configuration_profile_identifier: str=None, required_minimum_poll_interval_in_seconds: int=None):
        """StartConfigurationSessionRequest - a model defined in OpenAPI

        :param application_identifier: The application_identifier of this StartConfigurationSessionRequest.
        :param environment_identifier: The environment_identifier of this StartConfigurationSessionRequest.
        :param configuration_profile_identifier: The configuration_profile_identifier of this StartConfigurationSessionRequest.
        :param required_minimum_poll_interval_in_seconds: The required_minimum_poll_interval_in_seconds of this StartConfigurationSessionRequest.
        """
        self.openapi_types = {
            'application_identifier': str,
            'environment_identifier': str,
            'configuration_profile_identifier': str,
            'required_minimum_poll_interval_in_seconds': int
        }

        self.attribute_map = {
            'application_identifier': 'ApplicationIdentifier',
            'environment_identifier': 'EnvironmentIdentifier',
            'configuration_profile_identifier': 'ConfigurationProfileIdentifier',
            'required_minimum_poll_interval_in_seconds': 'RequiredMinimumPollIntervalInSeconds'
        }

        self._application_identifier = application_identifier
        self._environment_identifier = environment_identifier
        self._configuration_profile_identifier = configuration_profile_identifier
        self._required_minimum_poll_interval_in_seconds = required_minimum_poll_interval_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartConfigurationSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartConfigurationSession_request of this StartConfigurationSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_identifier(self):
        """Gets the application_identifier of this StartConfigurationSessionRequest.

        The application ID or the application name.

        :return: The application_identifier of this StartConfigurationSessionRequest.
        :rtype: str
        """
        return self._application_identifier

    @application_identifier.setter
    def application_identifier(self, application_identifier):
        """Sets the application_identifier of this StartConfigurationSessionRequest.

        The application ID or the application name.

        :param application_identifier: The application_identifier of this StartConfigurationSessionRequest.
        :type application_identifier: str
        """
        if application_identifier is None:
            raise ValueError("Invalid value for `application_identifier`, must not be `None`")
        if application_identifier is not None and len(application_identifier) > 128:
            raise ValueError("Invalid value for `application_identifier`, length must be less than or equal to `128`")
        if application_identifier is not None and len(application_identifier) < 1:
            raise ValueError("Invalid value for `application_identifier`, length must be greater than or equal to `1`")

        self._application_identifier = application_identifier

    @property
    def environment_identifier(self):
        """Gets the environment_identifier of this StartConfigurationSessionRequest.

        The environment ID or the environment name.

        :return: The environment_identifier of this StartConfigurationSessionRequest.
        :rtype: str
        """
        return self._environment_identifier

    @environment_identifier.setter
    def environment_identifier(self, environment_identifier):
        """Sets the environment_identifier of this StartConfigurationSessionRequest.

        The environment ID or the environment name.

        :param environment_identifier: The environment_identifier of this StartConfigurationSessionRequest.
        :type environment_identifier: str
        """
        if environment_identifier is None:
            raise ValueError("Invalid value for `environment_identifier`, must not be `None`")
        if environment_identifier is not None and len(environment_identifier) > 128:
            raise ValueError("Invalid value for `environment_identifier`, length must be less than or equal to `128`")
        if environment_identifier is not None and len(environment_identifier) < 1:
            raise ValueError("Invalid value for `environment_identifier`, length must be greater than or equal to `1`")

        self._environment_identifier = environment_identifier

    @property
    def configuration_profile_identifier(self):
        """Gets the configuration_profile_identifier of this StartConfigurationSessionRequest.

        The configuration profile ID or the configuration profile name.

        :return: The configuration_profile_identifier of this StartConfigurationSessionRequest.
        :rtype: str
        """
        return self._configuration_profile_identifier

    @configuration_profile_identifier.setter
    def configuration_profile_identifier(self, configuration_profile_identifier):
        """Sets the configuration_profile_identifier of this StartConfigurationSessionRequest.

        The configuration profile ID or the configuration profile name.

        :param configuration_profile_identifier: The configuration_profile_identifier of this StartConfigurationSessionRequest.
        :type configuration_profile_identifier: str
        """
        if configuration_profile_identifier is None:
            raise ValueError("Invalid value for `configuration_profile_identifier`, must not be `None`")
        if configuration_profile_identifier is not None and len(configuration_profile_identifier) > 128:
            raise ValueError("Invalid value for `configuration_profile_identifier`, length must be less than or equal to `128`")
        if configuration_profile_identifier is not None and len(configuration_profile_identifier) < 1:
            raise ValueError("Invalid value for `configuration_profile_identifier`, length must be greater than or equal to `1`")

        self._configuration_profile_identifier = configuration_profile_identifier

    @property
    def required_minimum_poll_interval_in_seconds(self):
        """Gets the required_minimum_poll_interval_in_seconds of this StartConfigurationSessionRequest.

        Sets a constraint on a session. If you specify a value of, for example, 60 seconds, then the client that established the session can't call <a>GetLatestConfiguration</a> more frequently than every 60 seconds.

        :return: The required_minimum_poll_interval_in_seconds of this StartConfigurationSessionRequest.
        :rtype: int
        """
        return self._required_minimum_poll_interval_in_seconds

    @required_minimum_poll_interval_in_seconds.setter
    def required_minimum_poll_interval_in_seconds(self, required_minimum_poll_interval_in_seconds):
        """Sets the required_minimum_poll_interval_in_seconds of this StartConfigurationSessionRequest.

        Sets a constraint on a session. If you specify a value of, for example, 60 seconds, then the client that established the session can't call <a>GetLatestConfiguration</a> more frequently than every 60 seconds.

        :param required_minimum_poll_interval_in_seconds: The required_minimum_poll_interval_in_seconds of this StartConfigurationSessionRequest.
        :type required_minimum_poll_interval_in_seconds: int
        """
        if required_minimum_poll_interval_in_seconds is not None and required_minimum_poll_interval_in_seconds > 86400:
            raise ValueError("Invalid value for `required_minimum_poll_interval_in_seconds`, must be a value less than or equal to `86400`")
        if required_minimum_poll_interval_in_seconds is not None and required_minimum_poll_interval_in_seconds < 15:
            raise ValueError("Invalid value for `required_minimum_poll_interval_in_seconds`, must be a value greater than or equal to `15`")

        self._required_minimum_poll_interval_in_seconds = required_minimum_poll_interval_in_seconds
