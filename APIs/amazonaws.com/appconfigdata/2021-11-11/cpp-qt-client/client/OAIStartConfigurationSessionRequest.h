/**
 * AWS AppConfig Data
 * <p>AppConfig Data provides the data plane APIs your application uses to retrieve configuration data. Here's how it works:</p> <p>Your application retrieves configuration data by first establishing a configuration session using the AppConfig Data <a>StartConfigurationSession</a> API action. Your session's client then makes periodic calls to <a>GetLatestConfiguration</a> to check for and retrieve the latest data available.</p> <p>When calling <code>StartConfigurationSession</code>, your code sends the following information:</p> <ul> <li> <p>Identifiers (ID or name) of an AppConfig application, environment, and configuration profile that the session tracks.</p> </li> <li> <p>(Optional) The minimum amount of time the session's client must wait between calls to <code>GetLatestConfiguration</code>.</p> </li> </ul> <p>In response, AppConfig provides an <code>InitialConfigurationToken</code> to be given to the session's client and used the first time it calls <code>GetLatestConfiguration</code> for that session.</p> <important> <p>This token should only be used once in your first call to <code>GetLatestConfiguration</code>. You <i>must</i> use the new token in the <code>GetLatestConfiguration</code> response (<code>NextPollConfigurationToken</code>) in each subsequent call to <code>GetLatestConfiguration</code>.</p> </important> <p>When calling <code>GetLatestConfiguration</code>, your client code sends the most recent <code>ConfigurationToken</code> value it has and receives in response:</p> <ul> <li> <p> <code>NextPollConfigurationToken</code>: the <code>ConfigurationToken</code> value to use on the next call to <code>GetLatestConfiguration</code>.</p> </li> <li> <p> <code>NextPollIntervalInSeconds</code>: the duration the client should wait before making its next call to <code>GetLatestConfiguration</code>. This duration may vary over the course of the session, so it should be used instead of the value sent on the <code>StartConfigurationSession</code> call.</p> </li> <li> <p>The configuration: the latest data intended for the session. This may be empty if the client already has the latest version of the configuration.</p> </li> </ul> <important> <p>The <code>InitialConfigurationToken</code> and <code>NextPollConfigurationToken</code> should only be used once. To support long poll use cases, the tokens are valid for up to 24 hours. If a <code>GetLatestConfiguration</code> call uses an expired token, the system returns <code>BadRequestException</code>.</p> </important> <p>For more information and to view example CLI commands that show how to retrieve a configuration using the AppConfig Data <code>StartConfigurationSession</code> and <code>GetLatestConfiguration</code> API actions, see <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration\">Retrieving the configuration</a> in the <i>AppConfig User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-11-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartConfigurationSessionRequest.h
 *
 * 
 */

#ifndef OAIStartConfigurationSessionRequest_H
#define OAIStartConfigurationSessionRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStartConfigurationSessionRequest : public OAIObject {
public:
    OAIStartConfigurationSessionRequest();
    OAIStartConfigurationSessionRequest(QString json);
    ~OAIStartConfigurationSessionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationIdentifier() const;
    void setApplicationIdentifier(const QString &application_identifier);
    bool is_application_identifier_Set() const;
    bool is_application_identifier_Valid() const;

    QString getEnvironmentIdentifier() const;
    void setEnvironmentIdentifier(const QString &environment_identifier);
    bool is_environment_identifier_Set() const;
    bool is_environment_identifier_Valid() const;

    QString getConfigurationProfileIdentifier() const;
    void setConfigurationProfileIdentifier(const QString &configuration_profile_identifier);
    bool is_configuration_profile_identifier_Set() const;
    bool is_configuration_profile_identifier_Valid() const;

    qint32 getRequiredMinimumPollIntervalInSeconds() const;
    void setRequiredMinimumPollIntervalInSeconds(const qint32 &required_minimum_poll_interval_in_seconds);
    bool is_required_minimum_poll_interval_in_seconds_Set() const;
    bool is_required_minimum_poll_interval_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_identifier;
    bool m_application_identifier_isSet;
    bool m_application_identifier_isValid;

    QString m_environment_identifier;
    bool m_environment_identifier_isSet;
    bool m_environment_identifier_isValid;

    QString m_configuration_profile_identifier;
    bool m_configuration_profile_identifier_isSet;
    bool m_configuration_profile_identifier_isValid;

    qint32 m_required_minimum_poll_interval_in_seconds;
    bool m_required_minimum_poll_interval_in_seconds_isSet;
    bool m_required_minimum_poll_interval_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartConfigurationSessionRequest)

#endif // OAIStartConfigurationSessionRequest_H
