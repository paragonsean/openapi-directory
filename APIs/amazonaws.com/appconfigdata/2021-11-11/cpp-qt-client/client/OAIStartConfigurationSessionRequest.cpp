/**
 * AWS AppConfig Data
 * <p>AppConfig Data provides the data plane APIs your application uses to retrieve configuration data. Here's how it works:</p> <p>Your application retrieves configuration data by first establishing a configuration session using the AppConfig Data <a>StartConfigurationSession</a> API action. Your session's client then makes periodic calls to <a>GetLatestConfiguration</a> to check for and retrieve the latest data available.</p> <p>When calling <code>StartConfigurationSession</code>, your code sends the following information:</p> <ul> <li> <p>Identifiers (ID or name) of an AppConfig application, environment, and configuration profile that the session tracks.</p> </li> <li> <p>(Optional) The minimum amount of time the session's client must wait between calls to <code>GetLatestConfiguration</code>.</p> </li> </ul> <p>In response, AppConfig provides an <code>InitialConfigurationToken</code> to be given to the session's client and used the first time it calls <code>GetLatestConfiguration</code> for that session.</p> <important> <p>This token should only be used once in your first call to <code>GetLatestConfiguration</code>. You <i>must</i> use the new token in the <code>GetLatestConfiguration</code> response (<code>NextPollConfigurationToken</code>) in each subsequent call to <code>GetLatestConfiguration</code>.</p> </important> <p>When calling <code>GetLatestConfiguration</code>, your client code sends the most recent <code>ConfigurationToken</code> value it has and receives in response:</p> <ul> <li> <p> <code>NextPollConfigurationToken</code>: the <code>ConfigurationToken</code> value to use on the next call to <code>GetLatestConfiguration</code>.</p> </li> <li> <p> <code>NextPollIntervalInSeconds</code>: the duration the client should wait before making its next call to <code>GetLatestConfiguration</code>. This duration may vary over the course of the session, so it should be used instead of the value sent on the <code>StartConfigurationSession</code> call.</p> </li> <li> <p>The configuration: the latest data intended for the session. This may be empty if the client already has the latest version of the configuration.</p> </li> </ul> <important> <p>The <code>InitialConfigurationToken</code> and <code>NextPollConfigurationToken</code> should only be used once. To support long poll use cases, the tokens are valid for up to 24 hours. If a <code>GetLatestConfiguration</code> call uses an expired token, the system returns <code>BadRequestException</code>.</p> </important> <p>For more information and to view example CLI commands that show how to retrieve a configuration using the AppConfig Data <code>StartConfigurationSession</code> and <code>GetLatestConfiguration</code> API actions, see <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration\">Retrieving the configuration</a> in the <i>AppConfig User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-11-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartConfigurationSessionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartConfigurationSessionRequest::OAIStartConfigurationSessionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartConfigurationSessionRequest::OAIStartConfigurationSessionRequest() {
    this->initializeModel();
}

OAIStartConfigurationSessionRequest::~OAIStartConfigurationSessionRequest() {}

void OAIStartConfigurationSessionRequest::initializeModel() {

    m_application_identifier_isSet = false;
    m_application_identifier_isValid = false;

    m_environment_identifier_isSet = false;
    m_environment_identifier_isValid = false;

    m_configuration_profile_identifier_isSet = false;
    m_configuration_profile_identifier_isValid = false;

    m_required_minimum_poll_interval_in_seconds_isSet = false;
    m_required_minimum_poll_interval_in_seconds_isValid = false;
}

void OAIStartConfigurationSessionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartConfigurationSessionRequest::fromJsonObject(QJsonObject json) {

    m_application_identifier_isValid = ::OpenAPI::fromJsonValue(m_application_identifier, json[QString("ApplicationIdentifier")]);
    m_application_identifier_isSet = !json[QString("ApplicationIdentifier")].isNull() && m_application_identifier_isValid;

    m_environment_identifier_isValid = ::OpenAPI::fromJsonValue(m_environment_identifier, json[QString("EnvironmentIdentifier")]);
    m_environment_identifier_isSet = !json[QString("EnvironmentIdentifier")].isNull() && m_environment_identifier_isValid;

    m_configuration_profile_identifier_isValid = ::OpenAPI::fromJsonValue(m_configuration_profile_identifier, json[QString("ConfigurationProfileIdentifier")]);
    m_configuration_profile_identifier_isSet = !json[QString("ConfigurationProfileIdentifier")].isNull() && m_configuration_profile_identifier_isValid;

    m_required_minimum_poll_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_required_minimum_poll_interval_in_seconds, json[QString("RequiredMinimumPollIntervalInSeconds")]);
    m_required_minimum_poll_interval_in_seconds_isSet = !json[QString("RequiredMinimumPollIntervalInSeconds")].isNull() && m_required_minimum_poll_interval_in_seconds_isValid;
}

QString OAIStartConfigurationSessionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartConfigurationSessionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_identifier_isSet) {
        obj.insert(QString("ApplicationIdentifier"), ::OpenAPI::toJsonValue(m_application_identifier));
    }
    if (m_environment_identifier_isSet) {
        obj.insert(QString("EnvironmentIdentifier"), ::OpenAPI::toJsonValue(m_environment_identifier));
    }
    if (m_configuration_profile_identifier_isSet) {
        obj.insert(QString("ConfigurationProfileIdentifier"), ::OpenAPI::toJsonValue(m_configuration_profile_identifier));
    }
    if (m_required_minimum_poll_interval_in_seconds_isSet) {
        obj.insert(QString("RequiredMinimumPollIntervalInSeconds"), ::OpenAPI::toJsonValue(m_required_minimum_poll_interval_in_seconds));
    }
    return obj;
}

QString OAIStartConfigurationSessionRequest::getApplicationIdentifier() const {
    return m_application_identifier;
}
void OAIStartConfigurationSessionRequest::setApplicationIdentifier(const QString &application_identifier) {
    m_application_identifier = application_identifier;
    m_application_identifier_isSet = true;
}

bool OAIStartConfigurationSessionRequest::is_application_identifier_Set() const{
    return m_application_identifier_isSet;
}

bool OAIStartConfigurationSessionRequest::is_application_identifier_Valid() const{
    return m_application_identifier_isValid;
}

QString OAIStartConfigurationSessionRequest::getEnvironmentIdentifier() const {
    return m_environment_identifier;
}
void OAIStartConfigurationSessionRequest::setEnvironmentIdentifier(const QString &environment_identifier) {
    m_environment_identifier = environment_identifier;
    m_environment_identifier_isSet = true;
}

bool OAIStartConfigurationSessionRequest::is_environment_identifier_Set() const{
    return m_environment_identifier_isSet;
}

bool OAIStartConfigurationSessionRequest::is_environment_identifier_Valid() const{
    return m_environment_identifier_isValid;
}

QString OAIStartConfigurationSessionRequest::getConfigurationProfileIdentifier() const {
    return m_configuration_profile_identifier;
}
void OAIStartConfigurationSessionRequest::setConfigurationProfileIdentifier(const QString &configuration_profile_identifier) {
    m_configuration_profile_identifier = configuration_profile_identifier;
    m_configuration_profile_identifier_isSet = true;
}

bool OAIStartConfigurationSessionRequest::is_configuration_profile_identifier_Set() const{
    return m_configuration_profile_identifier_isSet;
}

bool OAIStartConfigurationSessionRequest::is_configuration_profile_identifier_Valid() const{
    return m_configuration_profile_identifier_isValid;
}

qint32 OAIStartConfigurationSessionRequest::getRequiredMinimumPollIntervalInSeconds() const {
    return m_required_minimum_poll_interval_in_seconds;
}
void OAIStartConfigurationSessionRequest::setRequiredMinimumPollIntervalInSeconds(const qint32 &required_minimum_poll_interval_in_seconds) {
    m_required_minimum_poll_interval_in_seconds = required_minimum_poll_interval_in_seconds;
    m_required_minimum_poll_interval_in_seconds_isSet = true;
}

bool OAIStartConfigurationSessionRequest::is_required_minimum_poll_interval_in_seconds_Set() const{
    return m_required_minimum_poll_interval_in_seconds_isSet;
}

bool OAIStartConfigurationSessionRequest::is_required_minimum_poll_interval_in_seconds_Valid() const{
    return m_required_minimum_poll_interval_in_seconds_isValid;
}

bool OAIStartConfigurationSessionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_profile_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_minimum_poll_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartConfigurationSessionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_identifier_isValid && m_environment_identifier_isValid && m_configuration_profile_identifier_isValid && true;
}

} // namespace OpenAPI
