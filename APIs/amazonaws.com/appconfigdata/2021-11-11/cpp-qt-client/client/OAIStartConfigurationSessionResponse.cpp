/**
 * AWS AppConfig Data
 * <p>AppConfig Data provides the data plane APIs your application uses to retrieve configuration data. Here's how it works:</p> <p>Your application retrieves configuration data by first establishing a configuration session using the AppConfig Data <a>StartConfigurationSession</a> API action. Your session's client then makes periodic calls to <a>GetLatestConfiguration</a> to check for and retrieve the latest data available.</p> <p>When calling <code>StartConfigurationSession</code>, your code sends the following information:</p> <ul> <li> <p>Identifiers (ID or name) of an AppConfig application, environment, and configuration profile that the session tracks.</p> </li> <li> <p>(Optional) The minimum amount of time the session's client must wait between calls to <code>GetLatestConfiguration</code>.</p> </li> </ul> <p>In response, AppConfig provides an <code>InitialConfigurationToken</code> to be given to the session's client and used the first time it calls <code>GetLatestConfiguration</code> for that session.</p> <important> <p>This token should only be used once in your first call to <code>GetLatestConfiguration</code>. You <i>must</i> use the new token in the <code>GetLatestConfiguration</code> response (<code>NextPollConfigurationToken</code>) in each subsequent call to <code>GetLatestConfiguration</code>.</p> </important> <p>When calling <code>GetLatestConfiguration</code>, your client code sends the most recent <code>ConfigurationToken</code> value it has and receives in response:</p> <ul> <li> <p> <code>NextPollConfigurationToken</code>: the <code>ConfigurationToken</code> value to use on the next call to <code>GetLatestConfiguration</code>.</p> </li> <li> <p> <code>NextPollIntervalInSeconds</code>: the duration the client should wait before making its next call to <code>GetLatestConfiguration</code>. This duration may vary over the course of the session, so it should be used instead of the value sent on the <code>StartConfigurationSession</code> call.</p> </li> <li> <p>The configuration: the latest data intended for the session. This may be empty if the client already has the latest version of the configuration.</p> </li> </ul> <important> <p>The <code>InitialConfigurationToken</code> and <code>NextPollConfigurationToken</code> should only be used once. To support long poll use cases, the tokens are valid for up to 24 hours. If a <code>GetLatestConfiguration</code> call uses an expired token, the system returns <code>BadRequestException</code>.</p> </important> <p>For more information and to view example CLI commands that show how to retrieve a configuration using the AppConfig Data <code>StartConfigurationSession</code> and <code>GetLatestConfiguration</code> API actions, see <a href=\"http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration\">Retrieving the configuration</a> in the <i>AppConfig User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2021-11-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartConfigurationSessionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartConfigurationSessionResponse::OAIStartConfigurationSessionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartConfigurationSessionResponse::OAIStartConfigurationSessionResponse() {
    this->initializeModel();
}

OAIStartConfigurationSessionResponse::~OAIStartConfigurationSessionResponse() {}

void OAIStartConfigurationSessionResponse::initializeModel() {

    m_initial_configuration_token_isSet = false;
    m_initial_configuration_token_isValid = false;
}

void OAIStartConfigurationSessionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartConfigurationSessionResponse::fromJsonObject(QJsonObject json) {

    m_initial_configuration_token_isValid = ::OpenAPI::fromJsonValue(m_initial_configuration_token, json[QString("InitialConfigurationToken")]);
    m_initial_configuration_token_isSet = !json[QString("InitialConfigurationToken")].isNull() && m_initial_configuration_token_isValid;
}

QString OAIStartConfigurationSessionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartConfigurationSessionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_configuration_token_isSet) {
        obj.insert(QString("InitialConfigurationToken"), ::OpenAPI::toJsonValue(m_initial_configuration_token));
    }
    return obj;
}

QString OAIStartConfigurationSessionResponse::getInitialConfigurationToken() const {
    return m_initial_configuration_token;
}
void OAIStartConfigurationSessionResponse::setInitialConfigurationToken(const QString &initial_configuration_token) {
    m_initial_configuration_token = initial_configuration_token;
    m_initial_configuration_token_isSet = true;
}

bool OAIStartConfigurationSessionResponse::is_initial_configuration_token_Set() const{
    return m_initial_configuration_token_isSet;
}

bool OAIStartConfigurationSessionResponse::is_initial_configuration_token_Valid() const{
    return m_initial_configuration_token_isValid;
}

bool OAIStartConfigurationSessionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_configuration_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartConfigurationSessionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
