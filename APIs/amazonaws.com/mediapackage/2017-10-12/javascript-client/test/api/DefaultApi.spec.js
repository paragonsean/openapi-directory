/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaPackage);
  }
}(this, function(expect, AwsElementalMediaPackage) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaPackage.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('configureLogs', function() {
      it('should call configureLogs successfully', function(done) {
        //uncomment below and update the code to test configureLogs
        //instance.configureLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannel', function() {
      it('should call createChannel successfully', function(done) {
        //uncomment below and update the code to test createChannel
        //instance.createChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createHarvestJob', function() {
      it('should call createHarvestJob successfully', function(done) {
        //uncomment below and update the code to test createHarvestJob
        //instance.createHarvestJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOriginEndpoint', function() {
      it('should call createOriginEndpoint successfully', function(done) {
        //uncomment below and update the code to test createOriginEndpoint
        //instance.createOriginEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannel', function() {
      it('should call deleteChannel successfully', function(done) {
        //uncomment below and update the code to test deleteChannel
        //instance.deleteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOriginEndpoint', function() {
      it('should call deleteOriginEndpoint successfully', function(done) {
        //uncomment below and update the code to test deleteOriginEndpoint
        //instance.deleteOriginEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannel', function() {
      it('should call describeChannel successfully', function(done) {
        //uncomment below and update the code to test describeChannel
        //instance.describeChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeHarvestJob', function() {
      it('should call describeHarvestJob successfully', function(done) {
        //uncomment below and update the code to test describeHarvestJob
        //instance.describeHarvestJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOriginEndpoint', function() {
      it('should call describeOriginEndpoint successfully', function(done) {
        //uncomment below and update the code to test describeOriginEndpoint
        //instance.describeOriginEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannels', function() {
      it('should call listChannels successfully', function(done) {
        //uncomment below and update the code to test listChannels
        //instance.listChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHarvestJobs', function() {
      it('should call listHarvestJobs successfully', function(done) {
        //uncomment below and update the code to test listHarvestJobs
        //instance.listHarvestJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOriginEndpoints', function() {
      it('should call listOriginEndpoints successfully', function(done) {
        //uncomment below and update the code to test listOriginEndpoints
        //instance.listOriginEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rotateChannelCredentials', function() {
      it('should call rotateChannelCredentials successfully', function(done) {
        //uncomment below and update the code to test rotateChannelCredentials
        //instance.rotateChannelCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rotateIngestEndpointCredentials', function() {
      it('should call rotateIngestEndpointCredentials successfully', function(done) {
        //uncomment below and update the code to test rotateIngestEndpointCredentials
        //instance.rotateIngestEndpointCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannel', function() {
      it('should call updateChannel successfully', function(done) {
        //uncomment below and update the code to test updateChannel
        //instance.updateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOriginEndpoint', function() {
      it('should call updateOriginEndpoint successfully', function(done) {
        //uncomment below and update the code to test updateOriginEndpoint
        //instance.updateOriginEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
