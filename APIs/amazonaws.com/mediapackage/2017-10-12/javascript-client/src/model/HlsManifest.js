/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdMarkers from './AdMarkers';
import AdsOnDeliveryRestrictions from './AdsOnDeliveryRestrictions';
import PlaylistType from './PlaylistType';

/**
 * The HlsManifest model module.
 * @module model/HlsManifest
 * @version 2017-10-12
 */
class HlsManifest {
    /**
     * Constructs a new <code>HlsManifest</code>.
     * A HTTP Live Streaming (HLS) manifest configuration.
     * @alias module:model/HlsManifest
     * @param id {String} 
     */
    constructor(id) { 
        
        HlsManifest.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['Id'] = id;
    }

    /**
     * Constructs a <code>HlsManifest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HlsManifest} obj Optional instance to populate.
     * @return {module:model/HlsManifest} The populated <code>HlsManifest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HlsManifest();

            if (data.hasOwnProperty('AdMarkers')) {
                obj['AdMarkers'] = ApiClient.convertToType(data['AdMarkers'], AdMarkers);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('IncludeIframeOnlyStream')) {
                obj['IncludeIframeOnlyStream'] = ApiClient.convertToType(data['IncludeIframeOnlyStream'], 'Boolean');
            }
            if (data.hasOwnProperty('ManifestName')) {
                obj['ManifestName'] = ApiClient.convertToType(data['ManifestName'], 'String');
            }
            if (data.hasOwnProperty('PlaylistType')) {
                obj['PlaylistType'] = ApiClient.convertToType(data['PlaylistType'], PlaylistType);
            }
            if (data.hasOwnProperty('PlaylistWindowSeconds')) {
                obj['PlaylistWindowSeconds'] = ApiClient.convertToType(data['PlaylistWindowSeconds'], 'Number');
            }
            if (data.hasOwnProperty('ProgramDateTimeIntervalSeconds')) {
                obj['ProgramDateTimeIntervalSeconds'] = ApiClient.convertToType(data['ProgramDateTimeIntervalSeconds'], 'Number');
            }
            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
            if (data.hasOwnProperty('AdTriggers')) {
                obj['AdTriggers'] = ApiClient.convertToType(data['AdTriggers'], Array);
            }
            if (data.hasOwnProperty('AdsOnDeliveryRestrictions')) {
                obj['AdsOnDeliveryRestrictions'] = ApiClient.convertToType(data['AdsOnDeliveryRestrictions'], AdsOnDeliveryRestrictions);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HlsManifest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HlsManifest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HlsManifest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AdMarkers`
        if (data['AdMarkers']) { // data not null
          AdMarkers.validateJSON(data['AdMarkers']);
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `IncludeIframeOnlyStream`
        if (data['IncludeIframeOnlyStream']) { // data not null
          Boolean.validateJSON(data['IncludeIframeOnlyStream']);
        }
        // validate the optional field `ManifestName`
        if (data['ManifestName']) { // data not null
          String.validateJSON(data['ManifestName']);
        }
        // validate the optional field `PlaylistType`
        if (data['PlaylistType']) { // data not null
          PlaylistType.validateJSON(data['PlaylistType']);
        }
        // validate the optional field `PlaylistWindowSeconds`
        if (data['PlaylistWindowSeconds']) { // data not null
          Number.validateJSON(data['PlaylistWindowSeconds']);
        }
        // validate the optional field `ProgramDateTimeIntervalSeconds`
        if (data['ProgramDateTimeIntervalSeconds']) { // data not null
          Number.validateJSON(data['ProgramDateTimeIntervalSeconds']);
        }
        // validate the optional field `Url`
        if (data['Url']) { // data not null
          String.validateJSON(data['Url']);
        }
        // validate the optional field `AdTriggers`
        if (data['AdTriggers']) { // data not null
          Array.validateJSON(data['AdTriggers']);
        }
        // validate the optional field `AdsOnDeliveryRestrictions`
        if (data['AdsOnDeliveryRestrictions']) { // data not null
          AdsOnDeliveryRestrictions.validateJSON(data['AdsOnDeliveryRestrictions']);
        }

        return true;
    }


}

HlsManifest.RequiredProperties = ["Id"];

/**
 * @member {module:model/AdMarkers} AdMarkers
 */
HlsManifest.prototype['AdMarkers'] = undefined;

/**
 * @member {String} Id
 */
HlsManifest.prototype['Id'] = undefined;

/**
 * @member {Boolean} IncludeIframeOnlyStream
 */
HlsManifest.prototype['IncludeIframeOnlyStream'] = undefined;

/**
 * @member {String} ManifestName
 */
HlsManifest.prototype['ManifestName'] = undefined;

/**
 * @member {module:model/PlaylistType} PlaylistType
 */
HlsManifest.prototype['PlaylistType'] = undefined;

/**
 * @member {Number} PlaylistWindowSeconds
 */
HlsManifest.prototype['PlaylistWindowSeconds'] = undefined;

/**
 * @member {Number} ProgramDateTimeIntervalSeconds
 */
HlsManifest.prototype['ProgramDateTimeIntervalSeconds'] = undefined;

/**
 * @member {String} Url
 */
HlsManifest.prototype['Url'] = undefined;

/**
 * @member {Array} AdTriggers
 */
HlsManifest.prototype['AdTriggers'] = undefined;

/**
 * @member {module:model/AdsOnDeliveryRestrictions} AdsOnDeliveryRestrictions
 */
HlsManifest.prototype['AdsOnDeliveryRestrictions'] = undefined;






export default HlsManifest;

