/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOriginEndpoint_request_dashPackage_Encryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOriginEndpoint_request_dashPackage_Encryption::OAICreateOriginEndpoint_request_dashPackage_Encryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOriginEndpoint_request_dashPackage_Encryption::OAICreateOriginEndpoint_request_dashPackage_Encryption() {
    this->initializeModel();
}

OAICreateOriginEndpoint_request_dashPackage_Encryption::~OAICreateOriginEndpoint_request_dashPackage_Encryption() {}

void OAICreateOriginEndpoint_request_dashPackage_Encryption::initializeModel() {

    m_key_rotation_interval_seconds_isSet = false;
    m_key_rotation_interval_seconds_isValid = false;

    m_speke_key_provider_isSet = false;
    m_speke_key_provider_isValid = false;
}

void OAICreateOriginEndpoint_request_dashPackage_Encryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOriginEndpoint_request_dashPackage_Encryption::fromJsonObject(QJsonObject json) {

    m_key_rotation_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_key_rotation_interval_seconds, json[QString("KeyRotationIntervalSeconds")]);
    m_key_rotation_interval_seconds_isSet = !json[QString("KeyRotationIntervalSeconds")].isNull() && m_key_rotation_interval_seconds_isValid;

    m_speke_key_provider_isValid = ::OpenAPI::fromJsonValue(m_speke_key_provider, json[QString("SpekeKeyProvider")]);
    m_speke_key_provider_isSet = !json[QString("SpekeKeyProvider")].isNull() && m_speke_key_provider_isValid;
}

QString OAICreateOriginEndpoint_request_dashPackage_Encryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOriginEndpoint_request_dashPackage_Encryption::asJsonObject() const {
    QJsonObject obj;
    if (m_key_rotation_interval_seconds_isSet) {
        obj.insert(QString("KeyRotationIntervalSeconds"), ::OpenAPI::toJsonValue(m_key_rotation_interval_seconds));
    }
    if (m_speke_key_provider.isSet()) {
        obj.insert(QString("SpekeKeyProvider"), ::OpenAPI::toJsonValue(m_speke_key_provider));
    }
    return obj;
}

qint32 OAICreateOriginEndpoint_request_dashPackage_Encryption::getKeyRotationIntervalSeconds() const {
    return m_key_rotation_interval_seconds;
}
void OAICreateOriginEndpoint_request_dashPackage_Encryption::setKeyRotationIntervalSeconds(const qint32 &key_rotation_interval_seconds) {
    m_key_rotation_interval_seconds = key_rotation_interval_seconds;
    m_key_rotation_interval_seconds_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage_Encryption::is_key_rotation_interval_seconds_Set() const{
    return m_key_rotation_interval_seconds_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage_Encryption::is_key_rotation_interval_seconds_Valid() const{
    return m_key_rotation_interval_seconds_isValid;
}

OAICmafEncryption_SpekeKeyProvider OAICreateOriginEndpoint_request_dashPackage_Encryption::getSpekeKeyProvider() const {
    return m_speke_key_provider;
}
void OAICreateOriginEndpoint_request_dashPackage_Encryption::setSpekeKeyProvider(const OAICmafEncryption_SpekeKeyProvider &speke_key_provider) {
    m_speke_key_provider = speke_key_provider;
    m_speke_key_provider_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage_Encryption::is_speke_key_provider_Set() const{
    return m_speke_key_provider_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage_Encryption::is_speke_key_provider_Valid() const{
    return m_speke_key_provider_isValid;
}

bool OAICreateOriginEndpoint_request_dashPackage_Encryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_rotation_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speke_key_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOriginEndpoint_request_dashPackage_Encryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_speke_key_provider_isValid && true;
}

} // namespace OpenAPI
