/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateHarvestJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateHarvestJob_request::OAICreateHarvestJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateHarvestJob_request::OAICreateHarvestJob_request() {
    this->initializeModel();
}

OAICreateHarvestJob_request::~OAICreateHarvestJob_request() {}

void OAICreateHarvestJob_request::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_origin_endpoint_id_isSet = false;
    m_origin_endpoint_id_isValid = false;

    m_s3_destination_isSet = false;
    m_s3_destination_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAICreateHarvestJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateHarvestJob_request::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_origin_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_origin_endpoint_id, json[QString("originEndpointId")]);
    m_origin_endpoint_id_isSet = !json[QString("originEndpointId")].isNull() && m_origin_endpoint_id_isValid;

    m_s3_destination_isValid = ::OpenAPI::fromJsonValue(m_s3_destination, json[QString("s3Destination")]);
    m_s3_destination_isSet = !json[QString("s3Destination")].isNull() && m_s3_destination_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAICreateHarvestJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateHarvestJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_origin_endpoint_id_isSet) {
        obj.insert(QString("originEndpointId"), ::OpenAPI::toJsonValue(m_origin_endpoint_id));
    }
    if (m_s3_destination.isSet()) {
        obj.insert(QString("s3Destination"), ::OpenAPI::toJsonValue(m_s3_destination));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAICreateHarvestJob_request::getEndTime() const {
    return m_end_time;
}
void OAICreateHarvestJob_request::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreateHarvestJob_request::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreateHarvestJob_request::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAICreateHarvestJob_request::getId() const {
    return m_id;
}
void OAICreateHarvestJob_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateHarvestJob_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateHarvestJob_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateHarvestJob_request::getOriginEndpointId() const {
    return m_origin_endpoint_id;
}
void OAICreateHarvestJob_request::setOriginEndpointId(const QString &origin_endpoint_id) {
    m_origin_endpoint_id = origin_endpoint_id;
    m_origin_endpoint_id_isSet = true;
}

bool OAICreateHarvestJob_request::is_origin_endpoint_id_Set() const{
    return m_origin_endpoint_id_isSet;
}

bool OAICreateHarvestJob_request::is_origin_endpoint_id_Valid() const{
    return m_origin_endpoint_id_isValid;
}

OAICreateHarvestJob_request_s3Destination OAICreateHarvestJob_request::getS3Destination() const {
    return m_s3_destination;
}
void OAICreateHarvestJob_request::setS3Destination(const OAICreateHarvestJob_request_s3Destination &s3_destination) {
    m_s3_destination = s3_destination;
    m_s3_destination_isSet = true;
}

bool OAICreateHarvestJob_request::is_s3_destination_Set() const{
    return m_s3_destination_isSet;
}

bool OAICreateHarvestJob_request::is_s3_destination_Valid() const{
    return m_s3_destination_isValid;
}

QString OAICreateHarvestJob_request::getStartTime() const {
    return m_start_time;
}
void OAICreateHarvestJob_request::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreateHarvestJob_request::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreateHarvestJob_request::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAICreateHarvestJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateHarvestJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && m_id_isValid && m_origin_endpoint_id_isValid && m_s3_destination_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
