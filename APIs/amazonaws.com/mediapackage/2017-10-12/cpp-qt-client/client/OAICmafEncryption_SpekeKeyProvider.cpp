/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICmafEncryption_SpekeKeyProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICmafEncryption_SpekeKeyProvider::OAICmafEncryption_SpekeKeyProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICmafEncryption_SpekeKeyProvider::OAICmafEncryption_SpekeKeyProvider() {
    this->initializeModel();
}

OAICmafEncryption_SpekeKeyProvider::~OAICmafEncryption_SpekeKeyProvider() {}

void OAICmafEncryption_SpekeKeyProvider::initializeModel() {

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_encryption_contract_configuration_isSet = false;
    m_encryption_contract_configuration_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_system_ids_isSet = false;
    m_system_ids_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICmafEncryption_SpekeKeyProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICmafEncryption_SpekeKeyProvider::fromJsonObject(QJsonObject json) {

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("CertificateArn")]);
    m_certificate_arn_isSet = !json[QString("CertificateArn")].isNull() && m_certificate_arn_isValid;

    m_encryption_contract_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_contract_configuration, json[QString("EncryptionContractConfiguration")]);
    m_encryption_contract_configuration_isSet = !json[QString("EncryptionContractConfiguration")].isNull() && m_encryption_contract_configuration_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_system_ids_isValid = ::OpenAPI::fromJsonValue(m_system_ids, json[QString("SystemIds")]);
    m_system_ids_isSet = !json[QString("SystemIds")].isNull() && m_system_ids_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAICmafEncryption_SpekeKeyProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICmafEncryption_SpekeKeyProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_arn_isSet) {
        obj.insert(QString("CertificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_encryption_contract_configuration.isSet()) {
        obj.insert(QString("EncryptionContractConfiguration"), ::OpenAPI::toJsonValue(m_encryption_contract_configuration));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_system_ids.isSet()) {
        obj.insert(QString("SystemIds"), ::OpenAPI::toJsonValue(m_system_ids));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICmafEncryption_SpekeKeyProvider::getCertificateArn() const {
    return m_certificate_arn;
}
void OAICmafEncryption_SpekeKeyProvider::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAICmafEncryption_SpekeKeyProvider::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAICmafEncryption_SpekeKeyProvider::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

OAISpekeKeyProvider_EncryptionContractConfiguration OAICmafEncryption_SpekeKeyProvider::getEncryptionContractConfiguration() const {
    return m_encryption_contract_configuration;
}
void OAICmafEncryption_SpekeKeyProvider::setEncryptionContractConfiguration(const OAISpekeKeyProvider_EncryptionContractConfiguration &encryption_contract_configuration) {
    m_encryption_contract_configuration = encryption_contract_configuration;
    m_encryption_contract_configuration_isSet = true;
}

bool OAICmafEncryption_SpekeKeyProvider::is_encryption_contract_configuration_Set() const{
    return m_encryption_contract_configuration_isSet;
}

bool OAICmafEncryption_SpekeKeyProvider::is_encryption_contract_configuration_Valid() const{
    return m_encryption_contract_configuration_isValid;
}

QString OAICmafEncryption_SpekeKeyProvider::getResourceId() const {
    return m_resource_id;
}
void OAICmafEncryption_SpekeKeyProvider::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICmafEncryption_SpekeKeyProvider::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICmafEncryption_SpekeKeyProvider::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAICmafEncryption_SpekeKeyProvider::getRoleArn() const {
    return m_role_arn;
}
void OAICmafEncryption_SpekeKeyProvider::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICmafEncryption_SpekeKeyProvider::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICmafEncryption_SpekeKeyProvider::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAICmafEncryption_SpekeKeyProvider::getSystemIds() const {
    return m_system_ids;
}
void OAICmafEncryption_SpekeKeyProvider::setSystemIds(const QList &system_ids) {
    m_system_ids = system_ids;
    m_system_ids_isSet = true;
}

bool OAICmafEncryption_SpekeKeyProvider::is_system_ids_Set() const{
    return m_system_ids_isSet;
}

bool OAICmafEncryption_SpekeKeyProvider::is_system_ids_Valid() const{
    return m_system_ids_isValid;
}

QString OAICmafEncryption_SpekeKeyProvider::getUrl() const {
    return m_url;
}
void OAICmafEncryption_SpekeKeyProvider::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICmafEncryption_SpekeKeyProvider::is_url_Set() const{
    return m_url_isSet;
}

bool OAICmafEncryption_SpekeKeyProvider::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICmafEncryption_SpekeKeyProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_contract_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICmafEncryption_SpekeKeyProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_id_isValid && m_role_arn_isValid && m_system_ids_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
