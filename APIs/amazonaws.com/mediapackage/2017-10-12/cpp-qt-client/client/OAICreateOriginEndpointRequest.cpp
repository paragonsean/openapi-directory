/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOriginEndpointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOriginEndpointRequest::OAICreateOriginEndpointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOriginEndpointRequest::OAICreateOriginEndpointRequest() {
    this->initializeModel();
}

OAICreateOriginEndpointRequest::~OAICreateOriginEndpointRequest() {}

void OAICreateOriginEndpointRequest::initializeModel() {

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_cmaf_package_isSet = false;
    m_cmaf_package_isValid = false;

    m_dash_package_isSet = false;
    m_dash_package_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hls_package_isSet = false;
    m_hls_package_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_manifest_name_isSet = false;
    m_manifest_name_isValid = false;

    m_mss_package_isSet = false;
    m_mss_package_isValid = false;

    m_origination_isSet = false;
    m_origination_isValid = false;

    m_startover_window_seconds_isSet = false;
    m_startover_window_seconds_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_time_delay_seconds_isSet = false;
    m_time_delay_seconds_isValid = false;

    m_whitelist_isSet = false;
    m_whitelist_isValid = false;
}

void OAICreateOriginEndpointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOriginEndpointRequest::fromJsonObject(QJsonObject json) {

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("Authorization")]);
    m_authorization_isSet = !json[QString("Authorization")].isNull() && m_authorization_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("ChannelId")]);
    m_channel_id_isSet = !json[QString("ChannelId")].isNull() && m_channel_id_isValid;

    m_cmaf_package_isValid = ::OpenAPI::fromJsonValue(m_cmaf_package, json[QString("CmafPackage")]);
    m_cmaf_package_isSet = !json[QString("CmafPackage")].isNull() && m_cmaf_package_isValid;

    m_dash_package_isValid = ::OpenAPI::fromJsonValue(m_dash_package, json[QString("DashPackage")]);
    m_dash_package_isSet = !json[QString("DashPackage")].isNull() && m_dash_package_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_hls_package_isValid = ::OpenAPI::fromJsonValue(m_hls_package, json[QString("HlsPackage")]);
    m_hls_package_isSet = !json[QString("HlsPackage")].isNull() && m_hls_package_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_manifest_name, json[QString("ManifestName")]);
    m_manifest_name_isSet = !json[QString("ManifestName")].isNull() && m_manifest_name_isValid;

    m_mss_package_isValid = ::OpenAPI::fromJsonValue(m_mss_package, json[QString("MssPackage")]);
    m_mss_package_isSet = !json[QString("MssPackage")].isNull() && m_mss_package_isValid;

    m_origination_isValid = ::OpenAPI::fromJsonValue(m_origination, json[QString("Origination")]);
    m_origination_isSet = !json[QString("Origination")].isNull() && m_origination_isValid;

    m_startover_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_startover_window_seconds, json[QString("StartoverWindowSeconds")]);
    m_startover_window_seconds_isSet = !json[QString("StartoverWindowSeconds")].isNull() && m_startover_window_seconds_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_time_delay_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_delay_seconds, json[QString("TimeDelaySeconds")]);
    m_time_delay_seconds_isSet = !json[QString("TimeDelaySeconds")].isNull() && m_time_delay_seconds_isValid;

    m_whitelist_isValid = ::OpenAPI::fromJsonValue(m_whitelist, json[QString("Whitelist")]);
    m_whitelist_isSet = !json[QString("Whitelist")].isNull() && m_whitelist_isValid;
}

QString OAICreateOriginEndpointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOriginEndpointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization.isSet()) {
        obj.insert(QString("Authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("ChannelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_cmaf_package.isSet()) {
        obj.insert(QString("CmafPackage"), ::OpenAPI::toJsonValue(m_cmaf_package));
    }
    if (m_dash_package.isSet()) {
        obj.insert(QString("DashPackage"), ::OpenAPI::toJsonValue(m_dash_package));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hls_package.isSet()) {
        obj.insert(QString("HlsPackage"), ::OpenAPI::toJsonValue(m_hls_package));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_manifest_name_isSet) {
        obj.insert(QString("ManifestName"), ::OpenAPI::toJsonValue(m_manifest_name));
    }
    if (m_mss_package.isSet()) {
        obj.insert(QString("MssPackage"), ::OpenAPI::toJsonValue(m_mss_package));
    }
    if (m_origination.isSet()) {
        obj.insert(QString("Origination"), ::OpenAPI::toJsonValue(m_origination));
    }
    if (m_startover_window_seconds_isSet) {
        obj.insert(QString("StartoverWindowSeconds"), ::OpenAPI::toJsonValue(m_startover_window_seconds));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_time_delay_seconds_isSet) {
        obj.insert(QString("TimeDelaySeconds"), ::OpenAPI::toJsonValue(m_time_delay_seconds));
    }
    if (m_whitelist.isSet()) {
        obj.insert(QString("Whitelist"), ::OpenAPI::toJsonValue(m_whitelist));
    }
    return obj;
}

OAICreateOriginEndpointResponse_Authorization OAICreateOriginEndpointRequest::getAuthorization() const {
    return m_authorization;
}
void OAICreateOriginEndpointRequest::setAuthorization(const OAICreateOriginEndpointResponse_Authorization &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAICreateOriginEndpointRequest::is_authorization_Valid() const{
    return m_authorization_isValid;
}

QString OAICreateOriginEndpointRequest::getChannelId() const {
    return m_channel_id;
}
void OAICreateOriginEndpointRequest::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAICreateOriginEndpointRequest::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

OAICreateOriginEndpointRequest_CmafPackage OAICreateOriginEndpointRequest::getCmafPackage() const {
    return m_cmaf_package;
}
void OAICreateOriginEndpointRequest::setCmafPackage(const OAICreateOriginEndpointRequest_CmafPackage &cmaf_package) {
    m_cmaf_package = cmaf_package;
    m_cmaf_package_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_cmaf_package_Set() const{
    return m_cmaf_package_isSet;
}

bool OAICreateOriginEndpointRequest::is_cmaf_package_Valid() const{
    return m_cmaf_package_isValid;
}

OAICreateOriginEndpointResponse_DashPackage OAICreateOriginEndpointRequest::getDashPackage() const {
    return m_dash_package;
}
void OAICreateOriginEndpointRequest::setDashPackage(const OAICreateOriginEndpointResponse_DashPackage &dash_package) {
    m_dash_package = dash_package;
    m_dash_package_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_dash_package_Set() const{
    return m_dash_package_isSet;
}

bool OAICreateOriginEndpointRequest::is_dash_package_Valid() const{
    return m_dash_package_isValid;
}

QString OAICreateOriginEndpointRequest::getDescription() const {
    return m_description;
}
void OAICreateOriginEndpointRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateOriginEndpointRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateOriginEndpointResponse_HlsPackage OAICreateOriginEndpointRequest::getHlsPackage() const {
    return m_hls_package;
}
void OAICreateOriginEndpointRequest::setHlsPackage(const OAICreateOriginEndpointResponse_HlsPackage &hls_package) {
    m_hls_package = hls_package;
    m_hls_package_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_hls_package_Set() const{
    return m_hls_package_isSet;
}

bool OAICreateOriginEndpointRequest::is_hls_package_Valid() const{
    return m_hls_package_isValid;
}

QString OAICreateOriginEndpointRequest::getId() const {
    return m_id;
}
void OAICreateOriginEndpointRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateOriginEndpointRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateOriginEndpointRequest::getManifestName() const {
    return m_manifest_name;
}
void OAICreateOriginEndpointRequest::setManifestName(const QString &manifest_name) {
    m_manifest_name = manifest_name;
    m_manifest_name_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_manifest_name_Set() const{
    return m_manifest_name_isSet;
}

bool OAICreateOriginEndpointRequest::is_manifest_name_Valid() const{
    return m_manifest_name_isValid;
}

OAICreateOriginEndpointResponse_MssPackage OAICreateOriginEndpointRequest::getMssPackage() const {
    return m_mss_package;
}
void OAICreateOriginEndpointRequest::setMssPackage(const OAICreateOriginEndpointResponse_MssPackage &mss_package) {
    m_mss_package = mss_package;
    m_mss_package_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_mss_package_Set() const{
    return m_mss_package_isSet;
}

bool OAICreateOriginEndpointRequest::is_mss_package_Valid() const{
    return m_mss_package_isValid;
}

OAIOrigination OAICreateOriginEndpointRequest::getOrigination() const {
    return m_origination;
}
void OAICreateOriginEndpointRequest::setOrigination(const OAIOrigination &origination) {
    m_origination = origination;
    m_origination_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_origination_Set() const{
    return m_origination_isSet;
}

bool OAICreateOriginEndpointRequest::is_origination_Valid() const{
    return m_origination_isValid;
}

qint32 OAICreateOriginEndpointRequest::getStartoverWindowSeconds() const {
    return m_startover_window_seconds;
}
void OAICreateOriginEndpointRequest::setStartoverWindowSeconds(const qint32 &startover_window_seconds) {
    m_startover_window_seconds = startover_window_seconds;
    m_startover_window_seconds_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_startover_window_seconds_Set() const{
    return m_startover_window_seconds_isSet;
}

bool OAICreateOriginEndpointRequest::is_startover_window_seconds_Valid() const{
    return m_startover_window_seconds_isValid;
}

QMap OAICreateOriginEndpointRequest::getTags() const {
    return m_tags;
}
void OAICreateOriginEndpointRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateOriginEndpointRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAICreateOriginEndpointRequest::getTimeDelaySeconds() const {
    return m_time_delay_seconds;
}
void OAICreateOriginEndpointRequest::setTimeDelaySeconds(const qint32 &time_delay_seconds) {
    m_time_delay_seconds = time_delay_seconds;
    m_time_delay_seconds_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_time_delay_seconds_Set() const{
    return m_time_delay_seconds_isSet;
}

bool OAICreateOriginEndpointRequest::is_time_delay_seconds_Valid() const{
    return m_time_delay_seconds_isValid;
}

QList OAICreateOriginEndpointRequest::getWhitelist() const {
    return m_whitelist;
}
void OAICreateOriginEndpointRequest::setWhitelist(const QList &whitelist) {
    m_whitelist = whitelist;
    m_whitelist_isSet = true;
}

bool OAICreateOriginEndpointRequest::is_whitelist_Set() const{
    return m_whitelist_isSet;
}

bool OAICreateOriginEndpointRequest::is_whitelist_Valid() const{
    return m_whitelist_isValid;
}

bool OAICreateOriginEndpointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cmaf_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dash_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mss_package.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_startover_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_delay_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelist.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOriginEndpointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
