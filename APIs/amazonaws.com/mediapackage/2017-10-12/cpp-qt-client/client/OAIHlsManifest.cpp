/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsManifest::OAIHlsManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsManifest::OAIHlsManifest() {
    this->initializeModel();
}

OAIHlsManifest::~OAIHlsManifest() {}

void OAIHlsManifest::initializeModel() {

    m_ad_markers_isSet = false;
    m_ad_markers_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_include_iframe_only_stream_isSet = false;
    m_include_iframe_only_stream_isValid = false;

    m_manifest_name_isSet = false;
    m_manifest_name_isValid = false;

    m_playlist_type_isSet = false;
    m_playlist_type_isValid = false;

    m_playlist_window_seconds_isSet = false;
    m_playlist_window_seconds_isValid = false;

    m_program_date_time_interval_seconds_isSet = false;
    m_program_date_time_interval_seconds_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_ad_triggers_isSet = false;
    m_ad_triggers_isValid = false;

    m_ads_on_delivery_restrictions_isSet = false;
    m_ads_on_delivery_restrictions_isValid = false;
}

void OAIHlsManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsManifest::fromJsonObject(QJsonObject json) {

    m_ad_markers_isValid = ::OpenAPI::fromJsonValue(m_ad_markers, json[QString("AdMarkers")]);
    m_ad_markers_isSet = !json[QString("AdMarkers")].isNull() && m_ad_markers_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_include_iframe_only_stream_isValid = ::OpenAPI::fromJsonValue(m_include_iframe_only_stream, json[QString("IncludeIframeOnlyStream")]);
    m_include_iframe_only_stream_isSet = !json[QString("IncludeIframeOnlyStream")].isNull() && m_include_iframe_only_stream_isValid;

    m_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_manifest_name, json[QString("ManifestName")]);
    m_manifest_name_isSet = !json[QString("ManifestName")].isNull() && m_manifest_name_isValid;

    m_playlist_type_isValid = ::OpenAPI::fromJsonValue(m_playlist_type, json[QString("PlaylistType")]);
    m_playlist_type_isSet = !json[QString("PlaylistType")].isNull() && m_playlist_type_isValid;

    m_playlist_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_playlist_window_seconds, json[QString("PlaylistWindowSeconds")]);
    m_playlist_window_seconds_isSet = !json[QString("PlaylistWindowSeconds")].isNull() && m_playlist_window_seconds_isValid;

    m_program_date_time_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_program_date_time_interval_seconds, json[QString("ProgramDateTimeIntervalSeconds")]);
    m_program_date_time_interval_seconds_isSet = !json[QString("ProgramDateTimeIntervalSeconds")].isNull() && m_program_date_time_interval_seconds_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_ad_triggers_isValid = ::OpenAPI::fromJsonValue(m_ad_triggers, json[QString("AdTriggers")]);
    m_ad_triggers_isSet = !json[QString("AdTriggers")].isNull() && m_ad_triggers_isValid;

    m_ads_on_delivery_restrictions_isValid = ::OpenAPI::fromJsonValue(m_ads_on_delivery_restrictions, json[QString("AdsOnDeliveryRestrictions")]);
    m_ads_on_delivery_restrictions_isSet = !json[QString("AdsOnDeliveryRestrictions")].isNull() && m_ads_on_delivery_restrictions_isValid;
}

QString OAIHlsManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_markers.isSet()) {
        obj.insert(QString("AdMarkers"), ::OpenAPI::toJsonValue(m_ad_markers));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_include_iframe_only_stream_isSet) {
        obj.insert(QString("IncludeIframeOnlyStream"), ::OpenAPI::toJsonValue(m_include_iframe_only_stream));
    }
    if (m_manifest_name_isSet) {
        obj.insert(QString("ManifestName"), ::OpenAPI::toJsonValue(m_manifest_name));
    }
    if (m_playlist_type.isSet()) {
        obj.insert(QString("PlaylistType"), ::OpenAPI::toJsonValue(m_playlist_type));
    }
    if (m_playlist_window_seconds_isSet) {
        obj.insert(QString("PlaylistWindowSeconds"), ::OpenAPI::toJsonValue(m_playlist_window_seconds));
    }
    if (m_program_date_time_interval_seconds_isSet) {
        obj.insert(QString("ProgramDateTimeIntervalSeconds"), ::OpenAPI::toJsonValue(m_program_date_time_interval_seconds));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_ad_triggers.isSet()) {
        obj.insert(QString("AdTriggers"), ::OpenAPI::toJsonValue(m_ad_triggers));
    }
    if (m_ads_on_delivery_restrictions.isSet()) {
        obj.insert(QString("AdsOnDeliveryRestrictions"), ::OpenAPI::toJsonValue(m_ads_on_delivery_restrictions));
    }
    return obj;
}

OAIAdMarkers OAIHlsManifest::getAdMarkers() const {
    return m_ad_markers;
}
void OAIHlsManifest::setAdMarkers(const OAIAdMarkers &ad_markers) {
    m_ad_markers = ad_markers;
    m_ad_markers_isSet = true;
}

bool OAIHlsManifest::is_ad_markers_Set() const{
    return m_ad_markers_isSet;
}

bool OAIHlsManifest::is_ad_markers_Valid() const{
    return m_ad_markers_isValid;
}

QString OAIHlsManifest::getId() const {
    return m_id;
}
void OAIHlsManifest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHlsManifest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHlsManifest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIHlsManifest::getIncludeIframeOnlyStream() const {
    return m_include_iframe_only_stream;
}
void OAIHlsManifest::setIncludeIframeOnlyStream(const bool &include_iframe_only_stream) {
    m_include_iframe_only_stream = include_iframe_only_stream;
    m_include_iframe_only_stream_isSet = true;
}

bool OAIHlsManifest::is_include_iframe_only_stream_Set() const{
    return m_include_iframe_only_stream_isSet;
}

bool OAIHlsManifest::is_include_iframe_only_stream_Valid() const{
    return m_include_iframe_only_stream_isValid;
}

QString OAIHlsManifest::getManifestName() const {
    return m_manifest_name;
}
void OAIHlsManifest::setManifestName(const QString &manifest_name) {
    m_manifest_name = manifest_name;
    m_manifest_name_isSet = true;
}

bool OAIHlsManifest::is_manifest_name_Set() const{
    return m_manifest_name_isSet;
}

bool OAIHlsManifest::is_manifest_name_Valid() const{
    return m_manifest_name_isValid;
}

OAIPlaylistType OAIHlsManifest::getPlaylistType() const {
    return m_playlist_type;
}
void OAIHlsManifest::setPlaylistType(const OAIPlaylistType &playlist_type) {
    m_playlist_type = playlist_type;
    m_playlist_type_isSet = true;
}

bool OAIHlsManifest::is_playlist_type_Set() const{
    return m_playlist_type_isSet;
}

bool OAIHlsManifest::is_playlist_type_Valid() const{
    return m_playlist_type_isValid;
}

qint32 OAIHlsManifest::getPlaylistWindowSeconds() const {
    return m_playlist_window_seconds;
}
void OAIHlsManifest::setPlaylistWindowSeconds(const qint32 &playlist_window_seconds) {
    m_playlist_window_seconds = playlist_window_seconds;
    m_playlist_window_seconds_isSet = true;
}

bool OAIHlsManifest::is_playlist_window_seconds_Set() const{
    return m_playlist_window_seconds_isSet;
}

bool OAIHlsManifest::is_playlist_window_seconds_Valid() const{
    return m_playlist_window_seconds_isValid;
}

qint32 OAIHlsManifest::getProgramDateTimeIntervalSeconds() const {
    return m_program_date_time_interval_seconds;
}
void OAIHlsManifest::setProgramDateTimeIntervalSeconds(const qint32 &program_date_time_interval_seconds) {
    m_program_date_time_interval_seconds = program_date_time_interval_seconds;
    m_program_date_time_interval_seconds_isSet = true;
}

bool OAIHlsManifest::is_program_date_time_interval_seconds_Set() const{
    return m_program_date_time_interval_seconds_isSet;
}

bool OAIHlsManifest::is_program_date_time_interval_seconds_Valid() const{
    return m_program_date_time_interval_seconds_isValid;
}

QString OAIHlsManifest::getUrl() const {
    return m_url;
}
void OAIHlsManifest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIHlsManifest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIHlsManifest::is_url_Valid() const{
    return m_url_isValid;
}

QList OAIHlsManifest::getAdTriggers() const {
    return m_ad_triggers;
}
void OAIHlsManifest::setAdTriggers(const QList &ad_triggers) {
    m_ad_triggers = ad_triggers;
    m_ad_triggers_isSet = true;
}

bool OAIHlsManifest::is_ad_triggers_Set() const{
    return m_ad_triggers_isSet;
}

bool OAIHlsManifest::is_ad_triggers_Valid() const{
    return m_ad_triggers_isValid;
}

OAIAdsOnDeliveryRestrictions OAIHlsManifest::getAdsOnDeliveryRestrictions() const {
    return m_ads_on_delivery_restrictions;
}
void OAIHlsManifest::setAdsOnDeliveryRestrictions(const OAIAdsOnDeliveryRestrictions &ads_on_delivery_restrictions) {
    m_ads_on_delivery_restrictions = ads_on_delivery_restrictions;
    m_ads_on_delivery_restrictions_isSet = true;
}

bool OAIHlsManifest::is_ads_on_delivery_restrictions_Set() const{
    return m_ads_on_delivery_restrictions_isSet;
}

bool OAIHlsManifest::is_ads_on_delivery_restrictions_Valid() const{
    return m_ads_on_delivery_restrictions_isValid;
}

bool OAIHlsManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_markers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_iframe_only_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_playlist_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_date_time_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ads_on_delivery_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
