/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI__AdTriggersElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI__AdTriggersElement::OAI__AdTriggersElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI__AdTriggersElement::OAI__AdTriggersElement() {
    this->initializeModel();
}

OAI__AdTriggersElement::~OAI__AdTriggersElement() {}

void OAI__AdTriggersElement::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAI__AdTriggersElement::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAI__AdTriggersElement::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SPLICE_INSERT", Qt::CaseInsensitive) == 0) {
        m_value = eOAI__AdTriggersElement::SPLICE_INSERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BREAK", Qt::CaseInsensitive) == 0) {
        m_value = eOAI__AdTriggersElement::BREAK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROVIDER_ADVERTISEMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAI__AdTriggersElement::PROVIDER_ADVERTISEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISTRIBUTOR_ADVERTISEMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAI__AdTriggersElement::DISTRIBUTOR_ADVERTISEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROVIDER_PLACEMENT_OPPORTUNITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAI__AdTriggersElement::PROVIDER_PLACEMENT_OPPORTUNITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISTRIBUTOR_PLACEMENT_OPPORTUNITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAI__AdTriggersElement::DISTRIBUTOR_PLACEMENT_OPPORTUNITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAI__AdTriggersElement::PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAI__AdTriggersElement::DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAI__AdTriggersElement::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAI__AdTriggersElement::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAI__AdTriggersElement::SPLICE_INSERT:
            val = "SPLICE_INSERT";
            break;
        case eOAI__AdTriggersElement::BREAK:
            val = "BREAK";
            break;
        case eOAI__AdTriggersElement::PROVIDER_ADVERTISEMENT:
            val = "PROVIDER_ADVERTISEMENT";
            break;
        case eOAI__AdTriggersElement::DISTRIBUTOR_ADVERTISEMENT:
            val = "DISTRIBUTOR_ADVERTISEMENT";
            break;
        case eOAI__AdTriggersElement::PROVIDER_PLACEMENT_OPPORTUNITY:
            val = "PROVIDER_PLACEMENT_OPPORTUNITY";
            break;
        case eOAI__AdTriggersElement::DISTRIBUTOR_PLACEMENT_OPPORTUNITY:
            val = "DISTRIBUTOR_PLACEMENT_OPPORTUNITY";
            break;
        case eOAI__AdTriggersElement::PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY:
            val = "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY";
            break;
        case eOAI__AdTriggersElement::DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY:
            val = "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAI__AdTriggersElement::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAI__AdTriggersElement::eOAI__AdTriggersElement OAI__AdTriggersElement::getValue() const {
    return m_value;
}

void OAI__AdTriggersElement::setValue(const OAI__AdTriggersElement::eOAI__AdTriggersElement& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAI__AdTriggersElement::isSet() const {
    
    return m_value_isSet;
}

bool OAI__AdTriggersElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
