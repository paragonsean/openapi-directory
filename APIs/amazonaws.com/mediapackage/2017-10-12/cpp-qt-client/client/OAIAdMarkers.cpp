/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdMarkers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdMarkers::OAIAdMarkers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdMarkers::OAIAdMarkers() {
    this->initializeModel();
}

OAIAdMarkers::~OAIAdMarkers() {}

void OAIAdMarkers::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAdMarkers::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAdMarkers::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdMarkers::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCTE35_ENHANCED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdMarkers::SCTE35_ENHANCED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PASSTHROUGH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdMarkers::PASSTHROUGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATERANGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAdMarkers::DATERANGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAdMarkers::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAdMarkers::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAdMarkers::NONE:
            val = "NONE";
            break;
        case eOAIAdMarkers::SCTE35_ENHANCED:
            val = "SCTE35_ENHANCED";
            break;
        case eOAIAdMarkers::PASSTHROUGH:
            val = "PASSTHROUGH";
            break;
        case eOAIAdMarkers::DATERANGE:
            val = "DATERANGE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAdMarkers::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAdMarkers::eOAIAdMarkers OAIAdMarkers::getValue() const {
    return m_value;
}

void OAIAdMarkers::setValue(const OAIAdMarkers::eOAIAdMarkers& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAdMarkers::isSet() const {
    
    return m_value_isSet;
}

bool OAIAdMarkers::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
