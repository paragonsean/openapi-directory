/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeHarvestJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeHarvestJobResponse::OAIDescribeHarvestJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeHarvestJobResponse::OAIDescribeHarvestJobResponse() {
    this->initializeModel();
}

OAIDescribeHarvestJobResponse::~OAIDescribeHarvestJobResponse() {}

void OAIDescribeHarvestJobResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_origin_endpoint_id_isSet = false;
    m_origin_endpoint_id_isValid = false;

    m_s3_destination_isSet = false;
    m_s3_destination_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeHarvestJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeHarvestJobResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("ChannelId")]);
    m_channel_id_isSet = !json[QString("ChannelId")].isNull() && m_channel_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_origin_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_origin_endpoint_id, json[QString("OriginEndpointId")]);
    m_origin_endpoint_id_isSet = !json[QString("OriginEndpointId")].isNull() && m_origin_endpoint_id_isValid;

    m_s3_destination_isValid = ::OpenAPI::fromJsonValue(m_s3_destination, json[QString("S3Destination")]);
    m_s3_destination_isSet = !json[QString("S3Destination")].isNull() && m_s3_destination_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeHarvestJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeHarvestJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("ChannelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_origin_endpoint_id_isSet) {
        obj.insert(QString("OriginEndpointId"), ::OpenAPI::toJsonValue(m_origin_endpoint_id));
    }
    if (m_s3_destination.isSet()) {
        obj.insert(QString("S3Destination"), ::OpenAPI::toJsonValue(m_s3_destination));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDescribeHarvestJobResponse::getArn() const {
    return m_arn;
}
void OAIDescribeHarvestJobResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeHarvestJobResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeHarvestJobResponse::getChannelId() const {
    return m_channel_id;
}
void OAIDescribeHarvestJobResponse::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIDescribeHarvestJobResponse::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIDescribeHarvestJobResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIDescribeHarvestJobResponse::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDescribeHarvestJobResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDescribeHarvestJobResponse::getEndTime() const {
    return m_end_time;
}
void OAIDescribeHarvestJobResponse::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeHarvestJobResponse::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIDescribeHarvestJobResponse::getId() const {
    return m_id;
}
void OAIDescribeHarvestJobResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescribeHarvestJobResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDescribeHarvestJobResponse::getOriginEndpointId() const {
    return m_origin_endpoint_id;
}
void OAIDescribeHarvestJobResponse::setOriginEndpointId(const QString &origin_endpoint_id) {
    m_origin_endpoint_id = origin_endpoint_id;
    m_origin_endpoint_id_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_origin_endpoint_id_Set() const{
    return m_origin_endpoint_id_isSet;
}

bool OAIDescribeHarvestJobResponse::is_origin_endpoint_id_Valid() const{
    return m_origin_endpoint_id_isValid;
}

OAICreateHarvestJobResponse_S3Destination OAIDescribeHarvestJobResponse::getS3Destination() const {
    return m_s3_destination;
}
void OAIDescribeHarvestJobResponse::setS3Destination(const OAICreateHarvestJobResponse_S3Destination &s3_destination) {
    m_s3_destination = s3_destination;
    m_s3_destination_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_s3_destination_Set() const{
    return m_s3_destination_isSet;
}

bool OAIDescribeHarvestJobResponse::is_s3_destination_Valid() const{
    return m_s3_destination_isValid;
}

QString OAIDescribeHarvestJobResponse::getStartTime() const {
    return m_start_time;
}
void OAIDescribeHarvestJobResponse::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeHarvestJobResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIStatus OAIDescribeHarvestJobResponse::getStatus() const {
    return m_status;
}
void OAIDescribeHarvestJobResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeHarvestJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeHarvestJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeHarvestJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeHarvestJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
