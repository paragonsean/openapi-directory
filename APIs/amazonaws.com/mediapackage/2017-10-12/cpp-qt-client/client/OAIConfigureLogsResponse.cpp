/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureLogsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureLogsResponse::OAIConfigureLogsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureLogsResponse::OAIConfigureLogsResponse() {
    this->initializeModel();
}

OAIConfigureLogsResponse::~OAIConfigureLogsResponse() {}

void OAIConfigureLogsResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_egress_access_logs_isSet = false;
    m_egress_access_logs_isValid = false;

    m_hls_ingest_isSet = false;
    m_hls_ingest_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ingress_access_logs_isSet = false;
    m_ingress_access_logs_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIConfigureLogsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureLogsResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_egress_access_logs_isValid = ::OpenAPI::fromJsonValue(m_egress_access_logs, json[QString("EgressAccessLogs")]);
    m_egress_access_logs_isSet = !json[QString("EgressAccessLogs")].isNull() && m_egress_access_logs_isValid;

    m_hls_ingest_isValid = ::OpenAPI::fromJsonValue(m_hls_ingest, json[QString("HlsIngest")]);
    m_hls_ingest_isSet = !json[QString("HlsIngest")].isNull() && m_hls_ingest_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_ingress_access_logs_isValid = ::OpenAPI::fromJsonValue(m_ingress_access_logs, json[QString("IngressAccessLogs")]);
    m_ingress_access_logs_isSet = !json[QString("IngressAccessLogs")].isNull() && m_ingress_access_logs_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIConfigureLogsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureLogsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_egress_access_logs.isSet()) {
        obj.insert(QString("EgressAccessLogs"), ::OpenAPI::toJsonValue(m_egress_access_logs));
    }
    if (m_hls_ingest.isSet()) {
        obj.insert(QString("HlsIngest"), ::OpenAPI::toJsonValue(m_hls_ingest));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ingress_access_logs.isSet()) {
        obj.insert(QString("IngressAccessLogs"), ::OpenAPI::toJsonValue(m_ingress_access_logs));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIConfigureLogsResponse::getArn() const {
    return m_arn;
}
void OAIConfigureLogsResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIConfigureLogsResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIConfigureLogsResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIConfigureLogsResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIConfigureLogsResponse::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIConfigureLogsResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIConfigureLogsResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIConfigureLogsResponse::getDescription() const {
    return m_description;
}
void OAIConfigureLogsResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConfigureLogsResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConfigureLogsResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIConfigureLogsResponse_EgressAccessLogs OAIConfigureLogsResponse::getEgressAccessLogs() const {
    return m_egress_access_logs;
}
void OAIConfigureLogsResponse::setEgressAccessLogs(const OAIConfigureLogsResponse_EgressAccessLogs &egress_access_logs) {
    m_egress_access_logs = egress_access_logs;
    m_egress_access_logs_isSet = true;
}

bool OAIConfigureLogsResponse::is_egress_access_logs_Set() const{
    return m_egress_access_logs_isSet;
}

bool OAIConfigureLogsResponse::is_egress_access_logs_Valid() const{
    return m_egress_access_logs_isValid;
}

OAIConfigureLogsResponse_HlsIngest OAIConfigureLogsResponse::getHlsIngest() const {
    return m_hls_ingest;
}
void OAIConfigureLogsResponse::setHlsIngest(const OAIConfigureLogsResponse_HlsIngest &hls_ingest) {
    m_hls_ingest = hls_ingest;
    m_hls_ingest_isSet = true;
}

bool OAIConfigureLogsResponse::is_hls_ingest_Set() const{
    return m_hls_ingest_isSet;
}

bool OAIConfigureLogsResponse::is_hls_ingest_Valid() const{
    return m_hls_ingest_isValid;
}

QString OAIConfigureLogsResponse::getId() const {
    return m_id;
}
void OAIConfigureLogsResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConfigureLogsResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConfigureLogsResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIConfigureLogsResponse_IngressAccessLogs OAIConfigureLogsResponse::getIngressAccessLogs() const {
    return m_ingress_access_logs;
}
void OAIConfigureLogsResponse::setIngressAccessLogs(const OAIConfigureLogsResponse_IngressAccessLogs &ingress_access_logs) {
    m_ingress_access_logs = ingress_access_logs;
    m_ingress_access_logs_isSet = true;
}

bool OAIConfigureLogsResponse::is_ingress_access_logs_Set() const{
    return m_ingress_access_logs_isSet;
}

bool OAIConfigureLogsResponse::is_ingress_access_logs_Valid() const{
    return m_ingress_access_logs_isValid;
}

QMap OAIConfigureLogsResponse::getTags() const {
    return m_tags;
}
void OAIConfigureLogsResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIConfigureLogsResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIConfigureLogsResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIConfigureLogsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_access_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_ingest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_access_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureLogsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
