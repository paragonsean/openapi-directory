/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOriginEndpoint_request_cmafPackage_StreamSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::OAICreateOriginEndpoint_request_cmafPackage_StreamSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::OAICreateOriginEndpoint_request_cmafPackage_StreamSelection() {
    this->initializeModel();
}

OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::~OAICreateOriginEndpoint_request_cmafPackage_StreamSelection() {}

void OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::initializeModel() {

    m_max_video_bits_per_second_isSet = false;
    m_max_video_bits_per_second_isValid = false;

    m_min_video_bits_per_second_isSet = false;
    m_min_video_bits_per_second_isValid = false;

    m_stream_order_isSet = false;
    m_stream_order_isValid = false;
}

void OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::fromJsonObject(QJsonObject json) {

    m_max_video_bits_per_second_isValid = ::OpenAPI::fromJsonValue(m_max_video_bits_per_second, json[QString("MaxVideoBitsPerSecond")]);
    m_max_video_bits_per_second_isSet = !json[QString("MaxVideoBitsPerSecond")].isNull() && m_max_video_bits_per_second_isValid;

    m_min_video_bits_per_second_isValid = ::OpenAPI::fromJsonValue(m_min_video_bits_per_second, json[QString("MinVideoBitsPerSecond")]);
    m_min_video_bits_per_second_isSet = !json[QString("MinVideoBitsPerSecond")].isNull() && m_min_video_bits_per_second_isValid;

    m_stream_order_isValid = ::OpenAPI::fromJsonValue(m_stream_order, json[QString("StreamOrder")]);
    m_stream_order_isSet = !json[QString("StreamOrder")].isNull() && m_stream_order_isValid;
}

QString OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::asJsonObject() const {
    QJsonObject obj;
    if (m_max_video_bits_per_second_isSet) {
        obj.insert(QString("MaxVideoBitsPerSecond"), ::OpenAPI::toJsonValue(m_max_video_bits_per_second));
    }
    if (m_min_video_bits_per_second_isSet) {
        obj.insert(QString("MinVideoBitsPerSecond"), ::OpenAPI::toJsonValue(m_min_video_bits_per_second));
    }
    if (m_stream_order.isSet()) {
        obj.insert(QString("StreamOrder"), ::OpenAPI::toJsonValue(m_stream_order));
    }
    return obj;
}

qint32 OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::getMaxVideoBitsPerSecond() const {
    return m_max_video_bits_per_second;
}
void OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::setMaxVideoBitsPerSecond(const qint32 &max_video_bits_per_second) {
    m_max_video_bits_per_second = max_video_bits_per_second;
    m_max_video_bits_per_second_isSet = true;
}

bool OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::is_max_video_bits_per_second_Set() const{
    return m_max_video_bits_per_second_isSet;
}

bool OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::is_max_video_bits_per_second_Valid() const{
    return m_max_video_bits_per_second_isValid;
}

qint32 OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::getMinVideoBitsPerSecond() const {
    return m_min_video_bits_per_second;
}
void OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::setMinVideoBitsPerSecond(const qint32 &min_video_bits_per_second) {
    m_min_video_bits_per_second = min_video_bits_per_second;
    m_min_video_bits_per_second_isSet = true;
}

bool OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::is_min_video_bits_per_second_Set() const{
    return m_min_video_bits_per_second_isSet;
}

bool OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::is_min_video_bits_per_second_Valid() const{
    return m_min_video_bits_per_second_isValid;
}

OAIStreamOrder OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::getStreamOrder() const {
    return m_stream_order;
}
void OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::setStreamOrder(const OAIStreamOrder &stream_order) {
    m_stream_order = stream_order;
    m_stream_order_isSet = true;
}

bool OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::is_stream_order_Set() const{
    return m_stream_order_isSet;
}

bool OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::is_stream_order_Valid() const{
    return m_stream_order_isValid;
}

bool OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_video_bits_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_video_bits_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOriginEndpoint_request_cmafPackage_StreamSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
