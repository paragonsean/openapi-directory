/**
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOriginEndpoint_request_dashPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOriginEndpoint_request_dashPackage::OAICreateOriginEndpoint_request_dashPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOriginEndpoint_request_dashPackage::OAICreateOriginEndpoint_request_dashPackage() {
    this->initializeModel();
}

OAICreateOriginEndpoint_request_dashPackage::~OAICreateOriginEndpoint_request_dashPackage() {}

void OAICreateOriginEndpoint_request_dashPackage::initializeModel() {

    m_ad_triggers_isSet = false;
    m_ad_triggers_isValid = false;

    m_ads_on_delivery_restrictions_isSet = false;
    m_ads_on_delivery_restrictions_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_include_iframe_only_stream_isSet = false;
    m_include_iframe_only_stream_isValid = false;

    m_manifest_layout_isSet = false;
    m_manifest_layout_isValid = false;

    m_manifest_window_seconds_isSet = false;
    m_manifest_window_seconds_isValid = false;

    m_min_buffer_time_seconds_isSet = false;
    m_min_buffer_time_seconds_isValid = false;

    m_min_update_period_seconds_isSet = false;
    m_min_update_period_seconds_isValid = false;

    m_period_triggers_isSet = false;
    m_period_triggers_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_segment_duration_seconds_isSet = false;
    m_segment_duration_seconds_isValid = false;

    m_segment_template_format_isSet = false;
    m_segment_template_format_isValid = false;

    m_stream_selection_isSet = false;
    m_stream_selection_isValid = false;

    m_suggested_presentation_delay_seconds_isSet = false;
    m_suggested_presentation_delay_seconds_isValid = false;

    m_utc_timing_isSet = false;
    m_utc_timing_isValid = false;

    m_utc_timing_uri_isSet = false;
    m_utc_timing_uri_isValid = false;
}

void OAICreateOriginEndpoint_request_dashPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOriginEndpoint_request_dashPackage::fromJsonObject(QJsonObject json) {

    m_ad_triggers_isValid = ::OpenAPI::fromJsonValue(m_ad_triggers, json[QString("AdTriggers")]);
    m_ad_triggers_isSet = !json[QString("AdTriggers")].isNull() && m_ad_triggers_isValid;

    m_ads_on_delivery_restrictions_isValid = ::OpenAPI::fromJsonValue(m_ads_on_delivery_restrictions, json[QString("AdsOnDeliveryRestrictions")]);
    m_ads_on_delivery_restrictions_isSet = !json[QString("AdsOnDeliveryRestrictions")].isNull() && m_ads_on_delivery_restrictions_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_include_iframe_only_stream_isValid = ::OpenAPI::fromJsonValue(m_include_iframe_only_stream, json[QString("IncludeIframeOnlyStream")]);
    m_include_iframe_only_stream_isSet = !json[QString("IncludeIframeOnlyStream")].isNull() && m_include_iframe_only_stream_isValid;

    m_manifest_layout_isValid = ::OpenAPI::fromJsonValue(m_manifest_layout, json[QString("ManifestLayout")]);
    m_manifest_layout_isSet = !json[QString("ManifestLayout")].isNull() && m_manifest_layout_isValid;

    m_manifest_window_seconds_isValid = ::OpenAPI::fromJsonValue(m_manifest_window_seconds, json[QString("ManifestWindowSeconds")]);
    m_manifest_window_seconds_isSet = !json[QString("ManifestWindowSeconds")].isNull() && m_manifest_window_seconds_isValid;

    m_min_buffer_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_min_buffer_time_seconds, json[QString("MinBufferTimeSeconds")]);
    m_min_buffer_time_seconds_isSet = !json[QString("MinBufferTimeSeconds")].isNull() && m_min_buffer_time_seconds_isValid;

    m_min_update_period_seconds_isValid = ::OpenAPI::fromJsonValue(m_min_update_period_seconds, json[QString("MinUpdatePeriodSeconds")]);
    m_min_update_period_seconds_isSet = !json[QString("MinUpdatePeriodSeconds")].isNull() && m_min_update_period_seconds_isValid;

    m_period_triggers_isValid = ::OpenAPI::fromJsonValue(m_period_triggers, json[QString("PeriodTriggers")]);
    m_period_triggers_isSet = !json[QString("PeriodTriggers")].isNull() && m_period_triggers_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("Profile")]);
    m_profile_isSet = !json[QString("Profile")].isNull() && m_profile_isValid;

    m_segment_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_segment_duration_seconds, json[QString("SegmentDurationSeconds")]);
    m_segment_duration_seconds_isSet = !json[QString("SegmentDurationSeconds")].isNull() && m_segment_duration_seconds_isValid;

    m_segment_template_format_isValid = ::OpenAPI::fromJsonValue(m_segment_template_format, json[QString("SegmentTemplateFormat")]);
    m_segment_template_format_isSet = !json[QString("SegmentTemplateFormat")].isNull() && m_segment_template_format_isValid;

    m_stream_selection_isValid = ::OpenAPI::fromJsonValue(m_stream_selection, json[QString("StreamSelection")]);
    m_stream_selection_isSet = !json[QString("StreamSelection")].isNull() && m_stream_selection_isValid;

    m_suggested_presentation_delay_seconds_isValid = ::OpenAPI::fromJsonValue(m_suggested_presentation_delay_seconds, json[QString("SuggestedPresentationDelaySeconds")]);
    m_suggested_presentation_delay_seconds_isSet = !json[QString("SuggestedPresentationDelaySeconds")].isNull() && m_suggested_presentation_delay_seconds_isValid;

    m_utc_timing_isValid = ::OpenAPI::fromJsonValue(m_utc_timing, json[QString("UtcTiming")]);
    m_utc_timing_isSet = !json[QString("UtcTiming")].isNull() && m_utc_timing_isValid;

    m_utc_timing_uri_isValid = ::OpenAPI::fromJsonValue(m_utc_timing_uri, json[QString("UtcTimingUri")]);
    m_utc_timing_uri_isSet = !json[QString("UtcTimingUri")].isNull() && m_utc_timing_uri_isValid;
}

QString OAICreateOriginEndpoint_request_dashPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOriginEndpoint_request_dashPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_triggers.isSet()) {
        obj.insert(QString("AdTriggers"), ::OpenAPI::toJsonValue(m_ad_triggers));
    }
    if (m_ads_on_delivery_restrictions.isSet()) {
        obj.insert(QString("AdsOnDeliveryRestrictions"), ::OpenAPI::toJsonValue(m_ads_on_delivery_restrictions));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_include_iframe_only_stream_isSet) {
        obj.insert(QString("IncludeIframeOnlyStream"), ::OpenAPI::toJsonValue(m_include_iframe_only_stream));
    }
    if (m_manifest_layout.isSet()) {
        obj.insert(QString("ManifestLayout"), ::OpenAPI::toJsonValue(m_manifest_layout));
    }
    if (m_manifest_window_seconds_isSet) {
        obj.insert(QString("ManifestWindowSeconds"), ::OpenAPI::toJsonValue(m_manifest_window_seconds));
    }
    if (m_min_buffer_time_seconds_isSet) {
        obj.insert(QString("MinBufferTimeSeconds"), ::OpenAPI::toJsonValue(m_min_buffer_time_seconds));
    }
    if (m_min_update_period_seconds_isSet) {
        obj.insert(QString("MinUpdatePeriodSeconds"), ::OpenAPI::toJsonValue(m_min_update_period_seconds));
    }
    if (m_period_triggers.isSet()) {
        obj.insert(QString("PeriodTriggers"), ::OpenAPI::toJsonValue(m_period_triggers));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("Profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_segment_duration_seconds_isSet) {
        obj.insert(QString("SegmentDurationSeconds"), ::OpenAPI::toJsonValue(m_segment_duration_seconds));
    }
    if (m_segment_template_format.isSet()) {
        obj.insert(QString("SegmentTemplateFormat"), ::OpenAPI::toJsonValue(m_segment_template_format));
    }
    if (m_stream_selection.isSet()) {
        obj.insert(QString("StreamSelection"), ::OpenAPI::toJsonValue(m_stream_selection));
    }
    if (m_suggested_presentation_delay_seconds_isSet) {
        obj.insert(QString("SuggestedPresentationDelaySeconds"), ::OpenAPI::toJsonValue(m_suggested_presentation_delay_seconds));
    }
    if (m_utc_timing.isSet()) {
        obj.insert(QString("UtcTiming"), ::OpenAPI::toJsonValue(m_utc_timing));
    }
    if (m_utc_timing_uri_isSet) {
        obj.insert(QString("UtcTimingUri"), ::OpenAPI::toJsonValue(m_utc_timing_uri));
    }
    return obj;
}

QList OAICreateOriginEndpoint_request_dashPackage::getAdTriggers() const {
    return m_ad_triggers;
}
void OAICreateOriginEndpoint_request_dashPackage::setAdTriggers(const QList &ad_triggers) {
    m_ad_triggers = ad_triggers;
    m_ad_triggers_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_ad_triggers_Set() const{
    return m_ad_triggers_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_ad_triggers_Valid() const{
    return m_ad_triggers_isValid;
}

OAIAdsOnDeliveryRestrictions OAICreateOriginEndpoint_request_dashPackage::getAdsOnDeliveryRestrictions() const {
    return m_ads_on_delivery_restrictions;
}
void OAICreateOriginEndpoint_request_dashPackage::setAdsOnDeliveryRestrictions(const OAIAdsOnDeliveryRestrictions &ads_on_delivery_restrictions) {
    m_ads_on_delivery_restrictions = ads_on_delivery_restrictions;
    m_ads_on_delivery_restrictions_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_ads_on_delivery_restrictions_Set() const{
    return m_ads_on_delivery_restrictions_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_ads_on_delivery_restrictions_Valid() const{
    return m_ads_on_delivery_restrictions_isValid;
}

OAICreateOriginEndpoint_request_dashPackage_Encryption OAICreateOriginEndpoint_request_dashPackage::getEncryption() const {
    return m_encryption;
}
void OAICreateOriginEndpoint_request_dashPackage::setEncryption(const OAICreateOriginEndpoint_request_dashPackage_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_encryption_Valid() const{
    return m_encryption_isValid;
}

bool OAICreateOriginEndpoint_request_dashPackage::getIncludeIframeOnlyStream() const {
    return m_include_iframe_only_stream;
}
void OAICreateOriginEndpoint_request_dashPackage::setIncludeIframeOnlyStream(const bool &include_iframe_only_stream) {
    m_include_iframe_only_stream = include_iframe_only_stream;
    m_include_iframe_only_stream_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_include_iframe_only_stream_Set() const{
    return m_include_iframe_only_stream_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_include_iframe_only_stream_Valid() const{
    return m_include_iframe_only_stream_isValid;
}

OAIManifestLayout OAICreateOriginEndpoint_request_dashPackage::getManifestLayout() const {
    return m_manifest_layout;
}
void OAICreateOriginEndpoint_request_dashPackage::setManifestLayout(const OAIManifestLayout &manifest_layout) {
    m_manifest_layout = manifest_layout;
    m_manifest_layout_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_manifest_layout_Set() const{
    return m_manifest_layout_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_manifest_layout_Valid() const{
    return m_manifest_layout_isValid;
}

qint32 OAICreateOriginEndpoint_request_dashPackage::getManifestWindowSeconds() const {
    return m_manifest_window_seconds;
}
void OAICreateOriginEndpoint_request_dashPackage::setManifestWindowSeconds(const qint32 &manifest_window_seconds) {
    m_manifest_window_seconds = manifest_window_seconds;
    m_manifest_window_seconds_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_manifest_window_seconds_Set() const{
    return m_manifest_window_seconds_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_manifest_window_seconds_Valid() const{
    return m_manifest_window_seconds_isValid;
}

qint32 OAICreateOriginEndpoint_request_dashPackage::getMinBufferTimeSeconds() const {
    return m_min_buffer_time_seconds;
}
void OAICreateOriginEndpoint_request_dashPackage::setMinBufferTimeSeconds(const qint32 &min_buffer_time_seconds) {
    m_min_buffer_time_seconds = min_buffer_time_seconds;
    m_min_buffer_time_seconds_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_min_buffer_time_seconds_Set() const{
    return m_min_buffer_time_seconds_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_min_buffer_time_seconds_Valid() const{
    return m_min_buffer_time_seconds_isValid;
}

qint32 OAICreateOriginEndpoint_request_dashPackage::getMinUpdatePeriodSeconds() const {
    return m_min_update_period_seconds;
}
void OAICreateOriginEndpoint_request_dashPackage::setMinUpdatePeriodSeconds(const qint32 &min_update_period_seconds) {
    m_min_update_period_seconds = min_update_period_seconds;
    m_min_update_period_seconds_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_min_update_period_seconds_Set() const{
    return m_min_update_period_seconds_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_min_update_period_seconds_Valid() const{
    return m_min_update_period_seconds_isValid;
}

QList OAICreateOriginEndpoint_request_dashPackage::getPeriodTriggers() const {
    return m_period_triggers;
}
void OAICreateOriginEndpoint_request_dashPackage::setPeriodTriggers(const QList &period_triggers) {
    m_period_triggers = period_triggers;
    m_period_triggers_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_period_triggers_Set() const{
    return m_period_triggers_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_period_triggers_Valid() const{
    return m_period_triggers_isValid;
}

OAIProfile OAICreateOriginEndpoint_request_dashPackage::getProfile() const {
    return m_profile;
}
void OAICreateOriginEndpoint_request_dashPackage::setProfile(const OAIProfile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_profile_Valid() const{
    return m_profile_isValid;
}

qint32 OAICreateOriginEndpoint_request_dashPackage::getSegmentDurationSeconds() const {
    return m_segment_duration_seconds;
}
void OAICreateOriginEndpoint_request_dashPackage::setSegmentDurationSeconds(const qint32 &segment_duration_seconds) {
    m_segment_duration_seconds = segment_duration_seconds;
    m_segment_duration_seconds_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_segment_duration_seconds_Set() const{
    return m_segment_duration_seconds_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_segment_duration_seconds_Valid() const{
    return m_segment_duration_seconds_isValid;
}

OAISegmentTemplateFormat OAICreateOriginEndpoint_request_dashPackage::getSegmentTemplateFormat() const {
    return m_segment_template_format;
}
void OAICreateOriginEndpoint_request_dashPackage::setSegmentTemplateFormat(const OAISegmentTemplateFormat &segment_template_format) {
    m_segment_template_format = segment_template_format;
    m_segment_template_format_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_segment_template_format_Set() const{
    return m_segment_template_format_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_segment_template_format_Valid() const{
    return m_segment_template_format_isValid;
}

OAICreateOriginEndpoint_request_cmafPackage_StreamSelection OAICreateOriginEndpoint_request_dashPackage::getStreamSelection() const {
    return m_stream_selection;
}
void OAICreateOriginEndpoint_request_dashPackage::setStreamSelection(const OAICreateOriginEndpoint_request_cmafPackage_StreamSelection &stream_selection) {
    m_stream_selection = stream_selection;
    m_stream_selection_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_stream_selection_Set() const{
    return m_stream_selection_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_stream_selection_Valid() const{
    return m_stream_selection_isValid;
}

qint32 OAICreateOriginEndpoint_request_dashPackage::getSuggestedPresentationDelaySeconds() const {
    return m_suggested_presentation_delay_seconds;
}
void OAICreateOriginEndpoint_request_dashPackage::setSuggestedPresentationDelaySeconds(const qint32 &suggested_presentation_delay_seconds) {
    m_suggested_presentation_delay_seconds = suggested_presentation_delay_seconds;
    m_suggested_presentation_delay_seconds_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_suggested_presentation_delay_seconds_Set() const{
    return m_suggested_presentation_delay_seconds_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_suggested_presentation_delay_seconds_Valid() const{
    return m_suggested_presentation_delay_seconds_isValid;
}

OAIUtcTiming OAICreateOriginEndpoint_request_dashPackage::getUtcTiming() const {
    return m_utc_timing;
}
void OAICreateOriginEndpoint_request_dashPackage::setUtcTiming(const OAIUtcTiming &utc_timing) {
    m_utc_timing = utc_timing;
    m_utc_timing_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_utc_timing_Set() const{
    return m_utc_timing_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_utc_timing_Valid() const{
    return m_utc_timing_isValid;
}

QString OAICreateOriginEndpoint_request_dashPackage::getUtcTimingUri() const {
    return m_utc_timing_uri;
}
void OAICreateOriginEndpoint_request_dashPackage::setUtcTimingUri(const QString &utc_timing_uri) {
    m_utc_timing_uri = utc_timing_uri;
    m_utc_timing_uri_isSet = true;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_utc_timing_uri_Set() const{
    return m_utc_timing_uri_isSet;
}

bool OAICreateOriginEndpoint_request_dashPackage::is_utc_timing_uri_Valid() const{
    return m_utc_timing_uri_isValid;
}

bool OAICreateOriginEndpoint_request_dashPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ads_on_delivery_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_iframe_only_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_window_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_buffer_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_update_period_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_template_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_presentation_delay_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_timing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_timing_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOriginEndpoint_request_dashPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
