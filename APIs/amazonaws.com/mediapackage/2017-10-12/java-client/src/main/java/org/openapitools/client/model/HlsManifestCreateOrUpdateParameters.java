/*
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdMarkers;
import org.openapitools.client.model.AdsOnDeliveryRestrictions;
import org.openapitools.client.model.PlaylistType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A HTTP Live Streaming (HLS) manifest configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:13.054796-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsManifestCreateOrUpdateParameters {
  public static final String SERIALIZED_NAME_AD_MARKERS = "AdMarkers";
  @SerializedName(SERIALIZED_NAME_AD_MARKERS)
  private AdMarkers adMarkers;

  public static final String SERIALIZED_NAME_AD_TRIGGERS = "AdTriggers";
  @SerializedName(SERIALIZED_NAME_AD_TRIGGERS)
  private List adTriggers;

  public static final String SERIALIZED_NAME_ADS_ON_DELIVERY_RESTRICTIONS = "AdsOnDeliveryRestrictions";
  @SerializedName(SERIALIZED_NAME_ADS_ON_DELIVERY_RESTRICTIONS)
  private AdsOnDeliveryRestrictions adsOnDeliveryRestrictions;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INCLUDE_IFRAME_ONLY_STREAM = "IncludeIframeOnlyStream";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IFRAME_ONLY_STREAM)
  private Boolean includeIframeOnlyStream;

  public static final String SERIALIZED_NAME_MANIFEST_NAME = "ManifestName";
  @SerializedName(SERIALIZED_NAME_MANIFEST_NAME)
  private String manifestName;

  public static final String SERIALIZED_NAME_PLAYLIST_TYPE = "PlaylistType";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_TYPE)
  private PlaylistType playlistType;

  public static final String SERIALIZED_NAME_PLAYLIST_WINDOW_SECONDS = "PlaylistWindowSeconds";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_WINDOW_SECONDS)
  private Integer playlistWindowSeconds;

  public static final String SERIALIZED_NAME_PROGRAM_DATE_TIME_INTERVAL_SECONDS = "ProgramDateTimeIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_PROGRAM_DATE_TIME_INTERVAL_SECONDS)
  private Integer programDateTimeIntervalSeconds;

  public HlsManifestCreateOrUpdateParameters() {
  }

  public HlsManifestCreateOrUpdateParameters adMarkers(AdMarkers adMarkers) {
    this.adMarkers = adMarkers;
    return this;
  }

  /**
   * Get adMarkers
   * @return adMarkers
   */
  @javax.annotation.Nullable
  public AdMarkers getAdMarkers() {
    return adMarkers;
  }

  public void setAdMarkers(AdMarkers adMarkers) {
    this.adMarkers = adMarkers;
  }


  public HlsManifestCreateOrUpdateParameters adTriggers(List adTriggers) {
    this.adTriggers = adTriggers;
    return this;
  }

  /**
   * Get adTriggers
   * @return adTriggers
   */
  @javax.annotation.Nullable
  public List getAdTriggers() {
    return adTriggers;
  }

  public void setAdTriggers(List adTriggers) {
    this.adTriggers = adTriggers;
  }


  public HlsManifestCreateOrUpdateParameters adsOnDeliveryRestrictions(AdsOnDeliveryRestrictions adsOnDeliveryRestrictions) {
    this.adsOnDeliveryRestrictions = adsOnDeliveryRestrictions;
    return this;
  }

  /**
   * Get adsOnDeliveryRestrictions
   * @return adsOnDeliveryRestrictions
   */
  @javax.annotation.Nullable
  public AdsOnDeliveryRestrictions getAdsOnDeliveryRestrictions() {
    return adsOnDeliveryRestrictions;
  }

  public void setAdsOnDeliveryRestrictions(AdsOnDeliveryRestrictions adsOnDeliveryRestrictions) {
    this.adsOnDeliveryRestrictions = adsOnDeliveryRestrictions;
  }


  public HlsManifestCreateOrUpdateParameters id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public HlsManifestCreateOrUpdateParameters includeIframeOnlyStream(Boolean includeIframeOnlyStream) {
    this.includeIframeOnlyStream = includeIframeOnlyStream;
    return this;
  }

  /**
   * Get includeIframeOnlyStream
   * @return includeIframeOnlyStream
   */
  @javax.annotation.Nullable
  public Boolean getIncludeIframeOnlyStream() {
    return includeIframeOnlyStream;
  }

  public void setIncludeIframeOnlyStream(Boolean includeIframeOnlyStream) {
    this.includeIframeOnlyStream = includeIframeOnlyStream;
  }


  public HlsManifestCreateOrUpdateParameters manifestName(String manifestName) {
    this.manifestName = manifestName;
    return this;
  }

  /**
   * Get manifestName
   * @return manifestName
   */
  @javax.annotation.Nullable
  public String getManifestName() {
    return manifestName;
  }

  public void setManifestName(String manifestName) {
    this.manifestName = manifestName;
  }


  public HlsManifestCreateOrUpdateParameters playlistType(PlaylistType playlistType) {
    this.playlistType = playlistType;
    return this;
  }

  /**
   * Get playlistType
   * @return playlistType
   */
  @javax.annotation.Nullable
  public PlaylistType getPlaylistType() {
    return playlistType;
  }

  public void setPlaylistType(PlaylistType playlistType) {
    this.playlistType = playlistType;
  }


  public HlsManifestCreateOrUpdateParameters playlistWindowSeconds(Integer playlistWindowSeconds) {
    this.playlistWindowSeconds = playlistWindowSeconds;
    return this;
  }

  /**
   * Get playlistWindowSeconds
   * @return playlistWindowSeconds
   */
  @javax.annotation.Nullable
  public Integer getPlaylistWindowSeconds() {
    return playlistWindowSeconds;
  }

  public void setPlaylistWindowSeconds(Integer playlistWindowSeconds) {
    this.playlistWindowSeconds = playlistWindowSeconds;
  }


  public HlsManifestCreateOrUpdateParameters programDateTimeIntervalSeconds(Integer programDateTimeIntervalSeconds) {
    this.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds;
    return this;
  }

  /**
   * Get programDateTimeIntervalSeconds
   * @return programDateTimeIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getProgramDateTimeIntervalSeconds() {
    return programDateTimeIntervalSeconds;
  }

  public void setProgramDateTimeIntervalSeconds(Integer programDateTimeIntervalSeconds) {
    this.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsManifestCreateOrUpdateParameters hlsManifestCreateOrUpdateParameters = (HlsManifestCreateOrUpdateParameters) o;
    return Objects.equals(this.adMarkers, hlsManifestCreateOrUpdateParameters.adMarkers) &&
        Objects.equals(this.adTriggers, hlsManifestCreateOrUpdateParameters.adTriggers) &&
        Objects.equals(this.adsOnDeliveryRestrictions, hlsManifestCreateOrUpdateParameters.adsOnDeliveryRestrictions) &&
        Objects.equals(this.id, hlsManifestCreateOrUpdateParameters.id) &&
        Objects.equals(this.includeIframeOnlyStream, hlsManifestCreateOrUpdateParameters.includeIframeOnlyStream) &&
        Objects.equals(this.manifestName, hlsManifestCreateOrUpdateParameters.manifestName) &&
        Objects.equals(this.playlistType, hlsManifestCreateOrUpdateParameters.playlistType) &&
        Objects.equals(this.playlistWindowSeconds, hlsManifestCreateOrUpdateParameters.playlistWindowSeconds) &&
        Objects.equals(this.programDateTimeIntervalSeconds, hlsManifestCreateOrUpdateParameters.programDateTimeIntervalSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adMarkers, adTriggers, adsOnDeliveryRestrictions, id, includeIframeOnlyStream, manifestName, playlistType, playlistWindowSeconds, programDateTimeIntervalSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsManifestCreateOrUpdateParameters {\n");
    sb.append("    adMarkers: ").append(toIndentedString(adMarkers)).append("\n");
    sb.append("    adTriggers: ").append(toIndentedString(adTriggers)).append("\n");
    sb.append("    adsOnDeliveryRestrictions: ").append(toIndentedString(adsOnDeliveryRestrictions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    includeIframeOnlyStream: ").append(toIndentedString(includeIframeOnlyStream)).append("\n");
    sb.append("    manifestName: ").append(toIndentedString(manifestName)).append("\n");
    sb.append("    playlistType: ").append(toIndentedString(playlistType)).append("\n");
    sb.append("    playlistWindowSeconds: ").append(toIndentedString(playlistWindowSeconds)).append("\n");
    sb.append("    programDateTimeIntervalSeconds: ").append(toIndentedString(programDateTimeIntervalSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdMarkers");
    openapiFields.add("AdTriggers");
    openapiFields.add("AdsOnDeliveryRestrictions");
    openapiFields.add("Id");
    openapiFields.add("IncludeIframeOnlyStream");
    openapiFields.add("ManifestName");
    openapiFields.add("PlaylistType");
    openapiFields.add("PlaylistWindowSeconds");
    openapiFields.add("ProgramDateTimeIntervalSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsManifestCreateOrUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsManifestCreateOrUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsManifestCreateOrUpdateParameters is not found in the empty JSON string", HlsManifestCreateOrUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsManifestCreateOrUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsManifestCreateOrUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HlsManifestCreateOrUpdateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdMarkers`
      if (jsonObj.get("AdMarkers") != null && !jsonObj.get("AdMarkers").isJsonNull()) {
        AdMarkers.validateJsonElement(jsonObj.get("AdMarkers"));
      }
      // validate the optional field `AdTriggers`
      if (jsonObj.get("AdTriggers") != null && !jsonObj.get("AdTriggers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdTriggers"));
      }
      // validate the optional field `AdsOnDeliveryRestrictions`
      if (jsonObj.get("AdsOnDeliveryRestrictions") != null && !jsonObj.get("AdsOnDeliveryRestrictions").isJsonNull()) {
        AdsOnDeliveryRestrictions.validateJsonElement(jsonObj.get("AdsOnDeliveryRestrictions"));
      }
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `IncludeIframeOnlyStream`
      if (jsonObj.get("IncludeIframeOnlyStream") != null && !jsonObj.get("IncludeIframeOnlyStream").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeIframeOnlyStream"));
      }
      // validate the optional field `ManifestName`
      if (jsonObj.get("ManifestName") != null && !jsonObj.get("ManifestName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ManifestName"));
      }
      // validate the optional field `PlaylistType`
      if (jsonObj.get("PlaylistType") != null && !jsonObj.get("PlaylistType").isJsonNull()) {
        PlaylistType.validateJsonElement(jsonObj.get("PlaylistType"));
      }
      // validate the optional field `PlaylistWindowSeconds`
      if (jsonObj.get("PlaylistWindowSeconds") != null && !jsonObj.get("PlaylistWindowSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PlaylistWindowSeconds"));
      }
      // validate the optional field `ProgramDateTimeIntervalSeconds`
      if (jsonObj.get("ProgramDateTimeIntervalSeconds") != null && !jsonObj.get("ProgramDateTimeIntervalSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgramDateTimeIntervalSeconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsManifestCreateOrUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsManifestCreateOrUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsManifestCreateOrUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsManifestCreateOrUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsManifestCreateOrUpdateParameters>() {
           @Override
           public void write(JsonWriter out, HlsManifestCreateOrUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsManifestCreateOrUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsManifestCreateOrUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsManifestCreateOrUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to HlsManifestCreateOrUpdateParameters
   */
  public static HlsManifestCreateOrUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsManifestCreateOrUpdateParameters.class);
  }

  /**
   * Convert an instance of HlsManifestCreateOrUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

