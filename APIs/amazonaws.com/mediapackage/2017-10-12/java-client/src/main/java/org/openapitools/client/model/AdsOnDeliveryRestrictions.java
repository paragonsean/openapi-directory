/*
 * AWS Elemental MediaPackage
 * AWS Elemental MediaPackage
 *
 * The version of the OpenAPI document: 2017-10-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \&quot;NONE\&quot; means no SCTE-35 messages become ads.  Choosing \&quot;RESTRICTED\&quot; means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \&quot;UNRESTRICTED\&quot; means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \&quot;BOTH\&quot; means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers. 
 */
@JsonAdapter(AdsOnDeliveryRestrictions.Adapter.class)
public enum AdsOnDeliveryRestrictions {
  
  NONE("NONE"),
  
  RESTRICTED("RESTRICTED"),
  
  UNRESTRICTED("UNRESTRICTED"),
  
  BOTH("BOTH");

  private String value;

  AdsOnDeliveryRestrictions(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AdsOnDeliveryRestrictions fromValue(String value) {
    for (AdsOnDeliveryRestrictions b : AdsOnDeliveryRestrictions.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AdsOnDeliveryRestrictions> {
    @Override
    public void write(final JsonWriter jsonWriter, final AdsOnDeliveryRestrictions enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AdsOnDeliveryRestrictions read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AdsOnDeliveryRestrictions.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AdsOnDeliveryRestrictions.fromValue(value);
  }
}

