# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configure_logs_response_egress_access_logs import ConfigureLogsResponseEgressAccessLogs
from openapi_server.models.configure_logs_response_hls_ingest import ConfigureLogsResponseHlsIngest
from openapi_server.models.configure_logs_response_ingress_access_logs import ConfigureLogsResponseIngressAccessLogs
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, created_at: str=None, description: str=None, egress_access_logs: ConfigureLogsResponseEgressAccessLogs=None, hls_ingest: ConfigureLogsResponseHlsIngest=None, id: str=None, ingress_access_logs: ConfigureLogsResponseIngressAccessLogs=None, tags: Dict=None):
        """Channel - a model defined in OpenAPI

        :param arn: The arn of this Channel.
        :param created_at: The created_at of this Channel.
        :param description: The description of this Channel.
        :param egress_access_logs: The egress_access_logs of this Channel.
        :param hls_ingest: The hls_ingest of this Channel.
        :param id: The id of this Channel.
        :param ingress_access_logs: The ingress_access_logs of this Channel.
        :param tags: The tags of this Channel.
        """
        self.openapi_types = {
            'arn': str,
            'created_at': str,
            'description': str,
            'egress_access_logs': ConfigureLogsResponseEgressAccessLogs,
            'hls_ingest': ConfigureLogsResponseHlsIngest,
            'id': str,
            'ingress_access_logs': ConfigureLogsResponseIngressAccessLogs,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'Arn',
            'created_at': 'CreatedAt',
            'description': 'Description',
            'egress_access_logs': 'EgressAccessLogs',
            'hls_ingest': 'HlsIngest',
            'id': 'Id',
            'ingress_access_logs': 'IngressAccessLogs',
            'tags': 'Tags'
        }

        self._arn = arn
        self._created_at = created_at
        self._description = description
        self._egress_access_logs = egress_access_logs
        self._hls_ingest = hls_ingest
        self._id = id
        self._ingress_access_logs = ingress_access_logs
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Channel.


        :return: The arn of this Channel.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Channel.


        :param arn: The arn of this Channel.
        :type arn: str
        """

        self._arn = arn

    @property
    def created_at(self):
        """Gets the created_at of this Channel.


        :return: The created_at of this Channel.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Channel.


        :param created_at: The created_at of this Channel.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Channel.


        :return: The description of this Channel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Channel.


        :param description: The description of this Channel.
        :type description: str
        """

        self._description = description

    @property
    def egress_access_logs(self):
        """Gets the egress_access_logs of this Channel.


        :return: The egress_access_logs of this Channel.
        :rtype: ConfigureLogsResponseEgressAccessLogs
        """
        return self._egress_access_logs

    @egress_access_logs.setter
    def egress_access_logs(self, egress_access_logs):
        """Sets the egress_access_logs of this Channel.


        :param egress_access_logs: The egress_access_logs of this Channel.
        :type egress_access_logs: ConfigureLogsResponseEgressAccessLogs
        """

        self._egress_access_logs = egress_access_logs

    @property
    def hls_ingest(self):
        """Gets the hls_ingest of this Channel.


        :return: The hls_ingest of this Channel.
        :rtype: ConfigureLogsResponseHlsIngest
        """
        return self._hls_ingest

    @hls_ingest.setter
    def hls_ingest(self, hls_ingest):
        """Sets the hls_ingest of this Channel.


        :param hls_ingest: The hls_ingest of this Channel.
        :type hls_ingest: ConfigureLogsResponseHlsIngest
        """

        self._hls_ingest = hls_ingest

    @property
    def id(self):
        """Gets the id of this Channel.


        :return: The id of this Channel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.


        :param id: The id of this Channel.
        :type id: str
        """

        self._id = id

    @property
    def ingress_access_logs(self):
        """Gets the ingress_access_logs of this Channel.


        :return: The ingress_access_logs of this Channel.
        :rtype: ConfigureLogsResponseIngressAccessLogs
        """
        return self._ingress_access_logs

    @ingress_access_logs.setter
    def ingress_access_logs(self, ingress_access_logs):
        """Sets the ingress_access_logs of this Channel.


        :param ingress_access_logs: The ingress_access_logs of this Channel.
        :type ingress_access_logs: ConfigureLogsResponseIngressAccessLogs
        """

        self._ingress_access_logs = ingress_access_logs

    @property
    def tags(self):
        """Gets the tags of this Channel.


        :return: The tags of this Channel.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Channel.


        :param tags: The tags of this Channel.
        :type tags: Dict
        """

        self._tags = tags
