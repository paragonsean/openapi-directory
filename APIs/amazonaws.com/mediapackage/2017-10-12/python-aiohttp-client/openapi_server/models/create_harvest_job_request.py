# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_harvest_job_request_s3_destination import CreateHarvestJobRequestS3Destination
from openapi_server import util


class CreateHarvestJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, id: str=None, origin_endpoint_id: str=None, s3_destination: CreateHarvestJobRequestS3Destination=None, start_time: str=None):
        """CreateHarvestJobRequest - a model defined in OpenAPI

        :param end_time: The end_time of this CreateHarvestJobRequest.
        :param id: The id of this CreateHarvestJobRequest.
        :param origin_endpoint_id: The origin_endpoint_id of this CreateHarvestJobRequest.
        :param s3_destination: The s3_destination of this CreateHarvestJobRequest.
        :param start_time: The start_time of this CreateHarvestJobRequest.
        """
        self.openapi_types = {
            'end_time': str,
            'id': str,
            'origin_endpoint_id': str,
            's3_destination': CreateHarvestJobRequestS3Destination,
            'start_time': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'id': 'id',
            'origin_endpoint_id': 'originEndpointId',
            's3_destination': 's3Destination',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._id = id
        self._origin_endpoint_id = origin_endpoint_id
        self._s3_destination = s3_destination
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateHarvestJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateHarvestJob_request of this CreateHarvestJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this CreateHarvestJobRequest.

        The end of the time-window which will be harvested 

        :return: The end_time of this CreateHarvestJobRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CreateHarvestJobRequest.

        The end of the time-window which will be harvested 

        :param end_time: The end_time of this CreateHarvestJobRequest.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this CreateHarvestJobRequest.

        The ID of the HarvestJob. The ID must be unique within the region and it cannot be changed after the HarvestJob is submitted 

        :return: The id of this CreateHarvestJobRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateHarvestJobRequest.

        The ID of the HarvestJob. The ID must be unique within the region and it cannot be changed after the HarvestJob is submitted 

        :param id: The id of this CreateHarvestJobRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def origin_endpoint_id(self):
        """Gets the origin_endpoint_id of this CreateHarvestJobRequest.

        The ID of the OriginEndpoint that the HarvestJob will harvest from. This cannot be changed after the HarvestJob is submitted. 

        :return: The origin_endpoint_id of this CreateHarvestJobRequest.
        :rtype: str
        """
        return self._origin_endpoint_id

    @origin_endpoint_id.setter
    def origin_endpoint_id(self, origin_endpoint_id):
        """Sets the origin_endpoint_id of this CreateHarvestJobRequest.

        The ID of the OriginEndpoint that the HarvestJob will harvest from. This cannot be changed after the HarvestJob is submitted. 

        :param origin_endpoint_id: The origin_endpoint_id of this CreateHarvestJobRequest.
        :type origin_endpoint_id: str
        """
        if origin_endpoint_id is None:
            raise ValueError("Invalid value for `origin_endpoint_id`, must not be `None`")

        self._origin_endpoint_id = origin_endpoint_id

    @property
    def s3_destination(self):
        """Gets the s3_destination of this CreateHarvestJobRequest.


        :return: The s3_destination of this CreateHarvestJobRequest.
        :rtype: CreateHarvestJobRequestS3Destination
        """
        return self._s3_destination

    @s3_destination.setter
    def s3_destination(self, s3_destination):
        """Sets the s3_destination of this CreateHarvestJobRequest.


        :param s3_destination: The s3_destination of this CreateHarvestJobRequest.
        :type s3_destination: CreateHarvestJobRequestS3Destination
        """
        if s3_destination is None:
            raise ValueError("Invalid value for `s3_destination`, must not be `None`")

        self._s3_destination = s3_destination

    @property
    def start_time(self):
        """Gets the start_time of this CreateHarvestJobRequest.

        The start of the time-window which will be harvested 

        :return: The start_time of this CreateHarvestJobRequest.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CreateHarvestJobRequest.

        The start of the time-window which will be harvested 

        :param start_time: The start_time of this CreateHarvestJobRequest.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time
