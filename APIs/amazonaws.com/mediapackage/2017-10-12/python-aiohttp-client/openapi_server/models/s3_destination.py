# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, manifest_key: str=None, role_arn: str=None):
        """S3Destination - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this S3Destination.
        :param manifest_key: The manifest_key of this S3Destination.
        :param role_arn: The role_arn of this S3Destination.
        """
        self.openapi_types = {
            'bucket_name': str,
            'manifest_key': str,
            'role_arn': str
        }

        self.attribute_map = {
            'bucket_name': 'BucketName',
            'manifest_key': 'ManifestKey',
            'role_arn': 'RoleArn'
        }

        self._bucket_name = bucket_name
        self._manifest_key = manifest_key
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Destination of this S3Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this S3Destination.


        :return: The bucket_name of this S3Destination.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this S3Destination.


        :param bucket_name: The bucket_name of this S3Destination.
        :type bucket_name: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    @property
    def manifest_key(self):
        """Gets the manifest_key of this S3Destination.


        :return: The manifest_key of this S3Destination.
        :rtype: str
        """
        return self._manifest_key

    @manifest_key.setter
    def manifest_key(self, manifest_key):
        """Sets the manifest_key of this S3Destination.


        :param manifest_key: The manifest_key of this S3Destination.
        :type manifest_key: str
        """
        if manifest_key is None:
            raise ValueError("Invalid value for `manifest_key`, must not be `None`")

        self._manifest_key = manifest_key

    @property
    def role_arn(self):
        """Gets the role_arn of this S3Destination.


        :return: The role_arn of this S3Destination.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this S3Destination.


        :param role_arn: The role_arn of this S3Destination.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn
