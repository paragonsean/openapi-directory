/*
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateLifecyclePolicyRequestPolicyDetailsEventSource;
import org.openapitools.client.model.CreateLifecyclePolicyRequestPolicyDetailsParameters;
import org.openapitools.client.model.PolicyTypeValues;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LifecyclePolicyPolicyDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:36.229817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LifecyclePolicyPolicyDetails {
  public static final String SERIALIZED_NAME_POLICY_TYPE = "PolicyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private PolicyTypeValues policyType;

  public static final String SERIALIZED_NAME_RESOURCE_TYPES = "ResourceTypes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPES)
  private List resourceTypes;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATIONS = "ResourceLocations";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATIONS)
  private List resourceLocations;

  public static final String SERIALIZED_NAME_TARGET_TAGS = "TargetTags";
  @SerializedName(SERIALIZED_NAME_TARGET_TAGS)
  private List targetTags;

  public static final String SERIALIZED_NAME_SCHEDULES = "Schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  private List schedules;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private CreateLifecyclePolicyRequestPolicyDetailsParameters parameters;

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "EventSource";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private CreateLifecyclePolicyRequestPolicyDetailsEventSource eventSource;

  public static final String SERIALIZED_NAME_ACTIONS = "Actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List actions;

  public LifecyclePolicyPolicyDetails() {
  }

  public LifecyclePolicyPolicyDetails policyType(PolicyTypeValues policyType) {
    this.policyType = policyType;
    return this;
  }

  /**
   * Get policyType
   * @return policyType
   */
  @javax.annotation.Nullable
  public PolicyTypeValues getPolicyType() {
    return policyType;
  }

  public void setPolicyType(PolicyTypeValues policyType) {
    this.policyType = policyType;
  }


  public LifecyclePolicyPolicyDetails resourceTypes(List resourceTypes) {
    this.resourceTypes = resourceTypes;
    return this;
  }

  /**
   * Get resourceTypes
   * @return resourceTypes
   */
  @javax.annotation.Nullable
  public List getResourceTypes() {
    return resourceTypes;
  }

  public void setResourceTypes(List resourceTypes) {
    this.resourceTypes = resourceTypes;
  }


  public LifecyclePolicyPolicyDetails resourceLocations(List resourceLocations) {
    this.resourceLocations = resourceLocations;
    return this;
  }

  /**
   * Get resourceLocations
   * @return resourceLocations
   */
  @javax.annotation.Nullable
  public List getResourceLocations() {
    return resourceLocations;
  }

  public void setResourceLocations(List resourceLocations) {
    this.resourceLocations = resourceLocations;
  }


  public LifecyclePolicyPolicyDetails targetTags(List targetTags) {
    this.targetTags = targetTags;
    return this;
  }

  /**
   * Get targetTags
   * @return targetTags
   */
  @javax.annotation.Nullable
  public List getTargetTags() {
    return targetTags;
  }

  public void setTargetTags(List targetTags) {
    this.targetTags = targetTags;
  }


  public LifecyclePolicyPolicyDetails schedules(List schedules) {
    this.schedules = schedules;
    return this;
  }

  /**
   * Get schedules
   * @return schedules
   */
  @javax.annotation.Nullable
  public List getSchedules() {
    return schedules;
  }

  public void setSchedules(List schedules) {
    this.schedules = schedules;
  }


  public LifecyclePolicyPolicyDetails parameters(CreateLifecyclePolicyRequestPolicyDetailsParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public CreateLifecyclePolicyRequestPolicyDetailsParameters getParameters() {
    return parameters;
  }

  public void setParameters(CreateLifecyclePolicyRequestPolicyDetailsParameters parameters) {
    this.parameters = parameters;
  }


  public LifecyclePolicyPolicyDetails eventSource(CreateLifecyclePolicyRequestPolicyDetailsEventSource eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * Get eventSource
   * @return eventSource
   */
  @javax.annotation.Nullable
  public CreateLifecyclePolicyRequestPolicyDetailsEventSource getEventSource() {
    return eventSource;
  }

  public void setEventSource(CreateLifecyclePolicyRequestPolicyDetailsEventSource eventSource) {
    this.eventSource = eventSource;
  }


  public LifecyclePolicyPolicyDetails actions(List actions) {
    this.actions = actions;
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List getActions() {
    return actions;
  }

  public void setActions(List actions) {
    this.actions = actions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LifecyclePolicyPolicyDetails lifecyclePolicyPolicyDetails = (LifecyclePolicyPolicyDetails) o;
    return Objects.equals(this.policyType, lifecyclePolicyPolicyDetails.policyType) &&
        Objects.equals(this.resourceTypes, lifecyclePolicyPolicyDetails.resourceTypes) &&
        Objects.equals(this.resourceLocations, lifecyclePolicyPolicyDetails.resourceLocations) &&
        Objects.equals(this.targetTags, lifecyclePolicyPolicyDetails.targetTags) &&
        Objects.equals(this.schedules, lifecyclePolicyPolicyDetails.schedules) &&
        Objects.equals(this.parameters, lifecyclePolicyPolicyDetails.parameters) &&
        Objects.equals(this.eventSource, lifecyclePolicyPolicyDetails.eventSource) &&
        Objects.equals(this.actions, lifecyclePolicyPolicyDetails.actions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyType, resourceTypes, resourceLocations, targetTags, schedules, parameters, eventSource, actions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LifecyclePolicyPolicyDetails {\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("    resourceLocations: ").append(toIndentedString(resourceLocations)).append("\n");
    sb.append("    targetTags: ").append(toIndentedString(targetTags)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PolicyType");
    openapiFields.add("ResourceTypes");
    openapiFields.add("ResourceLocations");
    openapiFields.add("TargetTags");
    openapiFields.add("Schedules");
    openapiFields.add("Parameters");
    openapiFields.add("EventSource");
    openapiFields.add("Actions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LifecyclePolicyPolicyDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LifecyclePolicyPolicyDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LifecyclePolicyPolicyDetails is not found in the empty JSON string", LifecyclePolicyPolicyDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LifecyclePolicyPolicyDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LifecyclePolicyPolicyDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PolicyType`
      if (jsonObj.get("PolicyType") != null && !jsonObj.get("PolicyType").isJsonNull()) {
        PolicyTypeValues.validateJsonElement(jsonObj.get("PolicyType"));
      }
      // validate the optional field `ResourceTypes`
      if (jsonObj.get("ResourceTypes") != null && !jsonObj.get("ResourceTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceTypes"));
      }
      // validate the optional field `ResourceLocations`
      if (jsonObj.get("ResourceLocations") != null && !jsonObj.get("ResourceLocations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ResourceLocations"));
      }
      // validate the optional field `TargetTags`
      if (jsonObj.get("TargetTags") != null && !jsonObj.get("TargetTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TargetTags"));
      }
      // validate the optional field `Schedules`
      if (jsonObj.get("Schedules") != null && !jsonObj.get("Schedules").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Schedules"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        CreateLifecyclePolicyRequestPolicyDetailsParameters.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `EventSource`
      if (jsonObj.get("EventSource") != null && !jsonObj.get("EventSource").isJsonNull()) {
        CreateLifecyclePolicyRequestPolicyDetailsEventSource.validateJsonElement(jsonObj.get("EventSource"));
      }
      // validate the optional field `Actions`
      if (jsonObj.get("Actions") != null && !jsonObj.get("Actions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Actions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LifecyclePolicyPolicyDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LifecyclePolicyPolicyDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LifecyclePolicyPolicyDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LifecyclePolicyPolicyDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<LifecyclePolicyPolicyDetails>() {
           @Override
           public void write(JsonWriter out, LifecyclePolicyPolicyDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LifecyclePolicyPolicyDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LifecyclePolicyPolicyDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LifecyclePolicyPolicyDetails
   * @throws IOException if the JSON string is invalid with respect to LifecyclePolicyPolicyDetails
   */
  public static LifecyclePolicyPolicyDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LifecyclePolicyPolicyDetails.class);
  }

  /**
   * Convert an instance of LifecyclePolicyPolicyDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

