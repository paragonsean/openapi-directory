/*
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt; &lt;b&gt;[Snapshot and AMI policies only]&lt;/b&gt; Specifies optional parameters for snapshot and AMI policies. The set of valid parameters depends on the combination of policy type and target resource type.&lt;/p&gt; &lt;p&gt;If you choose to exclude boot volumes and you specify tags that consequently exclude all of the additional data volumes attached to an instance, then Amazon Data Lifecycle Manager will not create any snapshots for the affected instance, and it will emit a &lt;code&gt;SnapshotsCreateFailed&lt;/code&gt; Amazon CloudWatch metric. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitor-dlm-cw-metrics.html\&quot;&gt;Monitor your policies using Amazon CloudWatch&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:36.229817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Parameters {
  public static final String SERIALIZED_NAME_EXCLUDE_BOOT_VOLUME = "ExcludeBootVolume";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_BOOT_VOLUME)
  private Boolean excludeBootVolume;

  public static final String SERIALIZED_NAME_NO_REBOOT = "NoReboot";
  @SerializedName(SERIALIZED_NAME_NO_REBOOT)
  private Boolean noReboot;

  public static final String SERIALIZED_NAME_EXCLUDE_DATA_VOLUME_TAGS = "ExcludeDataVolumeTags";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_DATA_VOLUME_TAGS)
  private List excludeDataVolumeTags;

  public Parameters() {
  }

  public Parameters excludeBootVolume(Boolean excludeBootVolume) {
    this.excludeBootVolume = excludeBootVolume;
    return this;
  }

  /**
   * Get excludeBootVolume
   * @return excludeBootVolume
   */
  @javax.annotation.Nullable
  public Boolean getExcludeBootVolume() {
    return excludeBootVolume;
  }

  public void setExcludeBootVolume(Boolean excludeBootVolume) {
    this.excludeBootVolume = excludeBootVolume;
  }


  public Parameters noReboot(Boolean noReboot) {
    this.noReboot = noReboot;
    return this;
  }

  /**
   * Get noReboot
   * @return noReboot
   */
  @javax.annotation.Nullable
  public Boolean getNoReboot() {
    return noReboot;
  }

  public void setNoReboot(Boolean noReboot) {
    this.noReboot = noReboot;
  }


  public Parameters excludeDataVolumeTags(List excludeDataVolumeTags) {
    this.excludeDataVolumeTags = excludeDataVolumeTags;
    return this;
  }

  /**
   * Get excludeDataVolumeTags
   * @return excludeDataVolumeTags
   */
  @javax.annotation.Nullable
  public List getExcludeDataVolumeTags() {
    return excludeDataVolumeTags;
  }

  public void setExcludeDataVolumeTags(List excludeDataVolumeTags) {
    this.excludeDataVolumeTags = excludeDataVolumeTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parameters parameters = (Parameters) o;
    return Objects.equals(this.excludeBootVolume, parameters.excludeBootVolume) &&
        Objects.equals(this.noReboot, parameters.noReboot) &&
        Objects.equals(this.excludeDataVolumeTags, parameters.excludeDataVolumeTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludeBootVolume, noReboot, excludeDataVolumeTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parameters {\n");
    sb.append("    excludeBootVolume: ").append(toIndentedString(excludeBootVolume)).append("\n");
    sb.append("    noReboot: ").append(toIndentedString(noReboot)).append("\n");
    sb.append("    excludeDataVolumeTags: ").append(toIndentedString(excludeDataVolumeTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExcludeBootVolume");
    openapiFields.add("NoReboot");
    openapiFields.add("ExcludeDataVolumeTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Parameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Parameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Parameters is not found in the empty JSON string", Parameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Parameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Parameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ExcludeBootVolume`
      if (jsonObj.get("ExcludeBootVolume") != null && !jsonObj.get("ExcludeBootVolume").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ExcludeBootVolume"));
      }
      // validate the optional field `NoReboot`
      if (jsonObj.get("NoReboot") != null && !jsonObj.get("NoReboot").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("NoReboot"));
      }
      // validate the optional field `ExcludeDataVolumeTags`
      if (jsonObj.get("ExcludeDataVolumeTags") != null && !jsonObj.get("ExcludeDataVolumeTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludeDataVolumeTags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Parameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Parameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Parameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Parameters.class));

       return (TypeAdapter<T>) new TypeAdapter<Parameters>() {
           @Override
           public void write(JsonWriter out, Parameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Parameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Parameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Parameters
   * @throws IOException if the JSON string is invalid with respect to Parameters
   */
  public static Parameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Parameters.class);
  }

  /**
   * Convert an instance of Parameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

