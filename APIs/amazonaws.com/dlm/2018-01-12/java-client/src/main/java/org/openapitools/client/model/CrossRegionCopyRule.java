/*
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CrossRegionCopyRuleDeprecateRule;
import org.openapitools.client.model.CrossRegionCopyRuleRetainRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt; &lt;b&gt;[Snapshot and AMI policies only]&lt;/b&gt; Specifies a cross-Region copy rule for snapshot and AMI policies.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To specify a cross-Region copy action for event-based polices, use &lt;a&gt;CrossRegionCopyAction&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:36.229817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrossRegionCopyRule {
  public static final String SERIALIZED_NAME_TARGET_REGION = "TargetRegion";
  @SerializedName(SERIALIZED_NAME_TARGET_REGION)
  private String targetRegion;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_ENCRYPTED = "Encrypted";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED)
  private Boolean encrypted;

  public static final String SERIALIZED_NAME_CMK_ARN = "CmkArn";
  @SerializedName(SERIALIZED_NAME_CMK_ARN)
  private String cmkArn;

  public static final String SERIALIZED_NAME_COPY_TAGS = "CopyTags";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS)
  private Boolean copyTags;

  public static final String SERIALIZED_NAME_RETAIN_RULE = "RetainRule";
  @SerializedName(SERIALIZED_NAME_RETAIN_RULE)
  private CrossRegionCopyRuleRetainRule retainRule;

  public static final String SERIALIZED_NAME_DEPRECATE_RULE = "DeprecateRule";
  @SerializedName(SERIALIZED_NAME_DEPRECATE_RULE)
  private CrossRegionCopyRuleDeprecateRule deprecateRule;

  public CrossRegionCopyRule() {
  }

  public CrossRegionCopyRule targetRegion(String targetRegion) {
    this.targetRegion = targetRegion;
    return this;
  }

  /**
   * Get targetRegion
   * @return targetRegion
   */
  @javax.annotation.Nullable
  public String getTargetRegion() {
    return targetRegion;
  }

  public void setTargetRegion(String targetRegion) {
    this.targetRegion = targetRegion;
  }


  public CrossRegionCopyRule target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public CrossRegionCopyRule encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

  /**
   * Get encrypted
   * @return encrypted
   */
  @javax.annotation.Nonnull
  public Boolean getEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }


  public CrossRegionCopyRule cmkArn(String cmkArn) {
    this.cmkArn = cmkArn;
    return this;
  }

  /**
   * Get cmkArn
   * @return cmkArn
   */
  @javax.annotation.Nullable
  public String getCmkArn() {
    return cmkArn;
  }

  public void setCmkArn(String cmkArn) {
    this.cmkArn = cmkArn;
  }


  public CrossRegionCopyRule copyTags(Boolean copyTags) {
    this.copyTags = copyTags;
    return this;
  }

  /**
   * Get copyTags
   * @return copyTags
   */
  @javax.annotation.Nullable
  public Boolean getCopyTags() {
    return copyTags;
  }

  public void setCopyTags(Boolean copyTags) {
    this.copyTags = copyTags;
  }


  public CrossRegionCopyRule retainRule(CrossRegionCopyRuleRetainRule retainRule) {
    this.retainRule = retainRule;
    return this;
  }

  /**
   * Get retainRule
   * @return retainRule
   */
  @javax.annotation.Nullable
  public CrossRegionCopyRuleRetainRule getRetainRule() {
    return retainRule;
  }

  public void setRetainRule(CrossRegionCopyRuleRetainRule retainRule) {
    this.retainRule = retainRule;
  }


  public CrossRegionCopyRule deprecateRule(CrossRegionCopyRuleDeprecateRule deprecateRule) {
    this.deprecateRule = deprecateRule;
    return this;
  }

  /**
   * Get deprecateRule
   * @return deprecateRule
   */
  @javax.annotation.Nullable
  public CrossRegionCopyRuleDeprecateRule getDeprecateRule() {
    return deprecateRule;
  }

  public void setDeprecateRule(CrossRegionCopyRuleDeprecateRule deprecateRule) {
    this.deprecateRule = deprecateRule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrossRegionCopyRule crossRegionCopyRule = (CrossRegionCopyRule) o;
    return Objects.equals(this.targetRegion, crossRegionCopyRule.targetRegion) &&
        Objects.equals(this.target, crossRegionCopyRule.target) &&
        Objects.equals(this.encrypted, crossRegionCopyRule.encrypted) &&
        Objects.equals(this.cmkArn, crossRegionCopyRule.cmkArn) &&
        Objects.equals(this.copyTags, crossRegionCopyRule.copyTags) &&
        Objects.equals(this.retainRule, crossRegionCopyRule.retainRule) &&
        Objects.equals(this.deprecateRule, crossRegionCopyRule.deprecateRule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetRegion, target, encrypted, cmkArn, copyTags, retainRule, deprecateRule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrossRegionCopyRule {\n");
    sb.append("    targetRegion: ").append(toIndentedString(targetRegion)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    cmkArn: ").append(toIndentedString(cmkArn)).append("\n");
    sb.append("    copyTags: ").append(toIndentedString(copyTags)).append("\n");
    sb.append("    retainRule: ").append(toIndentedString(retainRule)).append("\n");
    sb.append("    deprecateRule: ").append(toIndentedString(deprecateRule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TargetRegion");
    openapiFields.add("Target");
    openapiFields.add("Encrypted");
    openapiFields.add("CmkArn");
    openapiFields.add("CopyTags");
    openapiFields.add("RetainRule");
    openapiFields.add("DeprecateRule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Encrypted");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrossRegionCopyRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrossRegionCopyRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrossRegionCopyRule is not found in the empty JSON string", CrossRegionCopyRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrossRegionCopyRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrossRegionCopyRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CrossRegionCopyRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TargetRegion`
      if (jsonObj.get("TargetRegion") != null && !jsonObj.get("TargetRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetRegion"));
      }
      // validate the optional field `Target`
      if (jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Target"));
      }
      // validate the required field `Encrypted`
      Boolean.validateJsonElement(jsonObj.get("Encrypted"));
      // validate the optional field `CmkArn`
      if (jsonObj.get("CmkArn") != null && !jsonObj.get("CmkArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CmkArn"));
      }
      // validate the optional field `CopyTags`
      if (jsonObj.get("CopyTags") != null && !jsonObj.get("CopyTags").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CopyTags"));
      }
      // validate the optional field `RetainRule`
      if (jsonObj.get("RetainRule") != null && !jsonObj.get("RetainRule").isJsonNull()) {
        CrossRegionCopyRuleRetainRule.validateJsonElement(jsonObj.get("RetainRule"));
      }
      // validate the optional field `DeprecateRule`
      if (jsonObj.get("DeprecateRule") != null && !jsonObj.get("DeprecateRule").isJsonNull()) {
        CrossRegionCopyRuleDeprecateRule.validateJsonElement(jsonObj.get("DeprecateRule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrossRegionCopyRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrossRegionCopyRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrossRegionCopyRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrossRegionCopyRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CrossRegionCopyRule>() {
           @Override
           public void write(JsonWriter out, CrossRegionCopyRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrossRegionCopyRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrossRegionCopyRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrossRegionCopyRule
   * @throws IOException if the JSON string is invalid with respect to CrossRegionCopyRule
   */
  public static CrossRegionCopyRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrossRegionCopyRule.class);
  }

  /**
   * Convert an instance of CrossRegionCopyRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

