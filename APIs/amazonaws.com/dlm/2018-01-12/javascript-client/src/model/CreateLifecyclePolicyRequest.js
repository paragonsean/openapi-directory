/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateLifecyclePolicyRequestPolicyDetails from './CreateLifecyclePolicyRequestPolicyDetails';

/**
 * The CreateLifecyclePolicyRequest model module.
 * @module model/CreateLifecyclePolicyRequest
 * @version 2018-01-12
 */
class CreateLifecyclePolicyRequest {
    /**
     * Constructs a new <code>CreateLifecyclePolicyRequest</code>.
     * @alias module:model/CreateLifecyclePolicyRequest
     * @param executionRoleArn {String} The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
     * @param description {String} A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.
     * @param state {module:model/CreateLifecyclePolicyRequest.StateEnum} The desired activation state of the lifecycle policy after creation.
     * @param policyDetails {module:model/CreateLifecyclePolicyRequestPolicyDetails} 
     */
    constructor(executionRoleArn, description, state, policyDetails) { 
        
        CreateLifecyclePolicyRequest.initialize(this, executionRoleArn, description, state, policyDetails);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, executionRoleArn, description, state, policyDetails) { 
        obj['ExecutionRoleArn'] = executionRoleArn;
        obj['Description'] = description;
        obj['State'] = state;
        obj['PolicyDetails'] = policyDetails;
    }

    /**
     * Constructs a <code>CreateLifecyclePolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLifecyclePolicyRequest} obj Optional instance to populate.
     * @return {module:model/CreateLifecyclePolicyRequest} The populated <code>CreateLifecyclePolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLifecyclePolicyRequest();

            if (data.hasOwnProperty('ExecutionRoleArn')) {
                obj['ExecutionRoleArn'] = ApiClient.convertToType(data['ExecutionRoleArn'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], 'String');
            }
            if (data.hasOwnProperty('PolicyDetails')) {
                obj['PolicyDetails'] = CreateLifecyclePolicyRequestPolicyDetails.constructFromObject(data['PolicyDetails']);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLifecyclePolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLifecyclePolicyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateLifecyclePolicyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ExecutionRoleArn'] && !(typeof data['ExecutionRoleArn'] === 'string' || data['ExecutionRoleArn'] instanceof String)) {
            throw new Error("Expected the field `ExecutionRoleArn` to be a primitive type in the JSON string but got " + data['ExecutionRoleArn']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['State'] && !(typeof data['State'] === 'string' || data['State'] instanceof String)) {
            throw new Error("Expected the field `State` to be a primitive type in the JSON string but got " + data['State']);
        }
        // validate the optional field `PolicyDetails`
        if (data['PolicyDetails']) { // data not null
          CreateLifecyclePolicyRequestPolicyDetails.validateJSON(data['PolicyDetails']);
        }

        return true;
    }


}

CreateLifecyclePolicyRequest.RequiredProperties = ["ExecutionRoleArn", "Description", "State", "PolicyDetails"];

/**
 * The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
 * @member {String} ExecutionRoleArn
 */
CreateLifecyclePolicyRequest.prototype['ExecutionRoleArn'] = undefined;

/**
 * A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.
 * @member {String} Description
 */
CreateLifecyclePolicyRequest.prototype['Description'] = undefined;

/**
 * The desired activation state of the lifecycle policy after creation.
 * @member {module:model/CreateLifecyclePolicyRequest.StateEnum} State
 */
CreateLifecyclePolicyRequest.prototype['State'] = undefined;

/**
 * @member {module:model/CreateLifecyclePolicyRequestPolicyDetails} PolicyDetails
 */
CreateLifecyclePolicyRequest.prototype['PolicyDetails'] = undefined;

/**
 * The tags to apply to the lifecycle policy during creation.
 * @member {Object.<String, String>} Tags
 */
CreateLifecyclePolicyRequest.prototype['Tags'] = undefined;





/**
 * Allowed values for the <code>State</code> property.
 * @enum {String}
 * @readonly
 */
CreateLifecyclePolicyRequest['StateEnum'] = {

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default CreateLifecyclePolicyRequest;

