/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Parameters model module.
 * @module model/Parameters
 * @version 2018-01-12
 */
class Parameters {
    /**
     * Constructs a new <code>Parameters</code>.
     * &lt;p&gt; &lt;b&gt;[Snapshot and AMI policies only]&lt;/b&gt; Specifies optional parameters for snapshot and AMI policies. The set of valid parameters depends on the combination of policy type and target resource type.&lt;/p&gt; &lt;p&gt;If you choose to exclude boot volumes and you specify tags that consequently exclude all of the additional data volumes attached to an instance, then Amazon Data Lifecycle Manager will not create any snapshots for the affected instance, and it will emit a &lt;code&gt;SnapshotsCreateFailed&lt;/code&gt; Amazon CloudWatch metric. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitor-dlm-cw-metrics.html\&quot;&gt;Monitor your policies using Amazon CloudWatch&lt;/a&gt;.&lt;/p&gt;
     * @alias module:model/Parameters
     */
    constructor() { 
        
        Parameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Parameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Parameters} obj Optional instance to populate.
     * @return {module:model/Parameters} The populated <code>Parameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Parameters();

            if (data.hasOwnProperty('ExcludeBootVolume')) {
                obj['ExcludeBootVolume'] = ApiClient.convertToType(data['ExcludeBootVolume'], 'Boolean');
            }
            if (data.hasOwnProperty('NoReboot')) {
                obj['NoReboot'] = ApiClient.convertToType(data['NoReboot'], 'Boolean');
            }
            if (data.hasOwnProperty('ExcludeDataVolumeTags')) {
                obj['ExcludeDataVolumeTags'] = ApiClient.convertToType(data['ExcludeDataVolumeTags'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Parameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Parameters</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ExcludeBootVolume`
        if (data['ExcludeBootVolume']) { // data not null
          Boolean.validateJSON(data['ExcludeBootVolume']);
        }
        // validate the optional field `NoReboot`
        if (data['NoReboot']) { // data not null
          Boolean.validateJSON(data['NoReboot']);
        }
        // validate the optional field `ExcludeDataVolumeTags`
        if (data['ExcludeDataVolumeTags']) { // data not null
          Array.validateJSON(data['ExcludeDataVolumeTags']);
        }

        return true;
    }


}



/**
 * @member {Boolean} ExcludeBootVolume
 */
Parameters.prototype['ExcludeBootVolume'] = undefined;

/**
 * @member {Boolean} NoReboot
 */
Parameters.prototype['NoReboot'] = undefined;

/**
 * @member {Array} ExcludeDataVolumeTags
 */
Parameters.prototype['ExcludeDataVolumeTags'] = undefined;






export default Parameters;

