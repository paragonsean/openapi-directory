/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLifecyclePolicyRequest_PolicyDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLifecyclePolicyRequest_PolicyDetails::OAICreateLifecyclePolicyRequest_PolicyDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLifecyclePolicyRequest_PolicyDetails::OAICreateLifecyclePolicyRequest_PolicyDetails() {
    this->initializeModel();
}

OAICreateLifecyclePolicyRequest_PolicyDetails::~OAICreateLifecyclePolicyRequest_PolicyDetails() {}

void OAICreateLifecyclePolicyRequest_PolicyDetails::initializeModel() {

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_resource_locations_isSet = false;
    m_resource_locations_isValid = false;

    m_target_tags_isSet = false;
    m_target_tags_isValid = false;

    m_schedules_isSet = false;
    m_schedules_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;
}

void OAICreateLifecyclePolicyRequest_PolicyDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLifecyclePolicyRequest_PolicyDetails::fromJsonObject(QJsonObject json) {

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("PolicyType")]);
    m_policy_type_isSet = !json[QString("PolicyType")].isNull() && m_policy_type_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_resource_locations_isValid = ::OpenAPI::fromJsonValue(m_resource_locations, json[QString("ResourceLocations")]);
    m_resource_locations_isSet = !json[QString("ResourceLocations")].isNull() && m_resource_locations_isValid;

    m_target_tags_isValid = ::OpenAPI::fromJsonValue(m_target_tags, json[QString("TargetTags")]);
    m_target_tags_isSet = !json[QString("TargetTags")].isNull() && m_target_tags_isValid;

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("Schedules")]);
    m_schedules_isSet = !json[QString("Schedules")].isNull() && m_schedules_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("EventSource")]);
    m_event_source_isSet = !json[QString("EventSource")].isNull() && m_event_source_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;
}

QString OAICreateLifecyclePolicyRequest_PolicyDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLifecyclePolicyRequest_PolicyDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_type.isSet()) {
        obj.insert(QString("PolicyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_resource_locations.isSet()) {
        obj.insert(QString("ResourceLocations"), ::OpenAPI::toJsonValue(m_resource_locations));
    }
    if (m_target_tags.isSet()) {
        obj.insert(QString("TargetTags"), ::OpenAPI::toJsonValue(m_target_tags));
    }
    if (m_schedules.isSet()) {
        obj.insert(QString("Schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_event_source.isSet()) {
        obj.insert(QString("EventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    return obj;
}

OAIPolicyTypeValues OAICreateLifecyclePolicyRequest_PolicyDetails::getPolicyType() const {
    return m_policy_type;
}
void OAICreateLifecyclePolicyRequest_PolicyDetails::setPolicyType(const OAIPolicyTypeValues &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

QList OAICreateLifecyclePolicyRequest_PolicyDetails::getResourceTypes() const {
    return m_resource_types;
}
void OAICreateLifecyclePolicyRequest_PolicyDetails::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QList OAICreateLifecyclePolicyRequest_PolicyDetails::getResourceLocations() const {
    return m_resource_locations;
}
void OAICreateLifecyclePolicyRequest_PolicyDetails::setResourceLocations(const QList &resource_locations) {
    m_resource_locations = resource_locations;
    m_resource_locations_isSet = true;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_resource_locations_Set() const{
    return m_resource_locations_isSet;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_resource_locations_Valid() const{
    return m_resource_locations_isValid;
}

QList OAICreateLifecyclePolicyRequest_PolicyDetails::getTargetTags() const {
    return m_target_tags;
}
void OAICreateLifecyclePolicyRequest_PolicyDetails::setTargetTags(const QList &target_tags) {
    m_target_tags = target_tags;
    m_target_tags_isSet = true;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_target_tags_Set() const{
    return m_target_tags_isSet;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_target_tags_Valid() const{
    return m_target_tags_isValid;
}

QList OAICreateLifecyclePolicyRequest_PolicyDetails::getSchedules() const {
    return m_schedules;
}
void OAICreateLifecyclePolicyRequest_PolicyDetails::setSchedules(const QList &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_schedules_Valid() const{
    return m_schedules_isValid;
}

OAICreateLifecyclePolicy_request_PolicyDetails_Parameters OAICreateLifecyclePolicyRequest_PolicyDetails::getParameters() const {
    return m_parameters;
}
void OAICreateLifecyclePolicyRequest_PolicyDetails::setParameters(const OAICreateLifecyclePolicy_request_PolicyDetails_Parameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAICreateLifecyclePolicy_request_PolicyDetails_EventSource OAICreateLifecyclePolicyRequest_PolicyDetails::getEventSource() const {
    return m_event_source;
}
void OAICreateLifecyclePolicyRequest_PolicyDetails::setEventSource(const OAICreateLifecyclePolicy_request_PolicyDetails_EventSource &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QList OAICreateLifecyclePolicyRequest_PolicyDetails::getActions() const {
    return m_actions;
}
void OAICreateLifecyclePolicyRequest_PolicyDetails::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::is_actions_Valid() const{
    return m_actions_isValid;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLifecyclePolicyRequest_PolicyDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
