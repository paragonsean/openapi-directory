/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_copy_tags_isSet = false;
    m_copy_tags_isValid = false;

    m_tags_to_add_isSet = false;
    m_tags_to_add_isValid = false;

    m_variable_tags_isSet = false;
    m_variable_tags_isValid = false;

    m_create_rule_isSet = false;
    m_create_rule_isValid = false;

    m_retain_rule_isSet = false;
    m_retain_rule_isValid = false;

    m_fast_restore_rule_isSet = false;
    m_fast_restore_rule_isValid = false;

    m_cross_region_copy_rules_isSet = false;
    m_cross_region_copy_rules_isValid = false;

    m_share_rules_isSet = false;
    m_share_rules_isValid = false;

    m_deprecate_rule_isSet = false;
    m_deprecate_rule_isValid = false;

    m_archive_rule_isSet = false;
    m_archive_rule_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_copy_tags_isValid = ::OpenAPI::fromJsonValue(m_copy_tags, json[QString("CopyTags")]);
    m_copy_tags_isSet = !json[QString("CopyTags")].isNull() && m_copy_tags_isValid;

    m_tags_to_add_isValid = ::OpenAPI::fromJsonValue(m_tags_to_add, json[QString("TagsToAdd")]);
    m_tags_to_add_isSet = !json[QString("TagsToAdd")].isNull() && m_tags_to_add_isValid;

    m_variable_tags_isValid = ::OpenAPI::fromJsonValue(m_variable_tags, json[QString("VariableTags")]);
    m_variable_tags_isSet = !json[QString("VariableTags")].isNull() && m_variable_tags_isValid;

    m_create_rule_isValid = ::OpenAPI::fromJsonValue(m_create_rule, json[QString("CreateRule")]);
    m_create_rule_isSet = !json[QString("CreateRule")].isNull() && m_create_rule_isValid;

    m_retain_rule_isValid = ::OpenAPI::fromJsonValue(m_retain_rule, json[QString("RetainRule")]);
    m_retain_rule_isSet = !json[QString("RetainRule")].isNull() && m_retain_rule_isValid;

    m_fast_restore_rule_isValid = ::OpenAPI::fromJsonValue(m_fast_restore_rule, json[QString("FastRestoreRule")]);
    m_fast_restore_rule_isSet = !json[QString("FastRestoreRule")].isNull() && m_fast_restore_rule_isValid;

    m_cross_region_copy_rules_isValid = ::OpenAPI::fromJsonValue(m_cross_region_copy_rules, json[QString("CrossRegionCopyRules")]);
    m_cross_region_copy_rules_isSet = !json[QString("CrossRegionCopyRules")].isNull() && m_cross_region_copy_rules_isValid;

    m_share_rules_isValid = ::OpenAPI::fromJsonValue(m_share_rules, json[QString("ShareRules")]);
    m_share_rules_isSet = !json[QString("ShareRules")].isNull() && m_share_rules_isValid;

    m_deprecate_rule_isValid = ::OpenAPI::fromJsonValue(m_deprecate_rule, json[QString("DeprecateRule")]);
    m_deprecate_rule_isSet = !json[QString("DeprecateRule")].isNull() && m_deprecate_rule_isValid;

    m_archive_rule_isValid = ::OpenAPI::fromJsonValue(m_archive_rule, json[QString("ArchiveRule")]);
    m_archive_rule_isSet = !json[QString("ArchiveRule")].isNull() && m_archive_rule_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_copy_tags_isSet) {
        obj.insert(QString("CopyTags"), ::OpenAPI::toJsonValue(m_copy_tags));
    }
    if (m_tags_to_add.isSet()) {
        obj.insert(QString("TagsToAdd"), ::OpenAPI::toJsonValue(m_tags_to_add));
    }
    if (m_variable_tags.isSet()) {
        obj.insert(QString("VariableTags"), ::OpenAPI::toJsonValue(m_variable_tags));
    }
    if (m_create_rule.isSet()) {
        obj.insert(QString("CreateRule"), ::OpenAPI::toJsonValue(m_create_rule));
    }
    if (m_retain_rule.isSet()) {
        obj.insert(QString("RetainRule"), ::OpenAPI::toJsonValue(m_retain_rule));
    }
    if (m_fast_restore_rule.isSet()) {
        obj.insert(QString("FastRestoreRule"), ::OpenAPI::toJsonValue(m_fast_restore_rule));
    }
    if (m_cross_region_copy_rules.isSet()) {
        obj.insert(QString("CrossRegionCopyRules"), ::OpenAPI::toJsonValue(m_cross_region_copy_rules));
    }
    if (m_share_rules.isSet()) {
        obj.insert(QString("ShareRules"), ::OpenAPI::toJsonValue(m_share_rules));
    }
    if (m_deprecate_rule.isSet()) {
        obj.insert(QString("DeprecateRule"), ::OpenAPI::toJsonValue(m_deprecate_rule));
    }
    if (m_archive_rule.isSet()) {
        obj.insert(QString("ArchiveRule"), ::OpenAPI::toJsonValue(m_archive_rule));
    }
    return obj;
}

QString OAISchedule::getName() const {
    return m_name;
}
void OAISchedule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISchedule::is_name_Set() const{
    return m_name_isSet;
}

bool OAISchedule::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISchedule::getCopyTags() const {
    return m_copy_tags;
}
void OAISchedule::setCopyTags(const bool &copy_tags) {
    m_copy_tags = copy_tags;
    m_copy_tags_isSet = true;
}

bool OAISchedule::is_copy_tags_Set() const{
    return m_copy_tags_isSet;
}

bool OAISchedule::is_copy_tags_Valid() const{
    return m_copy_tags_isValid;
}

QList OAISchedule::getTagsToAdd() const {
    return m_tags_to_add;
}
void OAISchedule::setTagsToAdd(const QList &tags_to_add) {
    m_tags_to_add = tags_to_add;
    m_tags_to_add_isSet = true;
}

bool OAISchedule::is_tags_to_add_Set() const{
    return m_tags_to_add_isSet;
}

bool OAISchedule::is_tags_to_add_Valid() const{
    return m_tags_to_add_isValid;
}

QList OAISchedule::getVariableTags() const {
    return m_variable_tags;
}
void OAISchedule::setVariableTags(const QList &variable_tags) {
    m_variable_tags = variable_tags;
    m_variable_tags_isSet = true;
}

bool OAISchedule::is_variable_tags_Set() const{
    return m_variable_tags_isSet;
}

bool OAISchedule::is_variable_tags_Valid() const{
    return m_variable_tags_isValid;
}

OAISchedule_CreateRule OAISchedule::getCreateRule() const {
    return m_create_rule;
}
void OAISchedule::setCreateRule(const OAISchedule_CreateRule &create_rule) {
    m_create_rule = create_rule;
    m_create_rule_isSet = true;
}

bool OAISchedule::is_create_rule_Set() const{
    return m_create_rule_isSet;
}

bool OAISchedule::is_create_rule_Valid() const{
    return m_create_rule_isValid;
}

OAISchedule_RetainRule OAISchedule::getRetainRule() const {
    return m_retain_rule;
}
void OAISchedule::setRetainRule(const OAISchedule_RetainRule &retain_rule) {
    m_retain_rule = retain_rule;
    m_retain_rule_isSet = true;
}

bool OAISchedule::is_retain_rule_Set() const{
    return m_retain_rule_isSet;
}

bool OAISchedule::is_retain_rule_Valid() const{
    return m_retain_rule_isValid;
}

OAISchedule_FastRestoreRule OAISchedule::getFastRestoreRule() const {
    return m_fast_restore_rule;
}
void OAISchedule::setFastRestoreRule(const OAISchedule_FastRestoreRule &fast_restore_rule) {
    m_fast_restore_rule = fast_restore_rule;
    m_fast_restore_rule_isSet = true;
}

bool OAISchedule::is_fast_restore_rule_Set() const{
    return m_fast_restore_rule_isSet;
}

bool OAISchedule::is_fast_restore_rule_Valid() const{
    return m_fast_restore_rule_isValid;
}

QList OAISchedule::getCrossRegionCopyRules() const {
    return m_cross_region_copy_rules;
}
void OAISchedule::setCrossRegionCopyRules(const QList &cross_region_copy_rules) {
    m_cross_region_copy_rules = cross_region_copy_rules;
    m_cross_region_copy_rules_isSet = true;
}

bool OAISchedule::is_cross_region_copy_rules_Set() const{
    return m_cross_region_copy_rules_isSet;
}

bool OAISchedule::is_cross_region_copy_rules_Valid() const{
    return m_cross_region_copy_rules_isValid;
}

QList OAISchedule::getShareRules() const {
    return m_share_rules;
}
void OAISchedule::setShareRules(const QList &share_rules) {
    m_share_rules = share_rules;
    m_share_rules_isSet = true;
}

bool OAISchedule::is_share_rules_Set() const{
    return m_share_rules_isSet;
}

bool OAISchedule::is_share_rules_Valid() const{
    return m_share_rules_isValid;
}

OAISchedule_DeprecateRule OAISchedule::getDeprecateRule() const {
    return m_deprecate_rule;
}
void OAISchedule::setDeprecateRule(const OAISchedule_DeprecateRule &deprecate_rule) {
    m_deprecate_rule = deprecate_rule;
    m_deprecate_rule_isSet = true;
}

bool OAISchedule::is_deprecate_rule_Set() const{
    return m_deprecate_rule_isSet;
}

bool OAISchedule::is_deprecate_rule_Valid() const{
    return m_deprecate_rule_isValid;
}

OAISchedule_ArchiveRule OAISchedule::getArchiveRule() const {
    return m_archive_rule;
}
void OAISchedule::setArchiveRule(const OAISchedule_ArchiveRule &archive_rule) {
    m_archive_rule = archive_rule;
    m_archive_rule_isSet = true;
}

bool OAISchedule::is_archive_rule_Set() const{
    return m_archive_rule_isSet;
}

bool OAISchedule::is_archive_rule_Valid() const{
    return m_archive_rule_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_to_add.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fast_restore_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_region_copy_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecate_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
