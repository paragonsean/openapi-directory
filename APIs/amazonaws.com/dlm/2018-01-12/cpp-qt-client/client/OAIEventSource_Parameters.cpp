/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSource_Parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSource_Parameters::OAIEventSource_Parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSource_Parameters::OAIEventSource_Parameters() {
    this->initializeModel();
}

OAIEventSource_Parameters::~OAIEventSource_Parameters() {}

void OAIEventSource_Parameters::initializeModel() {

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_snapshot_owner_isSet = false;
    m_snapshot_owner_isValid = false;

    m_description_regex_isSet = false;
    m_description_regex_isValid = false;
}

void OAIEventSource_Parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSource_Parameters::fromJsonObject(QJsonObject json) {

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("EventType")]);
    m_event_type_isSet = !json[QString("EventType")].isNull() && m_event_type_isValid;

    m_snapshot_owner_isValid = ::OpenAPI::fromJsonValue(m_snapshot_owner, json[QString("SnapshotOwner")]);
    m_snapshot_owner_isSet = !json[QString("SnapshotOwner")].isNull() && m_snapshot_owner_isValid;

    m_description_regex_isValid = ::OpenAPI::fromJsonValue(m_description_regex, json[QString("DescriptionRegex")]);
    m_description_regex_isSet = !json[QString("DescriptionRegex")].isNull() && m_description_regex_isValid;
}

QString OAIEventSource_Parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSource_Parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type.isSet()) {
        obj.insert(QString("EventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_snapshot_owner.isSet()) {
        obj.insert(QString("SnapshotOwner"), ::OpenAPI::toJsonValue(m_snapshot_owner));
    }
    if (m_description_regex_isSet) {
        obj.insert(QString("DescriptionRegex"), ::OpenAPI::toJsonValue(m_description_regex));
    }
    return obj;
}

OAIEventTypeValues OAIEventSource_Parameters::getEventType() const {
    return m_event_type;
}
void OAIEventSource_Parameters::setEventType(const OAIEventTypeValues &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventSource_Parameters::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventSource_Parameters::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QList OAIEventSource_Parameters::getSnapshotOwner() const {
    return m_snapshot_owner;
}
void OAIEventSource_Parameters::setSnapshotOwner(const QList &snapshot_owner) {
    m_snapshot_owner = snapshot_owner;
    m_snapshot_owner_isSet = true;
}

bool OAIEventSource_Parameters::is_snapshot_owner_Set() const{
    return m_snapshot_owner_isSet;
}

bool OAIEventSource_Parameters::is_snapshot_owner_Valid() const{
    return m_snapshot_owner_isValid;
}

QString OAIEventSource_Parameters::getDescriptionRegex() const {
    return m_description_regex;
}
void OAIEventSource_Parameters::setDescriptionRegex(const QString &description_regex) {
    m_description_regex = description_regex;
    m_description_regex_isSet = true;
}

bool OAIEventSource_Parameters::is_description_regex_Set() const{
    return m_description_regex_isSet;
}

bool OAIEventSource_Parameters::is_description_regex_Valid() const{
    return m_description_regex_isValid;
}

bool OAIEventSource_Parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_regex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSource_Parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && m_snapshot_owner_isValid && m_description_regex_isValid && true;
}

} // namespace OpenAPI
