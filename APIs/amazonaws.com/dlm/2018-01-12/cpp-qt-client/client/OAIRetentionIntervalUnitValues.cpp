/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetentionIntervalUnitValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetentionIntervalUnitValues::OAIRetentionIntervalUnitValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetentionIntervalUnitValues::OAIRetentionIntervalUnitValues() {
    this->initializeModel();
}

OAIRetentionIntervalUnitValues::~OAIRetentionIntervalUnitValues() {}

void OAIRetentionIntervalUnitValues::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRetentionIntervalUnitValues::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRetentionIntervalUnitValues::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DAYS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionIntervalUnitValues::DAYS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEEKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionIntervalUnitValues::WEEKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MONTHS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionIntervalUnitValues::MONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("YEARS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRetentionIntervalUnitValues::YEARS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRetentionIntervalUnitValues::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRetentionIntervalUnitValues::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRetentionIntervalUnitValues::DAYS:
            val = "DAYS";
            break;
        case eOAIRetentionIntervalUnitValues::WEEKS:
            val = "WEEKS";
            break;
        case eOAIRetentionIntervalUnitValues::MONTHS:
            val = "MONTHS";
            break;
        case eOAIRetentionIntervalUnitValues::YEARS:
            val = "YEARS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRetentionIntervalUnitValues::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRetentionIntervalUnitValues::eOAIRetentionIntervalUnitValues OAIRetentionIntervalUnitValues::getValue() const {
    return m_value;
}

void OAIRetentionIntervalUnitValues::setValue(const OAIRetentionIntervalUnitValues::eOAIRetentionIntervalUnitValues& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRetentionIntervalUnitValues::isSet() const {
    
    return m_value_isSet;
}

bool OAIRetentionIntervalUnitValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
