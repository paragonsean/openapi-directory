/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISchedule.h
 *
 *  &lt;b&gt;[Snapshot and AMI policies only]&lt;/b&gt; Specifies a schedule for a snapshot or AMI lifecycle policy.
 */

#ifndef OAISchedule_H
#define OAISchedule_H

#include <QJsonObject>

#include "OAISchedule_ArchiveRule.h"
#include "OAISchedule_CreateRule.h"
#include "OAISchedule_DeprecateRule.h"
#include "OAISchedule_FastRestoreRule.h"
#include "OAISchedule_RetainRule.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISchedule_CreateRule;
class OAISchedule_RetainRule;
class OAISchedule_FastRestoreRule;
class OAISchedule_DeprecateRule;
class OAISchedule_ArchiveRule;

class OAISchedule : public OAIObject {
public:
    OAISchedule();
    OAISchedule(QString json);
    ~OAISchedule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool getCopyTags() const;
    void setCopyTags(const bool &copy_tags);
    bool is_copy_tags_Set() const;
    bool is_copy_tags_Valid() const;

    QList getTagsToAdd() const;
    void setTagsToAdd(const QList &tags_to_add);
    bool is_tags_to_add_Set() const;
    bool is_tags_to_add_Valid() const;

    QList getVariableTags() const;
    void setVariableTags(const QList &variable_tags);
    bool is_variable_tags_Set() const;
    bool is_variable_tags_Valid() const;

    OAISchedule_CreateRule getCreateRule() const;
    void setCreateRule(const OAISchedule_CreateRule &create_rule);
    bool is_create_rule_Set() const;
    bool is_create_rule_Valid() const;

    OAISchedule_RetainRule getRetainRule() const;
    void setRetainRule(const OAISchedule_RetainRule &retain_rule);
    bool is_retain_rule_Set() const;
    bool is_retain_rule_Valid() const;

    OAISchedule_FastRestoreRule getFastRestoreRule() const;
    void setFastRestoreRule(const OAISchedule_FastRestoreRule &fast_restore_rule);
    bool is_fast_restore_rule_Set() const;
    bool is_fast_restore_rule_Valid() const;

    QList getCrossRegionCopyRules() const;
    void setCrossRegionCopyRules(const QList &cross_region_copy_rules);
    bool is_cross_region_copy_rules_Set() const;
    bool is_cross_region_copy_rules_Valid() const;

    QList getShareRules() const;
    void setShareRules(const QList &share_rules);
    bool is_share_rules_Set() const;
    bool is_share_rules_Valid() const;

    OAISchedule_DeprecateRule getDeprecateRule() const;
    void setDeprecateRule(const OAISchedule_DeprecateRule &deprecate_rule);
    bool is_deprecate_rule_Set() const;
    bool is_deprecate_rule_Valid() const;

    OAISchedule_ArchiveRule getArchiveRule() const;
    void setArchiveRule(const OAISchedule_ArchiveRule &archive_rule);
    bool is_archive_rule_Set() const;
    bool is_archive_rule_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_copy_tags;
    bool m_copy_tags_isSet;
    bool m_copy_tags_isValid;

    QList m_tags_to_add;
    bool m_tags_to_add_isSet;
    bool m_tags_to_add_isValid;

    QList m_variable_tags;
    bool m_variable_tags_isSet;
    bool m_variable_tags_isValid;

    OAISchedule_CreateRule m_create_rule;
    bool m_create_rule_isSet;
    bool m_create_rule_isValid;

    OAISchedule_RetainRule m_retain_rule;
    bool m_retain_rule_isSet;
    bool m_retain_rule_isValid;

    OAISchedule_FastRestoreRule m_fast_restore_rule;
    bool m_fast_restore_rule_isSet;
    bool m_fast_restore_rule_isValid;

    QList m_cross_region_copy_rules;
    bool m_cross_region_copy_rules_isSet;
    bool m_cross_region_copy_rules_isValid;

    QList m_share_rules;
    bool m_share_rules_isSet;
    bool m_share_rules_isValid;

    OAISchedule_DeprecateRule m_deprecate_rule;
    bool m_deprecate_rule_isSet;
    bool m_deprecate_rule_isValid;

    OAISchedule_ArchiveRule m_archive_rule;
    bool m_archive_rule_isSet;
    bool m_archive_rule_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISchedule)

#endif // OAISchedule_H
