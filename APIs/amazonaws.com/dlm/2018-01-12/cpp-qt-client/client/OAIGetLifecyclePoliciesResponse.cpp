/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetLifecyclePoliciesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetLifecyclePoliciesResponse::OAIGetLifecyclePoliciesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetLifecyclePoliciesResponse::OAIGetLifecyclePoliciesResponse() {
    this->initializeModel();
}

OAIGetLifecyclePoliciesResponse::~OAIGetLifecyclePoliciesResponse() {}

void OAIGetLifecyclePoliciesResponse::initializeModel() {

    m_policies_isSet = false;
    m_policies_isValid = false;
}

void OAIGetLifecyclePoliciesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetLifecyclePoliciesResponse::fromJsonObject(QJsonObject json) {

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("Policies")]);
    m_policies_isSet = !json[QString("Policies")].isNull() && m_policies_isValid;
}

QString OAIGetLifecyclePoliciesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetLifecyclePoliciesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_policies.isSet()) {
        obj.insert(QString("Policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    return obj;
}

QList OAIGetLifecyclePoliciesResponse::getPolicies() const {
    return m_policies;
}
void OAIGetLifecyclePoliciesResponse::setPolicies(const QList &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIGetLifecyclePoliciesResponse::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIGetLifecyclePoliciesResponse::is_policies_Valid() const{
    return m_policies_isValid;
}

bool OAIGetLifecyclePoliciesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetLifecyclePoliciesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
