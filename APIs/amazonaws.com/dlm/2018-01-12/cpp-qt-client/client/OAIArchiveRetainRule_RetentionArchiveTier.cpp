/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArchiveRetainRule_RetentionArchiveTier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArchiveRetainRule_RetentionArchiveTier::OAIArchiveRetainRule_RetentionArchiveTier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArchiveRetainRule_RetentionArchiveTier::OAIArchiveRetainRule_RetentionArchiveTier() {
    this->initializeModel();
}

OAIArchiveRetainRule_RetentionArchiveTier::~OAIArchiveRetainRule_RetentionArchiveTier() {}

void OAIArchiveRetainRule_RetentionArchiveTier::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_interval_unit_isSet = false;
    m_interval_unit_isValid = false;
}

void OAIArchiveRetainRule_RetentionArchiveTier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArchiveRetainRule_RetentionArchiveTier::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("Interval")]);
    m_interval_isSet = !json[QString("Interval")].isNull() && m_interval_isValid;

    m_interval_unit_isValid = ::OpenAPI::fromJsonValue(m_interval_unit, json[QString("IntervalUnit")]);
    m_interval_unit_isSet = !json[QString("IntervalUnit")].isNull() && m_interval_unit_isValid;
}

QString OAIArchiveRetainRule_RetentionArchiveTier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArchiveRetainRule_RetentionArchiveTier::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_interval_isSet) {
        obj.insert(QString("Interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_interval_unit.isSet()) {
        obj.insert(QString("IntervalUnit"), ::OpenAPI::toJsonValue(m_interval_unit));
    }
    return obj;
}

qint32 OAIArchiveRetainRule_RetentionArchiveTier::getCount() const {
    return m_count;
}
void OAIArchiveRetainRule_RetentionArchiveTier::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIArchiveRetainRule_RetentionArchiveTier::is_count_Set() const{
    return m_count_isSet;
}

bool OAIArchiveRetainRule_RetentionArchiveTier::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIArchiveRetainRule_RetentionArchiveTier::getInterval() const {
    return m_interval;
}
void OAIArchiveRetainRule_RetentionArchiveTier::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIArchiveRetainRule_RetentionArchiveTier::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIArchiveRetainRule_RetentionArchiveTier::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIRetentionIntervalUnitValues OAIArchiveRetainRule_RetentionArchiveTier::getIntervalUnit() const {
    return m_interval_unit;
}
void OAIArchiveRetainRule_RetentionArchiveTier::setIntervalUnit(const OAIRetentionIntervalUnitValues &interval_unit) {
    m_interval_unit = interval_unit;
    m_interval_unit_isSet = true;
}

bool OAIArchiveRetainRule_RetentionArchiveTier::is_interval_unit_Set() const{
    return m_interval_unit_isSet;
}

bool OAIArchiveRetainRule_RetentionArchiveTier::is_interval_unit_Valid() const{
    return m_interval_unit_isValid;
}

bool OAIArchiveRetainRule_RetentionArchiveTier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArchiveRetainRule_RetentionArchiveTier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
