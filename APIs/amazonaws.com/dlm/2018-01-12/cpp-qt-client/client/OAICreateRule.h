/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateRule.h
 *
 * &lt;p&gt; &lt;b&gt;[Snapshot and AMI policies only]&lt;/b&gt; Specifies when the policy should create snapshots or AMIs.&lt;/p&gt; &lt;note&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You must specify either &lt;b&gt;CronExpression&lt;/b&gt;, or &lt;b&gt;Interval&lt;/b&gt;, &lt;b&gt;IntervalUnit&lt;/b&gt;, and &lt;b&gt;Times&lt;/b&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need to specify an &lt;a&gt;ArchiveRule&lt;/a&gt; for the schedule, then you must specify a creation frequency of at least 28 days.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
 */

#ifndef OAICreateRule_H
#define OAICreateRule_H

#include <QJsonObject>

#include "OAIIntervalUnitValues.h"
#include "OAILocationValues.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateRule : public OAIObject {
public:
    OAICreateRule();
    OAICreateRule(QString json);
    ~OAICreateRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILocationValues getLocation() const;
    void setLocation(const OAILocationValues &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    OAIIntervalUnitValues getIntervalUnit() const;
    void setIntervalUnit(const OAIIntervalUnitValues &interval_unit);
    bool is_interval_unit_Set() const;
    bool is_interval_unit_Valid() const;

    QList getTimes() const;
    void setTimes(const QList &times);
    bool is_times_Set() const;
    bool is_times_Valid() const;

    QString getCronExpression() const;
    void setCronExpression(const QString &cron_expression);
    bool is_cron_expression_Set() const;
    bool is_cron_expression_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILocationValues m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    OAIIntervalUnitValues m_interval_unit;
    bool m_interval_unit_isSet;
    bool m_interval_unit_isValid;

    QList m_times;
    bool m_times_isSet;
    bool m_times_isValid;

    QString m_cron_expression;
    bool m_cron_expression_isSet;
    bool m_cron_expression_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateRule)

#endif // OAICreateRule_H
