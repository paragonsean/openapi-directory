/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLifecyclePolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLifecyclePolicy_request::OAICreateLifecyclePolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLifecyclePolicy_request::OAICreateLifecyclePolicy_request() {
    this->initializeModel();
}

OAICreateLifecyclePolicy_request::~OAICreateLifecyclePolicy_request() {}

void OAICreateLifecyclePolicy_request::initializeModel() {

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_policy_details_isSet = false;
    m_policy_details_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLifecyclePolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLifecyclePolicy_request::fromJsonObject(QJsonObject json) {

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_policy_details_isValid = ::OpenAPI::fromJsonValue(m_policy_details, json[QString("PolicyDetails")]);
    m_policy_details_isSet = !json[QString("PolicyDetails")].isNull() && m_policy_details_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateLifecyclePolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLifecyclePolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_policy_details.isSet()) {
        obj.insert(QString("PolicyDetails"), ::OpenAPI::toJsonValue(m_policy_details));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLifecyclePolicy_request::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAICreateLifecyclePolicy_request::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAICreateLifecyclePolicy_request::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAICreateLifecyclePolicy_request::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

QString OAICreateLifecyclePolicy_request::getDescription() const {
    return m_description;
}
void OAICreateLifecyclePolicy_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateLifecyclePolicy_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateLifecyclePolicy_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateLifecyclePolicy_request::getState() const {
    return m_state;
}
void OAICreateLifecyclePolicy_request::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateLifecyclePolicy_request::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateLifecyclePolicy_request::is_state_Valid() const{
    return m_state_isValid;
}

OAICreateLifecyclePolicy_request_PolicyDetails OAICreateLifecyclePolicy_request::getPolicyDetails() const {
    return m_policy_details;
}
void OAICreateLifecyclePolicy_request::setPolicyDetails(const OAICreateLifecyclePolicy_request_PolicyDetails &policy_details) {
    m_policy_details = policy_details;
    m_policy_details_isSet = true;
}

bool OAICreateLifecyclePolicy_request::is_policy_details_Set() const{
    return m_policy_details_isSet;
}

bool OAICreateLifecyclePolicy_request::is_policy_details_Valid() const{
    return m_policy_details_isValid;
}

QMap<QString, QString> OAICreateLifecyclePolicy_request::getTags() const {
    return m_tags;
}
void OAICreateLifecyclePolicy_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLifecyclePolicy_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLifecyclePolicy_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLifecyclePolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLifecyclePolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_execution_role_arn_isValid && m_description_isValid && m_state_isValid && m_policy_details_isValid && true;
}

} // namespace OpenAPI
