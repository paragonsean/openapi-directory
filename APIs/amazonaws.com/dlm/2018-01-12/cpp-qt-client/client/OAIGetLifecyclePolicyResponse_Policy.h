/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetLifecyclePolicyResponse_Policy.h
 *
 * 
 */

#ifndef OAIGetLifecyclePolicyResponse_Policy_H
#define OAIGetLifecyclePolicyResponse_Policy_H

#include <QJsonObject>

#include "OAIGettablePolicyStateValues.h"
#include "OAILifecyclePolicy_PolicyDetails.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILifecyclePolicy_PolicyDetails;

class OAIGetLifecyclePolicyResponse_Policy : public OAIObject {
public:
    OAIGetLifecyclePolicyResponse_Policy();
    OAIGetLifecyclePolicyResponse_Policy(QString json);
    ~OAIGetLifecyclePolicyResponse_Policy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPolicyId() const;
    void setPolicyId(const QString &policy_id);
    bool is_policy_id_Set() const;
    bool is_policy_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIGettablePolicyStateValues getState() const;
    void setState(const OAIGettablePolicyStateValues &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QString getExecutionRoleArn() const;
    void setExecutionRoleArn(const QString &execution_role_arn);
    bool is_execution_role_arn_Set() const;
    bool is_execution_role_arn_Valid() const;

    QDateTime getDateCreated() const;
    void setDateCreated(const QDateTime &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    QDateTime getDateModified() const;
    void setDateModified(const QDateTime &date_modified);
    bool is_date_modified_Set() const;
    bool is_date_modified_Valid() const;

    OAILifecyclePolicy_PolicyDetails getPolicyDetails() const;
    void setPolicyDetails(const OAILifecyclePolicy_PolicyDetails &policy_details);
    bool is_policy_details_Set() const;
    bool is_policy_details_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getPolicyArn() const;
    void setPolicyArn(const QString &policy_arn);
    bool is_policy_arn_Set() const;
    bool is_policy_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_policy_id;
    bool m_policy_id_isSet;
    bool m_policy_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIGettablePolicyStateValues m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QString m_execution_role_arn;
    bool m_execution_role_arn_isSet;
    bool m_execution_role_arn_isValid;

    QDateTime m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    QDateTime m_date_modified;
    bool m_date_modified_isSet;
    bool m_date_modified_isValid;

    OAILifecyclePolicy_PolicyDetails m_policy_details;
    bool m_policy_details_isSet;
    bool m_policy_details_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_policy_arn;
    bool m_policy_arn_isSet;
    bool m_policy_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetLifecyclePolicyResponse_Policy)

#endif // OAIGetLifecyclePolicyResponse_Policy_H
