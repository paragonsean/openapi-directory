/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRetainRule.h
 *
 * &lt;p&gt; &lt;b&gt;[Snapshot and AMI policies only]&lt;/b&gt; Specifies a retention rule for snapshots created by snapshot policies, or for AMIs created by AMI policies.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For snapshot policies that have an &lt;a&gt;ArchiveRule&lt;/a&gt;, this retention rule applies to standard tier retention. When the retention threshold is met, snapshots are moved from the standard to the archive tier.&lt;/p&gt; &lt;p&gt;For snapshot policies that do not have an &lt;b&gt;ArchiveRule&lt;/b&gt;, snapshots are permanently deleted when this retention threshold is met.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can retain snapshots based on either a count or a time interval.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Count-based retention&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You must specify &lt;b&gt;Count&lt;/b&gt;. If you specify an &lt;a&gt;ArchiveRule&lt;/a&gt; for the schedule, then you can specify a retention count of &lt;code&gt;0&lt;/code&gt; to archive snapshots immediately after creation. If you specify a &lt;a&gt;FastRestoreRule&lt;/a&gt;, &lt;a&gt;ShareRule&lt;/a&gt;, or a &lt;a&gt;CrossRegionCopyRule&lt;/a&gt;, then you must specify a retention count of &lt;code&gt;1&lt;/code&gt; or more.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Age-based retention&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You must specify &lt;b&gt;Interval&lt;/b&gt; and &lt;b&gt;IntervalUnit&lt;/b&gt;. If you specify an &lt;a&gt;ArchiveRule&lt;/a&gt; for the schedule, then you can specify a retention interval of &lt;code&gt;0&lt;/code&gt; days to archive snapshots immediately after creation. If you specify a &lt;a&gt;FastRestoreRule&lt;/a&gt;, &lt;a&gt;ShareRule&lt;/a&gt;, or a &lt;a&gt;CrossRegionCopyRule&lt;/a&gt;, then you must specify a retention interval of &lt;code&gt;1&lt;/code&gt; day or more.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAIRetainRule_H
#define OAIRetainRule_H

#include <QJsonObject>

#include "OAIRetentionIntervalUnitValues.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRetainRule : public OAIObject {
public:
    OAIRetainRule();
    OAIRetainRule(QString json);
    ~OAIRetainRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    OAIRetentionIntervalUnitValues getIntervalUnit() const;
    void setIntervalUnit(const OAIRetentionIntervalUnitValues &interval_unit);
    bool is_interval_unit_Set() const;
    bool is_interval_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    OAIRetentionIntervalUnitValues m_interval_unit;
    bool m_interval_unit_isSet;
    bool m_interval_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRetainRule)

#endif // OAIRetainRule_H
