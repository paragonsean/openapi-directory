/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrossRegionCopyAction_EncryptionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrossRegionCopyAction_EncryptionConfiguration::OAICrossRegionCopyAction_EncryptionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrossRegionCopyAction_EncryptionConfiguration::OAICrossRegionCopyAction_EncryptionConfiguration() {
    this->initializeModel();
}

OAICrossRegionCopyAction_EncryptionConfiguration::~OAICrossRegionCopyAction_EncryptionConfiguration() {}

void OAICrossRegionCopyAction_EncryptionConfiguration::initializeModel() {

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_cmk_arn_isSet = false;
    m_cmk_arn_isValid = false;
}

void OAICrossRegionCopyAction_EncryptionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrossRegionCopyAction_EncryptionConfiguration::fromJsonObject(QJsonObject json) {

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_cmk_arn_isValid = ::OpenAPI::fromJsonValue(m_cmk_arn, json[QString("CmkArn")]);
    m_cmk_arn_isSet = !json[QString("CmkArn")].isNull() && m_cmk_arn_isValid;
}

QString OAICrossRegionCopyAction_EncryptionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrossRegionCopyAction_EncryptionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_cmk_arn_isSet) {
        obj.insert(QString("CmkArn"), ::OpenAPI::toJsonValue(m_cmk_arn));
    }
    return obj;
}

bool OAICrossRegionCopyAction_EncryptionConfiguration::getEncrypted() const {
    return m_encrypted;
}
void OAICrossRegionCopyAction_EncryptionConfiguration::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAICrossRegionCopyAction_EncryptionConfiguration::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAICrossRegionCopyAction_EncryptionConfiguration::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAICrossRegionCopyAction_EncryptionConfiguration::getCmkArn() const {
    return m_cmk_arn;
}
void OAICrossRegionCopyAction_EncryptionConfiguration::setCmkArn(const QString &cmk_arn) {
    m_cmk_arn = cmk_arn;
    m_cmk_arn_isSet = true;
}

bool OAICrossRegionCopyAction_EncryptionConfiguration::is_cmk_arn_Set() const{
    return m_cmk_arn_isSet;
}

bool OAICrossRegionCopyAction_EncryptionConfiguration::is_cmk_arn_Valid() const{
    return m_cmk_arn_isValid;
}

bool OAICrossRegionCopyAction_EncryptionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cmk_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrossRegionCopyAction_EncryptionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encrypted_isValid && true;
}

} // namespace OpenAPI
