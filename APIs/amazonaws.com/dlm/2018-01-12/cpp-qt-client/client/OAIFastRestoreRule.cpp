/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFastRestoreRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFastRestoreRule::OAIFastRestoreRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFastRestoreRule::OAIFastRestoreRule() {
    this->initializeModel();
}

OAIFastRestoreRule::~OAIFastRestoreRule() {}

void OAIFastRestoreRule::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_interval_unit_isSet = false;
    m_interval_unit_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;
}

void OAIFastRestoreRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFastRestoreRule::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("Interval")]);
    m_interval_isSet = !json[QString("Interval")].isNull() && m_interval_isValid;

    m_interval_unit_isValid = ::OpenAPI::fromJsonValue(m_interval_unit, json[QString("IntervalUnit")]);
    m_interval_unit_isSet = !json[QString("IntervalUnit")].isNull() && m_interval_unit_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;
}

QString OAIFastRestoreRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFastRestoreRule::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_interval_isSet) {
        obj.insert(QString("Interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_interval_unit.isSet()) {
        obj.insert(QString("IntervalUnit"), ::OpenAPI::toJsonValue(m_interval_unit));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    return obj;
}

qint32 OAIFastRestoreRule::getCount() const {
    return m_count;
}
void OAIFastRestoreRule::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIFastRestoreRule::is_count_Set() const{
    return m_count_isSet;
}

bool OAIFastRestoreRule::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIFastRestoreRule::getInterval() const {
    return m_interval;
}
void OAIFastRestoreRule::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIFastRestoreRule::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIFastRestoreRule::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIRetentionIntervalUnitValues OAIFastRestoreRule::getIntervalUnit() const {
    return m_interval_unit;
}
void OAIFastRestoreRule::setIntervalUnit(const OAIRetentionIntervalUnitValues &interval_unit) {
    m_interval_unit = interval_unit;
    m_interval_unit_isSet = true;
}

bool OAIFastRestoreRule::is_interval_unit_Set() const{
    return m_interval_unit_isSet;
}

bool OAIFastRestoreRule::is_interval_unit_Valid() const{
    return m_interval_unit_isValid;
}

QList OAIFastRestoreRule::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIFastRestoreRule::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIFastRestoreRule::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIFastRestoreRule::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

bool OAIFastRestoreRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFastRestoreRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_availability_zones_isValid && true;
}

} // namespace OpenAPI
