/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIShareRule.h
 *
 *  &lt;b&gt;[Snapshot policies only]&lt;/b&gt; Specifies a rule for sharing snapshots across Amazon Web Services accounts.
 */

#ifndef OAIShareRule_H
#define OAIShareRule_H

#include <QJsonObject>

#include "OAIRetentionIntervalUnitValues.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIShareRule : public OAIObject {
public:
    OAIShareRule();
    OAIShareRule(QString json);
    ~OAIShareRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getTargetAccounts() const;
    void setTargetAccounts(const QList &target_accounts);
    bool is_target_accounts_Set() const;
    bool is_target_accounts_Valid() const;

    qint32 getUnshareInterval() const;
    void setUnshareInterval(const qint32 &unshare_interval);
    bool is_unshare_interval_Set() const;
    bool is_unshare_interval_Valid() const;

    OAIRetentionIntervalUnitValues getUnshareIntervalUnit() const;
    void setUnshareIntervalUnit(const OAIRetentionIntervalUnitValues &unshare_interval_unit);
    bool is_unshare_interval_unit_Set() const;
    bool is_unshare_interval_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_target_accounts;
    bool m_target_accounts_isSet;
    bool m_target_accounts_isValid;

    qint32 m_unshare_interval;
    bool m_unshare_interval_isSet;
    bool m_unshare_interval_isValid;

    OAIRetentionIntervalUnitValues m_unshare_interval_unit;
    bool m_unshare_interval_unit_isSet;
    bool m_unshare_interval_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIShareRule)

#endif // OAIShareRule_H
