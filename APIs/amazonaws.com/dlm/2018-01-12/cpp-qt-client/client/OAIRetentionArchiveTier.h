/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRetentionArchiveTier.h
 *
 * &lt;p&gt; &lt;b&gt;[Snapshot policies only]&lt;/b&gt; Describes the retention rule for archived snapshots. Once the archive retention threshold is met, the snapshots are permanently deleted from the archive tier.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The archive retention rule must retain snapshots in the archive tier for a minimum of 90 days.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For &lt;b&gt;count-based schedules&lt;/b&gt;, you must specify &lt;b&gt;Count&lt;/b&gt;. For &lt;b&gt;age-based schedules&lt;/b&gt;, you must specify &lt;b&gt;Interval&lt;/b&gt; and &lt;b&gt; IntervalUnit&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;For more information about using snapshot archiving, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-ami-policy.html#dlm-archive\&quot;&gt;Considerations for snapshot lifecycle policies&lt;/a&gt;.&lt;/p&gt;
 */

#ifndef OAIRetentionArchiveTier_H
#define OAIRetentionArchiveTier_H

#include <QJsonObject>

#include "OAIRetentionIntervalUnitValues.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRetentionArchiveTier : public OAIObject {
public:
    OAIRetentionArchiveTier();
    OAIRetentionArchiveTier(QString json);
    ~OAIRetentionArchiveTier() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    qint32 getInterval() const;
    void setInterval(const qint32 &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    OAIRetentionIntervalUnitValues getIntervalUnit() const;
    void setIntervalUnit(const OAIRetentionIntervalUnitValues &interval_unit);
    bool is_interval_unit_Set() const;
    bool is_interval_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    qint32 m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    OAIRetentionIntervalUnitValues m_interval_unit;
    bool m_interval_unit_isSet;
    bool m_interval_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRetentionArchiveTier)

#endif // OAIRetentionArchiveTier_H
