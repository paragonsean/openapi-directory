/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareRule::OAIShareRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareRule::OAIShareRule() {
    this->initializeModel();
}

OAIShareRule::~OAIShareRule() {}

void OAIShareRule::initializeModel() {

    m_target_accounts_isSet = false;
    m_target_accounts_isValid = false;

    m_unshare_interval_isSet = false;
    m_unshare_interval_isValid = false;

    m_unshare_interval_unit_isSet = false;
    m_unshare_interval_unit_isValid = false;
}

void OAIShareRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareRule::fromJsonObject(QJsonObject json) {

    m_target_accounts_isValid = ::OpenAPI::fromJsonValue(m_target_accounts, json[QString("TargetAccounts")]);
    m_target_accounts_isSet = !json[QString("TargetAccounts")].isNull() && m_target_accounts_isValid;

    m_unshare_interval_isValid = ::OpenAPI::fromJsonValue(m_unshare_interval, json[QString("UnshareInterval")]);
    m_unshare_interval_isSet = !json[QString("UnshareInterval")].isNull() && m_unshare_interval_isValid;

    m_unshare_interval_unit_isValid = ::OpenAPI::fromJsonValue(m_unshare_interval_unit, json[QString("UnshareIntervalUnit")]);
    m_unshare_interval_unit_isSet = !json[QString("UnshareIntervalUnit")].isNull() && m_unshare_interval_unit_isValid;
}

QString OAIShareRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareRule::asJsonObject() const {
    QJsonObject obj;
    if (m_target_accounts.isSet()) {
        obj.insert(QString("TargetAccounts"), ::OpenAPI::toJsonValue(m_target_accounts));
    }
    if (m_unshare_interval_isSet) {
        obj.insert(QString("UnshareInterval"), ::OpenAPI::toJsonValue(m_unshare_interval));
    }
    if (m_unshare_interval_unit.isSet()) {
        obj.insert(QString("UnshareIntervalUnit"), ::OpenAPI::toJsonValue(m_unshare_interval_unit));
    }
    return obj;
}

QList OAIShareRule::getTargetAccounts() const {
    return m_target_accounts;
}
void OAIShareRule::setTargetAccounts(const QList &target_accounts) {
    m_target_accounts = target_accounts;
    m_target_accounts_isSet = true;
}

bool OAIShareRule::is_target_accounts_Set() const{
    return m_target_accounts_isSet;
}

bool OAIShareRule::is_target_accounts_Valid() const{
    return m_target_accounts_isValid;
}

qint32 OAIShareRule::getUnshareInterval() const {
    return m_unshare_interval;
}
void OAIShareRule::setUnshareInterval(const qint32 &unshare_interval) {
    m_unshare_interval = unshare_interval;
    m_unshare_interval_isSet = true;
}

bool OAIShareRule::is_unshare_interval_Set() const{
    return m_unshare_interval_isSet;
}

bool OAIShareRule::is_unshare_interval_Valid() const{
    return m_unshare_interval_isValid;
}

OAIRetentionIntervalUnitValues OAIShareRule::getUnshareIntervalUnit() const {
    return m_unshare_interval_unit;
}
void OAIShareRule::setUnshareIntervalUnit(const OAIRetentionIntervalUnitValues &unshare_interval_unit) {
    m_unshare_interval_unit = unshare_interval_unit;
    m_unshare_interval_unit_isSet = true;
}

bool OAIShareRule::is_unshare_interval_unit_Set() const{
    return m_unshare_interval_unit_isSet;
}

bool OAIShareRule::is_unshare_interval_unit_Valid() const{
    return m_unshare_interval_unit_isValid;
}

bool OAIShareRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unshare_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unshare_interval_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_accounts_isValid && true;
}

} // namespace OpenAPI
