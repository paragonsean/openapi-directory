/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrossRegionCopyRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrossRegionCopyRule::OAICrossRegionCopyRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrossRegionCopyRule::OAICrossRegionCopyRule() {
    this->initializeModel();
}

OAICrossRegionCopyRule::~OAICrossRegionCopyRule() {}

void OAICrossRegionCopyRule::initializeModel() {

    m_target_region_isSet = false;
    m_target_region_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_cmk_arn_isSet = false;
    m_cmk_arn_isValid = false;

    m_copy_tags_isSet = false;
    m_copy_tags_isValid = false;

    m_retain_rule_isSet = false;
    m_retain_rule_isValid = false;

    m_deprecate_rule_isSet = false;
    m_deprecate_rule_isValid = false;
}

void OAICrossRegionCopyRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrossRegionCopyRule::fromJsonObject(QJsonObject json) {

    m_target_region_isValid = ::OpenAPI::fromJsonValue(m_target_region, json[QString("TargetRegion")]);
    m_target_region_isSet = !json[QString("TargetRegion")].isNull() && m_target_region_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_cmk_arn_isValid = ::OpenAPI::fromJsonValue(m_cmk_arn, json[QString("CmkArn")]);
    m_cmk_arn_isSet = !json[QString("CmkArn")].isNull() && m_cmk_arn_isValid;

    m_copy_tags_isValid = ::OpenAPI::fromJsonValue(m_copy_tags, json[QString("CopyTags")]);
    m_copy_tags_isSet = !json[QString("CopyTags")].isNull() && m_copy_tags_isValid;

    m_retain_rule_isValid = ::OpenAPI::fromJsonValue(m_retain_rule, json[QString("RetainRule")]);
    m_retain_rule_isSet = !json[QString("RetainRule")].isNull() && m_retain_rule_isValid;

    m_deprecate_rule_isValid = ::OpenAPI::fromJsonValue(m_deprecate_rule, json[QString("DeprecateRule")]);
    m_deprecate_rule_isSet = !json[QString("DeprecateRule")].isNull() && m_deprecate_rule_isValid;
}

QString OAICrossRegionCopyRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrossRegionCopyRule::asJsonObject() const {
    QJsonObject obj;
    if (m_target_region_isSet) {
        obj.insert(QString("TargetRegion"), ::OpenAPI::toJsonValue(m_target_region));
    }
    if (m_target_isSet) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_cmk_arn_isSet) {
        obj.insert(QString("CmkArn"), ::OpenAPI::toJsonValue(m_cmk_arn));
    }
    if (m_copy_tags_isSet) {
        obj.insert(QString("CopyTags"), ::OpenAPI::toJsonValue(m_copy_tags));
    }
    if (m_retain_rule.isSet()) {
        obj.insert(QString("RetainRule"), ::OpenAPI::toJsonValue(m_retain_rule));
    }
    if (m_deprecate_rule.isSet()) {
        obj.insert(QString("DeprecateRule"), ::OpenAPI::toJsonValue(m_deprecate_rule));
    }
    return obj;
}

QString OAICrossRegionCopyRule::getTargetRegion() const {
    return m_target_region;
}
void OAICrossRegionCopyRule::setTargetRegion(const QString &target_region) {
    m_target_region = target_region;
    m_target_region_isSet = true;
}

bool OAICrossRegionCopyRule::is_target_region_Set() const{
    return m_target_region_isSet;
}

bool OAICrossRegionCopyRule::is_target_region_Valid() const{
    return m_target_region_isValid;
}

QString OAICrossRegionCopyRule::getTarget() const {
    return m_target;
}
void OAICrossRegionCopyRule::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAICrossRegionCopyRule::is_target_Set() const{
    return m_target_isSet;
}

bool OAICrossRegionCopyRule::is_target_Valid() const{
    return m_target_isValid;
}

bool OAICrossRegionCopyRule::getEncrypted() const {
    return m_encrypted;
}
void OAICrossRegionCopyRule::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAICrossRegionCopyRule::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAICrossRegionCopyRule::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAICrossRegionCopyRule::getCmkArn() const {
    return m_cmk_arn;
}
void OAICrossRegionCopyRule::setCmkArn(const QString &cmk_arn) {
    m_cmk_arn = cmk_arn;
    m_cmk_arn_isSet = true;
}

bool OAICrossRegionCopyRule::is_cmk_arn_Set() const{
    return m_cmk_arn_isSet;
}

bool OAICrossRegionCopyRule::is_cmk_arn_Valid() const{
    return m_cmk_arn_isValid;
}

bool OAICrossRegionCopyRule::getCopyTags() const {
    return m_copy_tags;
}
void OAICrossRegionCopyRule::setCopyTags(const bool &copy_tags) {
    m_copy_tags = copy_tags;
    m_copy_tags_isSet = true;
}

bool OAICrossRegionCopyRule::is_copy_tags_Set() const{
    return m_copy_tags_isSet;
}

bool OAICrossRegionCopyRule::is_copy_tags_Valid() const{
    return m_copy_tags_isValid;
}

OAICrossRegionCopyRule_RetainRule OAICrossRegionCopyRule::getRetainRule() const {
    return m_retain_rule;
}
void OAICrossRegionCopyRule::setRetainRule(const OAICrossRegionCopyRule_RetainRule &retain_rule) {
    m_retain_rule = retain_rule;
    m_retain_rule_isSet = true;
}

bool OAICrossRegionCopyRule::is_retain_rule_Set() const{
    return m_retain_rule_isSet;
}

bool OAICrossRegionCopyRule::is_retain_rule_Valid() const{
    return m_retain_rule_isValid;
}

OAICrossRegionCopyRule_DeprecateRule OAICrossRegionCopyRule::getDeprecateRule() const {
    return m_deprecate_rule;
}
void OAICrossRegionCopyRule::setDeprecateRule(const OAICrossRegionCopyRule_DeprecateRule &deprecate_rule) {
    m_deprecate_rule = deprecate_rule;
    m_deprecate_rule_isSet = true;
}

bool OAICrossRegionCopyRule::is_deprecate_rule_Set() const{
    return m_deprecate_rule_isSet;
}

bool OAICrossRegionCopyRule::is_deprecate_rule_Valid() const{
    return m_deprecate_rule_isValid;
}

bool OAICrossRegionCopyRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cmk_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecate_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrossRegionCopyRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encrypted_isValid && true;
}

} // namespace OpenAPI
