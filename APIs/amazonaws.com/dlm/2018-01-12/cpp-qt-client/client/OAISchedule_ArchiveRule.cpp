/**
 * Amazon Data Lifecycle Manager
 * <fullname>Amazon Data Lifecycle Manager</fullname> <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create lifecycle policies, which are used to automate operations on the specified resources.</p> <p>Amazon Data Lifecycle Manager supports Amazon EBS volumes and snapshots. For information about using Amazon Data Lifecycle Manager with Amazon EBS, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html\"> Amazon Data Lifecycle Manager</a> in the <i>Amazon EC2 User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-01-12
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule_ArchiveRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule_ArchiveRule::OAISchedule_ArchiveRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule_ArchiveRule::OAISchedule_ArchiveRule() {
    this->initializeModel();
}

OAISchedule_ArchiveRule::~OAISchedule_ArchiveRule() {}

void OAISchedule_ArchiveRule::initializeModel() {

    m_retain_rule_isSet = false;
    m_retain_rule_isValid = false;
}

void OAISchedule_ArchiveRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule_ArchiveRule::fromJsonObject(QJsonObject json) {

    m_retain_rule_isValid = ::OpenAPI::fromJsonValue(m_retain_rule, json[QString("RetainRule")]);
    m_retain_rule_isSet = !json[QString("RetainRule")].isNull() && m_retain_rule_isValid;
}

QString OAISchedule_ArchiveRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule_ArchiveRule::asJsonObject() const {
    QJsonObject obj;
    if (m_retain_rule.isSet()) {
        obj.insert(QString("RetainRule"), ::OpenAPI::toJsonValue(m_retain_rule));
    }
    return obj;
}

OAIArchiveRule_RetainRule OAISchedule_ArchiveRule::getRetainRule() const {
    return m_retain_rule;
}
void OAISchedule_ArchiveRule::setRetainRule(const OAIArchiveRule_RetainRule &retain_rule) {
    m_retain_rule = retain_rule;
    m_retain_rule_isSet = true;
}

bool OAISchedule_ArchiveRule::is_retain_rule_Set() const{
    return m_retain_rule_isSet;
}

bool OAISchedule_ArchiveRule::is_retain_rule_Valid() const{
    return m_retain_rule_isValid;
}

bool OAISchedule_ArchiveRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_retain_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule_ArchiveRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_retain_rule_isValid && true;
}

} // namespace OpenAPI
