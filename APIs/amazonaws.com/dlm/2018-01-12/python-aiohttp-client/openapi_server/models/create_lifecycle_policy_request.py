# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_lifecycle_policy_request_policy_details import CreateLifecyclePolicyRequestPolicyDetails
import re
from openapi_server import util


class CreateLifecyclePolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_role_arn: str=None, description: str=None, state: str=None, policy_details: CreateLifecyclePolicyRequestPolicyDetails=None, tags: Dict[str, str]=None):
        """CreateLifecyclePolicyRequest - a model defined in OpenAPI

        :param execution_role_arn: The execution_role_arn of this CreateLifecyclePolicyRequest.
        :param description: The description of this CreateLifecyclePolicyRequest.
        :param state: The state of this CreateLifecyclePolicyRequest.
        :param policy_details: The policy_details of this CreateLifecyclePolicyRequest.
        :param tags: The tags of this CreateLifecyclePolicyRequest.
        """
        self.openapi_types = {
            'execution_role_arn': str,
            'description': str,
            'state': str,
            'policy_details': CreateLifecyclePolicyRequestPolicyDetails,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'execution_role_arn': 'ExecutionRoleArn',
            'description': 'Description',
            'state': 'State',
            'policy_details': 'PolicyDetails',
            'tags': 'Tags'
        }

        self._execution_role_arn = execution_role_arn
        self._description = description
        self._state = state
        self._policy_details = policy_details
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLifecyclePolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLifecyclePolicy_request of this CreateLifecyclePolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this CreateLifecyclePolicyRequest.

        The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.

        :return: The execution_role_arn of this CreateLifecyclePolicyRequest.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this CreateLifecyclePolicyRequest.

        The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.

        :param execution_role_arn: The execution_role_arn of this CreateLifecyclePolicyRequest.
        :type execution_role_arn: str
        """
        if execution_role_arn is None:
            raise ValueError("Invalid value for `execution_role_arn`, must not be `None`")
        if execution_role_arn is not None and len(execution_role_arn) > 2048:
            raise ValueError("Invalid value for `execution_role_arn`, length must be less than or equal to `2048`")
        if execution_role_arn is not None and len(execution_role_arn) < 0:
            raise ValueError("Invalid value for `execution_role_arn`, length must be greater than or equal to `0`")
        if execution_role_arn is not None and not re.search(r'arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role\/.*', execution_role_arn):
            raise ValueError("Invalid value for `execution_role_arn`, must be a follow pattern or equal to `/arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role\/.*/`")

        self._execution_role_arn = execution_role_arn

    @property
    def description(self):
        """Gets the description of this CreateLifecyclePolicyRequest.

        A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.

        :return: The description of this CreateLifecyclePolicyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLifecyclePolicyRequest.

        A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.

        :param description: The description of this CreateLifecyclePolicyRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'[0-9A-Za-z _-]+', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[0-9A-Za-z _-]+/`")

        self._description = description

    @property
    def state(self):
        """Gets the state of this CreateLifecyclePolicyRequest.

        The desired activation state of the lifecycle policy after creation.

        :return: The state of this CreateLifecyclePolicyRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateLifecyclePolicyRequest.

        The desired activation state of the lifecycle policy after creation.

        :param state: The state of this CreateLifecyclePolicyRequest.
        :type state: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def policy_details(self):
        """Gets the policy_details of this CreateLifecyclePolicyRequest.


        :return: The policy_details of this CreateLifecyclePolicyRequest.
        :rtype: CreateLifecyclePolicyRequestPolicyDetails
        """
        return self._policy_details

    @policy_details.setter
    def policy_details(self, policy_details):
        """Sets the policy_details of this CreateLifecyclePolicyRequest.


        :param policy_details: The policy_details of this CreateLifecyclePolicyRequest.
        :type policy_details: CreateLifecyclePolicyRequestPolicyDetails
        """
        if policy_details is None:
            raise ValueError("Invalid value for `policy_details`, must not be `None`")

        self._policy_details = policy_details

    @property
    def tags(self):
        """Gets the tags of this CreateLifecyclePolicyRequest.

        The tags to apply to the lifecycle policy during creation.

        :return: The tags of this CreateLifecyclePolicyRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLifecyclePolicyRequest.

        The tags to apply to the lifecycle policy during creation.

        :param tags: The tags of this CreateLifecyclePolicyRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
