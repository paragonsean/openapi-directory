# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.archive_rule_retain_rule import ArchiveRuleRetainRule
from openapi_server import util


class ArchiveRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, retain_rule: ArchiveRuleRetainRule=None):
        """ArchiveRule - a model defined in OpenAPI

        :param retain_rule: The retain_rule of this ArchiveRule.
        """
        self.openapi_types = {
            'retain_rule': ArchiveRuleRetainRule
        }

        self.attribute_map = {
            'retain_rule': 'RetainRule'
        }

        self._retain_rule = retain_rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchiveRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchiveRule of this ArchiveRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def retain_rule(self):
        """Gets the retain_rule of this ArchiveRule.


        :return: The retain_rule of this ArchiveRule.
        :rtype: ArchiveRuleRetainRule
        """
        return self._retain_rule

    @retain_rule.setter
    def retain_rule(self, retain_rule):
        """Sets the retain_rule of this ArchiveRule.


        :param retain_rule: The retain_rule of this ArchiveRule.
        :type retain_rule: ArchiveRuleRetainRule
        """
        if retain_rule is None:
            raise ValueError("Invalid value for `retain_rule`, must not be `None`")

        self._retain_rule = retain_rule
