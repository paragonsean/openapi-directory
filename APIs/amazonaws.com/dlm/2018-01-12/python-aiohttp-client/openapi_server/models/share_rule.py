# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retention_interval_unit_values import RetentionIntervalUnitValues
from openapi_server import util


class ShareRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_accounts: List=None, unshare_interval: int=None, unshare_interval_unit: RetentionIntervalUnitValues=None):
        """ShareRule - a model defined in OpenAPI

        :param target_accounts: The target_accounts of this ShareRule.
        :param unshare_interval: The unshare_interval of this ShareRule.
        :param unshare_interval_unit: The unshare_interval_unit of this ShareRule.
        """
        self.openapi_types = {
            'target_accounts': List,
            'unshare_interval': int,
            'unshare_interval_unit': RetentionIntervalUnitValues
        }

        self.attribute_map = {
            'target_accounts': 'TargetAccounts',
            'unshare_interval': 'UnshareInterval',
            'unshare_interval_unit': 'UnshareIntervalUnit'
        }

        self._target_accounts = target_accounts
        self._unshare_interval = unshare_interval
        self._unshare_interval_unit = unshare_interval_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareRule of this ShareRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_accounts(self):
        """Gets the target_accounts of this ShareRule.


        :return: The target_accounts of this ShareRule.
        :rtype: List
        """
        return self._target_accounts

    @target_accounts.setter
    def target_accounts(self, target_accounts):
        """Sets the target_accounts of this ShareRule.


        :param target_accounts: The target_accounts of this ShareRule.
        :type target_accounts: List
        """
        if target_accounts is None:
            raise ValueError("Invalid value for `target_accounts`, must not be `None`")

        self._target_accounts = target_accounts

    @property
    def unshare_interval(self):
        """Gets the unshare_interval of this ShareRule.


        :return: The unshare_interval of this ShareRule.
        :rtype: int
        """
        return self._unshare_interval

    @unshare_interval.setter
    def unshare_interval(self, unshare_interval):
        """Sets the unshare_interval of this ShareRule.


        :param unshare_interval: The unshare_interval of this ShareRule.
        :type unshare_interval: int
        """

        self._unshare_interval = unshare_interval

    @property
    def unshare_interval_unit(self):
        """Gets the unshare_interval_unit of this ShareRule.


        :return: The unshare_interval_unit of this ShareRule.
        :rtype: RetentionIntervalUnitValues
        """
        return self._unshare_interval_unit

    @unshare_interval_unit.setter
    def unshare_interval_unit(self, unshare_interval_unit):
        """Sets the unshare_interval_unit of this ShareRule.


        :param unshare_interval_unit: The unshare_interval_unit of this ShareRule.
        :type unshare_interval_unit: RetentionIntervalUnitValues
        """

        self._unshare_interval_unit = unshare_interval_unit
