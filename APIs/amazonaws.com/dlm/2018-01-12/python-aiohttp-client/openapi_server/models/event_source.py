# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_source_parameters import EventSourceParameters
from openapi_server.models.event_source_values import EventSourceValues
from openapi_server import util


class EventSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: EventSourceValues=None, parameters: EventSourceParameters=None):
        """EventSource - a model defined in OpenAPI

        :param type: The type of this EventSource.
        :param parameters: The parameters of this EventSource.
        """
        self.openapi_types = {
            'type': EventSourceValues,
            'parameters': EventSourceParameters
        }

        self.attribute_map = {
            'type': 'Type',
            'parameters': 'Parameters'
        }

        self._type = type
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSource of this EventSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this EventSource.


        :return: The type of this EventSource.
        :rtype: EventSourceValues
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventSource.


        :param type: The type of this EventSource.
        :type type: EventSourceValues
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def parameters(self):
        """Gets the parameters of this EventSource.


        :return: The parameters of this EventSource.
        :rtype: EventSourceParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this EventSource.


        :param parameters: The parameters of this EventSource.
        :type parameters: EventSourceParameters
        """

        self._parameters = parameters
