# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retention_interval_unit_values import RetentionIntervalUnitValues
from openapi_server import util


class ScheduleFastRestoreRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, interval: int=None, interval_unit: RetentionIntervalUnitValues=None, availability_zones: List=None):
        """ScheduleFastRestoreRule - a model defined in OpenAPI

        :param count: The count of this ScheduleFastRestoreRule.
        :param interval: The interval of this ScheduleFastRestoreRule.
        :param interval_unit: The interval_unit of this ScheduleFastRestoreRule.
        :param availability_zones: The availability_zones of this ScheduleFastRestoreRule.
        """
        self.openapi_types = {
            'count': int,
            'interval': int,
            'interval_unit': RetentionIntervalUnitValues,
            'availability_zones': List
        }

        self.attribute_map = {
            'count': 'Count',
            'interval': 'Interval',
            'interval_unit': 'IntervalUnit',
            'availability_zones': 'AvailabilityZones'
        }

        self._count = count
        self._interval = interval
        self._interval_unit = interval_unit
        self._availability_zones = availability_zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleFastRestoreRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Schedule_FastRestoreRule of this ScheduleFastRestoreRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ScheduleFastRestoreRule.


        :return: The count of this ScheduleFastRestoreRule.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ScheduleFastRestoreRule.


        :param count: The count of this ScheduleFastRestoreRule.
        :type count: int
        """

        self._count = count

    @property
    def interval(self):
        """Gets the interval of this ScheduleFastRestoreRule.


        :return: The interval of this ScheduleFastRestoreRule.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ScheduleFastRestoreRule.


        :param interval: The interval of this ScheduleFastRestoreRule.
        :type interval: int
        """

        self._interval = interval

    @property
    def interval_unit(self):
        """Gets the interval_unit of this ScheduleFastRestoreRule.


        :return: The interval_unit of this ScheduleFastRestoreRule.
        :rtype: RetentionIntervalUnitValues
        """
        return self._interval_unit

    @interval_unit.setter
    def interval_unit(self, interval_unit):
        """Sets the interval_unit of this ScheduleFastRestoreRule.


        :param interval_unit: The interval_unit of this ScheduleFastRestoreRule.
        :type interval_unit: RetentionIntervalUnitValues
        """

        self._interval_unit = interval_unit

    @property
    def availability_zones(self):
        """Gets the availability_zones of this ScheduleFastRestoreRule.


        :return: The availability_zones of this ScheduleFastRestoreRule.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this ScheduleFastRestoreRule.


        :param availability_zones: The availability_zones of this ScheduleFastRestoreRule.
        :type availability_zones: List
        """
        if availability_zones is None:
            raise ValueError("Invalid value for `availability_zones`, must not be `None`")

        self._availability_zones = availability_zones
