# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cross_region_copy_action_encryption_configuration import CrossRegionCopyActionEncryptionConfiguration
from openapi_server.models.cross_region_copy_retain_rule import CrossRegionCopyRetainRule
from openapi_server import util


class CrossRegionCopyAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target: str=None, encryption_configuration: CrossRegionCopyActionEncryptionConfiguration=None, retain_rule: CrossRegionCopyRetainRule=None):
        """CrossRegionCopyAction - a model defined in OpenAPI

        :param target: The target of this CrossRegionCopyAction.
        :param encryption_configuration: The encryption_configuration of this CrossRegionCopyAction.
        :param retain_rule: The retain_rule of this CrossRegionCopyAction.
        """
        self.openapi_types = {
            'target': str,
            'encryption_configuration': CrossRegionCopyActionEncryptionConfiguration,
            'retain_rule': CrossRegionCopyRetainRule
        }

        self.attribute_map = {
            'target': 'Target',
            'encryption_configuration': 'EncryptionConfiguration',
            'retain_rule': 'RetainRule'
        }

        self._target = target
        self._encryption_configuration = encryption_configuration
        self._retain_rule = retain_rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrossRegionCopyAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrossRegionCopyAction of this CrossRegionCopyAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target(self):
        """Gets the target of this CrossRegionCopyAction.


        :return: The target of this CrossRegionCopyAction.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CrossRegionCopyAction.


        :param target: The target of this CrossRegionCopyAction.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this CrossRegionCopyAction.


        :return: The encryption_configuration of this CrossRegionCopyAction.
        :rtype: CrossRegionCopyActionEncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this CrossRegionCopyAction.


        :param encryption_configuration: The encryption_configuration of this CrossRegionCopyAction.
        :type encryption_configuration: CrossRegionCopyActionEncryptionConfiguration
        """
        if encryption_configuration is None:
            raise ValueError("Invalid value for `encryption_configuration`, must not be `None`")

        self._encryption_configuration = encryption_configuration

    @property
    def retain_rule(self):
        """Gets the retain_rule of this CrossRegionCopyAction.


        :return: The retain_rule of this CrossRegionCopyAction.
        :rtype: CrossRegionCopyRetainRule
        """
        return self._retain_rule

    @retain_rule.setter
    def retain_rule(self, retain_rule):
        """Sets the retain_rule of this CrossRegionCopyAction.


        :param retain_rule: The retain_rule of this CrossRegionCopyAction.
        :type retain_rule: CrossRegionCopyRetainRule
        """

        self._retain_rule = retain_rule
