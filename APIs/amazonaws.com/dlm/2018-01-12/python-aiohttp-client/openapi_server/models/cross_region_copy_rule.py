# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cross_region_copy_rule_deprecate_rule import CrossRegionCopyRuleDeprecateRule
from openapi_server.models.cross_region_copy_rule_retain_rule import CrossRegionCopyRuleRetainRule
from openapi_server import util


class CrossRegionCopyRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_region: str=None, target: str=None, encrypted: bool=None, cmk_arn: str=None, copy_tags: bool=None, retain_rule: CrossRegionCopyRuleRetainRule=None, deprecate_rule: CrossRegionCopyRuleDeprecateRule=None):
        """CrossRegionCopyRule - a model defined in OpenAPI

        :param target_region: The target_region of this CrossRegionCopyRule.
        :param target: The target of this CrossRegionCopyRule.
        :param encrypted: The encrypted of this CrossRegionCopyRule.
        :param cmk_arn: The cmk_arn of this CrossRegionCopyRule.
        :param copy_tags: The copy_tags of this CrossRegionCopyRule.
        :param retain_rule: The retain_rule of this CrossRegionCopyRule.
        :param deprecate_rule: The deprecate_rule of this CrossRegionCopyRule.
        """
        self.openapi_types = {
            'target_region': str,
            'target': str,
            'encrypted': bool,
            'cmk_arn': str,
            'copy_tags': bool,
            'retain_rule': CrossRegionCopyRuleRetainRule,
            'deprecate_rule': CrossRegionCopyRuleDeprecateRule
        }

        self.attribute_map = {
            'target_region': 'TargetRegion',
            'target': 'Target',
            'encrypted': 'Encrypted',
            'cmk_arn': 'CmkArn',
            'copy_tags': 'CopyTags',
            'retain_rule': 'RetainRule',
            'deprecate_rule': 'DeprecateRule'
        }

        self._target_region = target_region
        self._target = target
        self._encrypted = encrypted
        self._cmk_arn = cmk_arn
        self._copy_tags = copy_tags
        self._retain_rule = retain_rule
        self._deprecate_rule = deprecate_rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrossRegionCopyRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrossRegionCopyRule of this CrossRegionCopyRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_region(self):
        """Gets the target_region of this CrossRegionCopyRule.


        :return: The target_region of this CrossRegionCopyRule.
        :rtype: str
        """
        return self._target_region

    @target_region.setter
    def target_region(self, target_region):
        """Sets the target_region of this CrossRegionCopyRule.


        :param target_region: The target_region of this CrossRegionCopyRule.
        :type target_region: str
        """

        self._target_region = target_region

    @property
    def target(self):
        """Gets the target of this CrossRegionCopyRule.


        :return: The target of this CrossRegionCopyRule.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this CrossRegionCopyRule.


        :param target: The target of this CrossRegionCopyRule.
        :type target: str
        """

        self._target = target

    @property
    def encrypted(self):
        """Gets the encrypted of this CrossRegionCopyRule.


        :return: The encrypted of this CrossRegionCopyRule.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this CrossRegionCopyRule.


        :param encrypted: The encrypted of this CrossRegionCopyRule.
        :type encrypted: bool
        """
        if encrypted is None:
            raise ValueError("Invalid value for `encrypted`, must not be `None`")

        self._encrypted = encrypted

    @property
    def cmk_arn(self):
        """Gets the cmk_arn of this CrossRegionCopyRule.


        :return: The cmk_arn of this CrossRegionCopyRule.
        :rtype: str
        """
        return self._cmk_arn

    @cmk_arn.setter
    def cmk_arn(self, cmk_arn):
        """Sets the cmk_arn of this CrossRegionCopyRule.


        :param cmk_arn: The cmk_arn of this CrossRegionCopyRule.
        :type cmk_arn: str
        """

        self._cmk_arn = cmk_arn

    @property
    def copy_tags(self):
        """Gets the copy_tags of this CrossRegionCopyRule.


        :return: The copy_tags of this CrossRegionCopyRule.
        :rtype: bool
        """
        return self._copy_tags

    @copy_tags.setter
    def copy_tags(self, copy_tags):
        """Sets the copy_tags of this CrossRegionCopyRule.


        :param copy_tags: The copy_tags of this CrossRegionCopyRule.
        :type copy_tags: bool
        """

        self._copy_tags = copy_tags

    @property
    def retain_rule(self):
        """Gets the retain_rule of this CrossRegionCopyRule.


        :return: The retain_rule of this CrossRegionCopyRule.
        :rtype: CrossRegionCopyRuleRetainRule
        """
        return self._retain_rule

    @retain_rule.setter
    def retain_rule(self, retain_rule):
        """Sets the retain_rule of this CrossRegionCopyRule.


        :param retain_rule: The retain_rule of this CrossRegionCopyRule.
        :type retain_rule: CrossRegionCopyRuleRetainRule
        """

        self._retain_rule = retain_rule

    @property
    def deprecate_rule(self):
        """Gets the deprecate_rule of this CrossRegionCopyRule.


        :return: The deprecate_rule of this CrossRegionCopyRule.
        :rtype: CrossRegionCopyRuleDeprecateRule
        """
        return self._deprecate_rule

    @deprecate_rule.setter
    def deprecate_rule(self, deprecate_rule):
        """Sets the deprecate_rule of this CrossRegionCopyRule.


        :param deprecate_rule: The deprecate_rule of this CrossRegionCopyRule.
        :type deprecate_rule: CrossRegionCopyRuleDeprecateRule
        """

        self._deprecate_rule = deprecate_rule
