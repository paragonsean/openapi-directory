# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, cross_region_copy: List=None):
        """Action - a model defined in OpenAPI

        :param name: The name of this Action.
        :param cross_region_copy: The cross_region_copy of this Action.
        """
        self.openapi_types = {
            'name': str,
            'cross_region_copy': List
        }

        self.attribute_map = {
            'name': 'Name',
            'cross_region_copy': 'CrossRegionCopy'
        }

        self._name = name
        self._cross_region_copy = cross_region_copy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Action.


        :return: The name of this Action.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Action.


        :param name: The name of this Action.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def cross_region_copy(self):
        """Gets the cross_region_copy of this Action.


        :return: The cross_region_copy of this Action.
        :rtype: List
        """
        return self._cross_region_copy

    @cross_region_copy.setter
    def cross_region_copy(self, cross_region_copy):
        """Sets the cross_region_copy of this Action.


        :param cross_region_copy: The cross_region_copy of this Action.
        :type cross_region_copy: List
        """
        if cross_region_copy is None:
            raise ValueError("Invalid value for `cross_region_copy`, must not be `None`")

        self._cross_region_copy = cross_region_copy
