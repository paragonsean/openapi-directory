# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_type_values import EventTypeValues
from openapi_server import util


class EventSourceParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type: EventTypeValues=None, snapshot_owner: List=None, description_regex: str=None):
        """EventSourceParameters - a model defined in OpenAPI

        :param event_type: The event_type of this EventSourceParameters.
        :param snapshot_owner: The snapshot_owner of this EventSourceParameters.
        :param description_regex: The description_regex of this EventSourceParameters.
        """
        self.openapi_types = {
            'event_type': EventTypeValues,
            'snapshot_owner': List,
            'description_regex': str
        }

        self.attribute_map = {
            'event_type': 'EventType',
            'snapshot_owner': 'SnapshotOwner',
            'description_regex': 'DescriptionRegex'
        }

        self._event_type = event_type
        self._snapshot_owner = snapshot_owner
        self._description_regex = description_regex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSourceParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSource_Parameters of this EventSourceParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self):
        """Gets the event_type of this EventSourceParameters.


        :return: The event_type of this EventSourceParameters.
        :rtype: EventTypeValues
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventSourceParameters.


        :param event_type: The event_type of this EventSourceParameters.
        :type event_type: EventTypeValues
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def snapshot_owner(self):
        """Gets the snapshot_owner of this EventSourceParameters.


        :return: The snapshot_owner of this EventSourceParameters.
        :rtype: List
        """
        return self._snapshot_owner

    @snapshot_owner.setter
    def snapshot_owner(self, snapshot_owner):
        """Sets the snapshot_owner of this EventSourceParameters.


        :param snapshot_owner: The snapshot_owner of this EventSourceParameters.
        :type snapshot_owner: List
        """
        if snapshot_owner is None:
            raise ValueError("Invalid value for `snapshot_owner`, must not be `None`")

        self._snapshot_owner = snapshot_owner

    @property
    def description_regex(self):
        """Gets the description_regex of this EventSourceParameters.


        :return: The description_regex of this EventSourceParameters.
        :rtype: str
        """
        return self._description_regex

    @description_regex.setter
    def description_regex(self, description_regex):
        """Sets the description_regex of this EventSourceParameters.


        :param description_regex: The description_regex of this EventSourceParameters.
        :type description_regex: str
        """
        if description_regex is None:
            raise ValueError("Invalid value for `description_regex`, must not be `None`")

        self._description_regex = description_regex
