/*
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.JobEventType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the type and time events occurred related to the Amazon Braket job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:00.885151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobEventDetails {
  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private JobEventType eventType;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_TIME_OF_EVENT = "timeOfEvent";
  @SerializedName(SERIALIZED_NAME_TIME_OF_EVENT)
  private OffsetDateTime timeOfEvent;

  public JobEventDetails() {
  }

  public JobEventDetails eventType(JobEventType eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public JobEventType getEventType() {
    return eventType;
  }

  public void setEventType(JobEventType eventType) {
    this.eventType = eventType;
  }


  public JobEventDetails message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public JobEventDetails timeOfEvent(OffsetDateTime timeOfEvent) {
    this.timeOfEvent = timeOfEvent;
    return this;
  }

  /**
   * Get timeOfEvent
   * @return timeOfEvent
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeOfEvent() {
    return timeOfEvent;
  }

  public void setTimeOfEvent(OffsetDateTime timeOfEvent) {
    this.timeOfEvent = timeOfEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobEventDetails jobEventDetails = (JobEventDetails) o;
    return Objects.equals(this.eventType, jobEventDetails.eventType) &&
        Objects.equals(this.message, jobEventDetails.message) &&
        Objects.equals(this.timeOfEvent, jobEventDetails.timeOfEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, message, timeOfEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobEventDetails {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    timeOfEvent: ").append(toIndentedString(timeOfEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventType");
    openapiFields.add("message");
    openapiFields.add("timeOfEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobEventDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobEventDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobEventDetails is not found in the empty JSON string", JobEventDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobEventDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobEventDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        JobEventType.validateJsonElement(jsonObj.get("eventType"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `timeOfEvent`
      if (jsonObj.get("timeOfEvent") != null && !jsonObj.get("timeOfEvent").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("timeOfEvent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobEventDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobEventDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobEventDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobEventDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<JobEventDetails>() {
           @Override
           public void write(JsonWriter out, JobEventDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobEventDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobEventDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobEventDetails
   * @throws IOException if the JSON string is invalid with respect to JobEventDetails
   */
  public static JobEventDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobEventDetails.class);
  }

  /**
   * Convert an instance of JobEventDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

