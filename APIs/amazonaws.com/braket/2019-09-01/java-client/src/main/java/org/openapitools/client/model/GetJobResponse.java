/*
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GetJobResponseAlgorithmSpecification;
import org.openapitools.client.model.GetJobResponseCheckpointConfig;
import org.openapitools.client.model.GetJobResponseDeviceConfig;
import org.openapitools.client.model.GetJobResponseInstanceConfig;
import org.openapitools.client.model.GetJobResponseOutputDataConfig;
import org.openapitools.client.model.GetJobResponseStoppingCondition;
import org.openapitools.client.model.JobPrimaryStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetJobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:00.885151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetJobResponse {
  public static final String SERIALIZED_NAME_ALGORITHM_SPECIFICATION = "algorithmSpecification";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_SPECIFICATION)
  private GetJobResponseAlgorithmSpecification algorithmSpecification;

  public static final String SERIALIZED_NAME_BILLABLE_DURATION = "billableDuration";
  @SerializedName(SERIALIZED_NAME_BILLABLE_DURATION)
  private Integer billableDuration;

  public static final String SERIALIZED_NAME_CHECKPOINT_CONFIG = "checkpointConfig";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_CONFIG)
  private GetJobResponseCheckpointConfig checkpointConfig;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEVICE_CONFIG = "deviceConfig";
  @SerializedName(SERIALIZED_NAME_DEVICE_CONFIG)
  private GetJobResponseDeviceConfig deviceConfig;

  public static final String SERIALIZED_NAME_ENDED_AT = "endedAt";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private OffsetDateTime endedAt;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List events;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_HYPER_PARAMETERS = "hyperParameters";
  @SerializedName(SERIALIZED_NAME_HYPER_PARAMETERS)
  private Map hyperParameters;

  public static final String SERIALIZED_NAME_INPUT_DATA_CONFIG = "inputDataConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_CONFIG)
  private List inputDataConfig;

  public static final String SERIALIZED_NAME_INSTANCE_CONFIG = "instanceConfig";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CONFIG)
  private GetJobResponseInstanceConfig instanceConfig;

  public static final String SERIALIZED_NAME_JOB_ARN = "jobArn";
  @SerializedName(SERIALIZED_NAME_JOB_ARN)
  private String jobArn;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_OUTPUT_DATA_CONFIG = "outputDataConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DATA_CONFIG)
  private GetJobResponseOutputDataConfig outputDataConfig;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobPrimaryStatus status;

  public static final String SERIALIZED_NAME_STOPPING_CONDITION = "stoppingCondition";
  @SerializedName(SERIALIZED_NAME_STOPPING_CONDITION)
  private GetJobResponseStoppingCondition stoppingCondition;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public GetJobResponse() {
  }

  public GetJobResponse algorithmSpecification(GetJobResponseAlgorithmSpecification algorithmSpecification) {
    this.algorithmSpecification = algorithmSpecification;
    return this;
  }

  /**
   * Get algorithmSpecification
   * @return algorithmSpecification
   */
  @javax.annotation.Nonnull
  public GetJobResponseAlgorithmSpecification getAlgorithmSpecification() {
    return algorithmSpecification;
  }

  public void setAlgorithmSpecification(GetJobResponseAlgorithmSpecification algorithmSpecification) {
    this.algorithmSpecification = algorithmSpecification;
  }


  public GetJobResponse billableDuration(Integer billableDuration) {
    this.billableDuration = billableDuration;
    return this;
  }

  /**
   * Get billableDuration
   * @return billableDuration
   */
  @javax.annotation.Nullable
  public Integer getBillableDuration() {
    return billableDuration;
  }

  public void setBillableDuration(Integer billableDuration) {
    this.billableDuration = billableDuration;
  }


  public GetJobResponse checkpointConfig(GetJobResponseCheckpointConfig checkpointConfig) {
    this.checkpointConfig = checkpointConfig;
    return this;
  }

  /**
   * Get checkpointConfig
   * @return checkpointConfig
   */
  @javax.annotation.Nullable
  public GetJobResponseCheckpointConfig getCheckpointConfig() {
    return checkpointConfig;
  }

  public void setCheckpointConfig(GetJobResponseCheckpointConfig checkpointConfig) {
    this.checkpointConfig = checkpointConfig;
  }


  public GetJobResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetJobResponse deviceConfig(GetJobResponseDeviceConfig deviceConfig) {
    this.deviceConfig = deviceConfig;
    return this;
  }

  /**
   * Get deviceConfig
   * @return deviceConfig
   */
  @javax.annotation.Nullable
  public GetJobResponseDeviceConfig getDeviceConfig() {
    return deviceConfig;
  }

  public void setDeviceConfig(GetJobResponseDeviceConfig deviceConfig) {
    this.deviceConfig = deviceConfig;
  }


  public GetJobResponse endedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * Get endedAt
   * @return endedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
  }


  public GetJobResponse events(List events) {
    this.events = events;
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List getEvents() {
    return events;
  }

  public void setEvents(List events) {
    this.events = events;
  }


  public GetJobResponse failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public GetJobResponse hyperParameters(Map hyperParameters) {
    this.hyperParameters = hyperParameters;
    return this;
  }

  /**
   * Get hyperParameters
   * @return hyperParameters
   */
  @javax.annotation.Nullable
  public Map getHyperParameters() {
    return hyperParameters;
  }

  public void setHyperParameters(Map hyperParameters) {
    this.hyperParameters = hyperParameters;
  }


  public GetJobResponse inputDataConfig(List inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
    return this;
  }

  /**
   * Get inputDataConfig
   * @return inputDataConfig
   */
  @javax.annotation.Nullable
  public List getInputDataConfig() {
    return inputDataConfig;
  }

  public void setInputDataConfig(List inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
  }


  public GetJobResponse instanceConfig(GetJobResponseInstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
    return this;
  }

  /**
   * Get instanceConfig
   * @return instanceConfig
   */
  @javax.annotation.Nonnull
  public GetJobResponseInstanceConfig getInstanceConfig() {
    return instanceConfig;
  }

  public void setInstanceConfig(GetJobResponseInstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
  }


  public GetJobResponse jobArn(String jobArn) {
    this.jobArn = jobArn;
    return this;
  }

  /**
   * Get jobArn
   * @return jobArn
   */
  @javax.annotation.Nonnull
  public String getJobArn() {
    return jobArn;
  }

  public void setJobArn(String jobArn) {
    this.jobArn = jobArn;
  }


  public GetJobResponse jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nonnull
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public GetJobResponse outputDataConfig(GetJobResponseOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
    return this;
  }

  /**
   * Get outputDataConfig
   * @return outputDataConfig
   */
  @javax.annotation.Nonnull
  public GetJobResponseOutputDataConfig getOutputDataConfig() {
    return outputDataConfig;
  }

  public void setOutputDataConfig(GetJobResponseOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
  }


  public GetJobResponse roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public GetJobResponse startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Get startedAt
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public GetJobResponse status(JobPrimaryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public JobPrimaryStatus getStatus() {
    return status;
  }

  public void setStatus(JobPrimaryStatus status) {
    this.status = status;
  }


  public GetJobResponse stoppingCondition(GetJobResponseStoppingCondition stoppingCondition) {
    this.stoppingCondition = stoppingCondition;
    return this;
  }

  /**
   * Get stoppingCondition
   * @return stoppingCondition
   */
  @javax.annotation.Nullable
  public GetJobResponseStoppingCondition getStoppingCondition() {
    return stoppingCondition;
  }

  public void setStoppingCondition(GetJobResponseStoppingCondition stoppingCondition) {
    this.stoppingCondition = stoppingCondition;
  }


  public GetJobResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetJobResponse getJobResponse = (GetJobResponse) o;
    return Objects.equals(this.algorithmSpecification, getJobResponse.algorithmSpecification) &&
        Objects.equals(this.billableDuration, getJobResponse.billableDuration) &&
        Objects.equals(this.checkpointConfig, getJobResponse.checkpointConfig) &&
        Objects.equals(this.createdAt, getJobResponse.createdAt) &&
        Objects.equals(this.deviceConfig, getJobResponse.deviceConfig) &&
        Objects.equals(this.endedAt, getJobResponse.endedAt) &&
        Objects.equals(this.events, getJobResponse.events) &&
        Objects.equals(this.failureReason, getJobResponse.failureReason) &&
        Objects.equals(this.hyperParameters, getJobResponse.hyperParameters) &&
        Objects.equals(this.inputDataConfig, getJobResponse.inputDataConfig) &&
        Objects.equals(this.instanceConfig, getJobResponse.instanceConfig) &&
        Objects.equals(this.jobArn, getJobResponse.jobArn) &&
        Objects.equals(this.jobName, getJobResponse.jobName) &&
        Objects.equals(this.outputDataConfig, getJobResponse.outputDataConfig) &&
        Objects.equals(this.roleArn, getJobResponse.roleArn) &&
        Objects.equals(this.startedAt, getJobResponse.startedAt) &&
        Objects.equals(this.status, getJobResponse.status) &&
        Objects.equals(this.stoppingCondition, getJobResponse.stoppingCondition) &&
        Objects.equals(this.tags, getJobResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithmSpecification, billableDuration, checkpointConfig, createdAt, deviceConfig, endedAt, events, failureReason, hyperParameters, inputDataConfig, instanceConfig, jobArn, jobName, outputDataConfig, roleArn, startedAt, status, stoppingCondition, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetJobResponse {\n");
    sb.append("    algorithmSpecification: ").append(toIndentedString(algorithmSpecification)).append("\n");
    sb.append("    billableDuration: ").append(toIndentedString(billableDuration)).append("\n");
    sb.append("    checkpointConfig: ").append(toIndentedString(checkpointConfig)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deviceConfig: ").append(toIndentedString(deviceConfig)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    hyperParameters: ").append(toIndentedString(hyperParameters)).append("\n");
    sb.append("    inputDataConfig: ").append(toIndentedString(inputDataConfig)).append("\n");
    sb.append("    instanceConfig: ").append(toIndentedString(instanceConfig)).append("\n");
    sb.append("    jobArn: ").append(toIndentedString(jobArn)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    outputDataConfig: ").append(toIndentedString(outputDataConfig)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stoppingCondition: ").append(toIndentedString(stoppingCondition)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithmSpecification");
    openapiFields.add("billableDuration");
    openapiFields.add("checkpointConfig");
    openapiFields.add("createdAt");
    openapiFields.add("deviceConfig");
    openapiFields.add("endedAt");
    openapiFields.add("events");
    openapiFields.add("failureReason");
    openapiFields.add("hyperParameters");
    openapiFields.add("inputDataConfig");
    openapiFields.add("instanceConfig");
    openapiFields.add("jobArn");
    openapiFields.add("jobName");
    openapiFields.add("outputDataConfig");
    openapiFields.add("roleArn");
    openapiFields.add("startedAt");
    openapiFields.add("status");
    openapiFields.add("stoppingCondition");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("algorithmSpecification");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("instanceConfig");
    openapiRequiredFields.add("jobArn");
    openapiRequiredFields.add("jobName");
    openapiRequiredFields.add("outputDataConfig");
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetJobResponse is not found in the empty JSON string", GetJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetJobResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `algorithmSpecification`
      GetJobResponseAlgorithmSpecification.validateJsonElement(jsonObj.get("algorithmSpecification"));
      // validate the optional field `billableDuration`
      if (jsonObj.get("billableDuration") != null && !jsonObj.get("billableDuration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("billableDuration"));
      }
      // validate the optional field `checkpointConfig`
      if (jsonObj.get("checkpointConfig") != null && !jsonObj.get("checkpointConfig").isJsonNull()) {
        GetJobResponseCheckpointConfig.validateJsonElement(jsonObj.get("checkpointConfig"));
      }
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the optional field `deviceConfig`
      if (jsonObj.get("deviceConfig") != null && !jsonObj.get("deviceConfig").isJsonNull()) {
        GetJobResponseDeviceConfig.validateJsonElement(jsonObj.get("deviceConfig"));
      }
      // validate the optional field `endedAt`
      if (jsonObj.get("endedAt") != null && !jsonObj.get("endedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endedAt"));
      }
      // validate the optional field `events`
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("events"));
      }
      // validate the optional field `failureReason`
      if (jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("failureReason"));
      }
      // validate the optional field `hyperParameters`
      if (jsonObj.get("hyperParameters") != null && !jsonObj.get("hyperParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("hyperParameters"));
      }
      // validate the optional field `inputDataConfig`
      if (jsonObj.get("inputDataConfig") != null && !jsonObj.get("inputDataConfig").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("inputDataConfig"));
      }
      // validate the required field `instanceConfig`
      GetJobResponseInstanceConfig.validateJsonElement(jsonObj.get("instanceConfig"));
      // validate the required field `jobArn`
      String.validateJsonElement(jsonObj.get("jobArn"));
      // validate the required field `jobName`
      String.validateJsonElement(jsonObj.get("jobName"));
      // validate the required field `outputDataConfig`
      GetJobResponseOutputDataConfig.validateJsonElement(jsonObj.get("outputDataConfig"));
      // validate the required field `roleArn`
      String.validateJsonElement(jsonObj.get("roleArn"));
      // validate the optional field `startedAt`
      if (jsonObj.get("startedAt") != null && !jsonObj.get("startedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startedAt"));
      }
      // validate the required field `status`
      JobPrimaryStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `stoppingCondition`
      if (jsonObj.get("stoppingCondition") != null && !jsonObj.get("stoppingCondition").isJsonNull()) {
        GetJobResponseStoppingCondition.validateJsonElement(jsonObj.get("stoppingCondition"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetJobResponse>() {
           @Override
           public void write(JsonWriter out, GetJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetJobResponse
   * @throws IOException if the JSON string is invalid with respect to GetJobResponse
   */
  public static GetJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetJobResponse.class);
  }

  /**
   * Convert an instance of GetJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

