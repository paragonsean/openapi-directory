/*
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeviceStatus;
import org.openapitools.client.model.DeviceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDeviceResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:00.885151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDeviceResponse {
  public static final String SERIALIZED_NAME_DEVICE_ARN = "deviceArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_ARN)
  private String deviceArn;

  public static final String SERIALIZED_NAME_DEVICE_CAPABILITIES = "deviceCapabilities";
  @SerializedName(SERIALIZED_NAME_DEVICE_CAPABILITIES)
  private String deviceCapabilities;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_STATUS = "deviceStatus";
  @SerializedName(SERIALIZED_NAME_DEVICE_STATUS)
  private DeviceStatus deviceStatus;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private DeviceType deviceType;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public GetDeviceResponse() {
  }

  public GetDeviceResponse deviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
    return this;
  }

  /**
   * Get deviceArn
   * @return deviceArn
   */
  @javax.annotation.Nonnull
  public String getDeviceArn() {
    return deviceArn;
  }

  public void setDeviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
  }


  public GetDeviceResponse deviceCapabilities(String deviceCapabilities) {
    this.deviceCapabilities = deviceCapabilities;
    return this;
  }

  /**
   * Get deviceCapabilities
   * @return deviceCapabilities
   */
  @javax.annotation.Nonnull
  public String getDeviceCapabilities() {
    return deviceCapabilities;
  }

  public void setDeviceCapabilities(String deviceCapabilities) {
    this.deviceCapabilities = deviceCapabilities;
  }


  public GetDeviceResponse deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Get deviceName
   * @return deviceName
   */
  @javax.annotation.Nonnull
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public GetDeviceResponse deviceStatus(DeviceStatus deviceStatus) {
    this.deviceStatus = deviceStatus;
    return this;
  }

  /**
   * Get deviceStatus
   * @return deviceStatus
   */
  @javax.annotation.Nonnull
  public DeviceStatus getDeviceStatus() {
    return deviceStatus;
  }

  public void setDeviceStatus(DeviceStatus deviceStatus) {
    this.deviceStatus = deviceStatus;
  }


  public GetDeviceResponse deviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @javax.annotation.Nonnull
  public DeviceType getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
  }


  public GetDeviceResponse providerName(String providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * Get providerName
   * @return providerName
   */
  @javax.annotation.Nonnull
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(String providerName) {
    this.providerName = providerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDeviceResponse getDeviceResponse = (GetDeviceResponse) o;
    return Objects.equals(this.deviceArn, getDeviceResponse.deviceArn) &&
        Objects.equals(this.deviceCapabilities, getDeviceResponse.deviceCapabilities) &&
        Objects.equals(this.deviceName, getDeviceResponse.deviceName) &&
        Objects.equals(this.deviceStatus, getDeviceResponse.deviceStatus) &&
        Objects.equals(this.deviceType, getDeviceResponse.deviceType) &&
        Objects.equals(this.providerName, getDeviceResponse.providerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceArn, deviceCapabilities, deviceName, deviceStatus, deviceType, providerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDeviceResponse {\n");
    sb.append("    deviceArn: ").append(toIndentedString(deviceArn)).append("\n");
    sb.append("    deviceCapabilities: ").append(toIndentedString(deviceCapabilities)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceStatus: ").append(toIndentedString(deviceStatus)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceArn");
    openapiFields.add("deviceCapabilities");
    openapiFields.add("deviceName");
    openapiFields.add("deviceStatus");
    openapiFields.add("deviceType");
    openapiFields.add("providerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deviceArn");
    openapiRequiredFields.add("deviceCapabilities");
    openapiRequiredFields.add("deviceName");
    openapiRequiredFields.add("deviceStatus");
    openapiRequiredFields.add("deviceType");
    openapiRequiredFields.add("providerName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDeviceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDeviceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDeviceResponse is not found in the empty JSON string", GetDeviceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDeviceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDeviceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDeviceResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `deviceArn`
      String.validateJsonElement(jsonObj.get("deviceArn"));
      // validate the required field `deviceCapabilities`
      String.validateJsonElement(jsonObj.get("deviceCapabilities"));
      // validate the required field `deviceName`
      String.validateJsonElement(jsonObj.get("deviceName"));
      // validate the required field `deviceStatus`
      DeviceStatus.validateJsonElement(jsonObj.get("deviceStatus"));
      // validate the required field `deviceType`
      DeviceType.validateJsonElement(jsonObj.get("deviceType"));
      // validate the required field `providerName`
      String.validateJsonElement(jsonObj.get("providerName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDeviceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDeviceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDeviceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDeviceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDeviceResponse>() {
           @Override
           public void write(JsonWriter out, GetDeviceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDeviceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDeviceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDeviceResponse
   * @throws IOException if the JSON string is invalid with respect to GetDeviceResponse
   */
  public static GetDeviceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDeviceResponse.class);
  }

  /**
   * Convert an instance of GetDeviceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

