/*
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets JobEventType
 */
@JsonAdapter(JobEventType.Adapter.class)
public enum JobEventType {
  
  WAITING_FOR_PRIORITY("WAITING_FOR_PRIORITY"),
  
  QUEUED_FOR_EXECUTION("QUEUED_FOR_EXECUTION"),
  
  STARTING_INSTANCE("STARTING_INSTANCE"),
  
  DOWNLOADING_DATA("DOWNLOADING_DATA"),
  
  RUNNING("RUNNING"),
  
  DEPRIORITIZED_DUE_TO_INACTIVITY("DEPRIORITIZED_DUE_TO_INACTIVITY"),
  
  UPLOADING_RESULTS("UPLOADING_RESULTS"),
  
  COMPLETED("COMPLETED"),
  
  FAILED("FAILED"),
  
  MAX_RUNTIME_EXCEEDED("MAX_RUNTIME_EXCEEDED"),
  
  CANCELLED("CANCELLED");

  private String value;

  JobEventType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static JobEventType fromValue(String value) {
    for (JobEventType b : JobEventType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<JobEventType> {
    @Override
    public void write(final JsonWriter jsonWriter, final JobEventType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public JobEventType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return JobEventType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    JobEventType.fromValue(value);
  }
}

