/*
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateQuantumTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:00.885151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateQuantumTaskRequest {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DEVICE_ARN = "deviceArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_ARN)
  private String deviceArn;

  public static final String SERIALIZED_NAME_DEVICE_PARAMETERS = "deviceParameters";
  @SerializedName(SERIALIZED_NAME_DEVICE_PARAMETERS)
  private String deviceParameters;

  public static final String SERIALIZED_NAME_JOB_TOKEN = "jobToken";
  @SerializedName(SERIALIZED_NAME_JOB_TOKEN)
  private String jobToken;

  public static final String SERIALIZED_NAME_OUTPUT_S3_BUCKET = "outputS3Bucket";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_BUCKET)
  private String outputS3Bucket;

  public static final String SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX = "outputS3KeyPrefix";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX)
  private String outputS3KeyPrefix;

  public static final String SERIALIZED_NAME_SHOTS = "shots";
  @SerializedName(SERIALIZED_NAME_SHOTS)
  private Integer shots;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateQuantumTaskRequest() {
  }

  public CreateQuantumTaskRequest action(String action) {
    this.action = action;
    return this;
  }

  /**
   * The action associated with the task.
   * @return action
   */
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public CreateQuantumTaskRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * The client token associated with the request.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateQuantumTaskRequest deviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
    return this;
  }

  /**
   * The ARN of the device to run the task on.
   * @return deviceArn
   */
  @javax.annotation.Nonnull
  public String getDeviceArn() {
    return deviceArn;
  }

  public void setDeviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
  }


  public CreateQuantumTaskRequest deviceParameters(String deviceParameters) {
    this.deviceParameters = deviceParameters;
    return this;
  }

  /**
   * The parameters for the device to run the task on.
   * @return deviceParameters
   */
  @javax.annotation.Nullable
  public String getDeviceParameters() {
    return deviceParameters;
  }

  public void setDeviceParameters(String deviceParameters) {
    this.deviceParameters = deviceParameters;
  }


  public CreateQuantumTaskRequest jobToken(String jobToken) {
    this.jobToken = jobToken;
    return this;
  }

  /**
   * The token for an Amazon Braket job that associates it with the quantum task.
   * @return jobToken
   */
  @javax.annotation.Nullable
  public String getJobToken() {
    return jobToken;
  }

  public void setJobToken(String jobToken) {
    this.jobToken = jobToken;
  }


  public CreateQuantumTaskRequest outputS3Bucket(String outputS3Bucket) {
    this.outputS3Bucket = outputS3Bucket;
    return this;
  }

  /**
   * The S3 bucket to store task result files in.
   * @return outputS3Bucket
   */
  @javax.annotation.Nonnull
  public String getOutputS3Bucket() {
    return outputS3Bucket;
  }

  public void setOutputS3Bucket(String outputS3Bucket) {
    this.outputS3Bucket = outputS3Bucket;
  }


  public CreateQuantumTaskRequest outputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
    return this;
  }

  /**
   * The key prefix for the location in the S3 bucket to store task results in.
   * @return outputS3KeyPrefix
   */
  @javax.annotation.Nonnull
  public String getOutputS3KeyPrefix() {
    return outputS3KeyPrefix;
  }

  public void setOutputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
  }


  public CreateQuantumTaskRequest shots(Integer shots) {
    this.shots = shots;
    return this;
  }

  /**
   * The number of shots to use for the task.
   * minimum: 0
   * @return shots
   */
  @javax.annotation.Nonnull
  public Integer getShots() {
    return shots;
  }

  public void setShots(Integer shots) {
    this.shots = shots;
  }


  public CreateQuantumTaskRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateQuantumTaskRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tags to be added to the quantum task you&#39;re creating.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateQuantumTaskRequest createQuantumTaskRequest = (CreateQuantumTaskRequest) o;
    return Objects.equals(this.action, createQuantumTaskRequest.action) &&
        Objects.equals(this.clientToken, createQuantumTaskRequest.clientToken) &&
        Objects.equals(this.deviceArn, createQuantumTaskRequest.deviceArn) &&
        Objects.equals(this.deviceParameters, createQuantumTaskRequest.deviceParameters) &&
        Objects.equals(this.jobToken, createQuantumTaskRequest.jobToken) &&
        Objects.equals(this.outputS3Bucket, createQuantumTaskRequest.outputS3Bucket) &&
        Objects.equals(this.outputS3KeyPrefix, createQuantumTaskRequest.outputS3KeyPrefix) &&
        Objects.equals(this.shots, createQuantumTaskRequest.shots) &&
        Objects.equals(this.tags, createQuantumTaskRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, clientToken, deviceArn, deviceParameters, jobToken, outputS3Bucket, outputS3KeyPrefix, shots, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateQuantumTaskRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    deviceArn: ").append(toIndentedString(deviceArn)).append("\n");
    sb.append("    deviceParameters: ").append(toIndentedString(deviceParameters)).append("\n");
    sb.append("    jobToken: ").append(toIndentedString(jobToken)).append("\n");
    sb.append("    outputS3Bucket: ").append(toIndentedString(outputS3Bucket)).append("\n");
    sb.append("    outputS3KeyPrefix: ").append(toIndentedString(outputS3KeyPrefix)).append("\n");
    sb.append("    shots: ").append(toIndentedString(shots)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("clientToken");
    openapiFields.add("deviceArn");
    openapiFields.add("deviceParameters");
    openapiFields.add("jobToken");
    openapiFields.add("outputS3Bucket");
    openapiFields.add("outputS3KeyPrefix");
    openapiFields.add("shots");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("clientToken");
    openapiRequiredFields.add("deviceArn");
    openapiRequiredFields.add("outputS3Bucket");
    openapiRequiredFields.add("outputS3KeyPrefix");
    openapiRequiredFields.add("shots");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateQuantumTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateQuantumTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateQuantumTaskRequest is not found in the empty JSON string", CreateQuantumTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateQuantumTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateQuantumTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateQuantumTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (!jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if (!jsonObj.get("deviceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceArn").toString()));
      }
      if ((jsonObj.get("deviceParameters") != null && !jsonObj.get("deviceParameters").isJsonNull()) && !jsonObj.get("deviceParameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceParameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceParameters").toString()));
      }
      if ((jsonObj.get("jobToken") != null && !jsonObj.get("jobToken").isJsonNull()) && !jsonObj.get("jobToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobToken").toString()));
      }
      if (!jsonObj.get("outputS3Bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputS3Bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputS3Bucket").toString()));
      }
      if (!jsonObj.get("outputS3KeyPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputS3KeyPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputS3KeyPrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateQuantumTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateQuantumTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateQuantumTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateQuantumTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateQuantumTaskRequest>() {
           @Override
           public void write(JsonWriter out, CreateQuantumTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateQuantumTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateQuantumTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateQuantumTaskRequest
   * @throws IOException if the JSON string is invalid with respect to CreateQuantumTaskRequest
   */
  public static CreateQuantumTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateQuantumTaskRequest.class);
  }

  /**
   * Convert an instance of CreateQuantumTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

