/*
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateJobRequestAlgorithmSpecification;
import org.openapitools.client.model.CreateJobRequestCheckpointConfig;
import org.openapitools.client.model.CreateJobRequestDeviceConfig;
import org.openapitools.client.model.CreateJobRequestInstanceConfig;
import org.openapitools.client.model.CreateJobRequestOutputDataConfig;
import org.openapitools.client.model.CreateJobRequestStoppingCondition;
import org.openapitools.client.model.InputFileConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:00.885151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateJobRequest {
  public static final String SERIALIZED_NAME_ALGORITHM_SPECIFICATION = "algorithmSpecification";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_SPECIFICATION)
  private CreateJobRequestAlgorithmSpecification algorithmSpecification;

  public static final String SERIALIZED_NAME_CHECKPOINT_CONFIG = "checkpointConfig";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_CONFIG)
  private CreateJobRequestCheckpointConfig checkpointConfig;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DEVICE_CONFIG = "deviceConfig";
  @SerializedName(SERIALIZED_NAME_DEVICE_CONFIG)
  private CreateJobRequestDeviceConfig deviceConfig;

  public static final String SERIALIZED_NAME_HYPER_PARAMETERS = "hyperParameters";
  @SerializedName(SERIALIZED_NAME_HYPER_PARAMETERS)
  private Map<String, String> hyperParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_INPUT_DATA_CONFIG = "inputDataConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_CONFIG)
  private List<InputFileConfig> inputDataConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCE_CONFIG = "instanceConfig";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CONFIG)
  private CreateJobRequestInstanceConfig instanceConfig;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_OUTPUT_DATA_CONFIG = "outputDataConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DATA_CONFIG)
  private CreateJobRequestOutputDataConfig outputDataConfig;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_STOPPING_CONDITION = "stoppingCondition";
  @SerializedName(SERIALIZED_NAME_STOPPING_CONDITION)
  private CreateJobRequestStoppingCondition stoppingCondition;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateJobRequest() {
  }

  public CreateJobRequest algorithmSpecification(CreateJobRequestAlgorithmSpecification algorithmSpecification) {
    this.algorithmSpecification = algorithmSpecification;
    return this;
  }

  /**
   * Get algorithmSpecification
   * @return algorithmSpecification
   */
  @javax.annotation.Nonnull
  public CreateJobRequestAlgorithmSpecification getAlgorithmSpecification() {
    return algorithmSpecification;
  }

  public void setAlgorithmSpecification(CreateJobRequestAlgorithmSpecification algorithmSpecification) {
    this.algorithmSpecification = algorithmSpecification;
  }


  public CreateJobRequest checkpointConfig(CreateJobRequestCheckpointConfig checkpointConfig) {
    this.checkpointConfig = checkpointConfig;
    return this;
  }

  /**
   * Get checkpointConfig
   * @return checkpointConfig
   */
  @javax.annotation.Nullable
  public CreateJobRequestCheckpointConfig getCheckpointConfig() {
    return checkpointConfig;
  }

  public void setCheckpointConfig(CreateJobRequestCheckpointConfig checkpointConfig) {
    this.checkpointConfig = checkpointConfig;
  }


  public CreateJobRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique token that guarantees that the call to this API is idempotent.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateJobRequest deviceConfig(CreateJobRequestDeviceConfig deviceConfig) {
    this.deviceConfig = deviceConfig;
    return this;
  }

  /**
   * Get deviceConfig
   * @return deviceConfig
   */
  @javax.annotation.Nonnull
  public CreateJobRequestDeviceConfig getDeviceConfig() {
    return deviceConfig;
  }

  public void setDeviceConfig(CreateJobRequestDeviceConfig deviceConfig) {
    this.deviceConfig = deviceConfig;
  }


  public CreateJobRequest hyperParameters(Map<String, String> hyperParameters) {
    this.hyperParameters = hyperParameters;
    return this;
  }

  public CreateJobRequest putHyperParametersItem(String key, String hyperParametersItem) {
    if (this.hyperParameters == null) {
      this.hyperParameters = new HashMap<>();
    }
    this.hyperParameters.put(key, hyperParametersItem);
    return this;
  }

  /**
   * Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the training job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.
   * @return hyperParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getHyperParameters() {
    return hyperParameters;
  }

  public void setHyperParameters(Map<String, String> hyperParameters) {
    this.hyperParameters = hyperParameters;
  }


  public CreateJobRequest inputDataConfig(List<InputFileConfig> inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
    return this;
  }

  public CreateJobRequest addInputDataConfigItem(InputFileConfig inputDataConfigItem) {
    if (this.inputDataConfig == null) {
      this.inputDataConfig = new ArrayList<>();
    }
    this.inputDataConfig.add(inputDataConfigItem);
    return this;
  }

  /**
   * A list of parameters that specify the name and type of input data and where it is located.
   * @return inputDataConfig
   */
  @javax.annotation.Nullable
  public List<InputFileConfig> getInputDataConfig() {
    return inputDataConfig;
  }

  public void setInputDataConfig(List<InputFileConfig> inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
  }


  public CreateJobRequest instanceConfig(CreateJobRequestInstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
    return this;
  }

  /**
   * Get instanceConfig
   * @return instanceConfig
   */
  @javax.annotation.Nonnull
  public CreateJobRequestInstanceConfig getInstanceConfig() {
    return instanceConfig;
  }

  public void setInstanceConfig(CreateJobRequestInstanceConfig instanceConfig) {
    this.instanceConfig = instanceConfig;
  }


  public CreateJobRequest jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * The name of the Amazon Braket job.
   * @return jobName
   */
  @javax.annotation.Nonnull
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public CreateJobRequest outputDataConfig(CreateJobRequestOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
    return this;
  }

  /**
   * Get outputDataConfig
   * @return outputDataConfig
   */
  @javax.annotation.Nonnull
  public CreateJobRequestOutputDataConfig getOutputDataConfig() {
    return outputDataConfig;
  }

  public void setOutputDataConfig(CreateJobRequestOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
  }


  public CreateJobRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the users&#39; s3 buckets.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateJobRequest stoppingCondition(CreateJobRequestStoppingCondition stoppingCondition) {
    this.stoppingCondition = stoppingCondition;
    return this;
  }

  /**
   * Get stoppingCondition
   * @return stoppingCondition
   */
  @javax.annotation.Nullable
  public CreateJobRequestStoppingCondition getStoppingCondition() {
    return stoppingCondition;
  }

  public void setStoppingCondition(CreateJobRequestStoppingCondition stoppingCondition) {
    this.stoppingCondition = stoppingCondition;
  }


  public CreateJobRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateJobRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateJobRequest createJobRequest = (CreateJobRequest) o;
    return Objects.equals(this.algorithmSpecification, createJobRequest.algorithmSpecification) &&
        Objects.equals(this.checkpointConfig, createJobRequest.checkpointConfig) &&
        Objects.equals(this.clientToken, createJobRequest.clientToken) &&
        Objects.equals(this.deviceConfig, createJobRequest.deviceConfig) &&
        Objects.equals(this.hyperParameters, createJobRequest.hyperParameters) &&
        Objects.equals(this.inputDataConfig, createJobRequest.inputDataConfig) &&
        Objects.equals(this.instanceConfig, createJobRequest.instanceConfig) &&
        Objects.equals(this.jobName, createJobRequest.jobName) &&
        Objects.equals(this.outputDataConfig, createJobRequest.outputDataConfig) &&
        Objects.equals(this.roleArn, createJobRequest.roleArn) &&
        Objects.equals(this.stoppingCondition, createJobRequest.stoppingCondition) &&
        Objects.equals(this.tags, createJobRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithmSpecification, checkpointConfig, clientToken, deviceConfig, hyperParameters, inputDataConfig, instanceConfig, jobName, outputDataConfig, roleArn, stoppingCondition, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateJobRequest {\n");
    sb.append("    algorithmSpecification: ").append(toIndentedString(algorithmSpecification)).append("\n");
    sb.append("    checkpointConfig: ").append(toIndentedString(checkpointConfig)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    deviceConfig: ").append(toIndentedString(deviceConfig)).append("\n");
    sb.append("    hyperParameters: ").append(toIndentedString(hyperParameters)).append("\n");
    sb.append("    inputDataConfig: ").append(toIndentedString(inputDataConfig)).append("\n");
    sb.append("    instanceConfig: ").append(toIndentedString(instanceConfig)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    outputDataConfig: ").append(toIndentedString(outputDataConfig)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    stoppingCondition: ").append(toIndentedString(stoppingCondition)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithmSpecification");
    openapiFields.add("checkpointConfig");
    openapiFields.add("clientToken");
    openapiFields.add("deviceConfig");
    openapiFields.add("hyperParameters");
    openapiFields.add("inputDataConfig");
    openapiFields.add("instanceConfig");
    openapiFields.add("jobName");
    openapiFields.add("outputDataConfig");
    openapiFields.add("roleArn");
    openapiFields.add("stoppingCondition");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("algorithmSpecification");
    openapiRequiredFields.add("clientToken");
    openapiRequiredFields.add("deviceConfig");
    openapiRequiredFields.add("instanceConfig");
    openapiRequiredFields.add("jobName");
    openapiRequiredFields.add("outputDataConfig");
    openapiRequiredFields.add("roleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateJobRequest is not found in the empty JSON string", CreateJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `algorithmSpecification`
      CreateJobRequestAlgorithmSpecification.validateJsonElement(jsonObj.get("algorithmSpecification"));
      // validate the optional field `checkpointConfig`
      if (jsonObj.get("checkpointConfig") != null && !jsonObj.get("checkpointConfig").isJsonNull()) {
        CreateJobRequestCheckpointConfig.validateJsonElement(jsonObj.get("checkpointConfig"));
      }
      if (!jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      // validate the required field `deviceConfig`
      CreateJobRequestDeviceConfig.validateJsonElement(jsonObj.get("deviceConfig"));
      if (jsonObj.get("inputDataConfig") != null && !jsonObj.get("inputDataConfig").isJsonNull()) {
        JsonArray jsonArrayinputDataConfig = jsonObj.getAsJsonArray("inputDataConfig");
        if (jsonArrayinputDataConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputDataConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputDataConfig` to be an array in the JSON string but got `%s`", jsonObj.get("inputDataConfig").toString()));
          }

          // validate the optional field `inputDataConfig` (array)
          for (int i = 0; i < jsonArrayinputDataConfig.size(); i++) {
            InputFileConfig.validateJsonElement(jsonArrayinputDataConfig.get(i));
          };
        }
      }
      // validate the required field `instanceConfig`
      CreateJobRequestInstanceConfig.validateJsonElement(jsonObj.get("instanceConfig"));
      if (!jsonObj.get("jobName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobName").toString()));
      }
      // validate the required field `outputDataConfig`
      CreateJobRequestOutputDataConfig.validateJsonElement(jsonObj.get("outputDataConfig"));
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      // validate the optional field `stoppingCondition`
      if (jsonObj.get("stoppingCondition") != null && !jsonObj.get("stoppingCondition").isJsonNull()) {
        CreateJobRequestStoppingCondition.validateJsonElement(jsonObj.get("stoppingCondition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateJobRequest
   */
  public static CreateJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateJobRequest.class);
  }

  /**
   * Convert an instance of CreateJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

