/*
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.QuantumTaskStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetQuantumTaskResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:00.885151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetQuantumTaskResponse {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEVICE_ARN = "deviceArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_ARN)
  private String deviceArn;

  public static final String SERIALIZED_NAME_DEVICE_PARAMETERS = "deviceParameters";
  @SerializedName(SERIALIZED_NAME_DEVICE_PARAMETERS)
  private String deviceParameters;

  public static final String SERIALIZED_NAME_ENDED_AT = "endedAt";
  @SerializedName(SERIALIZED_NAME_ENDED_AT)
  private OffsetDateTime endedAt;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_JOB_ARN = "jobArn";
  @SerializedName(SERIALIZED_NAME_JOB_ARN)
  private String jobArn;

  public static final String SERIALIZED_NAME_OUTPUT_S3_BUCKET = "outputS3Bucket";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_BUCKET)
  private String outputS3Bucket;

  public static final String SERIALIZED_NAME_OUTPUT_S3_DIRECTORY = "outputS3Directory";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_DIRECTORY)
  private String outputS3Directory;

  public static final String SERIALIZED_NAME_QUANTUM_TASK_ARN = "quantumTaskArn";
  @SerializedName(SERIALIZED_NAME_QUANTUM_TASK_ARN)
  private String quantumTaskArn;

  public static final String SERIALIZED_NAME_SHOTS = "shots";
  @SerializedName(SERIALIZED_NAME_SHOTS)
  private Integer shots;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private QuantumTaskStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public GetQuantumTaskResponse() {
  }

  public GetQuantumTaskResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetQuantumTaskResponse deviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
    return this;
  }

  /**
   * Get deviceArn
   * @return deviceArn
   */
  @javax.annotation.Nonnull
  public String getDeviceArn() {
    return deviceArn;
  }

  public void setDeviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
  }


  public GetQuantumTaskResponse deviceParameters(String deviceParameters) {
    this.deviceParameters = deviceParameters;
    return this;
  }

  /**
   * Get deviceParameters
   * @return deviceParameters
   */
  @javax.annotation.Nonnull
  public String getDeviceParameters() {
    return deviceParameters;
  }

  public void setDeviceParameters(String deviceParameters) {
    this.deviceParameters = deviceParameters;
  }


  public GetQuantumTaskResponse endedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
    return this;
  }

  /**
   * Get endedAt
   * @return endedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndedAt() {
    return endedAt;
  }

  public void setEndedAt(OffsetDateTime endedAt) {
    this.endedAt = endedAt;
  }


  public GetQuantumTaskResponse failureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public GetQuantumTaskResponse jobArn(String jobArn) {
    this.jobArn = jobArn;
    return this;
  }

  /**
   * Get jobArn
   * @return jobArn
   */
  @javax.annotation.Nullable
  public String getJobArn() {
    return jobArn;
  }

  public void setJobArn(String jobArn) {
    this.jobArn = jobArn;
  }


  public GetQuantumTaskResponse outputS3Bucket(String outputS3Bucket) {
    this.outputS3Bucket = outputS3Bucket;
    return this;
  }

  /**
   * Get outputS3Bucket
   * @return outputS3Bucket
   */
  @javax.annotation.Nonnull
  public String getOutputS3Bucket() {
    return outputS3Bucket;
  }

  public void setOutputS3Bucket(String outputS3Bucket) {
    this.outputS3Bucket = outputS3Bucket;
  }


  public GetQuantumTaskResponse outputS3Directory(String outputS3Directory) {
    this.outputS3Directory = outputS3Directory;
    return this;
  }

  /**
   * Get outputS3Directory
   * @return outputS3Directory
   */
  @javax.annotation.Nonnull
  public String getOutputS3Directory() {
    return outputS3Directory;
  }

  public void setOutputS3Directory(String outputS3Directory) {
    this.outputS3Directory = outputS3Directory;
  }


  public GetQuantumTaskResponse quantumTaskArn(String quantumTaskArn) {
    this.quantumTaskArn = quantumTaskArn;
    return this;
  }

  /**
   * Get quantumTaskArn
   * @return quantumTaskArn
   */
  @javax.annotation.Nonnull
  public String getQuantumTaskArn() {
    return quantumTaskArn;
  }

  public void setQuantumTaskArn(String quantumTaskArn) {
    this.quantumTaskArn = quantumTaskArn;
  }


  public GetQuantumTaskResponse shots(Integer shots) {
    this.shots = shots;
    return this;
  }

  /**
   * Get shots
   * @return shots
   */
  @javax.annotation.Nonnull
  public Integer getShots() {
    return shots;
  }

  public void setShots(Integer shots) {
    this.shots = shots;
  }


  public GetQuantumTaskResponse status(QuantumTaskStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public QuantumTaskStatus getStatus() {
    return status;
  }

  public void setStatus(QuantumTaskStatus status) {
    this.status = status;
  }


  public GetQuantumTaskResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetQuantumTaskResponse getQuantumTaskResponse = (GetQuantumTaskResponse) o;
    return Objects.equals(this.createdAt, getQuantumTaskResponse.createdAt) &&
        Objects.equals(this.deviceArn, getQuantumTaskResponse.deviceArn) &&
        Objects.equals(this.deviceParameters, getQuantumTaskResponse.deviceParameters) &&
        Objects.equals(this.endedAt, getQuantumTaskResponse.endedAt) &&
        Objects.equals(this.failureReason, getQuantumTaskResponse.failureReason) &&
        Objects.equals(this.jobArn, getQuantumTaskResponse.jobArn) &&
        Objects.equals(this.outputS3Bucket, getQuantumTaskResponse.outputS3Bucket) &&
        Objects.equals(this.outputS3Directory, getQuantumTaskResponse.outputS3Directory) &&
        Objects.equals(this.quantumTaskArn, getQuantumTaskResponse.quantumTaskArn) &&
        Objects.equals(this.shots, getQuantumTaskResponse.shots) &&
        Objects.equals(this.status, getQuantumTaskResponse.status) &&
        Objects.equals(this.tags, getQuantumTaskResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, deviceArn, deviceParameters, endedAt, failureReason, jobArn, outputS3Bucket, outputS3Directory, quantumTaskArn, shots, status, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetQuantumTaskResponse {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deviceArn: ").append(toIndentedString(deviceArn)).append("\n");
    sb.append("    deviceParameters: ").append(toIndentedString(deviceParameters)).append("\n");
    sb.append("    endedAt: ").append(toIndentedString(endedAt)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    jobArn: ").append(toIndentedString(jobArn)).append("\n");
    sb.append("    outputS3Bucket: ").append(toIndentedString(outputS3Bucket)).append("\n");
    sb.append("    outputS3Directory: ").append(toIndentedString(outputS3Directory)).append("\n");
    sb.append("    quantumTaskArn: ").append(toIndentedString(quantumTaskArn)).append("\n");
    sb.append("    shots: ").append(toIndentedString(shots)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("deviceArn");
    openapiFields.add("deviceParameters");
    openapiFields.add("endedAt");
    openapiFields.add("failureReason");
    openapiFields.add("jobArn");
    openapiFields.add("outputS3Bucket");
    openapiFields.add("outputS3Directory");
    openapiFields.add("quantumTaskArn");
    openapiFields.add("shots");
    openapiFields.add("status");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("deviceArn");
    openapiRequiredFields.add("deviceParameters");
    openapiRequiredFields.add("outputS3Bucket");
    openapiRequiredFields.add("outputS3Directory");
    openapiRequiredFields.add("quantumTaskArn");
    openapiRequiredFields.add("shots");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetQuantumTaskResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetQuantumTaskResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetQuantumTaskResponse is not found in the empty JSON string", GetQuantumTaskResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetQuantumTaskResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetQuantumTaskResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetQuantumTaskResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the required field `deviceArn`
      String.validateJsonElement(jsonObj.get("deviceArn"));
      // validate the required field `deviceParameters`
      String.validateJsonElement(jsonObj.get("deviceParameters"));
      // validate the optional field `endedAt`
      if (jsonObj.get("endedAt") != null && !jsonObj.get("endedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("endedAt"));
      }
      // validate the optional field `failureReason`
      if (jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("failureReason"));
      }
      // validate the optional field `jobArn`
      if (jsonObj.get("jobArn") != null && !jsonObj.get("jobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("jobArn"));
      }
      // validate the required field `outputS3Bucket`
      String.validateJsonElement(jsonObj.get("outputS3Bucket"));
      // validate the required field `outputS3Directory`
      String.validateJsonElement(jsonObj.get("outputS3Directory"));
      // validate the required field `quantumTaskArn`
      String.validateJsonElement(jsonObj.get("quantumTaskArn"));
      // validate the required field `shots`
      Integer.validateJsonElement(jsonObj.get("shots"));
      // validate the required field `status`
      QuantumTaskStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetQuantumTaskResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetQuantumTaskResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetQuantumTaskResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetQuantumTaskResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetQuantumTaskResponse>() {
           @Override
           public void write(JsonWriter out, GetQuantumTaskResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetQuantumTaskResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetQuantumTaskResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetQuantumTaskResponse
   * @throws IOException if the JSON string is invalid with respect to GetQuantumTaskResponse
   */
  public static GetQuantumTaskResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetQuantumTaskResponse.class);
  }

  /**
   * Convert an instance of GetQuantumTaskResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

