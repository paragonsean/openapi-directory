# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_status import DeviceStatus
from openapi_server.models.device_type import DeviceType
from openapi_server import util


class GetDeviceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_arn: str=None, device_capabilities: str=None, device_name: str=None, device_status: DeviceStatus=None, device_type: DeviceType=None, provider_name: str=None):
        """GetDeviceResponse - a model defined in OpenAPI

        :param device_arn: The device_arn of this GetDeviceResponse.
        :param device_capabilities: The device_capabilities of this GetDeviceResponse.
        :param device_name: The device_name of this GetDeviceResponse.
        :param device_status: The device_status of this GetDeviceResponse.
        :param device_type: The device_type of this GetDeviceResponse.
        :param provider_name: The provider_name of this GetDeviceResponse.
        """
        self.openapi_types = {
            'device_arn': str,
            'device_capabilities': str,
            'device_name': str,
            'device_status': DeviceStatus,
            'device_type': DeviceType,
            'provider_name': str
        }

        self.attribute_map = {
            'device_arn': 'deviceArn',
            'device_capabilities': 'deviceCapabilities',
            'device_name': 'deviceName',
            'device_status': 'deviceStatus',
            'device_type': 'deviceType',
            'provider_name': 'providerName'
        }

        self._device_arn = device_arn
        self._device_capabilities = device_capabilities
        self._device_name = device_name
        self._device_status = device_status
        self._device_type = device_type
        self._provider_name = provider_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDeviceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDeviceResponse of this GetDeviceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_arn(self):
        """Gets the device_arn of this GetDeviceResponse.


        :return: The device_arn of this GetDeviceResponse.
        :rtype: str
        """
        return self._device_arn

    @device_arn.setter
    def device_arn(self, device_arn):
        """Sets the device_arn of this GetDeviceResponse.


        :param device_arn: The device_arn of this GetDeviceResponse.
        :type device_arn: str
        """
        if device_arn is None:
            raise ValueError("Invalid value for `device_arn`, must not be `None`")

        self._device_arn = device_arn

    @property
    def device_capabilities(self):
        """Gets the device_capabilities of this GetDeviceResponse.


        :return: The device_capabilities of this GetDeviceResponse.
        :rtype: str
        """
        return self._device_capabilities

    @device_capabilities.setter
    def device_capabilities(self, device_capabilities):
        """Sets the device_capabilities of this GetDeviceResponse.


        :param device_capabilities: The device_capabilities of this GetDeviceResponse.
        :type device_capabilities: str
        """
        if device_capabilities is None:
            raise ValueError("Invalid value for `device_capabilities`, must not be `None`")

        self._device_capabilities = device_capabilities

    @property
    def device_name(self):
        """Gets the device_name of this GetDeviceResponse.


        :return: The device_name of this GetDeviceResponse.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this GetDeviceResponse.


        :param device_name: The device_name of this GetDeviceResponse.
        :type device_name: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")

        self._device_name = device_name

    @property
    def device_status(self):
        """Gets the device_status of this GetDeviceResponse.


        :return: The device_status of this GetDeviceResponse.
        :rtype: DeviceStatus
        """
        return self._device_status

    @device_status.setter
    def device_status(self, device_status):
        """Sets the device_status of this GetDeviceResponse.


        :param device_status: The device_status of this GetDeviceResponse.
        :type device_status: DeviceStatus
        """
        if device_status is None:
            raise ValueError("Invalid value for `device_status`, must not be `None`")

        self._device_status = device_status

    @property
    def device_type(self):
        """Gets the device_type of this GetDeviceResponse.


        :return: The device_type of this GetDeviceResponse.
        :rtype: DeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this GetDeviceResponse.


        :param device_type: The device_type of this GetDeviceResponse.
        :type device_type: DeviceType
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def provider_name(self):
        """Gets the provider_name of this GetDeviceResponse.


        :return: The provider_name of this GetDeviceResponse.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this GetDeviceResponse.


        :param provider_name: The provider_name of this GetDeviceResponse.
        :type provider_name: str
        """
        if provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")

        self._provider_name = provider_name
