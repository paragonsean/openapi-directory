# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_job_response_algorithm_specification import GetJobResponseAlgorithmSpecification
from openapi_server.models.get_job_response_checkpoint_config import GetJobResponseCheckpointConfig
from openapi_server.models.get_job_response_device_config import GetJobResponseDeviceConfig
from openapi_server.models.get_job_response_instance_config import GetJobResponseInstanceConfig
from openapi_server.models.get_job_response_output_data_config import GetJobResponseOutputDataConfig
from openapi_server.models.get_job_response_stopping_condition import GetJobResponseStoppingCondition
from openapi_server.models.job_primary_status import JobPrimaryStatus
from openapi_server import util


class GetJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm_specification: GetJobResponseAlgorithmSpecification=None, billable_duration: int=None, checkpoint_config: GetJobResponseCheckpointConfig=None, created_at: datetime=None, device_config: GetJobResponseDeviceConfig=None, ended_at: datetime=None, events: List=None, failure_reason: str=None, hyper_parameters: Dict=None, input_data_config: List=None, instance_config: GetJobResponseInstanceConfig=None, job_arn: str=None, job_name: str=None, output_data_config: GetJobResponseOutputDataConfig=None, role_arn: str=None, started_at: datetime=None, status: JobPrimaryStatus=None, stopping_condition: GetJobResponseStoppingCondition=None, tags: Dict=None):
        """GetJobResponse - a model defined in OpenAPI

        :param algorithm_specification: The algorithm_specification of this GetJobResponse.
        :param billable_duration: The billable_duration of this GetJobResponse.
        :param checkpoint_config: The checkpoint_config of this GetJobResponse.
        :param created_at: The created_at of this GetJobResponse.
        :param device_config: The device_config of this GetJobResponse.
        :param ended_at: The ended_at of this GetJobResponse.
        :param events: The events of this GetJobResponse.
        :param failure_reason: The failure_reason of this GetJobResponse.
        :param hyper_parameters: The hyper_parameters of this GetJobResponse.
        :param input_data_config: The input_data_config of this GetJobResponse.
        :param instance_config: The instance_config of this GetJobResponse.
        :param job_arn: The job_arn of this GetJobResponse.
        :param job_name: The job_name of this GetJobResponse.
        :param output_data_config: The output_data_config of this GetJobResponse.
        :param role_arn: The role_arn of this GetJobResponse.
        :param started_at: The started_at of this GetJobResponse.
        :param status: The status of this GetJobResponse.
        :param stopping_condition: The stopping_condition of this GetJobResponse.
        :param tags: The tags of this GetJobResponse.
        """
        self.openapi_types = {
            'algorithm_specification': GetJobResponseAlgorithmSpecification,
            'billable_duration': int,
            'checkpoint_config': GetJobResponseCheckpointConfig,
            'created_at': datetime,
            'device_config': GetJobResponseDeviceConfig,
            'ended_at': datetime,
            'events': List,
            'failure_reason': str,
            'hyper_parameters': Dict,
            'input_data_config': List,
            'instance_config': GetJobResponseInstanceConfig,
            'job_arn': str,
            'job_name': str,
            'output_data_config': GetJobResponseOutputDataConfig,
            'role_arn': str,
            'started_at': datetime,
            'status': JobPrimaryStatus,
            'stopping_condition': GetJobResponseStoppingCondition,
            'tags': Dict
        }

        self.attribute_map = {
            'algorithm_specification': 'algorithmSpecification',
            'billable_duration': 'billableDuration',
            'checkpoint_config': 'checkpointConfig',
            'created_at': 'createdAt',
            'device_config': 'deviceConfig',
            'ended_at': 'endedAt',
            'events': 'events',
            'failure_reason': 'failureReason',
            'hyper_parameters': 'hyperParameters',
            'input_data_config': 'inputDataConfig',
            'instance_config': 'instanceConfig',
            'job_arn': 'jobArn',
            'job_name': 'jobName',
            'output_data_config': 'outputDataConfig',
            'role_arn': 'roleArn',
            'started_at': 'startedAt',
            'status': 'status',
            'stopping_condition': 'stoppingCondition',
            'tags': 'tags'
        }

        self._algorithm_specification = algorithm_specification
        self._billable_duration = billable_duration
        self._checkpoint_config = checkpoint_config
        self._created_at = created_at
        self._device_config = device_config
        self._ended_at = ended_at
        self._events = events
        self._failure_reason = failure_reason
        self._hyper_parameters = hyper_parameters
        self._input_data_config = input_data_config
        self._instance_config = instance_config
        self._job_arn = job_arn
        self._job_name = job_name
        self._output_data_config = output_data_config
        self._role_arn = role_arn
        self._started_at = started_at
        self._status = status
        self._stopping_condition = stopping_condition
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetJobResponse of this GetJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm_specification(self):
        """Gets the algorithm_specification of this GetJobResponse.


        :return: The algorithm_specification of this GetJobResponse.
        :rtype: GetJobResponseAlgorithmSpecification
        """
        return self._algorithm_specification

    @algorithm_specification.setter
    def algorithm_specification(self, algorithm_specification):
        """Sets the algorithm_specification of this GetJobResponse.


        :param algorithm_specification: The algorithm_specification of this GetJobResponse.
        :type algorithm_specification: GetJobResponseAlgorithmSpecification
        """
        if algorithm_specification is None:
            raise ValueError("Invalid value for `algorithm_specification`, must not be `None`")

        self._algorithm_specification = algorithm_specification

    @property
    def billable_duration(self):
        """Gets the billable_duration of this GetJobResponse.


        :return: The billable_duration of this GetJobResponse.
        :rtype: int
        """
        return self._billable_duration

    @billable_duration.setter
    def billable_duration(self, billable_duration):
        """Sets the billable_duration of this GetJobResponse.


        :param billable_duration: The billable_duration of this GetJobResponse.
        :type billable_duration: int
        """

        self._billable_duration = billable_duration

    @property
    def checkpoint_config(self):
        """Gets the checkpoint_config of this GetJobResponse.


        :return: The checkpoint_config of this GetJobResponse.
        :rtype: GetJobResponseCheckpointConfig
        """
        return self._checkpoint_config

    @checkpoint_config.setter
    def checkpoint_config(self, checkpoint_config):
        """Sets the checkpoint_config of this GetJobResponse.


        :param checkpoint_config: The checkpoint_config of this GetJobResponse.
        :type checkpoint_config: GetJobResponseCheckpointConfig
        """

        self._checkpoint_config = checkpoint_config

    @property
    def created_at(self):
        """Gets the created_at of this GetJobResponse.


        :return: The created_at of this GetJobResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetJobResponse.


        :param created_at: The created_at of this GetJobResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def device_config(self):
        """Gets the device_config of this GetJobResponse.


        :return: The device_config of this GetJobResponse.
        :rtype: GetJobResponseDeviceConfig
        """
        return self._device_config

    @device_config.setter
    def device_config(self, device_config):
        """Sets the device_config of this GetJobResponse.


        :param device_config: The device_config of this GetJobResponse.
        :type device_config: GetJobResponseDeviceConfig
        """

        self._device_config = device_config

    @property
    def ended_at(self):
        """Gets the ended_at of this GetJobResponse.


        :return: The ended_at of this GetJobResponse.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this GetJobResponse.


        :param ended_at: The ended_at of this GetJobResponse.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def events(self):
        """Gets the events of this GetJobResponse.


        :return: The events of this GetJobResponse.
        :rtype: List
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this GetJobResponse.


        :param events: The events of this GetJobResponse.
        :type events: List
        """

        self._events = events

    @property
    def failure_reason(self):
        """Gets the failure_reason of this GetJobResponse.


        :return: The failure_reason of this GetJobResponse.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this GetJobResponse.


        :param failure_reason: The failure_reason of this GetJobResponse.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def hyper_parameters(self):
        """Gets the hyper_parameters of this GetJobResponse.


        :return: The hyper_parameters of this GetJobResponse.
        :rtype: Dict
        """
        return self._hyper_parameters

    @hyper_parameters.setter
    def hyper_parameters(self, hyper_parameters):
        """Sets the hyper_parameters of this GetJobResponse.


        :param hyper_parameters: The hyper_parameters of this GetJobResponse.
        :type hyper_parameters: Dict
        """

        self._hyper_parameters = hyper_parameters

    @property
    def input_data_config(self):
        """Gets the input_data_config of this GetJobResponse.


        :return: The input_data_config of this GetJobResponse.
        :rtype: List
        """
        return self._input_data_config

    @input_data_config.setter
    def input_data_config(self, input_data_config):
        """Sets the input_data_config of this GetJobResponse.


        :param input_data_config: The input_data_config of this GetJobResponse.
        :type input_data_config: List
        """

        self._input_data_config = input_data_config

    @property
    def instance_config(self):
        """Gets the instance_config of this GetJobResponse.


        :return: The instance_config of this GetJobResponse.
        :rtype: GetJobResponseInstanceConfig
        """
        return self._instance_config

    @instance_config.setter
    def instance_config(self, instance_config):
        """Sets the instance_config of this GetJobResponse.


        :param instance_config: The instance_config of this GetJobResponse.
        :type instance_config: GetJobResponseInstanceConfig
        """
        if instance_config is None:
            raise ValueError("Invalid value for `instance_config`, must not be `None`")

        self._instance_config = instance_config

    @property
    def job_arn(self):
        """Gets the job_arn of this GetJobResponse.


        :return: The job_arn of this GetJobResponse.
        :rtype: str
        """
        return self._job_arn

    @job_arn.setter
    def job_arn(self, job_arn):
        """Sets the job_arn of this GetJobResponse.


        :param job_arn: The job_arn of this GetJobResponse.
        :type job_arn: str
        """
        if job_arn is None:
            raise ValueError("Invalid value for `job_arn`, must not be `None`")

        self._job_arn = job_arn

    @property
    def job_name(self):
        """Gets the job_name of this GetJobResponse.


        :return: The job_name of this GetJobResponse.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this GetJobResponse.


        :param job_name: The job_name of this GetJobResponse.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def output_data_config(self):
        """Gets the output_data_config of this GetJobResponse.


        :return: The output_data_config of this GetJobResponse.
        :rtype: GetJobResponseOutputDataConfig
        """
        return self._output_data_config

    @output_data_config.setter
    def output_data_config(self, output_data_config):
        """Sets the output_data_config of this GetJobResponse.


        :param output_data_config: The output_data_config of this GetJobResponse.
        :type output_data_config: GetJobResponseOutputDataConfig
        """
        if output_data_config is None:
            raise ValueError("Invalid value for `output_data_config`, must not be `None`")

        self._output_data_config = output_data_config

    @property
    def role_arn(self):
        """Gets the role_arn of this GetJobResponse.


        :return: The role_arn of this GetJobResponse.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this GetJobResponse.


        :param role_arn: The role_arn of this GetJobResponse.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def started_at(self):
        """Gets the started_at of this GetJobResponse.


        :return: The started_at of this GetJobResponse.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this GetJobResponse.


        :param started_at: The started_at of this GetJobResponse.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this GetJobResponse.


        :return: The status of this GetJobResponse.
        :rtype: JobPrimaryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetJobResponse.


        :param status: The status of this GetJobResponse.
        :type status: JobPrimaryStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def stopping_condition(self):
        """Gets the stopping_condition of this GetJobResponse.


        :return: The stopping_condition of this GetJobResponse.
        :rtype: GetJobResponseStoppingCondition
        """
        return self._stopping_condition

    @stopping_condition.setter
    def stopping_condition(self, stopping_condition):
        """Sets the stopping_condition of this GetJobResponse.


        :param stopping_condition: The stopping_condition of this GetJobResponse.
        :type stopping_condition: GetJobResponseStoppingCondition
        """

        self._stopping_condition = stopping_condition

    @property
    def tags(self):
        """Gets the tags of this GetJobResponse.


        :return: The tags of this GetJobResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetJobResponse.


        :param tags: The tags of this GetJobResponse.
        :type tags: Dict
        """

        self._tags = tags
