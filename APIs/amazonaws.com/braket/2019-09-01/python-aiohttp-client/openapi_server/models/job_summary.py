# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_primary_status import JobPrimaryStatus
from openapi_server import util


class JobSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, device: str=None, ended_at: datetime=None, job_arn: str=None, job_name: str=None, started_at: datetime=None, status: JobPrimaryStatus=None, tags: Dict=None):
        """JobSummary - a model defined in OpenAPI

        :param created_at: The created_at of this JobSummary.
        :param device: The device of this JobSummary.
        :param ended_at: The ended_at of this JobSummary.
        :param job_arn: The job_arn of this JobSummary.
        :param job_name: The job_name of this JobSummary.
        :param started_at: The started_at of this JobSummary.
        :param status: The status of this JobSummary.
        :param tags: The tags of this JobSummary.
        """
        self.openapi_types = {
            'created_at': datetime,
            'device': str,
            'ended_at': datetime,
            'job_arn': str,
            'job_name': str,
            'started_at': datetime,
            'status': JobPrimaryStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'device': 'device',
            'ended_at': 'endedAt',
            'job_arn': 'jobArn',
            'job_name': 'jobName',
            'started_at': 'startedAt',
            'status': 'status',
            'tags': 'tags'
        }

        self._created_at = created_at
        self._device = device
        self._ended_at = ended_at
        self._job_arn = job_arn
        self._job_name = job_name
        self._started_at = started_at
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobSummary of this JobSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this JobSummary.


        :return: The created_at of this JobSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this JobSummary.


        :param created_at: The created_at of this JobSummary.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def device(self):
        """Gets the device of this JobSummary.


        :return: The device of this JobSummary.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this JobSummary.


        :param device: The device of this JobSummary.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def ended_at(self):
        """Gets the ended_at of this JobSummary.


        :return: The ended_at of this JobSummary.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this JobSummary.


        :param ended_at: The ended_at of this JobSummary.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def job_arn(self):
        """Gets the job_arn of this JobSummary.


        :return: The job_arn of this JobSummary.
        :rtype: str
        """
        return self._job_arn

    @job_arn.setter
    def job_arn(self, job_arn):
        """Sets the job_arn of this JobSummary.


        :param job_arn: The job_arn of this JobSummary.
        :type job_arn: str
        """
        if job_arn is None:
            raise ValueError("Invalid value for `job_arn`, must not be `None`")

        self._job_arn = job_arn

    @property
    def job_name(self):
        """Gets the job_name of this JobSummary.


        :return: The job_name of this JobSummary.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this JobSummary.


        :param job_name: The job_name of this JobSummary.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def started_at(self):
        """Gets the started_at of this JobSummary.


        :return: The started_at of this JobSummary.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this JobSummary.


        :param started_at: The started_at of this JobSummary.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this JobSummary.


        :return: The status of this JobSummary.
        :rtype: JobPrimaryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobSummary.


        :param status: The status of this JobSummary.
        :type status: JobPrimaryStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this JobSummary.


        :return: The tags of this JobSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this JobSummary.


        :param tags: The tags of this JobSummary.
        :type tags: Dict
        """

        self._tags = tags
