# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.quantum_task_status import QuantumTaskStatus
from openapi_server import util


class GetQuantumTaskResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, device_arn: str=None, device_parameters: str=None, ended_at: datetime=None, failure_reason: str=None, job_arn: str=None, output_s3_bucket: str=None, output_s3_directory: str=None, quantum_task_arn: str=None, shots: int=None, status: QuantumTaskStatus=None, tags: Dict=None):
        """GetQuantumTaskResponse - a model defined in OpenAPI

        :param created_at: The created_at of this GetQuantumTaskResponse.
        :param device_arn: The device_arn of this GetQuantumTaskResponse.
        :param device_parameters: The device_parameters of this GetQuantumTaskResponse.
        :param ended_at: The ended_at of this GetQuantumTaskResponse.
        :param failure_reason: The failure_reason of this GetQuantumTaskResponse.
        :param job_arn: The job_arn of this GetQuantumTaskResponse.
        :param output_s3_bucket: The output_s3_bucket of this GetQuantumTaskResponse.
        :param output_s3_directory: The output_s3_directory of this GetQuantumTaskResponse.
        :param quantum_task_arn: The quantum_task_arn of this GetQuantumTaskResponse.
        :param shots: The shots of this GetQuantumTaskResponse.
        :param status: The status of this GetQuantumTaskResponse.
        :param tags: The tags of this GetQuantumTaskResponse.
        """
        self.openapi_types = {
            'created_at': datetime,
            'device_arn': str,
            'device_parameters': str,
            'ended_at': datetime,
            'failure_reason': str,
            'job_arn': str,
            'output_s3_bucket': str,
            'output_s3_directory': str,
            'quantum_task_arn': str,
            'shots': int,
            'status': QuantumTaskStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'device_arn': 'deviceArn',
            'device_parameters': 'deviceParameters',
            'ended_at': 'endedAt',
            'failure_reason': 'failureReason',
            'job_arn': 'jobArn',
            'output_s3_bucket': 'outputS3Bucket',
            'output_s3_directory': 'outputS3Directory',
            'quantum_task_arn': 'quantumTaskArn',
            'shots': 'shots',
            'status': 'status',
            'tags': 'tags'
        }

        self._created_at = created_at
        self._device_arn = device_arn
        self._device_parameters = device_parameters
        self._ended_at = ended_at
        self._failure_reason = failure_reason
        self._job_arn = job_arn
        self._output_s3_bucket = output_s3_bucket
        self._output_s3_directory = output_s3_directory
        self._quantum_task_arn = quantum_task_arn
        self._shots = shots
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetQuantumTaskResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetQuantumTaskResponse of this GetQuantumTaskResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this GetQuantumTaskResponse.


        :return: The created_at of this GetQuantumTaskResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetQuantumTaskResponse.


        :param created_at: The created_at of this GetQuantumTaskResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def device_arn(self):
        """Gets the device_arn of this GetQuantumTaskResponse.


        :return: The device_arn of this GetQuantumTaskResponse.
        :rtype: str
        """
        return self._device_arn

    @device_arn.setter
    def device_arn(self, device_arn):
        """Sets the device_arn of this GetQuantumTaskResponse.


        :param device_arn: The device_arn of this GetQuantumTaskResponse.
        :type device_arn: str
        """
        if device_arn is None:
            raise ValueError("Invalid value for `device_arn`, must not be `None`")

        self._device_arn = device_arn

    @property
    def device_parameters(self):
        """Gets the device_parameters of this GetQuantumTaskResponse.


        :return: The device_parameters of this GetQuantumTaskResponse.
        :rtype: str
        """
        return self._device_parameters

    @device_parameters.setter
    def device_parameters(self, device_parameters):
        """Sets the device_parameters of this GetQuantumTaskResponse.


        :param device_parameters: The device_parameters of this GetQuantumTaskResponse.
        :type device_parameters: str
        """
        if device_parameters is None:
            raise ValueError("Invalid value for `device_parameters`, must not be `None`")

        self._device_parameters = device_parameters

    @property
    def ended_at(self):
        """Gets the ended_at of this GetQuantumTaskResponse.


        :return: The ended_at of this GetQuantumTaskResponse.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this GetQuantumTaskResponse.


        :param ended_at: The ended_at of this GetQuantumTaskResponse.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def failure_reason(self):
        """Gets the failure_reason of this GetQuantumTaskResponse.


        :return: The failure_reason of this GetQuantumTaskResponse.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this GetQuantumTaskResponse.


        :param failure_reason: The failure_reason of this GetQuantumTaskResponse.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def job_arn(self):
        """Gets the job_arn of this GetQuantumTaskResponse.


        :return: The job_arn of this GetQuantumTaskResponse.
        :rtype: str
        """
        return self._job_arn

    @job_arn.setter
    def job_arn(self, job_arn):
        """Sets the job_arn of this GetQuantumTaskResponse.


        :param job_arn: The job_arn of this GetQuantumTaskResponse.
        :type job_arn: str
        """

        self._job_arn = job_arn

    @property
    def output_s3_bucket(self):
        """Gets the output_s3_bucket of this GetQuantumTaskResponse.


        :return: The output_s3_bucket of this GetQuantumTaskResponse.
        :rtype: str
        """
        return self._output_s3_bucket

    @output_s3_bucket.setter
    def output_s3_bucket(self, output_s3_bucket):
        """Sets the output_s3_bucket of this GetQuantumTaskResponse.


        :param output_s3_bucket: The output_s3_bucket of this GetQuantumTaskResponse.
        :type output_s3_bucket: str
        """
        if output_s3_bucket is None:
            raise ValueError("Invalid value for `output_s3_bucket`, must not be `None`")

        self._output_s3_bucket = output_s3_bucket

    @property
    def output_s3_directory(self):
        """Gets the output_s3_directory of this GetQuantumTaskResponse.


        :return: The output_s3_directory of this GetQuantumTaskResponse.
        :rtype: str
        """
        return self._output_s3_directory

    @output_s3_directory.setter
    def output_s3_directory(self, output_s3_directory):
        """Sets the output_s3_directory of this GetQuantumTaskResponse.


        :param output_s3_directory: The output_s3_directory of this GetQuantumTaskResponse.
        :type output_s3_directory: str
        """
        if output_s3_directory is None:
            raise ValueError("Invalid value for `output_s3_directory`, must not be `None`")

        self._output_s3_directory = output_s3_directory

    @property
    def quantum_task_arn(self):
        """Gets the quantum_task_arn of this GetQuantumTaskResponse.


        :return: The quantum_task_arn of this GetQuantumTaskResponse.
        :rtype: str
        """
        return self._quantum_task_arn

    @quantum_task_arn.setter
    def quantum_task_arn(self, quantum_task_arn):
        """Sets the quantum_task_arn of this GetQuantumTaskResponse.


        :param quantum_task_arn: The quantum_task_arn of this GetQuantumTaskResponse.
        :type quantum_task_arn: str
        """
        if quantum_task_arn is None:
            raise ValueError("Invalid value for `quantum_task_arn`, must not be `None`")

        self._quantum_task_arn = quantum_task_arn

    @property
    def shots(self):
        """Gets the shots of this GetQuantumTaskResponse.


        :return: The shots of this GetQuantumTaskResponse.
        :rtype: int
        """
        return self._shots

    @shots.setter
    def shots(self, shots):
        """Sets the shots of this GetQuantumTaskResponse.


        :param shots: The shots of this GetQuantumTaskResponse.
        :type shots: int
        """
        if shots is None:
            raise ValueError("Invalid value for `shots`, must not be `None`")

        self._shots = shots

    @property
    def status(self):
        """Gets the status of this GetQuantumTaskResponse.


        :return: The status of this GetQuantumTaskResponse.
        :rtype: QuantumTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetQuantumTaskResponse.


        :param status: The status of this GetQuantumTaskResponse.
        :type status: QuantumTaskStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this GetQuantumTaskResponse.


        :return: The tags of this GetQuantumTaskResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetQuantumTaskResponse.


        :param tags: The tags of this GetQuantumTaskResponse.
        :type tags: Dict
        """

        self._tags = tags
