# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cancellation_status import CancellationStatus
from openapi_server import util


class CancelQuantumTaskResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellation_status: CancellationStatus=None, quantum_task_arn: str=None):
        """CancelQuantumTaskResponse - a model defined in OpenAPI

        :param cancellation_status: The cancellation_status of this CancelQuantumTaskResponse.
        :param quantum_task_arn: The quantum_task_arn of this CancelQuantumTaskResponse.
        """
        self.openapi_types = {
            'cancellation_status': CancellationStatus,
            'quantum_task_arn': str
        }

        self.attribute_map = {
            'cancellation_status': 'cancellationStatus',
            'quantum_task_arn': 'quantumTaskArn'
        }

        self._cancellation_status = cancellation_status
        self._quantum_task_arn = quantum_task_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelQuantumTaskResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelQuantumTaskResponse of this CancelQuantumTaskResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellation_status(self):
        """Gets the cancellation_status of this CancelQuantumTaskResponse.


        :return: The cancellation_status of this CancelQuantumTaskResponse.
        :rtype: CancellationStatus
        """
        return self._cancellation_status

    @cancellation_status.setter
    def cancellation_status(self, cancellation_status):
        """Sets the cancellation_status of this CancelQuantumTaskResponse.


        :param cancellation_status: The cancellation_status of this CancelQuantumTaskResponse.
        :type cancellation_status: CancellationStatus
        """
        if cancellation_status is None:
            raise ValueError("Invalid value for `cancellation_status`, must not be `None`")

        self._cancellation_status = cancellation_status

    @property
    def quantum_task_arn(self):
        """Gets the quantum_task_arn of this CancelQuantumTaskResponse.


        :return: The quantum_task_arn of this CancelQuantumTaskResponse.
        :rtype: str
        """
        return self._quantum_task_arn

    @quantum_task_arn.setter
    def quantum_task_arn(self, quantum_task_arn):
        """Sets the quantum_task_arn of this CancelQuantumTaskResponse.


        :param quantum_task_arn: The quantum_task_arn of this CancelQuantumTaskResponse.
        :type quantum_task_arn: str
        """
        if quantum_task_arn is None:
            raise ValueError("Invalid value for `quantum_task_arn`, must not be `None`")

        self._quantum_task_arn = quantum_task_arn
