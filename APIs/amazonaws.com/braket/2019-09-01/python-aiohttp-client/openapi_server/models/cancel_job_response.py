# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cancellation_status import CancellationStatus
from openapi_server import util


class CancelJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellation_status: CancellationStatus=None, job_arn: str=None):
        """CancelJobResponse - a model defined in OpenAPI

        :param cancellation_status: The cancellation_status of this CancelJobResponse.
        :param job_arn: The job_arn of this CancelJobResponse.
        """
        self.openapi_types = {
            'cancellation_status': CancellationStatus,
            'job_arn': str
        }

        self.attribute_map = {
            'cancellation_status': 'cancellationStatus',
            'job_arn': 'jobArn'
        }

        self._cancellation_status = cancellation_status
        self._job_arn = job_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelJobResponse of this CancelJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellation_status(self):
        """Gets the cancellation_status of this CancelJobResponse.


        :return: The cancellation_status of this CancelJobResponse.
        :rtype: CancellationStatus
        """
        return self._cancellation_status

    @cancellation_status.setter
    def cancellation_status(self, cancellation_status):
        """Sets the cancellation_status of this CancelJobResponse.


        :param cancellation_status: The cancellation_status of this CancelJobResponse.
        :type cancellation_status: CancellationStatus
        """
        if cancellation_status is None:
            raise ValueError("Invalid value for `cancellation_status`, must not be `None`")

        self._cancellation_status = cancellation_status

    @property
    def job_arn(self):
        """Gets the job_arn of this CancelJobResponse.


        :return: The job_arn of this CancelJobResponse.
        :rtype: str
        """
        return self._job_arn

    @job_arn.setter
    def job_arn(self, job_arn):
        """Sets the job_arn of this CancelJobResponse.


        :param job_arn: The job_arn of this CancelJobResponse.
        :type job_arn: str
        """
        if job_arn is None:
            raise ValueError("Invalid value for `job_arn`, must not be `None`")

        self._job_arn = job_arn
