# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_jobs_filter import SearchJobsFilter
from openapi_server import util


class SearchJobsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[SearchJobsFilter]=None, max_results: int=None, next_token: str=None):
        """SearchJobsRequest - a model defined in OpenAPI

        :param filters: The filters of this SearchJobsRequest.
        :param max_results: The max_results of this SearchJobsRequest.
        :param next_token: The next_token of this SearchJobsRequest.
        """
        self.openapi_types = {
            'filters': List[SearchJobsFilter],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchJobsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchJobs_request of this SearchJobsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this SearchJobsRequest.

        The filter values to use when searching for a job.

        :return: The filters of this SearchJobsRequest.
        :rtype: List[SearchJobsFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SearchJobsRequest.

        The filter values to use when searching for a job.

        :param filters: The filters of this SearchJobsRequest.
        :type filters: List[SearchJobsFilter]
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")
        if filters is not None and len(filters) > 10:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `10`")
        if filters is not None and len(filters) < 0:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `0`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this SearchJobsRequest.

        The maximum number of results to return in the response.

        :return: The max_results of this SearchJobsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this SearchJobsRequest.

        The maximum number of results to return in the response.

        :param max_results: The max_results of this SearchJobsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this SearchJobsRequest.

        A token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.

        :return: The next_token of this SearchJobsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchJobsRequest.

        A token used for pagination of results returned in the response. Use the token returned from the previous request to continue results where the previous request ended.

        :param next_token: The next_token of this SearchJobsRequest.
        :type next_token: str
        """

        self._next_token = next_token
