# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compression_type import CompressionType
from openapi_server import util


class CreateJobRequestAlgorithmSpecificationScriptModeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compression_type: CompressionType=None, entry_point: str=None, s3_uri: str=None):
        """CreateJobRequestAlgorithmSpecificationScriptModeConfig - a model defined in OpenAPI

        :param compression_type: The compression_type of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        :param entry_point: The entry_point of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        :param s3_uri: The s3_uri of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        """
        self.openapi_types = {
            'compression_type': CompressionType,
            'entry_point': str,
            's3_uri': str
        }

        self.attribute_map = {
            'compression_type': 'compressionType',
            'entry_point': 'entryPoint',
            's3_uri': 's3Uri'
        }

        self._compression_type = compression_type
        self._entry_point = entry_point
        self._s3_uri = s3_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobRequestAlgorithmSpecificationScriptModeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJob_request_algorithmSpecification_scriptModeConfig of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compression_type(self):
        """Gets the compression_type of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.


        :return: The compression_type of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        :rtype: CompressionType
        """
        return self._compression_type

    @compression_type.setter
    def compression_type(self, compression_type):
        """Sets the compression_type of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.


        :param compression_type: The compression_type of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        :type compression_type: CompressionType
        """

        self._compression_type = compression_type

    @property
    def entry_point(self):
        """Gets the entry_point of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.


        :return: The entry_point of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.


        :param entry_point: The entry_point of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        :type entry_point: str
        """
        if entry_point is None:
            raise ValueError("Invalid value for `entry_point`, must not be `None`")

        self._entry_point = entry_point

    @property
    def s3_uri(self):
        """Gets the s3_uri of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.


        :return: The s3_uri of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        :rtype: str
        """
        return self._s3_uri

    @s3_uri.setter
    def s3_uri(self, s3_uri):
        """Sets the s3_uri of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.


        :param s3_uri: The s3_uri of this CreateJobRequestAlgorithmSpecificationScriptModeConfig.
        :type s3_uri: str
        """
        if s3_uri is None:
            raise ValueError("Invalid value for `s3_uri`, must not be `None`")

        self._s3_uri = s3_uri
