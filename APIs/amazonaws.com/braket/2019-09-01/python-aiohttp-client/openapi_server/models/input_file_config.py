# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_file_config_data_source import InputFileConfigDataSource
from openapi_server import util


class InputFileConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_name: str=None, content_type: str=None, data_source: InputFileConfigDataSource=None):
        """InputFileConfig - a model defined in OpenAPI

        :param channel_name: The channel_name of this InputFileConfig.
        :param content_type: The content_type of this InputFileConfig.
        :param data_source: The data_source of this InputFileConfig.
        """
        self.openapi_types = {
            'channel_name': str,
            'content_type': str,
            'data_source': InputFileConfigDataSource
        }

        self.attribute_map = {
            'channel_name': 'channelName',
            'content_type': 'contentType',
            'data_source': 'dataSource'
        }

        self._channel_name = channel_name
        self._content_type = content_type
        self._data_source = data_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputFileConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputFileConfig of this InputFileConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_name(self):
        """Gets the channel_name of this InputFileConfig.


        :return: The channel_name of this InputFileConfig.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this InputFileConfig.


        :param channel_name: The channel_name of this InputFileConfig.
        :type channel_name: str
        """
        if channel_name is None:
            raise ValueError("Invalid value for `channel_name`, must not be `None`")

        self._channel_name = channel_name

    @property
    def content_type(self):
        """Gets the content_type of this InputFileConfig.


        :return: The content_type of this InputFileConfig.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this InputFileConfig.


        :param content_type: The content_type of this InputFileConfig.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def data_source(self):
        """Gets the data_source of this InputFileConfig.


        :return: The data_source of this InputFileConfig.
        :rtype: InputFileConfigDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this InputFileConfig.


        :param data_source: The data_source of this InputFileConfig.
        :type data_source: InputFileConfigDataSource
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source
