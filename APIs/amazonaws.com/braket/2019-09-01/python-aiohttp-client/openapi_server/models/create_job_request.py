# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_job_request_algorithm_specification import CreateJobRequestAlgorithmSpecification
from openapi_server.models.create_job_request_checkpoint_config import CreateJobRequestCheckpointConfig
from openapi_server.models.create_job_request_device_config import CreateJobRequestDeviceConfig
from openapi_server.models.create_job_request_instance_config import CreateJobRequestInstanceConfig
from openapi_server.models.create_job_request_output_data_config import CreateJobRequestOutputDataConfig
from openapi_server.models.create_job_request_stopping_condition import CreateJobRequestStoppingCondition
from openapi_server.models.input_file_config import InputFileConfig
import re
from openapi_server import util


class CreateJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm_specification: CreateJobRequestAlgorithmSpecification=None, checkpoint_config: CreateJobRequestCheckpointConfig=None, client_token: str=None, device_config: CreateJobRequestDeviceConfig=None, hyper_parameters: Dict[str, str]=None, input_data_config: List[InputFileConfig]=None, instance_config: CreateJobRequestInstanceConfig=None, job_name: str=None, output_data_config: CreateJobRequestOutputDataConfig=None, role_arn: str=None, stopping_condition: CreateJobRequestStoppingCondition=None, tags: Dict[str, str]=None):
        """CreateJobRequest - a model defined in OpenAPI

        :param algorithm_specification: The algorithm_specification of this CreateJobRequest.
        :param checkpoint_config: The checkpoint_config of this CreateJobRequest.
        :param client_token: The client_token of this CreateJobRequest.
        :param device_config: The device_config of this CreateJobRequest.
        :param hyper_parameters: The hyper_parameters of this CreateJobRequest.
        :param input_data_config: The input_data_config of this CreateJobRequest.
        :param instance_config: The instance_config of this CreateJobRequest.
        :param job_name: The job_name of this CreateJobRequest.
        :param output_data_config: The output_data_config of this CreateJobRequest.
        :param role_arn: The role_arn of this CreateJobRequest.
        :param stopping_condition: The stopping_condition of this CreateJobRequest.
        :param tags: The tags of this CreateJobRequest.
        """
        self.openapi_types = {
            'algorithm_specification': CreateJobRequestAlgorithmSpecification,
            'checkpoint_config': CreateJobRequestCheckpointConfig,
            'client_token': str,
            'device_config': CreateJobRequestDeviceConfig,
            'hyper_parameters': Dict[str, str],
            'input_data_config': List[InputFileConfig],
            'instance_config': CreateJobRequestInstanceConfig,
            'job_name': str,
            'output_data_config': CreateJobRequestOutputDataConfig,
            'role_arn': str,
            'stopping_condition': CreateJobRequestStoppingCondition,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'algorithm_specification': 'algorithmSpecification',
            'checkpoint_config': 'checkpointConfig',
            'client_token': 'clientToken',
            'device_config': 'deviceConfig',
            'hyper_parameters': 'hyperParameters',
            'input_data_config': 'inputDataConfig',
            'instance_config': 'instanceConfig',
            'job_name': 'jobName',
            'output_data_config': 'outputDataConfig',
            'role_arn': 'roleArn',
            'stopping_condition': 'stoppingCondition',
            'tags': 'tags'
        }

        self._algorithm_specification = algorithm_specification
        self._checkpoint_config = checkpoint_config
        self._client_token = client_token
        self._device_config = device_config
        self._hyper_parameters = hyper_parameters
        self._input_data_config = input_data_config
        self._instance_config = instance_config
        self._job_name = job_name
        self._output_data_config = output_data_config
        self._role_arn = role_arn
        self._stopping_condition = stopping_condition
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJob_request of this CreateJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm_specification(self):
        """Gets the algorithm_specification of this CreateJobRequest.


        :return: The algorithm_specification of this CreateJobRequest.
        :rtype: CreateJobRequestAlgorithmSpecification
        """
        return self._algorithm_specification

    @algorithm_specification.setter
    def algorithm_specification(self, algorithm_specification):
        """Sets the algorithm_specification of this CreateJobRequest.


        :param algorithm_specification: The algorithm_specification of this CreateJobRequest.
        :type algorithm_specification: CreateJobRequestAlgorithmSpecification
        """
        if algorithm_specification is None:
            raise ValueError("Invalid value for `algorithm_specification`, must not be `None`")

        self._algorithm_specification = algorithm_specification

    @property
    def checkpoint_config(self):
        """Gets the checkpoint_config of this CreateJobRequest.


        :return: The checkpoint_config of this CreateJobRequest.
        :rtype: CreateJobRequestCheckpointConfig
        """
        return self._checkpoint_config

    @checkpoint_config.setter
    def checkpoint_config(self, checkpoint_config):
        """Sets the checkpoint_config of this CreateJobRequest.


        :param checkpoint_config: The checkpoint_config of this CreateJobRequest.
        :type checkpoint_config: CreateJobRequestCheckpointConfig
        """

        self._checkpoint_config = checkpoint_config

    @property
    def client_token(self):
        """Gets the client_token of this CreateJobRequest.

        A unique token that guarantees that the call to this API is idempotent.

        :return: The client_token of this CreateJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateJobRequest.

        A unique token that guarantees that the call to this API is idempotent.

        :param client_token: The client_token of this CreateJobRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def device_config(self):
        """Gets the device_config of this CreateJobRequest.


        :return: The device_config of this CreateJobRequest.
        :rtype: CreateJobRequestDeviceConfig
        """
        return self._device_config

    @device_config.setter
    def device_config(self, device_config):
        """Sets the device_config of this CreateJobRequest.


        :param device_config: The device_config of this CreateJobRequest.
        :type device_config: CreateJobRequestDeviceConfig
        """
        if device_config is None:
            raise ValueError("Invalid value for `device_config`, must not be `None`")

        self._device_config = device_config

    @property
    def hyper_parameters(self):
        """Gets the hyper_parameters of this CreateJobRequest.

        Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the training job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.

        :return: The hyper_parameters of this CreateJobRequest.
        :rtype: Dict[str, str]
        """
        return self._hyper_parameters

    @hyper_parameters.setter
    def hyper_parameters(self, hyper_parameters):
        """Sets the hyper_parameters of this CreateJobRequest.

        Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the training job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.

        :param hyper_parameters: The hyper_parameters of this CreateJobRequest.
        :type hyper_parameters: Dict[str, str]
        """
        if hyper_parameters is not None and len(hyper_parameters) > 100:
            raise ValueError("Invalid value for `hyper_parameters`, number of items must be less than or equal to `100`")
        if hyper_parameters is not None and len(hyper_parameters) < 0:
            raise ValueError("Invalid value for `hyper_parameters`, number of items must be greater than or equal to `0`")

        self._hyper_parameters = hyper_parameters

    @property
    def input_data_config(self):
        """Gets the input_data_config of this CreateJobRequest.

        A list of parameters that specify the name and type of input data and where it is located.

        :return: The input_data_config of this CreateJobRequest.
        :rtype: List[InputFileConfig]
        """
        return self._input_data_config

    @input_data_config.setter
    def input_data_config(self, input_data_config):
        """Sets the input_data_config of this CreateJobRequest.

        A list of parameters that specify the name and type of input data and where it is located.

        :param input_data_config: The input_data_config of this CreateJobRequest.
        :type input_data_config: List[InputFileConfig]
        """
        if input_data_config is not None and len(input_data_config) > 20:
            raise ValueError("Invalid value for `input_data_config`, number of items must be less than or equal to `20`")
        if input_data_config is not None and len(input_data_config) < 0:
            raise ValueError("Invalid value for `input_data_config`, number of items must be greater than or equal to `0`")

        self._input_data_config = input_data_config

    @property
    def instance_config(self):
        """Gets the instance_config of this CreateJobRequest.


        :return: The instance_config of this CreateJobRequest.
        :rtype: CreateJobRequestInstanceConfig
        """
        return self._instance_config

    @instance_config.setter
    def instance_config(self, instance_config):
        """Sets the instance_config of this CreateJobRequest.


        :param instance_config: The instance_config of this CreateJobRequest.
        :type instance_config: CreateJobRequestInstanceConfig
        """
        if instance_config is None:
            raise ValueError("Invalid value for `instance_config`, must not be `None`")

        self._instance_config = instance_config

    @property
    def job_name(self):
        """Gets the job_name of this CreateJobRequest.

        The name of the Amazon Braket job.

        :return: The job_name of this CreateJobRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this CreateJobRequest.

        The name of the Amazon Braket job.

        :param job_name: The job_name of this CreateJobRequest.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")
        if job_name is not None and len(job_name) > 50:
            raise ValueError("Invalid value for `job_name`, length must be less than or equal to `50`")
        if job_name is not None and len(job_name) < 1:
            raise ValueError("Invalid value for `job_name`, length must be greater than or equal to `1`")
        if job_name is not None and not re.search(r'^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,50}$', job_name):
            raise ValueError("Invalid value for `job_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,50}$/`")

        self._job_name = job_name

    @property
    def output_data_config(self):
        """Gets the output_data_config of this CreateJobRequest.


        :return: The output_data_config of this CreateJobRequest.
        :rtype: CreateJobRequestOutputDataConfig
        """
        return self._output_data_config

    @output_data_config.setter
    def output_data_config(self, output_data_config):
        """Sets the output_data_config of this CreateJobRequest.


        :param output_data_config: The output_data_config of this CreateJobRequest.
        :type output_data_config: CreateJobRequestOutputDataConfig
        """
        if output_data_config is None:
            raise ValueError("Invalid value for `output_data_config`, must not be `None`")

        self._output_data_config = output_data_config

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateJobRequest.

        The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the users' s3 buckets.

        :return: The role_arn of this CreateJobRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateJobRequest.

        The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the users' s3 buckets.

        :param role_arn: The role_arn of this CreateJobRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and not re.search(r'^arn:aws[a-z\-]*:iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@\-_\/]+$', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/^arn:aws[a-z\-]*:iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@\-_\/]+$/`")

        self._role_arn = role_arn

    @property
    def stopping_condition(self):
        """Gets the stopping_condition of this CreateJobRequest.


        :return: The stopping_condition of this CreateJobRequest.
        :rtype: CreateJobRequestStoppingCondition
        """
        return self._stopping_condition

    @stopping_condition.setter
    def stopping_condition(self, stopping_condition):
        """Sets the stopping_condition of this CreateJobRequest.


        :param stopping_condition: The stopping_condition of this CreateJobRequest.
        :type stopping_condition: CreateJobRequestStoppingCondition
        """

        self._stopping_condition = stopping_condition

    @property
    def tags(self):
        """Gets the tags of this CreateJobRequest.

        A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.

        :return: The tags of this CreateJobRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateJobRequest.

        A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.

        :param tags: The tags of this CreateJobRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
