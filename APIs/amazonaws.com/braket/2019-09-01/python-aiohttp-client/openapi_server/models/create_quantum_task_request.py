# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateQuantumTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, client_token: str=None, device_arn: str=None, device_parameters: str=None, job_token: str=None, output_s3_bucket: str=None, output_s3_key_prefix: str=None, shots: int=None, tags: Dict[str, str]=None):
        """CreateQuantumTaskRequest - a model defined in OpenAPI

        :param action: The action of this CreateQuantumTaskRequest.
        :param client_token: The client_token of this CreateQuantumTaskRequest.
        :param device_arn: The device_arn of this CreateQuantumTaskRequest.
        :param device_parameters: The device_parameters of this CreateQuantumTaskRequest.
        :param job_token: The job_token of this CreateQuantumTaskRequest.
        :param output_s3_bucket: The output_s3_bucket of this CreateQuantumTaskRequest.
        :param output_s3_key_prefix: The output_s3_key_prefix of this CreateQuantumTaskRequest.
        :param shots: The shots of this CreateQuantumTaskRequest.
        :param tags: The tags of this CreateQuantumTaskRequest.
        """
        self.openapi_types = {
            'action': str,
            'client_token': str,
            'device_arn': str,
            'device_parameters': str,
            'job_token': str,
            'output_s3_bucket': str,
            'output_s3_key_prefix': str,
            'shots': int,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'action': 'action',
            'client_token': 'clientToken',
            'device_arn': 'deviceArn',
            'device_parameters': 'deviceParameters',
            'job_token': 'jobToken',
            'output_s3_bucket': 'outputS3Bucket',
            'output_s3_key_prefix': 'outputS3KeyPrefix',
            'shots': 'shots',
            'tags': 'tags'
        }

        self._action = action
        self._client_token = client_token
        self._device_arn = device_arn
        self._device_parameters = device_parameters
        self._job_token = job_token
        self._output_s3_bucket = output_s3_bucket
        self._output_s3_key_prefix = output_s3_key_prefix
        self._shots = shots
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateQuantumTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateQuantumTask_request of this CreateQuantumTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CreateQuantumTaskRequest.

        The action associated with the task.

        :return: The action of this CreateQuantumTaskRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateQuantumTaskRequest.

        The action associated with the task.

        :param action: The action of this CreateQuantumTaskRequest.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def client_token(self):
        """Gets the client_token of this CreateQuantumTaskRequest.

        The client token associated with the request.

        :return: The client_token of this CreateQuantumTaskRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateQuantumTaskRequest.

        The client token associated with the request.

        :param client_token: The client_token of this CreateQuantumTaskRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def device_arn(self):
        """Gets the device_arn of this CreateQuantumTaskRequest.

        The ARN of the device to run the task on.

        :return: The device_arn of this CreateQuantumTaskRequest.
        :rtype: str
        """
        return self._device_arn

    @device_arn.setter
    def device_arn(self, device_arn):
        """Sets the device_arn of this CreateQuantumTaskRequest.

        The ARN of the device to run the task on.

        :param device_arn: The device_arn of this CreateQuantumTaskRequest.
        :type device_arn: str
        """
        if device_arn is None:
            raise ValueError("Invalid value for `device_arn`, must not be `None`")
        if device_arn is not None and len(device_arn) > 256:
            raise ValueError("Invalid value for `device_arn`, length must be less than or equal to `256`")
        if device_arn is not None and len(device_arn) < 1:
            raise ValueError("Invalid value for `device_arn`, length must be greater than or equal to `1`")

        self._device_arn = device_arn

    @property
    def device_parameters(self):
        """Gets the device_parameters of this CreateQuantumTaskRequest.

        The parameters for the device to run the task on.

        :return: The device_parameters of this CreateQuantumTaskRequest.
        :rtype: str
        """
        return self._device_parameters

    @device_parameters.setter
    def device_parameters(self, device_parameters):
        """Sets the device_parameters of this CreateQuantumTaskRequest.

        The parameters for the device to run the task on.

        :param device_parameters: The device_parameters of this CreateQuantumTaskRequest.
        :type device_parameters: str
        """
        if device_parameters is not None and len(device_parameters) > 48000:
            raise ValueError("Invalid value for `device_parameters`, length must be less than or equal to `48000`")
        if device_parameters is not None and len(device_parameters) < 1:
            raise ValueError("Invalid value for `device_parameters`, length must be greater than or equal to `1`")

        self._device_parameters = device_parameters

    @property
    def job_token(self):
        """Gets the job_token of this CreateQuantumTaskRequest.

        The token for an Amazon Braket job that associates it with the quantum task.

        :return: The job_token of this CreateQuantumTaskRequest.
        :rtype: str
        """
        return self._job_token

    @job_token.setter
    def job_token(self, job_token):
        """Sets the job_token of this CreateQuantumTaskRequest.

        The token for an Amazon Braket job that associates it with the quantum task.

        :param job_token: The job_token of this CreateQuantumTaskRequest.
        :type job_token: str
        """
        if job_token is not None and len(job_token) > 128:
            raise ValueError("Invalid value for `job_token`, length must be less than or equal to `128`")
        if job_token is not None and len(job_token) < 1:
            raise ValueError("Invalid value for `job_token`, length must be greater than or equal to `1`")

        self._job_token = job_token

    @property
    def output_s3_bucket(self):
        """Gets the output_s3_bucket of this CreateQuantumTaskRequest.

        The S3 bucket to store task result files in.

        :return: The output_s3_bucket of this CreateQuantumTaskRequest.
        :rtype: str
        """
        return self._output_s3_bucket

    @output_s3_bucket.setter
    def output_s3_bucket(self, output_s3_bucket):
        """Sets the output_s3_bucket of this CreateQuantumTaskRequest.

        The S3 bucket to store task result files in.

        :param output_s3_bucket: The output_s3_bucket of this CreateQuantumTaskRequest.
        :type output_s3_bucket: str
        """
        if output_s3_bucket is None:
            raise ValueError("Invalid value for `output_s3_bucket`, must not be `None`")
        if output_s3_bucket is not None and len(output_s3_bucket) > 63:
            raise ValueError("Invalid value for `output_s3_bucket`, length must be less than or equal to `63`")
        if output_s3_bucket is not None and len(output_s3_bucket) < 3:
            raise ValueError("Invalid value for `output_s3_bucket`, length must be greater than or equal to `3`")

        self._output_s3_bucket = output_s3_bucket

    @property
    def output_s3_key_prefix(self):
        """Gets the output_s3_key_prefix of this CreateQuantumTaskRequest.

        The key prefix for the location in the S3 bucket to store task results in.

        :return: The output_s3_key_prefix of this CreateQuantumTaskRequest.
        :rtype: str
        """
        return self._output_s3_key_prefix

    @output_s3_key_prefix.setter
    def output_s3_key_prefix(self, output_s3_key_prefix):
        """Sets the output_s3_key_prefix of this CreateQuantumTaskRequest.

        The key prefix for the location in the S3 bucket to store task results in.

        :param output_s3_key_prefix: The output_s3_key_prefix of this CreateQuantumTaskRequest.
        :type output_s3_key_prefix: str
        """
        if output_s3_key_prefix is None:
            raise ValueError("Invalid value for `output_s3_key_prefix`, must not be `None`")
        if output_s3_key_prefix is not None and len(output_s3_key_prefix) > 1024:
            raise ValueError("Invalid value for `output_s3_key_prefix`, length must be less than or equal to `1024`")
        if output_s3_key_prefix is not None and len(output_s3_key_prefix) < 1:
            raise ValueError("Invalid value for `output_s3_key_prefix`, length must be greater than or equal to `1`")

        self._output_s3_key_prefix = output_s3_key_prefix

    @property
    def shots(self):
        """Gets the shots of this CreateQuantumTaskRequest.

        The number of shots to use for the task.

        :return: The shots of this CreateQuantumTaskRequest.
        :rtype: int
        """
        return self._shots

    @shots.setter
    def shots(self, shots):
        """Sets the shots of this CreateQuantumTaskRequest.

        The number of shots to use for the task.

        :param shots: The shots of this CreateQuantumTaskRequest.
        :type shots: int
        """
        if shots is None:
            raise ValueError("Invalid value for `shots`, must not be `None`")
        if shots is not None and shots < 0:
            raise ValueError("Invalid value for `shots`, must be a value greater than or equal to `0`")

        self._shots = shots

    @property
    def tags(self):
        """Gets the tags of this CreateQuantumTaskRequest.

        Tags to be added to the quantum task you're creating.

        :return: The tags of this CreateQuantumTaskRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateQuantumTaskRequest.

        Tags to be added to the quantum task you're creating.

        :param tags: The tags of this CreateQuantumTaskRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
