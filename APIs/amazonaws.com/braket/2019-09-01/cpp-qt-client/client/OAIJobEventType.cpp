/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobEventType::OAIJobEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobEventType::OAIJobEventType() {
    this->initializeModel();
}

OAIJobEventType::~OAIJobEventType() {}

void OAIJobEventType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJobEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJobEventType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("WAITING_FOR_PRIORITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::WAITING_FOR_PRIORITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUEUED_FOR_EXECUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::QUEUED_FOR_EXECUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING_INSTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::STARTING_INSTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOWNLOADING_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::DOWNLOADING_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPRIORITIZED_DUE_TO_INACTIVITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::DEPRIORITIZED_DUE_TO_INACTIVITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPLOADING_RESULTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::UPLOADING_RESULTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAX_RUNTIME_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::MAX_RUNTIME_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobEventType::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJobEventType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJobEventType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJobEventType::WAITING_FOR_PRIORITY:
            val = "WAITING_FOR_PRIORITY";
            break;
        case eOAIJobEventType::QUEUED_FOR_EXECUTION:
            val = "QUEUED_FOR_EXECUTION";
            break;
        case eOAIJobEventType::STARTING_INSTANCE:
            val = "STARTING_INSTANCE";
            break;
        case eOAIJobEventType::DOWNLOADING_DATA:
            val = "DOWNLOADING_DATA";
            break;
        case eOAIJobEventType::RUNNING:
            val = "RUNNING";
            break;
        case eOAIJobEventType::DEPRIORITIZED_DUE_TO_INACTIVITY:
            val = "DEPRIORITIZED_DUE_TO_INACTIVITY";
            break;
        case eOAIJobEventType::UPLOADING_RESULTS:
            val = "UPLOADING_RESULTS";
            break;
        case eOAIJobEventType::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAIJobEventType::FAILED:
            val = "FAILED";
            break;
        case eOAIJobEventType::MAX_RUNTIME_EXCEEDED:
            val = "MAX_RUNTIME_EXCEEDED";
            break;
        case eOAIJobEventType::CANCELLED:
            val = "CANCELLED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJobEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJobEventType::eOAIJobEventType OAIJobEventType::getValue() const {
    return m_value;
}

void OAIJobEventType::setValue(const OAIJobEventType::eOAIJobEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJobEventType::isSet() const {
    
    return m_value_isSet;
}

bool OAIJobEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
