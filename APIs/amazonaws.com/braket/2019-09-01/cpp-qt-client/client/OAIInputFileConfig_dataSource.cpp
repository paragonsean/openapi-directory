/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputFileConfig_dataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputFileConfig_dataSource::OAIInputFileConfig_dataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputFileConfig_dataSource::OAIInputFileConfig_dataSource() {
    this->initializeModel();
}

OAIInputFileConfig_dataSource::~OAIInputFileConfig_dataSource() {}

void OAIInputFileConfig_dataSource::initializeModel() {

    m_s3_data_source_isSet = false;
    m_s3_data_source_isValid = false;
}

void OAIInputFileConfig_dataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputFileConfig_dataSource::fromJsonObject(QJsonObject json) {

    m_s3_data_source_isValid = ::OpenAPI::fromJsonValue(m_s3_data_source, json[QString("s3DataSource")]);
    m_s3_data_source_isSet = !json[QString("s3DataSource")].isNull() && m_s3_data_source_isValid;
}

QString OAIInputFileConfig_dataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputFileConfig_dataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_data_source.isSet()) {
        obj.insert(QString("s3DataSource"), ::OpenAPI::toJsonValue(m_s3_data_source));
    }
    return obj;
}

OAIDataSource_s3DataSource OAIInputFileConfig_dataSource::getS3DataSource() const {
    return m_s3_data_source;
}
void OAIInputFileConfig_dataSource::setS3DataSource(const OAIDataSource_s3DataSource &s3_data_source) {
    m_s3_data_source = s3_data_source;
    m_s3_data_source_isSet = true;
}

bool OAIInputFileConfig_dataSource::is_s3_data_source_Set() const{
    return m_s3_data_source_isSet;
}

bool OAIInputFileConfig_dataSource::is_s3_data_source_Valid() const{
    return m_s3_data_source_isValid;
}

bool OAIInputFileConfig_dataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputFileConfig_dataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_data_source_isValid && true;
}

} // namespace OpenAPI
