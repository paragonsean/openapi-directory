/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptModeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptModeConfig::OAIScriptModeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptModeConfig::OAIScriptModeConfig() {
    this->initializeModel();
}

OAIScriptModeConfig::~OAIScriptModeConfig() {}

void OAIScriptModeConfig::initializeModel() {

    m_compression_type_isSet = false;
    m_compression_type_isValid = false;

    m_entry_point_isSet = false;
    m_entry_point_isValid = false;

    m_s3_uri_isSet = false;
    m_s3_uri_isValid = false;
}

void OAIScriptModeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptModeConfig::fromJsonObject(QJsonObject json) {

    m_compression_type_isValid = ::OpenAPI::fromJsonValue(m_compression_type, json[QString("compressionType")]);
    m_compression_type_isSet = !json[QString("compressionType")].isNull() && m_compression_type_isValid;

    m_entry_point_isValid = ::OpenAPI::fromJsonValue(m_entry_point, json[QString("entryPoint")]);
    m_entry_point_isSet = !json[QString("entryPoint")].isNull() && m_entry_point_isValid;

    m_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_s3_uri, json[QString("s3Uri")]);
    m_s3_uri_isSet = !json[QString("s3Uri")].isNull() && m_s3_uri_isValid;
}

QString OAIScriptModeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptModeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_compression_type.isSet()) {
        obj.insert(QString("compressionType"), ::OpenAPI::toJsonValue(m_compression_type));
    }
    if (m_entry_point_isSet) {
        obj.insert(QString("entryPoint"), ::OpenAPI::toJsonValue(m_entry_point));
    }
    if (m_s3_uri_isSet) {
        obj.insert(QString("s3Uri"), ::OpenAPI::toJsonValue(m_s3_uri));
    }
    return obj;
}

OAICompressionType OAIScriptModeConfig::getCompressionType() const {
    return m_compression_type;
}
void OAIScriptModeConfig::setCompressionType(const OAICompressionType &compression_type) {
    m_compression_type = compression_type;
    m_compression_type_isSet = true;
}

bool OAIScriptModeConfig::is_compression_type_Set() const{
    return m_compression_type_isSet;
}

bool OAIScriptModeConfig::is_compression_type_Valid() const{
    return m_compression_type_isValid;
}

QString OAIScriptModeConfig::getEntryPoint() const {
    return m_entry_point;
}
void OAIScriptModeConfig::setEntryPoint(const QString &entry_point) {
    m_entry_point = entry_point;
    m_entry_point_isSet = true;
}

bool OAIScriptModeConfig::is_entry_point_Set() const{
    return m_entry_point_isSet;
}

bool OAIScriptModeConfig::is_entry_point_Valid() const{
    return m_entry_point_isValid;
}

QString OAIScriptModeConfig::getS3Uri() const {
    return m_s3_uri;
}
void OAIScriptModeConfig::setS3Uri(const QString &s3_uri) {
    m_s3_uri = s3_uri;
    m_s3_uri_isSet = true;
}

bool OAIScriptModeConfig::is_s3_uri_Set() const{
    return m_s3_uri_isSet;
}

bool OAIScriptModeConfig::is_s3_uri_Valid() const{
    return m_s3_uri_isValid;
}

bool OAIScriptModeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptModeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entry_point_isValid && m_s3_uri_isValid && true;
}

} // namespace OpenAPI
