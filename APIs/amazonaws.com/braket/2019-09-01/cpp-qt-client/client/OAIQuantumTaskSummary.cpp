/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuantumTaskSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuantumTaskSummary::OAIQuantumTaskSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuantumTaskSummary::OAIQuantumTaskSummary() {
    this->initializeModel();
}

OAIQuantumTaskSummary::~OAIQuantumTaskSummary() {}

void OAIQuantumTaskSummary::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_device_arn_isSet = false;
    m_device_arn_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_output_s3_bucket_isSet = false;
    m_output_s3_bucket_isValid = false;

    m_output_s3_directory_isSet = false;
    m_output_s3_directory_isValid = false;

    m_quantum_task_arn_isSet = false;
    m_quantum_task_arn_isValid = false;

    m_shots_isSet = false;
    m_shots_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIQuantumTaskSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuantumTaskSummary::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_device_arn_isValid = ::OpenAPI::fromJsonValue(m_device_arn, json[QString("deviceArn")]);
    m_device_arn_isSet = !json[QString("deviceArn")].isNull() && m_device_arn_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("endedAt")]);
    m_ended_at_isSet = !json[QString("endedAt")].isNull() && m_ended_at_isValid;

    m_output_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_output_s3_bucket, json[QString("outputS3Bucket")]);
    m_output_s3_bucket_isSet = !json[QString("outputS3Bucket")].isNull() && m_output_s3_bucket_isValid;

    m_output_s3_directory_isValid = ::OpenAPI::fromJsonValue(m_output_s3_directory, json[QString("outputS3Directory")]);
    m_output_s3_directory_isSet = !json[QString("outputS3Directory")].isNull() && m_output_s3_directory_isValid;

    m_quantum_task_arn_isValid = ::OpenAPI::fromJsonValue(m_quantum_task_arn, json[QString("quantumTaskArn")]);
    m_quantum_task_arn_isSet = !json[QString("quantumTaskArn")].isNull() && m_quantum_task_arn_isValid;

    m_shots_isValid = ::OpenAPI::fromJsonValue(m_shots, json[QString("shots")]);
    m_shots_isSet = !json[QString("shots")].isNull() && m_shots_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIQuantumTaskSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuantumTaskSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_device_arn_isSet) {
        obj.insert(QString("deviceArn"), ::OpenAPI::toJsonValue(m_device_arn));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("endedAt"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_output_s3_bucket_isSet) {
        obj.insert(QString("outputS3Bucket"), ::OpenAPI::toJsonValue(m_output_s3_bucket));
    }
    if (m_output_s3_directory_isSet) {
        obj.insert(QString("outputS3Directory"), ::OpenAPI::toJsonValue(m_output_s3_directory));
    }
    if (m_quantum_task_arn_isSet) {
        obj.insert(QString("quantumTaskArn"), ::OpenAPI::toJsonValue(m_quantum_task_arn));
    }
    if (m_shots_isSet) {
        obj.insert(QString("shots"), ::OpenAPI::toJsonValue(m_shots));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QDateTime OAIQuantumTaskSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIQuantumTaskSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIQuantumTaskSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIQuantumTaskSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIQuantumTaskSummary::getDeviceArn() const {
    return m_device_arn;
}
void OAIQuantumTaskSummary::setDeviceArn(const QString &device_arn) {
    m_device_arn = device_arn;
    m_device_arn_isSet = true;
}

bool OAIQuantumTaskSummary::is_device_arn_Set() const{
    return m_device_arn_isSet;
}

bool OAIQuantumTaskSummary::is_device_arn_Valid() const{
    return m_device_arn_isValid;
}

QDateTime OAIQuantumTaskSummary::getEndedAt() const {
    return m_ended_at;
}
void OAIQuantumTaskSummary::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIQuantumTaskSummary::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIQuantumTaskSummary::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QString OAIQuantumTaskSummary::getOutputS3Bucket() const {
    return m_output_s3_bucket;
}
void OAIQuantumTaskSummary::setOutputS3Bucket(const QString &output_s3_bucket) {
    m_output_s3_bucket = output_s3_bucket;
    m_output_s3_bucket_isSet = true;
}

bool OAIQuantumTaskSummary::is_output_s3_bucket_Set() const{
    return m_output_s3_bucket_isSet;
}

bool OAIQuantumTaskSummary::is_output_s3_bucket_Valid() const{
    return m_output_s3_bucket_isValid;
}

QString OAIQuantumTaskSummary::getOutputS3Directory() const {
    return m_output_s3_directory;
}
void OAIQuantumTaskSummary::setOutputS3Directory(const QString &output_s3_directory) {
    m_output_s3_directory = output_s3_directory;
    m_output_s3_directory_isSet = true;
}

bool OAIQuantumTaskSummary::is_output_s3_directory_Set() const{
    return m_output_s3_directory_isSet;
}

bool OAIQuantumTaskSummary::is_output_s3_directory_Valid() const{
    return m_output_s3_directory_isValid;
}

QString OAIQuantumTaskSummary::getQuantumTaskArn() const {
    return m_quantum_task_arn;
}
void OAIQuantumTaskSummary::setQuantumTaskArn(const QString &quantum_task_arn) {
    m_quantum_task_arn = quantum_task_arn;
    m_quantum_task_arn_isSet = true;
}

bool OAIQuantumTaskSummary::is_quantum_task_arn_Set() const{
    return m_quantum_task_arn_isSet;
}

bool OAIQuantumTaskSummary::is_quantum_task_arn_Valid() const{
    return m_quantum_task_arn_isValid;
}

qint32 OAIQuantumTaskSummary::getShots() const {
    return m_shots;
}
void OAIQuantumTaskSummary::setShots(const qint32 &shots) {
    m_shots = shots;
    m_shots_isSet = true;
}

bool OAIQuantumTaskSummary::is_shots_Set() const{
    return m_shots_isSet;
}

bool OAIQuantumTaskSummary::is_shots_Valid() const{
    return m_shots_isValid;
}

OAIQuantumTaskStatus OAIQuantumTaskSummary::getStatus() const {
    return m_status;
}
void OAIQuantumTaskSummary::setStatus(const OAIQuantumTaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQuantumTaskSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQuantumTaskSummary::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIQuantumTaskSummary::getTags() const {
    return m_tags;
}
void OAIQuantumTaskSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIQuantumTaskSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIQuantumTaskSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIQuantumTaskSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_s3_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantum_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuantumTaskSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_device_arn_isValid && m_output_s3_bucket_isValid && m_output_s3_directory_isValid && m_quantum_task_arn_isValid && m_shots_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
