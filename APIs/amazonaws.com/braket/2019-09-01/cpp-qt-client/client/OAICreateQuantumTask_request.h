/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateQuantumTask_request.h
 *
 * 
 */

#ifndef OAICreateQuantumTask_request_H
#define OAICreateQuantumTask_request_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateQuantumTask_request : public OAIObject {
public:
    OAICreateQuantumTask_request();
    OAICreateQuantumTask_request(QString json);
    ~OAICreateQuantumTask_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAction() const;
    void setAction(const QString &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getDeviceArn() const;
    void setDeviceArn(const QString &device_arn);
    bool is_device_arn_Set() const;
    bool is_device_arn_Valid() const;

    QString getDeviceParameters() const;
    void setDeviceParameters(const QString &device_parameters);
    bool is_device_parameters_Set() const;
    bool is_device_parameters_Valid() const;

    QString getJobToken() const;
    void setJobToken(const QString &job_token);
    bool is_job_token_Set() const;
    bool is_job_token_Valid() const;

    QString getOutputS3Bucket() const;
    void setOutputS3Bucket(const QString &output_s3_bucket);
    bool is_output_s3_bucket_Set() const;
    bool is_output_s3_bucket_Valid() const;

    QString getOutputS3KeyPrefix() const;
    void setOutputS3KeyPrefix(const QString &output_s3_key_prefix);
    bool is_output_s3_key_prefix_Set() const;
    bool is_output_s3_key_prefix_Valid() const;

    qint32 getShots() const;
    void setShots(const qint32 &shots);
    bool is_shots_Set() const;
    bool is_shots_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_device_arn;
    bool m_device_arn_isSet;
    bool m_device_arn_isValid;

    QString m_device_parameters;
    bool m_device_parameters_isSet;
    bool m_device_parameters_isValid;

    QString m_job_token;
    bool m_job_token_isSet;
    bool m_job_token_isValid;

    QString m_output_s3_bucket;
    bool m_output_s3_bucket_isSet;
    bool m_output_s3_bucket_isValid;

    QString m_output_s3_key_prefix;
    bool m_output_s3_key_prefix_isSet;
    bool m_output_s3_key_prefix_isValid;

    qint32 m_shots;
    bool m_shots_isSet;
    bool m_shots_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateQuantumTask_request)

#endif // OAICreateQuantumTask_request_H
