/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetQuantumTaskResponse.h
 *
 * 
 */

#ifndef OAIGetQuantumTaskResponse_H
#define OAIGetQuantumTaskResponse_H

#include <QJsonObject>

#include "OAIQuantumTaskStatus.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetQuantumTaskResponse : public OAIObject {
public:
    OAIGetQuantumTaskResponse();
    OAIGetQuantumTaskResponse(QString json);
    ~OAIGetQuantumTaskResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDeviceArn() const;
    void setDeviceArn(const QString &device_arn);
    bool is_device_arn_Set() const;
    bool is_device_arn_Valid() const;

    QString getDeviceParameters() const;
    void setDeviceParameters(const QString &device_parameters);
    bool is_device_parameters_Set() const;
    bool is_device_parameters_Valid() const;

    QDateTime getEndedAt() const;
    void setEndedAt(const QDateTime &ended_at);
    bool is_ended_at_Set() const;
    bool is_ended_at_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    QString getJobArn() const;
    void setJobArn(const QString &job_arn);
    bool is_job_arn_Set() const;
    bool is_job_arn_Valid() const;

    QString getOutputS3Bucket() const;
    void setOutputS3Bucket(const QString &output_s3_bucket);
    bool is_output_s3_bucket_Set() const;
    bool is_output_s3_bucket_Valid() const;

    QString getOutputS3Directory() const;
    void setOutputS3Directory(const QString &output_s3_directory);
    bool is_output_s3_directory_Set() const;
    bool is_output_s3_directory_Valid() const;

    QString getQuantumTaskArn() const;
    void setQuantumTaskArn(const QString &quantum_task_arn);
    bool is_quantum_task_arn_Set() const;
    bool is_quantum_task_arn_Valid() const;

    qint32 getShots() const;
    void setShots(const qint32 &shots);
    bool is_shots_Set() const;
    bool is_shots_Valid() const;

    OAIQuantumTaskStatus getStatus() const;
    void setStatus(const OAIQuantumTaskStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_device_arn;
    bool m_device_arn_isSet;
    bool m_device_arn_isValid;

    QString m_device_parameters;
    bool m_device_parameters_isSet;
    bool m_device_parameters_isValid;

    QDateTime m_ended_at;
    bool m_ended_at_isSet;
    bool m_ended_at_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    QString m_job_arn;
    bool m_job_arn_isSet;
    bool m_job_arn_isValid;

    QString m_output_s3_bucket;
    bool m_output_s3_bucket_isSet;
    bool m_output_s3_bucket_isValid;

    QString m_output_s3_directory;
    bool m_output_s3_directory_isSet;
    bool m_output_s3_directory_isValid;

    QString m_quantum_task_arn;
    bool m_quantum_task_arn_isSet;
    bool m_quantum_task_arn_isValid;

    qint32 m_shots;
    bool m_shots_isSet;
    bool m_shots_isValid;

    OAIQuantumTaskStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetQuantumTaskResponse)

#endif // OAIGetQuantumTaskResponse_H
