/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJob_request_instanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJob_request_instanceConfig::OAICreateJob_request_instanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJob_request_instanceConfig::OAICreateJob_request_instanceConfig() {
    this->initializeModel();
}

OAICreateJob_request_instanceConfig::~OAICreateJob_request_instanceConfig() {}

void OAICreateJob_request_instanceConfig::initializeModel() {

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_volume_size_in_gb_isSet = false;
    m_volume_size_in_gb_isValid = false;
}

void OAICreateJob_request_instanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJob_request_instanceConfig::fromJsonObject(QJsonObject json) {

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("instanceCount")]);
    m_instance_count_isSet = !json[QString("instanceCount")].isNull() && m_instance_count_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_volume_size_in_gb_isValid = ::OpenAPI::fromJsonValue(m_volume_size_in_gb, json[QString("volumeSizeInGb")]);
    m_volume_size_in_gb_isSet = !json[QString("volumeSizeInGb")].isNull() && m_volume_size_in_gb_isValid;
}

QString OAICreateJob_request_instanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJob_request_instanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_count_isSet) {
        obj.insert(QString("instanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_volume_size_in_gb_isSet) {
        obj.insert(QString("volumeSizeInGb"), ::OpenAPI::toJsonValue(m_volume_size_in_gb));
    }
    return obj;
}

qint32 OAICreateJob_request_instanceConfig::getInstanceCount() const {
    return m_instance_count;
}
void OAICreateJob_request_instanceConfig::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAICreateJob_request_instanceConfig::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAICreateJob_request_instanceConfig::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

OAIInstanceType OAICreateJob_request_instanceConfig::getInstanceType() const {
    return m_instance_type;
}
void OAICreateJob_request_instanceConfig::setInstanceType(const OAIInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateJob_request_instanceConfig::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateJob_request_instanceConfig::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

qint32 OAICreateJob_request_instanceConfig::getVolumeSizeInGb() const {
    return m_volume_size_in_gb;
}
void OAICreateJob_request_instanceConfig::setVolumeSizeInGb(const qint32 &volume_size_in_gb) {
    m_volume_size_in_gb = volume_size_in_gb;
    m_volume_size_in_gb_isSet = true;
}

bool OAICreateJob_request_instanceConfig::is_volume_size_in_gb_Set() const{
    return m_volume_size_in_gb_isSet;
}

bool OAICreateJob_request_instanceConfig::is_volume_size_in_gb_Valid() const{
    return m_volume_size_in_gb_isValid;
}

bool OAICreateJob_request_instanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJob_request_instanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
