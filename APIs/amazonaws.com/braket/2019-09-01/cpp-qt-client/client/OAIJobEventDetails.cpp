/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobEventDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobEventDetails::OAIJobEventDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobEventDetails::OAIJobEventDetails() {
    this->initializeModel();
}

OAIJobEventDetails::~OAIJobEventDetails() {}

void OAIJobEventDetails::initializeModel() {

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_time_of_event_isSet = false;
    m_time_of_event_isValid = false;
}

void OAIJobEventDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobEventDetails::fromJsonObject(QJsonObject json) {

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_time_of_event_isValid = ::OpenAPI::fromJsonValue(m_time_of_event, json[QString("timeOfEvent")]);
    m_time_of_event_isSet = !json[QString("timeOfEvent")].isNull() && m_time_of_event_isValid;
}

QString OAIJobEventDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobEventDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type.isSet()) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_time_of_event_isSet) {
        obj.insert(QString("timeOfEvent"), ::OpenAPI::toJsonValue(m_time_of_event));
    }
    return obj;
}

OAIJobEventType OAIJobEventDetails::getEventType() const {
    return m_event_type;
}
void OAIJobEventDetails::setEventType(const OAIJobEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIJobEventDetails::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIJobEventDetails::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIJobEventDetails::getMessage() const {
    return m_message;
}
void OAIJobEventDetails::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIJobEventDetails::is_message_Set() const{
    return m_message_isSet;
}

bool OAIJobEventDetails::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIJobEventDetails::getTimeOfEvent() const {
    return m_time_of_event;
}
void OAIJobEventDetails::setTimeOfEvent(const QDateTime &time_of_event) {
    m_time_of_event = time_of_event;
    m_time_of_event_isSet = true;
}

bool OAIJobEventDetails::is_time_of_event_Set() const{
    return m_time_of_event_isSet;
}

bool OAIJobEventDetails::is_time_of_event_Valid() const{
    return m_time_of_event_isValid;
}

bool OAIJobEventDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_event_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobEventDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
