/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobSummary::OAIJobSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobSummary::OAIJobSummary() {
    this->initializeModel();
}

OAIJobSummary::~OAIJobSummary() {}

void OAIJobSummary::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_job_arn_isSet = false;
    m_job_arn_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIJobSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobSummary::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("endedAt")]);
    m_ended_at_isSet = !json[QString("endedAt")].isNull() && m_ended_at_isValid;

    m_job_arn_isValid = ::OpenAPI::fromJsonValue(m_job_arn, json[QString("jobArn")]);
    m_job_arn_isSet = !json[QString("jobArn")].isNull() && m_job_arn_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIJobSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("endedAt"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_job_arn_isSet) {
        obj.insert(QString("jobArn"), ::OpenAPI::toJsonValue(m_job_arn));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QDateTime OAIJobSummary::getCreatedAt() const {
    return m_created_at;
}
void OAIJobSummary::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIJobSummary::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIJobSummary::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIJobSummary::getDevice() const {
    return m_device;
}
void OAIJobSummary::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIJobSummary::is_device_Set() const{
    return m_device_isSet;
}

bool OAIJobSummary::is_device_Valid() const{
    return m_device_isValid;
}

QDateTime OAIJobSummary::getEndedAt() const {
    return m_ended_at;
}
void OAIJobSummary::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIJobSummary::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIJobSummary::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QString OAIJobSummary::getJobArn() const {
    return m_job_arn;
}
void OAIJobSummary::setJobArn(const QString &job_arn) {
    m_job_arn = job_arn;
    m_job_arn_isSet = true;
}

bool OAIJobSummary::is_job_arn_Set() const{
    return m_job_arn_isSet;
}

bool OAIJobSummary::is_job_arn_Valid() const{
    return m_job_arn_isValid;
}

QString OAIJobSummary::getJobName() const {
    return m_job_name;
}
void OAIJobSummary::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIJobSummary::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIJobSummary::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QDateTime OAIJobSummary::getStartedAt() const {
    return m_started_at;
}
void OAIJobSummary::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIJobSummary::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIJobSummary::is_started_at_Valid() const{
    return m_started_at_isValid;
}

OAIJobPrimaryStatus OAIJobSummary::getStatus() const {
    return m_status;
}
void OAIJobSummary::setStatus(const OAIJobPrimaryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobSummary::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIJobSummary::getTags() const {
    return m_tags;
}
void OAIJobSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIJobSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIJobSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIJobSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_device_isValid && m_job_arn_isValid && m_job_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
