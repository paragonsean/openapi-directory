/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateQuantumTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateQuantumTaskRequest::OAICreateQuantumTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateQuantumTaskRequest::OAICreateQuantumTaskRequest() {
    this->initializeModel();
}

OAICreateQuantumTaskRequest::~OAICreateQuantumTaskRequest() {}

void OAICreateQuantumTaskRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_device_arn_isSet = false;
    m_device_arn_isValid = false;

    m_device_parameters_isSet = false;
    m_device_parameters_isValid = false;

    m_job_token_isSet = false;
    m_job_token_isValid = false;

    m_output_s3_bucket_isSet = false;
    m_output_s3_bucket_isValid = false;

    m_output_s3_key_prefix_isSet = false;
    m_output_s3_key_prefix_isValid = false;

    m_shots_isSet = false;
    m_shots_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateQuantumTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateQuantumTaskRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_device_arn_isValid = ::OpenAPI::fromJsonValue(m_device_arn, json[QString("deviceArn")]);
    m_device_arn_isSet = !json[QString("deviceArn")].isNull() && m_device_arn_isValid;

    m_device_parameters_isValid = ::OpenAPI::fromJsonValue(m_device_parameters, json[QString("deviceParameters")]);
    m_device_parameters_isSet = !json[QString("deviceParameters")].isNull() && m_device_parameters_isValid;

    m_job_token_isValid = ::OpenAPI::fromJsonValue(m_job_token, json[QString("jobToken")]);
    m_job_token_isSet = !json[QString("jobToken")].isNull() && m_job_token_isValid;

    m_output_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_output_s3_bucket, json[QString("outputS3Bucket")]);
    m_output_s3_bucket_isSet = !json[QString("outputS3Bucket")].isNull() && m_output_s3_bucket_isValid;

    m_output_s3_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_output_s3_key_prefix, json[QString("outputS3KeyPrefix")]);
    m_output_s3_key_prefix_isSet = !json[QString("outputS3KeyPrefix")].isNull() && m_output_s3_key_prefix_isValid;

    m_shots_isValid = ::OpenAPI::fromJsonValue(m_shots, json[QString("shots")]);
    m_shots_isSet = !json[QString("shots")].isNull() && m_shots_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateQuantumTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateQuantumTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_device_arn_isSet) {
        obj.insert(QString("deviceArn"), ::OpenAPI::toJsonValue(m_device_arn));
    }
    if (m_device_parameters_isSet) {
        obj.insert(QString("deviceParameters"), ::OpenAPI::toJsonValue(m_device_parameters));
    }
    if (m_job_token_isSet) {
        obj.insert(QString("jobToken"), ::OpenAPI::toJsonValue(m_job_token));
    }
    if (m_output_s3_bucket_isSet) {
        obj.insert(QString("outputS3Bucket"), ::OpenAPI::toJsonValue(m_output_s3_bucket));
    }
    if (m_output_s3_key_prefix_isSet) {
        obj.insert(QString("outputS3KeyPrefix"), ::OpenAPI::toJsonValue(m_output_s3_key_prefix));
    }
    if (m_shots_isSet) {
        obj.insert(QString("shots"), ::OpenAPI::toJsonValue(m_shots));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateQuantumTaskRequest::getAction() const {
    return m_action;
}
void OAICreateQuantumTaskRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAICreateQuantumTaskRequest::is_action_Valid() const{
    return m_action_isValid;
}

QString OAICreateQuantumTaskRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateQuantumTaskRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateQuantumTaskRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateQuantumTaskRequest::getDeviceArn() const {
    return m_device_arn;
}
void OAICreateQuantumTaskRequest::setDeviceArn(const QString &device_arn) {
    m_device_arn = device_arn;
    m_device_arn_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_device_arn_Set() const{
    return m_device_arn_isSet;
}

bool OAICreateQuantumTaskRequest::is_device_arn_Valid() const{
    return m_device_arn_isValid;
}

QString OAICreateQuantumTaskRequest::getDeviceParameters() const {
    return m_device_parameters;
}
void OAICreateQuantumTaskRequest::setDeviceParameters(const QString &device_parameters) {
    m_device_parameters = device_parameters;
    m_device_parameters_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_device_parameters_Set() const{
    return m_device_parameters_isSet;
}

bool OAICreateQuantumTaskRequest::is_device_parameters_Valid() const{
    return m_device_parameters_isValid;
}

QString OAICreateQuantumTaskRequest::getJobToken() const {
    return m_job_token;
}
void OAICreateQuantumTaskRequest::setJobToken(const QString &job_token) {
    m_job_token = job_token;
    m_job_token_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_job_token_Set() const{
    return m_job_token_isSet;
}

bool OAICreateQuantumTaskRequest::is_job_token_Valid() const{
    return m_job_token_isValid;
}

QString OAICreateQuantumTaskRequest::getOutputS3Bucket() const {
    return m_output_s3_bucket;
}
void OAICreateQuantumTaskRequest::setOutputS3Bucket(const QString &output_s3_bucket) {
    m_output_s3_bucket = output_s3_bucket;
    m_output_s3_bucket_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_output_s3_bucket_Set() const{
    return m_output_s3_bucket_isSet;
}

bool OAICreateQuantumTaskRequest::is_output_s3_bucket_Valid() const{
    return m_output_s3_bucket_isValid;
}

QString OAICreateQuantumTaskRequest::getOutputS3KeyPrefix() const {
    return m_output_s3_key_prefix;
}
void OAICreateQuantumTaskRequest::setOutputS3KeyPrefix(const QString &output_s3_key_prefix) {
    m_output_s3_key_prefix = output_s3_key_prefix;
    m_output_s3_key_prefix_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_output_s3_key_prefix_Set() const{
    return m_output_s3_key_prefix_isSet;
}

bool OAICreateQuantumTaskRequest::is_output_s3_key_prefix_Valid() const{
    return m_output_s3_key_prefix_isValid;
}

qint32 OAICreateQuantumTaskRequest::getShots() const {
    return m_shots;
}
void OAICreateQuantumTaskRequest::setShots(const qint32 &shots) {
    m_shots = shots;
    m_shots_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_shots_Set() const{
    return m_shots_isSet;
}

bool OAICreateQuantumTaskRequest::is_shots_Valid() const{
    return m_shots_isValid;
}

QMap OAICreateQuantumTaskRequest::getTags() const {
    return m_tags;
}
void OAICreateQuantumTaskRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateQuantumTaskRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateQuantumTaskRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateQuantumTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_s3_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateQuantumTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_client_token_isValid && m_device_arn_isValid && m_output_s3_bucket_isValid && m_output_s3_key_prefix_isValid && m_shots_isValid && true;
}

} // namespace OpenAPI
