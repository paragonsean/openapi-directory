/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetJobResponse.h
 *
 * 
 */

#ifndef OAIGetJobResponse_H
#define OAIGetJobResponse_H

#include <QJsonObject>

#include "OAIGetJobResponse_algorithmSpecification.h"
#include "OAIGetJobResponse_checkpointConfig.h"
#include "OAIGetJobResponse_deviceConfig.h"
#include "OAIGetJobResponse_instanceConfig.h"
#include "OAIGetJobResponse_outputDataConfig.h"
#include "OAIGetJobResponse_stoppingCondition.h"
#include "OAIJobPrimaryStatus.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetJobResponse_algorithmSpecification;
class OAIGetJobResponse_checkpointConfig;
class OAIGetJobResponse_deviceConfig;
class OAIGetJobResponse_instanceConfig;
class OAIGetJobResponse_outputDataConfig;
class OAIGetJobResponse_stoppingCondition;

class OAIGetJobResponse : public OAIObject {
public:
    OAIGetJobResponse();
    OAIGetJobResponse(QString json);
    ~OAIGetJobResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGetJobResponse_algorithmSpecification getAlgorithmSpecification() const;
    void setAlgorithmSpecification(const OAIGetJobResponse_algorithmSpecification &algorithm_specification);
    bool is_algorithm_specification_Set() const;
    bool is_algorithm_specification_Valid() const;

    qint32 getBillableDuration() const;
    void setBillableDuration(const qint32 &billable_duration);
    bool is_billable_duration_Set() const;
    bool is_billable_duration_Valid() const;

    OAIGetJobResponse_checkpointConfig getCheckpointConfig() const;
    void setCheckpointConfig(const OAIGetJobResponse_checkpointConfig &checkpoint_config);
    bool is_checkpoint_config_Set() const;
    bool is_checkpoint_config_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIGetJobResponse_deviceConfig getDeviceConfig() const;
    void setDeviceConfig(const OAIGetJobResponse_deviceConfig &device_config);
    bool is_device_config_Set() const;
    bool is_device_config_Valid() const;

    QDateTime getEndedAt() const;
    void setEndedAt(const QDateTime &ended_at);
    bool is_ended_at_Set() const;
    bool is_ended_at_Valid() const;

    QList getEvents() const;
    void setEvents(const QList &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    QString getFailureReason() const;
    void setFailureReason(const QString &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    QMap getHyperParameters() const;
    void setHyperParameters(const QMap &hyper_parameters);
    bool is_hyper_parameters_Set() const;
    bool is_hyper_parameters_Valid() const;

    QList getInputDataConfig() const;
    void setInputDataConfig(const QList &input_data_config);
    bool is_input_data_config_Set() const;
    bool is_input_data_config_Valid() const;

    OAIGetJobResponse_instanceConfig getInstanceConfig() const;
    void setInstanceConfig(const OAIGetJobResponse_instanceConfig &instance_config);
    bool is_instance_config_Set() const;
    bool is_instance_config_Valid() const;

    QString getJobArn() const;
    void setJobArn(const QString &job_arn);
    bool is_job_arn_Set() const;
    bool is_job_arn_Valid() const;

    QString getJobName() const;
    void setJobName(const QString &job_name);
    bool is_job_name_Set() const;
    bool is_job_name_Valid() const;

    OAIGetJobResponse_outputDataConfig getOutputDataConfig() const;
    void setOutputDataConfig(const OAIGetJobResponse_outputDataConfig &output_data_config);
    bool is_output_data_config_Set() const;
    bool is_output_data_config_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QDateTime getStartedAt() const;
    void setStartedAt(const QDateTime &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    OAIJobPrimaryStatus getStatus() const;
    void setStatus(const OAIJobPrimaryStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIGetJobResponse_stoppingCondition getStoppingCondition() const;
    void setStoppingCondition(const OAIGetJobResponse_stoppingCondition &stopping_condition);
    bool is_stopping_condition_Set() const;
    bool is_stopping_condition_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGetJobResponse_algorithmSpecification m_algorithm_specification;
    bool m_algorithm_specification_isSet;
    bool m_algorithm_specification_isValid;

    qint32 m_billable_duration;
    bool m_billable_duration_isSet;
    bool m_billable_duration_isValid;

    OAIGetJobResponse_checkpointConfig m_checkpoint_config;
    bool m_checkpoint_config_isSet;
    bool m_checkpoint_config_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIGetJobResponse_deviceConfig m_device_config;
    bool m_device_config_isSet;
    bool m_device_config_isValid;

    QDateTime m_ended_at;
    bool m_ended_at_isSet;
    bool m_ended_at_isValid;

    QList m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    QString m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    QMap m_hyper_parameters;
    bool m_hyper_parameters_isSet;
    bool m_hyper_parameters_isValid;

    QList m_input_data_config;
    bool m_input_data_config_isSet;
    bool m_input_data_config_isValid;

    OAIGetJobResponse_instanceConfig m_instance_config;
    bool m_instance_config_isSet;
    bool m_instance_config_isValid;

    QString m_job_arn;
    bool m_job_arn_isSet;
    bool m_job_arn_isValid;

    QString m_job_name;
    bool m_job_name_isSet;
    bool m_job_name_isValid;

    OAIGetJobResponse_outputDataConfig m_output_data_config;
    bool m_output_data_config_isSet;
    bool m_output_data_config_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QDateTime m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;

    OAIJobPrimaryStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIGetJobResponse_stoppingCondition m_stopping_condition;
    bool m_stopping_condition_isSet;
    bool m_stopping_condition_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetJobResponse)

#endif // OAIGetJobResponse_H
