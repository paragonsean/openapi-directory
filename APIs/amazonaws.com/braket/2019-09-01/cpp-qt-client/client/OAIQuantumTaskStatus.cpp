/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuantumTaskStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuantumTaskStatus::OAIQuantumTaskStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuantumTaskStatus::OAIQuantumTaskStatus() {
    this->initializeModel();
}

OAIQuantumTaskStatus::~OAIQuantumTaskStatus() {}

void OAIQuantumTaskStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIQuantumTaskStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIQuantumTaskStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQuantumTaskStatus::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUEUED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQuantumTaskStatus::QUEUED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RUNNING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQuantumTaskStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQuantumTaskStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQuantumTaskStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQuantumTaskStatus::CANCELLING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQuantumTaskStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIQuantumTaskStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIQuantumTaskStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIQuantumTaskStatus::CREATED:
            val = "CREATED";
            break;
        case eOAIQuantumTaskStatus::QUEUED:
            val = "QUEUED";
            break;
        case eOAIQuantumTaskStatus::RUNNING:
            val = "RUNNING";
            break;
        case eOAIQuantumTaskStatus::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAIQuantumTaskStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIQuantumTaskStatus::CANCELLING:
            val = "CANCELLING";
            break;
        case eOAIQuantumTaskStatus::CANCELLED:
            val = "CANCELLED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIQuantumTaskStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIQuantumTaskStatus::eOAIQuantumTaskStatus OAIQuantumTaskStatus::getValue() const {
    return m_value;
}

void OAIQuantumTaskStatus::setValue(const OAIQuantumTaskStatus::eOAIQuantumTaskStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIQuantumTaskStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIQuantumTaskStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
