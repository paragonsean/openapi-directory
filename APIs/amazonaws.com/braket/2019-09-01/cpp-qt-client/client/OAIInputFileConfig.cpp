/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputFileConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputFileConfig::OAIInputFileConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputFileConfig::OAIInputFileConfig() {
    this->initializeModel();
}

OAIInputFileConfig::~OAIInputFileConfig() {}

void OAIInputFileConfig::initializeModel() {

    m_channel_name_isSet = false;
    m_channel_name_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;
}

void OAIInputFileConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputFileConfig::fromJsonObject(QJsonObject json) {

    m_channel_name_isValid = ::OpenAPI::fromJsonValue(m_channel_name, json[QString("channelName")]);
    m_channel_name_isSet = !json[QString("channelName")].isNull() && m_channel_name_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("dataSource")]);
    m_data_source_isSet = !json[QString("dataSource")].isNull() && m_data_source_isValid;
}

QString OAIInputFileConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputFileConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_name_isSet) {
        obj.insert(QString("channelName"), ::OpenAPI::toJsonValue(m_channel_name));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("dataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    return obj;
}

QString OAIInputFileConfig::getChannelName() const {
    return m_channel_name;
}
void OAIInputFileConfig::setChannelName(const QString &channel_name) {
    m_channel_name = channel_name;
    m_channel_name_isSet = true;
}

bool OAIInputFileConfig::is_channel_name_Set() const{
    return m_channel_name_isSet;
}

bool OAIInputFileConfig::is_channel_name_Valid() const{
    return m_channel_name_isValid;
}

QString OAIInputFileConfig::getContentType() const {
    return m_content_type;
}
void OAIInputFileConfig::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIInputFileConfig::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIInputFileConfig::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIInputFileConfig_dataSource OAIInputFileConfig::getDataSource() const {
    return m_data_source;
}
void OAIInputFileConfig::setDataSource(const OAIInputFileConfig_dataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIInputFileConfig::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIInputFileConfig::is_data_source_Valid() const{
    return m_data_source_isValid;
}

bool OAIInputFileConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputFileConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_name_isValid && m_data_source_isValid && true;
}

} // namespace OpenAPI
