/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetJobResponse::OAIGetJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetJobResponse::OAIGetJobResponse() {
    this->initializeModel();
}

OAIGetJobResponse::~OAIGetJobResponse() {}

void OAIGetJobResponse::initializeModel() {

    m_algorithm_specification_isSet = false;
    m_algorithm_specification_isValid = false;

    m_billable_duration_isSet = false;
    m_billable_duration_isValid = false;

    m_checkpoint_config_isSet = false;
    m_checkpoint_config_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_device_config_isSet = false;
    m_device_config_isValid = false;

    m_ended_at_isSet = false;
    m_ended_at_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_hyper_parameters_isSet = false;
    m_hyper_parameters_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_instance_config_isSet = false;
    m_instance_config_isValid = false;

    m_job_arn_isSet = false;
    m_job_arn_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stopping_condition_isSet = false;
    m_stopping_condition_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetJobResponse::fromJsonObject(QJsonObject json) {

    m_algorithm_specification_isValid = ::OpenAPI::fromJsonValue(m_algorithm_specification, json[QString("algorithmSpecification")]);
    m_algorithm_specification_isSet = !json[QString("algorithmSpecification")].isNull() && m_algorithm_specification_isValid;

    m_billable_duration_isValid = ::OpenAPI::fromJsonValue(m_billable_duration, json[QString("billableDuration")]);
    m_billable_duration_isSet = !json[QString("billableDuration")].isNull() && m_billable_duration_isValid;

    m_checkpoint_config_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_config, json[QString("checkpointConfig")]);
    m_checkpoint_config_isSet = !json[QString("checkpointConfig")].isNull() && m_checkpoint_config_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_device_config_isValid = ::OpenAPI::fromJsonValue(m_device_config, json[QString("deviceConfig")]);
    m_device_config_isSet = !json[QString("deviceConfig")].isNull() && m_device_config_isValid;

    m_ended_at_isValid = ::OpenAPI::fromJsonValue(m_ended_at, json[QString("endedAt")]);
    m_ended_at_isSet = !json[QString("endedAt")].isNull() && m_ended_at_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_hyper_parameters_isValid = ::OpenAPI::fromJsonValue(m_hyper_parameters, json[QString("hyperParameters")]);
    m_hyper_parameters_isSet = !json[QString("hyperParameters")].isNull() && m_hyper_parameters_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("inputDataConfig")]);
    m_input_data_config_isSet = !json[QString("inputDataConfig")].isNull() && m_input_data_config_isValid;

    m_instance_config_isValid = ::OpenAPI::fromJsonValue(m_instance_config, json[QString("instanceConfig")]);
    m_instance_config_isSet = !json[QString("instanceConfig")].isNull() && m_instance_config_isValid;

    m_job_arn_isValid = ::OpenAPI::fromJsonValue(m_job_arn, json[QString("jobArn")]);
    m_job_arn_isSet = !json[QString("jobArn")].isNull() && m_job_arn_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("outputDataConfig")]);
    m_output_data_config_isSet = !json[QString("outputDataConfig")].isNull() && m_output_data_config_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stopping_condition_isValid = ::OpenAPI::fromJsonValue(m_stopping_condition, json[QString("stoppingCondition")]);
    m_stopping_condition_isSet = !json[QString("stoppingCondition")].isNull() && m_stopping_condition_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGetJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_specification.isSet()) {
        obj.insert(QString("algorithmSpecification"), ::OpenAPI::toJsonValue(m_algorithm_specification));
    }
    if (m_billable_duration_isSet) {
        obj.insert(QString("billableDuration"), ::OpenAPI::toJsonValue(m_billable_duration));
    }
    if (m_checkpoint_config.isSet()) {
        obj.insert(QString("checkpointConfig"), ::OpenAPI::toJsonValue(m_checkpoint_config));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_device_config.isSet()) {
        obj.insert(QString("deviceConfig"), ::OpenAPI::toJsonValue(m_device_config));
    }
    if (m_ended_at_isSet) {
        obj.insert(QString("endedAt"), ::OpenAPI::toJsonValue(m_ended_at));
    }
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_hyper_parameters.isSet()) {
        obj.insert(QString("hyperParameters"), ::OpenAPI::toJsonValue(m_hyper_parameters));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("inputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_instance_config.isSet()) {
        obj.insert(QString("instanceConfig"), ::OpenAPI::toJsonValue(m_instance_config));
    }
    if (m_job_arn_isSet) {
        obj.insert(QString("jobArn"), ::OpenAPI::toJsonValue(m_job_arn));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("outputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stopping_condition.isSet()) {
        obj.insert(QString("stoppingCondition"), ::OpenAPI::toJsonValue(m_stopping_condition));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIGetJobResponse_algorithmSpecification OAIGetJobResponse::getAlgorithmSpecification() const {
    return m_algorithm_specification;
}
void OAIGetJobResponse::setAlgorithmSpecification(const OAIGetJobResponse_algorithmSpecification &algorithm_specification) {
    m_algorithm_specification = algorithm_specification;
    m_algorithm_specification_isSet = true;
}

bool OAIGetJobResponse::is_algorithm_specification_Set() const{
    return m_algorithm_specification_isSet;
}

bool OAIGetJobResponse::is_algorithm_specification_Valid() const{
    return m_algorithm_specification_isValid;
}

qint32 OAIGetJobResponse::getBillableDuration() const {
    return m_billable_duration;
}
void OAIGetJobResponse::setBillableDuration(const qint32 &billable_duration) {
    m_billable_duration = billable_duration;
    m_billable_duration_isSet = true;
}

bool OAIGetJobResponse::is_billable_duration_Set() const{
    return m_billable_duration_isSet;
}

bool OAIGetJobResponse::is_billable_duration_Valid() const{
    return m_billable_duration_isValid;
}

OAIGetJobResponse_checkpointConfig OAIGetJobResponse::getCheckpointConfig() const {
    return m_checkpoint_config;
}
void OAIGetJobResponse::setCheckpointConfig(const OAIGetJobResponse_checkpointConfig &checkpoint_config) {
    m_checkpoint_config = checkpoint_config;
    m_checkpoint_config_isSet = true;
}

bool OAIGetJobResponse::is_checkpoint_config_Set() const{
    return m_checkpoint_config_isSet;
}

bool OAIGetJobResponse::is_checkpoint_config_Valid() const{
    return m_checkpoint_config_isValid;
}

QDateTime OAIGetJobResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetJobResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetJobResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetJobResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIGetJobResponse_deviceConfig OAIGetJobResponse::getDeviceConfig() const {
    return m_device_config;
}
void OAIGetJobResponse::setDeviceConfig(const OAIGetJobResponse_deviceConfig &device_config) {
    m_device_config = device_config;
    m_device_config_isSet = true;
}

bool OAIGetJobResponse::is_device_config_Set() const{
    return m_device_config_isSet;
}

bool OAIGetJobResponse::is_device_config_Valid() const{
    return m_device_config_isValid;
}

QDateTime OAIGetJobResponse::getEndedAt() const {
    return m_ended_at;
}
void OAIGetJobResponse::setEndedAt(const QDateTime &ended_at) {
    m_ended_at = ended_at;
    m_ended_at_isSet = true;
}

bool OAIGetJobResponse::is_ended_at_Set() const{
    return m_ended_at_isSet;
}

bool OAIGetJobResponse::is_ended_at_Valid() const{
    return m_ended_at_isValid;
}

QList OAIGetJobResponse::getEvents() const {
    return m_events;
}
void OAIGetJobResponse::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIGetJobResponse::is_events_Set() const{
    return m_events_isSet;
}

bool OAIGetJobResponse::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIGetJobResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIGetJobResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIGetJobResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIGetJobResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QMap OAIGetJobResponse::getHyperParameters() const {
    return m_hyper_parameters;
}
void OAIGetJobResponse::setHyperParameters(const QMap &hyper_parameters) {
    m_hyper_parameters = hyper_parameters;
    m_hyper_parameters_isSet = true;
}

bool OAIGetJobResponse::is_hyper_parameters_Set() const{
    return m_hyper_parameters_isSet;
}

bool OAIGetJobResponse::is_hyper_parameters_Valid() const{
    return m_hyper_parameters_isValid;
}

QList OAIGetJobResponse::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIGetJobResponse::setInputDataConfig(const QList &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIGetJobResponse::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIGetJobResponse::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAIGetJobResponse_instanceConfig OAIGetJobResponse::getInstanceConfig() const {
    return m_instance_config;
}
void OAIGetJobResponse::setInstanceConfig(const OAIGetJobResponse_instanceConfig &instance_config) {
    m_instance_config = instance_config;
    m_instance_config_isSet = true;
}

bool OAIGetJobResponse::is_instance_config_Set() const{
    return m_instance_config_isSet;
}

bool OAIGetJobResponse::is_instance_config_Valid() const{
    return m_instance_config_isValid;
}

QString OAIGetJobResponse::getJobArn() const {
    return m_job_arn;
}
void OAIGetJobResponse::setJobArn(const QString &job_arn) {
    m_job_arn = job_arn;
    m_job_arn_isSet = true;
}

bool OAIGetJobResponse::is_job_arn_Set() const{
    return m_job_arn_isSet;
}

bool OAIGetJobResponse::is_job_arn_Valid() const{
    return m_job_arn_isValid;
}

QString OAIGetJobResponse::getJobName() const {
    return m_job_name;
}
void OAIGetJobResponse::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIGetJobResponse::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIGetJobResponse::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIGetJobResponse_outputDataConfig OAIGetJobResponse::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIGetJobResponse::setOutputDataConfig(const OAIGetJobResponse_outputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIGetJobResponse::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIGetJobResponse::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

QString OAIGetJobResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIGetJobResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIGetJobResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIGetJobResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIGetJobResponse::getStartedAt() const {
    return m_started_at;
}
void OAIGetJobResponse::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIGetJobResponse::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIGetJobResponse::is_started_at_Valid() const{
    return m_started_at_isValid;
}

OAIJobPrimaryStatus OAIGetJobResponse::getStatus() const {
    return m_status;
}
void OAIGetJobResponse::setStatus(const OAIJobPrimaryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIGetJobResponse_stoppingCondition OAIGetJobResponse::getStoppingCondition() const {
    return m_stopping_condition;
}
void OAIGetJobResponse::setStoppingCondition(const OAIGetJobResponse_stoppingCondition &stopping_condition) {
    m_stopping_condition = stopping_condition;
    m_stopping_condition_isSet = true;
}

bool OAIGetJobResponse::is_stopping_condition_Set() const{
    return m_stopping_condition_isSet;
}

bool OAIGetJobResponse::is_stopping_condition_Valid() const{
    return m_stopping_condition_isValid;
}

QMap OAIGetJobResponse::getTags() const {
    return m_tags;
}
void OAIGetJobResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetJobResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetJobResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkpoint_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hyper_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopping_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_algorithm_specification_isValid && m_created_at_isValid && m_instance_config_isValid && m_job_arn_isValid && m_job_name_isValid && m_output_data_config_isValid && m_role_arn_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
