/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchQuantumTasksFilterOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchQuantumTasksFilterOperator::OAISearchQuantumTasksFilterOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchQuantumTasksFilterOperator::OAISearchQuantumTasksFilterOperator() {
    this->initializeModel();
}

OAISearchQuantumTasksFilterOperator::~OAISearchQuantumTasksFilterOperator() {}

void OAISearchQuantumTasksFilterOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISearchQuantumTasksFilterOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISearchQuantumTasksFilterOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchQuantumTasksFilterOperator::LT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LTE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchQuantumTasksFilterOperator::LTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EQUAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchQuantumTasksFilterOperator::EQUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GT", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchQuantumTasksFilterOperator::GT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GTE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchQuantumTasksFilterOperator::GTE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BETWEEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAISearchQuantumTasksFilterOperator::BETWEEN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISearchQuantumTasksFilterOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISearchQuantumTasksFilterOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISearchQuantumTasksFilterOperator::LT:
            val = "LT";
            break;
        case eOAISearchQuantumTasksFilterOperator::LTE:
            val = "LTE";
            break;
        case eOAISearchQuantumTasksFilterOperator::EQUAL:
            val = "EQUAL";
            break;
        case eOAISearchQuantumTasksFilterOperator::GT:
            val = "GT";
            break;
        case eOAISearchQuantumTasksFilterOperator::GTE:
            val = "GTE";
            break;
        case eOAISearchQuantumTasksFilterOperator::BETWEEN:
            val = "BETWEEN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISearchQuantumTasksFilterOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISearchQuantumTasksFilterOperator::eOAISearchQuantumTasksFilterOperator OAISearchQuantumTasksFilterOperator::getValue() const {
    return m_value;
}

void OAISearchQuantumTasksFilterOperator::setValue(const OAISearchQuantumTasksFilterOperator::eOAISearchQuantumTasksFilterOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISearchQuantumTasksFilterOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAISearchQuantumTasksFilterOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
