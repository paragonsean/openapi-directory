/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelQuantumTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelQuantumTaskResponse::OAICancelQuantumTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelQuantumTaskResponse::OAICancelQuantumTaskResponse() {
    this->initializeModel();
}

OAICancelQuantumTaskResponse::~OAICancelQuantumTaskResponse() {}

void OAICancelQuantumTaskResponse::initializeModel() {

    m_cancellation_status_isSet = false;
    m_cancellation_status_isValid = false;

    m_quantum_task_arn_isSet = false;
    m_quantum_task_arn_isValid = false;
}

void OAICancelQuantumTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancelQuantumTaskResponse::fromJsonObject(QJsonObject json) {

    m_cancellation_status_isValid = ::OpenAPI::fromJsonValue(m_cancellation_status, json[QString("cancellationStatus")]);
    m_cancellation_status_isSet = !json[QString("cancellationStatus")].isNull() && m_cancellation_status_isValid;

    m_quantum_task_arn_isValid = ::OpenAPI::fromJsonValue(m_quantum_task_arn, json[QString("quantumTaskArn")]);
    m_quantum_task_arn_isSet = !json[QString("quantumTaskArn")].isNull() && m_quantum_task_arn_isValid;
}

QString OAICancelQuantumTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancelQuantumTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_status.isSet()) {
        obj.insert(QString("cancellationStatus"), ::OpenAPI::toJsonValue(m_cancellation_status));
    }
    if (m_quantum_task_arn_isSet) {
        obj.insert(QString("quantumTaskArn"), ::OpenAPI::toJsonValue(m_quantum_task_arn));
    }
    return obj;
}

OAICancellationStatus OAICancelQuantumTaskResponse::getCancellationStatus() const {
    return m_cancellation_status;
}
void OAICancelQuantumTaskResponse::setCancellationStatus(const OAICancellationStatus &cancellation_status) {
    m_cancellation_status = cancellation_status;
    m_cancellation_status_isSet = true;
}

bool OAICancelQuantumTaskResponse::is_cancellation_status_Set() const{
    return m_cancellation_status_isSet;
}

bool OAICancelQuantumTaskResponse::is_cancellation_status_Valid() const{
    return m_cancellation_status_isValid;
}

QString OAICancelQuantumTaskResponse::getQuantumTaskArn() const {
    return m_quantum_task_arn;
}
void OAICancelQuantumTaskResponse::setQuantumTaskArn(const QString &quantum_task_arn) {
    m_quantum_task_arn = quantum_task_arn;
    m_quantum_task_arn_isSet = true;
}

bool OAICancelQuantumTaskResponse::is_quantum_task_arn_Set() const{
    return m_quantum_task_arn_isSet;
}

bool OAICancelQuantumTaskResponse::is_quantum_task_arn_Valid() const{
    return m_quantum_task_arn_isValid;
}

bool OAICancelQuantumTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantum_task_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancelQuantumTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancellation_status_isValid && m_quantum_task_arn_isValid && true;
}

} // namespace OpenAPI
