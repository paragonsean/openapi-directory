/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceResponse::OAIGetDeviceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceResponse::OAIGetDeviceResponse() {
    this->initializeModel();
}

OAIGetDeviceResponse::~OAIGetDeviceResponse() {}

void OAIGetDeviceResponse::initializeModel() {

    m_device_arn_isSet = false;
    m_device_arn_isValid = false;

    m_device_capabilities_isSet = false;
    m_device_capabilities_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_device_status_isSet = false;
    m_device_status_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;
}

void OAIGetDeviceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceResponse::fromJsonObject(QJsonObject json) {

    m_device_arn_isValid = ::OpenAPI::fromJsonValue(m_device_arn, json[QString("deviceArn")]);
    m_device_arn_isSet = !json[QString("deviceArn")].isNull() && m_device_arn_isValid;

    m_device_capabilities_isValid = ::OpenAPI::fromJsonValue(m_device_capabilities, json[QString("deviceCapabilities")]);
    m_device_capabilities_isSet = !json[QString("deviceCapabilities")].isNull() && m_device_capabilities_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_device_status_isValid = ::OpenAPI::fromJsonValue(m_device_status, json[QString("deviceStatus")]);
    m_device_status_isSet = !json[QString("deviceStatus")].isNull() && m_device_status_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("providerName")]);
    m_provider_name_isSet = !json[QString("providerName")].isNull() && m_provider_name_isValid;
}

QString OAIGetDeviceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_device_arn_isSet) {
        obj.insert(QString("deviceArn"), ::OpenAPI::toJsonValue(m_device_arn));
    }
    if (m_device_capabilities_isSet) {
        obj.insert(QString("deviceCapabilities"), ::OpenAPI::toJsonValue(m_device_capabilities));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_device_status.isSet()) {
        obj.insert(QString("deviceStatus"), ::OpenAPI::toJsonValue(m_device_status));
    }
    if (m_device_type.isSet()) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("providerName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    return obj;
}

QString OAIGetDeviceResponse::getDeviceArn() const {
    return m_device_arn;
}
void OAIGetDeviceResponse::setDeviceArn(const QString &device_arn) {
    m_device_arn = device_arn;
    m_device_arn_isSet = true;
}

bool OAIGetDeviceResponse::is_device_arn_Set() const{
    return m_device_arn_isSet;
}

bool OAIGetDeviceResponse::is_device_arn_Valid() const{
    return m_device_arn_isValid;
}

QString OAIGetDeviceResponse::getDeviceCapabilities() const {
    return m_device_capabilities;
}
void OAIGetDeviceResponse::setDeviceCapabilities(const QString &device_capabilities) {
    m_device_capabilities = device_capabilities;
    m_device_capabilities_isSet = true;
}

bool OAIGetDeviceResponse::is_device_capabilities_Set() const{
    return m_device_capabilities_isSet;
}

bool OAIGetDeviceResponse::is_device_capabilities_Valid() const{
    return m_device_capabilities_isValid;
}

QString OAIGetDeviceResponse::getDeviceName() const {
    return m_device_name;
}
void OAIGetDeviceResponse::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIGetDeviceResponse::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIGetDeviceResponse::is_device_name_Valid() const{
    return m_device_name_isValid;
}

OAIDeviceStatus OAIGetDeviceResponse::getDeviceStatus() const {
    return m_device_status;
}
void OAIGetDeviceResponse::setDeviceStatus(const OAIDeviceStatus &device_status) {
    m_device_status = device_status;
    m_device_status_isSet = true;
}

bool OAIGetDeviceResponse::is_device_status_Set() const{
    return m_device_status_isSet;
}

bool OAIGetDeviceResponse::is_device_status_Valid() const{
    return m_device_status_isValid;
}

OAIDeviceType OAIGetDeviceResponse::getDeviceType() const {
    return m_device_type;
}
void OAIGetDeviceResponse::setDeviceType(const OAIDeviceType &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIGetDeviceResponse::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIGetDeviceResponse::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIGetDeviceResponse::getProviderName() const {
    return m_provider_name;
}
void OAIGetDeviceResponse::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIGetDeviceResponse::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIGetDeviceResponse::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

bool OAIGetDeviceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_capabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_arn_isValid && m_device_capabilities_isValid && m_device_name_isValid && m_device_status_isValid && m_device_type_isValid && m_provider_name_isValid && true;
}

} // namespace OpenAPI
