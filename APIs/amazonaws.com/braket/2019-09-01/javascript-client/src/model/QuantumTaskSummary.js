/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuantumTaskStatus from './QuantumTaskStatus';

/**
 * The QuantumTaskSummary model module.
 * @module model/QuantumTaskSummary
 * @version 2019-09-01
 */
class QuantumTaskSummary {
    /**
     * Constructs a new <code>QuantumTaskSummary</code>.
     * Includes information about a quantum task.
     * @alias module:model/QuantumTaskSummary
     * @param createdAt {Date} 
     * @param deviceArn {String} 
     * @param outputS3Bucket {String} 
     * @param outputS3Directory {String} 
     * @param quantumTaskArn {String} 
     * @param shots {Number} 
     * @param status {module:model/QuantumTaskStatus} 
     */
    constructor(createdAt, deviceArn, outputS3Bucket, outputS3Directory, quantumTaskArn, shots, status) { 
        
        QuantumTaskSummary.initialize(this, createdAt, deviceArn, outputS3Bucket, outputS3Directory, quantumTaskArn, shots, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, deviceArn, outputS3Bucket, outputS3Directory, quantumTaskArn, shots, status) { 
        obj['createdAt'] = createdAt;
        obj['deviceArn'] = deviceArn;
        obj['outputS3Bucket'] = outputS3Bucket;
        obj['outputS3Directory'] = outputS3Directory;
        obj['quantumTaskArn'] = quantumTaskArn;
        obj['shots'] = shots;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>QuantumTaskSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuantumTaskSummary} obj Optional instance to populate.
     * @return {module:model/QuantumTaskSummary} The populated <code>QuantumTaskSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuantumTaskSummary();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('deviceArn')) {
                obj['deviceArn'] = ApiClient.convertToType(data['deviceArn'], 'String');
            }
            if (data.hasOwnProperty('endedAt')) {
                obj['endedAt'] = ApiClient.convertToType(data['endedAt'], 'Date');
            }
            if (data.hasOwnProperty('outputS3Bucket')) {
                obj['outputS3Bucket'] = ApiClient.convertToType(data['outputS3Bucket'], 'String');
            }
            if (data.hasOwnProperty('outputS3Directory')) {
                obj['outputS3Directory'] = ApiClient.convertToType(data['outputS3Directory'], 'String');
            }
            if (data.hasOwnProperty('quantumTaskArn')) {
                obj['quantumTaskArn'] = ApiClient.convertToType(data['quantumTaskArn'], 'String');
            }
            if (data.hasOwnProperty('shots')) {
                obj['shots'] = ApiClient.convertToType(data['shots'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], QuantumTaskStatus);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuantumTaskSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuantumTaskSummary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuantumTaskSummary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `deviceArn`
        if (data['deviceArn']) { // data not null
          String.validateJSON(data['deviceArn']);
        }
        // validate the optional field `endedAt`
        if (data['endedAt']) { // data not null
          Date.validateJSON(data['endedAt']);
        }
        // validate the optional field `outputS3Bucket`
        if (data['outputS3Bucket']) { // data not null
          String.validateJSON(data['outputS3Bucket']);
        }
        // validate the optional field `outputS3Directory`
        if (data['outputS3Directory']) { // data not null
          String.validateJSON(data['outputS3Directory']);
        }
        // validate the optional field `quantumTaskArn`
        if (data['quantumTaskArn']) { // data not null
          String.validateJSON(data['quantumTaskArn']);
        }
        // validate the optional field `shots`
        if (data['shots']) { // data not null
          Number.validateJSON(data['shots']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          QuantumTaskStatus.validateJSON(data['status']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }

        return true;
    }


}

QuantumTaskSummary.RequiredProperties = ["createdAt", "deviceArn", "outputS3Bucket", "outputS3Directory", "quantumTaskArn", "shots", "status"];

/**
 * @member {Date} createdAt
 */
QuantumTaskSummary.prototype['createdAt'] = undefined;

/**
 * @member {String} deviceArn
 */
QuantumTaskSummary.prototype['deviceArn'] = undefined;

/**
 * @member {Date} endedAt
 */
QuantumTaskSummary.prototype['endedAt'] = undefined;

/**
 * @member {String} outputS3Bucket
 */
QuantumTaskSummary.prototype['outputS3Bucket'] = undefined;

/**
 * @member {String} outputS3Directory
 */
QuantumTaskSummary.prototype['outputS3Directory'] = undefined;

/**
 * @member {String} quantumTaskArn
 */
QuantumTaskSummary.prototype['quantumTaskArn'] = undefined;

/**
 * @member {Number} shots
 */
QuantumTaskSummary.prototype['shots'] = undefined;

/**
 * @member {module:model/QuantumTaskStatus} status
 */
QuantumTaskSummary.prototype['status'] = undefined;

/**
 * @member {Object} tags
 */
QuantumTaskSummary.prototype['tags'] = undefined;






export default QuantumTaskSummary;

