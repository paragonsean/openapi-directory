/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceStatus from './DeviceStatus';
import DeviceType from './DeviceType';

/**
 * The GetDeviceResponse model module.
 * @module model/GetDeviceResponse
 * @version 2019-09-01
 */
class GetDeviceResponse {
    /**
     * Constructs a new <code>GetDeviceResponse</code>.
     * @alias module:model/GetDeviceResponse
     * @param deviceArn {String} 
     * @param deviceCapabilities {String} 
     * @param deviceName {String} 
     * @param deviceStatus {module:model/DeviceStatus} 
     * @param deviceType {module:model/DeviceType} 
     * @param providerName {String} 
     */
    constructor(deviceArn, deviceCapabilities, deviceName, deviceStatus, deviceType, providerName) { 
        
        GetDeviceResponse.initialize(this, deviceArn, deviceCapabilities, deviceName, deviceStatus, deviceType, providerName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceArn, deviceCapabilities, deviceName, deviceStatus, deviceType, providerName) { 
        obj['deviceArn'] = deviceArn;
        obj['deviceCapabilities'] = deviceCapabilities;
        obj['deviceName'] = deviceName;
        obj['deviceStatus'] = deviceStatus;
        obj['deviceType'] = deviceType;
        obj['providerName'] = providerName;
    }

    /**
     * Constructs a <code>GetDeviceResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetDeviceResponse} obj Optional instance to populate.
     * @return {module:model/GetDeviceResponse} The populated <code>GetDeviceResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDeviceResponse();

            if (data.hasOwnProperty('deviceArn')) {
                obj['deviceArn'] = ApiClient.convertToType(data['deviceArn'], 'String');
            }
            if (data.hasOwnProperty('deviceCapabilities')) {
                obj['deviceCapabilities'] = ApiClient.convertToType(data['deviceCapabilities'], 'String');
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('deviceStatus')) {
                obj['deviceStatus'] = ApiClient.convertToType(data['deviceStatus'], DeviceStatus);
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], DeviceType);
            }
            if (data.hasOwnProperty('providerName')) {
                obj['providerName'] = ApiClient.convertToType(data['providerName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetDeviceResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetDeviceResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetDeviceResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `deviceArn`
        if (data['deviceArn']) { // data not null
          String.validateJSON(data['deviceArn']);
        }
        // validate the optional field `deviceCapabilities`
        if (data['deviceCapabilities']) { // data not null
          String.validateJSON(data['deviceCapabilities']);
        }
        // validate the optional field `deviceName`
        if (data['deviceName']) { // data not null
          String.validateJSON(data['deviceName']);
        }
        // validate the optional field `deviceStatus`
        if (data['deviceStatus']) { // data not null
          DeviceStatus.validateJSON(data['deviceStatus']);
        }
        // validate the optional field `deviceType`
        if (data['deviceType']) { // data not null
          DeviceType.validateJSON(data['deviceType']);
        }
        // validate the optional field `providerName`
        if (data['providerName']) { // data not null
          String.validateJSON(data['providerName']);
        }

        return true;
    }


}

GetDeviceResponse.RequiredProperties = ["deviceArn", "deviceCapabilities", "deviceName", "deviceStatus", "deviceType", "providerName"];

/**
 * @member {String} deviceArn
 */
GetDeviceResponse.prototype['deviceArn'] = undefined;

/**
 * @member {String} deviceCapabilities
 */
GetDeviceResponse.prototype['deviceCapabilities'] = undefined;

/**
 * @member {String} deviceName
 */
GetDeviceResponse.prototype['deviceName'] = undefined;

/**
 * @member {module:model/DeviceStatus} deviceStatus
 */
GetDeviceResponse.prototype['deviceStatus'] = undefined;

/**
 * @member {module:model/DeviceType} deviceType
 */
GetDeviceResponse.prototype['deviceType'] = undefined;

/**
 * @member {String} providerName
 */
GetDeviceResponse.prototype['providerName'] = undefined;






export default GetDeviceResponse;

