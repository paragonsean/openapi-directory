/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SearchDevicesFilter model module.
 * @module model/SearchDevicesFilter
 * @version 2019-09-01
 */
class SearchDevicesFilter {
    /**
     * Constructs a new <code>SearchDevicesFilter</code>.
     * The filter to use for searching devices.
     * @alias module:model/SearchDevicesFilter
     * @param name {String} 
     * @param values {Array} 
     */
    constructor(name, values) { 
        
        SearchDevicesFilter.initialize(this, name, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, values) { 
        obj['name'] = name;
        obj['values'] = values;
    }

    /**
     * Constructs a <code>SearchDevicesFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchDevicesFilter} obj Optional instance to populate.
     * @return {module:model/SearchDevicesFilter} The populated <code>SearchDevicesFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchDevicesFilter();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchDevicesFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchDevicesFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchDevicesFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `values`
        if (data['values']) { // data not null
          Array.validateJSON(data['values']);
        }

        return true;
    }


}

SearchDevicesFilter.RequiredProperties = ["name", "values"];

/**
 * @member {String} name
 */
SearchDevicesFilter.prototype['name'] = undefined;

/**
 * @member {Array} values
 */
SearchDevicesFilter.prototype['values'] = undefined;






export default SearchDevicesFilter;

