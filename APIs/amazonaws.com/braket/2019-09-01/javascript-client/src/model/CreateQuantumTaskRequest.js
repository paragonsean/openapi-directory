/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateQuantumTaskRequest model module.
 * @module model/CreateQuantumTaskRequest
 * @version 2019-09-01
 */
class CreateQuantumTaskRequest {
    /**
     * Constructs a new <code>CreateQuantumTaskRequest</code>.
     * @alias module:model/CreateQuantumTaskRequest
     * @param action {String} The action associated with the task.
     * @param clientToken {String} The client token associated with the request.
     * @param deviceArn {String} The ARN of the device to run the task on.
     * @param outputS3Bucket {String} The S3 bucket to store task result files in.
     * @param outputS3KeyPrefix {String} The key prefix for the location in the S3 bucket to store task results in.
     * @param shots {Number} The number of shots to use for the task.
     */
    constructor(action, clientToken, deviceArn, outputS3Bucket, outputS3KeyPrefix, shots) { 
        
        CreateQuantumTaskRequest.initialize(this, action, clientToken, deviceArn, outputS3Bucket, outputS3KeyPrefix, shots);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, clientToken, deviceArn, outputS3Bucket, outputS3KeyPrefix, shots) { 
        obj['action'] = action;
        obj['clientToken'] = clientToken;
        obj['deviceArn'] = deviceArn;
        obj['outputS3Bucket'] = outputS3Bucket;
        obj['outputS3KeyPrefix'] = outputS3KeyPrefix;
        obj['shots'] = shots;
    }

    /**
     * Constructs a <code>CreateQuantumTaskRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateQuantumTaskRequest} obj Optional instance to populate.
     * @return {module:model/CreateQuantumTaskRequest} The populated <code>CreateQuantumTaskRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateQuantumTaskRequest();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('deviceArn')) {
                obj['deviceArn'] = ApiClient.convertToType(data['deviceArn'], 'String');
            }
            if (data.hasOwnProperty('deviceParameters')) {
                obj['deviceParameters'] = ApiClient.convertToType(data['deviceParameters'], 'String');
            }
            if (data.hasOwnProperty('jobToken')) {
                obj['jobToken'] = ApiClient.convertToType(data['jobToken'], 'String');
            }
            if (data.hasOwnProperty('outputS3Bucket')) {
                obj['outputS3Bucket'] = ApiClient.convertToType(data['outputS3Bucket'], 'String');
            }
            if (data.hasOwnProperty('outputS3KeyPrefix')) {
                obj['outputS3KeyPrefix'] = ApiClient.convertToType(data['outputS3KeyPrefix'], 'String');
            }
            if (data.hasOwnProperty('shots')) {
                obj['shots'] = ApiClient.convertToType(data['shots'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateQuantumTaskRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateQuantumTaskRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateQuantumTaskRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['deviceArn'] && !(typeof data['deviceArn'] === 'string' || data['deviceArn'] instanceof String)) {
            throw new Error("Expected the field `deviceArn` to be a primitive type in the JSON string but got " + data['deviceArn']);
        }
        // ensure the json data is a string
        if (data['deviceParameters'] && !(typeof data['deviceParameters'] === 'string' || data['deviceParameters'] instanceof String)) {
            throw new Error("Expected the field `deviceParameters` to be a primitive type in the JSON string but got " + data['deviceParameters']);
        }
        // ensure the json data is a string
        if (data['jobToken'] && !(typeof data['jobToken'] === 'string' || data['jobToken'] instanceof String)) {
            throw new Error("Expected the field `jobToken` to be a primitive type in the JSON string but got " + data['jobToken']);
        }
        // ensure the json data is a string
        if (data['outputS3Bucket'] && !(typeof data['outputS3Bucket'] === 'string' || data['outputS3Bucket'] instanceof String)) {
            throw new Error("Expected the field `outputS3Bucket` to be a primitive type in the JSON string but got " + data['outputS3Bucket']);
        }
        // ensure the json data is a string
        if (data['outputS3KeyPrefix'] && !(typeof data['outputS3KeyPrefix'] === 'string' || data['outputS3KeyPrefix'] instanceof String)) {
            throw new Error("Expected the field `outputS3KeyPrefix` to be a primitive type in the JSON string but got " + data['outputS3KeyPrefix']);
        }

        return true;
    }


}

CreateQuantumTaskRequest.RequiredProperties = ["action", "clientToken", "deviceArn", "outputS3Bucket", "outputS3KeyPrefix", "shots"];

/**
 * The action associated with the task.
 * @member {String} action
 */
CreateQuantumTaskRequest.prototype['action'] = undefined;

/**
 * The client token associated with the request.
 * @member {String} clientToken
 */
CreateQuantumTaskRequest.prototype['clientToken'] = undefined;

/**
 * The ARN of the device to run the task on.
 * @member {String} deviceArn
 */
CreateQuantumTaskRequest.prototype['deviceArn'] = undefined;

/**
 * The parameters for the device to run the task on.
 * @member {String} deviceParameters
 */
CreateQuantumTaskRequest.prototype['deviceParameters'] = undefined;

/**
 * The token for an Amazon Braket job that associates it with the quantum task.
 * @member {String} jobToken
 */
CreateQuantumTaskRequest.prototype['jobToken'] = undefined;

/**
 * The S3 bucket to store task result files in.
 * @member {String} outputS3Bucket
 */
CreateQuantumTaskRequest.prototype['outputS3Bucket'] = undefined;

/**
 * The key prefix for the location in the S3 bucket to store task results in.
 * @member {String} outputS3KeyPrefix
 */
CreateQuantumTaskRequest.prototype['outputS3KeyPrefix'] = undefined;

/**
 * The number of shots to use for the task.
 * @member {Number} shots
 */
CreateQuantumTaskRequest.prototype['shots'] = undefined;

/**
 * Tags to be added to the quantum task you're creating.
 * @member {Object.<String, String>} tags
 */
CreateQuantumTaskRequest.prototype['tags'] = undefined;






export default CreateQuantumTaskRequest;

