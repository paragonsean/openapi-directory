/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateJobRequestAlgorithmSpecification from './CreateJobRequestAlgorithmSpecification';
import CreateJobRequestCheckpointConfig from './CreateJobRequestCheckpointConfig';
import CreateJobRequestDeviceConfig from './CreateJobRequestDeviceConfig';
import CreateJobRequestInstanceConfig from './CreateJobRequestInstanceConfig';
import CreateJobRequestOutputDataConfig from './CreateJobRequestOutputDataConfig';
import CreateJobRequestStoppingCondition from './CreateJobRequestStoppingCondition';
import InputFileConfig from './InputFileConfig';

/**
 * The CreateJobRequest model module.
 * @module model/CreateJobRequest
 * @version 2019-09-01
 */
class CreateJobRequest {
    /**
     * Constructs a new <code>CreateJobRequest</code>.
     * @alias module:model/CreateJobRequest
     * @param algorithmSpecification {module:model/CreateJobRequestAlgorithmSpecification} 
     * @param clientToken {String} A unique token that guarantees that the call to this API is idempotent.
     * @param deviceConfig {module:model/CreateJobRequestDeviceConfig} 
     * @param instanceConfig {module:model/CreateJobRequestInstanceConfig} 
     * @param jobName {String} The name of the Amazon Braket job.
     * @param outputDataConfig {module:model/CreateJobRequestOutputDataConfig} 
     * @param roleArn {String} The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the users' s3 buckets.
     */
    constructor(algorithmSpecification, clientToken, deviceConfig, instanceConfig, jobName, outputDataConfig, roleArn) { 
        
        CreateJobRequest.initialize(this, algorithmSpecification, clientToken, deviceConfig, instanceConfig, jobName, outputDataConfig, roleArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, algorithmSpecification, clientToken, deviceConfig, instanceConfig, jobName, outputDataConfig, roleArn) { 
        obj['algorithmSpecification'] = algorithmSpecification;
        obj['clientToken'] = clientToken;
        obj['deviceConfig'] = deviceConfig;
        obj['instanceConfig'] = instanceConfig;
        obj['jobName'] = jobName;
        obj['outputDataConfig'] = outputDataConfig;
        obj['roleArn'] = roleArn;
    }

    /**
     * Constructs a <code>CreateJobRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateJobRequest} obj Optional instance to populate.
     * @return {module:model/CreateJobRequest} The populated <code>CreateJobRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateJobRequest();

            if (data.hasOwnProperty('algorithmSpecification')) {
                obj['algorithmSpecification'] = CreateJobRequestAlgorithmSpecification.constructFromObject(data['algorithmSpecification']);
            }
            if (data.hasOwnProperty('checkpointConfig')) {
                obj['checkpointConfig'] = CreateJobRequestCheckpointConfig.constructFromObject(data['checkpointConfig']);
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('deviceConfig')) {
                obj['deviceConfig'] = CreateJobRequestDeviceConfig.constructFromObject(data['deviceConfig']);
            }
            if (data.hasOwnProperty('hyperParameters')) {
                obj['hyperParameters'] = ApiClient.convertToType(data['hyperParameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('inputDataConfig')) {
                obj['inputDataConfig'] = ApiClient.convertToType(data['inputDataConfig'], [InputFileConfig]);
            }
            if (data.hasOwnProperty('instanceConfig')) {
                obj['instanceConfig'] = CreateJobRequestInstanceConfig.constructFromObject(data['instanceConfig']);
            }
            if (data.hasOwnProperty('jobName')) {
                obj['jobName'] = ApiClient.convertToType(data['jobName'], 'String');
            }
            if (data.hasOwnProperty('outputDataConfig')) {
                obj['outputDataConfig'] = CreateJobRequestOutputDataConfig.constructFromObject(data['outputDataConfig']);
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('stoppingCondition')) {
                obj['stoppingCondition'] = CreateJobRequestStoppingCondition.constructFromObject(data['stoppingCondition']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateJobRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateJobRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateJobRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `algorithmSpecification`
        if (data['algorithmSpecification']) { // data not null
          CreateJobRequestAlgorithmSpecification.validateJSON(data['algorithmSpecification']);
        }
        // validate the optional field `checkpointConfig`
        if (data['checkpointConfig']) { // data not null
          CreateJobRequestCheckpointConfig.validateJSON(data['checkpointConfig']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // validate the optional field `deviceConfig`
        if (data['deviceConfig']) { // data not null
          CreateJobRequestDeviceConfig.validateJSON(data['deviceConfig']);
        }
        if (data['inputDataConfig']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputDataConfig'])) {
                throw new Error("Expected the field `inputDataConfig` to be an array in the JSON data but got " + data['inputDataConfig']);
            }
            // validate the optional field `inputDataConfig` (array)
            for (const item of data['inputDataConfig']) {
                InputFileConfig.validateJSON(item);
            };
        }
        // validate the optional field `instanceConfig`
        if (data['instanceConfig']) { // data not null
          CreateJobRequestInstanceConfig.validateJSON(data['instanceConfig']);
        }
        // ensure the json data is a string
        if (data['jobName'] && !(typeof data['jobName'] === 'string' || data['jobName'] instanceof String)) {
            throw new Error("Expected the field `jobName` to be a primitive type in the JSON string but got " + data['jobName']);
        }
        // validate the optional field `outputDataConfig`
        if (data['outputDataConfig']) { // data not null
          CreateJobRequestOutputDataConfig.validateJSON(data['outputDataConfig']);
        }
        // ensure the json data is a string
        if (data['roleArn'] && !(typeof data['roleArn'] === 'string' || data['roleArn'] instanceof String)) {
            throw new Error("Expected the field `roleArn` to be a primitive type in the JSON string but got " + data['roleArn']);
        }
        // validate the optional field `stoppingCondition`
        if (data['stoppingCondition']) { // data not null
          CreateJobRequestStoppingCondition.validateJSON(data['stoppingCondition']);
        }

        return true;
    }


}

CreateJobRequest.RequiredProperties = ["algorithmSpecification", "clientToken", "deviceConfig", "instanceConfig", "jobName", "outputDataConfig", "roleArn"];

/**
 * @member {module:model/CreateJobRequestAlgorithmSpecification} algorithmSpecification
 */
CreateJobRequest.prototype['algorithmSpecification'] = undefined;

/**
 * @member {module:model/CreateJobRequestCheckpointConfig} checkpointConfig
 */
CreateJobRequest.prototype['checkpointConfig'] = undefined;

/**
 * A unique token that guarantees that the call to this API is idempotent.
 * @member {String} clientToken
 */
CreateJobRequest.prototype['clientToken'] = undefined;

/**
 * @member {module:model/CreateJobRequestDeviceConfig} deviceConfig
 */
CreateJobRequest.prototype['deviceConfig'] = undefined;

/**
 * Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the training job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.
 * @member {Object.<String, String>} hyperParameters
 */
CreateJobRequest.prototype['hyperParameters'] = undefined;

/**
 * A list of parameters that specify the name and type of input data and where it is located.
 * @member {Array.<module:model/InputFileConfig>} inputDataConfig
 */
CreateJobRequest.prototype['inputDataConfig'] = undefined;

/**
 * @member {module:model/CreateJobRequestInstanceConfig} instanceConfig
 */
CreateJobRequest.prototype['instanceConfig'] = undefined;

/**
 * The name of the Amazon Braket job.
 * @member {String} jobName
 */
CreateJobRequest.prototype['jobName'] = undefined;

/**
 * @member {module:model/CreateJobRequestOutputDataConfig} outputDataConfig
 */
CreateJobRequest.prototype['outputDataConfig'] = undefined;

/**
 * The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the users' s3 buckets.
 * @member {String} roleArn
 */
CreateJobRequest.prototype['roleArn'] = undefined;

/**
 * @member {module:model/CreateJobRequestStoppingCondition} stoppingCondition
 */
CreateJobRequest.prototype['stoppingCondition'] = undefined;

/**
 * A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.
 * @member {Object.<String, String>} tags
 */
CreateJobRequest.prototype['tags'] = undefined;






export default CreateJobRequest;

