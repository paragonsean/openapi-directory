/**
 * Braket
 * <p>The Amazon Braket API Reference provides information about the operations and structures supported in Amazon Braket.</p> <p>Additional Resources:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/braket/latest/developerguide/what-is-braket.html\">Amazon Braket Developer Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2019-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Braket);
  }
}(this, function(expect, Braket) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Braket.DeviceSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceSummary', function() {
    it('should create an instance of DeviceSummary', function() {
      // uncomment below and update the code to test DeviceSummary
      //var instance = new Braket.DeviceSummary();
      //expect(instance).to.be.a(Braket.DeviceSummary);
    });

    it('should have the property deviceArn (base name: "deviceArn")', function() {
      // uncomment below and update the code to test the property deviceArn
      //var instance = new Braket.DeviceSummary();
      //expect(instance).to.be();
    });

    it('should have the property deviceName (base name: "deviceName")', function() {
      // uncomment below and update the code to test the property deviceName
      //var instance = new Braket.DeviceSummary();
      //expect(instance).to.be();
    });

    it('should have the property deviceStatus (base name: "deviceStatus")', function() {
      // uncomment below and update the code to test the property deviceStatus
      //var instance = new Braket.DeviceSummary();
      //expect(instance).to.be();
    });

    it('should have the property deviceType (base name: "deviceType")', function() {
      // uncomment below and update the code to test the property deviceType
      //var instance = new Braket.DeviceSummary();
      //expect(instance).to.be();
    });

    it('should have the property providerName (base name: "providerName")', function() {
      // uncomment below and update the code to test the property providerName
      //var instance = new Braket.DeviceSummary();
      //expect(instance).to.be();
    });

  });

}));
