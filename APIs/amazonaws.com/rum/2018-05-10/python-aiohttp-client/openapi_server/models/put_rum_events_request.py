# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_rum_events_request_app_monitor_details import PutRumEventsRequestAppMonitorDetails
from openapi_server.models.put_rum_events_request_user_details import PutRumEventsRequestUserDetails
from openapi_server.models.rum_event import RumEvent
import re
from openapi_server import util


class PutRumEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_monitor_details: PutRumEventsRequestAppMonitorDetails=None, batch_id: str=None, rum_events: List[RumEvent]=None, user_details: PutRumEventsRequestUserDetails=None):
        """PutRumEventsRequest - a model defined in OpenAPI

        :param app_monitor_details: The app_monitor_details of this PutRumEventsRequest.
        :param batch_id: The batch_id of this PutRumEventsRequest.
        :param rum_events: The rum_events of this PutRumEventsRequest.
        :param user_details: The user_details of this PutRumEventsRequest.
        """
        self.openapi_types = {
            'app_monitor_details': PutRumEventsRequestAppMonitorDetails,
            'batch_id': str,
            'rum_events': List[RumEvent],
            'user_details': PutRumEventsRequestUserDetails
        }

        self.attribute_map = {
            'app_monitor_details': 'AppMonitorDetails',
            'batch_id': 'BatchId',
            'rum_events': 'RumEvents',
            'user_details': 'UserDetails'
        }

        self._app_monitor_details = app_monitor_details
        self._batch_id = batch_id
        self._rum_events = rum_events
        self._user_details = user_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRumEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRumEvents_request of this PutRumEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_monitor_details(self):
        """Gets the app_monitor_details of this PutRumEventsRequest.


        :return: The app_monitor_details of this PutRumEventsRequest.
        :rtype: PutRumEventsRequestAppMonitorDetails
        """
        return self._app_monitor_details

    @app_monitor_details.setter
    def app_monitor_details(self, app_monitor_details):
        """Sets the app_monitor_details of this PutRumEventsRequest.


        :param app_monitor_details: The app_monitor_details of this PutRumEventsRequest.
        :type app_monitor_details: PutRumEventsRequestAppMonitorDetails
        """
        if app_monitor_details is None:
            raise ValueError("Invalid value for `app_monitor_details`, must not be `None`")

        self._app_monitor_details = app_monitor_details

    @property
    def batch_id(self):
        """Gets the batch_id of this PutRumEventsRequest.

        A unique identifier for this batch of RUM event data.

        :return: The batch_id of this PutRumEventsRequest.
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this PutRumEventsRequest.

        A unique identifier for this batch of RUM event data.

        :param batch_id: The batch_id of this PutRumEventsRequest.
        :type batch_id: str
        """
        if batch_id is None:
            raise ValueError("Invalid value for `batch_id`, must not be `None`")
        if batch_id is not None and len(batch_id) > 36:
            raise ValueError("Invalid value for `batch_id`, length must be less than or equal to `36`")
        if batch_id is not None and len(batch_id) < 36:
            raise ValueError("Invalid value for `batch_id`, length must be greater than or equal to `36`")
        if batch_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', batch_id):
            raise ValueError("Invalid value for `batch_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._batch_id = batch_id

    @property
    def rum_events(self):
        """Gets the rum_events of this PutRumEventsRequest.

        An array of structures that contain the telemetry event data.

        :return: The rum_events of this PutRumEventsRequest.
        :rtype: List[RumEvent]
        """
        return self._rum_events

    @rum_events.setter
    def rum_events(self, rum_events):
        """Sets the rum_events of this PutRumEventsRequest.

        An array of structures that contain the telemetry event data.

        :param rum_events: The rum_events of this PutRumEventsRequest.
        :type rum_events: List[RumEvent]
        """
        if rum_events is None:
            raise ValueError("Invalid value for `rum_events`, must not be `None`")

        self._rum_events = rum_events

    @property
    def user_details(self):
        """Gets the user_details of this PutRumEventsRequest.


        :return: The user_details of this PutRumEventsRequest.
        :rtype: PutRumEventsRequestUserDetails
        """
        return self._user_details

    @user_details.setter
    def user_details(self, user_details):
        """Sets the user_details of this PutRumEventsRequest.


        :param user_details: The user_details of this PutRumEventsRequest.
        :type user_details: PutRumEventsRequestUserDetails
        """
        if user_details is None:
            raise ValueError("Invalid value for `user_details`, must not be `None`")

        self._user_details = user_details
