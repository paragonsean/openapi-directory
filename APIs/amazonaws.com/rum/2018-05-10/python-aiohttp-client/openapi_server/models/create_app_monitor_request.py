# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_app_monitor_request_app_monitor_configuration import CreateAppMonitorRequestAppMonitorConfiguration
from openapi_server.models.create_app_monitor_request_custom_events import CreateAppMonitorRequestCustomEvents
import re
from openapi_server import util


class CreateAppMonitorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_monitor_configuration: CreateAppMonitorRequestAppMonitorConfiguration=None, custom_events: CreateAppMonitorRequestCustomEvents=None, cw_log_enabled: bool=None, domain: str=None, name: str=None, tags: Dict[str, str]=None):
        """CreateAppMonitorRequest - a model defined in OpenAPI

        :param app_monitor_configuration: The app_monitor_configuration of this CreateAppMonitorRequest.
        :param custom_events: The custom_events of this CreateAppMonitorRequest.
        :param cw_log_enabled: The cw_log_enabled of this CreateAppMonitorRequest.
        :param domain: The domain of this CreateAppMonitorRequest.
        :param name: The name of this CreateAppMonitorRequest.
        :param tags: The tags of this CreateAppMonitorRequest.
        """
        self.openapi_types = {
            'app_monitor_configuration': CreateAppMonitorRequestAppMonitorConfiguration,
            'custom_events': CreateAppMonitorRequestCustomEvents,
            'cw_log_enabled': bool,
            'domain': str,
            'name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'app_monitor_configuration': 'AppMonitorConfiguration',
            'custom_events': 'CustomEvents',
            'cw_log_enabled': 'CwLogEnabled',
            'domain': 'Domain',
            'name': 'Name',
            'tags': 'Tags'
        }

        self._app_monitor_configuration = app_monitor_configuration
        self._custom_events = custom_events
        self._cw_log_enabled = cw_log_enabled
        self._domain = domain
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAppMonitorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAppMonitor_request of this CreateAppMonitorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_monitor_configuration(self):
        """Gets the app_monitor_configuration of this CreateAppMonitorRequest.


        :return: The app_monitor_configuration of this CreateAppMonitorRequest.
        :rtype: CreateAppMonitorRequestAppMonitorConfiguration
        """
        return self._app_monitor_configuration

    @app_monitor_configuration.setter
    def app_monitor_configuration(self, app_monitor_configuration):
        """Sets the app_monitor_configuration of this CreateAppMonitorRequest.


        :param app_monitor_configuration: The app_monitor_configuration of this CreateAppMonitorRequest.
        :type app_monitor_configuration: CreateAppMonitorRequestAppMonitorConfiguration
        """

        self._app_monitor_configuration = app_monitor_configuration

    @property
    def custom_events(self):
        """Gets the custom_events of this CreateAppMonitorRequest.


        :return: The custom_events of this CreateAppMonitorRequest.
        :rtype: CreateAppMonitorRequestCustomEvents
        """
        return self._custom_events

    @custom_events.setter
    def custom_events(self, custom_events):
        """Sets the custom_events of this CreateAppMonitorRequest.


        :param custom_events: The custom_events of this CreateAppMonitorRequest.
        :type custom_events: CreateAppMonitorRequestCustomEvents
        """

        self._custom_events = custom_events

    @property
    def cw_log_enabled(self):
        """Gets the cw_log_enabled of this CreateAppMonitorRequest.

        <p>Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.</p> <p>If you omit this parameter, the default is <code>false</code>.</p>

        :return: The cw_log_enabled of this CreateAppMonitorRequest.
        :rtype: bool
        """
        return self._cw_log_enabled

    @cw_log_enabled.setter
    def cw_log_enabled(self, cw_log_enabled):
        """Sets the cw_log_enabled of this CreateAppMonitorRequest.

        <p>Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.</p> <p>If you omit this parameter, the default is <code>false</code>.</p>

        :param cw_log_enabled: The cw_log_enabled of this CreateAppMonitorRequest.
        :type cw_log_enabled: bool
        """

        self._cw_log_enabled = cw_log_enabled

    @property
    def domain(self):
        """Gets the domain of this CreateAppMonitorRequest.

        The top-level internet domain name for which your application has administrative authority.

        :return: The domain of this CreateAppMonitorRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CreateAppMonitorRequest.

        The top-level internet domain name for which your application has administrative authority.

        :param domain: The domain of this CreateAppMonitorRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")
        if domain is not None and len(domain) > 253:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `253`")
        if domain is not None and len(domain) < 1:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `1`")
        if domain is not None and not re.search(r'^(localhost)|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))|^(\*\.)(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))', domain):
            raise ValueError("Invalid value for `domain`, must be a follow pattern or equal to `/^(localhost)|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))|^(\*\.)(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))/`")

        self._domain = domain

    @property
    def name(self):
        """Gets the name of this CreateAppMonitorRequest.

        A name for the app monitor.

        :return: The name of this CreateAppMonitorRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAppMonitorRequest.

        A name for the app monitor.

        :param name: The name of this CreateAppMonitorRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^(?!\.)[\.\-_#A-Za-z0-9]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?!\.)[\.\-_#A-Za-z0-9]+$/`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateAppMonitorRequest.

        <p>Assigns one or more tags (key-value pairs) to the app monitor.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with an app monitor.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :return: The tags of this CreateAppMonitorRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAppMonitorRequest.

        <p>Assigns one or more tags (key-value pairs) to the app monitor.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with an app monitor.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :param tags: The tags of this CreateAppMonitorRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
