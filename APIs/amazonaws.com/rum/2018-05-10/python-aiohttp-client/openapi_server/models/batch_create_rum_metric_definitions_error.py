# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_create_rum_metric_definitions_error_metric_definition import BatchCreateRumMetricDefinitionsErrorMetricDefinition
from openapi_server import util


class BatchCreateRumMetricDefinitionsError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: str=None, error_message: str=None, metric_definition: BatchCreateRumMetricDefinitionsErrorMetricDefinition=None):
        """BatchCreateRumMetricDefinitionsError - a model defined in OpenAPI

        :param error_code: The error_code of this BatchCreateRumMetricDefinitionsError.
        :param error_message: The error_message of this BatchCreateRumMetricDefinitionsError.
        :param metric_definition: The metric_definition of this BatchCreateRumMetricDefinitionsError.
        """
        self.openapi_types = {
            'error_code': str,
            'error_message': str,
            'metric_definition': BatchCreateRumMetricDefinitionsErrorMetricDefinition
        }

        self.attribute_map = {
            'error_code': 'ErrorCode',
            'error_message': 'ErrorMessage',
            'metric_definition': 'MetricDefinition'
        }

        self._error_code = error_code
        self._error_message = error_message
        self._metric_definition = metric_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateRumMetricDefinitionsError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateRumMetricDefinitionsError of this BatchCreateRumMetricDefinitionsError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this BatchCreateRumMetricDefinitionsError.


        :return: The error_code of this BatchCreateRumMetricDefinitionsError.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this BatchCreateRumMetricDefinitionsError.


        :param error_code: The error_code of this BatchCreateRumMetricDefinitionsError.
        :type error_code: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this BatchCreateRumMetricDefinitionsError.


        :return: The error_message of this BatchCreateRumMetricDefinitionsError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BatchCreateRumMetricDefinitionsError.


        :param error_message: The error_message of this BatchCreateRumMetricDefinitionsError.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def metric_definition(self):
        """Gets the metric_definition of this BatchCreateRumMetricDefinitionsError.


        :return: The metric_definition of this BatchCreateRumMetricDefinitionsError.
        :rtype: BatchCreateRumMetricDefinitionsErrorMetricDefinition
        """
        return self._metric_definition

    @metric_definition.setter
    def metric_definition(self, metric_definition):
        """Sets the metric_definition of this BatchCreateRumMetricDefinitionsError.


        :param metric_definition: The metric_definition of this BatchCreateRumMetricDefinitionsError.
        :type metric_definition: BatchCreateRumMetricDefinitionsErrorMetricDefinition
        """
        if metric_definition is None:
            raise ValueError("Invalid value for `metric_definition`, must not be `None`")

        self._metric_definition = metric_definition
