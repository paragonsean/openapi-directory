# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_rum_metric_definition_request_metric_definition import UpdateRumMetricDefinitionRequestMetricDefinition
import re
from openapi_server import util


class UpdateRumMetricDefinitionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, destination_arn: str=None, metric_definition: UpdateRumMetricDefinitionRequestMetricDefinition=None, metric_definition_id: str=None):
        """UpdateRumMetricDefinitionRequest - a model defined in OpenAPI

        :param destination: The destination of this UpdateRumMetricDefinitionRequest.
        :param destination_arn: The destination_arn of this UpdateRumMetricDefinitionRequest.
        :param metric_definition: The metric_definition of this UpdateRumMetricDefinitionRequest.
        :param metric_definition_id: The metric_definition_id of this UpdateRumMetricDefinitionRequest.
        """
        self.openapi_types = {
            'destination': str,
            'destination_arn': str,
            'metric_definition': UpdateRumMetricDefinitionRequestMetricDefinition,
            'metric_definition_id': str
        }

        self.attribute_map = {
            'destination': 'Destination',
            'destination_arn': 'DestinationArn',
            'metric_definition': 'MetricDefinition',
            'metric_definition_id': 'MetricDefinitionId'
        }

        self._destination = destination
        self._destination_arn = destination_arn
        self._metric_definition = metric_definition
        self._metric_definition_id = metric_definition_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRumMetricDefinitionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRumMetricDefinition_request of this UpdateRumMetricDefinitionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this UpdateRumMetricDefinitionRequest.

        The destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that will receive the metrics and an IAM role that has permission to write to the experiment.

        :return: The destination of this UpdateRumMetricDefinitionRequest.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this UpdateRumMetricDefinitionRequest.

        The destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that will receive the metrics and an IAM role that has permission to write to the experiment.

        :param destination: The destination of this UpdateRumMetricDefinitionRequest.
        :type destination: str
        """
        allowed_values = ["CloudWatch", "Evidently"]  # noqa: E501
        if destination not in allowed_values:
            raise ValueError(
                "Invalid value for `destination` ({0}), must be one of {1}"
                .format(destination, allowed_values)
            )

        self._destination = destination

    @property
    def destination_arn(self):
        """Gets the destination_arn of this UpdateRumMetricDefinitionRequest.

        <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p> <p>This parameter specifies the ARN of the Evidently experiment that is to receive the metrics. You must have already defined this experiment as a valid destination. For more information, see <a href=\"https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_PutRumMetricsDestination.html\">PutRumMetricsDestination</a>.</p>

        :return: The destination_arn of this UpdateRumMetricDefinitionRequest.
        :rtype: str
        """
        return self._destination_arn

    @destination_arn.setter
    def destination_arn(self, destination_arn):
        """Sets the destination_arn of this UpdateRumMetricDefinitionRequest.

        <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p> <p>This parameter specifies the ARN of the Evidently experiment that is to receive the metrics. You must have already defined this experiment as a valid destination. For more information, see <a href=\"https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_PutRumMetricsDestination.html\">PutRumMetricsDestination</a>.</p>

        :param destination_arn: The destination_arn of this UpdateRumMetricDefinitionRequest.
        :type destination_arn: str
        """
        if destination_arn is not None and len(destination_arn) > 2048:
            raise ValueError("Invalid value for `destination_arn`, length must be less than or equal to `2048`")
        if destination_arn is not None and len(destination_arn) < 0:
            raise ValueError("Invalid value for `destination_arn`, length must be greater than or equal to `0`")
        if destination_arn is not None and not re.search(r'arn:[^:]*:[^:]*:[^:]*:[^:]*:.*', destination_arn):
            raise ValueError("Invalid value for `destination_arn`, must be a follow pattern or equal to `/arn:[^:]*:[^:]*:[^:]*:[^:]*:.*/`")

        self._destination_arn = destination_arn

    @property
    def metric_definition(self):
        """Gets the metric_definition of this UpdateRumMetricDefinitionRequest.


        :return: The metric_definition of this UpdateRumMetricDefinitionRequest.
        :rtype: UpdateRumMetricDefinitionRequestMetricDefinition
        """
        return self._metric_definition

    @metric_definition.setter
    def metric_definition(self, metric_definition):
        """Sets the metric_definition of this UpdateRumMetricDefinitionRequest.


        :param metric_definition: The metric_definition of this UpdateRumMetricDefinitionRequest.
        :type metric_definition: UpdateRumMetricDefinitionRequestMetricDefinition
        """
        if metric_definition is None:
            raise ValueError("Invalid value for `metric_definition`, must not be `None`")

        self._metric_definition = metric_definition

    @property
    def metric_definition_id(self):
        """Gets the metric_definition_id of this UpdateRumMetricDefinitionRequest.

        The ID of the metric definition to update.

        :return: The metric_definition_id of this UpdateRumMetricDefinitionRequest.
        :rtype: str
        """
        return self._metric_definition_id

    @metric_definition_id.setter
    def metric_definition_id(self, metric_definition_id):
        """Sets the metric_definition_id of this UpdateRumMetricDefinitionRequest.

        The ID of the metric definition to update.

        :param metric_definition_id: The metric_definition_id of this UpdateRumMetricDefinitionRequest.
        :type metric_definition_id: str
        """
        if metric_definition_id is None:
            raise ValueError("Invalid value for `metric_definition_id`, must not be `None`")
        if metric_definition_id is not None and len(metric_definition_id) > 255:
            raise ValueError("Invalid value for `metric_definition_id`, length must be less than or equal to `255`")
        if metric_definition_id is not None and len(metric_definition_id) < 1:
            raise ValueError("Invalid value for `metric_definition_id`, length must be greater than or equal to `1`")

        self._metric_definition_id = metric_definition_id
