# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_app_monitor_data_request_time_range import GetAppMonitorDataRequestTimeRange
from openapi_server.models.query_filter import QueryFilter
from openapi_server import util


class GetAppMonitorDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: List[QueryFilter]=None, max_results: int=None, next_token: str=None, time_range: GetAppMonitorDataRequestTimeRange=None):
        """GetAppMonitorDataRequest - a model defined in OpenAPI

        :param filters: The filters of this GetAppMonitorDataRequest.
        :param max_results: The max_results of this GetAppMonitorDataRequest.
        :param next_token: The next_token of this GetAppMonitorDataRequest.
        :param time_range: The time_range of this GetAppMonitorDataRequest.
        """
        self.openapi_types = {
            'filters': List[QueryFilter],
            'max_results': int,
            'next_token': str,
            'time_range': GetAppMonitorDataRequestTimeRange
        }

        self.attribute_map = {
            'filters': 'Filters',
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'time_range': 'TimeRange'
        }

        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token
        self._time_range = time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAppMonitorDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAppMonitorData_request of this GetAppMonitorDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this GetAppMonitorDataRequest.

        An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.

        :return: The filters of this GetAppMonitorDataRequest.
        :rtype: List[QueryFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GetAppMonitorDataRequest.

        An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.

        :param filters: The filters of this GetAppMonitorDataRequest.
        :type filters: List[QueryFilter]
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this GetAppMonitorDataRequest.

        The maximum number of results to return in one operation. 

        :return: The max_results of this GetAppMonitorDataRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetAppMonitorDataRequest.

        The maximum number of results to return in one operation. 

        :param max_results: The max_results of this GetAppMonitorDataRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 0:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `0`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetAppMonitorDataRequest.

        Use the token returned by the previous operation to request the next page of results.

        :return: The next_token of this GetAppMonitorDataRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetAppMonitorDataRequest.

        Use the token returned by the previous operation to request the next page of results.

        :param next_token: The next_token of this GetAppMonitorDataRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def time_range(self):
        """Gets the time_range of this GetAppMonitorDataRequest.


        :return: The time_range of this GetAppMonitorDataRequest.
        :rtype: GetAppMonitorDataRequestTimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this GetAppMonitorDataRequest.


        :param time_range: The time_range of this GetAppMonitorDataRequest.
        :type time_range: GetAppMonitorDataRequestTimeRange
        """
        if time_range is None:
            raise ValueError("Invalid value for `time_range`, must not be `None`")

        self._time_range = time_range
