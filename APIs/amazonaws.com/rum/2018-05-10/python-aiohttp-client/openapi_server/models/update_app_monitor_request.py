# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_app_monitor_request_app_monitor_configuration import CreateAppMonitorRequestAppMonitorConfiguration
from openapi_server.models.create_app_monitor_request_custom_events import CreateAppMonitorRequestCustomEvents
import re
from openapi_server import util


class UpdateAppMonitorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_monitor_configuration: CreateAppMonitorRequestAppMonitorConfiguration=None, custom_events: CreateAppMonitorRequestCustomEvents=None, cw_log_enabled: bool=None, domain: str=None):
        """UpdateAppMonitorRequest - a model defined in OpenAPI

        :param app_monitor_configuration: The app_monitor_configuration of this UpdateAppMonitorRequest.
        :param custom_events: The custom_events of this UpdateAppMonitorRequest.
        :param cw_log_enabled: The cw_log_enabled of this UpdateAppMonitorRequest.
        :param domain: The domain of this UpdateAppMonitorRequest.
        """
        self.openapi_types = {
            'app_monitor_configuration': CreateAppMonitorRequestAppMonitorConfiguration,
            'custom_events': CreateAppMonitorRequestCustomEvents,
            'cw_log_enabled': bool,
            'domain': str
        }

        self.attribute_map = {
            'app_monitor_configuration': 'AppMonitorConfiguration',
            'custom_events': 'CustomEvents',
            'cw_log_enabled': 'CwLogEnabled',
            'domain': 'Domain'
        }

        self._app_monitor_configuration = app_monitor_configuration
        self._custom_events = custom_events
        self._cw_log_enabled = cw_log_enabled
        self._domain = domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAppMonitorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAppMonitor_request of this UpdateAppMonitorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_monitor_configuration(self):
        """Gets the app_monitor_configuration of this UpdateAppMonitorRequest.


        :return: The app_monitor_configuration of this UpdateAppMonitorRequest.
        :rtype: CreateAppMonitorRequestAppMonitorConfiguration
        """
        return self._app_monitor_configuration

    @app_monitor_configuration.setter
    def app_monitor_configuration(self, app_monitor_configuration):
        """Sets the app_monitor_configuration of this UpdateAppMonitorRequest.


        :param app_monitor_configuration: The app_monitor_configuration of this UpdateAppMonitorRequest.
        :type app_monitor_configuration: CreateAppMonitorRequestAppMonitorConfiguration
        """

        self._app_monitor_configuration = app_monitor_configuration

    @property
    def custom_events(self):
        """Gets the custom_events of this UpdateAppMonitorRequest.


        :return: The custom_events of this UpdateAppMonitorRequest.
        :rtype: CreateAppMonitorRequestCustomEvents
        """
        return self._custom_events

    @custom_events.setter
    def custom_events(self, custom_events):
        """Sets the custom_events of this UpdateAppMonitorRequest.


        :param custom_events: The custom_events of this UpdateAppMonitorRequest.
        :type custom_events: CreateAppMonitorRequestCustomEvents
        """

        self._custom_events = custom_events

    @property
    def cw_log_enabled(self):
        """Gets the cw_log_enabled of this UpdateAppMonitorRequest.

        Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.

        :return: The cw_log_enabled of this UpdateAppMonitorRequest.
        :rtype: bool
        """
        return self._cw_log_enabled

    @cw_log_enabled.setter
    def cw_log_enabled(self, cw_log_enabled):
        """Sets the cw_log_enabled of this UpdateAppMonitorRequest.

        Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.

        :param cw_log_enabled: The cw_log_enabled of this UpdateAppMonitorRequest.
        :type cw_log_enabled: bool
        """

        self._cw_log_enabled = cw_log_enabled

    @property
    def domain(self):
        """Gets the domain of this UpdateAppMonitorRequest.

        The top-level internet domain name for which your application has administrative authority.

        :return: The domain of this UpdateAppMonitorRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this UpdateAppMonitorRequest.

        The top-level internet domain name for which your application has administrative authority.

        :param domain: The domain of this UpdateAppMonitorRequest.
        :type domain: str
        """
        if domain is not None and len(domain) > 253:
            raise ValueError("Invalid value for `domain`, length must be less than or equal to `253`")
        if domain is not None and len(domain) < 1:
            raise ValueError("Invalid value for `domain`, length must be greater than or equal to `1`")
        if domain is not None and not re.search(r'^(localhost)|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))|^(\*\.)(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))', domain):
            raise ValueError("Invalid value for `domain`, must be a follow pattern or equal to `/^(localhost)|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))|^(\*\.)(?![-.])([A-Za-z0-9-\.\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))/`")

        self._domain = domain
