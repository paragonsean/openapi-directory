# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutRumMetricsDestinationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, destination_arn: str=None, iam_role_arn: str=None):
        """PutRumMetricsDestinationRequest - a model defined in OpenAPI

        :param destination: The destination of this PutRumMetricsDestinationRequest.
        :param destination_arn: The destination_arn of this PutRumMetricsDestinationRequest.
        :param iam_role_arn: The iam_role_arn of this PutRumMetricsDestinationRequest.
        """
        self.openapi_types = {
            'destination': str,
            'destination_arn': str,
            'iam_role_arn': str
        }

        self.attribute_map = {
            'destination': 'Destination',
            'destination_arn': 'DestinationArn',
            'iam_role_arn': 'IamRoleArn'
        }

        self._destination = destination
        self._destination_arn = destination_arn
        self._iam_role_arn = iam_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRumMetricsDestinationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRumMetricsDestination_request of this PutRumMetricsDestinationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this PutRumMetricsDestinationRequest.

        Defines the destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.

        :return: The destination of this PutRumMetricsDestinationRequest.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this PutRumMetricsDestinationRequest.

        Defines the destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that is to be the destination and an IAM role that has permission to write to the experiment.

        :param destination: The destination of this PutRumMetricsDestinationRequest.
        :type destination: str
        """
        allowed_values = ["CloudWatch", "Evidently"]  # noqa: E501
        if destination not in allowed_values:
            raise ValueError(
                "Invalid value for `destination` ({0}), must be one of {1}"
                .format(destination, allowed_values)
            )

        self._destination = destination

    @property
    def destination_arn(self):
        """Gets the destination_arn of this PutRumMetricsDestinationRequest.

        Use this parameter only if <code>Destination</code> is <code>Evidently</code>. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.

        :return: The destination_arn of this PutRumMetricsDestinationRequest.
        :rtype: str
        """
        return self._destination_arn

    @destination_arn.setter
    def destination_arn(self, destination_arn):
        """Sets the destination_arn of this PutRumMetricsDestinationRequest.

        Use this parameter only if <code>Destination</code> is <code>Evidently</code>. This parameter specifies the ARN of the Evidently experiment that will receive the extended metrics.

        :param destination_arn: The destination_arn of this PutRumMetricsDestinationRequest.
        :type destination_arn: str
        """
        if destination_arn is not None and len(destination_arn) > 2048:
            raise ValueError("Invalid value for `destination_arn`, length must be less than or equal to `2048`")
        if destination_arn is not None and len(destination_arn) < 0:
            raise ValueError("Invalid value for `destination_arn`, length must be greater than or equal to `0`")
        if destination_arn is not None and not re.search(r'arn:[^:]*:[^:]*:[^:]*:[^:]*:.*', destination_arn):
            raise ValueError("Invalid value for `destination_arn`, must be a follow pattern or equal to `/arn:[^:]*:[^:]*:[^:]*:[^:]*:.*/`")

        self._destination_arn = destination_arn

    @property
    def iam_role_arn(self):
        """Gets the iam_role_arn of this PutRumMetricsDestinationRequest.

        <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p> <p>This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.</p>

        :return: The iam_role_arn of this PutRumMetricsDestinationRequest.
        :rtype: str
        """
        return self._iam_role_arn

    @iam_role_arn.setter
    def iam_role_arn(self, iam_role_arn):
        """Sets the iam_role_arn of this PutRumMetricsDestinationRequest.

        <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p> <p>This parameter specifies the ARN of an IAM role that RUM will assume to write to the Evidently experiment that you are sending metrics to. This role must have permission to write to that experiment.</p>

        :param iam_role_arn: The iam_role_arn of this PutRumMetricsDestinationRequest.
        :type iam_role_arn: str
        """
        if iam_role_arn is not None and not re.search(r'arn:[^:]*:[^:]*:[^:]*:[^:]*:.*', iam_role_arn):
            raise ValueError("Invalid value for `iam_role_arn`, must be a follow pattern or equal to `/arn:[^:]*:[^:]*:[^:]*:[^:]*:.*/`")

        self._iam_role_arn = iam_role_arn
