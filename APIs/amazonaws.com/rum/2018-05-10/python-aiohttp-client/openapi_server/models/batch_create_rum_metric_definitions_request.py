# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_definition_request import MetricDefinitionRequest
import re
from openapi_server import util


class BatchCreateRumMetricDefinitionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, destination_arn: str=None, metric_definitions: List[MetricDefinitionRequest]=None):
        """BatchCreateRumMetricDefinitionsRequest - a model defined in OpenAPI

        :param destination: The destination of this BatchCreateRumMetricDefinitionsRequest.
        :param destination_arn: The destination_arn of this BatchCreateRumMetricDefinitionsRequest.
        :param metric_definitions: The metric_definitions of this BatchCreateRumMetricDefinitionsRequest.
        """
        self.openapi_types = {
            'destination': str,
            'destination_arn': str,
            'metric_definitions': List[MetricDefinitionRequest]
        }

        self.attribute_map = {
            'destination': 'Destination',
            'destination_arn': 'DestinationArn',
            'metric_definitions': 'MetricDefinitions'
        }

        self._destination = destination
        self._destination_arn = destination_arn
        self._metric_definitions = metric_definitions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateRumMetricDefinitionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateRumMetricDefinitions_request of this BatchCreateRumMetricDefinitionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this BatchCreateRumMetricDefinitionsRequest.

        The destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that will receive the metrics and an IAM role that has permission to write to the experiment.

        :return: The destination of this BatchCreateRumMetricDefinitionsRequest.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this BatchCreateRumMetricDefinitionsRequest.

        The destination to send the metrics to. Valid values are <code>CloudWatch</code> and <code>Evidently</code>. If you specify <code>Evidently</code>, you must also specify the ARN of the CloudWatchEvidently experiment that will receive the metrics and an IAM role that has permission to write to the experiment.

        :param destination: The destination of this BatchCreateRumMetricDefinitionsRequest.
        :type destination: str
        """
        allowed_values = ["CloudWatch", "Evidently"]  # noqa: E501
        if destination not in allowed_values:
            raise ValueError(
                "Invalid value for `destination` ({0}), must be one of {1}"
                .format(destination, allowed_values)
            )

        self._destination = destination

    @property
    def destination_arn(self):
        """Gets the destination_arn of this BatchCreateRumMetricDefinitionsRequest.

        <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p> <p>This parameter specifies the ARN of the Evidently experiment that is to receive the metrics. You must have already defined this experiment as a valid destination. For more information, see <a href=\"https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_PutRumMetricsDestination.html\">PutRumMetricsDestination</a>.</p>

        :return: The destination_arn of this BatchCreateRumMetricDefinitionsRequest.
        :rtype: str
        """
        return self._destination_arn

    @destination_arn.setter
    def destination_arn(self, destination_arn):
        """Sets the destination_arn of this BatchCreateRumMetricDefinitionsRequest.

        <p>This parameter is required if <code>Destination</code> is <code>Evidently</code>. If <code>Destination</code> is <code>CloudWatch</code>, do not use this parameter.</p> <p>This parameter specifies the ARN of the Evidently experiment that is to receive the metrics. You must have already defined this experiment as a valid destination. For more information, see <a href=\"https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_PutRumMetricsDestination.html\">PutRumMetricsDestination</a>.</p>

        :param destination_arn: The destination_arn of this BatchCreateRumMetricDefinitionsRequest.
        :type destination_arn: str
        """
        if destination_arn is not None and len(destination_arn) > 2048:
            raise ValueError("Invalid value for `destination_arn`, length must be less than or equal to `2048`")
        if destination_arn is not None and len(destination_arn) < 0:
            raise ValueError("Invalid value for `destination_arn`, length must be greater than or equal to `0`")
        if destination_arn is not None and not re.search(r'arn:[^:]*:[^:]*:[^:]*:[^:]*:.*', destination_arn):
            raise ValueError("Invalid value for `destination_arn`, must be a follow pattern or equal to `/arn:[^:]*:[^:]*:[^:]*:[^:]*:.*/`")

        self._destination_arn = destination_arn

    @property
    def metric_definitions(self):
        """Gets the metric_definitions of this BatchCreateRumMetricDefinitionsRequest.

        An array of structures which define the metrics that you want to send.

        :return: The metric_definitions of this BatchCreateRumMetricDefinitionsRequest.
        :rtype: List[MetricDefinitionRequest]
        """
        return self._metric_definitions

    @metric_definitions.setter
    def metric_definitions(self, metric_definitions):
        """Sets the metric_definitions of this BatchCreateRumMetricDefinitionsRequest.

        An array of structures which define the metrics that you want to send.

        :param metric_definitions: The metric_definitions of this BatchCreateRumMetricDefinitionsRequest.
        :type metric_definitions: List[MetricDefinitionRequest]
        """
        if metric_definitions is None:
            raise ValueError("Invalid value for `metric_definitions`, must not be `None`")

        self._metric_definitions = metric_definitions
