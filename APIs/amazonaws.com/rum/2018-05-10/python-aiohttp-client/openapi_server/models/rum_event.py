# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RumEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, id: str=None, metadata: str=None, timestamp: datetime=None, type: str=None):
        """RumEvent - a model defined in OpenAPI

        :param details: The details of this RumEvent.
        :param id: The id of this RumEvent.
        :param metadata: The metadata of this RumEvent.
        :param timestamp: The timestamp of this RumEvent.
        :param type: The type of this RumEvent.
        """
        self.openapi_types = {
            'details': str,
            'id': str,
            'metadata': str,
            'timestamp': datetime,
            'type': str
        }

        self.attribute_map = {
            'details': 'details',
            'id': 'id',
            'metadata': 'metadata',
            'timestamp': 'timestamp',
            'type': 'type'
        }

        self._details = details
        self._id = id
        self._metadata = metadata
        self._timestamp = timestamp
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RumEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RumEvent of this RumEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this RumEvent.


        :return: The details of this RumEvent.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RumEvent.


        :param details: The details of this RumEvent.
        :type details: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def id(self):
        """Gets the id of this RumEvent.


        :return: The id of this RumEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RumEvent.


        :param id: The id of this RumEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this RumEvent.


        :return: The metadata of this RumEvent.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RumEvent.


        :param metadata: The metadata of this RumEvent.
        :type metadata: str
        """

        self._metadata = metadata

    @property
    def timestamp(self):
        """Gets the timestamp of this RumEvent.


        :return: The timestamp of this RumEvent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RumEvent.


        :param timestamp: The timestamp of this RumEvent.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this RumEvent.


        :return: The type of this RumEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RumEvent.


        :param type: The type of this RumEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
