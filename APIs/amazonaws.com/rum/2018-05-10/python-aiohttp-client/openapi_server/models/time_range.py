# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after: int=None, before: int=None):
        """TimeRange - a model defined in OpenAPI

        :param after: The after of this TimeRange.
        :param before: The before of this TimeRange.
        """
        self.openapi_types = {
            'after': int,
            'before': int
        }

        self.attribute_map = {
            'after': 'After',
            'before': 'Before'
        }

        self._after = after
        self._before = before

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeRange of this TimeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self):
        """Gets the after of this TimeRange.


        :return: The after of this TimeRange.
        :rtype: int
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this TimeRange.


        :param after: The after of this TimeRange.
        :type after: int
        """
        if after is None:
            raise ValueError("Invalid value for `after`, must not be `None`")

        self._after = after

    @property
    def before(self):
        """Gets the before of this TimeRange.


        :return: The before of this TimeRange.
        :rtype: int
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this TimeRange.


        :param before: The before of this TimeRange.
        :type before: int
        """

        self._before = before
