/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateRumMetricDefinitionRequest.h
 *
 * 
 */

#ifndef OAIUpdateRumMetricDefinitionRequest_H
#define OAIUpdateRumMetricDefinitionRequest_H

#include <QJsonObject>

#include "OAIMetricDestination.h"
#include "OAIUpdateRumMetricDefinitionRequest_MetricDefinition.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateRumMetricDefinitionRequest_MetricDefinition;

class OAIUpdateRumMetricDefinitionRequest : public OAIObject {
public:
    OAIUpdateRumMetricDefinitionRequest();
    OAIUpdateRumMetricDefinitionRequest(QString json);
    ~OAIUpdateRumMetricDefinitionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMetricDestination getDestination() const;
    void setDestination(const OAIMetricDestination &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    QString getDestinationArn() const;
    void setDestinationArn(const QString &destination_arn);
    bool is_destination_arn_Set() const;
    bool is_destination_arn_Valid() const;

    OAIUpdateRumMetricDefinitionRequest_MetricDefinition getMetricDefinition() const;
    void setMetricDefinition(const OAIUpdateRumMetricDefinitionRequest_MetricDefinition &metric_definition);
    bool is_metric_definition_Set() const;
    bool is_metric_definition_Valid() const;

    QString getMetricDefinitionId() const;
    void setMetricDefinitionId(const QString &metric_definition_id);
    bool is_metric_definition_id_Set() const;
    bool is_metric_definition_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMetricDestination m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    QString m_destination_arn;
    bool m_destination_arn_isSet;
    bool m_destination_arn_isValid;

    OAIUpdateRumMetricDefinitionRequest_MetricDefinition m_metric_definition;
    bool m_metric_definition_isSet;
    bool m_metric_definition_isValid;

    QString m_metric_definition_id;
    bool m_metric_definition_id_isSet;
    bool m_metric_definition_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateRumMetricDefinitionRequest)

#endif // OAIUpdateRumMetricDefinitionRequest_H
