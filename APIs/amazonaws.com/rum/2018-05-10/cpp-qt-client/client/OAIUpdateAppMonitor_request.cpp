/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAppMonitor_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAppMonitor_request::OAIUpdateAppMonitor_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAppMonitor_request::OAIUpdateAppMonitor_request() {
    this->initializeModel();
}

OAIUpdateAppMonitor_request::~OAIUpdateAppMonitor_request() {}

void OAIUpdateAppMonitor_request::initializeModel() {

    m_app_monitor_configuration_isSet = false;
    m_app_monitor_configuration_isValid = false;

    m_custom_events_isSet = false;
    m_custom_events_isValid = false;

    m_cw_log_enabled_isSet = false;
    m_cw_log_enabled_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;
}

void OAIUpdateAppMonitor_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAppMonitor_request::fromJsonObject(QJsonObject json) {

    m_app_monitor_configuration_isValid = ::OpenAPI::fromJsonValue(m_app_monitor_configuration, json[QString("AppMonitorConfiguration")]);
    m_app_monitor_configuration_isSet = !json[QString("AppMonitorConfiguration")].isNull() && m_app_monitor_configuration_isValid;

    m_custom_events_isValid = ::OpenAPI::fromJsonValue(m_custom_events, json[QString("CustomEvents")]);
    m_custom_events_isSet = !json[QString("CustomEvents")].isNull() && m_custom_events_isValid;

    m_cw_log_enabled_isValid = ::OpenAPI::fromJsonValue(m_cw_log_enabled, json[QString("CwLogEnabled")]);
    m_cw_log_enabled_isSet = !json[QString("CwLogEnabled")].isNull() && m_cw_log_enabled_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;
}

QString OAIUpdateAppMonitor_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAppMonitor_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_monitor_configuration.isSet()) {
        obj.insert(QString("AppMonitorConfiguration"), ::OpenAPI::toJsonValue(m_app_monitor_configuration));
    }
    if (m_custom_events.isSet()) {
        obj.insert(QString("CustomEvents"), ::OpenAPI::toJsonValue(m_custom_events));
    }
    if (m_cw_log_enabled_isSet) {
        obj.insert(QString("CwLogEnabled"), ::OpenAPI::toJsonValue(m_cw_log_enabled));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    return obj;
}

OAICreateAppMonitor_request_AppMonitorConfiguration OAIUpdateAppMonitor_request::getAppMonitorConfiguration() const {
    return m_app_monitor_configuration;
}
void OAIUpdateAppMonitor_request::setAppMonitorConfiguration(const OAICreateAppMonitor_request_AppMonitorConfiguration &app_monitor_configuration) {
    m_app_monitor_configuration = app_monitor_configuration;
    m_app_monitor_configuration_isSet = true;
}

bool OAIUpdateAppMonitor_request::is_app_monitor_configuration_Set() const{
    return m_app_monitor_configuration_isSet;
}

bool OAIUpdateAppMonitor_request::is_app_monitor_configuration_Valid() const{
    return m_app_monitor_configuration_isValid;
}

OAICreateAppMonitor_request_CustomEvents OAIUpdateAppMonitor_request::getCustomEvents() const {
    return m_custom_events;
}
void OAIUpdateAppMonitor_request::setCustomEvents(const OAICreateAppMonitor_request_CustomEvents &custom_events) {
    m_custom_events = custom_events;
    m_custom_events_isSet = true;
}

bool OAIUpdateAppMonitor_request::is_custom_events_Set() const{
    return m_custom_events_isSet;
}

bool OAIUpdateAppMonitor_request::is_custom_events_Valid() const{
    return m_custom_events_isValid;
}

bool OAIUpdateAppMonitor_request::isCwLogEnabled() const {
    return m_cw_log_enabled;
}
void OAIUpdateAppMonitor_request::setCwLogEnabled(const bool &cw_log_enabled) {
    m_cw_log_enabled = cw_log_enabled;
    m_cw_log_enabled_isSet = true;
}

bool OAIUpdateAppMonitor_request::is_cw_log_enabled_Set() const{
    return m_cw_log_enabled_isSet;
}

bool OAIUpdateAppMonitor_request::is_cw_log_enabled_Valid() const{
    return m_cw_log_enabled_isValid;
}

QString OAIUpdateAppMonitor_request::getDomain() const {
    return m_domain;
}
void OAIUpdateAppMonitor_request::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIUpdateAppMonitor_request::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIUpdateAppMonitor_request::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIUpdateAppMonitor_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_monitor_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cw_log_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAppMonitor_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
