/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateAppMonitor_request.h
 *
 * 
 */

#ifndef OAIUpdateAppMonitor_request_H
#define OAIUpdateAppMonitor_request_H

#include <QJsonObject>

#include "OAICreateAppMonitor_request_AppMonitorConfiguration.h"
#include "OAICreateAppMonitor_request_CustomEvents.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAppMonitor_request_AppMonitorConfiguration;
class OAICreateAppMonitor_request_CustomEvents;

class OAIUpdateAppMonitor_request : public OAIObject {
public:
    OAIUpdateAppMonitor_request();
    OAIUpdateAppMonitor_request(QString json);
    ~OAIUpdateAppMonitor_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreateAppMonitor_request_AppMonitorConfiguration getAppMonitorConfiguration() const;
    void setAppMonitorConfiguration(const OAICreateAppMonitor_request_AppMonitorConfiguration &app_monitor_configuration);
    bool is_app_monitor_configuration_Set() const;
    bool is_app_monitor_configuration_Valid() const;

    OAICreateAppMonitor_request_CustomEvents getCustomEvents() const;
    void setCustomEvents(const OAICreateAppMonitor_request_CustomEvents &custom_events);
    bool is_custom_events_Set() const;
    bool is_custom_events_Valid() const;

    bool isCwLogEnabled() const;
    void setCwLogEnabled(const bool &cw_log_enabled);
    bool is_cw_log_enabled_Set() const;
    bool is_cw_log_enabled_Valid() const;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreateAppMonitor_request_AppMonitorConfiguration m_app_monitor_configuration;
    bool m_app_monitor_configuration_isSet;
    bool m_app_monitor_configuration_isValid;

    OAICreateAppMonitor_request_CustomEvents m_custom_events;
    bool m_custom_events_isSet;
    bool m_custom_events_isValid;

    bool m_cw_log_enabled;
    bool m_cw_log_enabled_isSet;
    bool m_cw_log_enabled_isValid;

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateAppMonitor_request)

#endif // OAIUpdateAppMonitor_request_H
