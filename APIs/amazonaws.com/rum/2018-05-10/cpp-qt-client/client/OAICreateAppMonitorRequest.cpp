/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppMonitorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppMonitorRequest::OAICreateAppMonitorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppMonitorRequest::OAICreateAppMonitorRequest() {
    this->initializeModel();
}

OAICreateAppMonitorRequest::~OAICreateAppMonitorRequest() {}

void OAICreateAppMonitorRequest::initializeModel() {

    m_app_monitor_configuration_isSet = false;
    m_app_monitor_configuration_isValid = false;

    m_custom_events_isSet = false;
    m_custom_events_isValid = false;

    m_cw_log_enabled_isSet = false;
    m_cw_log_enabled_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAppMonitorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppMonitorRequest::fromJsonObject(QJsonObject json) {

    m_app_monitor_configuration_isValid = ::OpenAPI::fromJsonValue(m_app_monitor_configuration, json[QString("AppMonitorConfiguration")]);
    m_app_monitor_configuration_isSet = !json[QString("AppMonitorConfiguration")].isNull() && m_app_monitor_configuration_isValid;

    m_custom_events_isValid = ::OpenAPI::fromJsonValue(m_custom_events, json[QString("CustomEvents")]);
    m_custom_events_isSet = !json[QString("CustomEvents")].isNull() && m_custom_events_isValid;

    m_cw_log_enabled_isValid = ::OpenAPI::fromJsonValue(m_cw_log_enabled, json[QString("CwLogEnabled")]);
    m_cw_log_enabled_isSet = !json[QString("CwLogEnabled")].isNull() && m_cw_log_enabled_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateAppMonitorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppMonitorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_monitor_configuration.isSet()) {
        obj.insert(QString("AppMonitorConfiguration"), ::OpenAPI::toJsonValue(m_app_monitor_configuration));
    }
    if (m_custom_events.isSet()) {
        obj.insert(QString("CustomEvents"), ::OpenAPI::toJsonValue(m_custom_events));
    }
    if (m_cw_log_enabled_isSet) {
        obj.insert(QString("CwLogEnabled"), ::OpenAPI::toJsonValue(m_cw_log_enabled));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateAppMonitorRequest_AppMonitorConfiguration OAICreateAppMonitorRequest::getAppMonitorConfiguration() const {
    return m_app_monitor_configuration;
}
void OAICreateAppMonitorRequest::setAppMonitorConfiguration(const OAICreateAppMonitorRequest_AppMonitorConfiguration &app_monitor_configuration) {
    m_app_monitor_configuration = app_monitor_configuration;
    m_app_monitor_configuration_isSet = true;
}

bool OAICreateAppMonitorRequest::is_app_monitor_configuration_Set() const{
    return m_app_monitor_configuration_isSet;
}

bool OAICreateAppMonitorRequest::is_app_monitor_configuration_Valid() const{
    return m_app_monitor_configuration_isValid;
}

OAICreateAppMonitorRequest_CustomEvents OAICreateAppMonitorRequest::getCustomEvents() const {
    return m_custom_events;
}
void OAICreateAppMonitorRequest::setCustomEvents(const OAICreateAppMonitorRequest_CustomEvents &custom_events) {
    m_custom_events = custom_events;
    m_custom_events_isSet = true;
}

bool OAICreateAppMonitorRequest::is_custom_events_Set() const{
    return m_custom_events_isSet;
}

bool OAICreateAppMonitorRequest::is_custom_events_Valid() const{
    return m_custom_events_isValid;
}

bool OAICreateAppMonitorRequest::getCwLogEnabled() const {
    return m_cw_log_enabled;
}
void OAICreateAppMonitorRequest::setCwLogEnabled(const bool &cw_log_enabled) {
    m_cw_log_enabled = cw_log_enabled;
    m_cw_log_enabled_isSet = true;
}

bool OAICreateAppMonitorRequest::is_cw_log_enabled_Set() const{
    return m_cw_log_enabled_isSet;
}

bool OAICreateAppMonitorRequest::is_cw_log_enabled_Valid() const{
    return m_cw_log_enabled_isValid;
}

QString OAICreateAppMonitorRequest::getDomain() const {
    return m_domain;
}
void OAICreateAppMonitorRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICreateAppMonitorRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICreateAppMonitorRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAICreateAppMonitorRequest::getName() const {
    return m_name;
}
void OAICreateAppMonitorRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAppMonitorRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAppMonitorRequest::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAICreateAppMonitorRequest::getTags() const {
    return m_tags;
}
void OAICreateAppMonitorRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAppMonitorRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAppMonitorRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAppMonitorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_monitor_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cw_log_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppMonitorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
