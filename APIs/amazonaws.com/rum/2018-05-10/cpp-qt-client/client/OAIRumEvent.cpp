/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRumEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRumEvent::OAIRumEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRumEvent::OAIRumEvent() {
    this->initializeModel();
}

OAIRumEvent::~OAIRumEvent() {}

void OAIRumEvent::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRumEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRumEvent::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRumEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRumEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRumEvent::getDetails() const {
    return m_details;
}
void OAIRumEvent::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIRumEvent::is_details_Set() const{
    return m_details_isSet;
}

bool OAIRumEvent::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIRumEvent::getId() const {
    return m_id;
}
void OAIRumEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRumEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRumEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRumEvent::getMetadata() const {
    return m_metadata;
}
void OAIRumEvent::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRumEvent::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRumEvent::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QDateTime OAIRumEvent::getTimestamp() const {
    return m_timestamp;
}
void OAIRumEvent::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRumEvent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRumEvent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIRumEvent::getType() const {
    return m_type;
}
void OAIRumEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRumEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRumEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRumEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRumEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_details_isValid && m_id_isValid && m_timestamp_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
