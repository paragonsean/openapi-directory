/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICwLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICwLog::OAICwLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICwLog::OAICwLog() {
    this->initializeModel();
}

OAICwLog::~OAICwLog() {}

void OAICwLog::initializeModel() {

    m_cw_log_enabled_isSet = false;
    m_cw_log_enabled_isValid = false;

    m_cw_log_group_isSet = false;
    m_cw_log_group_isValid = false;
}

void OAICwLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICwLog::fromJsonObject(QJsonObject json) {

    m_cw_log_enabled_isValid = ::OpenAPI::fromJsonValue(m_cw_log_enabled, json[QString("CwLogEnabled")]);
    m_cw_log_enabled_isSet = !json[QString("CwLogEnabled")].isNull() && m_cw_log_enabled_isValid;

    m_cw_log_group_isValid = ::OpenAPI::fromJsonValue(m_cw_log_group, json[QString("CwLogGroup")]);
    m_cw_log_group_isSet = !json[QString("CwLogGroup")].isNull() && m_cw_log_group_isValid;
}

QString OAICwLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICwLog::asJsonObject() const {
    QJsonObject obj;
    if (m_cw_log_enabled_isSet) {
        obj.insert(QString("CwLogEnabled"), ::OpenAPI::toJsonValue(m_cw_log_enabled));
    }
    if (m_cw_log_group_isSet) {
        obj.insert(QString("CwLogGroup"), ::OpenAPI::toJsonValue(m_cw_log_group));
    }
    return obj;
}

bool OAICwLog::getCwLogEnabled() const {
    return m_cw_log_enabled;
}
void OAICwLog::setCwLogEnabled(const bool &cw_log_enabled) {
    m_cw_log_enabled = cw_log_enabled;
    m_cw_log_enabled_isSet = true;
}

bool OAICwLog::is_cw_log_enabled_Set() const{
    return m_cw_log_enabled_isSet;
}

bool OAICwLog::is_cw_log_enabled_Valid() const{
    return m_cw_log_enabled_isValid;
}

QString OAICwLog::getCwLogGroup() const {
    return m_cw_log_group;
}
void OAICwLog::setCwLogGroup(const QString &cw_log_group) {
    m_cw_log_group = cw_log_group;
    m_cw_log_group_isSet = true;
}

bool OAICwLog::is_cw_log_group_Set() const{
    return m_cw_log_group_isSet;
}

bool OAICwLog::is_cw_log_group_Valid() const{
    return m_cw_log_group_isValid;
}

bool OAICwLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cw_log_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cw_log_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICwLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
