/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppMonitorSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppMonitorSummary::OAIAppMonitorSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppMonitorSummary::OAIAppMonitorSummary() {
    this->initializeModel();
}

OAIAppMonitorSummary::~OAIAppMonitorSummary() {}

void OAIAppMonitorSummary::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAppMonitorSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppMonitorSummary::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIAppMonitorSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppMonitorSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAppMonitorSummary::getCreated() const {
    return m_created;
}
void OAIAppMonitorSummary::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAppMonitorSummary::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAppMonitorSummary::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAppMonitorSummary::getId() const {
    return m_id;
}
void OAIAppMonitorSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppMonitorSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppMonitorSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAppMonitorSummary::getLastModified() const {
    return m_last_modified;
}
void OAIAppMonitorSummary::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIAppMonitorSummary::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIAppMonitorSummary::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIAppMonitorSummary::getName() const {
    return m_name;
}
void OAIAppMonitorSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppMonitorSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppMonitorSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIStateEnum OAIAppMonitorSummary::getState() const {
    return m_state;
}
void OAIAppMonitorSummary::setState(const OAIStateEnum &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAppMonitorSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAppMonitorSummary::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAppMonitorSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppMonitorSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
