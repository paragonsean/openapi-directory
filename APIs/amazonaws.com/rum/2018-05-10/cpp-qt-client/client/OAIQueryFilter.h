/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryFilter.h
 *
 * &lt;p&gt;A structure that defines a key and values that you can use to filter the results. The only performance events that are returned are those that have values matching the ones that you specify in one of your &lt;code&gt;QueryFilter&lt;/code&gt; structures.&lt;/p&gt; &lt;p&gt;For example, you could specify &lt;code&gt;Browser&lt;/code&gt; as the &lt;code&gt;Name&lt;/code&gt; and specify &lt;code&gt;Chrome,Firefox&lt;/code&gt; as the &lt;code&gt;Values&lt;/code&gt; to return events generated only from those browsers.&lt;/p&gt; &lt;p&gt;Specifying &lt;code&gt;Invert&lt;/code&gt; as the &lt;code&gt;Name&lt;/code&gt; works as a \&quot;not equal to\&quot; filter. For example, specify &lt;code&gt;Invert&lt;/code&gt; as the &lt;code&gt;Name&lt;/code&gt; and specify &lt;code&gt;Chrome&lt;/code&gt; as the value to return all events except events from user sessions with the Chrome browser.&lt;/p&gt;
 */

#ifndef OAIQueryFilter_H
#define OAIQueryFilter_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIQueryFilter : public OAIObject {
public:
    OAIQueryFilter();
    OAIQueryFilter(QString json);
    ~OAIQueryFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryFilter)

#endif // OAIQueryFilter_H
