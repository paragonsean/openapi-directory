/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteRumMetricDefinitionsError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteRumMetricDefinitionsError::OAIBatchDeleteRumMetricDefinitionsError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteRumMetricDefinitionsError::OAIBatchDeleteRumMetricDefinitionsError() {
    this->initializeModel();
}

OAIBatchDeleteRumMetricDefinitionsError::~OAIBatchDeleteRumMetricDefinitionsError() {}

void OAIBatchDeleteRumMetricDefinitionsError::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_metric_definition_id_isSet = false;
    m_metric_definition_id_isValid = false;
}

void OAIBatchDeleteRumMetricDefinitionsError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteRumMetricDefinitionsError::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_metric_definition_id_isValid = ::OpenAPI::fromJsonValue(m_metric_definition_id, json[QString("MetricDefinitionId")]);
    m_metric_definition_id_isSet = !json[QString("MetricDefinitionId")].isNull() && m_metric_definition_id_isValid;
}

QString OAIBatchDeleteRumMetricDefinitionsError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteRumMetricDefinitionsError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_metric_definition_id_isSet) {
        obj.insert(QString("MetricDefinitionId"), ::OpenAPI::toJsonValue(m_metric_definition_id));
    }
    return obj;
}

QString OAIBatchDeleteRumMetricDefinitionsError::getErrorCode() const {
    return m_error_code;
}
void OAIBatchDeleteRumMetricDefinitionsError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIBatchDeleteRumMetricDefinitionsError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIBatchDeleteRumMetricDefinitionsError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIBatchDeleteRumMetricDefinitionsError::getErrorMessage() const {
    return m_error_message;
}
void OAIBatchDeleteRumMetricDefinitionsError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBatchDeleteRumMetricDefinitionsError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBatchDeleteRumMetricDefinitionsError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIBatchDeleteRumMetricDefinitionsError::getMetricDefinitionId() const {
    return m_metric_definition_id;
}
void OAIBatchDeleteRumMetricDefinitionsError::setMetricDefinitionId(const QString &metric_definition_id) {
    m_metric_definition_id = metric_definition_id;
    m_metric_definition_id_isSet = true;
}

bool OAIBatchDeleteRumMetricDefinitionsError::is_metric_definition_id_Set() const{
    return m_metric_definition_id_isSet;
}

bool OAIBatchDeleteRumMetricDefinitionsError::is_metric_definition_id_Valid() const{
    return m_metric_definition_id_isValid;
}

bool OAIBatchDeleteRumMetricDefinitionsError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteRumMetricDefinitionsError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_code_isValid && m_error_message_isValid && m_metric_definition_id_isValid && true;
}

} // namespace OpenAPI
