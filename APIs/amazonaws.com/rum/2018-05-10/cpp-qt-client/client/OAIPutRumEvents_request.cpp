/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutRumEvents_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutRumEvents_request::OAIPutRumEvents_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutRumEvents_request::OAIPutRumEvents_request() {
    this->initializeModel();
}

OAIPutRumEvents_request::~OAIPutRumEvents_request() {}

void OAIPutRumEvents_request::initializeModel() {

    m_app_monitor_details_isSet = false;
    m_app_monitor_details_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_rum_events_isSet = false;
    m_rum_events_isValid = false;

    m_user_details_isSet = false;
    m_user_details_isValid = false;
}

void OAIPutRumEvents_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutRumEvents_request::fromJsonObject(QJsonObject json) {

    m_app_monitor_details_isValid = ::OpenAPI::fromJsonValue(m_app_monitor_details, json[QString("AppMonitorDetails")]);
    m_app_monitor_details_isSet = !json[QString("AppMonitorDetails")].isNull() && m_app_monitor_details_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("BatchId")]);
    m_batch_id_isSet = !json[QString("BatchId")].isNull() && m_batch_id_isValid;

    m_rum_events_isValid = ::OpenAPI::fromJsonValue(m_rum_events, json[QString("RumEvents")]);
    m_rum_events_isSet = !json[QString("RumEvents")].isNull() && m_rum_events_isValid;

    m_user_details_isValid = ::OpenAPI::fromJsonValue(m_user_details, json[QString("UserDetails")]);
    m_user_details_isSet = !json[QString("UserDetails")].isNull() && m_user_details_isValid;
}

QString OAIPutRumEvents_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutRumEvents_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_monitor_details.isSet()) {
        obj.insert(QString("AppMonitorDetails"), ::OpenAPI::toJsonValue(m_app_monitor_details));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("BatchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_rum_events.size() > 0) {
        obj.insert(QString("RumEvents"), ::OpenAPI::toJsonValue(m_rum_events));
    }
    if (m_user_details.isSet()) {
        obj.insert(QString("UserDetails"), ::OpenAPI::toJsonValue(m_user_details));
    }
    return obj;
}

OAIPutRumEvents_request_AppMonitorDetails OAIPutRumEvents_request::getAppMonitorDetails() const {
    return m_app_monitor_details;
}
void OAIPutRumEvents_request::setAppMonitorDetails(const OAIPutRumEvents_request_AppMonitorDetails &app_monitor_details) {
    m_app_monitor_details = app_monitor_details;
    m_app_monitor_details_isSet = true;
}

bool OAIPutRumEvents_request::is_app_monitor_details_Set() const{
    return m_app_monitor_details_isSet;
}

bool OAIPutRumEvents_request::is_app_monitor_details_Valid() const{
    return m_app_monitor_details_isValid;
}

QString OAIPutRumEvents_request::getBatchId() const {
    return m_batch_id;
}
void OAIPutRumEvents_request::setBatchId(const QString &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAIPutRumEvents_request::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAIPutRumEvents_request::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

QList<OAIRumEvent> OAIPutRumEvents_request::getRumEvents() const {
    return m_rum_events;
}
void OAIPutRumEvents_request::setRumEvents(const QList<OAIRumEvent> &rum_events) {
    m_rum_events = rum_events;
    m_rum_events_isSet = true;
}

bool OAIPutRumEvents_request::is_rum_events_Set() const{
    return m_rum_events_isSet;
}

bool OAIPutRumEvents_request::is_rum_events_Valid() const{
    return m_rum_events_isValid;
}

OAIPutRumEvents_request_UserDetails OAIPutRumEvents_request::getUserDetails() const {
    return m_user_details;
}
void OAIPutRumEvents_request::setUserDetails(const OAIPutRumEvents_request_UserDetails &user_details) {
    m_user_details = user_details;
    m_user_details_isSet = true;
}

bool OAIPutRumEvents_request::is_user_details_Set() const{
    return m_user_details_isSet;
}

bool OAIPutRumEvents_request::is_user_details_Valid() const{
    return m_user_details_isValid;
}

bool OAIPutRumEvents_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_monitor_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rum_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutRumEvents_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_monitor_details_isValid && m_batch_id_isValid && m_rum_events_isValid && m_user_details_isValid && true;
}

} // namespace OpenAPI
