/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomEventsStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomEventsStatus::OAICustomEventsStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomEventsStatus::OAICustomEventsStatus() {
    this->initializeModel();
}

OAICustomEventsStatus::~OAICustomEventsStatus() {}

void OAICustomEventsStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICustomEventsStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICustomEventsStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ENABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomEventsStatus::ENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICustomEventsStatus::DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICustomEventsStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICustomEventsStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICustomEventsStatus::ENABLED:
            val = "ENABLED";
            break;
        case eOAICustomEventsStatus::DISABLED:
            val = "DISABLED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICustomEventsStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICustomEventsStatus::eOAICustomEventsStatus OAICustomEventsStatus::getValue() const {
    return m_value;
}

void OAICustomEventsStatus::setValue(const OAICustomEventsStatus::eOAICustomEventsStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICustomEventsStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAICustomEventsStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
