/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRumMetricDefinitionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRumMetricDefinitionRequest::OAIUpdateRumMetricDefinitionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRumMetricDefinitionRequest::OAIUpdateRumMetricDefinitionRequest() {
    this->initializeModel();
}

OAIUpdateRumMetricDefinitionRequest::~OAIUpdateRumMetricDefinitionRequest() {}

void OAIUpdateRumMetricDefinitionRequest::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_destination_arn_isSet = false;
    m_destination_arn_isValid = false;

    m_metric_definition_isSet = false;
    m_metric_definition_isValid = false;

    m_metric_definition_id_isSet = false;
    m_metric_definition_id_isValid = false;
}

void OAIUpdateRumMetricDefinitionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRumMetricDefinitionRequest::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_arn, json[QString("DestinationArn")]);
    m_destination_arn_isSet = !json[QString("DestinationArn")].isNull() && m_destination_arn_isValid;

    m_metric_definition_isValid = ::OpenAPI::fromJsonValue(m_metric_definition, json[QString("MetricDefinition")]);
    m_metric_definition_isSet = !json[QString("MetricDefinition")].isNull() && m_metric_definition_isValid;

    m_metric_definition_id_isValid = ::OpenAPI::fromJsonValue(m_metric_definition_id, json[QString("MetricDefinitionId")]);
    m_metric_definition_id_isSet = !json[QString("MetricDefinitionId")].isNull() && m_metric_definition_id_isValid;
}

QString OAIUpdateRumMetricDefinitionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRumMetricDefinitionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_destination_arn_isSet) {
        obj.insert(QString("DestinationArn"), ::OpenAPI::toJsonValue(m_destination_arn));
    }
    if (m_metric_definition.isSet()) {
        obj.insert(QString("MetricDefinition"), ::OpenAPI::toJsonValue(m_metric_definition));
    }
    if (m_metric_definition_id_isSet) {
        obj.insert(QString("MetricDefinitionId"), ::OpenAPI::toJsonValue(m_metric_definition_id));
    }
    return obj;
}

OAIMetricDestination OAIUpdateRumMetricDefinitionRequest::getDestination() const {
    return m_destination;
}
void OAIUpdateRumMetricDefinitionRequest::setDestination(const OAIMetricDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIUpdateRumMetricDefinitionRequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIUpdateRumMetricDefinitionRequest::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIUpdateRumMetricDefinitionRequest::getDestinationArn() const {
    return m_destination_arn;
}
void OAIUpdateRumMetricDefinitionRequest::setDestinationArn(const QString &destination_arn) {
    m_destination_arn = destination_arn;
    m_destination_arn_isSet = true;
}

bool OAIUpdateRumMetricDefinitionRequest::is_destination_arn_Set() const{
    return m_destination_arn_isSet;
}

bool OAIUpdateRumMetricDefinitionRequest::is_destination_arn_Valid() const{
    return m_destination_arn_isValid;
}

OAIUpdateRumMetricDefinitionRequest_MetricDefinition OAIUpdateRumMetricDefinitionRequest::getMetricDefinition() const {
    return m_metric_definition;
}
void OAIUpdateRumMetricDefinitionRequest::setMetricDefinition(const OAIUpdateRumMetricDefinitionRequest_MetricDefinition &metric_definition) {
    m_metric_definition = metric_definition;
    m_metric_definition_isSet = true;
}

bool OAIUpdateRumMetricDefinitionRequest::is_metric_definition_Set() const{
    return m_metric_definition_isSet;
}

bool OAIUpdateRumMetricDefinitionRequest::is_metric_definition_Valid() const{
    return m_metric_definition_isValid;
}

QString OAIUpdateRumMetricDefinitionRequest::getMetricDefinitionId() const {
    return m_metric_definition_id;
}
void OAIUpdateRumMetricDefinitionRequest::setMetricDefinitionId(const QString &metric_definition_id) {
    m_metric_definition_id = metric_definition_id;
    m_metric_definition_id_isSet = true;
}

bool OAIUpdateRumMetricDefinitionRequest::is_metric_definition_id_Set() const{
    return m_metric_definition_id_isSet;
}

bool OAIUpdateRumMetricDefinitionRequest::is_metric_definition_id_Valid() const{
    return m_metric_definition_id_isValid;
}

bool OAIUpdateRumMetricDefinitionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRumMetricDefinitionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_isValid && m_metric_definition_isValid && m_metric_definition_id_isValid && true;
}

} // namespace OpenAPI
