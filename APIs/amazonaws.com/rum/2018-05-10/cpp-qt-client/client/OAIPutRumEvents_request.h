/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutRumEvents_request.h
 *
 * 
 */

#ifndef OAIPutRumEvents_request_H
#define OAIPutRumEvents_request_H

#include <QJsonObject>

#include "OAIPutRumEvents_request_AppMonitorDetails.h"
#include "OAIPutRumEvents_request_UserDetails.h"
#include "OAIRumEvent.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutRumEvents_request_AppMonitorDetails;
class OAIRumEvent;
class OAIPutRumEvents_request_UserDetails;

class OAIPutRumEvents_request : public OAIObject {
public:
    OAIPutRumEvents_request();
    OAIPutRumEvents_request(QString json);
    ~OAIPutRumEvents_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPutRumEvents_request_AppMonitorDetails getAppMonitorDetails() const;
    void setAppMonitorDetails(const OAIPutRumEvents_request_AppMonitorDetails &app_monitor_details);
    bool is_app_monitor_details_Set() const;
    bool is_app_monitor_details_Valid() const;

    QString getBatchId() const;
    void setBatchId(const QString &batch_id);
    bool is_batch_id_Set() const;
    bool is_batch_id_Valid() const;

    QList<OAIRumEvent> getRumEvents() const;
    void setRumEvents(const QList<OAIRumEvent> &rum_events);
    bool is_rum_events_Set() const;
    bool is_rum_events_Valid() const;

    OAIPutRumEvents_request_UserDetails getUserDetails() const;
    void setUserDetails(const OAIPutRumEvents_request_UserDetails &user_details);
    bool is_user_details_Set() const;
    bool is_user_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPutRumEvents_request_AppMonitorDetails m_app_monitor_details;
    bool m_app_monitor_details_isSet;
    bool m_app_monitor_details_isValid;

    QString m_batch_id;
    bool m_batch_id_isSet;
    bool m_batch_id_isValid;

    QList<OAIRumEvent> m_rum_events;
    bool m_rum_events_isSet;
    bool m_rum_events_isValid;

    OAIPutRumEvents_request_UserDetails m_user_details;
    bool m_user_details_isSet;
    bool m_user_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutRumEvents_request)

#endif // OAIPutRumEvents_request_H
