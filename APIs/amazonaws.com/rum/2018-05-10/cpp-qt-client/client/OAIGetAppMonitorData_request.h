/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAppMonitorData_request.h
 *
 * 
 */

#ifndef OAIGetAppMonitorData_request_H
#define OAIGetAppMonitorData_request_H

#include <QJsonObject>

#include "OAIGetAppMonitorData_request_TimeRange.h"
#include "OAIQueryFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQueryFilter;
class OAIGetAppMonitorData_request_TimeRange;

class OAIGetAppMonitorData_request : public OAIObject {
public:
    OAIGetAppMonitorData_request();
    OAIGetAppMonitorData_request(QString json);
    ~OAIGetAppMonitorData_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIQueryFilter> getFilters() const;
    void setFilters(const QList<OAIQueryFilter> &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    OAIGetAppMonitorData_request_TimeRange getTimeRange() const;
    void setTimeRange(const OAIGetAppMonitorData_request_TimeRange &time_range);
    bool is_time_range_Set() const;
    bool is_time_range_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIQueryFilter> m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    OAIGetAppMonitorData_request_TimeRange m_time_range;
    bool m_time_range_isSet;
    bool m_time_range_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAppMonitorData_request)

#endif // OAIGetAppMonitorData_request_H
