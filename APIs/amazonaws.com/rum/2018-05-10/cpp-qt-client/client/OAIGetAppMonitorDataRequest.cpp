/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAppMonitorDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAppMonitorDataRequest::OAIGetAppMonitorDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAppMonitorDataRequest::OAIGetAppMonitorDataRequest() {
    this->initializeModel();
}

OAIGetAppMonitorDataRequest::~OAIGetAppMonitorDataRequest() {}

void OAIGetAppMonitorDataRequest::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;
}

void OAIGetAppMonitorDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAppMonitorDataRequest::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("TimeRange")]);
    m_time_range_isSet = !json[QString("TimeRange")].isNull() && m_time_range_isValid;
}

QString OAIGetAppMonitorDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAppMonitorDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("TimeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    return obj;
}

QList OAIGetAppMonitorDataRequest::getFilters() const {
    return m_filters;
}
void OAIGetAppMonitorDataRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIGetAppMonitorDataRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIGetAppMonitorDataRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIGetAppMonitorDataRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetAppMonitorDataRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetAppMonitorDataRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetAppMonitorDataRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetAppMonitorDataRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetAppMonitorDataRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetAppMonitorDataRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetAppMonitorDataRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIGetAppMonitorDataRequest_TimeRange OAIGetAppMonitorDataRequest::getTimeRange() const {
    return m_time_range;
}
void OAIGetAppMonitorDataRequest::setTimeRange(const OAIGetAppMonitorDataRequest_TimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIGetAppMonitorDataRequest::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIGetAppMonitorDataRequest::is_time_range_Valid() const{
    return m_time_range_isValid;
}

bool OAIGetAppMonitorDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAppMonitorDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_range_isValid && true;
}

} // namespace OpenAPI
