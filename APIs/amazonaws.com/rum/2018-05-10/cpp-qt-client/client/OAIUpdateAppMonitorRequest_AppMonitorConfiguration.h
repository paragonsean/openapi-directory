/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateAppMonitorRequest_AppMonitorConfiguration.h
 *
 * 
 */

#ifndef OAIUpdateAppMonitorRequest_AppMonitorConfiguration_H
#define OAIUpdateAppMonitorRequest_AppMonitorConfiguration_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateAppMonitorRequest_AppMonitorConfiguration : public OAIObject {
public:
    OAIUpdateAppMonitorRequest_AppMonitorConfiguration();
    OAIUpdateAppMonitorRequest_AppMonitorConfiguration(QString json);
    ~OAIUpdateAppMonitorRequest_AppMonitorConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getAllowCookies() const;
    void setAllowCookies(const bool &allow_cookies);
    bool is_allow_cookies_Set() const;
    bool is_allow_cookies_Valid() const;

    bool getEnableXRay() const;
    void setEnableXRay(const bool &enable_x_ray);
    bool is_enable_x_ray_Set() const;
    bool is_enable_x_ray_Valid() const;

    QList getExcludedPages() const;
    void setExcludedPages(const QList &excluded_pages);
    bool is_excluded_pages_Set() const;
    bool is_excluded_pages_Valid() const;

    QList getFavoritePages() const;
    void setFavoritePages(const QList &favorite_pages);
    bool is_favorite_pages_Set() const;
    bool is_favorite_pages_Valid() const;

    QString getGuestRoleArn() const;
    void setGuestRoleArn(const QString &guest_role_arn);
    bool is_guest_role_arn_Set() const;
    bool is_guest_role_arn_Valid() const;

    QString getIdentityPoolId() const;
    void setIdentityPoolId(const QString &identity_pool_id);
    bool is_identity_pool_id_Set() const;
    bool is_identity_pool_id_Valid() const;

    QList getIncludedPages() const;
    void setIncludedPages(const QList &included_pages);
    bool is_included_pages_Set() const;
    bool is_included_pages_Valid() const;

    double getSessionSampleRate() const;
    void setSessionSampleRate(const double &session_sample_rate);
    bool is_session_sample_rate_Set() const;
    bool is_session_sample_rate_Valid() const;

    QList getTelemetries() const;
    void setTelemetries(const QList &telemetries);
    bool is_telemetries_Set() const;
    bool is_telemetries_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_cookies;
    bool m_allow_cookies_isSet;
    bool m_allow_cookies_isValid;

    bool m_enable_x_ray;
    bool m_enable_x_ray_isSet;
    bool m_enable_x_ray_isValid;

    QList m_excluded_pages;
    bool m_excluded_pages_isSet;
    bool m_excluded_pages_isValid;

    QList m_favorite_pages;
    bool m_favorite_pages_isSet;
    bool m_favorite_pages_isValid;

    QString m_guest_role_arn;
    bool m_guest_role_arn_isSet;
    bool m_guest_role_arn_isValid;

    QString m_identity_pool_id;
    bool m_identity_pool_id_isSet;
    bool m_identity_pool_id_isValid;

    QList m_included_pages;
    bool m_included_pages_isSet;
    bool m_included_pages_isValid;

    double m_session_sample_rate;
    bool m_session_sample_rate_isSet;
    bool m_session_sample_rate_isValid;

    QList m_telemetries;
    bool m_telemetries_isSet;
    bool m_telemetries_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateAppMonitorRequest_AppMonitorConfiguration)

#endif // OAIUpdateAppMonitorRequest_AppMonitorConfiguration_H
