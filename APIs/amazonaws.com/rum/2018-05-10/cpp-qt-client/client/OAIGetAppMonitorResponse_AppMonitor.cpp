/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAppMonitorResponse_AppMonitor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAppMonitorResponse_AppMonitor::OAIGetAppMonitorResponse_AppMonitor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAppMonitorResponse_AppMonitor::OAIGetAppMonitorResponse_AppMonitor() {
    this->initializeModel();
}

OAIGetAppMonitorResponse_AppMonitor::~OAIGetAppMonitorResponse_AppMonitor() {}

void OAIGetAppMonitorResponse_AppMonitor::initializeModel() {

    m_app_monitor_configuration_isSet = false;
    m_app_monitor_configuration_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_events_isSet = false;
    m_custom_events_isValid = false;

    m_data_storage_isSet = false;
    m_data_storage_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetAppMonitorResponse_AppMonitor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAppMonitorResponse_AppMonitor::fromJsonObject(QJsonObject json) {

    m_app_monitor_configuration_isValid = ::OpenAPI::fromJsonValue(m_app_monitor_configuration, json[QString("AppMonitorConfiguration")]);
    m_app_monitor_configuration_isSet = !json[QString("AppMonitorConfiguration")].isNull() && m_app_monitor_configuration_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_custom_events_isValid = ::OpenAPI::fromJsonValue(m_custom_events, json[QString("CustomEvents")]);
    m_custom_events_isSet = !json[QString("CustomEvents")].isNull() && m_custom_events_isValid;

    m_data_storage_isValid = ::OpenAPI::fromJsonValue(m_data_storage, json[QString("DataStorage")]);
    m_data_storage_isSet = !json[QString("DataStorage")].isNull() && m_data_storage_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetAppMonitorResponse_AppMonitor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAppMonitorResponse_AppMonitor::asJsonObject() const {
    QJsonObject obj;
    if (m_app_monitor_configuration.isSet()) {
        obj.insert(QString("AppMonitorConfiguration"), ::OpenAPI::toJsonValue(m_app_monitor_configuration));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_events.isSet()) {
        obj.insert(QString("CustomEvents"), ::OpenAPI::toJsonValue(m_custom_events));
    }
    if (m_data_storage.isSet()) {
        obj.insert(QString("DataStorage"), ::OpenAPI::toJsonValue(m_data_storage));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIAppMonitor_AppMonitorConfiguration OAIGetAppMonitorResponse_AppMonitor::getAppMonitorConfiguration() const {
    return m_app_monitor_configuration;
}
void OAIGetAppMonitorResponse_AppMonitor::setAppMonitorConfiguration(const OAIAppMonitor_AppMonitorConfiguration &app_monitor_configuration) {
    m_app_monitor_configuration = app_monitor_configuration;
    m_app_monitor_configuration_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_app_monitor_configuration_Set() const{
    return m_app_monitor_configuration_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_app_monitor_configuration_Valid() const{
    return m_app_monitor_configuration_isValid;
}

QString OAIGetAppMonitorResponse_AppMonitor::getCreated() const {
    return m_created;
}
void OAIGetAppMonitorResponse_AppMonitor::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_created_Set() const{
    return m_created_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_created_Valid() const{
    return m_created_isValid;
}

OAIAppMonitor_CustomEvents OAIGetAppMonitorResponse_AppMonitor::getCustomEvents() const {
    return m_custom_events;
}
void OAIGetAppMonitorResponse_AppMonitor::setCustomEvents(const OAIAppMonitor_CustomEvents &custom_events) {
    m_custom_events = custom_events;
    m_custom_events_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_custom_events_Set() const{
    return m_custom_events_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_custom_events_Valid() const{
    return m_custom_events_isValid;
}

OAIAppMonitor_DataStorage OAIGetAppMonitorResponse_AppMonitor::getDataStorage() const {
    return m_data_storage;
}
void OAIGetAppMonitorResponse_AppMonitor::setDataStorage(const OAIAppMonitor_DataStorage &data_storage) {
    m_data_storage = data_storage;
    m_data_storage_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_data_storage_Set() const{
    return m_data_storage_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_data_storage_Valid() const{
    return m_data_storage_isValid;
}

QString OAIGetAppMonitorResponse_AppMonitor::getDomain() const {
    return m_domain;
}
void OAIGetAppMonitorResponse_AppMonitor::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIGetAppMonitorResponse_AppMonitor::getId() const {
    return m_id;
}
void OAIGetAppMonitorResponse_AppMonitor::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetAppMonitorResponse_AppMonitor::getLastModified() const {
    return m_last_modified;
}
void OAIGetAppMonitorResponse_AppMonitor::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIGetAppMonitorResponse_AppMonitor::getName() const {
    return m_name;
}
void OAIGetAppMonitorResponse_AppMonitor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_name_Valid() const{
    return m_name_isValid;
}

OAIStateEnum OAIGetAppMonitorResponse_AppMonitor::getState() const {
    return m_state;
}
void OAIGetAppMonitorResponse_AppMonitor::setState(const OAIStateEnum &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAIGetAppMonitorResponse_AppMonitor::getTags() const {
    return m_tags;
}
void OAIGetAppMonitorResponse_AppMonitor::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetAppMonitorResponse_AppMonitor::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetAppMonitorResponse_AppMonitor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_monitor_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAppMonitorResponse_AppMonitor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
