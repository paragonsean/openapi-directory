/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAppMonitorData_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAppMonitorData_request::OAIGetAppMonitorData_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAppMonitorData_request::OAIGetAppMonitorData_request() {
    this->initializeModel();
}

OAIGetAppMonitorData_request::~OAIGetAppMonitorData_request() {}

void OAIGetAppMonitorData_request::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;
}

void OAIGetAppMonitorData_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAppMonitorData_request::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("TimeRange")]);
    m_time_range_isSet = !json[QString("TimeRange")].isNull() && m_time_range_isValid;
}

QString OAIGetAppMonitorData_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAppMonitorData_request::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.size() > 0) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("TimeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    return obj;
}

QList<OAIQueryFilter> OAIGetAppMonitorData_request::getFilters() const {
    return m_filters;
}
void OAIGetAppMonitorData_request::setFilters(const QList<OAIQueryFilter> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIGetAppMonitorData_request::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIGetAppMonitorData_request::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIGetAppMonitorData_request::getMaxResults() const {
    return m_max_results;
}
void OAIGetAppMonitorData_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetAppMonitorData_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetAppMonitorData_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetAppMonitorData_request::getNextToken() const {
    return m_next_token;
}
void OAIGetAppMonitorData_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetAppMonitorData_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetAppMonitorData_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIGetAppMonitorData_request_TimeRange OAIGetAppMonitorData_request::getTimeRange() const {
    return m_time_range;
}
void OAIGetAppMonitorData_request::setTimeRange(const OAIGetAppMonitorData_request_TimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIGetAppMonitorData_request::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIGetAppMonitorData_request::is_time_range_Valid() const{
    return m_time_range_isValid;
}

bool OAIGetAppMonitorData_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAppMonitorData_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_range_isValid && true;
}

} // namespace OpenAPI
