/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppMonitorConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppMonitorConfiguration::OAIAppMonitorConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppMonitorConfiguration::OAIAppMonitorConfiguration() {
    this->initializeModel();
}

OAIAppMonitorConfiguration::~OAIAppMonitorConfiguration() {}

void OAIAppMonitorConfiguration::initializeModel() {

    m_allow_cookies_isSet = false;
    m_allow_cookies_isValid = false;

    m_enable_x_ray_isSet = false;
    m_enable_x_ray_isValid = false;

    m_excluded_pages_isSet = false;
    m_excluded_pages_isValid = false;

    m_favorite_pages_isSet = false;
    m_favorite_pages_isValid = false;

    m_guest_role_arn_isSet = false;
    m_guest_role_arn_isValid = false;

    m_identity_pool_id_isSet = false;
    m_identity_pool_id_isValid = false;

    m_included_pages_isSet = false;
    m_included_pages_isValid = false;

    m_session_sample_rate_isSet = false;
    m_session_sample_rate_isValid = false;

    m_telemetries_isSet = false;
    m_telemetries_isValid = false;
}

void OAIAppMonitorConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppMonitorConfiguration::fromJsonObject(QJsonObject json) {

    m_allow_cookies_isValid = ::OpenAPI::fromJsonValue(m_allow_cookies, json[QString("AllowCookies")]);
    m_allow_cookies_isSet = !json[QString("AllowCookies")].isNull() && m_allow_cookies_isValid;

    m_enable_x_ray_isValid = ::OpenAPI::fromJsonValue(m_enable_x_ray, json[QString("EnableXRay")]);
    m_enable_x_ray_isSet = !json[QString("EnableXRay")].isNull() && m_enable_x_ray_isValid;

    m_excluded_pages_isValid = ::OpenAPI::fromJsonValue(m_excluded_pages, json[QString("ExcludedPages")]);
    m_excluded_pages_isSet = !json[QString("ExcludedPages")].isNull() && m_excluded_pages_isValid;

    m_favorite_pages_isValid = ::OpenAPI::fromJsonValue(m_favorite_pages, json[QString("FavoritePages")]);
    m_favorite_pages_isSet = !json[QString("FavoritePages")].isNull() && m_favorite_pages_isValid;

    m_guest_role_arn_isValid = ::OpenAPI::fromJsonValue(m_guest_role_arn, json[QString("GuestRoleArn")]);
    m_guest_role_arn_isSet = !json[QString("GuestRoleArn")].isNull() && m_guest_role_arn_isValid;

    m_identity_pool_id_isValid = ::OpenAPI::fromJsonValue(m_identity_pool_id, json[QString("IdentityPoolId")]);
    m_identity_pool_id_isSet = !json[QString("IdentityPoolId")].isNull() && m_identity_pool_id_isValid;

    m_included_pages_isValid = ::OpenAPI::fromJsonValue(m_included_pages, json[QString("IncludedPages")]);
    m_included_pages_isSet = !json[QString("IncludedPages")].isNull() && m_included_pages_isValid;

    m_session_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_session_sample_rate, json[QString("SessionSampleRate")]);
    m_session_sample_rate_isSet = !json[QString("SessionSampleRate")].isNull() && m_session_sample_rate_isValid;

    m_telemetries_isValid = ::OpenAPI::fromJsonValue(m_telemetries, json[QString("Telemetries")]);
    m_telemetries_isSet = !json[QString("Telemetries")].isNull() && m_telemetries_isValid;
}

QString OAIAppMonitorConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppMonitorConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_cookies_isSet) {
        obj.insert(QString("AllowCookies"), ::OpenAPI::toJsonValue(m_allow_cookies));
    }
    if (m_enable_x_ray_isSet) {
        obj.insert(QString("EnableXRay"), ::OpenAPI::toJsonValue(m_enable_x_ray));
    }
    if (m_excluded_pages.isSet()) {
        obj.insert(QString("ExcludedPages"), ::OpenAPI::toJsonValue(m_excluded_pages));
    }
    if (m_favorite_pages.isSet()) {
        obj.insert(QString("FavoritePages"), ::OpenAPI::toJsonValue(m_favorite_pages));
    }
    if (m_guest_role_arn_isSet) {
        obj.insert(QString("GuestRoleArn"), ::OpenAPI::toJsonValue(m_guest_role_arn));
    }
    if (m_identity_pool_id_isSet) {
        obj.insert(QString("IdentityPoolId"), ::OpenAPI::toJsonValue(m_identity_pool_id));
    }
    if (m_included_pages.isSet()) {
        obj.insert(QString("IncludedPages"), ::OpenAPI::toJsonValue(m_included_pages));
    }
    if (m_session_sample_rate_isSet) {
        obj.insert(QString("SessionSampleRate"), ::OpenAPI::toJsonValue(m_session_sample_rate));
    }
    if (m_telemetries.isSet()) {
        obj.insert(QString("Telemetries"), ::OpenAPI::toJsonValue(m_telemetries));
    }
    return obj;
}

bool OAIAppMonitorConfiguration::getAllowCookies() const {
    return m_allow_cookies;
}
void OAIAppMonitorConfiguration::setAllowCookies(const bool &allow_cookies) {
    m_allow_cookies = allow_cookies;
    m_allow_cookies_isSet = true;
}

bool OAIAppMonitorConfiguration::is_allow_cookies_Set() const{
    return m_allow_cookies_isSet;
}

bool OAIAppMonitorConfiguration::is_allow_cookies_Valid() const{
    return m_allow_cookies_isValid;
}

bool OAIAppMonitorConfiguration::getEnableXRay() const {
    return m_enable_x_ray;
}
void OAIAppMonitorConfiguration::setEnableXRay(const bool &enable_x_ray) {
    m_enable_x_ray = enable_x_ray;
    m_enable_x_ray_isSet = true;
}

bool OAIAppMonitorConfiguration::is_enable_x_ray_Set() const{
    return m_enable_x_ray_isSet;
}

bool OAIAppMonitorConfiguration::is_enable_x_ray_Valid() const{
    return m_enable_x_ray_isValid;
}

QList OAIAppMonitorConfiguration::getExcludedPages() const {
    return m_excluded_pages;
}
void OAIAppMonitorConfiguration::setExcludedPages(const QList &excluded_pages) {
    m_excluded_pages = excluded_pages;
    m_excluded_pages_isSet = true;
}

bool OAIAppMonitorConfiguration::is_excluded_pages_Set() const{
    return m_excluded_pages_isSet;
}

bool OAIAppMonitorConfiguration::is_excluded_pages_Valid() const{
    return m_excluded_pages_isValid;
}

QList OAIAppMonitorConfiguration::getFavoritePages() const {
    return m_favorite_pages;
}
void OAIAppMonitorConfiguration::setFavoritePages(const QList &favorite_pages) {
    m_favorite_pages = favorite_pages;
    m_favorite_pages_isSet = true;
}

bool OAIAppMonitorConfiguration::is_favorite_pages_Set() const{
    return m_favorite_pages_isSet;
}

bool OAIAppMonitorConfiguration::is_favorite_pages_Valid() const{
    return m_favorite_pages_isValid;
}

QString OAIAppMonitorConfiguration::getGuestRoleArn() const {
    return m_guest_role_arn;
}
void OAIAppMonitorConfiguration::setGuestRoleArn(const QString &guest_role_arn) {
    m_guest_role_arn = guest_role_arn;
    m_guest_role_arn_isSet = true;
}

bool OAIAppMonitorConfiguration::is_guest_role_arn_Set() const{
    return m_guest_role_arn_isSet;
}

bool OAIAppMonitorConfiguration::is_guest_role_arn_Valid() const{
    return m_guest_role_arn_isValid;
}

QString OAIAppMonitorConfiguration::getIdentityPoolId() const {
    return m_identity_pool_id;
}
void OAIAppMonitorConfiguration::setIdentityPoolId(const QString &identity_pool_id) {
    m_identity_pool_id = identity_pool_id;
    m_identity_pool_id_isSet = true;
}

bool OAIAppMonitorConfiguration::is_identity_pool_id_Set() const{
    return m_identity_pool_id_isSet;
}

bool OAIAppMonitorConfiguration::is_identity_pool_id_Valid() const{
    return m_identity_pool_id_isValid;
}

QList OAIAppMonitorConfiguration::getIncludedPages() const {
    return m_included_pages;
}
void OAIAppMonitorConfiguration::setIncludedPages(const QList &included_pages) {
    m_included_pages = included_pages;
    m_included_pages_isSet = true;
}

bool OAIAppMonitorConfiguration::is_included_pages_Set() const{
    return m_included_pages_isSet;
}

bool OAIAppMonitorConfiguration::is_included_pages_Valid() const{
    return m_included_pages_isValid;
}

double OAIAppMonitorConfiguration::getSessionSampleRate() const {
    return m_session_sample_rate;
}
void OAIAppMonitorConfiguration::setSessionSampleRate(const double &session_sample_rate) {
    m_session_sample_rate = session_sample_rate;
    m_session_sample_rate_isSet = true;
}

bool OAIAppMonitorConfiguration::is_session_sample_rate_Set() const{
    return m_session_sample_rate_isSet;
}

bool OAIAppMonitorConfiguration::is_session_sample_rate_Valid() const{
    return m_session_sample_rate_isValid;
}

QList OAIAppMonitorConfiguration::getTelemetries() const {
    return m_telemetries;
}
void OAIAppMonitorConfiguration::setTelemetries(const QList &telemetries) {
    m_telemetries = telemetries;
    m_telemetries_isSet = true;
}

bool OAIAppMonitorConfiguration::is_telemetries_Set() const{
    return m_telemetries_isSet;
}

bool OAIAppMonitorConfiguration::is_telemetries_Valid() const{
    return m_telemetries_isValid;
}

bool OAIAppMonitorConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_cookies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_x_ray_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telemetries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppMonitorConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
