/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITimeRange.h
 *
 * A structure that defines the time range that you want to retrieve results from.
 */

#ifndef OAITimeRange_H
#define OAITimeRange_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITimeRange : public OAIObject {
public:
    OAITimeRange();
    OAITimeRange(QString json);
    ~OAITimeRange() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAfter() const;
    void setAfter(const qint32 &after);
    bool is_after_Set() const;
    bool is_after_Valid() const;

    qint32 getBefore() const;
    void setBefore(const qint32 &before);
    bool is_before_Set() const;
    bool is_before_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_after;
    bool m_after_isSet;
    bool m_after_isValid;

    qint32 m_before;
    bool m_before_isSet;
    bool m_before_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITimeRange)

#endif // OAITimeRange_H
