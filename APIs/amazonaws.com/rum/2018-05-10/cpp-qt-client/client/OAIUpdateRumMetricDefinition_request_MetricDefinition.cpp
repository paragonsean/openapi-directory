/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRumMetricDefinition_request_MetricDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRumMetricDefinition_request_MetricDefinition::OAIUpdateRumMetricDefinition_request_MetricDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRumMetricDefinition_request_MetricDefinition::OAIUpdateRumMetricDefinition_request_MetricDefinition() {
    this->initializeModel();
}

OAIUpdateRumMetricDefinition_request_MetricDefinition::~OAIUpdateRumMetricDefinition_request_MetricDefinition() {}

void OAIUpdateRumMetricDefinition_request_MetricDefinition::initializeModel() {

    m_dimension_keys_isSet = false;
    m_dimension_keys_isValid = false;

    m_event_pattern_isSet = false;
    m_event_pattern_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_unit_label_isSet = false;
    m_unit_label_isValid = false;

    m_value_key_isSet = false;
    m_value_key_isValid = false;
}

void OAIUpdateRumMetricDefinition_request_MetricDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRumMetricDefinition_request_MetricDefinition::fromJsonObject(QJsonObject json) {

    m_dimension_keys_isValid = ::OpenAPI::fromJsonValue(m_dimension_keys, json[QString("DimensionKeys")]);
    m_dimension_keys_isSet = !json[QString("DimensionKeys")].isNull() && m_dimension_keys_isValid;

    m_event_pattern_isValid = ::OpenAPI::fromJsonValue(m_event_pattern, json[QString("EventPattern")]);
    m_event_pattern_isSet = !json[QString("EventPattern")].isNull() && m_event_pattern_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;

    m_unit_label_isValid = ::OpenAPI::fromJsonValue(m_unit_label, json[QString("UnitLabel")]);
    m_unit_label_isSet = !json[QString("UnitLabel")].isNull() && m_unit_label_isValid;

    m_value_key_isValid = ::OpenAPI::fromJsonValue(m_value_key, json[QString("ValueKey")]);
    m_value_key_isSet = !json[QString("ValueKey")].isNull() && m_value_key_isValid;
}

QString OAIUpdateRumMetricDefinition_request_MetricDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRumMetricDefinition_request_MetricDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_keys.isSet()) {
        obj.insert(QString("DimensionKeys"), ::OpenAPI::toJsonValue(m_dimension_keys));
    }
    if (m_event_pattern_isSet) {
        obj.insert(QString("EventPattern"), ::OpenAPI::toJsonValue(m_event_pattern));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_unit_label_isSet) {
        obj.insert(QString("UnitLabel"), ::OpenAPI::toJsonValue(m_unit_label));
    }
    if (m_value_key_isSet) {
        obj.insert(QString("ValueKey"), ::OpenAPI::toJsonValue(m_value_key));
    }
    return obj;
}

QMap OAIUpdateRumMetricDefinition_request_MetricDefinition::getDimensionKeys() const {
    return m_dimension_keys;
}
void OAIUpdateRumMetricDefinition_request_MetricDefinition::setDimensionKeys(const QMap &dimension_keys) {
    m_dimension_keys = dimension_keys;
    m_dimension_keys_isSet = true;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_dimension_keys_Set() const{
    return m_dimension_keys_isSet;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_dimension_keys_Valid() const{
    return m_dimension_keys_isValid;
}

QString OAIUpdateRumMetricDefinition_request_MetricDefinition::getEventPattern() const {
    return m_event_pattern;
}
void OAIUpdateRumMetricDefinition_request_MetricDefinition::setEventPattern(const QString &event_pattern) {
    m_event_pattern = event_pattern;
    m_event_pattern_isSet = true;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_event_pattern_Set() const{
    return m_event_pattern_isSet;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_event_pattern_Valid() const{
    return m_event_pattern_isValid;
}

QString OAIUpdateRumMetricDefinition_request_MetricDefinition::getName() const {
    return m_name;
}
void OAIUpdateRumMetricDefinition_request_MetricDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateRumMetricDefinition_request_MetricDefinition::getRNamespace() const {
    return m_r_namespace;
}
void OAIUpdateRumMetricDefinition_request_MetricDefinition::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIUpdateRumMetricDefinition_request_MetricDefinition::getUnitLabel() const {
    return m_unit_label;
}
void OAIUpdateRumMetricDefinition_request_MetricDefinition::setUnitLabel(const QString &unit_label) {
    m_unit_label = unit_label;
    m_unit_label_isSet = true;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_unit_label_Set() const{
    return m_unit_label_isSet;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_unit_label_Valid() const{
    return m_unit_label_isValid;
}

QString OAIUpdateRumMetricDefinition_request_MetricDefinition::getValueKey() const {
    return m_value_key;
}
void OAIUpdateRumMetricDefinition_request_MetricDefinition::setValueKey(const QString &value_key) {
    m_value_key = value_key;
    m_value_key_isSet = true;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_value_key_Set() const{
    return m_value_key_isSet;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::is_value_key_Valid() const{
    return m_value_key_isValid;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRumMetricDefinition_request_MetricDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
