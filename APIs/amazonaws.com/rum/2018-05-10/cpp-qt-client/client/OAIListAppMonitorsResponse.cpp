/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAppMonitorsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAppMonitorsResponse::OAIListAppMonitorsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAppMonitorsResponse::OAIListAppMonitorsResponse() {
    this->initializeModel();
}

OAIListAppMonitorsResponse::~OAIListAppMonitorsResponse() {}

void OAIListAppMonitorsResponse::initializeModel() {

    m_app_monitor_summaries_isSet = false;
    m_app_monitor_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAppMonitorsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAppMonitorsResponse::fromJsonObject(QJsonObject json) {

    m_app_monitor_summaries_isValid = ::OpenAPI::fromJsonValue(m_app_monitor_summaries, json[QString("AppMonitorSummaries")]);
    m_app_monitor_summaries_isSet = !json[QString("AppMonitorSummaries")].isNull() && m_app_monitor_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAppMonitorsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAppMonitorsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_monitor_summaries.isSet()) {
        obj.insert(QString("AppMonitorSummaries"), ::OpenAPI::toJsonValue(m_app_monitor_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAppMonitorsResponse::getAppMonitorSummaries() const {
    return m_app_monitor_summaries;
}
void OAIListAppMonitorsResponse::setAppMonitorSummaries(const QList &app_monitor_summaries) {
    m_app_monitor_summaries = app_monitor_summaries;
    m_app_monitor_summaries_isSet = true;
}

bool OAIListAppMonitorsResponse::is_app_monitor_summaries_Set() const{
    return m_app_monitor_summaries_isSet;
}

bool OAIListAppMonitorsResponse::is_app_monitor_summaries_Valid() const{
    return m_app_monitor_summaries_isValid;
}

QString OAIListAppMonitorsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAppMonitorsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAppMonitorsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAppMonitorsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAppMonitorsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_monitor_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAppMonitorsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
