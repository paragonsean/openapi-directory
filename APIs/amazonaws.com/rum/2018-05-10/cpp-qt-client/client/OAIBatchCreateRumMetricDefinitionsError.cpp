/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCreateRumMetricDefinitionsError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCreateRumMetricDefinitionsError::OAIBatchCreateRumMetricDefinitionsError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCreateRumMetricDefinitionsError::OAIBatchCreateRumMetricDefinitionsError() {
    this->initializeModel();
}

OAIBatchCreateRumMetricDefinitionsError::~OAIBatchCreateRumMetricDefinitionsError() {}

void OAIBatchCreateRumMetricDefinitionsError::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_metric_definition_isSet = false;
    m_metric_definition_isValid = false;
}

void OAIBatchCreateRumMetricDefinitionsError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCreateRumMetricDefinitionsError::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_metric_definition_isValid = ::OpenAPI::fromJsonValue(m_metric_definition, json[QString("MetricDefinition")]);
    m_metric_definition_isSet = !json[QString("MetricDefinition")].isNull() && m_metric_definition_isValid;
}

QString OAIBatchCreateRumMetricDefinitionsError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCreateRumMetricDefinitionsError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_metric_definition.isSet()) {
        obj.insert(QString("MetricDefinition"), ::OpenAPI::toJsonValue(m_metric_definition));
    }
    return obj;
}

QString OAIBatchCreateRumMetricDefinitionsError::getErrorCode() const {
    return m_error_code;
}
void OAIBatchCreateRumMetricDefinitionsError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIBatchCreateRumMetricDefinitionsError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIBatchCreateRumMetricDefinitionsError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIBatchCreateRumMetricDefinitionsError::getErrorMessage() const {
    return m_error_message;
}
void OAIBatchCreateRumMetricDefinitionsError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBatchCreateRumMetricDefinitionsError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBatchCreateRumMetricDefinitionsError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIBatchCreateRumMetricDefinitionsError_MetricDefinition OAIBatchCreateRumMetricDefinitionsError::getMetricDefinition() const {
    return m_metric_definition;
}
void OAIBatchCreateRumMetricDefinitionsError::setMetricDefinition(const OAIBatchCreateRumMetricDefinitionsError_MetricDefinition &metric_definition) {
    m_metric_definition = metric_definition;
    m_metric_definition_isSet = true;
}

bool OAIBatchCreateRumMetricDefinitionsError::is_metric_definition_Set() const{
    return m_metric_definition_isSet;
}

bool OAIBatchCreateRumMetricDefinitionsError::is_metric_definition_Valid() const{
    return m_metric_definition_isValid;
}

bool OAIBatchCreateRumMetricDefinitionsError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCreateRumMetricDefinitionsError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_code_isValid && m_error_message_isValid && m_metric_definition_isValid && true;
}

} // namespace OpenAPI
