/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricDefinition.h
 *
 * A structure that displays the definition of one extended metric that RUM sends to CloudWatch or CloudWatch Evidently. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-vended-metrics.html\&quot;&gt; Additional metrics that you can send to CloudWatch and CloudWatch Evidently&lt;/a&gt;.
 */

#ifndef OAIMetricDefinition_H
#define OAIMetricDefinition_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMetricDefinition : public OAIObject {
public:
    OAIMetricDefinition();
    OAIMetricDefinition(QString json);
    ~OAIMetricDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap getDimensionKeys() const;
    void setDimensionKeys(const QMap &dimension_keys);
    bool is_dimension_keys_Set() const;
    bool is_dimension_keys_Valid() const;

    QString getEventPattern() const;
    void setEventPattern(const QString &event_pattern);
    bool is_event_pattern_Set() const;
    bool is_event_pattern_Valid() const;

    QString getMetricDefinitionId() const;
    void setMetricDefinitionId(const QString &metric_definition_id);
    bool is_metric_definition_id_Set() const;
    bool is_metric_definition_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRNamespace() const;
    void setRNamespace(const QString &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    QString getUnitLabel() const;
    void setUnitLabel(const QString &unit_label);
    bool is_unit_label_Set() const;
    bool is_unit_label_Valid() const;

    QString getValueKey() const;
    void setValueKey(const QString &value_key);
    bool is_value_key_Set() const;
    bool is_value_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap m_dimension_keys;
    bool m_dimension_keys_isSet;
    bool m_dimension_keys_isValid;

    QString m_event_pattern;
    bool m_event_pattern_isSet;
    bool m_event_pattern_isValid;

    QString m_metric_definition_id;
    bool m_metric_definition_id_isSet;
    bool m_metric_definition_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;

    QString m_unit_label;
    bool m_unit_label_isSet;
    bool m_unit_label_isValid;

    QString m_value_key;
    bool m_value_key_isSet;
    bool m_value_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricDefinition)

#endif // OAIMetricDefinition_H
