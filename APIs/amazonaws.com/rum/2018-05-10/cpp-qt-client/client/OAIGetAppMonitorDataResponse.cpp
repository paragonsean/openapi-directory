/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAppMonitorDataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAppMonitorDataResponse::OAIGetAppMonitorDataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAppMonitorDataResponse::OAIGetAppMonitorDataResponse() {
    this->initializeModel();
}

OAIGetAppMonitorDataResponse::~OAIGetAppMonitorDataResponse() {}

void OAIGetAppMonitorDataResponse::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetAppMonitorDataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAppMonitorDataResponse::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("Events")]);
    m_events_isSet = !json[QString("Events")].isNull() && m_events_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetAppMonitorDataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAppMonitorDataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("Events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetAppMonitorDataResponse::getEvents() const {
    return m_events;
}
void OAIGetAppMonitorDataResponse::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIGetAppMonitorDataResponse::is_events_Set() const{
    return m_events_isSet;
}

bool OAIGetAppMonitorDataResponse::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIGetAppMonitorDataResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetAppMonitorDataResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetAppMonitorDataResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetAppMonitorDataResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetAppMonitorDataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAppMonitorDataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
