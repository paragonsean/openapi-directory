/*
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetAppMonitorResponseAppMonitor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAppMonitorResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:18.086104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAppMonitorResponse {
  public static final String SERIALIZED_NAME_APP_MONITOR = "AppMonitor";
  @SerializedName(SERIALIZED_NAME_APP_MONITOR)
  private GetAppMonitorResponseAppMonitor appMonitor;

  public GetAppMonitorResponse() {
  }

  public GetAppMonitorResponse appMonitor(GetAppMonitorResponseAppMonitor appMonitor) {
    this.appMonitor = appMonitor;
    return this;
  }

  /**
   * Get appMonitor
   * @return appMonitor
   */
  @javax.annotation.Nullable
  public GetAppMonitorResponseAppMonitor getAppMonitor() {
    return appMonitor;
  }

  public void setAppMonitor(GetAppMonitorResponseAppMonitor appMonitor) {
    this.appMonitor = appMonitor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAppMonitorResponse getAppMonitorResponse = (GetAppMonitorResponse) o;
    return Objects.equals(this.appMonitor, getAppMonitorResponse.appMonitor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appMonitor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAppMonitorResponse {\n");
    sb.append("    appMonitor: ").append(toIndentedString(appMonitor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppMonitor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAppMonitorResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAppMonitorResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAppMonitorResponse is not found in the empty JSON string", GetAppMonitorResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAppMonitorResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAppMonitorResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AppMonitor`
      if (jsonObj.get("AppMonitor") != null && !jsonObj.get("AppMonitor").isJsonNull()) {
        GetAppMonitorResponseAppMonitor.validateJsonElement(jsonObj.get("AppMonitor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAppMonitorResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAppMonitorResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAppMonitorResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAppMonitorResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAppMonitorResponse>() {
           @Override
           public void write(JsonWriter out, GetAppMonitorResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAppMonitorResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAppMonitorResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAppMonitorResponse
   * @throws IOException if the JSON string is invalid with respect to GetAppMonitorResponse
   */
  public static GetAppMonitorResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAppMonitorResponse.class);
  }

  /**
   * Convert an instance of GetAppMonitorResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

