/*
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PutRumEventsRequestAppMonitorDetails;
import org.openapitools.client.model.PutRumEventsRequestUserDetails;
import org.openapitools.client.model.RumEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutRumEventsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:18.086104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutRumEventsRequest {
  public static final String SERIALIZED_NAME_APP_MONITOR_DETAILS = "AppMonitorDetails";
  @SerializedName(SERIALIZED_NAME_APP_MONITOR_DETAILS)
  private PutRumEventsRequestAppMonitorDetails appMonitorDetails;

  public static final String SERIALIZED_NAME_BATCH_ID = "BatchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private String batchId;

  public static final String SERIALIZED_NAME_RUM_EVENTS = "RumEvents";
  @SerializedName(SERIALIZED_NAME_RUM_EVENTS)
  private List<RumEvent> rumEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_DETAILS = "UserDetails";
  @SerializedName(SERIALIZED_NAME_USER_DETAILS)
  private PutRumEventsRequestUserDetails userDetails;

  public PutRumEventsRequest() {
  }

  public PutRumEventsRequest appMonitorDetails(PutRumEventsRequestAppMonitorDetails appMonitorDetails) {
    this.appMonitorDetails = appMonitorDetails;
    return this;
  }

  /**
   * Get appMonitorDetails
   * @return appMonitorDetails
   */
  @javax.annotation.Nonnull
  public PutRumEventsRequestAppMonitorDetails getAppMonitorDetails() {
    return appMonitorDetails;
  }

  public void setAppMonitorDetails(PutRumEventsRequestAppMonitorDetails appMonitorDetails) {
    this.appMonitorDetails = appMonitorDetails;
  }


  public PutRumEventsRequest batchId(String batchId) {
    this.batchId = batchId;
    return this;
  }

  /**
   * A unique identifier for this batch of RUM event data.
   * @return batchId
   */
  @javax.annotation.Nonnull
  public String getBatchId() {
    return batchId;
  }

  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }


  public PutRumEventsRequest rumEvents(List<RumEvent> rumEvents) {
    this.rumEvents = rumEvents;
    return this;
  }

  public PutRumEventsRequest addRumEventsItem(RumEvent rumEventsItem) {
    if (this.rumEvents == null) {
      this.rumEvents = new ArrayList<>();
    }
    this.rumEvents.add(rumEventsItem);
    return this;
  }

  /**
   * An array of structures that contain the telemetry event data.
   * @return rumEvents
   */
  @javax.annotation.Nonnull
  public List<RumEvent> getRumEvents() {
    return rumEvents;
  }

  public void setRumEvents(List<RumEvent> rumEvents) {
    this.rumEvents = rumEvents;
  }


  public PutRumEventsRequest userDetails(PutRumEventsRequestUserDetails userDetails) {
    this.userDetails = userDetails;
    return this;
  }

  /**
   * Get userDetails
   * @return userDetails
   */
  @javax.annotation.Nonnull
  public PutRumEventsRequestUserDetails getUserDetails() {
    return userDetails;
  }

  public void setUserDetails(PutRumEventsRequestUserDetails userDetails) {
    this.userDetails = userDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutRumEventsRequest putRumEventsRequest = (PutRumEventsRequest) o;
    return Objects.equals(this.appMonitorDetails, putRumEventsRequest.appMonitorDetails) &&
        Objects.equals(this.batchId, putRumEventsRequest.batchId) &&
        Objects.equals(this.rumEvents, putRumEventsRequest.rumEvents) &&
        Objects.equals(this.userDetails, putRumEventsRequest.userDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appMonitorDetails, batchId, rumEvents, userDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutRumEventsRequest {\n");
    sb.append("    appMonitorDetails: ").append(toIndentedString(appMonitorDetails)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    rumEvents: ").append(toIndentedString(rumEvents)).append("\n");
    sb.append("    userDetails: ").append(toIndentedString(userDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppMonitorDetails");
    openapiFields.add("BatchId");
    openapiFields.add("RumEvents");
    openapiFields.add("UserDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AppMonitorDetails");
    openapiRequiredFields.add("BatchId");
    openapiRequiredFields.add("RumEvents");
    openapiRequiredFields.add("UserDetails");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutRumEventsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutRumEventsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutRumEventsRequest is not found in the empty JSON string", PutRumEventsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutRumEventsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutRumEventsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutRumEventsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AppMonitorDetails`
      PutRumEventsRequestAppMonitorDetails.validateJsonElement(jsonObj.get("AppMonitorDetails"));
      if (!jsonObj.get("BatchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BatchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BatchId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("RumEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RumEvents` to be an array in the JSON string but got `%s`", jsonObj.get("RumEvents").toString()));
      }

      JsonArray jsonArrayrumEvents = jsonObj.getAsJsonArray("RumEvents");
      // validate the required field `RumEvents` (array)
      for (int i = 0; i < jsonArrayrumEvents.size(); i++) {
        RumEvent.validateJsonElement(jsonArrayrumEvents.get(i));
      };
      // validate the required field `UserDetails`
      PutRumEventsRequestUserDetails.validateJsonElement(jsonObj.get("UserDetails"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutRumEventsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutRumEventsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutRumEventsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutRumEventsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutRumEventsRequest>() {
           @Override
           public void write(JsonWriter out, PutRumEventsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutRumEventsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutRumEventsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutRumEventsRequest
   * @throws IOException if the JSON string is invalid with respect to PutRumEventsRequest
   */
  public static PutRumEventsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutRumEventsRequest.class);
  }

  /**
   * Convert an instance of PutRumEventsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

