/*
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structure that displays the definition of one extended metric that RUM sends to CloudWatch or CloudWatch Evidently. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-vended-metrics.html\&quot;&gt; Additional metrics that you can send to CloudWatch and CloudWatch Evidently&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:18.086104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricDefinition {
  public static final String SERIALIZED_NAME_DIMENSION_KEYS = "DimensionKeys";
  @SerializedName(SERIALIZED_NAME_DIMENSION_KEYS)
  private Map dimensionKeys;

  public static final String SERIALIZED_NAME_EVENT_PATTERN = "EventPattern";
  @SerializedName(SERIALIZED_NAME_EVENT_PATTERN)
  private String eventPattern;

  public static final String SERIALIZED_NAME_METRIC_DEFINITION_ID = "MetricDefinitionId";
  @SerializedName(SERIALIZED_NAME_METRIC_DEFINITION_ID)
  private String metricDefinitionId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_UNIT_LABEL = "UnitLabel";
  @SerializedName(SERIALIZED_NAME_UNIT_LABEL)
  private String unitLabel;

  public static final String SERIALIZED_NAME_VALUE_KEY = "ValueKey";
  @SerializedName(SERIALIZED_NAME_VALUE_KEY)
  private String valueKey;

  public MetricDefinition() {
  }

  public MetricDefinition dimensionKeys(Map dimensionKeys) {
    this.dimensionKeys = dimensionKeys;
    return this;
  }

  /**
   * Get dimensionKeys
   * @return dimensionKeys
   */
  @javax.annotation.Nullable
  public Map getDimensionKeys() {
    return dimensionKeys;
  }

  public void setDimensionKeys(Map dimensionKeys) {
    this.dimensionKeys = dimensionKeys;
  }


  public MetricDefinition eventPattern(String eventPattern) {
    this.eventPattern = eventPattern;
    return this;
  }

  /**
   * Get eventPattern
   * @return eventPattern
   */
  @javax.annotation.Nullable
  public String getEventPattern() {
    return eventPattern;
  }

  public void setEventPattern(String eventPattern) {
    this.eventPattern = eventPattern;
  }


  public MetricDefinition metricDefinitionId(String metricDefinitionId) {
    this.metricDefinitionId = metricDefinitionId;
    return this;
  }

  /**
   * Get metricDefinitionId
   * @return metricDefinitionId
   */
  @javax.annotation.Nonnull
  public String getMetricDefinitionId() {
    return metricDefinitionId;
  }

  public void setMetricDefinitionId(String metricDefinitionId) {
    this.metricDefinitionId = metricDefinitionId;
  }


  public MetricDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MetricDefinition namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public MetricDefinition unitLabel(String unitLabel) {
    this.unitLabel = unitLabel;
    return this;
  }

  /**
   * Get unitLabel
   * @return unitLabel
   */
  @javax.annotation.Nullable
  public String getUnitLabel() {
    return unitLabel;
  }

  public void setUnitLabel(String unitLabel) {
    this.unitLabel = unitLabel;
  }


  public MetricDefinition valueKey(String valueKey) {
    this.valueKey = valueKey;
    return this;
  }

  /**
   * Get valueKey
   * @return valueKey
   */
  @javax.annotation.Nullable
  public String getValueKey() {
    return valueKey;
  }

  public void setValueKey(String valueKey) {
    this.valueKey = valueKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDefinition metricDefinition = (MetricDefinition) o;
    return Objects.equals(this.dimensionKeys, metricDefinition.dimensionKeys) &&
        Objects.equals(this.eventPattern, metricDefinition.eventPattern) &&
        Objects.equals(this.metricDefinitionId, metricDefinition.metricDefinitionId) &&
        Objects.equals(this.name, metricDefinition.name) &&
        Objects.equals(this.namespace, metricDefinition.namespace) &&
        Objects.equals(this.unitLabel, metricDefinition.unitLabel) &&
        Objects.equals(this.valueKey, metricDefinition.valueKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensionKeys, eventPattern, metricDefinitionId, name, namespace, unitLabel, valueKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDefinition {\n");
    sb.append("    dimensionKeys: ").append(toIndentedString(dimensionKeys)).append("\n");
    sb.append("    eventPattern: ").append(toIndentedString(eventPattern)).append("\n");
    sb.append("    metricDefinitionId: ").append(toIndentedString(metricDefinitionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    unitLabel: ").append(toIndentedString(unitLabel)).append("\n");
    sb.append("    valueKey: ").append(toIndentedString(valueKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DimensionKeys");
    openapiFields.add("EventPattern");
    openapiFields.add("MetricDefinitionId");
    openapiFields.add("Name");
    openapiFields.add("Namespace");
    openapiFields.add("UnitLabel");
    openapiFields.add("ValueKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MetricDefinitionId");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricDefinition is not found in the empty JSON string", MetricDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DimensionKeys`
      if (jsonObj.get("DimensionKeys") != null && !jsonObj.get("DimensionKeys").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("DimensionKeys"));
      }
      // validate the optional field `EventPattern`
      if (jsonObj.get("EventPattern") != null && !jsonObj.get("EventPattern").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventPattern"));
      }
      // validate the required field `MetricDefinitionId`
      String.validateJsonElement(jsonObj.get("MetricDefinitionId"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Namespace`
      if (jsonObj.get("Namespace") != null && !jsonObj.get("Namespace").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Namespace"));
      }
      // validate the optional field `UnitLabel`
      if (jsonObj.get("UnitLabel") != null && !jsonObj.get("UnitLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UnitLabel"));
      }
      // validate the optional field `ValueKey`
      if (jsonObj.get("ValueKey") != null && !jsonObj.get("ValueKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ValueKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricDefinition>() {
           @Override
           public void write(JsonWriter out, MetricDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricDefinition
   * @throws IOException if the JSON string is invalid with respect to MetricDefinition
   */
  public static MetricDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricDefinition.class);
  }

  /**
   * Convert an instance of MetricDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

