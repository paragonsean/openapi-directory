/*
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateAppMonitorRequestAppMonitorConfiguration;
import org.openapitools.client.model.CreateAppMonitorRequestCustomEvents;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAppMonitorRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:18.086104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAppMonitorRequest {
  public static final String SERIALIZED_NAME_APP_MONITOR_CONFIGURATION = "AppMonitorConfiguration";
  @SerializedName(SERIALIZED_NAME_APP_MONITOR_CONFIGURATION)
  private CreateAppMonitorRequestAppMonitorConfiguration appMonitorConfiguration;

  public static final String SERIALIZED_NAME_CUSTOM_EVENTS = "CustomEvents";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EVENTS)
  private CreateAppMonitorRequestCustomEvents customEvents;

  public static final String SERIALIZED_NAME_CW_LOG_ENABLED = "CwLogEnabled";
  @SerializedName(SERIALIZED_NAME_CW_LOG_ENABLED)
  private Boolean cwLogEnabled;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public UpdateAppMonitorRequest() {
  }

  public UpdateAppMonitorRequest appMonitorConfiguration(CreateAppMonitorRequestAppMonitorConfiguration appMonitorConfiguration) {
    this.appMonitorConfiguration = appMonitorConfiguration;
    return this;
  }

  /**
   * Get appMonitorConfiguration
   * @return appMonitorConfiguration
   */
  @javax.annotation.Nullable
  public CreateAppMonitorRequestAppMonitorConfiguration getAppMonitorConfiguration() {
    return appMonitorConfiguration;
  }

  public void setAppMonitorConfiguration(CreateAppMonitorRequestAppMonitorConfiguration appMonitorConfiguration) {
    this.appMonitorConfiguration = appMonitorConfiguration;
  }


  public UpdateAppMonitorRequest customEvents(CreateAppMonitorRequestCustomEvents customEvents) {
    this.customEvents = customEvents;
    return this;
  }

  /**
   * Get customEvents
   * @return customEvents
   */
  @javax.annotation.Nullable
  public CreateAppMonitorRequestCustomEvents getCustomEvents() {
    return customEvents;
  }

  public void setCustomEvents(CreateAppMonitorRequestCustomEvents customEvents) {
    this.customEvents = customEvents;
  }


  public UpdateAppMonitorRequest cwLogEnabled(Boolean cwLogEnabled) {
    this.cwLogEnabled = cwLogEnabled;
    return this;
  }

  /**
   * Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.
   * @return cwLogEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCwLogEnabled() {
    return cwLogEnabled;
  }

  public void setCwLogEnabled(Boolean cwLogEnabled) {
    this.cwLogEnabled = cwLogEnabled;
  }


  public UpdateAppMonitorRequest domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The top-level internet domain name for which your application has administrative authority.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAppMonitorRequest updateAppMonitorRequest = (UpdateAppMonitorRequest) o;
    return Objects.equals(this.appMonitorConfiguration, updateAppMonitorRequest.appMonitorConfiguration) &&
        Objects.equals(this.customEvents, updateAppMonitorRequest.customEvents) &&
        Objects.equals(this.cwLogEnabled, updateAppMonitorRequest.cwLogEnabled) &&
        Objects.equals(this.domain, updateAppMonitorRequest.domain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appMonitorConfiguration, customEvents, cwLogEnabled, domain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAppMonitorRequest {\n");
    sb.append("    appMonitorConfiguration: ").append(toIndentedString(appMonitorConfiguration)).append("\n");
    sb.append("    customEvents: ").append(toIndentedString(customEvents)).append("\n");
    sb.append("    cwLogEnabled: ").append(toIndentedString(cwLogEnabled)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppMonitorConfiguration");
    openapiFields.add("CustomEvents");
    openapiFields.add("CwLogEnabled");
    openapiFields.add("Domain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAppMonitorRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAppMonitorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAppMonitorRequest is not found in the empty JSON string", UpdateAppMonitorRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAppMonitorRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAppMonitorRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AppMonitorConfiguration`
      if (jsonObj.get("AppMonitorConfiguration") != null && !jsonObj.get("AppMonitorConfiguration").isJsonNull()) {
        CreateAppMonitorRequestAppMonitorConfiguration.validateJsonElement(jsonObj.get("AppMonitorConfiguration"));
      }
      // validate the optional field `CustomEvents`
      if (jsonObj.get("CustomEvents") != null && !jsonObj.get("CustomEvents").isJsonNull()) {
        CreateAppMonitorRequestCustomEvents.validateJsonElement(jsonObj.get("CustomEvents"));
      }
      if ((jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) && !jsonObj.get("Domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAppMonitorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAppMonitorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAppMonitorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAppMonitorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAppMonitorRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAppMonitorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAppMonitorRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAppMonitorRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAppMonitorRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAppMonitorRequest
   */
  public static UpdateAppMonitorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAppMonitorRequest.class);
  }

  /**
   * Convert an instance of UpdateAppMonitorRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

