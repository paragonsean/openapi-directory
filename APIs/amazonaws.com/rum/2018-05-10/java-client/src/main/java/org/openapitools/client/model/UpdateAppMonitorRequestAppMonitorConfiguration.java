/*
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAppMonitorRequestAppMonitorConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:18.086104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAppMonitorRequestAppMonitorConfiguration {
  public static final String SERIALIZED_NAME_ALLOW_COOKIES = "AllowCookies";
  @SerializedName(SERIALIZED_NAME_ALLOW_COOKIES)
  private Boolean allowCookies;

  public static final String SERIALIZED_NAME_ENABLE_X_RAY = "EnableXRay";
  @SerializedName(SERIALIZED_NAME_ENABLE_X_RAY)
  private Boolean enableXRay;

  public static final String SERIALIZED_NAME_EXCLUDED_PAGES = "ExcludedPages";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_PAGES)
  private List excludedPages;

  public static final String SERIALIZED_NAME_FAVORITE_PAGES = "FavoritePages";
  @SerializedName(SERIALIZED_NAME_FAVORITE_PAGES)
  private List favoritePages;

  public static final String SERIALIZED_NAME_GUEST_ROLE_ARN = "GuestRoleArn";
  @SerializedName(SERIALIZED_NAME_GUEST_ROLE_ARN)
  private String guestRoleArn;

  public static final String SERIALIZED_NAME_IDENTITY_POOL_ID = "IdentityPoolId";
  @SerializedName(SERIALIZED_NAME_IDENTITY_POOL_ID)
  private String identityPoolId;

  public static final String SERIALIZED_NAME_INCLUDED_PAGES = "IncludedPages";
  @SerializedName(SERIALIZED_NAME_INCLUDED_PAGES)
  private List includedPages;

  public static final String SERIALIZED_NAME_SESSION_SAMPLE_RATE = "SessionSampleRate";
  @SerializedName(SERIALIZED_NAME_SESSION_SAMPLE_RATE)
  private Double sessionSampleRate;

  public static final String SERIALIZED_NAME_TELEMETRIES = "Telemetries";
  @SerializedName(SERIALIZED_NAME_TELEMETRIES)
  private List telemetries;

  public UpdateAppMonitorRequestAppMonitorConfiguration() {
  }

  public UpdateAppMonitorRequestAppMonitorConfiguration allowCookies(Boolean allowCookies) {
    this.allowCookies = allowCookies;
    return this;
  }

  /**
   * Get allowCookies
   * @return allowCookies
   */
  @javax.annotation.Nullable
  public Boolean getAllowCookies() {
    return allowCookies;
  }

  public void setAllowCookies(Boolean allowCookies) {
    this.allowCookies = allowCookies;
  }


  public UpdateAppMonitorRequestAppMonitorConfiguration enableXRay(Boolean enableXRay) {
    this.enableXRay = enableXRay;
    return this;
  }

  /**
   * Get enableXRay
   * @return enableXRay
   */
  @javax.annotation.Nullable
  public Boolean getEnableXRay() {
    return enableXRay;
  }

  public void setEnableXRay(Boolean enableXRay) {
    this.enableXRay = enableXRay;
  }


  public UpdateAppMonitorRequestAppMonitorConfiguration excludedPages(List excludedPages) {
    this.excludedPages = excludedPages;
    return this;
  }

  /**
   * Get excludedPages
   * @return excludedPages
   */
  @javax.annotation.Nullable
  public List getExcludedPages() {
    return excludedPages;
  }

  public void setExcludedPages(List excludedPages) {
    this.excludedPages = excludedPages;
  }


  public UpdateAppMonitorRequestAppMonitorConfiguration favoritePages(List favoritePages) {
    this.favoritePages = favoritePages;
    return this;
  }

  /**
   * Get favoritePages
   * @return favoritePages
   */
  @javax.annotation.Nullable
  public List getFavoritePages() {
    return favoritePages;
  }

  public void setFavoritePages(List favoritePages) {
    this.favoritePages = favoritePages;
  }


  public UpdateAppMonitorRequestAppMonitorConfiguration guestRoleArn(String guestRoleArn) {
    this.guestRoleArn = guestRoleArn;
    return this;
  }

  /**
   * Get guestRoleArn
   * @return guestRoleArn
   */
  @javax.annotation.Nullable
  public String getGuestRoleArn() {
    return guestRoleArn;
  }

  public void setGuestRoleArn(String guestRoleArn) {
    this.guestRoleArn = guestRoleArn;
  }


  public UpdateAppMonitorRequestAppMonitorConfiguration identityPoolId(String identityPoolId) {
    this.identityPoolId = identityPoolId;
    return this;
  }

  /**
   * Get identityPoolId
   * @return identityPoolId
   */
  @javax.annotation.Nullable
  public String getIdentityPoolId() {
    return identityPoolId;
  }

  public void setIdentityPoolId(String identityPoolId) {
    this.identityPoolId = identityPoolId;
  }


  public UpdateAppMonitorRequestAppMonitorConfiguration includedPages(List includedPages) {
    this.includedPages = includedPages;
    return this;
  }

  /**
   * Get includedPages
   * @return includedPages
   */
  @javax.annotation.Nullable
  public List getIncludedPages() {
    return includedPages;
  }

  public void setIncludedPages(List includedPages) {
    this.includedPages = includedPages;
  }


  public UpdateAppMonitorRequestAppMonitorConfiguration sessionSampleRate(Double sessionSampleRate) {
    this.sessionSampleRate = sessionSampleRate;
    return this;
  }

  /**
   * Get sessionSampleRate
   * @return sessionSampleRate
   */
  @javax.annotation.Nullable
  public Double getSessionSampleRate() {
    return sessionSampleRate;
  }

  public void setSessionSampleRate(Double sessionSampleRate) {
    this.sessionSampleRate = sessionSampleRate;
  }


  public UpdateAppMonitorRequestAppMonitorConfiguration telemetries(List telemetries) {
    this.telemetries = telemetries;
    return this;
  }

  /**
   * Get telemetries
   * @return telemetries
   */
  @javax.annotation.Nullable
  public List getTelemetries() {
    return telemetries;
  }

  public void setTelemetries(List telemetries) {
    this.telemetries = telemetries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAppMonitorRequestAppMonitorConfiguration updateAppMonitorRequestAppMonitorConfiguration = (UpdateAppMonitorRequestAppMonitorConfiguration) o;
    return Objects.equals(this.allowCookies, updateAppMonitorRequestAppMonitorConfiguration.allowCookies) &&
        Objects.equals(this.enableXRay, updateAppMonitorRequestAppMonitorConfiguration.enableXRay) &&
        Objects.equals(this.excludedPages, updateAppMonitorRequestAppMonitorConfiguration.excludedPages) &&
        Objects.equals(this.favoritePages, updateAppMonitorRequestAppMonitorConfiguration.favoritePages) &&
        Objects.equals(this.guestRoleArn, updateAppMonitorRequestAppMonitorConfiguration.guestRoleArn) &&
        Objects.equals(this.identityPoolId, updateAppMonitorRequestAppMonitorConfiguration.identityPoolId) &&
        Objects.equals(this.includedPages, updateAppMonitorRequestAppMonitorConfiguration.includedPages) &&
        Objects.equals(this.sessionSampleRate, updateAppMonitorRequestAppMonitorConfiguration.sessionSampleRate) &&
        Objects.equals(this.telemetries, updateAppMonitorRequestAppMonitorConfiguration.telemetries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCookies, enableXRay, excludedPages, favoritePages, guestRoleArn, identityPoolId, includedPages, sessionSampleRate, telemetries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAppMonitorRequestAppMonitorConfiguration {\n");
    sb.append("    allowCookies: ").append(toIndentedString(allowCookies)).append("\n");
    sb.append("    enableXRay: ").append(toIndentedString(enableXRay)).append("\n");
    sb.append("    excludedPages: ").append(toIndentedString(excludedPages)).append("\n");
    sb.append("    favoritePages: ").append(toIndentedString(favoritePages)).append("\n");
    sb.append("    guestRoleArn: ").append(toIndentedString(guestRoleArn)).append("\n");
    sb.append("    identityPoolId: ").append(toIndentedString(identityPoolId)).append("\n");
    sb.append("    includedPages: ").append(toIndentedString(includedPages)).append("\n");
    sb.append("    sessionSampleRate: ").append(toIndentedString(sessionSampleRate)).append("\n");
    sb.append("    telemetries: ").append(toIndentedString(telemetries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowCookies");
    openapiFields.add("EnableXRay");
    openapiFields.add("ExcludedPages");
    openapiFields.add("FavoritePages");
    openapiFields.add("GuestRoleArn");
    openapiFields.add("IdentityPoolId");
    openapiFields.add("IncludedPages");
    openapiFields.add("SessionSampleRate");
    openapiFields.add("Telemetries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAppMonitorRequestAppMonitorConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAppMonitorRequestAppMonitorConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAppMonitorRequestAppMonitorConfiguration is not found in the empty JSON string", UpdateAppMonitorRequestAppMonitorConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAppMonitorRequestAppMonitorConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAppMonitorRequestAppMonitorConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AllowCookies`
      if (jsonObj.get("AllowCookies") != null && !jsonObj.get("AllowCookies").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowCookies"));
      }
      // validate the optional field `EnableXRay`
      if (jsonObj.get("EnableXRay") != null && !jsonObj.get("EnableXRay").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableXRay"));
      }
      // validate the optional field `ExcludedPages`
      if (jsonObj.get("ExcludedPages") != null && !jsonObj.get("ExcludedPages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludedPages"));
      }
      // validate the optional field `FavoritePages`
      if (jsonObj.get("FavoritePages") != null && !jsonObj.get("FavoritePages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FavoritePages"));
      }
      // validate the optional field `GuestRoleArn`
      if (jsonObj.get("GuestRoleArn") != null && !jsonObj.get("GuestRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GuestRoleArn"));
      }
      // validate the optional field `IdentityPoolId`
      if (jsonObj.get("IdentityPoolId") != null && !jsonObj.get("IdentityPoolId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdentityPoolId"));
      }
      // validate the optional field `IncludedPages`
      if (jsonObj.get("IncludedPages") != null && !jsonObj.get("IncludedPages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IncludedPages"));
      }
      // validate the optional field `SessionSampleRate`
      if (jsonObj.get("SessionSampleRate") != null && !jsonObj.get("SessionSampleRate").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("SessionSampleRate"));
      }
      // validate the optional field `Telemetries`
      if (jsonObj.get("Telemetries") != null && !jsonObj.get("Telemetries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Telemetries"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAppMonitorRequestAppMonitorConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAppMonitorRequestAppMonitorConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAppMonitorRequestAppMonitorConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAppMonitorRequestAppMonitorConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAppMonitorRequestAppMonitorConfiguration>() {
           @Override
           public void write(JsonWriter out, UpdateAppMonitorRequestAppMonitorConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAppMonitorRequestAppMonitorConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAppMonitorRequestAppMonitorConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAppMonitorRequestAppMonitorConfiguration
   * @throws IOException if the JSON string is invalid with respect to UpdateAppMonitorRequestAppMonitorConfiguration
   */
  public static UpdateAppMonitorRequestAppMonitorConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAppMonitorRequestAppMonitorConfiguration.class);
  }

  /**
   * Convert an instance of UpdateAppMonitorRequestAppMonitorConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

