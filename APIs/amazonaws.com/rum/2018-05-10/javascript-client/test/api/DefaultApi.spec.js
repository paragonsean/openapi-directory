/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudWatchRum);
  }
}(this, function(expect, CloudWatchRum) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudWatchRum.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchCreateRumMetricDefinitions', function() {
      it('should call batchCreateRumMetricDefinitions successfully', function(done) {
        //uncomment below and update the code to test batchCreateRumMetricDefinitions
        //instance.batchCreateRumMetricDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDeleteRumMetricDefinitions', function() {
      it('should call batchDeleteRumMetricDefinitions successfully', function(done) {
        //uncomment below and update the code to test batchDeleteRumMetricDefinitions
        //instance.batchDeleteRumMetricDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGetRumMetricDefinitions', function() {
      it('should call batchGetRumMetricDefinitions successfully', function(done) {
        //uncomment below and update the code to test batchGetRumMetricDefinitions
        //instance.batchGetRumMetricDefinitions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAppMonitor', function() {
      it('should call createAppMonitor successfully', function(done) {
        //uncomment below and update the code to test createAppMonitor
        //instance.createAppMonitor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppMonitor', function() {
      it('should call deleteAppMonitor successfully', function(done) {
        //uncomment below and update the code to test deleteAppMonitor
        //instance.deleteAppMonitor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRumMetricsDestination', function() {
      it('should call deleteRumMetricsDestination successfully', function(done) {
        //uncomment below and update the code to test deleteRumMetricsDestination
        //instance.deleteRumMetricsDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppMonitor', function() {
      it('should call getAppMonitor successfully', function(done) {
        //uncomment below and update the code to test getAppMonitor
        //instance.getAppMonitor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppMonitorData', function() {
      it('should call getAppMonitorData successfully', function(done) {
        //uncomment below and update the code to test getAppMonitorData
        //instance.getAppMonitorData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppMonitors', function() {
      it('should call listAppMonitors successfully', function(done) {
        //uncomment below and update the code to test listAppMonitors
        //instance.listAppMonitors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRumMetricsDestinations', function() {
      it('should call listRumMetricsDestinations successfully', function(done) {
        //uncomment below and update the code to test listRumMetricsDestinations
        //instance.listRumMetricsDestinations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRumEvents', function() {
      it('should call putRumEvents successfully', function(done) {
        //uncomment below and update the code to test putRumEvents
        //instance.putRumEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRumMetricsDestination', function() {
      it('should call putRumMetricsDestination successfully', function(done) {
        //uncomment below and update the code to test putRumMetricsDestination
        //instance.putRumMetricsDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAppMonitor', function() {
      it('should call updateAppMonitor successfully', function(done) {
        //uncomment below and update the code to test updateAppMonitor
        //instance.updateAppMonitor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRumMetricDefinition', function() {
      it('should call updateRumMetricDefinition successfully', function(done) {
        //uncomment below and update the code to test updateRumMetricDefinition
        //instance.updateRumMetricDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
