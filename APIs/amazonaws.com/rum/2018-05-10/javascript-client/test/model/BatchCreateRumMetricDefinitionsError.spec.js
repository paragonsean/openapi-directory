/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudWatchRum);
  }
}(this, function(expect, CloudWatchRum) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudWatchRum.BatchCreateRumMetricDefinitionsError();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BatchCreateRumMetricDefinitionsError', function() {
    it('should create an instance of BatchCreateRumMetricDefinitionsError', function() {
      // uncomment below and update the code to test BatchCreateRumMetricDefinitionsError
      //var instance = new CloudWatchRum.BatchCreateRumMetricDefinitionsError();
      //expect(instance).to.be.a(CloudWatchRum.BatchCreateRumMetricDefinitionsError);
    });

    it('should have the property errorCode (base name: "ErrorCode")', function() {
      // uncomment below and update the code to test the property errorCode
      //var instance = new CloudWatchRum.BatchCreateRumMetricDefinitionsError();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "ErrorMessage")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new CloudWatchRum.BatchCreateRumMetricDefinitionsError();
      //expect(instance).to.be();
    });

    it('should have the property metricDefinition (base name: "MetricDefinition")', function() {
      // uncomment below and update the code to test the property metricDefinition
      //var instance = new CloudWatchRum.BatchCreateRumMetricDefinitionsError();
      //expect(instance).to.be();
    });

  });

}));
