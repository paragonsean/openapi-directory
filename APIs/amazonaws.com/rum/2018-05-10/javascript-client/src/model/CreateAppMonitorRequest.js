/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateAppMonitorRequestAppMonitorConfiguration from './CreateAppMonitorRequestAppMonitorConfiguration';
import CreateAppMonitorRequestCustomEvents from './CreateAppMonitorRequestCustomEvents';

/**
 * The CreateAppMonitorRequest model module.
 * @module model/CreateAppMonitorRequest
 * @version 2018-05-10
 */
class CreateAppMonitorRequest {
    /**
     * Constructs a new <code>CreateAppMonitorRequest</code>.
     * @alias module:model/CreateAppMonitorRequest
     * @param domain {String} The top-level internet domain name for which your application has administrative authority.
     * @param name {String} A name for the app monitor.
     */
    constructor(domain, name) { 
        
        CreateAppMonitorRequest.initialize(this, domain, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domain, name) { 
        obj['Domain'] = domain;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>CreateAppMonitorRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAppMonitorRequest} obj Optional instance to populate.
     * @return {module:model/CreateAppMonitorRequest} The populated <code>CreateAppMonitorRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAppMonitorRequest();

            if (data.hasOwnProperty('AppMonitorConfiguration')) {
                obj['AppMonitorConfiguration'] = CreateAppMonitorRequestAppMonitorConfiguration.constructFromObject(data['AppMonitorConfiguration']);
            }
            if (data.hasOwnProperty('CustomEvents')) {
                obj['CustomEvents'] = CreateAppMonitorRequestCustomEvents.constructFromObject(data['CustomEvents']);
            }
            if (data.hasOwnProperty('CwLogEnabled')) {
                obj['CwLogEnabled'] = ApiClient.convertToType(data['CwLogEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('Domain')) {
                obj['Domain'] = ApiClient.convertToType(data['Domain'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAppMonitorRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAppMonitorRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAppMonitorRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AppMonitorConfiguration`
        if (data['AppMonitorConfiguration']) { // data not null
          CreateAppMonitorRequestAppMonitorConfiguration.validateJSON(data['AppMonitorConfiguration']);
        }
        // validate the optional field `CustomEvents`
        if (data['CustomEvents']) { // data not null
          CreateAppMonitorRequestCustomEvents.validateJSON(data['CustomEvents']);
        }
        // ensure the json data is a string
        if (data['Domain'] && !(typeof data['Domain'] === 'string' || data['Domain'] instanceof String)) {
            throw new Error("Expected the field `Domain` to be a primitive type in the JSON string but got " + data['Domain']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}

CreateAppMonitorRequest.RequiredProperties = ["Domain", "Name"];

/**
 * @member {module:model/CreateAppMonitorRequestAppMonitorConfiguration} AppMonitorConfiguration
 */
CreateAppMonitorRequest.prototype['AppMonitorConfiguration'] = undefined;

/**
 * @member {module:model/CreateAppMonitorRequestCustomEvents} CustomEvents
 */
CreateAppMonitorRequest.prototype['CustomEvents'] = undefined;

/**
 * <p>Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.</p> <p>If you omit this parameter, the default is <code>false</code>.</p>
 * @member {Boolean} CwLogEnabled
 */
CreateAppMonitorRequest.prototype['CwLogEnabled'] = undefined;

/**
 * The top-level internet domain name for which your application has administrative authority.
 * @member {String} Domain
 */
CreateAppMonitorRequest.prototype['Domain'] = undefined;

/**
 * A name for the app monitor.
 * @member {String} Name
 */
CreateAppMonitorRequest.prototype['Name'] = undefined;

/**
 * <p>Assigns one or more tags (key-value pairs) to the app monitor.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with an app monitor.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>
 * @member {Object.<String, String>} Tags
 */
CreateAppMonitorRequest.prototype['Tags'] = undefined;






export default CreateAppMonitorRequest;

