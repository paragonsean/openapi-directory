/**
 * CloudWatch RUM
 * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about your web application performance from actual user sessions in real time. The data collected includes page load times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and also see breakdowns by the browsers and devices that your customers use.</p> <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error messages, stack traces, and user sessions. You can also use RUM to understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
 *
 * The version of the OpenAPI document: 2018-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetAppMonitorDataRequestTimeRange from './GetAppMonitorDataRequestTimeRange';
import QueryFilter from './QueryFilter';

/**
 * The GetAppMonitorDataRequest model module.
 * @module model/GetAppMonitorDataRequest
 * @version 2018-05-10
 */
class GetAppMonitorDataRequest {
    /**
     * Constructs a new <code>GetAppMonitorDataRequest</code>.
     * @alias module:model/GetAppMonitorDataRequest
     * @param timeRange {module:model/GetAppMonitorDataRequestTimeRange} 
     */
    constructor(timeRange) { 
        
        GetAppMonitorDataRequest.initialize(this, timeRange);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timeRange) { 
        obj['TimeRange'] = timeRange;
    }

    /**
     * Constructs a <code>GetAppMonitorDataRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetAppMonitorDataRequest} obj Optional instance to populate.
     * @return {module:model/GetAppMonitorDataRequest} The populated <code>GetAppMonitorDataRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetAppMonitorDataRequest();

            if (data.hasOwnProperty('Filters')) {
                obj['Filters'] = ApiClient.convertToType(data['Filters'], [QueryFilter]);
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
            if (data.hasOwnProperty('TimeRange')) {
                obj['TimeRange'] = GetAppMonitorDataRequestTimeRange.constructFromObject(data['TimeRange']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetAppMonitorDataRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetAppMonitorDataRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetAppMonitorDataRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Filters'])) {
                throw new Error("Expected the field `Filters` to be an array in the JSON data but got " + data['Filters']);
            }
            // validate the optional field `Filters` (array)
            for (const item of data['Filters']) {
                QueryFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }
        // validate the optional field `TimeRange`
        if (data['TimeRange']) { // data not null
          GetAppMonitorDataRequestTimeRange.validateJSON(data['TimeRange']);
        }

        return true;
    }


}

GetAppMonitorDataRequest.RequiredProperties = ["TimeRange"];

/**
 * An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.
 * @member {Array.<module:model/QueryFilter>} Filters
 */
GetAppMonitorDataRequest.prototype['Filters'] = undefined;

/**
 * The maximum number of results to return in one operation. 
 * @member {Number} MaxResults
 */
GetAppMonitorDataRequest.prototype['MaxResults'] = undefined;

/**
 * Use the token returned by the previous operation to request the next page of results.
 * @member {String} NextToken
 */
GetAppMonitorDataRequest.prototype['NextToken'] = undefined;

/**
 * @member {module:model/GetAppMonitorDataRequestTimeRange} TimeRange
 */
GetAppMonitorDataRequest.prototype['TimeRange'] = undefined;






export default GetAppMonitorDataRequest;

