/*
 * Amazon Route 53 Resolver
 * <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.</p> <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p> <p> <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b> </p> <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for Amazon Web Services resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc\">How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally forward queries from a VPC to resolvers on your network</b> </p> <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network\">How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.</p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateFirewallRuleGroupRequest;
import org.openapitools.client.model.AssociateFirewallRuleGroupResponse;
import org.openapitools.client.model.AssociateResolverEndpointIpAddressRequest;
import org.openapitools.client.model.AssociateResolverEndpointIpAddressResponse;
import org.openapitools.client.model.AssociateResolverQueryLogConfigRequest;
import org.openapitools.client.model.AssociateResolverQueryLogConfigResponse;
import org.openapitools.client.model.AssociateResolverRuleRequest;
import org.openapitools.client.model.AssociateResolverRuleResponse;
import org.openapitools.client.model.CreateFirewallDomainListRequest;
import org.openapitools.client.model.CreateFirewallDomainListResponse;
import org.openapitools.client.model.CreateFirewallRuleGroupRequest;
import org.openapitools.client.model.CreateFirewallRuleGroupResponse;
import org.openapitools.client.model.CreateFirewallRuleRequest;
import org.openapitools.client.model.CreateFirewallRuleResponse;
import org.openapitools.client.model.CreateOutpostResolverRequest;
import org.openapitools.client.model.CreateOutpostResolverResponse;
import org.openapitools.client.model.CreateResolverEndpointRequest;
import org.openapitools.client.model.CreateResolverEndpointResponse;
import org.openapitools.client.model.CreateResolverQueryLogConfigRequest;
import org.openapitools.client.model.CreateResolverQueryLogConfigResponse;
import org.openapitools.client.model.CreateResolverRuleRequest;
import org.openapitools.client.model.CreateResolverRuleResponse;
import org.openapitools.client.model.DeleteFirewallDomainListRequest;
import org.openapitools.client.model.DeleteFirewallDomainListResponse;
import org.openapitools.client.model.DeleteFirewallRuleGroupRequest;
import org.openapitools.client.model.DeleteFirewallRuleGroupResponse;
import org.openapitools.client.model.DeleteFirewallRuleRequest;
import org.openapitools.client.model.DeleteFirewallRuleResponse;
import org.openapitools.client.model.DeleteOutpostResolverRequest;
import org.openapitools.client.model.DeleteOutpostResolverResponse;
import org.openapitools.client.model.DeleteResolverEndpointRequest;
import org.openapitools.client.model.DeleteResolverEndpointResponse;
import org.openapitools.client.model.DeleteResolverQueryLogConfigRequest;
import org.openapitools.client.model.DeleteResolverQueryLogConfigResponse;
import org.openapitools.client.model.DeleteResolverRuleRequest;
import org.openapitools.client.model.DeleteResolverRuleResponse;
import org.openapitools.client.model.DisassociateFirewallRuleGroupRequest;
import org.openapitools.client.model.DisassociateFirewallRuleGroupResponse;
import org.openapitools.client.model.DisassociateResolverEndpointIpAddressRequest;
import org.openapitools.client.model.DisassociateResolverEndpointIpAddressResponse;
import org.openapitools.client.model.DisassociateResolverQueryLogConfigRequest;
import org.openapitools.client.model.DisassociateResolverQueryLogConfigResponse;
import org.openapitools.client.model.DisassociateResolverRuleRequest;
import org.openapitools.client.model.DisassociateResolverRuleResponse;
import org.openapitools.client.model.GetFirewallConfigRequest;
import org.openapitools.client.model.GetFirewallConfigResponse;
import org.openapitools.client.model.GetFirewallDomainListRequest;
import org.openapitools.client.model.GetFirewallDomainListResponse;
import org.openapitools.client.model.GetFirewallRuleGroupAssociationRequest;
import org.openapitools.client.model.GetFirewallRuleGroupAssociationResponse;
import org.openapitools.client.model.GetFirewallRuleGroupPolicyRequest;
import org.openapitools.client.model.GetFirewallRuleGroupPolicyResponse;
import org.openapitools.client.model.GetFirewallRuleGroupRequest;
import org.openapitools.client.model.GetFirewallRuleGroupResponse;
import org.openapitools.client.model.GetOutpostResolverRequest;
import org.openapitools.client.model.GetOutpostResolverResponse;
import org.openapitools.client.model.GetResolverConfigRequest;
import org.openapitools.client.model.GetResolverConfigResponse;
import org.openapitools.client.model.GetResolverDnssecConfigRequest;
import org.openapitools.client.model.GetResolverDnssecConfigResponse;
import org.openapitools.client.model.GetResolverEndpointRequest;
import org.openapitools.client.model.GetResolverEndpointResponse;
import org.openapitools.client.model.GetResolverQueryLogConfigAssociationRequest;
import org.openapitools.client.model.GetResolverQueryLogConfigAssociationResponse;
import org.openapitools.client.model.GetResolverQueryLogConfigPolicyRequest;
import org.openapitools.client.model.GetResolverQueryLogConfigPolicyResponse;
import org.openapitools.client.model.GetResolverQueryLogConfigRequest;
import org.openapitools.client.model.GetResolverQueryLogConfigResponse;
import org.openapitools.client.model.GetResolverRuleAssociationRequest;
import org.openapitools.client.model.GetResolverRuleAssociationResponse;
import org.openapitools.client.model.GetResolverRulePolicyRequest;
import org.openapitools.client.model.GetResolverRulePolicyResponse;
import org.openapitools.client.model.GetResolverRuleRequest;
import org.openapitools.client.model.GetResolverRuleResponse;
import org.openapitools.client.model.ImportFirewallDomainsRequest;
import org.openapitools.client.model.ImportFirewallDomainsResponse;
import org.openapitools.client.model.ListFirewallConfigsRequest;
import org.openapitools.client.model.ListFirewallConfigsResponse;
import org.openapitools.client.model.ListFirewallDomainListsRequest;
import org.openapitools.client.model.ListFirewallDomainListsResponse;
import org.openapitools.client.model.ListFirewallDomainsRequest;
import org.openapitools.client.model.ListFirewallDomainsResponse;
import org.openapitools.client.model.ListFirewallRuleGroupAssociationsRequest;
import org.openapitools.client.model.ListFirewallRuleGroupAssociationsResponse;
import org.openapitools.client.model.ListFirewallRuleGroupsRequest;
import org.openapitools.client.model.ListFirewallRuleGroupsResponse;
import org.openapitools.client.model.ListFirewallRulesRequest;
import org.openapitools.client.model.ListFirewallRulesResponse;
import org.openapitools.client.model.ListOutpostResolversRequest;
import org.openapitools.client.model.ListOutpostResolversResponse;
import org.openapitools.client.model.ListResolverConfigsRequest;
import org.openapitools.client.model.ListResolverConfigsResponse;
import org.openapitools.client.model.ListResolverDnssecConfigsRequest;
import org.openapitools.client.model.ListResolverDnssecConfigsResponse;
import org.openapitools.client.model.ListResolverEndpointIpAddressesRequest;
import org.openapitools.client.model.ListResolverEndpointIpAddressesResponse;
import org.openapitools.client.model.ListResolverEndpointsRequest;
import org.openapitools.client.model.ListResolverEndpointsResponse;
import org.openapitools.client.model.ListResolverQueryLogConfigAssociationsRequest;
import org.openapitools.client.model.ListResolverQueryLogConfigAssociationsResponse;
import org.openapitools.client.model.ListResolverQueryLogConfigsRequest;
import org.openapitools.client.model.ListResolverQueryLogConfigsResponse;
import org.openapitools.client.model.ListResolverRuleAssociationsRequest;
import org.openapitools.client.model.ListResolverRuleAssociationsResponse;
import org.openapitools.client.model.ListResolverRulesRequest;
import org.openapitools.client.model.ListResolverRulesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutFirewallRuleGroupPolicyRequest;
import org.openapitools.client.model.PutFirewallRuleGroupPolicyResponse;
import org.openapitools.client.model.PutResolverQueryLogConfigPolicyRequest;
import org.openapitools.client.model.PutResolverQueryLogConfigPolicyResponse;
import org.openapitools.client.model.PutResolverRulePolicyRequest;
import org.openapitools.client.model.PutResolverRulePolicyResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateFirewallConfigRequest;
import org.openapitools.client.model.UpdateFirewallConfigResponse;
import org.openapitools.client.model.UpdateFirewallDomainsRequest;
import org.openapitools.client.model.UpdateFirewallDomainsResponse;
import org.openapitools.client.model.UpdateFirewallRuleGroupAssociationRequest;
import org.openapitools.client.model.UpdateFirewallRuleGroupAssociationResponse;
import org.openapitools.client.model.UpdateFirewallRuleRequest;
import org.openapitools.client.model.UpdateFirewallRuleResponse;
import org.openapitools.client.model.UpdateOutpostResolverRequest;
import org.openapitools.client.model.UpdateOutpostResolverResponse;
import org.openapitools.client.model.UpdateResolverConfigRequest;
import org.openapitools.client.model.UpdateResolverConfigResponse;
import org.openapitools.client.model.UpdateResolverDnssecConfigRequest;
import org.openapitools.client.model.UpdateResolverDnssecConfigResponse;
import org.openapitools.client.model.UpdateResolverEndpointRequest;
import org.openapitools.client.model.UpdateResolverEndpointResponse;
import org.openapitools.client.model.UpdateResolverRuleRequest;
import org.openapitools.client.model.UpdateResolverRuleResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates a &lt;a&gt;FirewallRuleGroup&lt;/a&gt; with a VPC, to provide DNS filtering for the VPC. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateFirewallRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        AssociateFirewallRuleGroupRequest associateFirewallRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateFirewallRuleGroupResponse response = api.associateFirewallRuleGroup(xAmzTarget, associateFirewallRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds IP addresses to an inbound or an outbound Resolver endpoint. If you want to add more than one IP address, submit one &lt;code&gt;AssociateResolverEndpointIpAddress&lt;/code&gt; request for each IP address.&lt;/p&gt; &lt;p&gt;To remove an IP address from an endpoint, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverEndpointIpAddress.html\&quot;&gt;DisassociateResolverEndpointIpAddress&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateResolverEndpointIpAddressTest() throws ApiException {
        String xAmzTarget = null;
        AssociateResolverEndpointIpAddressRequest associateResolverEndpointIpAddressRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateResolverEndpointIpAddressResponse response = api.associateResolverEndpointIpAddress(xAmzTarget, associateResolverEndpointIpAddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Associates an Amazon VPC with a specified query logging configuration. Route 53 Resolver logs DNS queries that originate in all of the Amazon VPCs that are associated with a specified query logging configuration. To associate more than one VPC with a configuration, submit one &lt;code&gt;AssociateResolverQueryLogConfig&lt;/code&gt; request for each VPC.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The VPCs that you associate with a query logging configuration must be in the same Region as the configuration.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To remove a VPC from a query logging configuration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html\&quot;&gt;DisassociateResolverQueryLogConfig&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateResolverQueryLogConfigTest() throws ApiException {
        String xAmzTarget = null;
        AssociateResolverQueryLogConfigRequest associateResolverQueryLogConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateResolverQueryLogConfigResponse response = api.associateResolverQueryLogConfig(xAmzTarget, associateResolverQueryLogConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a Resolver rule with a VPC. When you associate a rule with a VPC, Resolver forwards all DNS queries for the domain name that is specified in the rule and that originate in the VPC. The queries are forwarded to the IP addresses for the DNS resolvers that are specified in the rule. For more information about rules, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html\&quot;&gt;CreateResolverRule&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateResolverRuleTest() throws ApiException {
        String xAmzTarget = null;
        AssociateResolverRuleRequest associateResolverRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateResolverRuleResponse response = api.associateResolverRule(xAmzTarget, associateResolverRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an empty firewall domain list for use in DNS Firewall rules. You can populate the domains for the new list with a file, using &lt;a&gt;ImportFirewallDomains&lt;/a&gt;, or with domain strings, using &lt;a&gt;UpdateFirewallDomains&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFirewallDomainListTest() throws ApiException {
        String xAmzTarget = null;
        CreateFirewallDomainListRequest createFirewallDomainListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFirewallDomainListResponse response = api.createFirewallDomainList(xAmzTarget, createFirewallDomainListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a single DNS Firewall rule in the specified rule group, using the specified domain list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFirewallRuleTest() throws ApiException {
        String xAmzTarget = null;
        CreateFirewallRuleRequest createFirewallRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFirewallRuleResponse response = api.createFirewallRule(xAmzTarget, createFirewallRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an empty DNS Firewall rule group for filtering DNS network traffic in a VPC. You can add rules to the new rule group by calling &lt;a&gt;CreateFirewallRule&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFirewallRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateFirewallRuleGroupRequest createFirewallRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFirewallRuleGroupResponse response = api.createFirewallRuleGroup(xAmzTarget, createFirewallRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Route 53 Resolver on an Outpost.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOutpostResolverTest() throws ApiException {
        String xAmzTarget = null;
        CreateOutpostResolverRequest createOutpostResolverRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateOutpostResolverResponse response = api.createOutpostResolver(xAmzTarget, createOutpostResolverRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Resolver endpoint. There are two types of Resolver endpoints, inbound and outbound:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An &lt;i&gt;inbound Resolver endpoint&lt;/i&gt; forwards DNS queries to the DNS service for a VPC from your network.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An &lt;i&gt;outbound Resolver endpoint&lt;/i&gt; forwards DNS queries from the DNS service for a VPC to your network.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResolverEndpointTest() throws ApiException {
        String xAmzTarget = null;
        CreateResolverEndpointRequest createResolverEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateResolverEndpointResponse response = api.createResolverEndpoint(xAmzTarget, createResolverEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Resolver query logging configuration, which defines where you want Resolver to save DNS query logs that originate in your VPCs. Resolver can log queries only for VPCs that are in the same Region as the query logging configuration.&lt;/p&gt; &lt;p&gt;To specify which VPCs you want to log queries for, you use &lt;code&gt;AssociateResolverQueryLogConfig&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverQueryLogConfig.html\&quot;&gt;AssociateResolverQueryLogConfig&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;You can optionally use Resource Access Manager (RAM) to share a query logging configuration with other Amazon Web Services accounts. The other accounts can then associate VPCs with the configuration. The query logs that Resolver creates for a configuration include all DNS queries that originate in all VPCs that are associated with the configuration.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResolverQueryLogConfigTest() throws ApiException {
        String xAmzTarget = null;
        CreateResolverQueryLogConfigRequest createResolverQueryLogConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateResolverQueryLogConfigResponse response = api.createResolverQueryLogConfig(xAmzTarget, createResolverQueryLogConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * For DNS queries that originate in your VPCs, specifies which Resolver endpoint the queries pass through, one domain name that you want to forward to your network, and the IP addresses of the DNS resolvers in your network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResolverRuleTest() throws ApiException {
        String xAmzTarget = null;
        CreateResolverRuleRequest createResolverRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateResolverRuleResponse response = api.createResolverRule(xAmzTarget, createResolverRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified domain list. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFirewallDomainListTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFirewallDomainListRequest deleteFirewallDomainListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteFirewallDomainListResponse response = api.deleteFirewallDomainList(xAmzTarget, deleteFirewallDomainListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified firewall rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFirewallRuleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFirewallRuleRequest deleteFirewallRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteFirewallRuleResponse response = api.deleteFirewallRule(xAmzTarget, deleteFirewallRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified firewall rule group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFirewallRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFirewallRuleGroupRequest deleteFirewallRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteFirewallRuleGroupResponse response = api.deleteFirewallRuleGroup(xAmzTarget, deleteFirewallRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Resolver on the Outpost.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOutpostResolverTest() throws ApiException {
        String xAmzTarget = null;
        DeleteOutpostResolverRequest deleteOutpostResolverRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteOutpostResolverResponse response = api.deleteOutpostResolver(xAmzTarget, deleteOutpostResolverRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a Resolver endpoint. The effect of deleting a Resolver endpoint depends on whether it&#39;s an inbound or an outbound Resolver endpoint:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Inbound&lt;/b&gt;: DNS queries from your network are no longer routed to the DNS service for the specified VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Outbound&lt;/b&gt;: DNS queries from a VPC are no longer routed to your network.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResolverEndpointTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResolverEndpointRequest deleteResolverEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteResolverEndpointResponse response = api.deleteResolverEndpoint(xAmzTarget, deleteResolverEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a query logging configuration. When you delete a configuration, Resolver stops logging DNS queries for all of the Amazon VPCs that are associated with the configuration. This also applies if the query logging configuration is shared with other Amazon Web Services accounts, and the other accounts have associated VPCs with the shared configuration.&lt;/p&gt; &lt;p&gt;Before you can delete a query logging configuration, you must first disassociate all VPCs from the configuration. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html\&quot;&gt;DisassociateResolverQueryLogConfig&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you used Resource Access Manager (RAM) to share a query logging configuration with other accounts, you must stop sharing the configuration before you can delete a configuration. The accounts that you shared the configuration with can first disassociate VPCs that they associated with the configuration, but that&#39;s not necessary. If you stop sharing the configuration, those VPCs are automatically disassociated from the configuration.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResolverQueryLogConfigTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResolverQueryLogConfigRequest deleteResolverQueryLogConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteResolverQueryLogConfigResponse response = api.deleteResolverQueryLogConfig(xAmzTarget, deleteResolverQueryLogConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Resolver rule. Before you can delete a Resolver rule, you must disassociate it from all the VPCs that you associated the Resolver rule with. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html\&quot;&gt;DisassociateResolverRule&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResolverRuleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResolverRuleRequest deleteResolverRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteResolverRuleResponse response = api.deleteResolverRule(xAmzTarget, deleteResolverRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a &lt;a&gt;FirewallRuleGroup&lt;/a&gt; from a VPC, to remove DNS filtering from the VPC. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateFirewallRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateFirewallRuleGroupRequest disassociateFirewallRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateFirewallRuleGroupResponse response = api.disassociateFirewallRuleGroup(xAmzTarget, disassociateFirewallRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes IP addresses from an inbound or an outbound Resolver endpoint. If you want to remove more than one IP address, submit one &lt;code&gt;DisassociateResolverEndpointIpAddress&lt;/code&gt; request for each IP address.&lt;/p&gt; &lt;p&gt;To add an IP address to an endpoint, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverEndpointIpAddress.html\&quot;&gt;AssociateResolverEndpointIpAddress&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateResolverEndpointIpAddressTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateResolverEndpointIpAddressRequest disassociateResolverEndpointIpAddressRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateResolverEndpointIpAddressResponse response = api.disassociateResolverEndpointIpAddress(xAmzTarget, disassociateResolverEndpointIpAddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates a VPC from a query logging configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Before you can delete a query logging configuration, you must first disassociate all VPCs from the configuration. If you used Resource Access Manager (RAM) to share a query logging configuration with other accounts, VPCs can be disassociated from the configuration in the following ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The accounts that you shared the configuration with can disassociate VPCs from the configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can stop sharing the configuration.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateResolverQueryLogConfigTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateResolverQueryLogConfigRequest disassociateResolverQueryLogConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateResolverQueryLogConfigResponse response = api.disassociateResolverQueryLogConfig(xAmzTarget, disassociateResolverQueryLogConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the association between a specified Resolver rule and a specified VPC.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you disassociate a Resolver rule from a VPC, Resolver stops forwarding DNS queries for the domain name that you specified in the Resolver rule. &lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateResolverRuleTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateResolverRuleRequest disassociateResolverRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateResolverRuleResponse response = api.disassociateResolverRule(xAmzTarget, disassociateResolverRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFirewallConfigTest() throws ApiException {
        String xAmzTarget = null;
        GetFirewallConfigRequest getFirewallConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFirewallConfigResponse response = api.getFirewallConfig(xAmzTarget, getFirewallConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the specified firewall domain list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFirewallDomainListTest() throws ApiException {
        String xAmzTarget = null;
        GetFirewallDomainListRequest getFirewallDomainListRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFirewallDomainListResponse response = api.getFirewallDomainList(xAmzTarget, getFirewallDomainListRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the specified firewall rule group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFirewallRuleGroupTest() throws ApiException {
        String xAmzTarget = null;
        GetFirewallRuleGroupRequest getFirewallRuleGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFirewallRuleGroupResponse response = api.getFirewallRuleGroup(xAmzTarget, getFirewallRuleGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a firewall rule group association, which enables DNS filtering for a VPC with one rule group. A VPC can have more than one firewall rule group association, and a rule group can be associated with more than one VPC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFirewallRuleGroupAssociationTest() throws ApiException {
        String xAmzTarget = null;
        GetFirewallRuleGroupAssociationRequest getFirewallRuleGroupAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFirewallRuleGroupAssociationResponse response = api.getFirewallRuleGroupAssociation(xAmzTarget, getFirewallRuleGroupAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the Identity and Access Management (Amazon Web Services IAM) policy for sharing the specified rule group. You can use the policy to share the rule group using Resource Access Manager (RAM). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFirewallRuleGroupPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetFirewallRuleGroupPolicyRequest getFirewallRuleGroupPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFirewallRuleGroupPolicyResponse response = api.getFirewallRuleGroupPolicy(xAmzTarget, getFirewallRuleGroupPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified Resolver on the Outpost, such as its instance count and type, name, and the current status of the Resolver.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutpostResolverTest() throws ApiException {
        String xAmzTarget = null;
        GetOutpostResolverRequest getOutpostResolverRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOutpostResolverResponse response = api.getOutpostResolver(xAmzTarget, getOutpostResolverRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the behavior configuration of Route 53 Resolver behavior for a single VPC from Amazon Virtual Private Cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverConfigTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverConfigRequest getResolverConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverConfigResponse response = api.getResolverConfig(xAmzTarget, getResolverConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets DNSSEC validation information for a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverDnssecConfigTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverDnssecConfigRequest getResolverDnssecConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverDnssecConfigResponse response = api.getResolverDnssecConfig(xAmzTarget, getResolverDnssecConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified Resolver endpoint, such as whether it&#39;s an inbound or an outbound Resolver endpoint, and the current status of the endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverEndpointTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverEndpointRequest getResolverEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverEndpointResponse response = api.getResolverEndpoint(xAmzTarget, getResolverEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified Resolver query logging configuration, such as the number of VPCs that the configuration is logging queries for and the location that logs are sent to. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverQueryLogConfigTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverQueryLogConfigRequest getResolverQueryLogConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverQueryLogConfigResponse response = api.getResolverQueryLogConfig(xAmzTarget, getResolverQueryLogConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified association between a Resolver query logging configuration and an Amazon VPC. When you associate a VPC with a query logging configuration, Resolver logs DNS queries that originate in that VPC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverQueryLogConfigAssociationTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverQueryLogConfigAssociationRequest getResolverQueryLogConfigAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverQueryLogConfigAssociationResponse response = api.getResolverQueryLogConfigAssociation(xAmzTarget, getResolverQueryLogConfigAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a query logging policy. A query logging policy specifies the Resolver query logging operations and resources that you want to allow another Amazon Web Services account to be able to use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverQueryLogConfigPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverQueryLogConfigPolicyRequest getResolverQueryLogConfigPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverQueryLogConfigPolicyResponse response = api.getResolverQueryLogConfigPolicy(xAmzTarget, getResolverQueryLogConfigPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified Resolver rule, such as the domain name that the rule forwards DNS queries for and the ID of the outbound Resolver endpoint that the rule is associated with.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverRuleTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverRuleRequest getResolverRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverRuleResponse response = api.getResolverRule(xAmzTarget, getResolverRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about an association between a specified Resolver rule and a VPC. You associate a Resolver rule and a VPC using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html\&quot;&gt;AssociateResolverRule&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverRuleAssociationTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverRuleAssociationRequest getResolverRuleAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverRuleAssociationResponse response = api.getResolverRuleAssociation(xAmzTarget, getResolverRuleAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the Resolver rule policy for a specified rule. A Resolver rule policy includes the rule that you want to share with another account, the account that you want to share the rule with, and the Resolver operations that you want to allow the account to use. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResolverRulePolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetResolverRulePolicyRequest getResolverRulePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResolverRulePolicyResponse response = api.getResolverRulePolicy(xAmzTarget, getResolverRulePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Imports domain names from a file into a domain list, for use in a DNS firewall rule group. &lt;/p&gt; &lt;p&gt;Each domain specification in your domain list must satisfy the following requirements: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;It can optionally start with &lt;code&gt;*&lt;/code&gt; (asterisk).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With the exception of the optional starting asterisk, it must only contain the following characters: &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; (hyphen).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;It must be from 1-255 characters in length. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importFirewallDomainsTest() throws ApiException {
        String xAmzTarget = null;
        ImportFirewallDomainsRequest importFirewallDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportFirewallDomainsResponse response = api.importFirewallDomains(xAmzTarget, importFirewallDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the firewall configurations that you have defined. DNS Firewall uses the configurations to manage firewall behavior for your VPCs. &lt;/p&gt; &lt;p&gt;A single call might return only a partial list of the configurations. For information, see &lt;code&gt;MaxResults&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFirewallConfigsTest() throws ApiException {
        String xAmzTarget = null;
        ListFirewallConfigsRequest listFirewallConfigsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFirewallConfigsResponse response = api.listFirewallConfigs(xAmzTarget, listFirewallConfigsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the firewall domain lists that you have defined. For each firewall domain list, you can retrieve the domains that are defined for a list by calling &lt;a&gt;ListFirewallDomains&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;A single call to this list operation might return only a partial list of the domain lists. For information, see &lt;code&gt;MaxResults&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFirewallDomainListsTest() throws ApiException {
        String xAmzTarget = null;
        ListFirewallDomainListsRequest listFirewallDomainListsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFirewallDomainListsResponse response = api.listFirewallDomainLists(xAmzTarget, listFirewallDomainListsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the domains that you have defined for the specified firewall domain list. &lt;/p&gt; &lt;p&gt;A single call might return only a partial list of the domains. For information, see &lt;code&gt;MaxResults&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFirewallDomainsTest() throws ApiException {
        String xAmzTarget = null;
        ListFirewallDomainsRequest listFirewallDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFirewallDomainsResponse response = api.listFirewallDomains(xAmzTarget, listFirewallDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the firewall rule group associations that you have defined. Each association enables DNS filtering for a VPC with one rule group. &lt;/p&gt; &lt;p&gt;A single call might return only a partial list of the associations. For information, see &lt;code&gt;MaxResults&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFirewallRuleGroupAssociationsTest() throws ApiException {
        String xAmzTarget = null;
        ListFirewallRuleGroupAssociationsRequest listFirewallRuleGroupAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFirewallRuleGroupAssociationsResponse response = api.listFirewallRuleGroupAssociations(xAmzTarget, listFirewallRuleGroupAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the minimal high-level information for the rule groups that you have defined. &lt;/p&gt; &lt;p&gt;A single call might return only a partial list of the rule groups. For information, see &lt;code&gt;MaxResults&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFirewallRuleGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListFirewallRuleGroupsRequest listFirewallRuleGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFirewallRuleGroupsResponse response = api.listFirewallRuleGroups(xAmzTarget, listFirewallRuleGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the firewall rules that you have defined for the specified firewall rule group. DNS Firewall uses the rules in a rule group to filter DNS network traffic for a VPC. &lt;/p&gt; &lt;p&gt;A single call might return only a partial list of the rules. For information, see &lt;code&gt;MaxResults&lt;/code&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFirewallRulesTest() throws ApiException {
        String xAmzTarget = null;
        ListFirewallRulesRequest listFirewallRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFirewallRulesResponse response = api.listFirewallRules(xAmzTarget, listFirewallRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the Resolvers on Outposts that were created using the current Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOutpostResolversTest() throws ApiException {
        String xAmzTarget = null;
        ListOutpostResolversRequest listOutpostResolversRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListOutpostResolversResponse response = api.listOutpostResolvers(xAmzTarget, listOutpostResolversRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the Resolver configurations that you have defined. Route 53 Resolver uses the configurations to manage DNS resolution behavior for your VPCs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResolverConfigsTest() throws ApiException {
        String xAmzTarget = null;
        ListResolverConfigsRequest listResolverConfigsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResolverConfigsResponse response = api.listResolverConfigs(xAmzTarget, listResolverConfigsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the configurations for DNSSEC validation that are associated with the current Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResolverDnssecConfigsTest() throws ApiException {
        String xAmzTarget = null;
        ListResolverDnssecConfigsRequest listResolverDnssecConfigsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResolverDnssecConfigsResponse response = api.listResolverDnssecConfigs(xAmzTarget, listResolverDnssecConfigsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the IP addresses for a specified Resolver endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResolverEndpointIpAddressesTest() throws ApiException {
        String xAmzTarget = null;
        ListResolverEndpointIpAddressesRequest listResolverEndpointIpAddressesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResolverEndpointIpAddressesResponse response = api.listResolverEndpointIpAddresses(xAmzTarget, listResolverEndpointIpAddressesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the Resolver endpoints that were created using the current Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResolverEndpointsTest() throws ApiException {
        String xAmzTarget = null;
        ListResolverEndpointsRequest listResolverEndpointsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResolverEndpointsResponse response = api.listResolverEndpoints(xAmzTarget, listResolverEndpointsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists information about associations between Amazon VPCs and query logging configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResolverQueryLogConfigAssociationsTest() throws ApiException {
        String xAmzTarget = null;
        ListResolverQueryLogConfigAssociationsRequest listResolverQueryLogConfigAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResolverQueryLogConfigAssociationsResponse response = api.listResolverQueryLogConfigAssociations(xAmzTarget, listResolverQueryLogConfigAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists information about the specified query logging configurations. Each configuration defines where you want Resolver to save DNS query logs and specifies the VPCs that you want to log queries for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResolverQueryLogConfigsTest() throws ApiException {
        String xAmzTarget = null;
        ListResolverQueryLogConfigsRequest listResolverQueryLogConfigsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResolverQueryLogConfigsResponse response = api.listResolverQueryLogConfigs(xAmzTarget, listResolverQueryLogConfigsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the associations that were created between Resolver rules and VPCs using the current Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResolverRuleAssociationsTest() throws ApiException {
        String xAmzTarget = null;
        ListResolverRuleAssociationsRequest listResolverRuleAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResolverRuleAssociationsResponse response = api.listResolverRuleAssociations(xAmzTarget, listResolverRuleAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the Resolver rules that were created using the current Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResolverRulesTest() throws ApiException {
        String xAmzTarget = null;
        ListResolverRulesRequest listResolverRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResolverRulesResponse response = api.listResolverRules(xAmzTarget, listResolverRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags that you associated with the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Attaches an Identity and Access Management (Amazon Web Services IAM) policy for sharing the rule group. You can use the policy to share the rule group using Resource Access Manager (RAM). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putFirewallRuleGroupPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutFirewallRuleGroupPolicyRequest putFirewallRuleGroupPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutFirewallRuleGroupPolicyResponse response = api.putFirewallRuleGroupPolicy(xAmzTarget, putFirewallRuleGroupPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specifies an Amazon Web Services account that you want to share a query logging configuration with, the query logging configuration that you want to share, and the operations that you want the account to be able to perform on the configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResolverQueryLogConfigPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutResolverQueryLogConfigPolicyRequest putResolverQueryLogConfigPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutResolverQueryLogConfigPolicyResponse response = api.putResolverQueryLogConfigPolicy(xAmzTarget, putResolverQueryLogConfigPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Specifies an Amazon Web Services rule that you want to share with another account, the account that you want to share the rule with, and the operations that you want the account to be able to perform on the rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResolverRulePolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutResolverRulePolicyRequest putResolverRulePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutResolverRulePolicyResponse response = api.putResolverRulePolicy(xAmzTarget, putResolverRulePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds one or more tags to a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from a specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallConfigTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallConfigRequest updateFirewallConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallConfigResponse response = api.updateFirewallConfig(xAmzTarget, updateFirewallConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the firewall domain list from an array of domain specifications. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallDomainsTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallDomainsRequest updateFirewallDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallDomainsResponse response = api.updateFirewallDomains(xAmzTarget, updateFirewallDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified firewall rule. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallRuleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallRuleRequest updateFirewallRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallRuleResponse response = api.updateFirewallRule(xAmzTarget, updateFirewallRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes the association of a &lt;a&gt;FirewallRuleGroup&lt;/a&gt; with a VPC. The association enables DNS filtering for the VPC. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFirewallRuleGroupAssociationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFirewallRuleGroupAssociationRequest updateFirewallRuleGroupAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFirewallRuleGroupAssociationResponse response = api.updateFirewallRuleGroupAssociation(xAmzTarget, updateFirewallRuleGroupAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * You can use &lt;code&gt;UpdateOutpostResolver&lt;/code&gt; to update the instance count, type, or name of a Resolver on an Outpost.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOutpostResolverTest() throws ApiException {
        String xAmzTarget = null;
        UpdateOutpostResolverRequest updateOutpostResolverRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateOutpostResolverResponse response = api.updateOutpostResolver(xAmzTarget, updateOutpostResolverRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the behavior configuration of Route 53 Resolver behavior for a single VPC from Amazon Virtual Private Cloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResolverConfigTest() throws ApiException {
        String xAmzTarget = null;
        UpdateResolverConfigRequest updateResolverConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateResolverConfigResponse response = api.updateResolverConfig(xAmzTarget, updateResolverConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing DNSSEC validation configuration. If there is no existing DNSSEC validation configuration, one is created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResolverDnssecConfigTest() throws ApiException {
        String xAmzTarget = null;
        UpdateResolverDnssecConfigRequest updateResolverDnssecConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateResolverDnssecConfigResponse response = api.updateResolverDnssecConfig(xAmzTarget, updateResolverDnssecConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the name, or enpoint type for an inbound or an outbound Resolver endpoint. You can only update between IPV4 and DUALSTACK, IPV6 endpoint type can&#39;t be updated to other type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResolverEndpointTest() throws ApiException {
        String xAmzTarget = null;
        UpdateResolverEndpointRequest updateResolverEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateResolverEndpointResponse response = api.updateResolverEndpoint(xAmzTarget, updateResolverEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates settings for a specified Resolver rule. &lt;code&gt;ResolverRuleId&lt;/code&gt; is required, and all other parameters are optional. If you don&#39;t specify a parameter, it retains its current value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResolverRuleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateResolverRuleRequest updateResolverRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateResolverRuleResponse response = api.updateResolverRule(xAmzTarget, updateResolverRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
