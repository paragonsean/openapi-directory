/**
 * Amazon Route 53 Resolver
 * <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.</p> <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p> <p> <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b> </p> <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for Amazon Web Services resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc\">How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally forward queries from a VPC to resolvers on your network</b> </p> <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network\">How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.</p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResolverEndpointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResolverEndpointRequest::OAICreateResolverEndpointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResolverEndpointRequest::OAICreateResolverEndpointRequest() {
    this->initializeModel();
}

OAICreateResolverEndpointRequest::~OAICreateResolverEndpointRequest() {}

void OAICreateResolverEndpointRequest::initializeModel() {

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_resolver_endpoint_type_isSet = false;
    m_resolver_endpoint_type_isValid = false;

    m_outpost_arn_isSet = false;
    m_outpost_arn_isValid = false;

    m_preferred_instance_type_isSet = false;
    m_preferred_instance_type_isValid = false;
}

void OAICreateResolverEndpointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResolverEndpointRequest::fromJsonObject(QJsonObject json) {

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("Direction")]);
    m_direction_isSet = !json[QString("Direction")].isNull() && m_direction_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("IpAddresses")]);
    m_ip_addresses_isSet = !json[QString("IpAddresses")].isNull() && m_ip_addresses_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_resolver_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_resolver_endpoint_type, json[QString("ResolverEndpointType")]);
    m_resolver_endpoint_type_isSet = !json[QString("ResolverEndpointType")].isNull() && m_resolver_endpoint_type_isValid;

    m_outpost_arn_isValid = ::OpenAPI::fromJsonValue(m_outpost_arn, json[QString("OutpostArn")]);
    m_outpost_arn_isSet = !json[QString("OutpostArn")].isNull() && m_outpost_arn_isValid;

    m_preferred_instance_type_isValid = ::OpenAPI::fromJsonValue(m_preferred_instance_type, json[QString("PreferredInstanceType")]);
    m_preferred_instance_type_isSet = !json[QString("PreferredInstanceType")].isNull() && m_preferred_instance_type_isValid;
}

QString OAICreateResolverEndpointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResolverEndpointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("Direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_ip_addresses.isSet()) {
        obj.insert(QString("IpAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_resolver_endpoint_type.isSet()) {
        obj.insert(QString("ResolverEndpointType"), ::OpenAPI::toJsonValue(m_resolver_endpoint_type));
    }
    if (m_outpost_arn_isSet) {
        obj.insert(QString("OutpostArn"), ::OpenAPI::toJsonValue(m_outpost_arn));
    }
    if (m_preferred_instance_type_isSet) {
        obj.insert(QString("PreferredInstanceType"), ::OpenAPI::toJsonValue(m_preferred_instance_type));
    }
    return obj;
}

QString OAICreateResolverEndpointRequest::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAICreateResolverEndpointRequest::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAICreateResolverEndpointRequest::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

QString OAICreateResolverEndpointRequest::getName() const {
    return m_name;
}
void OAICreateResolverEndpointRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateResolverEndpointRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateResolverEndpointRequest::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateResolverEndpointRequest::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateResolverEndpointRequest::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

OAIResolverEndpointDirection OAICreateResolverEndpointRequest::getDirection() const {
    return m_direction;
}
void OAICreateResolverEndpointRequest::setDirection(const OAIResolverEndpointDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICreateResolverEndpointRequest::is_direction_Valid() const{
    return m_direction_isValid;
}

QList OAICreateResolverEndpointRequest::getIpAddresses() const {
    return m_ip_addresses;
}
void OAICreateResolverEndpointRequest::setIpAddresses(const QList &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAICreateResolverEndpointRequest::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QList OAICreateResolverEndpointRequest::getTags() const {
    return m_tags;
}
void OAICreateResolverEndpointRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateResolverEndpointRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIResolverEndpointType OAICreateResolverEndpointRequest::getResolverEndpointType() const {
    return m_resolver_endpoint_type;
}
void OAICreateResolverEndpointRequest::setResolverEndpointType(const OAIResolverEndpointType &resolver_endpoint_type) {
    m_resolver_endpoint_type = resolver_endpoint_type;
    m_resolver_endpoint_type_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_resolver_endpoint_type_Set() const{
    return m_resolver_endpoint_type_isSet;
}

bool OAICreateResolverEndpointRequest::is_resolver_endpoint_type_Valid() const{
    return m_resolver_endpoint_type_isValid;
}

QString OAICreateResolverEndpointRequest::getOutpostArn() const {
    return m_outpost_arn;
}
void OAICreateResolverEndpointRequest::setOutpostArn(const QString &outpost_arn) {
    m_outpost_arn = outpost_arn;
    m_outpost_arn_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_outpost_arn_Set() const{
    return m_outpost_arn_isSet;
}

bool OAICreateResolverEndpointRequest::is_outpost_arn_Valid() const{
    return m_outpost_arn_isValid;
}

QString OAICreateResolverEndpointRequest::getPreferredInstanceType() const {
    return m_preferred_instance_type;
}
void OAICreateResolverEndpointRequest::setPreferredInstanceType(const QString &preferred_instance_type) {
    m_preferred_instance_type = preferred_instance_type;
    m_preferred_instance_type_isSet = true;
}

bool OAICreateResolverEndpointRequest::is_preferred_instance_type_Set() const{
    return m_preferred_instance_type_isSet;
}

bool OAICreateResolverEndpointRequest::is_preferred_instance_type_Valid() const{
    return m_preferred_instance_type_isValid;
}

bool OAICreateResolverEndpointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolver_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outpost_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResolverEndpointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creator_request_id_isValid && m_security_group_ids_isValid && m_direction_isValid && m_ip_addresses_isValid && true;
}

} // namespace OpenAPI
