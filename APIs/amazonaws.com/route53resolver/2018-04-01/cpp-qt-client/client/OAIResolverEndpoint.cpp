/**
 * Amazon Route 53 Resolver
 * <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.</p> <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p> <p> <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b> </p> <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for Amazon Web Services resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc\">How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally forward queries from a VPC to resolvers on your network</b> </p> <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network\">How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.</p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResolverEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResolverEndpoint::OAIResolverEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResolverEndpoint::OAIResolverEndpoint() {
    this->initializeModel();
}

OAIResolverEndpoint::~OAIResolverEndpoint() {}

void OAIResolverEndpoint::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_ip_address_count_isSet = false;
    m_ip_address_count_isValid = false;

    m_host_vpcid_isSet = false;
    m_host_vpcid_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_modification_time_isSet = false;
    m_modification_time_isValid = false;

    m_resolver_endpoint_type_isSet = false;
    m_resolver_endpoint_type_isValid = false;

    m_outpost_arn_isSet = false;
    m_outpost_arn_isValid = false;

    m_preferred_instance_type_isSet = false;
    m_preferred_instance_type_isValid = false;
}

void OAIResolverEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResolverEndpoint::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("Direction")]);
    m_direction_isSet = !json[QString("Direction")].isNull() && m_direction_isValid;

    m_ip_address_count_isValid = ::OpenAPI::fromJsonValue(m_ip_address_count, json[QString("IpAddressCount")]);
    m_ip_address_count_isSet = !json[QString("IpAddressCount")].isNull() && m_ip_address_count_isValid;

    m_host_vpcid_isValid = ::OpenAPI::fromJsonValue(m_host_vpcid, json[QString("HostVPCId")]);
    m_host_vpcid_isSet = !json[QString("HostVPCId")].isNull() && m_host_vpcid_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_modification_time_isValid = ::OpenAPI::fromJsonValue(m_modification_time, json[QString("ModificationTime")]);
    m_modification_time_isSet = !json[QString("ModificationTime")].isNull() && m_modification_time_isValid;

    m_resolver_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_resolver_endpoint_type, json[QString("ResolverEndpointType")]);
    m_resolver_endpoint_type_isSet = !json[QString("ResolverEndpointType")].isNull() && m_resolver_endpoint_type_isValid;

    m_outpost_arn_isValid = ::OpenAPI::fromJsonValue(m_outpost_arn, json[QString("OutpostArn")]);
    m_outpost_arn_isSet = !json[QString("OutpostArn")].isNull() && m_outpost_arn_isValid;

    m_preferred_instance_type_isValid = ::OpenAPI::fromJsonValue(m_preferred_instance_type, json[QString("PreferredInstanceType")]);
    m_preferred_instance_type_isSet = !json[QString("PreferredInstanceType")].isNull() && m_preferred_instance_type_isValid;
}

QString OAIResolverEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResolverEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("Direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_ip_address_count_isSet) {
        obj.insert(QString("IpAddressCount"), ::OpenAPI::toJsonValue(m_ip_address_count));
    }
    if (m_host_vpcid_isSet) {
        obj.insert(QString("HostVPCId"), ::OpenAPI::toJsonValue(m_host_vpcid));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_modification_time_isSet) {
        obj.insert(QString("ModificationTime"), ::OpenAPI::toJsonValue(m_modification_time));
    }
    if (m_resolver_endpoint_type.isSet()) {
        obj.insert(QString("ResolverEndpointType"), ::OpenAPI::toJsonValue(m_resolver_endpoint_type));
    }
    if (m_outpost_arn_isSet) {
        obj.insert(QString("OutpostArn"), ::OpenAPI::toJsonValue(m_outpost_arn));
    }
    if (m_preferred_instance_type_isSet) {
        obj.insert(QString("PreferredInstanceType"), ::OpenAPI::toJsonValue(m_preferred_instance_type));
    }
    return obj;
}

QString OAIResolverEndpoint::getId() const {
    return m_id;
}
void OAIResolverEndpoint::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResolverEndpoint::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResolverEndpoint::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResolverEndpoint::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAIResolverEndpoint::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAIResolverEndpoint::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAIResolverEndpoint::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

QString OAIResolverEndpoint::getArn() const {
    return m_arn;
}
void OAIResolverEndpoint::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIResolverEndpoint::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIResolverEndpoint::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIResolverEndpoint::getName() const {
    return m_name;
}
void OAIResolverEndpoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResolverEndpoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResolverEndpoint::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIResolverEndpoint::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIResolverEndpoint::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIResolverEndpoint::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIResolverEndpoint::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

OAIResolverEndpointDirection OAIResolverEndpoint::getDirection() const {
    return m_direction;
}
void OAIResolverEndpoint::setDirection(const OAIResolverEndpointDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIResolverEndpoint::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIResolverEndpoint::is_direction_Valid() const{
    return m_direction_isValid;
}

qint32 OAIResolverEndpoint::getIpAddressCount() const {
    return m_ip_address_count;
}
void OAIResolverEndpoint::setIpAddressCount(const qint32 &ip_address_count) {
    m_ip_address_count = ip_address_count;
    m_ip_address_count_isSet = true;
}

bool OAIResolverEndpoint::is_ip_address_count_Set() const{
    return m_ip_address_count_isSet;
}

bool OAIResolverEndpoint::is_ip_address_count_Valid() const{
    return m_ip_address_count_isValid;
}

QString OAIResolverEndpoint::getHostVpcid() const {
    return m_host_vpcid;
}
void OAIResolverEndpoint::setHostVpcid(const QString &host_vpcid) {
    m_host_vpcid = host_vpcid;
    m_host_vpcid_isSet = true;
}

bool OAIResolverEndpoint::is_host_vpcid_Set() const{
    return m_host_vpcid_isSet;
}

bool OAIResolverEndpoint::is_host_vpcid_Valid() const{
    return m_host_vpcid_isValid;
}

OAIResolverEndpointStatus OAIResolverEndpoint::getStatus() const {
    return m_status;
}
void OAIResolverEndpoint::setStatus(const OAIResolverEndpointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResolverEndpoint::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResolverEndpoint::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIResolverEndpoint::getStatusMessage() const {
    return m_status_message;
}
void OAIResolverEndpoint::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIResolverEndpoint::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIResolverEndpoint::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIResolverEndpoint::getCreationTime() const {
    return m_creation_time;
}
void OAIResolverEndpoint::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIResolverEndpoint::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIResolverEndpoint::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIResolverEndpoint::getModificationTime() const {
    return m_modification_time;
}
void OAIResolverEndpoint::setModificationTime(const QString &modification_time) {
    m_modification_time = modification_time;
    m_modification_time_isSet = true;
}

bool OAIResolverEndpoint::is_modification_time_Set() const{
    return m_modification_time_isSet;
}

bool OAIResolverEndpoint::is_modification_time_Valid() const{
    return m_modification_time_isValid;
}

OAIResolverEndpointType OAIResolverEndpoint::getResolverEndpointType() const {
    return m_resolver_endpoint_type;
}
void OAIResolverEndpoint::setResolverEndpointType(const OAIResolverEndpointType &resolver_endpoint_type) {
    m_resolver_endpoint_type = resolver_endpoint_type;
    m_resolver_endpoint_type_isSet = true;
}

bool OAIResolverEndpoint::is_resolver_endpoint_type_Set() const{
    return m_resolver_endpoint_type_isSet;
}

bool OAIResolverEndpoint::is_resolver_endpoint_type_Valid() const{
    return m_resolver_endpoint_type_isValid;
}

QString OAIResolverEndpoint::getOutpostArn() const {
    return m_outpost_arn;
}
void OAIResolverEndpoint::setOutpostArn(const QString &outpost_arn) {
    m_outpost_arn = outpost_arn;
    m_outpost_arn_isSet = true;
}

bool OAIResolverEndpoint::is_outpost_arn_Set() const{
    return m_outpost_arn_isSet;
}

bool OAIResolverEndpoint::is_outpost_arn_Valid() const{
    return m_outpost_arn_isValid;
}

QString OAIResolverEndpoint::getPreferredInstanceType() const {
    return m_preferred_instance_type;
}
void OAIResolverEndpoint::setPreferredInstanceType(const QString &preferred_instance_type) {
    m_preferred_instance_type = preferred_instance_type;
    m_preferred_instance_type_isSet = true;
}

bool OAIResolverEndpoint::is_preferred_instance_type_Set() const{
    return m_preferred_instance_type_isSet;
}

bool OAIResolverEndpoint::is_preferred_instance_type_Valid() const{
    return m_preferred_instance_type_isValid;
}

bool OAIResolverEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_vpcid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolver_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outpost_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResolverEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
