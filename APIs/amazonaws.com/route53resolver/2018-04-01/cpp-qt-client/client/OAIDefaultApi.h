/**
 * Amazon Route 53 Resolver
 * <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.</p> <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p> <p> <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b> </p> <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for Amazon Web Services resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc\">How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally forward queries from a VPC to resolvers on your network</b> </p> <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network\">How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.</p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociateFirewallRuleGroupRequest.h"
#include "OAIAssociateFirewallRuleGroupResponse.h"
#include "OAIAssociateResolverEndpointIpAddressRequest.h"
#include "OAIAssociateResolverEndpointIpAddressResponse.h"
#include "OAIAssociateResolverQueryLogConfigRequest.h"
#include "OAIAssociateResolverQueryLogConfigResponse.h"
#include "OAIAssociateResolverRuleRequest.h"
#include "OAIAssociateResolverRuleResponse.h"
#include "OAICreateFirewallDomainListRequest.h"
#include "OAICreateFirewallDomainListResponse.h"
#include "OAICreateFirewallRuleGroupRequest.h"
#include "OAICreateFirewallRuleGroupResponse.h"
#include "OAICreateFirewallRuleRequest.h"
#include "OAICreateFirewallRuleResponse.h"
#include "OAICreateOutpostResolverRequest.h"
#include "OAICreateOutpostResolverResponse.h"
#include "OAICreateResolverEndpointRequest.h"
#include "OAICreateResolverEndpointResponse.h"
#include "OAICreateResolverQueryLogConfigRequest.h"
#include "OAICreateResolverQueryLogConfigResponse.h"
#include "OAICreateResolverRuleRequest.h"
#include "OAICreateResolverRuleResponse.h"
#include "OAIDeleteFirewallDomainListRequest.h"
#include "OAIDeleteFirewallDomainListResponse.h"
#include "OAIDeleteFirewallRuleGroupRequest.h"
#include "OAIDeleteFirewallRuleGroupResponse.h"
#include "OAIDeleteFirewallRuleRequest.h"
#include "OAIDeleteFirewallRuleResponse.h"
#include "OAIDeleteOutpostResolverRequest.h"
#include "OAIDeleteOutpostResolverResponse.h"
#include "OAIDeleteResolverEndpointRequest.h"
#include "OAIDeleteResolverEndpointResponse.h"
#include "OAIDeleteResolverQueryLogConfigRequest.h"
#include "OAIDeleteResolverQueryLogConfigResponse.h"
#include "OAIDeleteResolverRuleRequest.h"
#include "OAIDeleteResolverRuleResponse.h"
#include "OAIDisassociateFirewallRuleGroupRequest.h"
#include "OAIDisassociateFirewallRuleGroupResponse.h"
#include "OAIDisassociateResolverEndpointIpAddressRequest.h"
#include "OAIDisassociateResolverEndpointIpAddressResponse.h"
#include "OAIDisassociateResolverQueryLogConfigRequest.h"
#include "OAIDisassociateResolverQueryLogConfigResponse.h"
#include "OAIDisassociateResolverRuleRequest.h"
#include "OAIDisassociateResolverRuleResponse.h"
#include "OAIGetFirewallConfigRequest.h"
#include "OAIGetFirewallConfigResponse.h"
#include "OAIGetFirewallDomainListRequest.h"
#include "OAIGetFirewallDomainListResponse.h"
#include "OAIGetFirewallRuleGroupAssociationRequest.h"
#include "OAIGetFirewallRuleGroupAssociationResponse.h"
#include "OAIGetFirewallRuleGroupPolicyRequest.h"
#include "OAIGetFirewallRuleGroupPolicyResponse.h"
#include "OAIGetFirewallRuleGroupRequest.h"
#include "OAIGetFirewallRuleGroupResponse.h"
#include "OAIGetOutpostResolverRequest.h"
#include "OAIGetOutpostResolverResponse.h"
#include "OAIGetResolverConfigRequest.h"
#include "OAIGetResolverConfigResponse.h"
#include "OAIGetResolverDnssecConfigRequest.h"
#include "OAIGetResolverDnssecConfigResponse.h"
#include "OAIGetResolverEndpointRequest.h"
#include "OAIGetResolverEndpointResponse.h"
#include "OAIGetResolverQueryLogConfigAssociationRequest.h"
#include "OAIGetResolverQueryLogConfigAssociationResponse.h"
#include "OAIGetResolverQueryLogConfigPolicyRequest.h"
#include "OAIGetResolverQueryLogConfigPolicyResponse.h"
#include "OAIGetResolverQueryLogConfigRequest.h"
#include "OAIGetResolverQueryLogConfigResponse.h"
#include "OAIGetResolverRuleAssociationRequest.h"
#include "OAIGetResolverRuleAssociationResponse.h"
#include "OAIGetResolverRulePolicyRequest.h"
#include "OAIGetResolverRulePolicyResponse.h"
#include "OAIGetResolverRuleRequest.h"
#include "OAIGetResolverRuleResponse.h"
#include "OAIImportFirewallDomainsRequest.h"
#include "OAIImportFirewallDomainsResponse.h"
#include "OAIListFirewallConfigsRequest.h"
#include "OAIListFirewallConfigsResponse.h"
#include "OAIListFirewallDomainListsRequest.h"
#include "OAIListFirewallDomainListsResponse.h"
#include "OAIListFirewallDomainsRequest.h"
#include "OAIListFirewallDomainsResponse.h"
#include "OAIListFirewallRuleGroupAssociationsRequest.h"
#include "OAIListFirewallRuleGroupAssociationsResponse.h"
#include "OAIListFirewallRuleGroupsRequest.h"
#include "OAIListFirewallRuleGroupsResponse.h"
#include "OAIListFirewallRulesRequest.h"
#include "OAIListFirewallRulesResponse.h"
#include "OAIListOutpostResolversRequest.h"
#include "OAIListOutpostResolversResponse.h"
#include "OAIListResolverConfigsRequest.h"
#include "OAIListResolverConfigsResponse.h"
#include "OAIListResolverDnssecConfigsRequest.h"
#include "OAIListResolverDnssecConfigsResponse.h"
#include "OAIListResolverEndpointIpAddressesRequest.h"
#include "OAIListResolverEndpointIpAddressesResponse.h"
#include "OAIListResolverEndpointsRequest.h"
#include "OAIListResolverEndpointsResponse.h"
#include "OAIListResolverQueryLogConfigAssociationsRequest.h"
#include "OAIListResolverQueryLogConfigAssociationsResponse.h"
#include "OAIListResolverQueryLogConfigsRequest.h"
#include "OAIListResolverQueryLogConfigsResponse.h"
#include "OAIListResolverRuleAssociationsRequest.h"
#include "OAIListResolverRuleAssociationsResponse.h"
#include "OAIListResolverRulesRequest.h"
#include "OAIListResolverRulesResponse.h"
#include "OAIListTagsForResourceRequest.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIObject.h"
#include "OAIPutFirewallRuleGroupPolicyRequest.h"
#include "OAIPutFirewallRuleGroupPolicyResponse.h"
#include "OAIPutResolverQueryLogConfigPolicyRequest.h"
#include "OAIPutResolverQueryLogConfigPolicyResponse.h"
#include "OAIPutResolverRulePolicyRequest.h"
#include "OAIPutResolverRulePolicyResponse.h"
#include "OAITagResourceRequest.h"
#include "OAIUntagResourceRequest.h"
#include "OAIUpdateFirewallConfigRequest.h"
#include "OAIUpdateFirewallConfigResponse.h"
#include "OAIUpdateFirewallDomainsRequest.h"
#include "OAIUpdateFirewallDomainsResponse.h"
#include "OAIUpdateFirewallRuleGroupAssociationRequest.h"
#include "OAIUpdateFirewallRuleGroupAssociationResponse.h"
#include "OAIUpdateFirewallRuleRequest.h"
#include "OAIUpdateFirewallRuleResponse.h"
#include "OAIUpdateOutpostResolverRequest.h"
#include "OAIUpdateOutpostResolverResponse.h"
#include "OAIUpdateResolverConfigRequest.h"
#include "OAIUpdateResolverConfigResponse.h"
#include "OAIUpdateResolverDnssecConfigRequest.h"
#include "OAIUpdateResolverDnssecConfigResponse.h"
#include "OAIUpdateResolverEndpointRequest.h"
#include "OAIUpdateResolverEndpointResponse.h"
#include "OAIUpdateResolverRuleRequest.h"
#include "OAIUpdateResolverRuleResponse.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_firewall_rule_group_request OAIAssociateFirewallRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateFirewallRuleGroup(const QString &x_amz_target, const OAIAssociateFirewallRuleGroupRequest &oai_associate_firewall_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_resolver_endpoint_ip_address_request OAIAssociateResolverEndpointIpAddressRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateResolverEndpointIpAddress(const QString &x_amz_target, const OAIAssociateResolverEndpointIpAddressRequest &oai_associate_resolver_endpoint_ip_address_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_resolver_query_log_config_request OAIAssociateResolverQueryLogConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateResolverQueryLogConfig(const QString &x_amz_target, const OAIAssociateResolverQueryLogConfigRequest &oai_associate_resolver_query_log_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_resolver_rule_request OAIAssociateResolverRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateResolverRule(const QString &x_amz_target, const OAIAssociateResolverRuleRequest &oai_associate_resolver_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_firewall_domain_list_request OAICreateFirewallDomainListRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFirewallDomainList(const QString &x_amz_target, const OAICreateFirewallDomainListRequest &oai_create_firewall_domain_list_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_firewall_rule_request OAICreateFirewallRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFirewallRule(const QString &x_amz_target, const OAICreateFirewallRuleRequest &oai_create_firewall_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_firewall_rule_group_request OAICreateFirewallRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createFirewallRuleGroup(const QString &x_amz_target, const OAICreateFirewallRuleGroupRequest &oai_create_firewall_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_outpost_resolver_request OAICreateOutpostResolverRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createOutpostResolver(const QString &x_amz_target, const OAICreateOutpostResolverRequest &oai_create_outpost_resolver_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_resolver_endpoint_request OAICreateResolverEndpointRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createResolverEndpoint(const QString &x_amz_target, const OAICreateResolverEndpointRequest &oai_create_resolver_endpoint_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_resolver_query_log_config_request OAICreateResolverQueryLogConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createResolverQueryLogConfig(const QString &x_amz_target, const OAICreateResolverQueryLogConfigRequest &oai_create_resolver_query_log_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_resolver_rule_request OAICreateResolverRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createResolverRule(const QString &x_amz_target, const OAICreateResolverRuleRequest &oai_create_resolver_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_firewall_domain_list_request OAIDeleteFirewallDomainListRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteFirewallDomainList(const QString &x_amz_target, const OAIDeleteFirewallDomainListRequest &oai_delete_firewall_domain_list_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_firewall_rule_request OAIDeleteFirewallRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteFirewallRule(const QString &x_amz_target, const OAIDeleteFirewallRuleRequest &oai_delete_firewall_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_firewall_rule_group_request OAIDeleteFirewallRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteFirewallRuleGroup(const QString &x_amz_target, const OAIDeleteFirewallRuleGroupRequest &oai_delete_firewall_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_outpost_resolver_request OAIDeleteOutpostResolverRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteOutpostResolver(const QString &x_amz_target, const OAIDeleteOutpostResolverRequest &oai_delete_outpost_resolver_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_resolver_endpoint_request OAIDeleteResolverEndpointRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteResolverEndpoint(const QString &x_amz_target, const OAIDeleteResolverEndpointRequest &oai_delete_resolver_endpoint_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_resolver_query_log_config_request OAIDeleteResolverQueryLogConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteResolverQueryLogConfig(const QString &x_amz_target, const OAIDeleteResolverQueryLogConfigRequest &oai_delete_resolver_query_log_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_resolver_rule_request OAIDeleteResolverRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteResolverRule(const QString &x_amz_target, const OAIDeleteResolverRuleRequest &oai_delete_resolver_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_firewall_rule_group_request OAIDisassociateFirewallRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateFirewallRuleGroup(const QString &x_amz_target, const OAIDisassociateFirewallRuleGroupRequest &oai_disassociate_firewall_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_resolver_endpoint_ip_address_request OAIDisassociateResolverEndpointIpAddressRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateResolverEndpointIpAddress(const QString &x_amz_target, const OAIDisassociateResolverEndpointIpAddressRequest &oai_disassociate_resolver_endpoint_ip_address_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_resolver_query_log_config_request OAIDisassociateResolverQueryLogConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateResolverQueryLogConfig(const QString &x_amz_target, const OAIDisassociateResolverQueryLogConfigRequest &oai_disassociate_resolver_query_log_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_resolver_rule_request OAIDisassociateResolverRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateResolverRule(const QString &x_amz_target, const OAIDisassociateResolverRuleRequest &oai_disassociate_resolver_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_firewall_config_request OAIGetFirewallConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFirewallConfig(const QString &x_amz_target, const OAIGetFirewallConfigRequest &oai_get_firewall_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_firewall_domain_list_request OAIGetFirewallDomainListRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFirewallDomainList(const QString &x_amz_target, const OAIGetFirewallDomainListRequest &oai_get_firewall_domain_list_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_firewall_rule_group_request OAIGetFirewallRuleGroupRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFirewallRuleGroup(const QString &x_amz_target, const OAIGetFirewallRuleGroupRequest &oai_get_firewall_rule_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_firewall_rule_group_association_request OAIGetFirewallRuleGroupAssociationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFirewallRuleGroupAssociation(const QString &x_amz_target, const OAIGetFirewallRuleGroupAssociationRequest &oai_get_firewall_rule_group_association_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_firewall_rule_group_policy_request OAIGetFirewallRuleGroupPolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getFirewallRuleGroupPolicy(const QString &x_amz_target, const OAIGetFirewallRuleGroupPolicyRequest &oai_get_firewall_rule_group_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_outpost_resolver_request OAIGetOutpostResolverRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getOutpostResolver(const QString &x_amz_target, const OAIGetOutpostResolverRequest &oai_get_outpost_resolver_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_config_request OAIGetResolverConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverConfig(const QString &x_amz_target, const OAIGetResolverConfigRequest &oai_get_resolver_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_dnssec_config_request OAIGetResolverDnssecConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverDnssecConfig(const QString &x_amz_target, const OAIGetResolverDnssecConfigRequest &oai_get_resolver_dnssec_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_endpoint_request OAIGetResolverEndpointRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverEndpoint(const QString &x_amz_target, const OAIGetResolverEndpointRequest &oai_get_resolver_endpoint_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_query_log_config_request OAIGetResolverQueryLogConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverQueryLogConfig(const QString &x_amz_target, const OAIGetResolverQueryLogConfigRequest &oai_get_resolver_query_log_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_query_log_config_association_request OAIGetResolverQueryLogConfigAssociationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverQueryLogConfigAssociation(const QString &x_amz_target, const OAIGetResolverQueryLogConfigAssociationRequest &oai_get_resolver_query_log_config_association_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_query_log_config_policy_request OAIGetResolverQueryLogConfigPolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverQueryLogConfigPolicy(const QString &x_amz_target, const OAIGetResolverQueryLogConfigPolicyRequest &oai_get_resolver_query_log_config_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_rule_request OAIGetResolverRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverRule(const QString &x_amz_target, const OAIGetResolverRuleRequest &oai_get_resolver_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_rule_association_request OAIGetResolverRuleAssociationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverRuleAssociation(const QString &x_amz_target, const OAIGetResolverRuleAssociationRequest &oai_get_resolver_rule_association_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_resolver_rule_policy_request OAIGetResolverRulePolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getResolverRulePolicy(const QString &x_amz_target, const OAIGetResolverRulePolicyRequest &oai_get_resolver_rule_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_import_firewall_domains_request OAIImportFirewallDomainsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void importFirewallDomains(const QString &x_amz_target, const OAIImportFirewallDomainsRequest &oai_import_firewall_domains_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_firewall_configs_request OAIListFirewallConfigsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listFirewallConfigs(const QString &x_amz_target, const OAIListFirewallConfigsRequest &oai_list_firewall_configs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_firewall_domain_lists_request OAIListFirewallDomainListsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listFirewallDomainLists(const QString &x_amz_target, const OAIListFirewallDomainListsRequest &oai_list_firewall_domain_lists_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_firewall_domains_request OAIListFirewallDomainsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listFirewallDomains(const QString &x_amz_target, const OAIListFirewallDomainsRequest &oai_list_firewall_domains_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_firewall_rule_group_associations_request OAIListFirewallRuleGroupAssociationsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listFirewallRuleGroupAssociations(const QString &x_amz_target, const OAIListFirewallRuleGroupAssociationsRequest &oai_list_firewall_rule_group_associations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_firewall_rule_groups_request OAIListFirewallRuleGroupsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listFirewallRuleGroups(const QString &x_amz_target, const OAIListFirewallRuleGroupsRequest &oai_list_firewall_rule_groups_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_firewall_rules_request OAIListFirewallRulesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listFirewallRules(const QString &x_amz_target, const OAIListFirewallRulesRequest &oai_list_firewall_rules_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_outpost_resolvers_request OAIListOutpostResolversRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listOutpostResolvers(const QString &x_amz_target, const OAIListOutpostResolversRequest &oai_list_outpost_resolvers_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resolver_configs_request OAIListResolverConfigsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listResolverConfigs(const QString &x_amz_target, const OAIListResolverConfigsRequest &oai_list_resolver_configs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resolver_dnssec_configs_request OAIListResolverDnssecConfigsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listResolverDnssecConfigs(const QString &x_amz_target, const OAIListResolverDnssecConfigsRequest &oai_list_resolver_dnssec_configs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resolver_endpoint_ip_addresses_request OAIListResolverEndpointIpAddressesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listResolverEndpointIpAddresses(const QString &x_amz_target, const OAIListResolverEndpointIpAddressesRequest &oai_list_resolver_endpoint_ip_addresses_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resolver_endpoints_request OAIListResolverEndpointsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listResolverEndpoints(const QString &x_amz_target, const OAIListResolverEndpointsRequest &oai_list_resolver_endpoints_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resolver_query_log_config_associations_request OAIListResolverQueryLogConfigAssociationsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listResolverQueryLogConfigAssociations(const QString &x_amz_target, const OAIListResolverQueryLogConfigAssociationsRequest &oai_list_resolver_query_log_config_associations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resolver_query_log_configs_request OAIListResolverQueryLogConfigsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listResolverQueryLogConfigs(const QString &x_amz_target, const OAIListResolverQueryLogConfigsRequest &oai_list_resolver_query_log_configs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resolver_rule_associations_request OAIListResolverRuleAssociationsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listResolverRuleAssociations(const QString &x_amz_target, const OAIListResolverRuleAssociationsRequest &oai_list_resolver_rule_associations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_resolver_rules_request OAIListResolverRulesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listResolverRules(const QString &x_amz_target, const OAIListResolverRulesRequest &oai_list_resolver_rules_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tags_for_resource_request OAIListTagsForResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listTagsForResource(const QString &x_amz_target, const OAIListTagsForResourceRequest &oai_list_tags_for_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_put_firewall_rule_group_policy_request OAIPutFirewallRuleGroupPolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putFirewallRuleGroupPolicy(const QString &x_amz_target, const OAIPutFirewallRuleGroupPolicyRequest &oai_put_firewall_rule_group_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_put_resolver_query_log_config_policy_request OAIPutResolverQueryLogConfigPolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putResolverQueryLogConfigPolicy(const QString &x_amz_target, const OAIPutResolverQueryLogConfigPolicyRequest &oai_put_resolver_query_log_config_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_put_resolver_rule_policy_request OAIPutResolverRulePolicyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putResolverRulePolicy(const QString &x_amz_target, const OAIPutResolverRulePolicyRequest &oai_put_resolver_rule_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_tag_resource_request OAITagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &x_amz_target, const OAITagResourceRequest &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_untag_resource_request OAIUntagResourceRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &x_amz_target, const OAIUntagResourceRequest &oai_untag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_firewall_config_request OAIUpdateFirewallConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateFirewallConfig(const QString &x_amz_target, const OAIUpdateFirewallConfigRequest &oai_update_firewall_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_firewall_domains_request OAIUpdateFirewallDomainsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateFirewallDomains(const QString &x_amz_target, const OAIUpdateFirewallDomainsRequest &oai_update_firewall_domains_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_firewall_rule_request OAIUpdateFirewallRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateFirewallRule(const QString &x_amz_target, const OAIUpdateFirewallRuleRequest &oai_update_firewall_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_firewall_rule_group_association_request OAIUpdateFirewallRuleGroupAssociationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateFirewallRuleGroupAssociation(const QString &x_amz_target, const OAIUpdateFirewallRuleGroupAssociationRequest &oai_update_firewall_rule_group_association_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_outpost_resolver_request OAIUpdateOutpostResolverRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateOutpostResolver(const QString &x_amz_target, const OAIUpdateOutpostResolverRequest &oai_update_outpost_resolver_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_resolver_config_request OAIUpdateResolverConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateResolverConfig(const QString &x_amz_target, const OAIUpdateResolverConfigRequest &oai_update_resolver_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_resolver_dnssec_config_request OAIUpdateResolverDnssecConfigRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateResolverDnssecConfig(const QString &x_amz_target, const OAIUpdateResolverDnssecConfigRequest &oai_update_resolver_dnssec_config_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_resolver_endpoint_request OAIUpdateResolverEndpointRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateResolverEndpoint(const QString &x_amz_target, const OAIUpdateResolverEndpointRequest &oai_update_resolver_endpoint_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_resolver_rule_request OAIUpdateResolverRuleRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateResolverRule(const QString &x_amz_target, const OAIUpdateResolverRuleRequest &oai_update_resolver_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void associateFirewallRuleGroupCallback(OAIHttpRequestWorker *worker);
    void associateResolverEndpointIpAddressCallback(OAIHttpRequestWorker *worker);
    void associateResolverQueryLogConfigCallback(OAIHttpRequestWorker *worker);
    void associateResolverRuleCallback(OAIHttpRequestWorker *worker);
    void createFirewallDomainListCallback(OAIHttpRequestWorker *worker);
    void createFirewallRuleCallback(OAIHttpRequestWorker *worker);
    void createFirewallRuleGroupCallback(OAIHttpRequestWorker *worker);
    void createOutpostResolverCallback(OAIHttpRequestWorker *worker);
    void createResolverEndpointCallback(OAIHttpRequestWorker *worker);
    void createResolverQueryLogConfigCallback(OAIHttpRequestWorker *worker);
    void createResolverRuleCallback(OAIHttpRequestWorker *worker);
    void deleteFirewallDomainListCallback(OAIHttpRequestWorker *worker);
    void deleteFirewallRuleCallback(OAIHttpRequestWorker *worker);
    void deleteFirewallRuleGroupCallback(OAIHttpRequestWorker *worker);
    void deleteOutpostResolverCallback(OAIHttpRequestWorker *worker);
    void deleteResolverEndpointCallback(OAIHttpRequestWorker *worker);
    void deleteResolverQueryLogConfigCallback(OAIHttpRequestWorker *worker);
    void deleteResolverRuleCallback(OAIHttpRequestWorker *worker);
    void disassociateFirewallRuleGroupCallback(OAIHttpRequestWorker *worker);
    void disassociateResolverEndpointIpAddressCallback(OAIHttpRequestWorker *worker);
    void disassociateResolverQueryLogConfigCallback(OAIHttpRequestWorker *worker);
    void disassociateResolverRuleCallback(OAIHttpRequestWorker *worker);
    void getFirewallConfigCallback(OAIHttpRequestWorker *worker);
    void getFirewallDomainListCallback(OAIHttpRequestWorker *worker);
    void getFirewallRuleGroupCallback(OAIHttpRequestWorker *worker);
    void getFirewallRuleGroupAssociationCallback(OAIHttpRequestWorker *worker);
    void getFirewallRuleGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void getOutpostResolverCallback(OAIHttpRequestWorker *worker);
    void getResolverConfigCallback(OAIHttpRequestWorker *worker);
    void getResolverDnssecConfigCallback(OAIHttpRequestWorker *worker);
    void getResolverEndpointCallback(OAIHttpRequestWorker *worker);
    void getResolverQueryLogConfigCallback(OAIHttpRequestWorker *worker);
    void getResolverQueryLogConfigAssociationCallback(OAIHttpRequestWorker *worker);
    void getResolverQueryLogConfigPolicyCallback(OAIHttpRequestWorker *worker);
    void getResolverRuleCallback(OAIHttpRequestWorker *worker);
    void getResolverRuleAssociationCallback(OAIHttpRequestWorker *worker);
    void getResolverRulePolicyCallback(OAIHttpRequestWorker *worker);
    void importFirewallDomainsCallback(OAIHttpRequestWorker *worker);
    void listFirewallConfigsCallback(OAIHttpRequestWorker *worker);
    void listFirewallDomainListsCallback(OAIHttpRequestWorker *worker);
    void listFirewallDomainsCallback(OAIHttpRequestWorker *worker);
    void listFirewallRuleGroupAssociationsCallback(OAIHttpRequestWorker *worker);
    void listFirewallRuleGroupsCallback(OAIHttpRequestWorker *worker);
    void listFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void listOutpostResolversCallback(OAIHttpRequestWorker *worker);
    void listResolverConfigsCallback(OAIHttpRequestWorker *worker);
    void listResolverDnssecConfigsCallback(OAIHttpRequestWorker *worker);
    void listResolverEndpointIpAddressesCallback(OAIHttpRequestWorker *worker);
    void listResolverEndpointsCallback(OAIHttpRequestWorker *worker);
    void listResolverQueryLogConfigAssociationsCallback(OAIHttpRequestWorker *worker);
    void listResolverQueryLogConfigsCallback(OAIHttpRequestWorker *worker);
    void listResolverRuleAssociationsCallback(OAIHttpRequestWorker *worker);
    void listResolverRulesCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void putFirewallRuleGroupPolicyCallback(OAIHttpRequestWorker *worker);
    void putResolverQueryLogConfigPolicyCallback(OAIHttpRequestWorker *worker);
    void putResolverRulePolicyCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateFirewallConfigCallback(OAIHttpRequestWorker *worker);
    void updateFirewallDomainsCallback(OAIHttpRequestWorker *worker);
    void updateFirewallRuleCallback(OAIHttpRequestWorker *worker);
    void updateFirewallRuleGroupAssociationCallback(OAIHttpRequestWorker *worker);
    void updateOutpostResolverCallback(OAIHttpRequestWorker *worker);
    void updateResolverConfigCallback(OAIHttpRequestWorker *worker);
    void updateResolverDnssecConfigCallback(OAIHttpRequestWorker *worker);
    void updateResolverEndpointCallback(OAIHttpRequestWorker *worker);
    void updateResolverRuleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void associateFirewallRuleGroupSignal(OAIAssociateFirewallRuleGroupResponse summary);
    void associateResolverEndpointIpAddressSignal(OAIAssociateResolverEndpointIpAddressResponse summary);
    void associateResolverQueryLogConfigSignal(OAIAssociateResolverQueryLogConfigResponse summary);
    void associateResolverRuleSignal(OAIAssociateResolverRuleResponse summary);
    void createFirewallDomainListSignal(OAICreateFirewallDomainListResponse summary);
    void createFirewallRuleSignal(OAICreateFirewallRuleResponse summary);
    void createFirewallRuleGroupSignal(OAICreateFirewallRuleGroupResponse summary);
    void createOutpostResolverSignal(OAICreateOutpostResolverResponse summary);
    void createResolverEndpointSignal(OAICreateResolverEndpointResponse summary);
    void createResolverQueryLogConfigSignal(OAICreateResolverQueryLogConfigResponse summary);
    void createResolverRuleSignal(OAICreateResolverRuleResponse summary);
    void deleteFirewallDomainListSignal(OAIDeleteFirewallDomainListResponse summary);
    void deleteFirewallRuleSignal(OAIDeleteFirewallRuleResponse summary);
    void deleteFirewallRuleGroupSignal(OAIDeleteFirewallRuleGroupResponse summary);
    void deleteOutpostResolverSignal(OAIDeleteOutpostResolverResponse summary);
    void deleteResolverEndpointSignal(OAIDeleteResolverEndpointResponse summary);
    void deleteResolverQueryLogConfigSignal(OAIDeleteResolverQueryLogConfigResponse summary);
    void deleteResolverRuleSignal(OAIDeleteResolverRuleResponse summary);
    void disassociateFirewallRuleGroupSignal(OAIDisassociateFirewallRuleGroupResponse summary);
    void disassociateResolverEndpointIpAddressSignal(OAIDisassociateResolverEndpointIpAddressResponse summary);
    void disassociateResolverQueryLogConfigSignal(OAIDisassociateResolverQueryLogConfigResponse summary);
    void disassociateResolverRuleSignal(OAIDisassociateResolverRuleResponse summary);
    void getFirewallConfigSignal(OAIGetFirewallConfigResponse summary);
    void getFirewallDomainListSignal(OAIGetFirewallDomainListResponse summary);
    void getFirewallRuleGroupSignal(OAIGetFirewallRuleGroupResponse summary);
    void getFirewallRuleGroupAssociationSignal(OAIGetFirewallRuleGroupAssociationResponse summary);
    void getFirewallRuleGroupPolicySignal(OAIGetFirewallRuleGroupPolicyResponse summary);
    void getOutpostResolverSignal(OAIGetOutpostResolverResponse summary);
    void getResolverConfigSignal(OAIGetResolverConfigResponse summary);
    void getResolverDnssecConfigSignal(OAIGetResolverDnssecConfigResponse summary);
    void getResolverEndpointSignal(OAIGetResolverEndpointResponse summary);
    void getResolverQueryLogConfigSignal(OAIGetResolverQueryLogConfigResponse summary);
    void getResolverQueryLogConfigAssociationSignal(OAIGetResolverQueryLogConfigAssociationResponse summary);
    void getResolverQueryLogConfigPolicySignal(OAIGetResolverQueryLogConfigPolicyResponse summary);
    void getResolverRuleSignal(OAIGetResolverRuleResponse summary);
    void getResolverRuleAssociationSignal(OAIGetResolverRuleAssociationResponse summary);
    void getResolverRulePolicySignal(OAIGetResolverRulePolicyResponse summary);
    void importFirewallDomainsSignal(OAIImportFirewallDomainsResponse summary);
    void listFirewallConfigsSignal(OAIListFirewallConfigsResponse summary);
    void listFirewallDomainListsSignal(OAIListFirewallDomainListsResponse summary);
    void listFirewallDomainsSignal(OAIListFirewallDomainsResponse summary);
    void listFirewallRuleGroupAssociationsSignal(OAIListFirewallRuleGroupAssociationsResponse summary);
    void listFirewallRuleGroupsSignal(OAIListFirewallRuleGroupsResponse summary);
    void listFirewallRulesSignal(OAIListFirewallRulesResponse summary);
    void listOutpostResolversSignal(OAIListOutpostResolversResponse summary);
    void listResolverConfigsSignal(OAIListResolverConfigsResponse summary);
    void listResolverDnssecConfigsSignal(OAIListResolverDnssecConfigsResponse summary);
    void listResolverEndpointIpAddressesSignal(OAIListResolverEndpointIpAddressesResponse summary);
    void listResolverEndpointsSignal(OAIListResolverEndpointsResponse summary);
    void listResolverQueryLogConfigAssociationsSignal(OAIListResolverQueryLogConfigAssociationsResponse summary);
    void listResolverQueryLogConfigsSignal(OAIListResolverQueryLogConfigsResponse summary);
    void listResolverRuleAssociationsSignal(OAIListResolverRuleAssociationsResponse summary);
    void listResolverRulesSignal(OAIListResolverRulesResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void putFirewallRuleGroupPolicySignal(OAIPutFirewallRuleGroupPolicyResponse summary);
    void putResolverQueryLogConfigPolicySignal(OAIPutResolverQueryLogConfigPolicyResponse summary);
    void putResolverRulePolicySignal(OAIPutResolverRulePolicyResponse summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);
    void updateFirewallConfigSignal(OAIUpdateFirewallConfigResponse summary);
    void updateFirewallDomainsSignal(OAIUpdateFirewallDomainsResponse summary);
    void updateFirewallRuleSignal(OAIUpdateFirewallRuleResponse summary);
    void updateFirewallRuleGroupAssociationSignal(OAIUpdateFirewallRuleGroupAssociationResponse summary);
    void updateOutpostResolverSignal(OAIUpdateOutpostResolverResponse summary);
    void updateResolverConfigSignal(OAIUpdateResolverConfigResponse summary);
    void updateResolverDnssecConfigSignal(OAIUpdateResolverDnssecConfigResponse summary);
    void updateResolverEndpointSignal(OAIUpdateResolverEndpointResponse summary);
    void updateResolverRuleSignal(OAIUpdateResolverRuleResponse summary);


    void associateFirewallRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAIAssociateFirewallRuleGroupResponse summary);
    void associateResolverEndpointIpAddressSignalFull(OAIHttpRequestWorker *worker, OAIAssociateResolverEndpointIpAddressResponse summary);
    void associateResolverQueryLogConfigSignalFull(OAIHttpRequestWorker *worker, OAIAssociateResolverQueryLogConfigResponse summary);
    void associateResolverRuleSignalFull(OAIHttpRequestWorker *worker, OAIAssociateResolverRuleResponse summary);
    void createFirewallDomainListSignalFull(OAIHttpRequestWorker *worker, OAICreateFirewallDomainListResponse summary);
    void createFirewallRuleSignalFull(OAIHttpRequestWorker *worker, OAICreateFirewallRuleResponse summary);
    void createFirewallRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateFirewallRuleGroupResponse summary);
    void createOutpostResolverSignalFull(OAIHttpRequestWorker *worker, OAICreateOutpostResolverResponse summary);
    void createResolverEndpointSignalFull(OAIHttpRequestWorker *worker, OAICreateResolverEndpointResponse summary);
    void createResolverQueryLogConfigSignalFull(OAIHttpRequestWorker *worker, OAICreateResolverQueryLogConfigResponse summary);
    void createResolverRuleSignalFull(OAIHttpRequestWorker *worker, OAICreateResolverRuleResponse summary);
    void deleteFirewallDomainListSignalFull(OAIHttpRequestWorker *worker, OAIDeleteFirewallDomainListResponse summary);
    void deleteFirewallRuleSignalFull(OAIHttpRequestWorker *worker, OAIDeleteFirewallRuleResponse summary);
    void deleteFirewallRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAIDeleteFirewallRuleGroupResponse summary);
    void deleteOutpostResolverSignalFull(OAIHttpRequestWorker *worker, OAIDeleteOutpostResolverResponse summary);
    void deleteResolverEndpointSignalFull(OAIHttpRequestWorker *worker, OAIDeleteResolverEndpointResponse summary);
    void deleteResolverQueryLogConfigSignalFull(OAIHttpRequestWorker *worker, OAIDeleteResolverQueryLogConfigResponse summary);
    void deleteResolverRuleSignalFull(OAIHttpRequestWorker *worker, OAIDeleteResolverRuleResponse summary);
    void disassociateFirewallRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAIDisassociateFirewallRuleGroupResponse summary);
    void disassociateResolverEndpointIpAddressSignalFull(OAIHttpRequestWorker *worker, OAIDisassociateResolverEndpointIpAddressResponse summary);
    void disassociateResolverQueryLogConfigSignalFull(OAIHttpRequestWorker *worker, OAIDisassociateResolverQueryLogConfigResponse summary);
    void disassociateResolverRuleSignalFull(OAIHttpRequestWorker *worker, OAIDisassociateResolverRuleResponse summary);
    void getFirewallConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetFirewallConfigResponse summary);
    void getFirewallDomainListSignalFull(OAIHttpRequestWorker *worker, OAIGetFirewallDomainListResponse summary);
    void getFirewallRuleGroupSignalFull(OAIHttpRequestWorker *worker, OAIGetFirewallRuleGroupResponse summary);
    void getFirewallRuleGroupAssociationSignalFull(OAIHttpRequestWorker *worker, OAIGetFirewallRuleGroupAssociationResponse summary);
    void getFirewallRuleGroupPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetFirewallRuleGroupPolicyResponse summary);
    void getOutpostResolverSignalFull(OAIHttpRequestWorker *worker, OAIGetOutpostResolverResponse summary);
    void getResolverConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetResolverConfigResponse summary);
    void getResolverDnssecConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetResolverDnssecConfigResponse summary);
    void getResolverEndpointSignalFull(OAIHttpRequestWorker *worker, OAIGetResolverEndpointResponse summary);
    void getResolverQueryLogConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetResolverQueryLogConfigResponse summary);
    void getResolverQueryLogConfigAssociationSignalFull(OAIHttpRequestWorker *worker, OAIGetResolverQueryLogConfigAssociationResponse summary);
    void getResolverQueryLogConfigPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetResolverQueryLogConfigPolicyResponse summary);
    void getResolverRuleSignalFull(OAIHttpRequestWorker *worker, OAIGetResolverRuleResponse summary);
    void getResolverRuleAssociationSignalFull(OAIHttpRequestWorker *worker, OAIGetResolverRuleAssociationResponse summary);
    void getResolverRulePolicySignalFull(OAIHttpRequestWorker *worker, OAIGetResolverRulePolicyResponse summary);
    void importFirewallDomainsSignalFull(OAIHttpRequestWorker *worker, OAIImportFirewallDomainsResponse summary);
    void listFirewallConfigsSignalFull(OAIHttpRequestWorker *worker, OAIListFirewallConfigsResponse summary);
    void listFirewallDomainListsSignalFull(OAIHttpRequestWorker *worker, OAIListFirewallDomainListsResponse summary);
    void listFirewallDomainsSignalFull(OAIHttpRequestWorker *worker, OAIListFirewallDomainsResponse summary);
    void listFirewallRuleGroupAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIListFirewallRuleGroupAssociationsResponse summary);
    void listFirewallRuleGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListFirewallRuleGroupsResponse summary);
    void listFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIListFirewallRulesResponse summary);
    void listOutpostResolversSignalFull(OAIHttpRequestWorker *worker, OAIListOutpostResolversResponse summary);
    void listResolverConfigsSignalFull(OAIHttpRequestWorker *worker, OAIListResolverConfigsResponse summary);
    void listResolverDnssecConfigsSignalFull(OAIHttpRequestWorker *worker, OAIListResolverDnssecConfigsResponse summary);
    void listResolverEndpointIpAddressesSignalFull(OAIHttpRequestWorker *worker, OAIListResolverEndpointIpAddressesResponse summary);
    void listResolverEndpointsSignalFull(OAIHttpRequestWorker *worker, OAIListResolverEndpointsResponse summary);
    void listResolverQueryLogConfigAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIListResolverQueryLogConfigAssociationsResponse summary);
    void listResolverQueryLogConfigsSignalFull(OAIHttpRequestWorker *worker, OAIListResolverQueryLogConfigsResponse summary);
    void listResolverRuleAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIListResolverRuleAssociationsResponse summary);
    void listResolverRulesSignalFull(OAIHttpRequestWorker *worker, OAIListResolverRulesResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void putFirewallRuleGroupPolicySignalFull(OAIHttpRequestWorker *worker, OAIPutFirewallRuleGroupPolicyResponse summary);
    void putResolverQueryLogConfigPolicySignalFull(OAIHttpRequestWorker *worker, OAIPutResolverQueryLogConfigPolicyResponse summary);
    void putResolverRulePolicySignalFull(OAIHttpRequestWorker *worker, OAIPutResolverRulePolicyResponse summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateFirewallConfigSignalFull(OAIHttpRequestWorker *worker, OAIUpdateFirewallConfigResponse summary);
    void updateFirewallDomainsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateFirewallDomainsResponse summary);
    void updateFirewallRuleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateFirewallRuleResponse summary);
    void updateFirewallRuleGroupAssociationSignalFull(OAIHttpRequestWorker *worker, OAIUpdateFirewallRuleGroupAssociationResponse summary);
    void updateOutpostResolverSignalFull(OAIHttpRequestWorker *worker, OAIUpdateOutpostResolverResponse summary);
    void updateResolverConfigSignalFull(OAIHttpRequestWorker *worker, OAIUpdateResolverConfigResponse summary);
    void updateResolverDnssecConfigSignalFull(OAIHttpRequestWorker *worker, OAIUpdateResolverDnssecConfigResponse summary);
    void updateResolverEndpointSignalFull(OAIHttpRequestWorker *worker, OAIUpdateResolverEndpointResponse summary);
    void updateResolverRuleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateResolverRuleResponse summary);

    Q_DECL_DEPRECATED_X("Use associateFirewallRuleGroupSignalError() instead")
    void associateFirewallRuleGroupSignalE(OAIAssociateFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateFirewallRuleGroupSignalError(OAIAssociateFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateResolverEndpointIpAddressSignalError() instead")
    void associateResolverEndpointIpAddressSignalE(OAIAssociateResolverEndpointIpAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateResolverEndpointIpAddressSignalError(OAIAssociateResolverEndpointIpAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateResolverQueryLogConfigSignalError() instead")
    void associateResolverQueryLogConfigSignalE(OAIAssociateResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateResolverQueryLogConfigSignalError(OAIAssociateResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateResolverRuleSignalError() instead")
    void associateResolverRuleSignalE(OAIAssociateResolverRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateResolverRuleSignalError(OAIAssociateResolverRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFirewallDomainListSignalError() instead")
    void createFirewallDomainListSignalE(OAICreateFirewallDomainListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFirewallDomainListSignalError(OAICreateFirewallDomainListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFirewallRuleSignalError() instead")
    void createFirewallRuleSignalE(OAICreateFirewallRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFirewallRuleSignalError(OAICreateFirewallRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFirewallRuleGroupSignalError() instead")
    void createFirewallRuleGroupSignalE(OAICreateFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFirewallRuleGroupSignalError(OAICreateFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOutpostResolverSignalError() instead")
    void createOutpostResolverSignalE(OAICreateOutpostResolverResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOutpostResolverSignalError(OAICreateOutpostResolverResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createResolverEndpointSignalError() instead")
    void createResolverEndpointSignalE(OAICreateResolverEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createResolverEndpointSignalError(OAICreateResolverEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createResolverQueryLogConfigSignalError() instead")
    void createResolverQueryLogConfigSignalE(OAICreateResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createResolverQueryLogConfigSignalError(OAICreateResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createResolverRuleSignalError() instead")
    void createResolverRuleSignalE(OAICreateResolverRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createResolverRuleSignalError(OAICreateResolverRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFirewallDomainListSignalError() instead")
    void deleteFirewallDomainListSignalE(OAIDeleteFirewallDomainListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFirewallDomainListSignalError(OAIDeleteFirewallDomainListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFirewallRuleSignalError() instead")
    void deleteFirewallRuleSignalE(OAIDeleteFirewallRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFirewallRuleSignalError(OAIDeleteFirewallRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFirewallRuleGroupSignalError() instead")
    void deleteFirewallRuleGroupSignalE(OAIDeleteFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFirewallRuleGroupSignalError(OAIDeleteFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOutpostResolverSignalError() instead")
    void deleteOutpostResolverSignalE(OAIDeleteOutpostResolverResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOutpostResolverSignalError(OAIDeleteOutpostResolverResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResolverEndpointSignalError() instead")
    void deleteResolverEndpointSignalE(OAIDeleteResolverEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResolverEndpointSignalError(OAIDeleteResolverEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResolverQueryLogConfigSignalError() instead")
    void deleteResolverQueryLogConfigSignalE(OAIDeleteResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResolverQueryLogConfigSignalError(OAIDeleteResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResolverRuleSignalError() instead")
    void deleteResolverRuleSignalE(OAIDeleteResolverRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResolverRuleSignalError(OAIDeleteResolverRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateFirewallRuleGroupSignalError() instead")
    void disassociateFirewallRuleGroupSignalE(OAIDisassociateFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateFirewallRuleGroupSignalError(OAIDisassociateFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateResolverEndpointIpAddressSignalError() instead")
    void disassociateResolverEndpointIpAddressSignalE(OAIDisassociateResolverEndpointIpAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateResolverEndpointIpAddressSignalError(OAIDisassociateResolverEndpointIpAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateResolverQueryLogConfigSignalError() instead")
    void disassociateResolverQueryLogConfigSignalE(OAIDisassociateResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateResolverQueryLogConfigSignalError(OAIDisassociateResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateResolverRuleSignalError() instead")
    void disassociateResolverRuleSignalE(OAIDisassociateResolverRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateResolverRuleSignalError(OAIDisassociateResolverRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallConfigSignalError() instead")
    void getFirewallConfigSignalE(OAIGetFirewallConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallConfigSignalError(OAIGetFirewallConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallDomainListSignalError() instead")
    void getFirewallDomainListSignalE(OAIGetFirewallDomainListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallDomainListSignalError(OAIGetFirewallDomainListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallRuleGroupSignalError() instead")
    void getFirewallRuleGroupSignalE(OAIGetFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallRuleGroupSignalError(OAIGetFirewallRuleGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallRuleGroupAssociationSignalError() instead")
    void getFirewallRuleGroupAssociationSignalE(OAIGetFirewallRuleGroupAssociationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallRuleGroupAssociationSignalError(OAIGetFirewallRuleGroupAssociationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallRuleGroupPolicySignalError() instead")
    void getFirewallRuleGroupPolicySignalE(OAIGetFirewallRuleGroupPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallRuleGroupPolicySignalError(OAIGetFirewallRuleGroupPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutpostResolverSignalError() instead")
    void getOutpostResolverSignalE(OAIGetOutpostResolverResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutpostResolverSignalError(OAIGetOutpostResolverResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverConfigSignalError() instead")
    void getResolverConfigSignalE(OAIGetResolverConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverConfigSignalError(OAIGetResolverConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverDnssecConfigSignalError() instead")
    void getResolverDnssecConfigSignalE(OAIGetResolverDnssecConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverDnssecConfigSignalError(OAIGetResolverDnssecConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverEndpointSignalError() instead")
    void getResolverEndpointSignalE(OAIGetResolverEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverEndpointSignalError(OAIGetResolverEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverQueryLogConfigSignalError() instead")
    void getResolverQueryLogConfigSignalE(OAIGetResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverQueryLogConfigSignalError(OAIGetResolverQueryLogConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverQueryLogConfigAssociationSignalError() instead")
    void getResolverQueryLogConfigAssociationSignalE(OAIGetResolverQueryLogConfigAssociationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverQueryLogConfigAssociationSignalError(OAIGetResolverQueryLogConfigAssociationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverQueryLogConfigPolicySignalError() instead")
    void getResolverQueryLogConfigPolicySignalE(OAIGetResolverQueryLogConfigPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverQueryLogConfigPolicySignalError(OAIGetResolverQueryLogConfigPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverRuleSignalError() instead")
    void getResolverRuleSignalE(OAIGetResolverRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverRuleSignalError(OAIGetResolverRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverRuleAssociationSignalError() instead")
    void getResolverRuleAssociationSignalE(OAIGetResolverRuleAssociationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverRuleAssociationSignalError(OAIGetResolverRuleAssociationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverRulePolicySignalError() instead")
    void getResolverRulePolicySignalE(OAIGetResolverRulePolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverRulePolicySignalError(OAIGetResolverRulePolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importFirewallDomainsSignalError() instead")
    void importFirewallDomainsSignalE(OAIImportFirewallDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importFirewallDomainsSignalError(OAIImportFirewallDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallConfigsSignalError() instead")
    void listFirewallConfigsSignalE(OAIListFirewallConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallConfigsSignalError(OAIListFirewallConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallDomainListsSignalError() instead")
    void listFirewallDomainListsSignalE(OAIListFirewallDomainListsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallDomainListsSignalError(OAIListFirewallDomainListsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallDomainsSignalError() instead")
    void listFirewallDomainsSignalE(OAIListFirewallDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallDomainsSignalError(OAIListFirewallDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallRuleGroupAssociationsSignalError() instead")
    void listFirewallRuleGroupAssociationsSignalE(OAIListFirewallRuleGroupAssociationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallRuleGroupAssociationsSignalError(OAIListFirewallRuleGroupAssociationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallRuleGroupsSignalError() instead")
    void listFirewallRuleGroupsSignalE(OAIListFirewallRuleGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallRuleGroupsSignalError(OAIListFirewallRuleGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallRulesSignalError() instead")
    void listFirewallRulesSignalE(OAIListFirewallRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallRulesSignalError(OAIListFirewallRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOutpostResolversSignalError() instead")
    void listOutpostResolversSignalE(OAIListOutpostResolversResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOutpostResolversSignalError(OAIListOutpostResolversResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverConfigsSignalError() instead")
    void listResolverConfigsSignalE(OAIListResolverConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverConfigsSignalError(OAIListResolverConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverDnssecConfigsSignalError() instead")
    void listResolverDnssecConfigsSignalE(OAIListResolverDnssecConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverDnssecConfigsSignalError(OAIListResolverDnssecConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverEndpointIpAddressesSignalError() instead")
    void listResolverEndpointIpAddressesSignalE(OAIListResolverEndpointIpAddressesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverEndpointIpAddressesSignalError(OAIListResolverEndpointIpAddressesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverEndpointsSignalError() instead")
    void listResolverEndpointsSignalE(OAIListResolverEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverEndpointsSignalError(OAIListResolverEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverQueryLogConfigAssociationsSignalError() instead")
    void listResolverQueryLogConfigAssociationsSignalE(OAIListResolverQueryLogConfigAssociationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverQueryLogConfigAssociationsSignalError(OAIListResolverQueryLogConfigAssociationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverQueryLogConfigsSignalError() instead")
    void listResolverQueryLogConfigsSignalE(OAIListResolverQueryLogConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverQueryLogConfigsSignalError(OAIListResolverQueryLogConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverRuleAssociationsSignalError() instead")
    void listResolverRuleAssociationsSignalE(OAIListResolverRuleAssociationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverRuleAssociationsSignalError(OAIListResolverRuleAssociationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverRulesSignalError() instead")
    void listResolverRulesSignalE(OAIListResolverRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverRulesSignalError(OAIListResolverRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFirewallRuleGroupPolicySignalError() instead")
    void putFirewallRuleGroupPolicySignalE(OAIPutFirewallRuleGroupPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putFirewallRuleGroupPolicySignalError(OAIPutFirewallRuleGroupPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putResolverQueryLogConfigPolicySignalError() instead")
    void putResolverQueryLogConfigPolicySignalE(OAIPutResolverQueryLogConfigPolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putResolverQueryLogConfigPolicySignalError(OAIPutResolverQueryLogConfigPolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putResolverRulePolicySignalError() instead")
    void putResolverRulePolicySignalE(OAIPutResolverRulePolicyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putResolverRulePolicySignalError(OAIPutResolverRulePolicyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFirewallConfigSignalError() instead")
    void updateFirewallConfigSignalE(OAIUpdateFirewallConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFirewallConfigSignalError(OAIUpdateFirewallConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFirewallDomainsSignalError() instead")
    void updateFirewallDomainsSignalE(OAIUpdateFirewallDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFirewallDomainsSignalError(OAIUpdateFirewallDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFirewallRuleSignalError() instead")
    void updateFirewallRuleSignalE(OAIUpdateFirewallRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFirewallRuleSignalError(OAIUpdateFirewallRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFirewallRuleGroupAssociationSignalError() instead")
    void updateFirewallRuleGroupAssociationSignalE(OAIUpdateFirewallRuleGroupAssociationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFirewallRuleGroupAssociationSignalError(OAIUpdateFirewallRuleGroupAssociationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOutpostResolverSignalError() instead")
    void updateOutpostResolverSignalE(OAIUpdateOutpostResolverResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOutpostResolverSignalError(OAIUpdateOutpostResolverResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolverConfigSignalError() instead")
    void updateResolverConfigSignalE(OAIUpdateResolverConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolverConfigSignalError(OAIUpdateResolverConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolverDnssecConfigSignalError() instead")
    void updateResolverDnssecConfigSignalE(OAIUpdateResolverDnssecConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolverDnssecConfigSignalError(OAIUpdateResolverDnssecConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolverEndpointSignalError() instead")
    void updateResolverEndpointSignalE(OAIUpdateResolverEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolverEndpointSignalError(OAIUpdateResolverEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolverRuleSignalError() instead")
    void updateResolverRuleSignalE(OAIUpdateResolverRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolverRuleSignalError(OAIUpdateResolverRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use associateFirewallRuleGroupSignalErrorFull() instead")
    void associateFirewallRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateFirewallRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateResolverEndpointIpAddressSignalErrorFull() instead")
    void associateResolverEndpointIpAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateResolverEndpointIpAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateResolverQueryLogConfigSignalErrorFull() instead")
    void associateResolverQueryLogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateResolverQueryLogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateResolverRuleSignalErrorFull() instead")
    void associateResolverRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateResolverRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFirewallDomainListSignalErrorFull() instead")
    void createFirewallDomainListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFirewallDomainListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFirewallRuleSignalErrorFull() instead")
    void createFirewallRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFirewallRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFirewallRuleGroupSignalErrorFull() instead")
    void createFirewallRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFirewallRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOutpostResolverSignalErrorFull() instead")
    void createOutpostResolverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOutpostResolverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createResolverEndpointSignalErrorFull() instead")
    void createResolverEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createResolverEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createResolverQueryLogConfigSignalErrorFull() instead")
    void createResolverQueryLogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createResolverQueryLogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createResolverRuleSignalErrorFull() instead")
    void createResolverRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createResolverRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFirewallDomainListSignalErrorFull() instead")
    void deleteFirewallDomainListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFirewallDomainListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFirewallRuleSignalErrorFull() instead")
    void deleteFirewallRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFirewallRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFirewallRuleGroupSignalErrorFull() instead")
    void deleteFirewallRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFirewallRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteOutpostResolverSignalErrorFull() instead")
    void deleteOutpostResolverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOutpostResolverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResolverEndpointSignalErrorFull() instead")
    void deleteResolverEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResolverEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResolverQueryLogConfigSignalErrorFull() instead")
    void deleteResolverQueryLogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResolverQueryLogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteResolverRuleSignalErrorFull() instead")
    void deleteResolverRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResolverRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateFirewallRuleGroupSignalErrorFull() instead")
    void disassociateFirewallRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateFirewallRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateResolverEndpointIpAddressSignalErrorFull() instead")
    void disassociateResolverEndpointIpAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateResolverEndpointIpAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateResolverQueryLogConfigSignalErrorFull() instead")
    void disassociateResolverQueryLogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateResolverQueryLogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateResolverRuleSignalErrorFull() instead")
    void disassociateResolverRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateResolverRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallConfigSignalErrorFull() instead")
    void getFirewallConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallDomainListSignalErrorFull() instead")
    void getFirewallDomainListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallDomainListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallRuleGroupSignalErrorFull() instead")
    void getFirewallRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallRuleGroupAssociationSignalErrorFull() instead")
    void getFirewallRuleGroupAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallRuleGroupAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallRuleGroupPolicySignalErrorFull() instead")
    void getFirewallRuleGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallRuleGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOutpostResolverSignalErrorFull() instead")
    void getOutpostResolverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOutpostResolverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverConfigSignalErrorFull() instead")
    void getResolverConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverDnssecConfigSignalErrorFull() instead")
    void getResolverDnssecConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverDnssecConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverEndpointSignalErrorFull() instead")
    void getResolverEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverQueryLogConfigSignalErrorFull() instead")
    void getResolverQueryLogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverQueryLogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverQueryLogConfigAssociationSignalErrorFull() instead")
    void getResolverQueryLogConfigAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverQueryLogConfigAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverQueryLogConfigPolicySignalErrorFull() instead")
    void getResolverQueryLogConfigPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverQueryLogConfigPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverRuleSignalErrorFull() instead")
    void getResolverRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverRuleAssociationSignalErrorFull() instead")
    void getResolverRuleAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverRuleAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getResolverRulePolicySignalErrorFull() instead")
    void getResolverRulePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResolverRulePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importFirewallDomainsSignalErrorFull() instead")
    void importFirewallDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importFirewallDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallConfigsSignalErrorFull() instead")
    void listFirewallConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallDomainListsSignalErrorFull() instead")
    void listFirewallDomainListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallDomainListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallDomainsSignalErrorFull() instead")
    void listFirewallDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallRuleGroupAssociationsSignalErrorFull() instead")
    void listFirewallRuleGroupAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallRuleGroupAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallRuleGroupsSignalErrorFull() instead")
    void listFirewallRuleGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallRuleGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallRulesSignalErrorFull() instead")
    void listFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOutpostResolversSignalErrorFull() instead")
    void listOutpostResolversSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOutpostResolversSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverConfigsSignalErrorFull() instead")
    void listResolverConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverDnssecConfigsSignalErrorFull() instead")
    void listResolverDnssecConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverDnssecConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverEndpointIpAddressesSignalErrorFull() instead")
    void listResolverEndpointIpAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverEndpointIpAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverEndpointsSignalErrorFull() instead")
    void listResolverEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverQueryLogConfigAssociationsSignalErrorFull() instead")
    void listResolverQueryLogConfigAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverQueryLogConfigAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverQueryLogConfigsSignalErrorFull() instead")
    void listResolverQueryLogConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverQueryLogConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverRuleAssociationsSignalErrorFull() instead")
    void listResolverRuleAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverRuleAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listResolverRulesSignalErrorFull() instead")
    void listResolverRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResolverRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putFirewallRuleGroupPolicySignalErrorFull() instead")
    void putFirewallRuleGroupPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putFirewallRuleGroupPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putResolverQueryLogConfigPolicySignalErrorFull() instead")
    void putResolverQueryLogConfigPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putResolverQueryLogConfigPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putResolverRulePolicySignalErrorFull() instead")
    void putResolverRulePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putResolverRulePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFirewallConfigSignalErrorFull() instead")
    void updateFirewallConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFirewallConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFirewallDomainsSignalErrorFull() instead")
    void updateFirewallDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFirewallDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFirewallRuleSignalErrorFull() instead")
    void updateFirewallRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFirewallRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFirewallRuleGroupAssociationSignalErrorFull() instead")
    void updateFirewallRuleGroupAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFirewallRuleGroupAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOutpostResolverSignalErrorFull() instead")
    void updateOutpostResolverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOutpostResolverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolverConfigSignalErrorFull() instead")
    void updateResolverConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolverConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolverDnssecConfigSignalErrorFull() instead")
    void updateResolverDnssecConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolverDnssecConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolverEndpointSignalErrorFull() instead")
    void updateResolverEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolverEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateResolverRuleSignalErrorFull() instead")
    void updateResolverRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResolverRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
