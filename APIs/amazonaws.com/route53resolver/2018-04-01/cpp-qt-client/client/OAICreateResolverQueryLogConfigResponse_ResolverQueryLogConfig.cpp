/**
 * Amazon Route 53 Resolver
 * <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.</p> <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p> <p> <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b> </p> <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for Amazon Web Services resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc\">How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally forward queries from a VPC to resolvers on your network</b> </p> <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network\">How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.</p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig() {
    this->initializeModel();
}

OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::~OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig() {}

void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_share_status_isSet = false;
    m_share_status_isValid = false;

    m_association_count_isSet = false;
    m_association_count_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_destination_arn_isSet = false;
    m_destination_arn_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;
}

void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("OwnerId")]);
    m_owner_id_isSet = !json[QString("OwnerId")].isNull() && m_owner_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_share_status_isValid = ::OpenAPI::fromJsonValue(m_share_status, json[QString("ShareStatus")]);
    m_share_status_isSet = !json[QString("ShareStatus")].isNull() && m_share_status_isValid;

    m_association_count_isValid = ::OpenAPI::fromJsonValue(m_association_count, json[QString("AssociationCount")]);
    m_association_count_isSet = !json[QString("AssociationCount")].isNull() && m_association_count_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_arn, json[QString("DestinationArn")]);
    m_destination_arn_isSet = !json[QString("DestinationArn")].isNull() && m_destination_arn_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;
}

QString OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("OwnerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_share_status.isSet()) {
        obj.insert(QString("ShareStatus"), ::OpenAPI::toJsonValue(m_share_status));
    }
    if (m_association_count_isSet) {
        obj.insert(QString("AssociationCount"), ::OpenAPI::toJsonValue(m_association_count));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_destination_arn_isSet) {
        obj.insert(QString("DestinationArn"), ::OpenAPI::toJsonValue(m_destination_arn));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    return obj;
}

QString OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getId() const {
    return m_id;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getOwnerId() const {
    return m_owner_id;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

OAIResolverQueryLogConfigStatus OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getStatus() const {
    return m_status;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setStatus(const OAIResolverQueryLogConfigStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_status_Valid() const{
    return m_status_isValid;
}

OAIShareStatus OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getShareStatus() const {
    return m_share_status;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setShareStatus(const OAIShareStatus &share_status) {
    m_share_status = share_status;
    m_share_status_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_share_status_Set() const{
    return m_share_status_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_share_status_Valid() const{
    return m_share_status_isValid;
}

qint32 OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getAssociationCount() const {
    return m_association_count;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setAssociationCount(const qint32 &association_count) {
    m_association_count = association_count;
    m_association_count_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_association_count_Set() const{
    return m_association_count_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_association_count_Valid() const{
    return m_association_count_isValid;
}

QString OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getArn() const {
    return m_arn;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getName() const {
    return m_name;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getDestinationArn() const {
    return m_destination_arn;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setDestinationArn(const QString &destination_arn) {
    m_destination_arn = destination_arn;
    m_destination_arn_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_destination_arn_Set() const{
    return m_destination_arn_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_destination_arn_Valid() const{
    return m_destination_arn_isValid;
}

QString OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

QString OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::getCreationTime() const {
    return m_creation_time;
}
void OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResolverQueryLogConfigResponse_ResolverQueryLogConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
