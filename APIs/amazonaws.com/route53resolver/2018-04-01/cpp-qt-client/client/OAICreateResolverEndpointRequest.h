/**
 * Amazon Route 53 Resolver
 * <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.</p> <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p> <p> <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b> </p> <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for Amazon Web Services resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc\">How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally forward queries from a VPC to resolvers on your network</b> </p> <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network\">How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.</p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateResolverEndpointRequest.h
 *
 * 
 */

#ifndef OAICreateResolverEndpointRequest_H
#define OAICreateResolverEndpointRequest_H

#include <QJsonObject>

#include "OAIResolverEndpointDirection.h"
#include "OAIResolverEndpointType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateResolverEndpointRequest : public OAIObject {
public:
    OAICreateResolverEndpointRequest();
    OAICreateResolverEndpointRequest(QString json);
    ~OAICreateResolverEndpointRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreatorRequestId() const;
    void setCreatorRequestId(const QString &creator_request_id);
    bool is_creator_request_id_Set() const;
    bool is_creator_request_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getSecurityGroupIds() const;
    void setSecurityGroupIds(const QList &security_group_ids);
    bool is_security_group_ids_Set() const;
    bool is_security_group_ids_Valid() const;

    OAIResolverEndpointDirection getDirection() const;
    void setDirection(const OAIResolverEndpointDirection &direction);
    bool is_direction_Set() const;
    bool is_direction_Valid() const;

    QList getIpAddresses() const;
    void setIpAddresses(const QList &ip_addresses);
    bool is_ip_addresses_Set() const;
    bool is_ip_addresses_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIResolverEndpointType getResolverEndpointType() const;
    void setResolverEndpointType(const OAIResolverEndpointType &resolver_endpoint_type);
    bool is_resolver_endpoint_type_Set() const;
    bool is_resolver_endpoint_type_Valid() const;

    QString getOutpostArn() const;
    void setOutpostArn(const QString &outpost_arn);
    bool is_outpost_arn_Set() const;
    bool is_outpost_arn_Valid() const;

    QString getPreferredInstanceType() const;
    void setPreferredInstanceType(const QString &preferred_instance_type);
    bool is_preferred_instance_type_Set() const;
    bool is_preferred_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_creator_request_id;
    bool m_creator_request_id_isSet;
    bool m_creator_request_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_security_group_ids;
    bool m_security_group_ids_isSet;
    bool m_security_group_ids_isValid;

    OAIResolverEndpointDirection m_direction;
    bool m_direction_isSet;
    bool m_direction_isValid;

    QList m_ip_addresses;
    bool m_ip_addresses_isSet;
    bool m_ip_addresses_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIResolverEndpointType m_resolver_endpoint_type;
    bool m_resolver_endpoint_type_isSet;
    bool m_resolver_endpoint_type_isValid;

    QString m_outpost_arn;
    bool m_outpost_arn_isSet;
    bool m_outpost_arn_isValid;

    QString m_preferred_instance_type;
    bool m_preferred_instance_type_isSet;
    bool m_preferred_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateResolverEndpointRequest)

#endif // OAICreateResolverEndpointRequest_H
