/**
 * Amazon Route 53 Resolver
 * <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.</p> <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p> <p> <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b> </p> <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for Amazon Web Services resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc\">How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally forward queries from a VPC to resolvers on your network</b> </p> <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network\">How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.</p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateFirewallRuleGroupRequest from '../model/AssociateFirewallRuleGroupRequest';
import AssociateFirewallRuleGroupResponse from '../model/AssociateFirewallRuleGroupResponse';
import AssociateResolverEndpointIpAddressRequest from '../model/AssociateResolverEndpointIpAddressRequest';
import AssociateResolverEndpointIpAddressResponse from '../model/AssociateResolverEndpointIpAddressResponse';
import AssociateResolverQueryLogConfigRequest from '../model/AssociateResolverQueryLogConfigRequest';
import AssociateResolverQueryLogConfigResponse from '../model/AssociateResolverQueryLogConfigResponse';
import AssociateResolverRuleRequest from '../model/AssociateResolverRuleRequest';
import AssociateResolverRuleResponse from '../model/AssociateResolverRuleResponse';
import CreateFirewallDomainListRequest from '../model/CreateFirewallDomainListRequest';
import CreateFirewallDomainListResponse from '../model/CreateFirewallDomainListResponse';
import CreateFirewallRuleGroupRequest from '../model/CreateFirewallRuleGroupRequest';
import CreateFirewallRuleGroupResponse from '../model/CreateFirewallRuleGroupResponse';
import CreateFirewallRuleRequest from '../model/CreateFirewallRuleRequest';
import CreateFirewallRuleResponse from '../model/CreateFirewallRuleResponse';
import CreateOutpostResolverRequest from '../model/CreateOutpostResolverRequest';
import CreateOutpostResolverResponse from '../model/CreateOutpostResolverResponse';
import CreateResolverEndpointRequest from '../model/CreateResolverEndpointRequest';
import CreateResolverEndpointResponse from '../model/CreateResolverEndpointResponse';
import CreateResolverQueryLogConfigRequest from '../model/CreateResolverQueryLogConfigRequest';
import CreateResolverQueryLogConfigResponse from '../model/CreateResolverQueryLogConfigResponse';
import CreateResolverRuleRequest from '../model/CreateResolverRuleRequest';
import CreateResolverRuleResponse from '../model/CreateResolverRuleResponse';
import DeleteFirewallDomainListRequest from '../model/DeleteFirewallDomainListRequest';
import DeleteFirewallDomainListResponse from '../model/DeleteFirewallDomainListResponse';
import DeleteFirewallRuleGroupRequest from '../model/DeleteFirewallRuleGroupRequest';
import DeleteFirewallRuleGroupResponse from '../model/DeleteFirewallRuleGroupResponse';
import DeleteFirewallRuleRequest from '../model/DeleteFirewallRuleRequest';
import DeleteFirewallRuleResponse from '../model/DeleteFirewallRuleResponse';
import DeleteOutpostResolverRequest from '../model/DeleteOutpostResolverRequest';
import DeleteOutpostResolverResponse from '../model/DeleteOutpostResolverResponse';
import DeleteResolverEndpointRequest from '../model/DeleteResolverEndpointRequest';
import DeleteResolverEndpointResponse from '../model/DeleteResolverEndpointResponse';
import DeleteResolverQueryLogConfigRequest from '../model/DeleteResolverQueryLogConfigRequest';
import DeleteResolverQueryLogConfigResponse from '../model/DeleteResolverQueryLogConfigResponse';
import DeleteResolverRuleRequest from '../model/DeleteResolverRuleRequest';
import DeleteResolverRuleResponse from '../model/DeleteResolverRuleResponse';
import DisassociateFirewallRuleGroupRequest from '../model/DisassociateFirewallRuleGroupRequest';
import DisassociateFirewallRuleGroupResponse from '../model/DisassociateFirewallRuleGroupResponse';
import DisassociateResolverEndpointIpAddressRequest from '../model/DisassociateResolverEndpointIpAddressRequest';
import DisassociateResolverEndpointIpAddressResponse from '../model/DisassociateResolverEndpointIpAddressResponse';
import DisassociateResolverQueryLogConfigRequest from '../model/DisassociateResolverQueryLogConfigRequest';
import DisassociateResolverQueryLogConfigResponse from '../model/DisassociateResolverQueryLogConfigResponse';
import DisassociateResolverRuleRequest from '../model/DisassociateResolverRuleRequest';
import DisassociateResolverRuleResponse from '../model/DisassociateResolverRuleResponse';
import GetFirewallConfigRequest from '../model/GetFirewallConfigRequest';
import GetFirewallConfigResponse from '../model/GetFirewallConfigResponse';
import GetFirewallDomainListRequest from '../model/GetFirewallDomainListRequest';
import GetFirewallDomainListResponse from '../model/GetFirewallDomainListResponse';
import GetFirewallRuleGroupAssociationRequest from '../model/GetFirewallRuleGroupAssociationRequest';
import GetFirewallRuleGroupAssociationResponse from '../model/GetFirewallRuleGroupAssociationResponse';
import GetFirewallRuleGroupPolicyRequest from '../model/GetFirewallRuleGroupPolicyRequest';
import GetFirewallRuleGroupPolicyResponse from '../model/GetFirewallRuleGroupPolicyResponse';
import GetFirewallRuleGroupRequest from '../model/GetFirewallRuleGroupRequest';
import GetFirewallRuleGroupResponse from '../model/GetFirewallRuleGroupResponse';
import GetOutpostResolverRequest from '../model/GetOutpostResolverRequest';
import GetOutpostResolverResponse from '../model/GetOutpostResolverResponse';
import GetResolverConfigRequest from '../model/GetResolverConfigRequest';
import GetResolverConfigResponse from '../model/GetResolverConfigResponse';
import GetResolverDnssecConfigRequest from '../model/GetResolverDnssecConfigRequest';
import GetResolverDnssecConfigResponse from '../model/GetResolverDnssecConfigResponse';
import GetResolverEndpointRequest from '../model/GetResolverEndpointRequest';
import GetResolverEndpointResponse from '../model/GetResolverEndpointResponse';
import GetResolverQueryLogConfigAssociationRequest from '../model/GetResolverQueryLogConfigAssociationRequest';
import GetResolverQueryLogConfigAssociationResponse from '../model/GetResolverQueryLogConfigAssociationResponse';
import GetResolverQueryLogConfigPolicyRequest from '../model/GetResolverQueryLogConfigPolicyRequest';
import GetResolverQueryLogConfigPolicyResponse from '../model/GetResolverQueryLogConfigPolicyResponse';
import GetResolverQueryLogConfigRequest from '../model/GetResolverQueryLogConfigRequest';
import GetResolverQueryLogConfigResponse from '../model/GetResolverQueryLogConfigResponse';
import GetResolverRuleAssociationRequest from '../model/GetResolverRuleAssociationRequest';
import GetResolverRuleAssociationResponse from '../model/GetResolverRuleAssociationResponse';
import GetResolverRulePolicyRequest from '../model/GetResolverRulePolicyRequest';
import GetResolverRulePolicyResponse from '../model/GetResolverRulePolicyResponse';
import GetResolverRuleRequest from '../model/GetResolverRuleRequest';
import GetResolverRuleResponse from '../model/GetResolverRuleResponse';
import ImportFirewallDomainsRequest from '../model/ImportFirewallDomainsRequest';
import ImportFirewallDomainsResponse from '../model/ImportFirewallDomainsResponse';
import ListFirewallConfigsRequest from '../model/ListFirewallConfigsRequest';
import ListFirewallConfigsResponse from '../model/ListFirewallConfigsResponse';
import ListFirewallDomainListsRequest from '../model/ListFirewallDomainListsRequest';
import ListFirewallDomainListsResponse from '../model/ListFirewallDomainListsResponse';
import ListFirewallDomainsRequest from '../model/ListFirewallDomainsRequest';
import ListFirewallDomainsResponse from '../model/ListFirewallDomainsResponse';
import ListFirewallRuleGroupAssociationsRequest from '../model/ListFirewallRuleGroupAssociationsRequest';
import ListFirewallRuleGroupAssociationsResponse from '../model/ListFirewallRuleGroupAssociationsResponse';
import ListFirewallRuleGroupsRequest from '../model/ListFirewallRuleGroupsRequest';
import ListFirewallRuleGroupsResponse from '../model/ListFirewallRuleGroupsResponse';
import ListFirewallRulesRequest from '../model/ListFirewallRulesRequest';
import ListFirewallRulesResponse from '../model/ListFirewallRulesResponse';
import ListOutpostResolversRequest from '../model/ListOutpostResolversRequest';
import ListOutpostResolversResponse from '../model/ListOutpostResolversResponse';
import ListResolverConfigsRequest from '../model/ListResolverConfigsRequest';
import ListResolverConfigsResponse from '../model/ListResolverConfigsResponse';
import ListResolverDnssecConfigsRequest from '../model/ListResolverDnssecConfigsRequest';
import ListResolverDnssecConfigsResponse from '../model/ListResolverDnssecConfigsResponse';
import ListResolverEndpointIpAddressesRequest from '../model/ListResolverEndpointIpAddressesRequest';
import ListResolverEndpointIpAddressesResponse from '../model/ListResolverEndpointIpAddressesResponse';
import ListResolverEndpointsRequest from '../model/ListResolverEndpointsRequest';
import ListResolverEndpointsResponse from '../model/ListResolverEndpointsResponse';
import ListResolverQueryLogConfigAssociationsRequest from '../model/ListResolverQueryLogConfigAssociationsRequest';
import ListResolverQueryLogConfigAssociationsResponse from '../model/ListResolverQueryLogConfigAssociationsResponse';
import ListResolverQueryLogConfigsRequest from '../model/ListResolverQueryLogConfigsRequest';
import ListResolverQueryLogConfigsResponse from '../model/ListResolverQueryLogConfigsResponse';
import ListResolverRuleAssociationsRequest from '../model/ListResolverRuleAssociationsRequest';
import ListResolverRuleAssociationsResponse from '../model/ListResolverRuleAssociationsResponse';
import ListResolverRulesRequest from '../model/ListResolverRulesRequest';
import ListResolverRulesResponse from '../model/ListResolverRulesResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutFirewallRuleGroupPolicyRequest from '../model/PutFirewallRuleGroupPolicyRequest';
import PutFirewallRuleGroupPolicyResponse from '../model/PutFirewallRuleGroupPolicyResponse';
import PutResolverQueryLogConfigPolicyRequest from '../model/PutResolverQueryLogConfigPolicyRequest';
import PutResolverQueryLogConfigPolicyResponse from '../model/PutResolverQueryLogConfigPolicyResponse';
import PutResolverRulePolicyRequest from '../model/PutResolverRulePolicyRequest';
import PutResolverRulePolicyResponse from '../model/PutResolverRulePolicyResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateFirewallConfigRequest from '../model/UpdateFirewallConfigRequest';
import UpdateFirewallConfigResponse from '../model/UpdateFirewallConfigResponse';
import UpdateFirewallDomainsRequest from '../model/UpdateFirewallDomainsRequest';
import UpdateFirewallDomainsResponse from '../model/UpdateFirewallDomainsResponse';
import UpdateFirewallRuleGroupAssociationRequest from '../model/UpdateFirewallRuleGroupAssociationRequest';
import UpdateFirewallRuleGroupAssociationResponse from '../model/UpdateFirewallRuleGroupAssociationResponse';
import UpdateFirewallRuleRequest from '../model/UpdateFirewallRuleRequest';
import UpdateFirewallRuleResponse from '../model/UpdateFirewallRuleResponse';
import UpdateOutpostResolverRequest from '../model/UpdateOutpostResolverRequest';
import UpdateOutpostResolverResponse from '../model/UpdateOutpostResolverResponse';
import UpdateResolverConfigRequest from '../model/UpdateResolverConfigRequest';
import UpdateResolverConfigResponse from '../model/UpdateResolverConfigResponse';
import UpdateResolverDnssecConfigRequest from '../model/UpdateResolverDnssecConfigRequest';
import UpdateResolverDnssecConfigResponse from '../model/UpdateResolverDnssecConfigResponse';
import UpdateResolverEndpointRequest from '../model/UpdateResolverEndpointRequest';
import UpdateResolverEndpointResponse from '../model/UpdateResolverEndpointResponse';
import UpdateResolverRuleRequest from '../model/UpdateResolverRuleRequest';
import UpdateResolverRuleResponse from '../model/UpdateResolverRuleResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-04-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateFirewallRuleGroup operation.
     * @callback module:api/DefaultApi~associateFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateFirewallRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a <a>FirewallRuleGroup</a> with a VPC, to provide DNS filtering for the VPC. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateFirewallRuleGroupRequest} associateFirewallRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateFirewallRuleGroupResponse}
     */
    associateFirewallRuleGroup(xAmzTarget, associateFirewallRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateFirewallRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateFirewallRuleGroup");
      }
      // verify the required parameter 'associateFirewallRuleGroupRequest' is set
      if (associateFirewallRuleGroupRequest === undefined || associateFirewallRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'associateFirewallRuleGroupRequest' when calling associateFirewallRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateFirewallRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.AssociateFirewallRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateResolverEndpointIpAddress operation.
     * @callback module:api/DefaultApi~associateResolverEndpointIpAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateResolverEndpointIpAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds IP addresses to an inbound or an outbound Resolver endpoint. If you want to add more than one IP address, submit one <code>AssociateResolverEndpointIpAddress</code> request for each IP address.</p> <p>To remove an IP address from an endpoint, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverEndpointIpAddress.html\">DisassociateResolverEndpointIpAddress</a>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateResolverEndpointIpAddressRequest} associateResolverEndpointIpAddressRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateResolverEndpointIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateResolverEndpointIpAddressResponse}
     */
    associateResolverEndpointIpAddress(xAmzTarget, associateResolverEndpointIpAddressRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateResolverEndpointIpAddressRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateResolverEndpointIpAddress");
      }
      // verify the required parameter 'associateResolverEndpointIpAddressRequest' is set
      if (associateResolverEndpointIpAddressRequest === undefined || associateResolverEndpointIpAddressRequest === null) {
        throw new Error("Missing the required parameter 'associateResolverEndpointIpAddressRequest' when calling associateResolverEndpointIpAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateResolverEndpointIpAddressResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.AssociateResolverEndpointIpAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateResolverQueryLogConfig operation.
     * @callback module:api/DefaultApi~associateResolverQueryLogConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateResolverQueryLogConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associates an Amazon VPC with a specified query logging configuration. Route 53 Resolver logs DNS queries that originate in all of the Amazon VPCs that are associated with a specified query logging configuration. To associate more than one VPC with a configuration, submit one <code>AssociateResolverQueryLogConfig</code> request for each VPC.</p> <note> <p>The VPCs that you associate with a query logging configuration must be in the same Region as the configuration.</p> </note> <p>To remove a VPC from a query logging configuration, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html\">DisassociateResolverQueryLogConfig</a>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateResolverQueryLogConfigRequest} associateResolverQueryLogConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateResolverQueryLogConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateResolverQueryLogConfigResponse}
     */
    associateResolverQueryLogConfig(xAmzTarget, associateResolverQueryLogConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateResolverQueryLogConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateResolverQueryLogConfig");
      }
      // verify the required parameter 'associateResolverQueryLogConfigRequest' is set
      if (associateResolverQueryLogConfigRequest === undefined || associateResolverQueryLogConfigRequest === null) {
        throw new Error("Missing the required parameter 'associateResolverQueryLogConfigRequest' when calling associateResolverQueryLogConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateResolverQueryLogConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.AssociateResolverQueryLogConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateResolverRule operation.
     * @callback module:api/DefaultApi~associateResolverRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateResolverRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a Resolver rule with a VPC. When you associate a rule with a VPC, Resolver forwards all DNS queries for the domain name that is specified in the rule and that originate in the VPC. The queries are forwarded to the IP addresses for the DNS resolvers that are specified in the rule. For more information about rules, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html\">CreateResolverRule</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateResolverRuleRequest} associateResolverRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateResolverRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateResolverRuleResponse}
     */
    associateResolverRule(xAmzTarget, associateResolverRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateResolverRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateResolverRule");
      }
      // verify the required parameter 'associateResolverRuleRequest' is set
      if (associateResolverRuleRequest === undefined || associateResolverRuleRequest === null) {
        throw new Error("Missing the required parameter 'associateResolverRuleRequest' when calling associateResolverRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateResolverRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.AssociateResolverRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFirewallDomainList operation.
     * @callback module:api/DefaultApi~createFirewallDomainListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFirewallDomainListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an empty firewall domain list for use in DNS Firewall rules. You can populate the domains for the new list with a file, using <a>ImportFirewallDomains</a>, or with domain strings, using <a>UpdateFirewallDomains</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFirewallDomainListRequest} createFirewallDomainListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFirewallDomainListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFirewallDomainListResponse}
     */
    createFirewallDomainList(xAmzTarget, createFirewallDomainListRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFirewallDomainListRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFirewallDomainList");
      }
      // verify the required parameter 'createFirewallDomainListRequest' is set
      if (createFirewallDomainListRequest === undefined || createFirewallDomainListRequest === null) {
        throw new Error("Missing the required parameter 'createFirewallDomainListRequest' when calling createFirewallDomainList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFirewallDomainListResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.CreateFirewallDomainList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFirewallRule operation.
     * @callback module:api/DefaultApi~createFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFirewallRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a single DNS Firewall rule in the specified rule group, using the specified domain list.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFirewallRuleRequest} createFirewallRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFirewallRuleResponse}
     */
    createFirewallRule(xAmzTarget, createFirewallRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFirewallRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFirewallRule");
      }
      // verify the required parameter 'createFirewallRuleRequest' is set
      if (createFirewallRuleRequest === undefined || createFirewallRuleRequest === null) {
        throw new Error("Missing the required parameter 'createFirewallRuleRequest' when calling createFirewallRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFirewallRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.CreateFirewallRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFirewallRuleGroup operation.
     * @callback module:api/DefaultApi~createFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFirewallRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an empty DNS Firewall rule group for filtering DNS network traffic in a VPC. You can add rules to the new rule group by calling <a>CreateFirewallRule</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFirewallRuleGroupRequest} createFirewallRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFirewallRuleGroupResponse}
     */
    createFirewallRuleGroup(xAmzTarget, createFirewallRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFirewallRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFirewallRuleGroup");
      }
      // verify the required parameter 'createFirewallRuleGroupRequest' is set
      if (createFirewallRuleGroupRequest === undefined || createFirewallRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'createFirewallRuleGroupRequest' when calling createFirewallRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFirewallRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.CreateFirewallRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOutpostResolver operation.
     * @callback module:api/DefaultApi~createOutpostResolverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOutpostResolverResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Route 53 Resolver on an Outpost.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateOutpostResolverRequest} createOutpostResolverRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createOutpostResolverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOutpostResolverResponse}
     */
    createOutpostResolver(xAmzTarget, createOutpostResolverRequest, opts, callback) {
      opts = opts || {};
      let postBody = createOutpostResolverRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createOutpostResolver");
      }
      // verify the required parameter 'createOutpostResolverRequest' is set
      if (createOutpostResolverRequest === undefined || createOutpostResolverRequest === null) {
        throw new Error("Missing the required parameter 'createOutpostResolverRequest' when calling createOutpostResolver");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOutpostResolverResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.CreateOutpostResolver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResolverEndpoint operation.
     * @callback module:api/DefaultApi~createResolverEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResolverEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Resolver endpoint. There are two types of Resolver endpoints, inbound and outbound:</p> <ul> <li> <p>An <i>inbound Resolver endpoint</i> forwards DNS queries to the DNS service for a VPC from your network.</p> </li> <li> <p>An <i>outbound Resolver endpoint</i> forwards DNS queries from the DNS service for a VPC to your network.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateResolverEndpointRequest} createResolverEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createResolverEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResolverEndpointResponse}
     */
    createResolverEndpoint(xAmzTarget, createResolverEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = createResolverEndpointRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createResolverEndpoint");
      }
      // verify the required parameter 'createResolverEndpointRequest' is set
      if (createResolverEndpointRequest === undefined || createResolverEndpointRequest === null) {
        throw new Error("Missing the required parameter 'createResolverEndpointRequest' when calling createResolverEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResolverEndpointResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.CreateResolverEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResolverQueryLogConfig operation.
     * @callback module:api/DefaultApi~createResolverQueryLogConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResolverQueryLogConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a Resolver query logging configuration, which defines where you want Resolver to save DNS query logs that originate in your VPCs. Resolver can log queries only for VPCs that are in the same Region as the query logging configuration.</p> <p>To specify which VPCs you want to log queries for, you use <code>AssociateResolverQueryLogConfig</code>. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverQueryLogConfig.html\">AssociateResolverQueryLogConfig</a>. </p> <p>You can optionally use Resource Access Manager (RAM) to share a query logging configuration with other Amazon Web Services accounts. The other accounts can then associate VPCs with the configuration. The query logs that Resolver creates for a configuration include all DNS queries that originate in all VPCs that are associated with the configuration.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateResolverQueryLogConfigRequest} createResolverQueryLogConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createResolverQueryLogConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResolverQueryLogConfigResponse}
     */
    createResolverQueryLogConfig(xAmzTarget, createResolverQueryLogConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createResolverQueryLogConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createResolverQueryLogConfig");
      }
      // verify the required parameter 'createResolverQueryLogConfigRequest' is set
      if (createResolverQueryLogConfigRequest === undefined || createResolverQueryLogConfigRequest === null) {
        throw new Error("Missing the required parameter 'createResolverQueryLogConfigRequest' when calling createResolverQueryLogConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResolverQueryLogConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.CreateResolverQueryLogConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResolverRule operation.
     * @callback module:api/DefaultApi~createResolverRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResolverRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For DNS queries that originate in your VPCs, specifies which Resolver endpoint the queries pass through, one domain name that you want to forward to your network, and the IP addresses of the DNS resolvers in your network.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateResolverRuleRequest} createResolverRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createResolverRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResolverRuleResponse}
     */
    createResolverRule(xAmzTarget, createResolverRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createResolverRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createResolverRule");
      }
      // verify the required parameter 'createResolverRuleRequest' is set
      if (createResolverRuleRequest === undefined || createResolverRuleRequest === null) {
        throw new Error("Missing the required parameter 'createResolverRuleRequest' when calling createResolverRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResolverRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.CreateResolverRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFirewallDomainList operation.
     * @callback module:api/DefaultApi~deleteFirewallDomainListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFirewallDomainListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified domain list. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFirewallDomainListRequest} deleteFirewallDomainListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFirewallDomainListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFirewallDomainListResponse}
     */
    deleteFirewallDomainList(xAmzTarget, deleteFirewallDomainListRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFirewallDomainListRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFirewallDomainList");
      }
      // verify the required parameter 'deleteFirewallDomainListRequest' is set
      if (deleteFirewallDomainListRequest === undefined || deleteFirewallDomainListRequest === null) {
        throw new Error("Missing the required parameter 'deleteFirewallDomainListRequest' when calling deleteFirewallDomainList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteFirewallDomainListResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DeleteFirewallDomainList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFirewallRule operation.
     * @callback module:api/DefaultApi~deleteFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFirewallRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified firewall rule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFirewallRuleRequest} deleteFirewallRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFirewallRuleResponse}
     */
    deleteFirewallRule(xAmzTarget, deleteFirewallRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFirewallRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFirewallRule");
      }
      // verify the required parameter 'deleteFirewallRuleRequest' is set
      if (deleteFirewallRuleRequest === undefined || deleteFirewallRuleRequest === null) {
        throw new Error("Missing the required parameter 'deleteFirewallRuleRequest' when calling deleteFirewallRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteFirewallRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DeleteFirewallRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFirewallRuleGroup operation.
     * @callback module:api/DefaultApi~deleteFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFirewallRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified firewall rule group. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFirewallRuleGroupRequest} deleteFirewallRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFirewallRuleGroupResponse}
     */
    deleteFirewallRuleGroup(xAmzTarget, deleteFirewallRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFirewallRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFirewallRuleGroup");
      }
      // verify the required parameter 'deleteFirewallRuleGroupRequest' is set
      if (deleteFirewallRuleGroupRequest === undefined || deleteFirewallRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteFirewallRuleGroupRequest' when calling deleteFirewallRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteFirewallRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DeleteFirewallRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOutpostResolver operation.
     * @callback module:api/DefaultApi~deleteOutpostResolverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteOutpostResolverResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Resolver on the Outpost.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteOutpostResolverRequest} deleteOutpostResolverRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteOutpostResolverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteOutpostResolverResponse}
     */
    deleteOutpostResolver(xAmzTarget, deleteOutpostResolverRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteOutpostResolverRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteOutpostResolver");
      }
      // verify the required parameter 'deleteOutpostResolverRequest' is set
      if (deleteOutpostResolverRequest === undefined || deleteOutpostResolverRequest === null) {
        throw new Error("Missing the required parameter 'deleteOutpostResolverRequest' when calling deleteOutpostResolver");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteOutpostResolverResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DeleteOutpostResolver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResolverEndpoint operation.
     * @callback module:api/DefaultApi~deleteResolverEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResolverEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a Resolver endpoint. The effect of deleting a Resolver endpoint depends on whether it's an inbound or an outbound Resolver endpoint:</p> <ul> <li> <p> <b>Inbound</b>: DNS queries from your network are no longer routed to the DNS service for the specified VPC.</p> </li> <li> <p> <b>Outbound</b>: DNS queries from a VPC are no longer routed to your network.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteResolverEndpointRequest} deleteResolverEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResolverEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResolverEndpointResponse}
     */
    deleteResolverEndpoint(xAmzTarget, deleteResolverEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteResolverEndpointRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteResolverEndpoint");
      }
      // verify the required parameter 'deleteResolverEndpointRequest' is set
      if (deleteResolverEndpointRequest === undefined || deleteResolverEndpointRequest === null) {
        throw new Error("Missing the required parameter 'deleteResolverEndpointRequest' when calling deleteResolverEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteResolverEndpointResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DeleteResolverEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResolverQueryLogConfig operation.
     * @callback module:api/DefaultApi~deleteResolverQueryLogConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResolverQueryLogConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a query logging configuration. When you delete a configuration, Resolver stops logging DNS queries for all of the Amazon VPCs that are associated with the configuration. This also applies if the query logging configuration is shared with other Amazon Web Services accounts, and the other accounts have associated VPCs with the shared configuration.</p> <p>Before you can delete a query logging configuration, you must first disassociate all VPCs from the configuration. See <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html\">DisassociateResolverQueryLogConfig</a>.</p> <p>If you used Resource Access Manager (RAM) to share a query logging configuration with other accounts, you must stop sharing the configuration before you can delete a configuration. The accounts that you shared the configuration with can first disassociate VPCs that they associated with the configuration, but that's not necessary. If you stop sharing the configuration, those VPCs are automatically disassociated from the configuration.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteResolverQueryLogConfigRequest} deleteResolverQueryLogConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResolverQueryLogConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResolverQueryLogConfigResponse}
     */
    deleteResolverQueryLogConfig(xAmzTarget, deleteResolverQueryLogConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteResolverQueryLogConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteResolverQueryLogConfig");
      }
      // verify the required parameter 'deleteResolverQueryLogConfigRequest' is set
      if (deleteResolverQueryLogConfigRequest === undefined || deleteResolverQueryLogConfigRequest === null) {
        throw new Error("Missing the required parameter 'deleteResolverQueryLogConfigRequest' when calling deleteResolverQueryLogConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteResolverQueryLogConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DeleteResolverQueryLogConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResolverRule operation.
     * @callback module:api/DefaultApi~deleteResolverRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResolverRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Resolver rule. Before you can delete a Resolver rule, you must disassociate it from all the VPCs that you associated the Resolver rule with. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html\">DisassociateResolverRule</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteResolverRuleRequest} deleteResolverRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResolverRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResolverRuleResponse}
     */
    deleteResolverRule(xAmzTarget, deleteResolverRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteResolverRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteResolverRule");
      }
      // verify the required parameter 'deleteResolverRuleRequest' is set
      if (deleteResolverRuleRequest === undefined || deleteResolverRuleRequest === null) {
        throw new Error("Missing the required parameter 'deleteResolverRuleRequest' when calling deleteResolverRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteResolverRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DeleteResolverRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateFirewallRuleGroup operation.
     * @callback module:api/DefaultApi~disassociateFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateFirewallRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a <a>FirewallRuleGroup</a> from a VPC, to remove DNS filtering from the VPC. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateFirewallRuleGroupRequest} disassociateFirewallRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateFirewallRuleGroupResponse}
     */
    disassociateFirewallRuleGroup(xAmzTarget, disassociateFirewallRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateFirewallRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateFirewallRuleGroup");
      }
      // verify the required parameter 'disassociateFirewallRuleGroupRequest' is set
      if (disassociateFirewallRuleGroupRequest === undefined || disassociateFirewallRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'disassociateFirewallRuleGroupRequest' when calling disassociateFirewallRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateFirewallRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DisassociateFirewallRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateResolverEndpointIpAddress operation.
     * @callback module:api/DefaultApi~disassociateResolverEndpointIpAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateResolverEndpointIpAddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes IP addresses from an inbound or an outbound Resolver endpoint. If you want to remove more than one IP address, submit one <code>DisassociateResolverEndpointIpAddress</code> request for each IP address.</p> <p>To add an IP address to an endpoint, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverEndpointIpAddress.html\">AssociateResolverEndpointIpAddress</a>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateResolverEndpointIpAddressRequest} disassociateResolverEndpointIpAddressRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateResolverEndpointIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateResolverEndpointIpAddressResponse}
     */
    disassociateResolverEndpointIpAddress(xAmzTarget, disassociateResolverEndpointIpAddressRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateResolverEndpointIpAddressRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateResolverEndpointIpAddress");
      }
      // verify the required parameter 'disassociateResolverEndpointIpAddressRequest' is set
      if (disassociateResolverEndpointIpAddressRequest === undefined || disassociateResolverEndpointIpAddressRequest === null) {
        throw new Error("Missing the required parameter 'disassociateResolverEndpointIpAddressRequest' when calling disassociateResolverEndpointIpAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateResolverEndpointIpAddressResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DisassociateResolverEndpointIpAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateResolverQueryLogConfig operation.
     * @callback module:api/DefaultApi~disassociateResolverQueryLogConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateResolverQueryLogConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociates a VPC from a query logging configuration.</p> <note> <p>Before you can delete a query logging configuration, you must first disassociate all VPCs from the configuration. If you used Resource Access Manager (RAM) to share a query logging configuration with other accounts, VPCs can be disassociated from the configuration in the following ways:</p> <ul> <li> <p>The accounts that you shared the configuration with can disassociate VPCs from the configuration.</p> </li> <li> <p>You can stop sharing the configuration.</p> </li> </ul> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateResolverQueryLogConfigRequest} disassociateResolverQueryLogConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateResolverQueryLogConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateResolverQueryLogConfigResponse}
     */
    disassociateResolverQueryLogConfig(xAmzTarget, disassociateResolverQueryLogConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateResolverQueryLogConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateResolverQueryLogConfig");
      }
      // verify the required parameter 'disassociateResolverQueryLogConfigRequest' is set
      if (disassociateResolverQueryLogConfigRequest === undefined || disassociateResolverQueryLogConfigRequest === null) {
        throw new Error("Missing the required parameter 'disassociateResolverQueryLogConfigRequest' when calling disassociateResolverQueryLogConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateResolverQueryLogConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DisassociateResolverQueryLogConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateResolverRule operation.
     * @callback module:api/DefaultApi~disassociateResolverRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateResolverRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the association between a specified Resolver rule and a specified VPC.</p> <important> <p>If you disassociate a Resolver rule from a VPC, Resolver stops forwarding DNS queries for the domain name that you specified in the Resolver rule. </p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateResolverRuleRequest} disassociateResolverRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateResolverRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateResolverRuleResponse}
     */
    disassociateResolverRule(xAmzTarget, disassociateResolverRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateResolverRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateResolverRule");
      }
      // verify the required parameter 'disassociateResolverRuleRequest' is set
      if (disassociateResolverRuleRequest === undefined || disassociateResolverRuleRequest === null) {
        throw new Error("Missing the required parameter 'disassociateResolverRuleRequest' when calling disassociateResolverRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateResolverRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.DisassociateResolverRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirewallConfig operation.
     * @callback module:api/DefaultApi~getFirewallConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFirewallConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC). 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetFirewallConfigRequest} getFirewallConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFirewallConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFirewallConfigResponse}
     */
    getFirewallConfig(xAmzTarget, getFirewallConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFirewallConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getFirewallConfig");
      }
      // verify the required parameter 'getFirewallConfigRequest' is set
      if (getFirewallConfigRequest === undefined || getFirewallConfigRequest === null) {
        throw new Error("Missing the required parameter 'getFirewallConfigRequest' when calling getFirewallConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFirewallConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetFirewallConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirewallDomainList operation.
     * @callback module:api/DefaultApi~getFirewallDomainListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFirewallDomainListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified firewall domain list.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetFirewallDomainListRequest} getFirewallDomainListRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFirewallDomainListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFirewallDomainListResponse}
     */
    getFirewallDomainList(xAmzTarget, getFirewallDomainListRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFirewallDomainListRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getFirewallDomainList");
      }
      // verify the required parameter 'getFirewallDomainListRequest' is set
      if (getFirewallDomainListRequest === undefined || getFirewallDomainListRequest === null) {
        throw new Error("Missing the required parameter 'getFirewallDomainListRequest' when calling getFirewallDomainList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFirewallDomainListResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetFirewallDomainList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirewallRuleGroup operation.
     * @callback module:api/DefaultApi~getFirewallRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFirewallRuleGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified firewall rule group. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetFirewallRuleGroupRequest} getFirewallRuleGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFirewallRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFirewallRuleGroupResponse}
     */
    getFirewallRuleGroup(xAmzTarget, getFirewallRuleGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFirewallRuleGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getFirewallRuleGroup");
      }
      // verify the required parameter 'getFirewallRuleGroupRequest' is set
      if (getFirewallRuleGroupRequest === undefined || getFirewallRuleGroupRequest === null) {
        throw new Error("Missing the required parameter 'getFirewallRuleGroupRequest' when calling getFirewallRuleGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFirewallRuleGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetFirewallRuleGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirewallRuleGroupAssociation operation.
     * @callback module:api/DefaultApi~getFirewallRuleGroupAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFirewallRuleGroupAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a firewall rule group association, which enables DNS filtering for a VPC with one rule group. A VPC can have more than one firewall rule group association, and a rule group can be associated with more than one VPC.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetFirewallRuleGroupAssociationRequest} getFirewallRuleGroupAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFirewallRuleGroupAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFirewallRuleGroupAssociationResponse}
     */
    getFirewallRuleGroupAssociation(xAmzTarget, getFirewallRuleGroupAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFirewallRuleGroupAssociationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getFirewallRuleGroupAssociation");
      }
      // verify the required parameter 'getFirewallRuleGroupAssociationRequest' is set
      if (getFirewallRuleGroupAssociationRequest === undefined || getFirewallRuleGroupAssociationRequest === null) {
        throw new Error("Missing the required parameter 'getFirewallRuleGroupAssociationRequest' when calling getFirewallRuleGroupAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFirewallRuleGroupAssociationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetFirewallRuleGroupAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirewallRuleGroupPolicy operation.
     * @callback module:api/DefaultApi~getFirewallRuleGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFirewallRuleGroupPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the Identity and Access Management (Amazon Web Services IAM) policy for sharing the specified rule group. You can use the policy to share the rule group using Resource Access Manager (RAM). 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetFirewallRuleGroupPolicyRequest} getFirewallRuleGroupPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFirewallRuleGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFirewallRuleGroupPolicyResponse}
     */
    getFirewallRuleGroupPolicy(xAmzTarget, getFirewallRuleGroupPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getFirewallRuleGroupPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getFirewallRuleGroupPolicy");
      }
      // verify the required parameter 'getFirewallRuleGroupPolicyRequest' is set
      if (getFirewallRuleGroupPolicyRequest === undefined || getFirewallRuleGroupPolicyRequest === null) {
        throw new Error("Missing the required parameter 'getFirewallRuleGroupPolicyRequest' when calling getFirewallRuleGroupPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetFirewallRuleGroupPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetFirewallRuleGroupPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutpostResolver operation.
     * @callback module:api/DefaultApi~getOutpostResolverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOutpostResolverResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified Resolver on the Outpost, such as its instance count and type, name, and the current status of the Resolver.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetOutpostResolverRequest} getOutpostResolverRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOutpostResolverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOutpostResolverResponse}
     */
    getOutpostResolver(xAmzTarget, getOutpostResolverRequest, opts, callback) {
      opts = opts || {};
      let postBody = getOutpostResolverRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getOutpostResolver");
      }
      // verify the required parameter 'getOutpostResolverRequest' is set
      if (getOutpostResolverRequest === undefined || getOutpostResolverRequest === null) {
        throw new Error("Missing the required parameter 'getOutpostResolverRequest' when calling getOutpostResolver");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOutpostResolverResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetOutpostResolver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverConfig operation.
     * @callback module:api/DefaultApi~getResolverConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the behavior configuration of Route 53 Resolver behavior for a single VPC from Amazon Virtual Private Cloud.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverConfigRequest} getResolverConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverConfigResponse}
     */
    getResolverConfig(xAmzTarget, getResolverConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverConfig");
      }
      // verify the required parameter 'getResolverConfigRequest' is set
      if (getResolverConfigRequest === undefined || getResolverConfigRequest === null) {
        throw new Error("Missing the required parameter 'getResolverConfigRequest' when calling getResolverConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverDnssecConfig operation.
     * @callback module:api/DefaultApi~getResolverDnssecConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverDnssecConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets DNSSEC validation information for a specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverDnssecConfigRequest} getResolverDnssecConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverDnssecConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverDnssecConfigResponse}
     */
    getResolverDnssecConfig(xAmzTarget, getResolverDnssecConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverDnssecConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverDnssecConfig");
      }
      // verify the required parameter 'getResolverDnssecConfigRequest' is set
      if (getResolverDnssecConfigRequest === undefined || getResolverDnssecConfigRequest === null) {
        throw new Error("Missing the required parameter 'getResolverDnssecConfigRequest' when calling getResolverDnssecConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverDnssecConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverDnssecConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverEndpoint operation.
     * @callback module:api/DefaultApi~getResolverEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified Resolver endpoint, such as whether it's an inbound or an outbound Resolver endpoint, and the current status of the endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverEndpointRequest} getResolverEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverEndpointResponse}
     */
    getResolverEndpoint(xAmzTarget, getResolverEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverEndpointRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverEndpoint");
      }
      // verify the required parameter 'getResolverEndpointRequest' is set
      if (getResolverEndpointRequest === undefined || getResolverEndpointRequest === null) {
        throw new Error("Missing the required parameter 'getResolverEndpointRequest' when calling getResolverEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverEndpointResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverQueryLogConfig operation.
     * @callback module:api/DefaultApi~getResolverQueryLogConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverQueryLogConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified Resolver query logging configuration, such as the number of VPCs that the configuration is logging queries for and the location that logs are sent to. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverQueryLogConfigRequest} getResolverQueryLogConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverQueryLogConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverQueryLogConfigResponse}
     */
    getResolverQueryLogConfig(xAmzTarget, getResolverQueryLogConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverQueryLogConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverQueryLogConfig");
      }
      // verify the required parameter 'getResolverQueryLogConfigRequest' is set
      if (getResolverQueryLogConfigRequest === undefined || getResolverQueryLogConfigRequest === null) {
        throw new Error("Missing the required parameter 'getResolverQueryLogConfigRequest' when calling getResolverQueryLogConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverQueryLogConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverQueryLogConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverQueryLogConfigAssociation operation.
     * @callback module:api/DefaultApi~getResolverQueryLogConfigAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverQueryLogConfigAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified association between a Resolver query logging configuration and an Amazon VPC. When you associate a VPC with a query logging configuration, Resolver logs DNS queries that originate in that VPC.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverQueryLogConfigAssociationRequest} getResolverQueryLogConfigAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverQueryLogConfigAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverQueryLogConfigAssociationResponse}
     */
    getResolverQueryLogConfigAssociation(xAmzTarget, getResolverQueryLogConfigAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverQueryLogConfigAssociationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverQueryLogConfigAssociation");
      }
      // verify the required parameter 'getResolverQueryLogConfigAssociationRequest' is set
      if (getResolverQueryLogConfigAssociationRequest === undefined || getResolverQueryLogConfigAssociationRequest === null) {
        throw new Error("Missing the required parameter 'getResolverQueryLogConfigAssociationRequest' when calling getResolverQueryLogConfigAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverQueryLogConfigAssociationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverQueryLogConfigAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverQueryLogConfigPolicy operation.
     * @callback module:api/DefaultApi~getResolverQueryLogConfigPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverQueryLogConfigPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a query logging policy. A query logging policy specifies the Resolver query logging operations and resources that you want to allow another Amazon Web Services account to be able to use.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverQueryLogConfigPolicyRequest} getResolverQueryLogConfigPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverQueryLogConfigPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverQueryLogConfigPolicyResponse}
     */
    getResolverQueryLogConfigPolicy(xAmzTarget, getResolverQueryLogConfigPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverQueryLogConfigPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverQueryLogConfigPolicy");
      }
      // verify the required parameter 'getResolverQueryLogConfigPolicyRequest' is set
      if (getResolverQueryLogConfigPolicyRequest === undefined || getResolverQueryLogConfigPolicyRequest === null) {
        throw new Error("Missing the required parameter 'getResolverQueryLogConfigPolicyRequest' when calling getResolverQueryLogConfigPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverQueryLogConfigPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverQueryLogConfigPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverRule operation.
     * @callback module:api/DefaultApi~getResolverRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified Resolver rule, such as the domain name that the rule forwards DNS queries for and the ID of the outbound Resolver endpoint that the rule is associated with.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverRuleRequest} getResolverRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverRuleResponse}
     */
    getResolverRule(xAmzTarget, getResolverRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverRule");
      }
      // verify the required parameter 'getResolverRuleRequest' is set
      if (getResolverRuleRequest === undefined || getResolverRuleRequest === null) {
        throw new Error("Missing the required parameter 'getResolverRuleRequest' when calling getResolverRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverRuleAssociation operation.
     * @callback module:api/DefaultApi~getResolverRuleAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverRuleAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an association between a specified Resolver rule and a VPC. You associate a Resolver rule and a VPC using <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html\">AssociateResolverRule</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverRuleAssociationRequest} getResolverRuleAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverRuleAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverRuleAssociationResponse}
     */
    getResolverRuleAssociation(xAmzTarget, getResolverRuleAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverRuleAssociationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverRuleAssociation");
      }
      // verify the required parameter 'getResolverRuleAssociationRequest' is set
      if (getResolverRuleAssociationRequest === undefined || getResolverRuleAssociationRequest === null) {
        throw new Error("Missing the required parameter 'getResolverRuleAssociationRequest' when calling getResolverRuleAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverRuleAssociationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverRuleAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResolverRulePolicy operation.
     * @callback module:api/DefaultApi~getResolverRulePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResolverRulePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the Resolver rule policy for a specified rule. A Resolver rule policy includes the rule that you want to share with another account, the account that you want to share the rule with, and the Resolver operations that you want to allow the account to use. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetResolverRulePolicyRequest} getResolverRulePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResolverRulePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResolverRulePolicyResponse}
     */
    getResolverRulePolicy(xAmzTarget, getResolverRulePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResolverRulePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getResolverRulePolicy");
      }
      // verify the required parameter 'getResolverRulePolicyRequest' is set
      if (getResolverRulePolicyRequest === undefined || getResolverRulePolicyRequest === null) {
        throw new Error("Missing the required parameter 'getResolverRulePolicyRequest' when calling getResolverRulePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResolverRulePolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.GetResolverRulePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importFirewallDomains operation.
     * @callback module:api/DefaultApi~importFirewallDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportFirewallDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Imports domain names from a file into a domain list, for use in a DNS firewall rule group. </p> <p>Each domain specification in your domain list must satisfy the following requirements: </p> <ul> <li> <p>It can optionally start with <code>*</code> (asterisk).</p> </li> <li> <p>With the exception of the optional starting asterisk, it must only contain the following characters: <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>-</code> (hyphen).</p> </li> <li> <p>It must be from 1-255 characters in length. </p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportFirewallDomainsRequest} importFirewallDomainsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importFirewallDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportFirewallDomainsResponse}
     */
    importFirewallDomains(xAmzTarget, importFirewallDomainsRequest, opts, callback) {
      opts = opts || {};
      let postBody = importFirewallDomainsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importFirewallDomains");
      }
      // verify the required parameter 'importFirewallDomainsRequest' is set
      if (importFirewallDomainsRequest === undefined || importFirewallDomainsRequest === null) {
        throw new Error("Missing the required parameter 'importFirewallDomainsRequest' when calling importFirewallDomains");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportFirewallDomainsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ImportFirewallDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewallConfigs operation.
     * @callback module:api/DefaultApi~listFirewallConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirewallConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the firewall configurations that you have defined. DNS Firewall uses the configurations to manage firewall behavior for your VPCs. </p> <p>A single call might return only a partial list of the configurations. For information, see <code>MaxResults</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFirewallConfigsRequest} listFirewallConfigsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFirewallConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirewallConfigsResponse}
     */
    listFirewallConfigs(xAmzTarget, listFirewallConfigsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFirewallConfigsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFirewallConfigs");
      }
      // verify the required parameter 'listFirewallConfigsRequest' is set
      if (listFirewallConfigsRequest === undefined || listFirewallConfigsRequest === null) {
        throw new Error("Missing the required parameter 'listFirewallConfigsRequest' when calling listFirewallConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFirewallConfigsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListFirewallConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewallDomainLists operation.
     * @callback module:api/DefaultApi~listFirewallDomainListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirewallDomainListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the firewall domain lists that you have defined. For each firewall domain list, you can retrieve the domains that are defined for a list by calling <a>ListFirewallDomains</a>. </p> <p>A single call to this list operation might return only a partial list of the domain lists. For information, see <code>MaxResults</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFirewallDomainListsRequest} listFirewallDomainListsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFirewallDomainListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirewallDomainListsResponse}
     */
    listFirewallDomainLists(xAmzTarget, listFirewallDomainListsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFirewallDomainListsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFirewallDomainLists");
      }
      // verify the required parameter 'listFirewallDomainListsRequest' is set
      if (listFirewallDomainListsRequest === undefined || listFirewallDomainListsRequest === null) {
        throw new Error("Missing the required parameter 'listFirewallDomainListsRequest' when calling listFirewallDomainLists");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFirewallDomainListsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListFirewallDomainLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewallDomains operation.
     * @callback module:api/DefaultApi~listFirewallDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirewallDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the domains that you have defined for the specified firewall domain list. </p> <p>A single call might return only a partial list of the domains. For information, see <code>MaxResults</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFirewallDomainsRequest} listFirewallDomainsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFirewallDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirewallDomainsResponse}
     */
    listFirewallDomains(xAmzTarget, listFirewallDomainsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFirewallDomainsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFirewallDomains");
      }
      // verify the required parameter 'listFirewallDomainsRequest' is set
      if (listFirewallDomainsRequest === undefined || listFirewallDomainsRequest === null) {
        throw new Error("Missing the required parameter 'listFirewallDomainsRequest' when calling listFirewallDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFirewallDomainsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListFirewallDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewallRuleGroupAssociations operation.
     * @callback module:api/DefaultApi~listFirewallRuleGroupAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirewallRuleGroupAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the firewall rule group associations that you have defined. Each association enables DNS filtering for a VPC with one rule group. </p> <p>A single call might return only a partial list of the associations. For information, see <code>MaxResults</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFirewallRuleGroupAssociationsRequest} listFirewallRuleGroupAssociationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFirewallRuleGroupAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirewallRuleGroupAssociationsResponse}
     */
    listFirewallRuleGroupAssociations(xAmzTarget, listFirewallRuleGroupAssociationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFirewallRuleGroupAssociationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFirewallRuleGroupAssociations");
      }
      // verify the required parameter 'listFirewallRuleGroupAssociationsRequest' is set
      if (listFirewallRuleGroupAssociationsRequest === undefined || listFirewallRuleGroupAssociationsRequest === null) {
        throw new Error("Missing the required parameter 'listFirewallRuleGroupAssociationsRequest' when calling listFirewallRuleGroupAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFirewallRuleGroupAssociationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListFirewallRuleGroupAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewallRuleGroups operation.
     * @callback module:api/DefaultApi~listFirewallRuleGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirewallRuleGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the minimal high-level information for the rule groups that you have defined. </p> <p>A single call might return only a partial list of the rule groups. For information, see <code>MaxResults</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFirewallRuleGroupsRequest} listFirewallRuleGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFirewallRuleGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirewallRuleGroupsResponse}
     */
    listFirewallRuleGroups(xAmzTarget, listFirewallRuleGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFirewallRuleGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFirewallRuleGroups");
      }
      // verify the required parameter 'listFirewallRuleGroupsRequest' is set
      if (listFirewallRuleGroupsRequest === undefined || listFirewallRuleGroupsRequest === null) {
        throw new Error("Missing the required parameter 'listFirewallRuleGroupsRequest' when calling listFirewallRuleGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFirewallRuleGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListFirewallRuleGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewallRules operation.
     * @callback module:api/DefaultApi~listFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFirewallRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the firewall rules that you have defined for the specified firewall rule group. DNS Firewall uses the rules in a rule group to filter DNS network traffic for a VPC. </p> <p>A single call might return only a partial list of the rules. For information, see <code>MaxResults</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFirewallRulesRequest} listFirewallRulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFirewallRulesResponse}
     */
    listFirewallRules(xAmzTarget, listFirewallRulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFirewallRulesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFirewallRules");
      }
      // verify the required parameter 'listFirewallRulesRequest' is set
      if (listFirewallRulesRequest === undefined || listFirewallRulesRequest === null) {
        throw new Error("Missing the required parameter 'listFirewallRulesRequest' when calling listFirewallRules");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFirewallRulesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListFirewallRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOutpostResolvers operation.
     * @callback module:api/DefaultApi~listOutpostResolversCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOutpostResolversResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the Resolvers on Outposts that were created using the current Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListOutpostResolversRequest} listOutpostResolversRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listOutpostResolversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOutpostResolversResponse}
     */
    listOutpostResolvers(xAmzTarget, listOutpostResolversRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOutpostResolversRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listOutpostResolvers");
      }
      // verify the required parameter 'listOutpostResolversRequest' is set
      if (listOutpostResolversRequest === undefined || listOutpostResolversRequest === null) {
        throw new Error("Missing the required parameter 'listOutpostResolversRequest' when calling listOutpostResolvers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOutpostResolversResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListOutpostResolvers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResolverConfigs operation.
     * @callback module:api/DefaultApi~listResolverConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResolverConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the Resolver configurations that you have defined. Route 53 Resolver uses the configurations to manage DNS resolution behavior for your VPCs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResolverConfigsRequest} listResolverConfigsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResolverConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResolverConfigsResponse}
     */
    listResolverConfigs(xAmzTarget, listResolverConfigsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResolverConfigsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResolverConfigs");
      }
      // verify the required parameter 'listResolverConfigsRequest' is set
      if (listResolverConfigsRequest === undefined || listResolverConfigsRequest === null) {
        throw new Error("Missing the required parameter 'listResolverConfigsRequest' when calling listResolverConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResolverConfigsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListResolverConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResolverDnssecConfigs operation.
     * @callback module:api/DefaultApi~listResolverDnssecConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResolverDnssecConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the configurations for DNSSEC validation that are associated with the current Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResolverDnssecConfigsRequest} listResolverDnssecConfigsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResolverDnssecConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResolverDnssecConfigsResponse}
     */
    listResolverDnssecConfigs(xAmzTarget, listResolverDnssecConfigsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResolverDnssecConfigsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResolverDnssecConfigs");
      }
      // verify the required parameter 'listResolverDnssecConfigsRequest' is set
      if (listResolverDnssecConfigsRequest === undefined || listResolverDnssecConfigsRequest === null) {
        throw new Error("Missing the required parameter 'listResolverDnssecConfigsRequest' when calling listResolverDnssecConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResolverDnssecConfigsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListResolverDnssecConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResolverEndpointIpAddresses operation.
     * @callback module:api/DefaultApi~listResolverEndpointIpAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResolverEndpointIpAddressesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the IP addresses for a specified Resolver endpoint.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResolverEndpointIpAddressesRequest} listResolverEndpointIpAddressesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResolverEndpointIpAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResolverEndpointIpAddressesResponse}
     */
    listResolverEndpointIpAddresses(xAmzTarget, listResolverEndpointIpAddressesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResolverEndpointIpAddressesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResolverEndpointIpAddresses");
      }
      // verify the required parameter 'listResolverEndpointIpAddressesRequest' is set
      if (listResolverEndpointIpAddressesRequest === undefined || listResolverEndpointIpAddressesRequest === null) {
        throw new Error("Missing the required parameter 'listResolverEndpointIpAddressesRequest' when calling listResolverEndpointIpAddresses");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResolverEndpointIpAddressesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListResolverEndpointIpAddresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResolverEndpoints operation.
     * @callback module:api/DefaultApi~listResolverEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResolverEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the Resolver endpoints that were created using the current Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResolverEndpointsRequest} listResolverEndpointsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResolverEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResolverEndpointsResponse}
     */
    listResolverEndpoints(xAmzTarget, listResolverEndpointsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResolverEndpointsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResolverEndpoints");
      }
      // verify the required parameter 'listResolverEndpointsRequest' is set
      if (listResolverEndpointsRequest === undefined || listResolverEndpointsRequest === null) {
        throw new Error("Missing the required parameter 'listResolverEndpointsRequest' when calling listResolverEndpoints");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResolverEndpointsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListResolverEndpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResolverQueryLogConfigAssociations operation.
     * @callback module:api/DefaultApi~listResolverQueryLogConfigAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResolverQueryLogConfigAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information about associations between Amazon VPCs and query logging configurations.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResolverQueryLogConfigAssociationsRequest} listResolverQueryLogConfigAssociationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResolverQueryLogConfigAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResolverQueryLogConfigAssociationsResponse}
     */
    listResolverQueryLogConfigAssociations(xAmzTarget, listResolverQueryLogConfigAssociationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResolverQueryLogConfigAssociationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResolverQueryLogConfigAssociations");
      }
      // verify the required parameter 'listResolverQueryLogConfigAssociationsRequest' is set
      if (listResolverQueryLogConfigAssociationsRequest === undefined || listResolverQueryLogConfigAssociationsRequest === null) {
        throw new Error("Missing the required parameter 'listResolverQueryLogConfigAssociationsRequest' when calling listResolverQueryLogConfigAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResolverQueryLogConfigAssociationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListResolverQueryLogConfigAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResolverQueryLogConfigs operation.
     * @callback module:api/DefaultApi~listResolverQueryLogConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResolverQueryLogConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information about the specified query logging configurations. Each configuration defines where you want Resolver to save DNS query logs and specifies the VPCs that you want to log queries for.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResolverQueryLogConfigsRequest} listResolverQueryLogConfigsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResolverQueryLogConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResolverQueryLogConfigsResponse}
     */
    listResolverQueryLogConfigs(xAmzTarget, listResolverQueryLogConfigsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResolverQueryLogConfigsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResolverQueryLogConfigs");
      }
      // verify the required parameter 'listResolverQueryLogConfigsRequest' is set
      if (listResolverQueryLogConfigsRequest === undefined || listResolverQueryLogConfigsRequest === null) {
        throw new Error("Missing the required parameter 'listResolverQueryLogConfigsRequest' when calling listResolverQueryLogConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResolverQueryLogConfigsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListResolverQueryLogConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResolverRuleAssociations operation.
     * @callback module:api/DefaultApi~listResolverRuleAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResolverRuleAssociationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the associations that were created between Resolver rules and VPCs using the current Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResolverRuleAssociationsRequest} listResolverRuleAssociationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResolverRuleAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResolverRuleAssociationsResponse}
     */
    listResolverRuleAssociations(xAmzTarget, listResolverRuleAssociationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResolverRuleAssociationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResolverRuleAssociations");
      }
      // verify the required parameter 'listResolverRuleAssociationsRequest' is set
      if (listResolverRuleAssociationsRequest === undefined || listResolverRuleAssociationsRequest === null) {
        throw new Error("Missing the required parameter 'listResolverRuleAssociationsRequest' when calling listResolverRuleAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResolverRuleAssociationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListResolverRuleAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResolverRules operation.
     * @callback module:api/DefaultApi~listResolverRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResolverRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Resolver rules that were created using the current Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResolverRulesRequest} listResolverRulesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResolverRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResolverRulesResponse}
     */
    listResolverRules(xAmzTarget, listResolverRulesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResolverRulesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResolverRules");
      }
      // verify the required parameter 'listResolverRulesRequest' is set
      if (listResolverRulesRequest === undefined || listResolverRulesRequest === null) {
        throw new Error("Missing the required parameter 'listResolverRulesRequest' when calling listResolverRules");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResolverRulesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListResolverRules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags that you associated with the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putFirewallRuleGroupPolicy operation.
     * @callback module:api/DefaultApi~putFirewallRuleGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutFirewallRuleGroupPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches an Identity and Access Management (Amazon Web Services IAM) policy for sharing the rule group. You can use the policy to share the rule group using Resource Access Manager (RAM). 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutFirewallRuleGroupPolicyRequest} putFirewallRuleGroupPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putFirewallRuleGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutFirewallRuleGroupPolicyResponse}
     */
    putFirewallRuleGroupPolicy(xAmzTarget, putFirewallRuleGroupPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putFirewallRuleGroupPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putFirewallRuleGroupPolicy");
      }
      // verify the required parameter 'putFirewallRuleGroupPolicyRequest' is set
      if (putFirewallRuleGroupPolicyRequest === undefined || putFirewallRuleGroupPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putFirewallRuleGroupPolicyRequest' when calling putFirewallRuleGroupPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutFirewallRuleGroupPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.PutFirewallRuleGroupPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResolverQueryLogConfigPolicy operation.
     * @callback module:api/DefaultApi~putResolverQueryLogConfigPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutResolverQueryLogConfigPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specifies an Amazon Web Services account that you want to share a query logging configuration with, the query logging configuration that you want to share, and the operations that you want the account to be able to perform on the configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutResolverQueryLogConfigPolicyRequest} putResolverQueryLogConfigPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResolverQueryLogConfigPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutResolverQueryLogConfigPolicyResponse}
     */
    putResolverQueryLogConfigPolicy(xAmzTarget, putResolverQueryLogConfigPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResolverQueryLogConfigPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putResolverQueryLogConfigPolicy");
      }
      // verify the required parameter 'putResolverQueryLogConfigPolicyRequest' is set
      if (putResolverQueryLogConfigPolicyRequest === undefined || putResolverQueryLogConfigPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putResolverQueryLogConfigPolicyRequest' when calling putResolverQueryLogConfigPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutResolverQueryLogConfigPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.PutResolverQueryLogConfigPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResolverRulePolicy operation.
     * @callback module:api/DefaultApi~putResolverRulePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutResolverRulePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specifies an Amazon Web Services rule that you want to share with another account, the account that you want to share the rule with, and the operations that you want the account to be able to perform on the rule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutResolverRulePolicyRequest} putResolverRulePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResolverRulePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutResolverRulePolicyResponse}
     */
    putResolverRulePolicy(xAmzTarget, putResolverRulePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResolverRulePolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putResolverRulePolicy");
      }
      // verify the required parameter 'putResolverRulePolicyRequest' is set
      if (putResolverRulePolicyRequest === undefined || putResolverRulePolicyRequest === null) {
        throw new Error("Missing the required parameter 'putResolverRulePolicyRequest' when calling putResolverRulePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutResolverRulePolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.PutResolverRulePolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more tags to a specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from a specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallConfig operation.
     * @callback module:api/DefaultApi~updateFirewallConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC). 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallConfigRequest} updateFirewallConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallConfigResponse}
     */
    updateFirewallConfig(xAmzTarget, updateFirewallConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallConfig");
      }
      // verify the required parameter 'updateFirewallConfigRequest' is set
      if (updateFirewallConfigRequest === undefined || updateFirewallConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallConfigRequest' when calling updateFirewallConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateFirewallConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallDomains operation.
     * @callback module:api/DefaultApi~updateFirewallDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the firewall domain list from an array of domain specifications. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallDomainsRequest} updateFirewallDomainsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallDomainsResponse}
     */
    updateFirewallDomains(xAmzTarget, updateFirewallDomainsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallDomainsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallDomains");
      }
      // verify the required parameter 'updateFirewallDomainsRequest' is set
      if (updateFirewallDomainsRequest === undefined || updateFirewallDomainsRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallDomainsRequest' when calling updateFirewallDomains");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallDomainsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateFirewallDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallRule operation.
     * @callback module:api/DefaultApi~updateFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified firewall rule. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallRuleRequest} updateFirewallRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallRuleResponse}
     */
    updateFirewallRule(xAmzTarget, updateFirewallRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallRule");
      }
      // verify the required parameter 'updateFirewallRuleRequest' is set
      if (updateFirewallRuleRequest === undefined || updateFirewallRuleRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallRuleRequest' when calling updateFirewallRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateFirewallRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFirewallRuleGroupAssociation operation.
     * @callback module:api/DefaultApi~updateFirewallRuleGroupAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFirewallRuleGroupAssociationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the association of a <a>FirewallRuleGroup</a> with a VPC. The association enables DNS filtering for the VPC. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFirewallRuleGroupAssociationRequest} updateFirewallRuleGroupAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFirewallRuleGroupAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFirewallRuleGroupAssociationResponse}
     */
    updateFirewallRuleGroupAssociation(xAmzTarget, updateFirewallRuleGroupAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFirewallRuleGroupAssociationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFirewallRuleGroupAssociation");
      }
      // verify the required parameter 'updateFirewallRuleGroupAssociationRequest' is set
      if (updateFirewallRuleGroupAssociationRequest === undefined || updateFirewallRuleGroupAssociationRequest === null) {
        throw new Error("Missing the required parameter 'updateFirewallRuleGroupAssociationRequest' when calling updateFirewallRuleGroupAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFirewallRuleGroupAssociationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateFirewallRuleGroupAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOutpostResolver operation.
     * @callback module:api/DefaultApi~updateOutpostResolverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateOutpostResolverResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You can use <code>UpdateOutpostResolver</code> to update the instance count, type, or name of a Resolver on an Outpost.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateOutpostResolverRequest} updateOutpostResolverRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateOutpostResolverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateOutpostResolverResponse}
     */
    updateOutpostResolver(xAmzTarget, updateOutpostResolverRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateOutpostResolverRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateOutpostResolver");
      }
      // verify the required parameter 'updateOutpostResolverRequest' is set
      if (updateOutpostResolverRequest === undefined || updateOutpostResolverRequest === null) {
        throw new Error("Missing the required parameter 'updateOutpostResolverRequest' when calling updateOutpostResolver");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateOutpostResolverResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateOutpostResolver', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResolverConfig operation.
     * @callback module:api/DefaultApi~updateResolverConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResolverConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the behavior configuration of Route 53 Resolver behavior for a single VPC from Amazon Virtual Private Cloud.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateResolverConfigRequest} updateResolverConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResolverConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResolverConfigResponse}
     */
    updateResolverConfig(xAmzTarget, updateResolverConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResolverConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateResolverConfig");
      }
      // verify the required parameter 'updateResolverConfigRequest' is set
      if (updateResolverConfigRequest === undefined || updateResolverConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateResolverConfigRequest' when calling updateResolverConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateResolverConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateResolverConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResolverDnssecConfig operation.
     * @callback module:api/DefaultApi~updateResolverDnssecConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResolverDnssecConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing DNSSEC validation configuration. If there is no existing DNSSEC validation configuration, one is created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateResolverDnssecConfigRequest} updateResolverDnssecConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResolverDnssecConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResolverDnssecConfigResponse}
     */
    updateResolverDnssecConfig(xAmzTarget, updateResolverDnssecConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResolverDnssecConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateResolverDnssecConfig");
      }
      // verify the required parameter 'updateResolverDnssecConfigRequest' is set
      if (updateResolverDnssecConfigRequest === undefined || updateResolverDnssecConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateResolverDnssecConfigRequest' when calling updateResolverDnssecConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateResolverDnssecConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateResolverDnssecConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResolverEndpoint operation.
     * @callback module:api/DefaultApi~updateResolverEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResolverEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name, or enpoint type for an inbound or an outbound Resolver endpoint. You can only update between IPV4 and DUALSTACK, IPV6 endpoint type can't be updated to other type. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateResolverEndpointRequest} updateResolverEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResolverEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResolverEndpointResponse}
     */
    updateResolverEndpoint(xAmzTarget, updateResolverEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResolverEndpointRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateResolverEndpoint");
      }
      // verify the required parameter 'updateResolverEndpointRequest' is set
      if (updateResolverEndpointRequest === undefined || updateResolverEndpointRequest === null) {
        throw new Error("Missing the required parameter 'updateResolverEndpointRequest' when calling updateResolverEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateResolverEndpointResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateResolverEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResolverRule operation.
     * @callback module:api/DefaultApi~updateResolverRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResolverRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates settings for a specified Resolver rule. <code>ResolverRuleId</code> is required, and all other parameters are optional. If you don't specify a parameter, it retains its current value.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateResolverRuleRequest} updateResolverRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResolverRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResolverRuleResponse}
     */
    updateResolverRule(xAmzTarget, updateResolverRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResolverRuleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateResolverRule");
      }
      // verify the required parameter 'updateResolverRuleRequest' is set
      if (updateResolverRuleRequest === undefined || updateResolverRuleRequest === null) {
        throw new Error("Missing the required parameter 'updateResolverRuleRequest' when calling updateResolverRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateResolverRuleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Resolver.UpdateResolverRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
