/**
 * Amazon Route 53 Resolver
 * <p>When you create a VPC using Amazon VPC, you automatically get DNS resolution within the VPC from Route 53 Resolver. By default, Resolver answers DNS queries for VPC domain names such as domain names for EC2 instances or Elastic Load Balancing load balancers. Resolver performs recursive lookups against public name servers for all other domain names.</p> <p>You can also configure DNS resolution between your VPC and your network over a Direct Connect or VPN connection:</p> <p> <b>Forward DNS queries from resolvers on your network to Route 53 Resolver</b> </p> <p>DNS resolvers on your network can forward DNS queries to Resolver in a specified VPC. This allows your DNS resolvers to easily resolve domain names for Amazon Web Services resources such as EC2 instances or records in a Route 53 private hosted zone. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-network-to-vpc\">How DNS Resolvers on Your Network Forward DNS Queries to Route 53 Resolver</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p> <b>Conditionally forward queries from a VPC to resolvers on your network</b> </p> <p>You can configure Resolver to forward queries that it receives from EC2 instances in your VPCs to DNS resolvers on your network. To forward selected queries, you create Resolver rules that specify the domain names for the DNS queries that you want to forward (such as example.com), and the IP addresses of the DNS resolvers on your network that you want to forward the queries to. If a query matches multiple rules (example.com, acme.example.com), Resolver chooses the rule with the most specific match (acme.example.com) and forwards the query to the IP addresses that you specified in that rule. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resolver.html#resolver-overview-forward-vpc-to-network\">How Route 53 Resolver Forwards DNS Queries from Your VPCs to Your Network</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> <p>Like Amazon VPC, Resolver is Regional. In each Region where you have VPCs, you can choose whether to forward queries from your VPCs to your network (outbound queries), from your network to your VPCs (inbound queries), or both.</p>
 *
 * The version of the OpenAPI document: 2018-04-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonRoute53Resolver);
  }
}(this, function(expect, AmazonRoute53Resolver) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonRoute53Resolver.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateFirewallRuleGroup', function() {
      it('should call associateFirewallRuleGroup successfully', function(done) {
        //uncomment below and update the code to test associateFirewallRuleGroup
        //instance.associateFirewallRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateResolverEndpointIpAddress', function() {
      it('should call associateResolverEndpointIpAddress successfully', function(done) {
        //uncomment below and update the code to test associateResolverEndpointIpAddress
        //instance.associateResolverEndpointIpAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateResolverQueryLogConfig', function() {
      it('should call associateResolverQueryLogConfig successfully', function(done) {
        //uncomment below and update the code to test associateResolverQueryLogConfig
        //instance.associateResolverQueryLogConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateResolverRule', function() {
      it('should call associateResolverRule successfully', function(done) {
        //uncomment below and update the code to test associateResolverRule
        //instance.associateResolverRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFirewallDomainList', function() {
      it('should call createFirewallDomainList successfully', function(done) {
        //uncomment below and update the code to test createFirewallDomainList
        //instance.createFirewallDomainList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFirewallRule', function() {
      it('should call createFirewallRule successfully', function(done) {
        //uncomment below and update the code to test createFirewallRule
        //instance.createFirewallRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFirewallRuleGroup', function() {
      it('should call createFirewallRuleGroup successfully', function(done) {
        //uncomment below and update the code to test createFirewallRuleGroup
        //instance.createFirewallRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOutpostResolver', function() {
      it('should call createOutpostResolver successfully', function(done) {
        //uncomment below and update the code to test createOutpostResolver
        //instance.createOutpostResolver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createResolverEndpoint', function() {
      it('should call createResolverEndpoint successfully', function(done) {
        //uncomment below and update the code to test createResolverEndpoint
        //instance.createResolverEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createResolverQueryLogConfig', function() {
      it('should call createResolverQueryLogConfig successfully', function(done) {
        //uncomment below and update the code to test createResolverQueryLogConfig
        //instance.createResolverQueryLogConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createResolverRule', function() {
      it('should call createResolverRule successfully', function(done) {
        //uncomment below and update the code to test createResolverRule
        //instance.createResolverRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFirewallDomainList', function() {
      it('should call deleteFirewallDomainList successfully', function(done) {
        //uncomment below and update the code to test deleteFirewallDomainList
        //instance.deleteFirewallDomainList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFirewallRule', function() {
      it('should call deleteFirewallRule successfully', function(done) {
        //uncomment below and update the code to test deleteFirewallRule
        //instance.deleteFirewallRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFirewallRuleGroup', function() {
      it('should call deleteFirewallRuleGroup successfully', function(done) {
        //uncomment below and update the code to test deleteFirewallRuleGroup
        //instance.deleteFirewallRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOutpostResolver', function() {
      it('should call deleteOutpostResolver successfully', function(done) {
        //uncomment below and update the code to test deleteOutpostResolver
        //instance.deleteOutpostResolver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResolverEndpoint', function() {
      it('should call deleteResolverEndpoint successfully', function(done) {
        //uncomment below and update the code to test deleteResolverEndpoint
        //instance.deleteResolverEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResolverQueryLogConfig', function() {
      it('should call deleteResolverQueryLogConfig successfully', function(done) {
        //uncomment below and update the code to test deleteResolverQueryLogConfig
        //instance.deleteResolverQueryLogConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResolverRule', function() {
      it('should call deleteResolverRule successfully', function(done) {
        //uncomment below and update the code to test deleteResolverRule
        //instance.deleteResolverRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateFirewallRuleGroup', function() {
      it('should call disassociateFirewallRuleGroup successfully', function(done) {
        //uncomment below and update the code to test disassociateFirewallRuleGroup
        //instance.disassociateFirewallRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateResolverEndpointIpAddress', function() {
      it('should call disassociateResolverEndpointIpAddress successfully', function(done) {
        //uncomment below and update the code to test disassociateResolverEndpointIpAddress
        //instance.disassociateResolverEndpointIpAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateResolverQueryLogConfig', function() {
      it('should call disassociateResolverQueryLogConfig successfully', function(done) {
        //uncomment below and update the code to test disassociateResolverQueryLogConfig
        //instance.disassociateResolverQueryLogConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateResolverRule', function() {
      it('should call disassociateResolverRule successfully', function(done) {
        //uncomment below and update the code to test disassociateResolverRule
        //instance.disassociateResolverRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFirewallConfig', function() {
      it('should call getFirewallConfig successfully', function(done) {
        //uncomment below and update the code to test getFirewallConfig
        //instance.getFirewallConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFirewallDomainList', function() {
      it('should call getFirewallDomainList successfully', function(done) {
        //uncomment below and update the code to test getFirewallDomainList
        //instance.getFirewallDomainList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFirewallRuleGroup', function() {
      it('should call getFirewallRuleGroup successfully', function(done) {
        //uncomment below and update the code to test getFirewallRuleGroup
        //instance.getFirewallRuleGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFirewallRuleGroupAssociation', function() {
      it('should call getFirewallRuleGroupAssociation successfully', function(done) {
        //uncomment below and update the code to test getFirewallRuleGroupAssociation
        //instance.getFirewallRuleGroupAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFirewallRuleGroupPolicy', function() {
      it('should call getFirewallRuleGroupPolicy successfully', function(done) {
        //uncomment below and update the code to test getFirewallRuleGroupPolicy
        //instance.getFirewallRuleGroupPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOutpostResolver', function() {
      it('should call getOutpostResolver successfully', function(done) {
        //uncomment below and update the code to test getOutpostResolver
        //instance.getOutpostResolver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverConfig', function() {
      it('should call getResolverConfig successfully', function(done) {
        //uncomment below and update the code to test getResolverConfig
        //instance.getResolverConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverDnssecConfig', function() {
      it('should call getResolverDnssecConfig successfully', function(done) {
        //uncomment below and update the code to test getResolverDnssecConfig
        //instance.getResolverDnssecConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverEndpoint', function() {
      it('should call getResolverEndpoint successfully', function(done) {
        //uncomment below and update the code to test getResolverEndpoint
        //instance.getResolverEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverQueryLogConfig', function() {
      it('should call getResolverQueryLogConfig successfully', function(done) {
        //uncomment below and update the code to test getResolverQueryLogConfig
        //instance.getResolverQueryLogConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverQueryLogConfigAssociation', function() {
      it('should call getResolverQueryLogConfigAssociation successfully', function(done) {
        //uncomment below and update the code to test getResolverQueryLogConfigAssociation
        //instance.getResolverQueryLogConfigAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverQueryLogConfigPolicy', function() {
      it('should call getResolverQueryLogConfigPolicy successfully', function(done) {
        //uncomment below and update the code to test getResolverQueryLogConfigPolicy
        //instance.getResolverQueryLogConfigPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverRule', function() {
      it('should call getResolverRule successfully', function(done) {
        //uncomment below and update the code to test getResolverRule
        //instance.getResolverRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverRuleAssociation', function() {
      it('should call getResolverRuleAssociation successfully', function(done) {
        //uncomment below and update the code to test getResolverRuleAssociation
        //instance.getResolverRuleAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResolverRulePolicy', function() {
      it('should call getResolverRulePolicy successfully', function(done) {
        //uncomment below and update the code to test getResolverRulePolicy
        //instance.getResolverRulePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importFirewallDomains', function() {
      it('should call importFirewallDomains successfully', function(done) {
        //uncomment below and update the code to test importFirewallDomains
        //instance.importFirewallDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewallConfigs', function() {
      it('should call listFirewallConfigs successfully', function(done) {
        //uncomment below and update the code to test listFirewallConfigs
        //instance.listFirewallConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewallDomainLists', function() {
      it('should call listFirewallDomainLists successfully', function(done) {
        //uncomment below and update the code to test listFirewallDomainLists
        //instance.listFirewallDomainLists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewallDomains', function() {
      it('should call listFirewallDomains successfully', function(done) {
        //uncomment below and update the code to test listFirewallDomains
        //instance.listFirewallDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewallRuleGroupAssociations', function() {
      it('should call listFirewallRuleGroupAssociations successfully', function(done) {
        //uncomment below and update the code to test listFirewallRuleGroupAssociations
        //instance.listFirewallRuleGroupAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewallRuleGroups', function() {
      it('should call listFirewallRuleGroups successfully', function(done) {
        //uncomment below and update the code to test listFirewallRuleGroups
        //instance.listFirewallRuleGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFirewallRules', function() {
      it('should call listFirewallRules successfully', function(done) {
        //uncomment below and update the code to test listFirewallRules
        //instance.listFirewallRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOutpostResolvers', function() {
      it('should call listOutpostResolvers successfully', function(done) {
        //uncomment below and update the code to test listOutpostResolvers
        //instance.listOutpostResolvers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResolverConfigs', function() {
      it('should call listResolverConfigs successfully', function(done) {
        //uncomment below and update the code to test listResolverConfigs
        //instance.listResolverConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResolverDnssecConfigs', function() {
      it('should call listResolverDnssecConfigs successfully', function(done) {
        //uncomment below and update the code to test listResolverDnssecConfigs
        //instance.listResolverDnssecConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResolverEndpointIpAddresses', function() {
      it('should call listResolverEndpointIpAddresses successfully', function(done) {
        //uncomment below and update the code to test listResolverEndpointIpAddresses
        //instance.listResolverEndpointIpAddresses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResolverEndpoints', function() {
      it('should call listResolverEndpoints successfully', function(done) {
        //uncomment below and update the code to test listResolverEndpoints
        //instance.listResolverEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResolverQueryLogConfigAssociations', function() {
      it('should call listResolverQueryLogConfigAssociations successfully', function(done) {
        //uncomment below and update the code to test listResolverQueryLogConfigAssociations
        //instance.listResolverQueryLogConfigAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResolverQueryLogConfigs', function() {
      it('should call listResolverQueryLogConfigs successfully', function(done) {
        //uncomment below and update the code to test listResolverQueryLogConfigs
        //instance.listResolverQueryLogConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResolverRuleAssociations', function() {
      it('should call listResolverRuleAssociations successfully', function(done) {
        //uncomment below and update the code to test listResolverRuleAssociations
        //instance.listResolverRuleAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResolverRules', function() {
      it('should call listResolverRules successfully', function(done) {
        //uncomment below and update the code to test listResolverRules
        //instance.listResolverRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putFirewallRuleGroupPolicy', function() {
      it('should call putFirewallRuleGroupPolicy successfully', function(done) {
        //uncomment below and update the code to test putFirewallRuleGroupPolicy
        //instance.putFirewallRuleGroupPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResolverQueryLogConfigPolicy', function() {
      it('should call putResolverQueryLogConfigPolicy successfully', function(done) {
        //uncomment below and update the code to test putResolverQueryLogConfigPolicy
        //instance.putResolverQueryLogConfigPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResolverRulePolicy', function() {
      it('should call putResolverRulePolicy successfully', function(done) {
        //uncomment below and update the code to test putResolverRulePolicy
        //instance.putResolverRulePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallConfig', function() {
      it('should call updateFirewallConfig successfully', function(done) {
        //uncomment below and update the code to test updateFirewallConfig
        //instance.updateFirewallConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallDomains', function() {
      it('should call updateFirewallDomains successfully', function(done) {
        //uncomment below and update the code to test updateFirewallDomains
        //instance.updateFirewallDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallRule', function() {
      it('should call updateFirewallRule successfully', function(done) {
        //uncomment below and update the code to test updateFirewallRule
        //instance.updateFirewallRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFirewallRuleGroupAssociation', function() {
      it('should call updateFirewallRuleGroupAssociation successfully', function(done) {
        //uncomment below and update the code to test updateFirewallRuleGroupAssociation
        //instance.updateFirewallRuleGroupAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateOutpostResolver', function() {
      it('should call updateOutpostResolver successfully', function(done) {
        //uncomment below and update the code to test updateOutpostResolver
        //instance.updateOutpostResolver(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResolverConfig', function() {
      it('should call updateResolverConfig successfully', function(done) {
        //uncomment below and update the code to test updateResolverConfig
        //instance.updateResolverConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResolverDnssecConfig', function() {
      it('should call updateResolverDnssecConfig successfully', function(done) {
        //uncomment below and update the code to test updateResolverDnssecConfig
        //instance.updateResolverDnssecConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResolverEndpoint', function() {
      it('should call updateResolverEndpoint successfully', function(done) {
        //uncomment below and update the code to test updateResolverEndpoint
        //instance.updateResolverEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResolverRule', function() {
      it('should call updateResolverRule successfully', function(done) {
        //uncomment below and update the code to test updateResolverRule
        //instance.updateResolverRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
