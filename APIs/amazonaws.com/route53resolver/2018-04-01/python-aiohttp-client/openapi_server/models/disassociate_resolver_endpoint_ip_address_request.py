# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disassociate_resolver_endpoint_ip_address_request_ip_address import DisassociateResolverEndpointIpAddressRequestIpAddress
from openapi_server import util


class DisassociateResolverEndpointIpAddressRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resolver_endpoint_id: str=None, ip_address: DisassociateResolverEndpointIpAddressRequestIpAddress=None):
        """DisassociateResolverEndpointIpAddressRequest - a model defined in OpenAPI

        :param resolver_endpoint_id: The resolver_endpoint_id of this DisassociateResolverEndpointIpAddressRequest.
        :param ip_address: The ip_address of this DisassociateResolverEndpointIpAddressRequest.
        """
        self.openapi_types = {
            'resolver_endpoint_id': str,
            'ip_address': DisassociateResolverEndpointIpAddressRequestIpAddress
        }

        self.attribute_map = {
            'resolver_endpoint_id': 'ResolverEndpointId',
            'ip_address': 'IpAddress'
        }

        self._resolver_endpoint_id = resolver_endpoint_id
        self._ip_address = ip_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisassociateResolverEndpointIpAddressRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisassociateResolverEndpointIpAddressRequest of this DisassociateResolverEndpointIpAddressRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resolver_endpoint_id(self):
        """Gets the resolver_endpoint_id of this DisassociateResolverEndpointIpAddressRequest.


        :return: The resolver_endpoint_id of this DisassociateResolverEndpointIpAddressRequest.
        :rtype: str
        """
        return self._resolver_endpoint_id

    @resolver_endpoint_id.setter
    def resolver_endpoint_id(self, resolver_endpoint_id):
        """Sets the resolver_endpoint_id of this DisassociateResolverEndpointIpAddressRequest.


        :param resolver_endpoint_id: The resolver_endpoint_id of this DisassociateResolverEndpointIpAddressRequest.
        :type resolver_endpoint_id: str
        """
        if resolver_endpoint_id is None:
            raise ValueError("Invalid value for `resolver_endpoint_id`, must not be `None`")

        self._resolver_endpoint_id = resolver_endpoint_id

    @property
    def ip_address(self):
        """Gets the ip_address of this DisassociateResolverEndpointIpAddressRequest.


        :return: The ip_address of this DisassociateResolverEndpointIpAddressRequest.
        :rtype: DisassociateResolverEndpointIpAddressRequestIpAddress
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this DisassociateResolverEndpointIpAddressRequest.


        :param ip_address: The ip_address of this DisassociateResolverEndpointIpAddressRequest.
        :type ip_address: DisassociateResolverEndpointIpAddressRequestIpAddress
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address
