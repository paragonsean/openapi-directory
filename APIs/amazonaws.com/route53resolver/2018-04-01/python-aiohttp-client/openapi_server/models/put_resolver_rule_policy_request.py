# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutResolverRulePolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, resolver_rule_policy: str=None):
        """PutResolverRulePolicyRequest - a model defined in OpenAPI

        :param arn: The arn of this PutResolverRulePolicyRequest.
        :param resolver_rule_policy: The resolver_rule_policy of this PutResolverRulePolicyRequest.
        """
        self.openapi_types = {
            'arn': str,
            'resolver_rule_policy': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'resolver_rule_policy': 'ResolverRulePolicy'
        }

        self._arn = arn
        self._resolver_rule_policy = resolver_rule_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutResolverRulePolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutResolverRulePolicyRequest of this PutResolverRulePolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this PutResolverRulePolicyRequest.


        :return: The arn of this PutResolverRulePolicyRequest.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this PutResolverRulePolicyRequest.


        :param arn: The arn of this PutResolverRulePolicyRequest.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def resolver_rule_policy(self):
        """Gets the resolver_rule_policy of this PutResolverRulePolicyRequest.


        :return: The resolver_rule_policy of this PutResolverRulePolicyRequest.
        :rtype: str
        """
        return self._resolver_rule_policy

    @resolver_rule_policy.setter
    def resolver_rule_policy(self, resolver_rule_policy):
        """Sets the resolver_rule_policy of this PutResolverRulePolicyRequest.


        :param resolver_rule_policy: The resolver_rule_policy of this PutResolverRulePolicyRequest.
        :type resolver_rule_policy: str
        """
        if resolver_rule_policy is None:
            raise ValueError("Invalid value for `resolver_rule_policy`, must not be `None`")

        self._resolver_rule_policy = resolver_rule_policy
