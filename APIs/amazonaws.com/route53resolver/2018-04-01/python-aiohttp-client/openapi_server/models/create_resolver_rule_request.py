# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_type_option import RuleTypeOption
from openapi_server import util


class CreateResolverRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator_request_id: str=None, name: str=None, rule_type: RuleTypeOption=None, domain_name: str=None, target_ips: List=None, resolver_endpoint_id: str=None, tags: List=None):
        """CreateResolverRuleRequest - a model defined in OpenAPI

        :param creator_request_id: The creator_request_id of this CreateResolverRuleRequest.
        :param name: The name of this CreateResolverRuleRequest.
        :param rule_type: The rule_type of this CreateResolverRuleRequest.
        :param domain_name: The domain_name of this CreateResolverRuleRequest.
        :param target_ips: The target_ips of this CreateResolverRuleRequest.
        :param resolver_endpoint_id: The resolver_endpoint_id of this CreateResolverRuleRequest.
        :param tags: The tags of this CreateResolverRuleRequest.
        """
        self.openapi_types = {
            'creator_request_id': str,
            'name': str,
            'rule_type': RuleTypeOption,
            'domain_name': str,
            'target_ips': List,
            'resolver_endpoint_id': str,
            'tags': List
        }

        self.attribute_map = {
            'creator_request_id': 'CreatorRequestId',
            'name': 'Name',
            'rule_type': 'RuleType',
            'domain_name': 'DomainName',
            'target_ips': 'TargetIps',
            'resolver_endpoint_id': 'ResolverEndpointId',
            'tags': 'Tags'
        }

        self._creator_request_id = creator_request_id
        self._name = name
        self._rule_type = rule_type
        self._domain_name = domain_name
        self._target_ips = target_ips
        self._resolver_endpoint_id = resolver_endpoint_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateResolverRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateResolverRuleRequest of this CreateResolverRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator_request_id(self):
        """Gets the creator_request_id of this CreateResolverRuleRequest.


        :return: The creator_request_id of this CreateResolverRuleRequest.
        :rtype: str
        """
        return self._creator_request_id

    @creator_request_id.setter
    def creator_request_id(self, creator_request_id):
        """Sets the creator_request_id of this CreateResolverRuleRequest.


        :param creator_request_id: The creator_request_id of this CreateResolverRuleRequest.
        :type creator_request_id: str
        """
        if creator_request_id is None:
            raise ValueError("Invalid value for `creator_request_id`, must not be `None`")

        self._creator_request_id = creator_request_id

    @property
    def name(self):
        """Gets the name of this CreateResolverRuleRequest.


        :return: The name of this CreateResolverRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateResolverRuleRequest.


        :param name: The name of this CreateResolverRuleRequest.
        :type name: str
        """

        self._name = name

    @property
    def rule_type(self):
        """Gets the rule_type of this CreateResolverRuleRequest.


        :return: The rule_type of this CreateResolverRuleRequest.
        :rtype: RuleTypeOption
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this CreateResolverRuleRequest.


        :param rule_type: The rule_type of this CreateResolverRuleRequest.
        :type rule_type: RuleTypeOption
        """
        if rule_type is None:
            raise ValueError("Invalid value for `rule_type`, must not be `None`")

        self._rule_type = rule_type

    @property
    def domain_name(self):
        """Gets the domain_name of this CreateResolverRuleRequest.


        :return: The domain_name of this CreateResolverRuleRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CreateResolverRuleRequest.


        :param domain_name: The domain_name of this CreateResolverRuleRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def target_ips(self):
        """Gets the target_ips of this CreateResolverRuleRequest.


        :return: The target_ips of this CreateResolverRuleRequest.
        :rtype: List
        """
        return self._target_ips

    @target_ips.setter
    def target_ips(self, target_ips):
        """Sets the target_ips of this CreateResolverRuleRequest.


        :param target_ips: The target_ips of this CreateResolverRuleRequest.
        :type target_ips: List
        """

        self._target_ips = target_ips

    @property
    def resolver_endpoint_id(self):
        """Gets the resolver_endpoint_id of this CreateResolverRuleRequest.


        :return: The resolver_endpoint_id of this CreateResolverRuleRequest.
        :rtype: str
        """
        return self._resolver_endpoint_id

    @resolver_endpoint_id.setter
    def resolver_endpoint_id(self, resolver_endpoint_id):
        """Sets the resolver_endpoint_id of this CreateResolverRuleRequest.


        :param resolver_endpoint_id: The resolver_endpoint_id of this CreateResolverRuleRequest.
        :type resolver_endpoint_id: str
        """

        self._resolver_endpoint_id = resolver_endpoint_id

    @property
    def tags(self):
        """Gets the tags of this CreateResolverRuleRequest.


        :return: The tags of this CreateResolverRuleRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateResolverRuleRequest.


        :param tags: The tags of this CreateResolverRuleRequest.
        :type tags: List
        """

        self._tags = tags
