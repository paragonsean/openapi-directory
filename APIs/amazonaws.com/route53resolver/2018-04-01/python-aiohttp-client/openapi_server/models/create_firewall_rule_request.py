# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.block_override_dns_type import BlockOverrideDnsType
from openapi_server.models.block_response import BlockResponse
from openapi_server import util


class CreateFirewallRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator_request_id: str=None, firewall_rule_group_id: str=None, firewall_domain_list_id: str=None, priority: int=None, action: Action=None, block_response: BlockResponse=None, block_override_domain: str=None, block_override_dns_type: BlockOverrideDnsType=None, block_override_ttl: int=None, name: str=None):
        """CreateFirewallRuleRequest - a model defined in OpenAPI

        :param creator_request_id: The creator_request_id of this CreateFirewallRuleRequest.
        :param firewall_rule_group_id: The firewall_rule_group_id of this CreateFirewallRuleRequest.
        :param firewall_domain_list_id: The firewall_domain_list_id of this CreateFirewallRuleRequest.
        :param priority: The priority of this CreateFirewallRuleRequest.
        :param action: The action of this CreateFirewallRuleRequest.
        :param block_response: The block_response of this CreateFirewallRuleRequest.
        :param block_override_domain: The block_override_domain of this CreateFirewallRuleRequest.
        :param block_override_dns_type: The block_override_dns_type of this CreateFirewallRuleRequest.
        :param block_override_ttl: The block_override_ttl of this CreateFirewallRuleRequest.
        :param name: The name of this CreateFirewallRuleRequest.
        """
        self.openapi_types = {
            'creator_request_id': str,
            'firewall_rule_group_id': str,
            'firewall_domain_list_id': str,
            'priority': int,
            'action': Action,
            'block_response': BlockResponse,
            'block_override_domain': str,
            'block_override_dns_type': BlockOverrideDnsType,
            'block_override_ttl': int,
            'name': str
        }

        self.attribute_map = {
            'creator_request_id': 'CreatorRequestId',
            'firewall_rule_group_id': 'FirewallRuleGroupId',
            'firewall_domain_list_id': 'FirewallDomainListId',
            'priority': 'Priority',
            'action': 'Action',
            'block_response': 'BlockResponse',
            'block_override_domain': 'BlockOverrideDomain',
            'block_override_dns_type': 'BlockOverrideDnsType',
            'block_override_ttl': 'BlockOverrideTtl',
            'name': 'Name'
        }

        self._creator_request_id = creator_request_id
        self._firewall_rule_group_id = firewall_rule_group_id
        self._firewall_domain_list_id = firewall_domain_list_id
        self._priority = priority
        self._action = action
        self._block_response = block_response
        self._block_override_domain = block_override_domain
        self._block_override_dns_type = block_override_dns_type
        self._block_override_ttl = block_override_ttl
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFirewallRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFirewallRuleRequest of this CreateFirewallRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator_request_id(self):
        """Gets the creator_request_id of this CreateFirewallRuleRequest.


        :return: The creator_request_id of this CreateFirewallRuleRequest.
        :rtype: str
        """
        return self._creator_request_id

    @creator_request_id.setter
    def creator_request_id(self, creator_request_id):
        """Sets the creator_request_id of this CreateFirewallRuleRequest.


        :param creator_request_id: The creator_request_id of this CreateFirewallRuleRequest.
        :type creator_request_id: str
        """
        if creator_request_id is None:
            raise ValueError("Invalid value for `creator_request_id`, must not be `None`")

        self._creator_request_id = creator_request_id

    @property
    def firewall_rule_group_id(self):
        """Gets the firewall_rule_group_id of this CreateFirewallRuleRequest.


        :return: The firewall_rule_group_id of this CreateFirewallRuleRequest.
        :rtype: str
        """
        return self._firewall_rule_group_id

    @firewall_rule_group_id.setter
    def firewall_rule_group_id(self, firewall_rule_group_id):
        """Sets the firewall_rule_group_id of this CreateFirewallRuleRequest.


        :param firewall_rule_group_id: The firewall_rule_group_id of this CreateFirewallRuleRequest.
        :type firewall_rule_group_id: str
        """
        if firewall_rule_group_id is None:
            raise ValueError("Invalid value for `firewall_rule_group_id`, must not be `None`")

        self._firewall_rule_group_id = firewall_rule_group_id

    @property
    def firewall_domain_list_id(self):
        """Gets the firewall_domain_list_id of this CreateFirewallRuleRequest.


        :return: The firewall_domain_list_id of this CreateFirewallRuleRequest.
        :rtype: str
        """
        return self._firewall_domain_list_id

    @firewall_domain_list_id.setter
    def firewall_domain_list_id(self, firewall_domain_list_id):
        """Sets the firewall_domain_list_id of this CreateFirewallRuleRequest.


        :param firewall_domain_list_id: The firewall_domain_list_id of this CreateFirewallRuleRequest.
        :type firewall_domain_list_id: str
        """
        if firewall_domain_list_id is None:
            raise ValueError("Invalid value for `firewall_domain_list_id`, must not be `None`")

        self._firewall_domain_list_id = firewall_domain_list_id

    @property
    def priority(self):
        """Gets the priority of this CreateFirewallRuleRequest.


        :return: The priority of this CreateFirewallRuleRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this CreateFirewallRuleRequest.


        :param priority: The priority of this CreateFirewallRuleRequest.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def action(self):
        """Gets the action of this CreateFirewallRuleRequest.


        :return: The action of this CreateFirewallRuleRequest.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateFirewallRuleRequest.


        :param action: The action of this CreateFirewallRuleRequest.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def block_response(self):
        """Gets the block_response of this CreateFirewallRuleRequest.


        :return: The block_response of this CreateFirewallRuleRequest.
        :rtype: BlockResponse
        """
        return self._block_response

    @block_response.setter
    def block_response(self, block_response):
        """Sets the block_response of this CreateFirewallRuleRequest.


        :param block_response: The block_response of this CreateFirewallRuleRequest.
        :type block_response: BlockResponse
        """

        self._block_response = block_response

    @property
    def block_override_domain(self):
        """Gets the block_override_domain of this CreateFirewallRuleRequest.


        :return: The block_override_domain of this CreateFirewallRuleRequest.
        :rtype: str
        """
        return self._block_override_domain

    @block_override_domain.setter
    def block_override_domain(self, block_override_domain):
        """Sets the block_override_domain of this CreateFirewallRuleRequest.


        :param block_override_domain: The block_override_domain of this CreateFirewallRuleRequest.
        :type block_override_domain: str
        """

        self._block_override_domain = block_override_domain

    @property
    def block_override_dns_type(self):
        """Gets the block_override_dns_type of this CreateFirewallRuleRequest.


        :return: The block_override_dns_type of this CreateFirewallRuleRequest.
        :rtype: BlockOverrideDnsType
        """
        return self._block_override_dns_type

    @block_override_dns_type.setter
    def block_override_dns_type(self, block_override_dns_type):
        """Sets the block_override_dns_type of this CreateFirewallRuleRequest.


        :param block_override_dns_type: The block_override_dns_type of this CreateFirewallRuleRequest.
        :type block_override_dns_type: BlockOverrideDnsType
        """

        self._block_override_dns_type = block_override_dns_type

    @property
    def block_override_ttl(self):
        """Gets the block_override_ttl of this CreateFirewallRuleRequest.


        :return: The block_override_ttl of this CreateFirewallRuleRequest.
        :rtype: int
        """
        return self._block_override_ttl

    @block_override_ttl.setter
    def block_override_ttl(self, block_override_ttl):
        """Sets the block_override_ttl of this CreateFirewallRuleRequest.


        :param block_override_ttl: The block_override_ttl of this CreateFirewallRuleRequest.
        :type block_override_ttl: int
        """

        self._block_override_ttl = block_override_ttl

    @property
    def name(self):
        """Gets the name of this CreateFirewallRuleRequest.


        :return: The name of this CreateFirewallRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFirewallRuleRequest.


        :param name: The name of this CreateFirewallRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
