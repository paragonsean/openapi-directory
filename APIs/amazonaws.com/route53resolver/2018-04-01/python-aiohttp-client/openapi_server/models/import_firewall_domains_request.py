# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_domain_import_operation import FirewallDomainImportOperation
from openapi_server import util


class ImportFirewallDomainsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firewall_domain_list_id: str=None, operation: FirewallDomainImportOperation=None, domain_file_url: str=None):
        """ImportFirewallDomainsRequest - a model defined in OpenAPI

        :param firewall_domain_list_id: The firewall_domain_list_id of this ImportFirewallDomainsRequest.
        :param operation: The operation of this ImportFirewallDomainsRequest.
        :param domain_file_url: The domain_file_url of this ImportFirewallDomainsRequest.
        """
        self.openapi_types = {
            'firewall_domain_list_id': str,
            'operation': FirewallDomainImportOperation,
            'domain_file_url': str
        }

        self.attribute_map = {
            'firewall_domain_list_id': 'FirewallDomainListId',
            'operation': 'Operation',
            'domain_file_url': 'DomainFileUrl'
        }

        self._firewall_domain_list_id = firewall_domain_list_id
        self._operation = operation
        self._domain_file_url = domain_file_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportFirewallDomainsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportFirewallDomainsRequest of this ImportFirewallDomainsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firewall_domain_list_id(self):
        """Gets the firewall_domain_list_id of this ImportFirewallDomainsRequest.


        :return: The firewall_domain_list_id of this ImportFirewallDomainsRequest.
        :rtype: str
        """
        return self._firewall_domain_list_id

    @firewall_domain_list_id.setter
    def firewall_domain_list_id(self, firewall_domain_list_id):
        """Sets the firewall_domain_list_id of this ImportFirewallDomainsRequest.


        :param firewall_domain_list_id: The firewall_domain_list_id of this ImportFirewallDomainsRequest.
        :type firewall_domain_list_id: str
        """
        if firewall_domain_list_id is None:
            raise ValueError("Invalid value for `firewall_domain_list_id`, must not be `None`")

        self._firewall_domain_list_id = firewall_domain_list_id

    @property
    def operation(self):
        """Gets the operation of this ImportFirewallDomainsRequest.


        :return: The operation of this ImportFirewallDomainsRequest.
        :rtype: FirewallDomainImportOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ImportFirewallDomainsRequest.


        :param operation: The operation of this ImportFirewallDomainsRequest.
        :type operation: FirewallDomainImportOperation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def domain_file_url(self):
        """Gets the domain_file_url of this ImportFirewallDomainsRequest.


        :return: The domain_file_url of this ImportFirewallDomainsRequest.
        :rtype: str
        """
        return self._domain_file_url

    @domain_file_url.setter
    def domain_file_url(self, domain_file_url):
        """Sets the domain_file_url of this ImportFirewallDomainsRequest.


        :param domain_file_url: The domain_file_url of this ImportFirewallDomainsRequest.
        :type domain_file_url: str
        """
        if domain_file_url is None:
            raise ValueError("Invalid value for `domain_file_url`, must not be `None`")

        self._domain_file_url = domain_file_url
