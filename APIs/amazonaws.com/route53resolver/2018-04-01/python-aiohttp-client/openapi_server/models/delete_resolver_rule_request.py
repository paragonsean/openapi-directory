# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteResolverRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resolver_rule_id: str=None):
        """DeleteResolverRuleRequest - a model defined in OpenAPI

        :param resolver_rule_id: The resolver_rule_id of this DeleteResolverRuleRequest.
        """
        self.openapi_types = {
            'resolver_rule_id': str
        }

        self.attribute_map = {
            'resolver_rule_id': 'ResolverRuleId'
        }

        self._resolver_rule_id = resolver_rule_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteResolverRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteResolverRuleRequest of this DeleteResolverRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resolver_rule_id(self):
        """Gets the resolver_rule_id of this DeleteResolverRuleRequest.


        :return: The resolver_rule_id of this DeleteResolverRuleRequest.
        :rtype: str
        """
        return self._resolver_rule_id

    @resolver_rule_id.setter
    def resolver_rule_id(self, resolver_rule_id):
        """Sets the resolver_rule_id of this DeleteResolverRuleRequest.


        :param resolver_rule_id: The resolver_rule_id of this DeleteResolverRuleRequest.
        :type resolver_rule_id: str
        """
        if resolver_rule_id is None:
            raise ValueError("Invalid value for `resolver_rule_id`, must not be `None`")

        self._resolver_rule_id = resolver_rule_id
