# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mutation_protection_status import MutationProtectionStatus
from openapi_server import util


class AssociateFirewallRuleGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator_request_id: str=None, firewall_rule_group_id: str=None, vpc_id: str=None, priority: int=None, name: str=None, mutation_protection: MutationProtectionStatus=None, tags: List=None):
        """AssociateFirewallRuleGroupRequest - a model defined in OpenAPI

        :param creator_request_id: The creator_request_id of this AssociateFirewallRuleGroupRequest.
        :param firewall_rule_group_id: The firewall_rule_group_id of this AssociateFirewallRuleGroupRequest.
        :param vpc_id: The vpc_id of this AssociateFirewallRuleGroupRequest.
        :param priority: The priority of this AssociateFirewallRuleGroupRequest.
        :param name: The name of this AssociateFirewallRuleGroupRequest.
        :param mutation_protection: The mutation_protection of this AssociateFirewallRuleGroupRequest.
        :param tags: The tags of this AssociateFirewallRuleGroupRequest.
        """
        self.openapi_types = {
            'creator_request_id': str,
            'firewall_rule_group_id': str,
            'vpc_id': str,
            'priority': int,
            'name': str,
            'mutation_protection': MutationProtectionStatus,
            'tags': List
        }

        self.attribute_map = {
            'creator_request_id': 'CreatorRequestId',
            'firewall_rule_group_id': 'FirewallRuleGroupId',
            'vpc_id': 'VpcId',
            'priority': 'Priority',
            'name': 'Name',
            'mutation_protection': 'MutationProtection',
            'tags': 'Tags'
        }

        self._creator_request_id = creator_request_id
        self._firewall_rule_group_id = firewall_rule_group_id
        self._vpc_id = vpc_id
        self._priority = priority
        self._name = name
        self._mutation_protection = mutation_protection
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateFirewallRuleGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateFirewallRuleGroupRequest of this AssociateFirewallRuleGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator_request_id(self):
        """Gets the creator_request_id of this AssociateFirewallRuleGroupRequest.


        :return: The creator_request_id of this AssociateFirewallRuleGroupRequest.
        :rtype: str
        """
        return self._creator_request_id

    @creator_request_id.setter
    def creator_request_id(self, creator_request_id):
        """Sets the creator_request_id of this AssociateFirewallRuleGroupRequest.


        :param creator_request_id: The creator_request_id of this AssociateFirewallRuleGroupRequest.
        :type creator_request_id: str
        """
        if creator_request_id is None:
            raise ValueError("Invalid value for `creator_request_id`, must not be `None`")

        self._creator_request_id = creator_request_id

    @property
    def firewall_rule_group_id(self):
        """Gets the firewall_rule_group_id of this AssociateFirewallRuleGroupRequest.


        :return: The firewall_rule_group_id of this AssociateFirewallRuleGroupRequest.
        :rtype: str
        """
        return self._firewall_rule_group_id

    @firewall_rule_group_id.setter
    def firewall_rule_group_id(self, firewall_rule_group_id):
        """Sets the firewall_rule_group_id of this AssociateFirewallRuleGroupRequest.


        :param firewall_rule_group_id: The firewall_rule_group_id of this AssociateFirewallRuleGroupRequest.
        :type firewall_rule_group_id: str
        """
        if firewall_rule_group_id is None:
            raise ValueError("Invalid value for `firewall_rule_group_id`, must not be `None`")

        self._firewall_rule_group_id = firewall_rule_group_id

    @property
    def vpc_id(self):
        """Gets the vpc_id of this AssociateFirewallRuleGroupRequest.


        :return: The vpc_id of this AssociateFirewallRuleGroupRequest.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this AssociateFirewallRuleGroupRequest.


        :param vpc_id: The vpc_id of this AssociateFirewallRuleGroupRequest.
        :type vpc_id: str
        """
        if vpc_id is None:
            raise ValueError("Invalid value for `vpc_id`, must not be `None`")

        self._vpc_id = vpc_id

    @property
    def priority(self):
        """Gets the priority of this AssociateFirewallRuleGroupRequest.


        :return: The priority of this AssociateFirewallRuleGroupRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AssociateFirewallRuleGroupRequest.


        :param priority: The priority of this AssociateFirewallRuleGroupRequest.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def name(self):
        """Gets the name of this AssociateFirewallRuleGroupRequest.


        :return: The name of this AssociateFirewallRuleGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssociateFirewallRuleGroupRequest.


        :param name: The name of this AssociateFirewallRuleGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def mutation_protection(self):
        """Gets the mutation_protection of this AssociateFirewallRuleGroupRequest.


        :return: The mutation_protection of this AssociateFirewallRuleGroupRequest.
        :rtype: MutationProtectionStatus
        """
        return self._mutation_protection

    @mutation_protection.setter
    def mutation_protection(self, mutation_protection):
        """Sets the mutation_protection of this AssociateFirewallRuleGroupRequest.


        :param mutation_protection: The mutation_protection of this AssociateFirewallRuleGroupRequest.
        :type mutation_protection: MutationProtectionStatus
        """

        self._mutation_protection = mutation_protection

    @property
    def tags(self):
        """Gets the tags of this AssociateFirewallRuleGroupRequest.


        :return: The tags of this AssociateFirewallRuleGroupRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssociateFirewallRuleGroupRequest.


        :param tags: The tags of this AssociateFirewallRuleGroupRequest.
        :type tags: List
        """

        self._tags = tags
