# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateIpAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_id: str=None, ipv6: str=None):
        """UpdateIpAddress - a model defined in OpenAPI

        :param ip_id: The ip_id of this UpdateIpAddress.
        :param ipv6: The ipv6 of this UpdateIpAddress.
        """
        self.openapi_types = {
            'ip_id': str,
            'ipv6': str
        }

        self.attribute_map = {
            'ip_id': 'IpId',
            'ipv6': 'Ipv6'
        }

        self._ip_id = ip_id
        self._ipv6 = ipv6

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateIpAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateIpAddress of this UpdateIpAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_id(self):
        """Gets the ip_id of this UpdateIpAddress.


        :return: The ip_id of this UpdateIpAddress.
        :rtype: str
        """
        return self._ip_id

    @ip_id.setter
    def ip_id(self, ip_id):
        """Sets the ip_id of this UpdateIpAddress.


        :param ip_id: The ip_id of this UpdateIpAddress.
        :type ip_id: str
        """
        if ip_id is None:
            raise ValueError("Invalid value for `ip_id`, must not be `None`")

        self._ip_id = ip_id

    @property
    def ipv6(self):
        """Gets the ipv6 of this UpdateIpAddress.


        :return: The ipv6 of this UpdateIpAddress.
        :rtype: str
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this UpdateIpAddress.


        :param ipv6: The ipv6 of this UpdateIpAddress.
        :type ipv6: str
        """
        if ipv6 is None:
            raise ValueError("Invalid value for `ipv6`, must not be `None`")

        self._ipv6 = ipv6
