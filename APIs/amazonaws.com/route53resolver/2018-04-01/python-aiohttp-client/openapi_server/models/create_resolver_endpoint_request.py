# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resolver_endpoint_direction import ResolverEndpointDirection
from openapi_server.models.resolver_endpoint_type import ResolverEndpointType
from openapi_server import util


class CreateResolverEndpointRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator_request_id: str=None, name: str=None, security_group_ids: List=None, direction: ResolverEndpointDirection=None, ip_addresses: List=None, tags: List=None, resolver_endpoint_type: ResolverEndpointType=None, outpost_arn: str=None, preferred_instance_type: str=None):
        """CreateResolverEndpointRequest - a model defined in OpenAPI

        :param creator_request_id: The creator_request_id of this CreateResolverEndpointRequest.
        :param name: The name of this CreateResolverEndpointRequest.
        :param security_group_ids: The security_group_ids of this CreateResolverEndpointRequest.
        :param direction: The direction of this CreateResolverEndpointRequest.
        :param ip_addresses: The ip_addresses of this CreateResolverEndpointRequest.
        :param tags: The tags of this CreateResolverEndpointRequest.
        :param resolver_endpoint_type: The resolver_endpoint_type of this CreateResolverEndpointRequest.
        :param outpost_arn: The outpost_arn of this CreateResolverEndpointRequest.
        :param preferred_instance_type: The preferred_instance_type of this CreateResolverEndpointRequest.
        """
        self.openapi_types = {
            'creator_request_id': str,
            'name': str,
            'security_group_ids': List,
            'direction': ResolverEndpointDirection,
            'ip_addresses': List,
            'tags': List,
            'resolver_endpoint_type': ResolverEndpointType,
            'outpost_arn': str,
            'preferred_instance_type': str
        }

        self.attribute_map = {
            'creator_request_id': 'CreatorRequestId',
            'name': 'Name',
            'security_group_ids': 'SecurityGroupIds',
            'direction': 'Direction',
            'ip_addresses': 'IpAddresses',
            'tags': 'Tags',
            'resolver_endpoint_type': 'ResolverEndpointType',
            'outpost_arn': 'OutpostArn',
            'preferred_instance_type': 'PreferredInstanceType'
        }

        self._creator_request_id = creator_request_id
        self._name = name
        self._security_group_ids = security_group_ids
        self._direction = direction
        self._ip_addresses = ip_addresses
        self._tags = tags
        self._resolver_endpoint_type = resolver_endpoint_type
        self._outpost_arn = outpost_arn
        self._preferred_instance_type = preferred_instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateResolverEndpointRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateResolverEndpointRequest of this CreateResolverEndpointRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator_request_id(self):
        """Gets the creator_request_id of this CreateResolverEndpointRequest.


        :return: The creator_request_id of this CreateResolverEndpointRequest.
        :rtype: str
        """
        return self._creator_request_id

    @creator_request_id.setter
    def creator_request_id(self, creator_request_id):
        """Sets the creator_request_id of this CreateResolverEndpointRequest.


        :param creator_request_id: The creator_request_id of this CreateResolverEndpointRequest.
        :type creator_request_id: str
        """
        if creator_request_id is None:
            raise ValueError("Invalid value for `creator_request_id`, must not be `None`")

        self._creator_request_id = creator_request_id

    @property
    def name(self):
        """Gets the name of this CreateResolverEndpointRequest.


        :return: The name of this CreateResolverEndpointRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateResolverEndpointRequest.


        :param name: The name of this CreateResolverEndpointRequest.
        :type name: str
        """

        self._name = name

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this CreateResolverEndpointRequest.


        :return: The security_group_ids of this CreateResolverEndpointRequest.
        :rtype: List
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this CreateResolverEndpointRequest.


        :param security_group_ids: The security_group_ids of this CreateResolverEndpointRequest.
        :type security_group_ids: List
        """
        if security_group_ids is None:
            raise ValueError("Invalid value for `security_group_ids`, must not be `None`")

        self._security_group_ids = security_group_ids

    @property
    def direction(self):
        """Gets the direction of this CreateResolverEndpointRequest.


        :return: The direction of this CreateResolverEndpointRequest.
        :rtype: ResolverEndpointDirection
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CreateResolverEndpointRequest.


        :param direction: The direction of this CreateResolverEndpointRequest.
        :type direction: ResolverEndpointDirection
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this CreateResolverEndpointRequest.


        :return: The ip_addresses of this CreateResolverEndpointRequest.
        :rtype: List
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this CreateResolverEndpointRequest.


        :param ip_addresses: The ip_addresses of this CreateResolverEndpointRequest.
        :type ip_addresses: List
        """
        if ip_addresses is None:
            raise ValueError("Invalid value for `ip_addresses`, must not be `None`")

        self._ip_addresses = ip_addresses

    @property
    def tags(self):
        """Gets the tags of this CreateResolverEndpointRequest.


        :return: The tags of this CreateResolverEndpointRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateResolverEndpointRequest.


        :param tags: The tags of this CreateResolverEndpointRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def resolver_endpoint_type(self):
        """Gets the resolver_endpoint_type of this CreateResolverEndpointRequest.


        :return: The resolver_endpoint_type of this CreateResolverEndpointRequest.
        :rtype: ResolverEndpointType
        """
        return self._resolver_endpoint_type

    @resolver_endpoint_type.setter
    def resolver_endpoint_type(self, resolver_endpoint_type):
        """Sets the resolver_endpoint_type of this CreateResolverEndpointRequest.


        :param resolver_endpoint_type: The resolver_endpoint_type of this CreateResolverEndpointRequest.
        :type resolver_endpoint_type: ResolverEndpointType
        """

        self._resolver_endpoint_type = resolver_endpoint_type

    @property
    def outpost_arn(self):
        """Gets the outpost_arn of this CreateResolverEndpointRequest.


        :return: The outpost_arn of this CreateResolverEndpointRequest.
        :rtype: str
        """
        return self._outpost_arn

    @outpost_arn.setter
    def outpost_arn(self, outpost_arn):
        """Sets the outpost_arn of this CreateResolverEndpointRequest.


        :param outpost_arn: The outpost_arn of this CreateResolverEndpointRequest.
        :type outpost_arn: str
        """

        self._outpost_arn = outpost_arn

    @property
    def preferred_instance_type(self):
        """Gets the preferred_instance_type of this CreateResolverEndpointRequest.


        :return: The preferred_instance_type of this CreateResolverEndpointRequest.
        :rtype: str
        """
        return self._preferred_instance_type

    @preferred_instance_type.setter
    def preferred_instance_type(self, preferred_instance_type):
        """Sets the preferred_instance_type of this CreateResolverEndpointRequest.


        :param preferred_instance_type: The preferred_instance_type of this CreateResolverEndpointRequest.
        :type preferred_instance_type: str
        """

        self._preferred_instance_type = preferred_instance_type
