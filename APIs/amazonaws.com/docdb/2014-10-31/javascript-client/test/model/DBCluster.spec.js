/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonDocumentDbWithMongoDbCompatibility);
  }
}(this, function(expect, AmazonDocumentDbWithMongoDbCompatibility) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DBCluster', function() {
    it('should create an instance of DBCluster', function() {
      // uncomment below and update the code to test DBCluster
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be.a(AmazonDocumentDbWithMongoDbCompatibility.DBCluster);
    });

    it('should have the property availabilityZones (base name: "AvailabilityZones")', function() {
      // uncomment below and update the code to test the property availabilityZones
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property backupRetentionPeriod (base name: "BackupRetentionPeriod")', function() {
      // uncomment below and update the code to test the property backupRetentionPeriod
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterIdentifier (base name: "DBClusterIdentifier")', function() {
      // uncomment below and update the code to test the property dBClusterIdentifier
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterParameterGroup (base name: "DBClusterParameterGroup")', function() {
      // uncomment below and update the code to test the property dBClusterParameterGroup
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBSubnetGroup (base name: "DBSubnetGroup")', function() {
      // uncomment below and update the code to test the property dBSubnetGroup
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property percentProgress (base name: "PercentProgress")', function() {
      // uncomment below and update the code to test the property percentProgress
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property earliestRestorableTime (base name: "EarliestRestorableTime")', function() {
      // uncomment below and update the code to test the property earliestRestorableTime
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "Endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property readerEndpoint (base name: "ReaderEndpoint")', function() {
      // uncomment below and update the code to test the property readerEndpoint
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property multiAZ (base name: "MultiAZ")', function() {
      // uncomment below and update the code to test the property multiAZ
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property engine (base name: "Engine")', function() {
      // uncomment below and update the code to test the property engine
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property latestRestorableTime (base name: "LatestRestorableTime")', function() {
      // uncomment below and update the code to test the property latestRestorableTime
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "Port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property masterUsername (base name: "MasterUsername")', function() {
      // uncomment below and update the code to test the property masterUsername
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property preferredBackupWindow (base name: "PreferredBackupWindow")', function() {
      // uncomment below and update the code to test the property preferredBackupWindow
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property preferredMaintenanceWindow (base name: "PreferredMaintenanceWindow")', function() {
      // uncomment below and update the code to test the property preferredMaintenanceWindow
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property replicationSourceIdentifier (base name: "ReplicationSourceIdentifier")', function() {
      // uncomment below and update the code to test the property replicationSourceIdentifier
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property readReplicaIdentifiers (base name: "ReadReplicaIdentifiers")', function() {
      // uncomment below and update the code to test the property readReplicaIdentifiers
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterMembers (base name: "DBClusterMembers")', function() {
      // uncomment below and update the code to test the property dBClusterMembers
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property vpcSecurityGroups (base name: "VpcSecurityGroups")', function() {
      // uncomment below and update the code to test the property vpcSecurityGroups
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property hostedZoneId (base name: "HostedZoneId")', function() {
      // uncomment below and update the code to test the property hostedZoneId
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property storageEncrypted (base name: "StorageEncrypted")', function() {
      // uncomment below and update the code to test the property storageEncrypted
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "KmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dbClusterResourceId (base name: "DbClusterResourceId")', function() {
      // uncomment below and update the code to test the property dbClusterResourceId
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property dBClusterArn (base name: "DBClusterArn")', function() {
      // uncomment below and update the code to test the property dBClusterArn
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property associatedRoles (base name: "AssociatedRoles")', function() {
      // uncomment below and update the code to test the property associatedRoles
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property cloneGroupId (base name: "CloneGroupId")', function() {
      // uncomment below and update the code to test the property cloneGroupId
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property clusterCreateTime (base name: "ClusterCreateTime")', function() {
      // uncomment below and update the code to test the property clusterCreateTime
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property enabledCloudwatchLogsExports (base name: "EnabledCloudwatchLogsExports")', function() {
      // uncomment below and update the code to test the property enabledCloudwatchLogsExports
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

    it('should have the property deletionProtection (base name: "DeletionProtection")', function() {
      // uncomment below and update the code to test the property deletionProtection
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.DBCluster();
      //expect(instance).to.be();
    });

  });

}));
