/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonDocumentDbWithMongoDbCompatibility);
  }
}(this, function(expect, AmazonDocumentDbWithMongoDbCompatibility) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RestoreDBClusterToPointInTimeMessage', function() {
    it('should create an instance of RestoreDBClusterToPointInTimeMessage', function() {
      // uncomment below and update the code to test RestoreDBClusterToPointInTimeMessage
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be.a(AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage);
    });

    it('should have the property dBClusterIdentifier (base name: "DBClusterIdentifier")', function() {
      // uncomment below and update the code to test the property dBClusterIdentifier
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property restoreType (base name: "RestoreType")', function() {
      // uncomment below and update the code to test the property restoreType
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property sourceDBClusterIdentifier (base name: "SourceDBClusterIdentifier")', function() {
      // uncomment below and update the code to test the property sourceDBClusterIdentifier
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property restoreToTime (base name: "RestoreToTime")', function() {
      // uncomment below and update the code to test the property restoreToTime
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property useLatestRestorableTime (base name: "UseLatestRestorableTime")', function() {
      // uncomment below and update the code to test the property useLatestRestorableTime
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "Port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property dBSubnetGroupName (base name: "DBSubnetGroupName")', function() {
      // uncomment below and update the code to test the property dBSubnetGroupName
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property vpcSecurityGroupIds (base name: "VpcSecurityGroupIds")', function() {
      // uncomment below and update the code to test the property vpcSecurityGroupIds
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "KmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property enableCloudwatchLogsExports (base name: "EnableCloudwatchLogsExports")', function() {
      // uncomment below and update the code to test the property enableCloudwatchLogsExports
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

    it('should have the property deletionProtection (base name: "DeletionProtection")', function() {
      // uncomment below and update the code to test the property deletionProtection
      //var instance = new AmazonDocumentDbWithMongoDbCompatibility.RestoreDBClusterToPointInTimeMessage();
      //expect(instance).to.be();
    });

  });

}));
