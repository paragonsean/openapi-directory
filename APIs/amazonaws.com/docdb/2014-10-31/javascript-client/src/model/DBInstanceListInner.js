/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DBInstance from './DBInstance';
import DBInstanceDBSubnetGroup from './DBInstanceDBSubnetGroup';
import DBInstanceEndpoint from './DBInstanceEndpoint';
import DBInstancePendingModifiedValues from './DBInstancePendingModifiedValues';

/**
 * The DBInstanceListInner model module.
 * @module model/DBInstanceListInner
 * @version 2014-10-31
 */
class DBInstanceListInner {
    /**
     * Constructs a new <code>DBInstanceListInner</code>.
     * @alias module:model/DBInstanceListInner
     * @implements module:model/DBInstance
     */
    constructor() { 
        DBInstance.initialize(this);
        DBInstanceListInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DBInstanceListInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DBInstanceListInner} obj Optional instance to populate.
     * @return {module:model/DBInstanceListInner} The populated <code>DBInstanceListInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DBInstanceListInner();
            DBInstance.constructFromObject(data, obj);

            if (data.hasOwnProperty('DBInstanceIdentifier')) {
                obj['DBInstanceIdentifier'] = ApiClient.convertToType(data['DBInstanceIdentifier'], 'String');
            }
            if (data.hasOwnProperty('DBInstanceClass')) {
                obj['DBInstanceClass'] = ApiClient.convertToType(data['DBInstanceClass'], 'String');
            }
            if (data.hasOwnProperty('Engine')) {
                obj['Engine'] = ApiClient.convertToType(data['Engine'], 'String');
            }
            if (data.hasOwnProperty('DBInstanceStatus')) {
                obj['DBInstanceStatus'] = ApiClient.convertToType(data['DBInstanceStatus'], 'String');
            }
            if (data.hasOwnProperty('Endpoint')) {
                obj['Endpoint'] = DBInstanceEndpoint.constructFromObject(data['Endpoint']);
            }
            if (data.hasOwnProperty('InstanceCreateTime')) {
                obj['InstanceCreateTime'] = ApiClient.convertToType(data['InstanceCreateTime'], 'Date');
            }
            if (data.hasOwnProperty('PreferredBackupWindow')) {
                obj['PreferredBackupWindow'] = ApiClient.convertToType(data['PreferredBackupWindow'], 'String');
            }
            if (data.hasOwnProperty('BackupRetentionPeriod')) {
                obj['BackupRetentionPeriod'] = ApiClient.convertToType(data['BackupRetentionPeriod'], 'Number');
            }
            if (data.hasOwnProperty('VpcSecurityGroups')) {
                obj['VpcSecurityGroups'] = ApiClient.convertToType(data['VpcSecurityGroups'], Array);
            }
            if (data.hasOwnProperty('AvailabilityZone')) {
                obj['AvailabilityZone'] = ApiClient.convertToType(data['AvailabilityZone'], 'String');
            }
            if (data.hasOwnProperty('DBSubnetGroup')) {
                obj['DBSubnetGroup'] = DBInstanceDBSubnetGroup.constructFromObject(data['DBSubnetGroup']);
            }
            if (data.hasOwnProperty('PreferredMaintenanceWindow')) {
                obj['PreferredMaintenanceWindow'] = ApiClient.convertToType(data['PreferredMaintenanceWindow'], 'String');
            }
            if (data.hasOwnProperty('PendingModifiedValues')) {
                obj['PendingModifiedValues'] = DBInstancePendingModifiedValues.constructFromObject(data['PendingModifiedValues']);
            }
            if (data.hasOwnProperty('LatestRestorableTime')) {
                obj['LatestRestorableTime'] = ApiClient.convertToType(data['LatestRestorableTime'], 'Date');
            }
            if (data.hasOwnProperty('EngineVersion')) {
                obj['EngineVersion'] = ApiClient.convertToType(data['EngineVersion'], 'String');
            }
            if (data.hasOwnProperty('AutoMinorVersionUpgrade')) {
                obj['AutoMinorVersionUpgrade'] = ApiClient.convertToType(data['AutoMinorVersionUpgrade'], 'Boolean');
            }
            if (data.hasOwnProperty('PubliclyAccessible')) {
                obj['PubliclyAccessible'] = ApiClient.convertToType(data['PubliclyAccessible'], 'Boolean');
            }
            if (data.hasOwnProperty('StatusInfos')) {
                obj['StatusInfos'] = ApiClient.convertToType(data['StatusInfos'], Array);
            }
            if (data.hasOwnProperty('DBClusterIdentifier')) {
                obj['DBClusterIdentifier'] = ApiClient.convertToType(data['DBClusterIdentifier'], 'String');
            }
            if (data.hasOwnProperty('StorageEncrypted')) {
                obj['StorageEncrypted'] = ApiClient.convertToType(data['StorageEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('KmsKeyId')) {
                obj['KmsKeyId'] = ApiClient.convertToType(data['KmsKeyId'], 'String');
            }
            if (data.hasOwnProperty('DbiResourceId')) {
                obj['DbiResourceId'] = ApiClient.convertToType(data['DbiResourceId'], 'String');
            }
            if (data.hasOwnProperty('CACertificateIdentifier')) {
                obj['CACertificateIdentifier'] = ApiClient.convertToType(data['CACertificateIdentifier'], 'String');
            }
            if (data.hasOwnProperty('CopyTagsToSnapshot')) {
                obj['CopyTagsToSnapshot'] = ApiClient.convertToType(data['CopyTagsToSnapshot'], 'Boolean');
            }
            if (data.hasOwnProperty('PromotionTier')) {
                obj['PromotionTier'] = ApiClient.convertToType(data['PromotionTier'], 'Number');
            }
            if (data.hasOwnProperty('DBInstanceArn')) {
                obj['DBInstanceArn'] = ApiClient.convertToType(data['DBInstanceArn'], 'String');
            }
            if (data.hasOwnProperty('EnabledCloudwatchLogsExports')) {
                obj['EnabledCloudwatchLogsExports'] = ApiClient.convertToType(data['EnabledCloudwatchLogsExports'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DBInstanceListInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DBInstanceListInner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DBInstanceIdentifier`
        if (data['DBInstanceIdentifier']) { // data not null
          String.validateJSON(data['DBInstanceIdentifier']);
        }
        // validate the optional field `DBInstanceClass`
        if (data['DBInstanceClass']) { // data not null
          String.validateJSON(data['DBInstanceClass']);
        }
        // validate the optional field `Engine`
        if (data['Engine']) { // data not null
          String.validateJSON(data['Engine']);
        }
        // validate the optional field `DBInstanceStatus`
        if (data['DBInstanceStatus']) { // data not null
          String.validateJSON(data['DBInstanceStatus']);
        }
        // validate the optional field `Endpoint`
        if (data['Endpoint']) { // data not null
          DBInstanceEndpoint.validateJSON(data['Endpoint']);
        }
        // validate the optional field `InstanceCreateTime`
        if (data['InstanceCreateTime']) { // data not null
          Date.validateJSON(data['InstanceCreateTime']);
        }
        // validate the optional field `PreferredBackupWindow`
        if (data['PreferredBackupWindow']) { // data not null
          String.validateJSON(data['PreferredBackupWindow']);
        }
        // validate the optional field `BackupRetentionPeriod`
        if (data['BackupRetentionPeriod']) { // data not null
          Number.validateJSON(data['BackupRetentionPeriod']);
        }
        // validate the optional field `VpcSecurityGroups`
        if (data['VpcSecurityGroups']) { // data not null
          Array.validateJSON(data['VpcSecurityGroups']);
        }
        // validate the optional field `AvailabilityZone`
        if (data['AvailabilityZone']) { // data not null
          String.validateJSON(data['AvailabilityZone']);
        }
        // validate the optional field `DBSubnetGroup`
        if (data['DBSubnetGroup']) { // data not null
          DBInstanceDBSubnetGroup.validateJSON(data['DBSubnetGroup']);
        }
        // validate the optional field `PreferredMaintenanceWindow`
        if (data['PreferredMaintenanceWindow']) { // data not null
          String.validateJSON(data['PreferredMaintenanceWindow']);
        }
        // validate the optional field `PendingModifiedValues`
        if (data['PendingModifiedValues']) { // data not null
          DBInstancePendingModifiedValues.validateJSON(data['PendingModifiedValues']);
        }
        // validate the optional field `LatestRestorableTime`
        if (data['LatestRestorableTime']) { // data not null
          Date.validateJSON(data['LatestRestorableTime']);
        }
        // validate the optional field `EngineVersion`
        if (data['EngineVersion']) { // data not null
          String.validateJSON(data['EngineVersion']);
        }
        // validate the optional field `AutoMinorVersionUpgrade`
        if (data['AutoMinorVersionUpgrade']) { // data not null
          Boolean.validateJSON(data['AutoMinorVersionUpgrade']);
        }
        // validate the optional field `PubliclyAccessible`
        if (data['PubliclyAccessible']) { // data not null
          Boolean.validateJSON(data['PubliclyAccessible']);
        }
        // validate the optional field `StatusInfos`
        if (data['StatusInfos']) { // data not null
          Array.validateJSON(data['StatusInfos']);
        }
        // validate the optional field `DBClusterIdentifier`
        if (data['DBClusterIdentifier']) { // data not null
          String.validateJSON(data['DBClusterIdentifier']);
        }
        // validate the optional field `StorageEncrypted`
        if (data['StorageEncrypted']) { // data not null
          Boolean.validateJSON(data['StorageEncrypted']);
        }
        // validate the optional field `KmsKeyId`
        if (data['KmsKeyId']) { // data not null
          String.validateJSON(data['KmsKeyId']);
        }
        // validate the optional field `DbiResourceId`
        if (data['DbiResourceId']) { // data not null
          String.validateJSON(data['DbiResourceId']);
        }
        // validate the optional field `CACertificateIdentifier`
        if (data['CACertificateIdentifier']) { // data not null
          String.validateJSON(data['CACertificateIdentifier']);
        }
        // validate the optional field `CopyTagsToSnapshot`
        if (data['CopyTagsToSnapshot']) { // data not null
          Boolean.validateJSON(data['CopyTagsToSnapshot']);
        }
        // validate the optional field `PromotionTier`
        if (data['PromotionTier']) { // data not null
          Number.validateJSON(data['PromotionTier']);
        }
        // validate the optional field `DBInstanceArn`
        if (data['DBInstanceArn']) { // data not null
          String.validateJSON(data['DBInstanceArn']);
        }
        // validate the optional field `EnabledCloudwatchLogsExports`
        if (data['EnabledCloudwatchLogsExports']) { // data not null
          Array.validateJSON(data['EnabledCloudwatchLogsExports']);
        }

        return true;
    }


}



/**
 * @member {String} DBInstanceIdentifier
 */
DBInstanceListInner.prototype['DBInstanceIdentifier'] = undefined;

/**
 * @member {String} DBInstanceClass
 */
DBInstanceListInner.prototype['DBInstanceClass'] = undefined;

/**
 * @member {String} Engine
 */
DBInstanceListInner.prototype['Engine'] = undefined;

/**
 * @member {String} DBInstanceStatus
 */
DBInstanceListInner.prototype['DBInstanceStatus'] = undefined;

/**
 * @member {module:model/DBInstanceEndpoint} Endpoint
 */
DBInstanceListInner.prototype['Endpoint'] = undefined;

/**
 * @member {Date} InstanceCreateTime
 */
DBInstanceListInner.prototype['InstanceCreateTime'] = undefined;

/**
 * @member {String} PreferredBackupWindow
 */
DBInstanceListInner.prototype['PreferredBackupWindow'] = undefined;

/**
 * @member {Number} BackupRetentionPeriod
 */
DBInstanceListInner.prototype['BackupRetentionPeriod'] = undefined;

/**
 * @member {Array} VpcSecurityGroups
 */
DBInstanceListInner.prototype['VpcSecurityGroups'] = undefined;

/**
 * @member {String} AvailabilityZone
 */
DBInstanceListInner.prototype['AvailabilityZone'] = undefined;

/**
 * @member {module:model/DBInstanceDBSubnetGroup} DBSubnetGroup
 */
DBInstanceListInner.prototype['DBSubnetGroup'] = undefined;

/**
 * @member {String} PreferredMaintenanceWindow
 */
DBInstanceListInner.prototype['PreferredMaintenanceWindow'] = undefined;

/**
 * @member {module:model/DBInstancePendingModifiedValues} PendingModifiedValues
 */
DBInstanceListInner.prototype['PendingModifiedValues'] = undefined;

/**
 * @member {Date} LatestRestorableTime
 */
DBInstanceListInner.prototype['LatestRestorableTime'] = undefined;

/**
 * @member {String} EngineVersion
 */
DBInstanceListInner.prototype['EngineVersion'] = undefined;

/**
 * @member {Boolean} AutoMinorVersionUpgrade
 */
DBInstanceListInner.prototype['AutoMinorVersionUpgrade'] = undefined;

/**
 * @member {Boolean} PubliclyAccessible
 */
DBInstanceListInner.prototype['PubliclyAccessible'] = undefined;

/**
 * @member {Array} StatusInfos
 */
DBInstanceListInner.prototype['StatusInfos'] = undefined;

/**
 * @member {String} DBClusterIdentifier
 */
DBInstanceListInner.prototype['DBClusterIdentifier'] = undefined;

/**
 * @member {Boolean} StorageEncrypted
 */
DBInstanceListInner.prototype['StorageEncrypted'] = undefined;

/**
 * @member {String} KmsKeyId
 */
DBInstanceListInner.prototype['KmsKeyId'] = undefined;

/**
 * @member {String} DbiResourceId
 */
DBInstanceListInner.prototype['DbiResourceId'] = undefined;

/**
 * @member {String} CACertificateIdentifier
 */
DBInstanceListInner.prototype['CACertificateIdentifier'] = undefined;

/**
 * @member {Boolean} CopyTagsToSnapshot
 */
DBInstanceListInner.prototype['CopyTagsToSnapshot'] = undefined;

/**
 * @member {Number} PromotionTier
 */
DBInstanceListInner.prototype['PromotionTier'] = undefined;

/**
 * @member {String} DBInstanceArn
 */
DBInstanceListInner.prototype['DBInstanceArn'] = undefined;

/**
 * @member {Array} EnabledCloudwatchLogsExports
 */
DBInstanceListInner.prototype['EnabledCloudwatchLogsExports'] = undefined;


// Implement DBInstance interface:
/**
 * @member {String} DBInstanceIdentifier
 */
DBInstance.prototype['DBInstanceIdentifier'] = undefined;
/**
 * @member {String} DBInstanceClass
 */
DBInstance.prototype['DBInstanceClass'] = undefined;
/**
 * @member {String} Engine
 */
DBInstance.prototype['Engine'] = undefined;
/**
 * @member {String} DBInstanceStatus
 */
DBInstance.prototype['DBInstanceStatus'] = undefined;
/**
 * @member {module:model/DBInstanceEndpoint} Endpoint
 */
DBInstance.prototype['Endpoint'] = undefined;
/**
 * @member {Date} InstanceCreateTime
 */
DBInstance.prototype['InstanceCreateTime'] = undefined;
/**
 * @member {String} PreferredBackupWindow
 */
DBInstance.prototype['PreferredBackupWindow'] = undefined;
/**
 * @member {Number} BackupRetentionPeriod
 */
DBInstance.prototype['BackupRetentionPeriod'] = undefined;
/**
 * @member {Array} VpcSecurityGroups
 */
DBInstance.prototype['VpcSecurityGroups'] = undefined;
/**
 * @member {String} AvailabilityZone
 */
DBInstance.prototype['AvailabilityZone'] = undefined;
/**
 * @member {module:model/DBInstanceDBSubnetGroup} DBSubnetGroup
 */
DBInstance.prototype['DBSubnetGroup'] = undefined;
/**
 * @member {String} PreferredMaintenanceWindow
 */
DBInstance.prototype['PreferredMaintenanceWindow'] = undefined;
/**
 * @member {module:model/DBInstancePendingModifiedValues} PendingModifiedValues
 */
DBInstance.prototype['PendingModifiedValues'] = undefined;
/**
 * @member {Date} LatestRestorableTime
 */
DBInstance.prototype['LatestRestorableTime'] = undefined;
/**
 * @member {String} EngineVersion
 */
DBInstance.prototype['EngineVersion'] = undefined;
/**
 * @member {Boolean} AutoMinorVersionUpgrade
 */
DBInstance.prototype['AutoMinorVersionUpgrade'] = undefined;
/**
 * @member {Boolean} PubliclyAccessible
 */
DBInstance.prototype['PubliclyAccessible'] = undefined;
/**
 * @member {Array} StatusInfos
 */
DBInstance.prototype['StatusInfos'] = undefined;
/**
 * @member {String} DBClusterIdentifier
 */
DBInstance.prototype['DBClusterIdentifier'] = undefined;
/**
 * @member {Boolean} StorageEncrypted
 */
DBInstance.prototype['StorageEncrypted'] = undefined;
/**
 * @member {String} KmsKeyId
 */
DBInstance.prototype['KmsKeyId'] = undefined;
/**
 * @member {String} DbiResourceId
 */
DBInstance.prototype['DbiResourceId'] = undefined;
/**
 * @member {String} CACertificateIdentifier
 */
DBInstance.prototype['CACertificateIdentifier'] = undefined;
/**
 * @member {Boolean} CopyTagsToSnapshot
 */
DBInstance.prototype['CopyTagsToSnapshot'] = undefined;
/**
 * @member {Number} PromotionTier
 */
DBInstance.prototype['PromotionTier'] = undefined;
/**
 * @member {String} DBInstanceArn
 */
DBInstance.prototype['DBInstanceArn'] = undefined;
/**
 * @member {Array} EnabledCloudwatchLogsExports
 */
DBInstance.prototype['EnabledCloudwatchLogsExports'] = undefined;




export default DBInstanceListInner;

