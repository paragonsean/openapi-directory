/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DBEngineVersion model module.
 * @module model/DBEngineVersion
 * @version 2014-10-31
 */
class DBEngineVersion {
    /**
     * Constructs a new <code>DBEngineVersion</code>.
     *  Detailed information about an engine version. 
     * @alias module:model/DBEngineVersion
     */
    constructor() { 
        
        DBEngineVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DBEngineVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DBEngineVersion} obj Optional instance to populate.
     * @return {module:model/DBEngineVersion} The populated <code>DBEngineVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DBEngineVersion();

            if (data.hasOwnProperty('Engine')) {
                obj['Engine'] = ApiClient.convertToType(data['Engine'], 'String');
            }
            if (data.hasOwnProperty('EngineVersion')) {
                obj['EngineVersion'] = ApiClient.convertToType(data['EngineVersion'], 'String');
            }
            if (data.hasOwnProperty('DBParameterGroupFamily')) {
                obj['DBParameterGroupFamily'] = ApiClient.convertToType(data['DBParameterGroupFamily'], 'String');
            }
            if (data.hasOwnProperty('DBEngineDescription')) {
                obj['DBEngineDescription'] = ApiClient.convertToType(data['DBEngineDescription'], 'String');
            }
            if (data.hasOwnProperty('DBEngineVersionDescription')) {
                obj['DBEngineVersionDescription'] = ApiClient.convertToType(data['DBEngineVersionDescription'], 'String');
            }
            if (data.hasOwnProperty('ValidUpgradeTarget')) {
                obj['ValidUpgradeTarget'] = ApiClient.convertToType(data['ValidUpgradeTarget'], Array);
            }
            if (data.hasOwnProperty('ExportableLogTypes')) {
                obj['ExportableLogTypes'] = ApiClient.convertToType(data['ExportableLogTypes'], Array);
            }
            if (data.hasOwnProperty('SupportsLogExportsToCloudwatchLogs')) {
                obj['SupportsLogExportsToCloudwatchLogs'] = ApiClient.convertToType(data['SupportsLogExportsToCloudwatchLogs'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DBEngineVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DBEngineVersion</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Engine`
        if (data['Engine']) { // data not null
          String.validateJSON(data['Engine']);
        }
        // validate the optional field `EngineVersion`
        if (data['EngineVersion']) { // data not null
          String.validateJSON(data['EngineVersion']);
        }
        // validate the optional field `DBParameterGroupFamily`
        if (data['DBParameterGroupFamily']) { // data not null
          String.validateJSON(data['DBParameterGroupFamily']);
        }
        // validate the optional field `DBEngineDescription`
        if (data['DBEngineDescription']) { // data not null
          String.validateJSON(data['DBEngineDescription']);
        }
        // validate the optional field `DBEngineVersionDescription`
        if (data['DBEngineVersionDescription']) { // data not null
          String.validateJSON(data['DBEngineVersionDescription']);
        }
        // validate the optional field `ValidUpgradeTarget`
        if (data['ValidUpgradeTarget']) { // data not null
          Array.validateJSON(data['ValidUpgradeTarget']);
        }
        // validate the optional field `ExportableLogTypes`
        if (data['ExportableLogTypes']) { // data not null
          Array.validateJSON(data['ExportableLogTypes']);
        }
        // validate the optional field `SupportsLogExportsToCloudwatchLogs`
        if (data['SupportsLogExportsToCloudwatchLogs']) { // data not null
          Boolean.validateJSON(data['SupportsLogExportsToCloudwatchLogs']);
        }

        return true;
    }


}



/**
 * @member {String} Engine
 */
DBEngineVersion.prototype['Engine'] = undefined;

/**
 * @member {String} EngineVersion
 */
DBEngineVersion.prototype['EngineVersion'] = undefined;

/**
 * @member {String} DBParameterGroupFamily
 */
DBEngineVersion.prototype['DBParameterGroupFamily'] = undefined;

/**
 * @member {String} DBEngineDescription
 */
DBEngineVersion.prototype['DBEngineDescription'] = undefined;

/**
 * @member {String} DBEngineVersionDescription
 */
DBEngineVersion.prototype['DBEngineVersionDescription'] = undefined;

/**
 * @member {Array} ValidUpgradeTarget
 */
DBEngineVersion.prototype['ValidUpgradeTarget'] = undefined;

/**
 * @member {Array} ExportableLogTypes
 */
DBEngineVersion.prototype['ExportableLogTypes'] = undefined;

/**
 * @member {Boolean} SupportsLogExportsToCloudwatchLogs
 */
DBEngineVersion.prototype['SupportsLogExportsToCloudwatchLogs'] = undefined;






export default DBEngineVersion;

