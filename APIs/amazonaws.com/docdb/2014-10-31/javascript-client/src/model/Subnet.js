/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubnetSubnetAvailabilityZone from './SubnetSubnetAvailabilityZone';

/**
 * The Subnet model module.
 * @module model/Subnet
 * @version 2014-10-31
 */
class Subnet {
    /**
     * Constructs a new <code>Subnet</code>.
     *  Detailed information about a subnet. 
     * @alias module:model/Subnet
     */
    constructor() { 
        
        Subnet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subnet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subnet} obj Optional instance to populate.
     * @return {module:model/Subnet} The populated <code>Subnet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subnet();

            if (data.hasOwnProperty('SubnetIdentifier')) {
                obj['SubnetIdentifier'] = ApiClient.convertToType(data['SubnetIdentifier'], 'String');
            }
            if (data.hasOwnProperty('SubnetAvailabilityZone')) {
                obj['SubnetAvailabilityZone'] = SubnetSubnetAvailabilityZone.constructFromObject(data['SubnetAvailabilityZone']);
            }
            if (data.hasOwnProperty('SubnetStatus')) {
                obj['SubnetStatus'] = ApiClient.convertToType(data['SubnetStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subnet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subnet</code>.
     */
    static validateJSON(data) {
        // validate the optional field `SubnetIdentifier`
        if (data['SubnetIdentifier']) { // data not null
          String.validateJSON(data['SubnetIdentifier']);
        }
        // validate the optional field `SubnetAvailabilityZone`
        if (data['SubnetAvailabilityZone']) { // data not null
          SubnetSubnetAvailabilityZone.validateJSON(data['SubnetAvailabilityZone']);
        }
        // validate the optional field `SubnetStatus`
        if (data['SubnetStatus']) { // data not null
          String.validateJSON(data['SubnetStatus']);
        }

        return true;
    }


}



/**
 * @member {String} SubnetIdentifier
 */
Subnet.prototype['SubnetIdentifier'] = undefined;

/**
 * @member {module:model/SubnetSubnetAvailabilityZone} SubnetAvailabilityZone
 */
Subnet.prototype['SubnetAvailabilityZone'] = undefined;

/**
 * @member {String} SubnetStatus
 */
Subnet.prototype['SubnetStatus'] = undefined;






export default Subnet;

