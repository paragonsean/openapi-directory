/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Certificate from './Certificate';

/**
 * The CertificateListInner model module.
 * @module model/CertificateListInner
 * @version 2014-10-31
 */
class CertificateListInner {
    /**
     * Constructs a new <code>CertificateListInner</code>.
     * @alias module:model/CertificateListInner
     * @implements module:model/Certificate
     */
    constructor() { 
        Certificate.initialize(this);
        CertificateListInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateListInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateListInner} obj Optional instance to populate.
     * @return {module:model/CertificateListInner} The populated <code>CertificateListInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateListInner();
            Certificate.constructFromObject(data, obj);

            if (data.hasOwnProperty('CertificateIdentifier')) {
                obj['CertificateIdentifier'] = ApiClient.convertToType(data['CertificateIdentifier'], 'String');
            }
            if (data.hasOwnProperty('CertificateType')) {
                obj['CertificateType'] = ApiClient.convertToType(data['CertificateType'], 'String');
            }
            if (data.hasOwnProperty('Thumbprint')) {
                obj['Thumbprint'] = ApiClient.convertToType(data['Thumbprint'], 'String');
            }
            if (data.hasOwnProperty('ValidFrom')) {
                obj['ValidFrom'] = ApiClient.convertToType(data['ValidFrom'], 'Date');
            }
            if (data.hasOwnProperty('ValidTill')) {
                obj['ValidTill'] = ApiClient.convertToType(data['ValidTill'], 'Date');
            }
            if (data.hasOwnProperty('CertificateArn')) {
                obj['CertificateArn'] = ApiClient.convertToType(data['CertificateArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateListInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateListInner</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CertificateIdentifier`
        if (data['CertificateIdentifier']) { // data not null
          String.validateJSON(data['CertificateIdentifier']);
        }
        // validate the optional field `CertificateType`
        if (data['CertificateType']) { // data not null
          String.validateJSON(data['CertificateType']);
        }
        // validate the optional field `Thumbprint`
        if (data['Thumbprint']) { // data not null
          String.validateJSON(data['Thumbprint']);
        }
        // validate the optional field `ValidFrom`
        if (data['ValidFrom']) { // data not null
          Date.validateJSON(data['ValidFrom']);
        }
        // validate the optional field `ValidTill`
        if (data['ValidTill']) { // data not null
          Date.validateJSON(data['ValidTill']);
        }
        // validate the optional field `CertificateArn`
        if (data['CertificateArn']) { // data not null
          String.validateJSON(data['CertificateArn']);
        }

        return true;
    }


}



/**
 * @member {String} CertificateIdentifier
 */
CertificateListInner.prototype['CertificateIdentifier'] = undefined;

/**
 * @member {String} CertificateType
 */
CertificateListInner.prototype['CertificateType'] = undefined;

/**
 * @member {String} Thumbprint
 */
CertificateListInner.prototype['Thumbprint'] = undefined;

/**
 * @member {Date} ValidFrom
 */
CertificateListInner.prototype['ValidFrom'] = undefined;

/**
 * @member {Date} ValidTill
 */
CertificateListInner.prototype['ValidTill'] = undefined;

/**
 * @member {String} CertificateArn
 */
CertificateListInner.prototype['CertificateArn'] = undefined;


// Implement Certificate interface:
/**
 * @member {String} CertificateIdentifier
 */
Certificate.prototype['CertificateIdentifier'] = undefined;
/**
 * @member {String} CertificateType
 */
Certificate.prototype['CertificateType'] = undefined;
/**
 * @member {String} Thumbprint
 */
Certificate.prototype['Thumbprint'] = undefined;
/**
 * @member {Date} ValidFrom
 */
Certificate.prototype['ValidFrom'] = undefined;
/**
 * @member {Date} ValidTill
 */
Certificate.prototype['ValidTill'] = undefined;
/**
 * @member {String} CertificateArn
 */
Certificate.prototype['CertificateArn'] = undefined;




export default CertificateListInner;

