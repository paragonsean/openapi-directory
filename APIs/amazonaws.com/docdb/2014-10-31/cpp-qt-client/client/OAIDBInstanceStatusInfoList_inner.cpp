/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBInstanceStatusInfoList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBInstanceStatusInfoList_inner::OAIDBInstanceStatusInfoList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBInstanceStatusInfoList_inner::OAIDBInstanceStatusInfoList_inner() {
    this->initializeModel();
}

OAIDBInstanceStatusInfoList_inner::~OAIDBInstanceStatusInfoList_inner() {}

void OAIDBInstanceStatusInfoList_inner::initializeModel() {

    m_status_type_isSet = false;
    m_status_type_isValid = false;

    m_normal_isSet = false;
    m_normal_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIDBInstanceStatusInfoList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBInstanceStatusInfoList_inner::fromJsonObject(QJsonObject json) {

    m_status_type_isValid = ::OpenAPI::fromJsonValue(m_status_type, json[QString("StatusType")]);
    m_status_type_isSet = !json[QString("StatusType")].isNull() && m_status_type_isValid;

    m_normal_isValid = ::OpenAPI::fromJsonValue(m_normal, json[QString("Normal")]);
    m_normal_isSet = !json[QString("Normal")].isNull() && m_normal_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIDBInstanceStatusInfoList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBInstanceStatusInfoList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_status_type_isSet) {
        obj.insert(QString("StatusType"), ::OpenAPI::toJsonValue(m_status_type));
    }
    if (m_normal_isSet) {
        obj.insert(QString("Normal"), ::OpenAPI::toJsonValue(m_normal));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIDBInstanceStatusInfoList_inner::getStatusType() const {
    return m_status_type;
}
void OAIDBInstanceStatusInfoList_inner::setStatusType(const QString &status_type) {
    m_status_type = status_type;
    m_status_type_isSet = true;
}

bool OAIDBInstanceStatusInfoList_inner::is_status_type_Set() const{
    return m_status_type_isSet;
}

bool OAIDBInstanceStatusInfoList_inner::is_status_type_Valid() const{
    return m_status_type_isValid;
}

bool OAIDBInstanceStatusInfoList_inner::getNormal() const {
    return m_normal;
}
void OAIDBInstanceStatusInfoList_inner::setNormal(const bool &normal) {
    m_normal = normal;
    m_normal_isSet = true;
}

bool OAIDBInstanceStatusInfoList_inner::is_normal_Set() const{
    return m_normal_isSet;
}

bool OAIDBInstanceStatusInfoList_inner::is_normal_Valid() const{
    return m_normal_isValid;
}

QString OAIDBInstanceStatusInfoList_inner::getStatus() const {
    return m_status;
}
void OAIDBInstanceStatusInfoList_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDBInstanceStatusInfoList_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDBInstanceStatusInfoList_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDBInstanceStatusInfoList_inner::getMessage() const {
    return m_message;
}
void OAIDBInstanceStatusInfoList_inner::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDBInstanceStatusInfoList_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDBInstanceStatusInfoList_inner::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIDBInstanceStatusInfoList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBInstanceStatusInfoList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
