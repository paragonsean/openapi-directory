/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBInstance_Endpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBInstance_Endpoint::OAIDBInstance_Endpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBInstance_Endpoint::OAIDBInstance_Endpoint() {
    this->initializeModel();
}

OAIDBInstance_Endpoint::~OAIDBInstance_Endpoint() {}

void OAIDBInstance_Endpoint::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;
}

void OAIDBInstance_Endpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBInstance_Endpoint::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("HostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("HostedZoneId")].isNull() && m_hosted_zone_id_isValid;
}

QString OAIDBInstance_Endpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBInstance_Endpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("HostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    return obj;
}

QString OAIDBInstance_Endpoint::getAddress() const {
    return m_address;
}
void OAIDBInstance_Endpoint::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIDBInstance_Endpoint::is_address_Set() const{
    return m_address_isSet;
}

bool OAIDBInstance_Endpoint::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIDBInstance_Endpoint::getPort() const {
    return m_port;
}
void OAIDBInstance_Endpoint::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDBInstance_Endpoint::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDBInstance_Endpoint::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIDBInstance_Endpoint::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAIDBInstance_Endpoint::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAIDBInstance_Endpoint::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAIDBInstance_Endpoint::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

bool OAIDBInstance_Endpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBInstance_Endpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
