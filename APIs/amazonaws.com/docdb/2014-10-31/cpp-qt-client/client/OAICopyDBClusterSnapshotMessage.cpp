/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyDBClusterSnapshotMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyDBClusterSnapshotMessage::OAICopyDBClusterSnapshotMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyDBClusterSnapshotMessage::OAICopyDBClusterSnapshotMessage() {
    this->initializeModel();
}

OAICopyDBClusterSnapshotMessage::~OAICopyDBClusterSnapshotMessage() {}

void OAICopyDBClusterSnapshotMessage::initializeModel() {

    m_source_db_cluster_snapshot_identifier_isSet = false;
    m_source_db_cluster_snapshot_identifier_isValid = false;

    m_target_db_cluster_snapshot_identifier_isSet = false;
    m_target_db_cluster_snapshot_identifier_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_pre_signed_url_isSet = false;
    m_pre_signed_url_isValid = false;

    m_copy_tags_isSet = false;
    m_copy_tags_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICopyDBClusterSnapshotMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyDBClusterSnapshotMessage::fromJsonObject(QJsonObject json) {

    m_source_db_cluster_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_source_db_cluster_snapshot_identifier, json[QString("SourceDBClusterSnapshotIdentifier")]);
    m_source_db_cluster_snapshot_identifier_isSet = !json[QString("SourceDBClusterSnapshotIdentifier")].isNull() && m_source_db_cluster_snapshot_identifier_isValid;

    m_target_db_cluster_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_target_db_cluster_snapshot_identifier, json[QString("TargetDBClusterSnapshotIdentifier")]);
    m_target_db_cluster_snapshot_identifier_isSet = !json[QString("TargetDBClusterSnapshotIdentifier")].isNull() && m_target_db_cluster_snapshot_identifier_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_pre_signed_url_isValid = ::OpenAPI::fromJsonValue(m_pre_signed_url, json[QString("PreSignedUrl")]);
    m_pre_signed_url_isSet = !json[QString("PreSignedUrl")].isNull() && m_pre_signed_url_isValid;

    m_copy_tags_isValid = ::OpenAPI::fromJsonValue(m_copy_tags, json[QString("CopyTags")]);
    m_copy_tags_isSet = !json[QString("CopyTags")].isNull() && m_copy_tags_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICopyDBClusterSnapshotMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyDBClusterSnapshotMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_source_db_cluster_snapshot_identifier_isSet) {
        obj.insert(QString("SourceDBClusterSnapshotIdentifier"), ::OpenAPI::toJsonValue(m_source_db_cluster_snapshot_identifier));
    }
    if (m_target_db_cluster_snapshot_identifier_isSet) {
        obj.insert(QString("TargetDBClusterSnapshotIdentifier"), ::OpenAPI::toJsonValue(m_target_db_cluster_snapshot_identifier));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_pre_signed_url_isSet) {
        obj.insert(QString("PreSignedUrl"), ::OpenAPI::toJsonValue(m_pre_signed_url));
    }
    if (m_copy_tags_isSet) {
        obj.insert(QString("CopyTags"), ::OpenAPI::toJsonValue(m_copy_tags));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICopyDBClusterSnapshotMessage::getSourceDbClusterSnapshotIdentifier() const {
    return m_source_db_cluster_snapshot_identifier;
}
void OAICopyDBClusterSnapshotMessage::setSourceDbClusterSnapshotIdentifier(const QString &source_db_cluster_snapshot_identifier) {
    m_source_db_cluster_snapshot_identifier = source_db_cluster_snapshot_identifier;
    m_source_db_cluster_snapshot_identifier_isSet = true;
}

bool OAICopyDBClusterSnapshotMessage::is_source_db_cluster_snapshot_identifier_Set() const{
    return m_source_db_cluster_snapshot_identifier_isSet;
}

bool OAICopyDBClusterSnapshotMessage::is_source_db_cluster_snapshot_identifier_Valid() const{
    return m_source_db_cluster_snapshot_identifier_isValid;
}

QString OAICopyDBClusterSnapshotMessage::getTargetDbClusterSnapshotIdentifier() const {
    return m_target_db_cluster_snapshot_identifier;
}
void OAICopyDBClusterSnapshotMessage::setTargetDbClusterSnapshotIdentifier(const QString &target_db_cluster_snapshot_identifier) {
    m_target_db_cluster_snapshot_identifier = target_db_cluster_snapshot_identifier;
    m_target_db_cluster_snapshot_identifier_isSet = true;
}

bool OAICopyDBClusterSnapshotMessage::is_target_db_cluster_snapshot_identifier_Set() const{
    return m_target_db_cluster_snapshot_identifier_isSet;
}

bool OAICopyDBClusterSnapshotMessage::is_target_db_cluster_snapshot_identifier_Valid() const{
    return m_target_db_cluster_snapshot_identifier_isValid;
}

QString OAICopyDBClusterSnapshotMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICopyDBClusterSnapshotMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICopyDBClusterSnapshotMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICopyDBClusterSnapshotMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAICopyDBClusterSnapshotMessage::getPreSignedUrl() const {
    return m_pre_signed_url;
}
void OAICopyDBClusterSnapshotMessage::setPreSignedUrl(const QString &pre_signed_url) {
    m_pre_signed_url = pre_signed_url;
    m_pre_signed_url_isSet = true;
}

bool OAICopyDBClusterSnapshotMessage::is_pre_signed_url_Set() const{
    return m_pre_signed_url_isSet;
}

bool OAICopyDBClusterSnapshotMessage::is_pre_signed_url_Valid() const{
    return m_pre_signed_url_isValid;
}

bool OAICopyDBClusterSnapshotMessage::getCopyTags() const {
    return m_copy_tags;
}
void OAICopyDBClusterSnapshotMessage::setCopyTags(const bool &copy_tags) {
    m_copy_tags = copy_tags;
    m_copy_tags_isSet = true;
}

bool OAICopyDBClusterSnapshotMessage::is_copy_tags_Set() const{
    return m_copy_tags_isSet;
}

bool OAICopyDBClusterSnapshotMessage::is_copy_tags_Valid() const{
    return m_copy_tags_isValid;
}

QList OAICopyDBClusterSnapshotMessage::getTags() const {
    return m_tags;
}
void OAICopyDBClusterSnapshotMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICopyDBClusterSnapshotMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICopyDBClusterSnapshotMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICopyDBClusterSnapshotMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_db_cluster_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_db_cluster_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_signed_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyDBClusterSnapshotMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_db_cluster_snapshot_identifier_isValid && m_target_db_cluster_snapshot_identifier_isValid && true;
}

} // namespace OpenAPI
