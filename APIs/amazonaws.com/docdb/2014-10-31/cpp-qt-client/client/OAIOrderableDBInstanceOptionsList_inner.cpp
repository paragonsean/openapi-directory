/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderableDBInstanceOptionsList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderableDBInstanceOptionsList_inner::OAIOrderableDBInstanceOptionsList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderableDBInstanceOptionsList_inner::OAIOrderableDBInstanceOptionsList_inner() {
    this->initializeModel();
}

OAIOrderableDBInstanceOptionsList_inner::~OAIOrderableDBInstanceOptionsList_inner() {}

void OAIOrderableDBInstanceOptionsList_inner::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_license_model_isSet = false;
    m_license_model_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;
}

void OAIOrderableDBInstanceOptionsList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderableDBInstanceOptionsList_inner::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_license_model_isValid = ::OpenAPI::fromJsonValue(m_license_model, json[QString("LicenseModel")]);
    m_license_model_isSet = !json[QString("LicenseModel")].isNull() && m_license_model_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("Vpc")]);
    m_vpc_isSet = !json[QString("Vpc")].isNull() && m_vpc_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderableDBInstanceOptionsList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_license_model_isSet) {
        obj.insert(QString("LicenseModel"), ::OpenAPI::toJsonValue(m_license_model));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_vpc_isSet) {
        obj.insert(QString("Vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    return obj;
}

QString OAIOrderableDBInstanceOptionsList_inner::getEngine() const {
    return m_engine;
}
void OAIOrderableDBInstanceOptionsList_inner::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::getEngineVersion() const {
    return m_engine_version;
}
void OAIOrderableDBInstanceOptionsList_inner::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAIOrderableDBInstanceOptionsList_inner::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

QString OAIOrderableDBInstanceOptionsList_inner::getLicenseModel() const {
    return m_license_model;
}
void OAIOrderableDBInstanceOptionsList_inner::setLicenseModel(const QString &license_model) {
    m_license_model = license_model;
    m_license_model_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_license_model_Set() const{
    return m_license_model_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_license_model_Valid() const{
    return m_license_model_isValid;
}

QList OAIOrderableDBInstanceOptionsList_inner::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIOrderableDBInstanceOptionsList_inner::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::getVpc() const {
    return m_vpc;
}
void OAIOrderableDBInstanceOptionsList_inner::setVpc(const bool &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAIOrderableDBInstanceOptionsList_inner::is_vpc_Valid() const{
    return m_vpc_isValid;
}

bool OAIOrderableDBInstanceOptionsList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderableDBInstanceOptionsList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
