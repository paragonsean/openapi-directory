/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate::OAICertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate::OAICertificate() {
    this->initializeModel();
}

OAICertificate::~OAICertificate() {}

void OAICertificate::initializeModel() {

    m_certificate_identifier_isSet = false;
    m_certificate_identifier_isValid = false;

    m_certificate_type_isSet = false;
    m_certificate_type_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_valid_till_isSet = false;
    m_valid_till_isValid = false;

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;
}

void OAICertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate::fromJsonObject(QJsonObject json) {

    m_certificate_identifier_isValid = ::OpenAPI::fromJsonValue(m_certificate_identifier, json[QString("CertificateIdentifier")]);
    m_certificate_identifier_isSet = !json[QString("CertificateIdentifier")].isNull() && m_certificate_identifier_isValid;

    m_certificate_type_isValid = ::OpenAPI::fromJsonValue(m_certificate_type, json[QString("CertificateType")]);
    m_certificate_type_isSet = !json[QString("CertificateType")].isNull() && m_certificate_type_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("Thumbprint")]);
    m_thumbprint_isSet = !json[QString("Thumbprint")].isNull() && m_thumbprint_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("ValidFrom")]);
    m_valid_from_isSet = !json[QString("ValidFrom")].isNull() && m_valid_from_isValid;

    m_valid_till_isValid = ::OpenAPI::fromJsonValue(m_valid_till, json[QString("ValidTill")]);
    m_valid_till_isSet = !json[QString("ValidTill")].isNull() && m_valid_till_isValid;

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("CertificateArn")]);
    m_certificate_arn_isSet = !json[QString("CertificateArn")].isNull() && m_certificate_arn_isValid;
}

QString OAICertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_identifier_isSet) {
        obj.insert(QString("CertificateIdentifier"), ::OpenAPI::toJsonValue(m_certificate_identifier));
    }
    if (m_certificate_type_isSet) {
        obj.insert(QString("CertificateType"), ::OpenAPI::toJsonValue(m_certificate_type));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("Thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("ValidFrom"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_valid_till_isSet) {
        obj.insert(QString("ValidTill"), ::OpenAPI::toJsonValue(m_valid_till));
    }
    if (m_certificate_arn_isSet) {
        obj.insert(QString("CertificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    return obj;
}

QString OAICertificate::getCertificateIdentifier() const {
    return m_certificate_identifier;
}
void OAICertificate::setCertificateIdentifier(const QString &certificate_identifier) {
    m_certificate_identifier = certificate_identifier;
    m_certificate_identifier_isSet = true;
}

bool OAICertificate::is_certificate_identifier_Set() const{
    return m_certificate_identifier_isSet;
}

bool OAICertificate::is_certificate_identifier_Valid() const{
    return m_certificate_identifier_isValid;
}

QString OAICertificate::getCertificateType() const {
    return m_certificate_type;
}
void OAICertificate::setCertificateType(const QString &certificate_type) {
    m_certificate_type = certificate_type;
    m_certificate_type_isSet = true;
}

bool OAICertificate::is_certificate_type_Set() const{
    return m_certificate_type_isSet;
}

bool OAICertificate::is_certificate_type_Valid() const{
    return m_certificate_type_isValid;
}

QString OAICertificate::getThumbprint() const {
    return m_thumbprint;
}
void OAICertificate::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAICertificate::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAICertificate::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QDateTime OAICertificate::getValidFrom() const {
    return m_valid_from;
}
void OAICertificate::setValidFrom(const QDateTime &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAICertificate::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAICertificate::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

QDateTime OAICertificate::getValidTill() const {
    return m_valid_till;
}
void OAICertificate::setValidTill(const QDateTime &valid_till) {
    m_valid_till = valid_till;
    m_valid_till_isSet = true;
}

bool OAICertificate::is_valid_till_Set() const{
    return m_valid_till_isSet;
}

bool OAICertificate::is_valid_till_Valid() const{
    return m_valid_till_isValid;
}

QString OAICertificate::getCertificateArn() const {
    return m_certificate_arn;
}
void OAICertificate::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAICertificate::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAICertificate::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

bool OAICertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_till_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
