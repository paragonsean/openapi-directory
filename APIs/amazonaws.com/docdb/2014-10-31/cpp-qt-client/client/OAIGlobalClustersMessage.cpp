/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalClustersMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalClustersMessage::OAIGlobalClustersMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalClustersMessage::OAIGlobalClustersMessage() {
    this->initializeModel();
}

OAIGlobalClustersMessage::~OAIGlobalClustersMessage() {}

void OAIGlobalClustersMessage::initializeModel() {

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_global_clusters_isSet = false;
    m_global_clusters_isValid = false;
}

void OAIGlobalClustersMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalClustersMessage::fromJsonObject(QJsonObject json) {

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_global_clusters_isValid = ::OpenAPI::fromJsonValue(m_global_clusters, json[QString("GlobalClusters")]);
    m_global_clusters_isSet = !json[QString("GlobalClusters")].isNull() && m_global_clusters_isValid;
}

QString OAIGlobalClustersMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalClustersMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_global_clusters.isSet()) {
        obj.insert(QString("GlobalClusters"), ::OpenAPI::toJsonValue(m_global_clusters));
    }
    return obj;
}

QString OAIGlobalClustersMessage::getMarker() const {
    return m_marker;
}
void OAIGlobalClustersMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIGlobalClustersMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIGlobalClustersMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

QList OAIGlobalClustersMessage::getGlobalClusters() const {
    return m_global_clusters;
}
void OAIGlobalClustersMessage::setGlobalClusters(const QList &global_clusters) {
    m_global_clusters = global_clusters;
    m_global_clusters_isSet = true;
}

bool OAIGlobalClustersMessage::is_global_clusters_Set() const{
    return m_global_clusters_isSet;
}

bool OAIGlobalClustersMessage::is_global_clusters_Valid() const{
    return m_global_clusters_isValid;
}

bool OAIGlobalClustersMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_clusters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalClustersMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
