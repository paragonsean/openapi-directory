/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDBClusterSnapshotList_inner.h
 *
 * 
 */

#ifndef OAIDBClusterSnapshotList_inner_H
#define OAIDBClusterSnapshotList_inner_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDBClusterSnapshotList_inner : public OAIObject {
public:
    OAIDBClusterSnapshotList_inner();
    OAIDBClusterSnapshotList_inner(QString json);
    ~OAIDBClusterSnapshotList_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    QString getDbClusterSnapshotIdentifier() const;
    void setDbClusterSnapshotIdentifier(const QString &db_cluster_snapshot_identifier);
    bool is_db_cluster_snapshot_identifier_Set() const;
    bool is_db_cluster_snapshot_identifier_Valid() const;

    QString getDbClusterIdentifier() const;
    void setDbClusterIdentifier(const QString &db_cluster_identifier);
    bool is_db_cluster_identifier_Set() const;
    bool is_db_cluster_identifier_Valid() const;

    QDateTime getSnapshotCreateTime() const;
    void setSnapshotCreateTime(const QDateTime &snapshot_create_time);
    bool is_snapshot_create_time_Set() const;
    bool is_snapshot_create_time_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getVpcId() const;
    void setVpcId(const QString &vpc_id);
    bool is_vpc_id_Set() const;
    bool is_vpc_id_Valid() const;

    QDateTime getClusterCreateTime() const;
    void setClusterCreateTime(const QDateTime &cluster_create_time);
    bool is_cluster_create_time_Set() const;
    bool is_cluster_create_time_Valid() const;

    QString getMasterUsername() const;
    void setMasterUsername(const QString &master_username);
    bool is_master_username_Set() const;
    bool is_master_username_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getSnapshotType() const;
    void setSnapshotType(const QString &snapshot_type);
    bool is_snapshot_type_Set() const;
    bool is_snapshot_type_Valid() const;

    qint32 getPercentProgress() const;
    void setPercentProgress(const qint32 &percent_progress);
    bool is_percent_progress_Set() const;
    bool is_percent_progress_Valid() const;

    bool getStorageEncrypted() const;
    void setStorageEncrypted(const bool &storage_encrypted);
    bool is_storage_encrypted_Set() const;
    bool is_storage_encrypted_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getDbClusterSnapshotArn() const;
    void setDbClusterSnapshotArn(const QString &db_cluster_snapshot_arn);
    bool is_db_cluster_snapshot_arn_Set() const;
    bool is_db_cluster_snapshot_arn_Valid() const;

    QString getSourceDbClusterSnapshotArn() const;
    void setSourceDbClusterSnapshotArn(const QString &source_db_cluster_snapshot_arn);
    bool is_source_db_cluster_snapshot_arn_Set() const;
    bool is_source_db_cluster_snapshot_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;

    QString m_db_cluster_snapshot_identifier;
    bool m_db_cluster_snapshot_identifier_isSet;
    bool m_db_cluster_snapshot_identifier_isValid;

    QString m_db_cluster_identifier;
    bool m_db_cluster_identifier_isSet;
    bool m_db_cluster_identifier_isValid;

    QDateTime m_snapshot_create_time;
    bool m_snapshot_create_time_isSet;
    bool m_snapshot_create_time_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_vpc_id;
    bool m_vpc_id_isSet;
    bool m_vpc_id_isValid;

    QDateTime m_cluster_create_time;
    bool m_cluster_create_time_isSet;
    bool m_cluster_create_time_isValid;

    QString m_master_username;
    bool m_master_username_isSet;
    bool m_master_username_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_snapshot_type;
    bool m_snapshot_type_isSet;
    bool m_snapshot_type_isValid;

    qint32 m_percent_progress;
    bool m_percent_progress_isSet;
    bool m_percent_progress_isValid;

    bool m_storage_encrypted;
    bool m_storage_encrypted_isSet;
    bool m_storage_encrypted_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_db_cluster_snapshot_arn;
    bool m_db_cluster_snapshot_arn_isSet;
    bool m_db_cluster_snapshot_arn_isValid;

    QString m_source_db_cluster_snapshot_arn;
    bool m_source_db_cluster_snapshot_arn_isSet;
    bool m_source_db_cluster_snapshot_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDBClusterSnapshotList_inner)

#endif // OAIDBClusterSnapshotList_inner_H
