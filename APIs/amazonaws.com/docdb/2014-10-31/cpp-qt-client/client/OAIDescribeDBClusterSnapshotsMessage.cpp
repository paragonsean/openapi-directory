/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDBClusterSnapshotsMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDBClusterSnapshotsMessage::OAIDescribeDBClusterSnapshotsMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDBClusterSnapshotsMessage::OAIDescribeDBClusterSnapshotsMessage() {
    this->initializeModel();
}

OAIDescribeDBClusterSnapshotsMessage::~OAIDescribeDBClusterSnapshotsMessage() {}

void OAIDescribeDBClusterSnapshotsMessage::initializeModel() {

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_db_cluster_snapshot_identifier_isSet = false;
    m_db_cluster_snapshot_identifier_isValid = false;

    m_snapshot_type_isSet = false;
    m_snapshot_type_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_include_shared_isSet = false;
    m_include_shared_isValid = false;

    m_include_public_isSet = false;
    m_include_public_isValid = false;
}

void OAIDescribeDBClusterSnapshotsMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDBClusterSnapshotsMessage::fromJsonObject(QJsonObject json) {

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_db_cluster_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_snapshot_identifier, json[QString("DBClusterSnapshotIdentifier")]);
    m_db_cluster_snapshot_identifier_isSet = !json[QString("DBClusterSnapshotIdentifier")].isNull() && m_db_cluster_snapshot_identifier_isValid;

    m_snapshot_type_isValid = ::OpenAPI::fromJsonValue(m_snapshot_type, json[QString("SnapshotType")]);
    m_snapshot_type_isSet = !json[QString("SnapshotType")].isNull() && m_snapshot_type_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_include_shared_isValid = ::OpenAPI::fromJsonValue(m_include_shared, json[QString("IncludeShared")]);
    m_include_shared_isSet = !json[QString("IncludeShared")].isNull() && m_include_shared_isValid;

    m_include_public_isValid = ::OpenAPI::fromJsonValue(m_include_public, json[QString("IncludePublic")]);
    m_include_public_isSet = !json[QString("IncludePublic")].isNull() && m_include_public_isValid;
}

QString OAIDescribeDBClusterSnapshotsMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDBClusterSnapshotsMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_db_cluster_snapshot_identifier_isSet) {
        obj.insert(QString("DBClusterSnapshotIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_snapshot_identifier));
    }
    if (m_snapshot_type_isSet) {
        obj.insert(QString("SnapshotType"), ::OpenAPI::toJsonValue(m_snapshot_type));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_include_shared_isSet) {
        obj.insert(QString("IncludeShared"), ::OpenAPI::toJsonValue(m_include_shared));
    }
    if (m_include_public_isSet) {
        obj.insert(QString("IncludePublic"), ::OpenAPI::toJsonValue(m_include_public));
    }
    return obj;
}

QString OAIDescribeDBClusterSnapshotsMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIDescribeDBClusterSnapshotsMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAIDescribeDBClusterSnapshotsMessage::getDbClusterSnapshotIdentifier() const {
    return m_db_cluster_snapshot_identifier;
}
void OAIDescribeDBClusterSnapshotsMessage::setDbClusterSnapshotIdentifier(const QString &db_cluster_snapshot_identifier) {
    m_db_cluster_snapshot_identifier = db_cluster_snapshot_identifier;
    m_db_cluster_snapshot_identifier_isSet = true;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_db_cluster_snapshot_identifier_Set() const{
    return m_db_cluster_snapshot_identifier_isSet;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_db_cluster_snapshot_identifier_Valid() const{
    return m_db_cluster_snapshot_identifier_isValid;
}

QString OAIDescribeDBClusterSnapshotsMessage::getSnapshotType() const {
    return m_snapshot_type;
}
void OAIDescribeDBClusterSnapshotsMessage::setSnapshotType(const QString &snapshot_type) {
    m_snapshot_type = snapshot_type;
    m_snapshot_type_isSet = true;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_snapshot_type_Set() const{
    return m_snapshot_type_isSet;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_snapshot_type_Valid() const{
    return m_snapshot_type_isValid;
}

QList OAIDescribeDBClusterSnapshotsMessage::getFilters() const {
    return m_filters;
}
void OAIDescribeDBClusterSnapshotsMessage::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIDescribeDBClusterSnapshotsMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeDBClusterSnapshotsMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeDBClusterSnapshotsMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeDBClusterSnapshotsMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

bool OAIDescribeDBClusterSnapshotsMessage::getIncludeShared() const {
    return m_include_shared;
}
void OAIDescribeDBClusterSnapshotsMessage::setIncludeShared(const bool &include_shared) {
    m_include_shared = include_shared;
    m_include_shared_isSet = true;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_include_shared_Set() const{
    return m_include_shared_isSet;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_include_shared_Valid() const{
    return m_include_shared_isValid;
}

bool OAIDescribeDBClusterSnapshotsMessage::getIncludePublic() const {
    return m_include_public;
}
void OAIDescribeDBClusterSnapshotsMessage::setIncludePublic(const bool &include_public) {
    m_include_public = include_public;
    m_include_public_isSet = true;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_include_public_Set() const{
    return m_include_public_isSet;
}

bool OAIDescribeDBClusterSnapshotsMessage::is_include_public_Valid() const{
    return m_include_public_isValid;
}

bool OAIDescribeDBClusterSnapshotsMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_public_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDBClusterSnapshotsMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
