/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEventCategoriesMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEventCategoriesMessage::OAIDescribeEventCategoriesMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEventCategoriesMessage::OAIDescribeEventCategoriesMessage() {
    this->initializeModel();
}

OAIDescribeEventCategoriesMessage::~OAIDescribeEventCategoriesMessage() {}

void OAIDescribeEventCategoriesMessage::initializeModel() {

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAIDescribeEventCategoriesMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEventCategoriesMessage::fromJsonObject(QJsonObject json) {

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;
}

QString OAIDescribeEventCategoriesMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEventCategoriesMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QString OAIDescribeEventCategoriesMessage::getSourceType() const {
    return m_source_type;
}
void OAIDescribeEventCategoriesMessage::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIDescribeEventCategoriesMessage::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIDescribeEventCategoriesMessage::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QList OAIDescribeEventCategoriesMessage::getFilters() const {
    return m_filters;
}
void OAIDescribeEventCategoriesMessage::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeEventCategoriesMessage::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeEventCategoriesMessage::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAIDescribeEventCategoriesMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEventCategoriesMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
