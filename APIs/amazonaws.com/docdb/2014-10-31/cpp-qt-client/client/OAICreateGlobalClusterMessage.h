/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateGlobalClusterMessage.h
 *
 * Represents the input to &lt;a&gt;CreateGlobalCluster&lt;/a&gt;.
 */

#ifndef OAICreateGlobalClusterMessage_H
#define OAICreateGlobalClusterMessage_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateGlobalClusterMessage : public OAIObject {
public:
    OAICreateGlobalClusterMessage();
    OAICreateGlobalClusterMessage(QString json);
    ~OAICreateGlobalClusterMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getGlobalClusterIdentifier() const;
    void setGlobalClusterIdentifier(const QString &global_cluster_identifier);
    bool is_global_cluster_identifier_Set() const;
    bool is_global_cluster_identifier_Valid() const;

    QString getSourceDbClusterIdentifier() const;
    void setSourceDbClusterIdentifier(const QString &source_db_cluster_identifier);
    bool is_source_db_cluster_identifier_Set() const;
    bool is_source_db_cluster_identifier_Valid() const;

    QString getEngine() const;
    void setEngine(const QString &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    bool getDeletionProtection() const;
    void setDeletionProtection(const bool &deletion_protection);
    bool is_deletion_protection_Set() const;
    bool is_deletion_protection_Valid() const;

    QString getDatabaseName() const;
    void setDatabaseName(const QString &database_name);
    bool is_database_name_Set() const;
    bool is_database_name_Valid() const;

    bool getStorageEncrypted() const;
    void setStorageEncrypted(const bool &storage_encrypted);
    bool is_storage_encrypted_Set() const;
    bool is_storage_encrypted_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_global_cluster_identifier;
    bool m_global_cluster_identifier_isSet;
    bool m_global_cluster_identifier_isValid;

    QString m_source_db_cluster_identifier;
    bool m_source_db_cluster_identifier_isSet;
    bool m_source_db_cluster_identifier_isValid;

    QString m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    bool m_deletion_protection;
    bool m_deletion_protection_isSet;
    bool m_deletion_protection_isValid;

    QString m_database_name;
    bool m_database_name_isSet;
    bool m_database_name_isValid;

    bool m_storage_encrypted;
    bool m_storage_encrypted_isSet;
    bool m_storage_encrypted_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateGlobalClusterMessage)

#endif // OAICreateGlobalClusterMessage_H
