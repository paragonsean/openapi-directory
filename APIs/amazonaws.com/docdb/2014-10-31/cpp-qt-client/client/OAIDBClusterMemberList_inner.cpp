/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBClusterMemberList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBClusterMemberList_inner::OAIDBClusterMemberList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBClusterMemberList_inner::OAIDBClusterMemberList_inner() {
    this->initializeModel();
}

OAIDBClusterMemberList_inner::~OAIDBClusterMemberList_inner() {}

void OAIDBClusterMemberList_inner::initializeModel() {

    m_db_instance_identifier_isSet = false;
    m_db_instance_identifier_isValid = false;

    m_is_cluster_writer_isSet = false;
    m_is_cluster_writer_isValid = false;

    m_db_cluster_parameter_group_status_isSet = false;
    m_db_cluster_parameter_group_status_isValid = false;

    m_promotion_tier_isSet = false;
    m_promotion_tier_isValid = false;
}

void OAIDBClusterMemberList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBClusterMemberList_inner::fromJsonObject(QJsonObject json) {

    m_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_instance_identifier, json[QString("DBInstanceIdentifier")]);
    m_db_instance_identifier_isSet = !json[QString("DBInstanceIdentifier")].isNull() && m_db_instance_identifier_isValid;

    m_is_cluster_writer_isValid = ::OpenAPI::fromJsonValue(m_is_cluster_writer, json[QString("IsClusterWriter")]);
    m_is_cluster_writer_isSet = !json[QString("IsClusterWriter")].isNull() && m_is_cluster_writer_isValid;

    m_db_cluster_parameter_group_status_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group_status, json[QString("DBClusterParameterGroupStatus")]);
    m_db_cluster_parameter_group_status_isSet = !json[QString("DBClusterParameterGroupStatus")].isNull() && m_db_cluster_parameter_group_status_isValid;

    m_promotion_tier_isValid = ::OpenAPI::fromJsonValue(m_promotion_tier, json[QString("PromotionTier")]);
    m_promotion_tier_isSet = !json[QString("PromotionTier")].isNull() && m_promotion_tier_isValid;
}

QString OAIDBClusterMemberList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBClusterMemberList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_db_instance_identifier_isSet) {
        obj.insert(QString("DBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_db_instance_identifier));
    }
    if (m_is_cluster_writer_isSet) {
        obj.insert(QString("IsClusterWriter"), ::OpenAPI::toJsonValue(m_is_cluster_writer));
    }
    if (m_db_cluster_parameter_group_status_isSet) {
        obj.insert(QString("DBClusterParameterGroupStatus"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group_status));
    }
    if (m_promotion_tier_isSet) {
        obj.insert(QString("PromotionTier"), ::OpenAPI::toJsonValue(m_promotion_tier));
    }
    return obj;
}

QString OAIDBClusterMemberList_inner::getDbInstanceIdentifier() const {
    return m_db_instance_identifier;
}
void OAIDBClusterMemberList_inner::setDbInstanceIdentifier(const QString &db_instance_identifier) {
    m_db_instance_identifier = db_instance_identifier;
    m_db_instance_identifier_isSet = true;
}

bool OAIDBClusterMemberList_inner::is_db_instance_identifier_Set() const{
    return m_db_instance_identifier_isSet;
}

bool OAIDBClusterMemberList_inner::is_db_instance_identifier_Valid() const{
    return m_db_instance_identifier_isValid;
}

bool OAIDBClusterMemberList_inner::getIsClusterWriter() const {
    return m_is_cluster_writer;
}
void OAIDBClusterMemberList_inner::setIsClusterWriter(const bool &is_cluster_writer) {
    m_is_cluster_writer = is_cluster_writer;
    m_is_cluster_writer_isSet = true;
}

bool OAIDBClusterMemberList_inner::is_is_cluster_writer_Set() const{
    return m_is_cluster_writer_isSet;
}

bool OAIDBClusterMemberList_inner::is_is_cluster_writer_Valid() const{
    return m_is_cluster_writer_isValid;
}

QString OAIDBClusterMemberList_inner::getDbClusterParameterGroupStatus() const {
    return m_db_cluster_parameter_group_status;
}
void OAIDBClusterMemberList_inner::setDbClusterParameterGroupStatus(const QString &db_cluster_parameter_group_status) {
    m_db_cluster_parameter_group_status = db_cluster_parameter_group_status;
    m_db_cluster_parameter_group_status_isSet = true;
}

bool OAIDBClusterMemberList_inner::is_db_cluster_parameter_group_status_Set() const{
    return m_db_cluster_parameter_group_status_isSet;
}

bool OAIDBClusterMemberList_inner::is_db_cluster_parameter_group_status_Valid() const{
    return m_db_cluster_parameter_group_status_isValid;
}

qint32 OAIDBClusterMemberList_inner::getPromotionTier() const {
    return m_promotion_tier;
}
void OAIDBClusterMemberList_inner::setPromotionTier(const qint32 &promotion_tier) {
    m_promotion_tier = promotion_tier;
    m_promotion_tier_isSet = true;
}

bool OAIDBClusterMemberList_inner::is_promotion_tier_Set() const{
    return m_promotion_tier_isSet;
}

bool OAIDBClusterMemberList_inner::is_promotion_tier_Valid() const{
    return m_promotion_tier_isValid;
}

bool OAIDBClusterMemberList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cluster_writer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_parameter_group_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBClusterMemberList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
