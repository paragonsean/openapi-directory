/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPendingModifiedValues.h
 *
 *  One or more modified settings for an instance. These modified settings have been requested, but haven&#39;t been applied yet.
 */

#ifndef OAIPendingModifiedValues_H
#define OAIPendingModifiedValues_H

#include <QJsonObject>

#include "OAIPendingModifiedValues_PendingCloudwatchLogsExports.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPendingModifiedValues_PendingCloudwatchLogsExports;

class OAIPendingModifiedValues : public OAIObject {
public:
    OAIPendingModifiedValues();
    OAIPendingModifiedValues(QString json);
    ~OAIPendingModifiedValues() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDbInstanceClass() const;
    void setDbInstanceClass(const QString &db_instance_class);
    bool is_db_instance_class_Set() const;
    bool is_db_instance_class_Valid() const;

    qint32 getAllocatedStorage() const;
    void setAllocatedStorage(const qint32 &allocated_storage);
    bool is_allocated_storage_Set() const;
    bool is_allocated_storage_Valid() const;

    QString getMasterUserPassword() const;
    void setMasterUserPassword(const QString &master_user_password);
    bool is_master_user_password_Set() const;
    bool is_master_user_password_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    qint32 getBackupRetentionPeriod() const;
    void setBackupRetentionPeriod(const qint32 &backup_retention_period);
    bool is_backup_retention_period_Set() const;
    bool is_backup_retention_period_Valid() const;

    bool getMultiAz() const;
    void setMultiAz(const bool &multi_az);
    bool is_multi_az_Set() const;
    bool is_multi_az_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    QString getLicenseModel() const;
    void setLicenseModel(const QString &license_model);
    bool is_license_model_Set() const;
    bool is_license_model_Valid() const;

    qint32 getIops() const;
    void setIops(const qint32 &iops);
    bool is_iops_Set() const;
    bool is_iops_Valid() const;

    QString getDbInstanceIdentifier() const;
    void setDbInstanceIdentifier(const QString &db_instance_identifier);
    bool is_db_instance_identifier_Set() const;
    bool is_db_instance_identifier_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QString getCaCertificateIdentifier() const;
    void setCaCertificateIdentifier(const QString &ca_certificate_identifier);
    bool is_ca_certificate_identifier_Set() const;
    bool is_ca_certificate_identifier_Valid() const;

    QString getDbSubnetGroupName() const;
    void setDbSubnetGroupName(const QString &db_subnet_group_name);
    bool is_db_subnet_group_name_Set() const;
    bool is_db_subnet_group_name_Valid() const;

    OAIPendingModifiedValues_PendingCloudwatchLogsExports getPendingCloudwatchLogsExports() const;
    void setPendingCloudwatchLogsExports(const OAIPendingModifiedValues_PendingCloudwatchLogsExports &pending_cloudwatch_logs_exports);
    bool is_pending_cloudwatch_logs_exports_Set() const;
    bool is_pending_cloudwatch_logs_exports_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_db_instance_class;
    bool m_db_instance_class_isSet;
    bool m_db_instance_class_isValid;

    qint32 m_allocated_storage;
    bool m_allocated_storage_isSet;
    bool m_allocated_storage_isValid;

    QString m_master_user_password;
    bool m_master_user_password_isSet;
    bool m_master_user_password_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    qint32 m_backup_retention_period;
    bool m_backup_retention_period_isSet;
    bool m_backup_retention_period_isValid;

    bool m_multi_az;
    bool m_multi_az_isSet;
    bool m_multi_az_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    QString m_license_model;
    bool m_license_model_isSet;
    bool m_license_model_isValid;

    qint32 m_iops;
    bool m_iops_isSet;
    bool m_iops_isValid;

    QString m_db_instance_identifier;
    bool m_db_instance_identifier_isSet;
    bool m_db_instance_identifier_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QString m_ca_certificate_identifier;
    bool m_ca_certificate_identifier_isSet;
    bool m_ca_certificate_identifier_isValid;

    QString m_db_subnet_group_name;
    bool m_db_subnet_group_name_isSet;
    bool m_db_subnet_group_name_isValid;

    OAIPendingModifiedValues_PendingCloudwatchLogsExports m_pending_cloudwatch_logs_exports;
    bool m_pending_cloudwatch_logs_exports_isSet;
    bool m_pending_cloudwatch_logs_exports_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPendingModifiedValues)

#endif // OAIPendingModifiedValues_H
