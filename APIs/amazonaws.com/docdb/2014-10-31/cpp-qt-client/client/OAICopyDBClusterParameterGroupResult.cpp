/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyDBClusterParameterGroupResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyDBClusterParameterGroupResult::OAICopyDBClusterParameterGroupResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyDBClusterParameterGroupResult::OAICopyDBClusterParameterGroupResult() {
    this->initializeModel();
}

OAICopyDBClusterParameterGroupResult::~OAICopyDBClusterParameterGroupResult() {}

void OAICopyDBClusterParameterGroupResult::initializeModel() {

    m_db_cluster_parameter_group_isSet = false;
    m_db_cluster_parameter_group_isValid = false;
}

void OAICopyDBClusterParameterGroupResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyDBClusterParameterGroupResult::fromJsonObject(QJsonObject json) {

    m_db_cluster_parameter_group_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group, json[QString("DBClusterParameterGroup")]);
    m_db_cluster_parameter_group_isSet = !json[QString("DBClusterParameterGroup")].isNull() && m_db_cluster_parameter_group_isValid;
}

QString OAICopyDBClusterParameterGroupResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyDBClusterParameterGroupResult::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_parameter_group.isSet()) {
        obj.insert(QString("DBClusterParameterGroup"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group));
    }
    return obj;
}

OAIDBClusterParameterGroup OAICopyDBClusterParameterGroupResult::getDbClusterParameterGroup() const {
    return m_db_cluster_parameter_group;
}
void OAICopyDBClusterParameterGroupResult::setDbClusterParameterGroup(const OAIDBClusterParameterGroup &db_cluster_parameter_group) {
    m_db_cluster_parameter_group = db_cluster_parameter_group;
    m_db_cluster_parameter_group_isSet = true;
}

bool OAICopyDBClusterParameterGroupResult::is_db_cluster_parameter_group_Set() const{
    return m_db_cluster_parameter_group_isSet;
}

bool OAICopyDBClusterParameterGroupResult::is_db_cluster_parameter_group_Valid() const{
    return m_db_cluster_parameter_group_isValid;
}

bool OAICopyDBClusterParameterGroupResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_parameter_group.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyDBClusterParameterGroupResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
