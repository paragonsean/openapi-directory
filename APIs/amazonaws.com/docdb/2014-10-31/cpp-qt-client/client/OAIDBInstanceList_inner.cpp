/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBInstanceList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBInstanceList_inner::OAIDBInstanceList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBInstanceList_inner::OAIDBInstanceList_inner() {
    this->initializeModel();
}

OAIDBInstanceList_inner::~OAIDBInstanceList_inner() {}

void OAIDBInstanceList_inner::initializeModel() {

    m_db_instance_identifier_isSet = false;
    m_db_instance_identifier_isValid = false;

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_db_instance_status_isSet = false;
    m_db_instance_status_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_instance_create_time_isSet = false;
    m_instance_create_time_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_vpc_security_groups_isSet = false;
    m_vpc_security_groups_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_db_subnet_group_isSet = false;
    m_db_subnet_group_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_pending_modified_values_isSet = false;
    m_pending_modified_values_isValid = false;

    m_latest_restorable_time_isSet = false;
    m_latest_restorable_time_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_publicly_accessible_isSet = false;
    m_publicly_accessible_isValid = false;

    m_status_infos_isSet = false;
    m_status_infos_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_storage_encrypted_isSet = false;
    m_storage_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_dbi_resource_id_isSet = false;
    m_dbi_resource_id_isValid = false;

    m_ca_certificate_identifier_isSet = false;
    m_ca_certificate_identifier_isValid = false;

    m_copy_tags_to_snapshot_isSet = false;
    m_copy_tags_to_snapshot_isValid = false;

    m_promotion_tier_isSet = false;
    m_promotion_tier_isValid = false;

    m_db_instance_arn_isSet = false;
    m_db_instance_arn_isValid = false;

    m_enabled_cloudwatch_logs_exports_isSet = false;
    m_enabled_cloudwatch_logs_exports_isValid = false;
}

void OAIDBInstanceList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBInstanceList_inner::fromJsonObject(QJsonObject json) {

    m_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_instance_identifier, json[QString("DBInstanceIdentifier")]);
    m_db_instance_identifier_isSet = !json[QString("DBInstanceIdentifier")].isNull() && m_db_instance_identifier_isValid;

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_db_instance_status_isValid = ::OpenAPI::fromJsonValue(m_db_instance_status, json[QString("DBInstanceStatus")]);
    m_db_instance_status_isSet = !json[QString("DBInstanceStatus")].isNull() && m_db_instance_status_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_instance_create_time_isValid = ::OpenAPI::fromJsonValue(m_instance_create_time, json[QString("InstanceCreateTime")]);
    m_instance_create_time_isSet = !json[QString("InstanceCreateTime")].isNull() && m_instance_create_time_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_vpc_security_groups_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_groups, json[QString("VpcSecurityGroups")]);
    m_vpc_security_groups_isSet = !json[QString("VpcSecurityGroups")].isNull() && m_vpc_security_groups_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_db_subnet_group_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group, json[QString("DBSubnetGroup")]);
    m_db_subnet_group_isSet = !json[QString("DBSubnetGroup")].isNull() && m_db_subnet_group_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_pending_modified_values_isValid = ::OpenAPI::fromJsonValue(m_pending_modified_values, json[QString("PendingModifiedValues")]);
    m_pending_modified_values_isSet = !json[QString("PendingModifiedValues")].isNull() && m_pending_modified_values_isValid;

    m_latest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_latest_restorable_time, json[QString("LatestRestorableTime")]);
    m_latest_restorable_time_isSet = !json[QString("LatestRestorableTime")].isNull() && m_latest_restorable_time_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_publicly_accessible_isValid = ::OpenAPI::fromJsonValue(m_publicly_accessible, json[QString("PubliclyAccessible")]);
    m_publicly_accessible_isSet = !json[QString("PubliclyAccessible")].isNull() && m_publicly_accessible_isValid;

    m_status_infos_isValid = ::OpenAPI::fromJsonValue(m_status_infos, json[QString("StatusInfos")]);
    m_status_infos_isSet = !json[QString("StatusInfos")].isNull() && m_status_infos_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_storage_encrypted_isValid = ::OpenAPI::fromJsonValue(m_storage_encrypted, json[QString("StorageEncrypted")]);
    m_storage_encrypted_isSet = !json[QString("StorageEncrypted")].isNull() && m_storage_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_dbi_resource_id_isValid = ::OpenAPI::fromJsonValue(m_dbi_resource_id, json[QString("DbiResourceId")]);
    m_dbi_resource_id_isSet = !json[QString("DbiResourceId")].isNull() && m_dbi_resource_id_isValid;

    m_ca_certificate_identifier_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate_identifier, json[QString("CACertificateIdentifier")]);
    m_ca_certificate_identifier_isSet = !json[QString("CACertificateIdentifier")].isNull() && m_ca_certificate_identifier_isValid;

    m_copy_tags_to_snapshot_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_snapshot, json[QString("CopyTagsToSnapshot")]);
    m_copy_tags_to_snapshot_isSet = !json[QString("CopyTagsToSnapshot")].isNull() && m_copy_tags_to_snapshot_isValid;

    m_promotion_tier_isValid = ::OpenAPI::fromJsonValue(m_promotion_tier, json[QString("PromotionTier")]);
    m_promotion_tier_isSet = !json[QString("PromotionTier")].isNull() && m_promotion_tier_isValid;

    m_db_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_db_instance_arn, json[QString("DBInstanceArn")]);
    m_db_instance_arn_isSet = !json[QString("DBInstanceArn")].isNull() && m_db_instance_arn_isValid;

    m_enabled_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enabled_cloudwatch_logs_exports, json[QString("EnabledCloudwatchLogsExports")]);
    m_enabled_cloudwatch_logs_exports_isSet = !json[QString("EnabledCloudwatchLogsExports")].isNull() && m_enabled_cloudwatch_logs_exports_isValid;
}

QString OAIDBInstanceList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBInstanceList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_db_instance_identifier_isSet) {
        obj.insert(QString("DBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_db_instance_identifier));
    }
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_db_instance_status_isSet) {
        obj.insert(QString("DBInstanceStatus"), ::OpenAPI::toJsonValue(m_db_instance_status));
    }
    if (m_endpoint.isSet()) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_instance_create_time_isSet) {
        obj.insert(QString("InstanceCreateTime"), ::OpenAPI::toJsonValue(m_instance_create_time));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_vpc_security_groups.isSet()) {
        obj.insert(QString("VpcSecurityGroups"), ::OpenAPI::toJsonValue(m_vpc_security_groups));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_db_subnet_group.isSet()) {
        obj.insert(QString("DBSubnetGroup"), ::OpenAPI::toJsonValue(m_db_subnet_group));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_pending_modified_values.isSet()) {
        obj.insert(QString("PendingModifiedValues"), ::OpenAPI::toJsonValue(m_pending_modified_values));
    }
    if (m_latest_restorable_time_isSet) {
        obj.insert(QString("LatestRestorableTime"), ::OpenAPI::toJsonValue(m_latest_restorable_time));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_publicly_accessible_isSet) {
        obj.insert(QString("PubliclyAccessible"), ::OpenAPI::toJsonValue(m_publicly_accessible));
    }
    if (m_status_infos.isSet()) {
        obj.insert(QString("StatusInfos"), ::OpenAPI::toJsonValue(m_status_infos));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_storage_encrypted_isSet) {
        obj.insert(QString("StorageEncrypted"), ::OpenAPI::toJsonValue(m_storage_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_dbi_resource_id_isSet) {
        obj.insert(QString("DbiResourceId"), ::OpenAPI::toJsonValue(m_dbi_resource_id));
    }
    if (m_ca_certificate_identifier_isSet) {
        obj.insert(QString("CACertificateIdentifier"), ::OpenAPI::toJsonValue(m_ca_certificate_identifier));
    }
    if (m_copy_tags_to_snapshot_isSet) {
        obj.insert(QString("CopyTagsToSnapshot"), ::OpenAPI::toJsonValue(m_copy_tags_to_snapshot));
    }
    if (m_promotion_tier_isSet) {
        obj.insert(QString("PromotionTier"), ::OpenAPI::toJsonValue(m_promotion_tier));
    }
    if (m_db_instance_arn_isSet) {
        obj.insert(QString("DBInstanceArn"), ::OpenAPI::toJsonValue(m_db_instance_arn));
    }
    if (m_enabled_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnabledCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enabled_cloudwatch_logs_exports));
    }
    return obj;
}

QString OAIDBInstanceList_inner::getDbInstanceIdentifier() const {
    return m_db_instance_identifier;
}
void OAIDBInstanceList_inner::setDbInstanceIdentifier(const QString &db_instance_identifier) {
    m_db_instance_identifier = db_instance_identifier;
    m_db_instance_identifier_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_identifier_Set() const{
    return m_db_instance_identifier_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_identifier_Valid() const{
    return m_db_instance_identifier_isValid;
}

QString OAIDBInstanceList_inner::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAIDBInstanceList_inner::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

QString OAIDBInstanceList_inner::getEngine() const {
    return m_engine;
}
void OAIDBInstanceList_inner::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDBInstanceList_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDBInstanceList_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDBInstanceList_inner::getDbInstanceStatus() const {
    return m_db_instance_status;
}
void OAIDBInstanceList_inner::setDbInstanceStatus(const QString &db_instance_status) {
    m_db_instance_status = db_instance_status;
    m_db_instance_status_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_status_Set() const{
    return m_db_instance_status_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_status_Valid() const{
    return m_db_instance_status_isValid;
}

OAIDBInstance_Endpoint OAIDBInstanceList_inner::getEndpoint() const {
    return m_endpoint;
}
void OAIDBInstanceList_inner::setEndpoint(const OAIDBInstance_Endpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIDBInstanceList_inner::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIDBInstanceList_inner::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QDateTime OAIDBInstanceList_inner::getInstanceCreateTime() const {
    return m_instance_create_time;
}
void OAIDBInstanceList_inner::setInstanceCreateTime(const QDateTime &instance_create_time) {
    m_instance_create_time = instance_create_time;
    m_instance_create_time_isSet = true;
}

bool OAIDBInstanceList_inner::is_instance_create_time_Set() const{
    return m_instance_create_time_isSet;
}

bool OAIDBInstanceList_inner::is_instance_create_time_Valid() const{
    return m_instance_create_time_isValid;
}

QString OAIDBInstanceList_inner::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAIDBInstanceList_inner::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAIDBInstanceList_inner::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAIDBInstanceList_inner::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

qint32 OAIDBInstanceList_inner::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAIDBInstanceList_inner::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAIDBInstanceList_inner::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAIDBInstanceList_inner::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

QList OAIDBInstanceList_inner::getVpcSecurityGroups() const {
    return m_vpc_security_groups;
}
void OAIDBInstanceList_inner::setVpcSecurityGroups(const QList &vpc_security_groups) {
    m_vpc_security_groups = vpc_security_groups;
    m_vpc_security_groups_isSet = true;
}

bool OAIDBInstanceList_inner::is_vpc_security_groups_Set() const{
    return m_vpc_security_groups_isSet;
}

bool OAIDBInstanceList_inner::is_vpc_security_groups_Valid() const{
    return m_vpc_security_groups_isValid;
}

QString OAIDBInstanceList_inner::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIDBInstanceList_inner::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIDBInstanceList_inner::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIDBInstanceList_inner::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

OAIDBInstance_DBSubnetGroup OAIDBInstanceList_inner::getDbSubnetGroup() const {
    return m_db_subnet_group;
}
void OAIDBInstanceList_inner::setDbSubnetGroup(const OAIDBInstance_DBSubnetGroup &db_subnet_group) {
    m_db_subnet_group = db_subnet_group;
    m_db_subnet_group_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_subnet_group_Set() const{
    return m_db_subnet_group_isSet;
}

bool OAIDBInstanceList_inner::is_db_subnet_group_Valid() const{
    return m_db_subnet_group_isValid;
}

QString OAIDBInstanceList_inner::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIDBInstanceList_inner::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIDBInstanceList_inner::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIDBInstanceList_inner::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

OAIDBInstance_PendingModifiedValues OAIDBInstanceList_inner::getPendingModifiedValues() const {
    return m_pending_modified_values;
}
void OAIDBInstanceList_inner::setPendingModifiedValues(const OAIDBInstance_PendingModifiedValues &pending_modified_values) {
    m_pending_modified_values = pending_modified_values;
    m_pending_modified_values_isSet = true;
}

bool OAIDBInstanceList_inner::is_pending_modified_values_Set() const{
    return m_pending_modified_values_isSet;
}

bool OAIDBInstanceList_inner::is_pending_modified_values_Valid() const{
    return m_pending_modified_values_isValid;
}

QDateTime OAIDBInstanceList_inner::getLatestRestorableTime() const {
    return m_latest_restorable_time;
}
void OAIDBInstanceList_inner::setLatestRestorableTime(const QDateTime &latest_restorable_time) {
    m_latest_restorable_time = latest_restorable_time;
    m_latest_restorable_time_isSet = true;
}

bool OAIDBInstanceList_inner::is_latest_restorable_time_Set() const{
    return m_latest_restorable_time_isSet;
}

bool OAIDBInstanceList_inner::is_latest_restorable_time_Valid() const{
    return m_latest_restorable_time_isValid;
}

QString OAIDBInstanceList_inner::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBInstanceList_inner::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBInstanceList_inner::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBInstanceList_inner::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

bool OAIDBInstanceList_inner::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAIDBInstanceList_inner::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAIDBInstanceList_inner::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAIDBInstanceList_inner::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

bool OAIDBInstanceList_inner::getPubliclyAccessible() const {
    return m_publicly_accessible;
}
void OAIDBInstanceList_inner::setPubliclyAccessible(const bool &publicly_accessible) {
    m_publicly_accessible = publicly_accessible;
    m_publicly_accessible_isSet = true;
}

bool OAIDBInstanceList_inner::is_publicly_accessible_Set() const{
    return m_publicly_accessible_isSet;
}

bool OAIDBInstanceList_inner::is_publicly_accessible_Valid() const{
    return m_publicly_accessible_isValid;
}

QList OAIDBInstanceList_inner::getStatusInfos() const {
    return m_status_infos;
}
void OAIDBInstanceList_inner::setStatusInfos(const QList &status_infos) {
    m_status_infos = status_infos;
    m_status_infos_isSet = true;
}

bool OAIDBInstanceList_inner::is_status_infos_Set() const{
    return m_status_infos_isSet;
}

bool OAIDBInstanceList_inner::is_status_infos_Valid() const{
    return m_status_infos_isValid;
}

QString OAIDBInstanceList_inner::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIDBInstanceList_inner::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIDBInstanceList_inner::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

bool OAIDBInstanceList_inner::getStorageEncrypted() const {
    return m_storage_encrypted;
}
void OAIDBInstanceList_inner::setStorageEncrypted(const bool &storage_encrypted) {
    m_storage_encrypted = storage_encrypted;
    m_storage_encrypted_isSet = true;
}

bool OAIDBInstanceList_inner::is_storage_encrypted_Set() const{
    return m_storage_encrypted_isSet;
}

bool OAIDBInstanceList_inner::is_storage_encrypted_Valid() const{
    return m_storage_encrypted_isValid;
}

QString OAIDBInstanceList_inner::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDBInstanceList_inner::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDBInstanceList_inner::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDBInstanceList_inner::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIDBInstanceList_inner::getDbiResourceId() const {
    return m_dbi_resource_id;
}
void OAIDBInstanceList_inner::setDbiResourceId(const QString &dbi_resource_id) {
    m_dbi_resource_id = dbi_resource_id;
    m_dbi_resource_id_isSet = true;
}

bool OAIDBInstanceList_inner::is_dbi_resource_id_Set() const{
    return m_dbi_resource_id_isSet;
}

bool OAIDBInstanceList_inner::is_dbi_resource_id_Valid() const{
    return m_dbi_resource_id_isValid;
}

QString OAIDBInstanceList_inner::getCaCertificateIdentifier() const {
    return m_ca_certificate_identifier;
}
void OAIDBInstanceList_inner::setCaCertificateIdentifier(const QString &ca_certificate_identifier) {
    m_ca_certificate_identifier = ca_certificate_identifier;
    m_ca_certificate_identifier_isSet = true;
}

bool OAIDBInstanceList_inner::is_ca_certificate_identifier_Set() const{
    return m_ca_certificate_identifier_isSet;
}

bool OAIDBInstanceList_inner::is_ca_certificate_identifier_Valid() const{
    return m_ca_certificate_identifier_isValid;
}

bool OAIDBInstanceList_inner::getCopyTagsToSnapshot() const {
    return m_copy_tags_to_snapshot;
}
void OAIDBInstanceList_inner::setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot) {
    m_copy_tags_to_snapshot = copy_tags_to_snapshot;
    m_copy_tags_to_snapshot_isSet = true;
}

bool OAIDBInstanceList_inner::is_copy_tags_to_snapshot_Set() const{
    return m_copy_tags_to_snapshot_isSet;
}

bool OAIDBInstanceList_inner::is_copy_tags_to_snapshot_Valid() const{
    return m_copy_tags_to_snapshot_isValid;
}

qint32 OAIDBInstanceList_inner::getPromotionTier() const {
    return m_promotion_tier;
}
void OAIDBInstanceList_inner::setPromotionTier(const qint32 &promotion_tier) {
    m_promotion_tier = promotion_tier;
    m_promotion_tier_isSet = true;
}

bool OAIDBInstanceList_inner::is_promotion_tier_Set() const{
    return m_promotion_tier_isSet;
}

bool OAIDBInstanceList_inner::is_promotion_tier_Valid() const{
    return m_promotion_tier_isValid;
}

QString OAIDBInstanceList_inner::getDbInstanceArn() const {
    return m_db_instance_arn;
}
void OAIDBInstanceList_inner::setDbInstanceArn(const QString &db_instance_arn) {
    m_db_instance_arn = db_instance_arn;
    m_db_instance_arn_isSet = true;
}

bool OAIDBInstanceList_inner::is_db_instance_arn_Set() const{
    return m_db_instance_arn_isSet;
}

bool OAIDBInstanceList_inner::is_db_instance_arn_Valid() const{
    return m_db_instance_arn_isValid;
}

QList OAIDBInstanceList_inner::getEnabledCloudwatchLogsExports() const {
    return m_enabled_cloudwatch_logs_exports;
}
void OAIDBInstanceList_inner::setEnabledCloudwatchLogsExports(const QList &enabled_cloudwatch_logs_exports) {
    m_enabled_cloudwatch_logs_exports = enabled_cloudwatch_logs_exports;
    m_enabled_cloudwatch_logs_exports_isSet = true;
}

bool OAIDBInstanceList_inner::is_enabled_cloudwatch_logs_exports_Set() const{
    return m_enabled_cloudwatch_logs_exports_isSet;
}

bool OAIDBInstanceList_inner::is_enabled_cloudwatch_logs_exports_Valid() const{
    return m_enabled_cloudwatch_logs_exports_isValid;
}

bool OAIDBInstanceList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_modified_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicly_accessible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_infos.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dbi_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ca_certificate_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBInstanceList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
