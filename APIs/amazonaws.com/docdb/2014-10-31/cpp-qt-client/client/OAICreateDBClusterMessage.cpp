/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDBClusterMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDBClusterMessage::OAICreateDBClusterMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDBClusterMessage::OAICreateDBClusterMessage() {
    this->initializeModel();
}

OAICreateDBClusterMessage::~OAICreateDBClusterMessage() {}

void OAICreateDBClusterMessage::initializeModel() {

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_db_cluster_parameter_group_name_isSet = false;
    m_db_cluster_parameter_group_name_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_db_subnet_group_name_isSet = false;
    m_db_subnet_group_name_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_storage_encrypted_isSet = false;
    m_storage_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_pre_signed_url_isSet = false;
    m_pre_signed_url_isValid = false;

    m_enable_cloudwatch_logs_exports_isSet = false;
    m_enable_cloudwatch_logs_exports_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;

    m_global_cluster_identifier_isSet = false;
    m_global_cluster_identifier_isValid = false;
}

void OAICreateDBClusterMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDBClusterMessage::fromJsonObject(QJsonObject json) {

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_db_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group_name, json[QString("DBClusterParameterGroupName")]);
    m_db_cluster_parameter_group_name_isSet = !json[QString("DBClusterParameterGroupName")].isNull() && m_db_cluster_parameter_group_name_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_db_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_name, json[QString("DBSubnetGroupName")]);
    m_db_subnet_group_name_isSet = !json[QString("DBSubnetGroupName")].isNull() && m_db_subnet_group_name_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_storage_encrypted_isValid = ::OpenAPI::fromJsonValue(m_storage_encrypted, json[QString("StorageEncrypted")]);
    m_storage_encrypted_isSet = !json[QString("StorageEncrypted")].isNull() && m_storage_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_pre_signed_url_isValid = ::OpenAPI::fromJsonValue(m_pre_signed_url, json[QString("PreSignedUrl")]);
    m_pre_signed_url_isSet = !json[QString("PreSignedUrl")].isNull() && m_pre_signed_url_isValid;

    m_enable_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enable_cloudwatch_logs_exports, json[QString("EnableCloudwatchLogsExports")]);
    m_enable_cloudwatch_logs_exports_isSet = !json[QString("EnableCloudwatchLogsExports")].isNull() && m_enable_cloudwatch_logs_exports_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;

    m_global_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_global_cluster_identifier, json[QString("GlobalClusterIdentifier")]);
    m_global_cluster_identifier_isSet = !json[QString("GlobalClusterIdentifier")].isNull() && m_global_cluster_identifier_isValid;
}

QString OAICreateDBClusterMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDBClusterMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_db_cluster_parameter_group_name_isSet) {
        obj.insert(QString("DBClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group_name));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_db_subnet_group_name_isSet) {
        obj.insert(QString("DBSubnetGroupName"), ::OpenAPI::toJsonValue(m_db_subnet_group_name));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_storage_encrypted_isSet) {
        obj.insert(QString("StorageEncrypted"), ::OpenAPI::toJsonValue(m_storage_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_pre_signed_url_isSet) {
        obj.insert(QString("PreSignedUrl"), ::OpenAPI::toJsonValue(m_pre_signed_url));
    }
    if (m_enable_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnableCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enable_cloudwatch_logs_exports));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    if (m_global_cluster_identifier_isSet) {
        obj.insert(QString("GlobalClusterIdentifier"), ::OpenAPI::toJsonValue(m_global_cluster_identifier));
    }
    return obj;
}

QList OAICreateDBClusterMessage::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAICreateDBClusterMessage::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAICreateDBClusterMessage::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAICreateDBClusterMessage::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

qint32 OAICreateDBClusterMessage::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAICreateDBClusterMessage::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAICreateDBClusterMessage::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAICreateDBClusterMessage::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

QString OAICreateDBClusterMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAICreateDBClusterMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAICreateDBClusterMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAICreateDBClusterMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAICreateDBClusterMessage::getDbClusterParameterGroupName() const {
    return m_db_cluster_parameter_group_name;
}
void OAICreateDBClusterMessage::setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name) {
    m_db_cluster_parameter_group_name = db_cluster_parameter_group_name;
    m_db_cluster_parameter_group_name_isSet = true;
}

bool OAICreateDBClusterMessage::is_db_cluster_parameter_group_name_Set() const{
    return m_db_cluster_parameter_group_name_isSet;
}

bool OAICreateDBClusterMessage::is_db_cluster_parameter_group_name_Valid() const{
    return m_db_cluster_parameter_group_name_isValid;
}

QList OAICreateDBClusterMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAICreateDBClusterMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAICreateDBClusterMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAICreateDBClusterMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

QString OAICreateDBClusterMessage::getDbSubnetGroupName() const {
    return m_db_subnet_group_name;
}
void OAICreateDBClusterMessage::setDbSubnetGroupName(const QString &db_subnet_group_name) {
    m_db_subnet_group_name = db_subnet_group_name;
    m_db_subnet_group_name_isSet = true;
}

bool OAICreateDBClusterMessage::is_db_subnet_group_name_Set() const{
    return m_db_subnet_group_name_isSet;
}

bool OAICreateDBClusterMessage::is_db_subnet_group_name_Valid() const{
    return m_db_subnet_group_name_isValid;
}

QString OAICreateDBClusterMessage::getEngine() const {
    return m_engine;
}
void OAICreateDBClusterMessage::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAICreateDBClusterMessage::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAICreateDBClusterMessage::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAICreateDBClusterMessage::getEngineVersion() const {
    return m_engine_version;
}
void OAICreateDBClusterMessage::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAICreateDBClusterMessage::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAICreateDBClusterMessage::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

qint32 OAICreateDBClusterMessage::getPort() const {
    return m_port;
}
void OAICreateDBClusterMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAICreateDBClusterMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAICreateDBClusterMessage::is_port_Valid() const{
    return m_port_isValid;
}

QString OAICreateDBClusterMessage::getMasterUsername() const {
    return m_master_username;
}
void OAICreateDBClusterMessage::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAICreateDBClusterMessage::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAICreateDBClusterMessage::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QString OAICreateDBClusterMessage::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAICreateDBClusterMessage::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAICreateDBClusterMessage::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAICreateDBClusterMessage::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

QString OAICreateDBClusterMessage::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAICreateDBClusterMessage::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAICreateDBClusterMessage::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAICreateDBClusterMessage::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

QString OAICreateDBClusterMessage::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAICreateDBClusterMessage::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAICreateDBClusterMessage::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAICreateDBClusterMessage::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

QList OAICreateDBClusterMessage::getTags() const {
    return m_tags;
}
void OAICreateDBClusterMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDBClusterMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDBClusterMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDBClusterMessage::getStorageEncrypted() const {
    return m_storage_encrypted;
}
void OAICreateDBClusterMessage::setStorageEncrypted(const bool &storage_encrypted) {
    m_storage_encrypted = storage_encrypted;
    m_storage_encrypted_isSet = true;
}

bool OAICreateDBClusterMessage::is_storage_encrypted_Set() const{
    return m_storage_encrypted_isSet;
}

bool OAICreateDBClusterMessage::is_storage_encrypted_Valid() const{
    return m_storage_encrypted_isValid;
}

QString OAICreateDBClusterMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateDBClusterMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateDBClusterMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateDBClusterMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAICreateDBClusterMessage::getPreSignedUrl() const {
    return m_pre_signed_url;
}
void OAICreateDBClusterMessage::setPreSignedUrl(const QString &pre_signed_url) {
    m_pre_signed_url = pre_signed_url;
    m_pre_signed_url_isSet = true;
}

bool OAICreateDBClusterMessage::is_pre_signed_url_Set() const{
    return m_pre_signed_url_isSet;
}

bool OAICreateDBClusterMessage::is_pre_signed_url_Valid() const{
    return m_pre_signed_url_isValid;
}

QList OAICreateDBClusterMessage::getEnableCloudwatchLogsExports() const {
    return m_enable_cloudwatch_logs_exports;
}
void OAICreateDBClusterMessage::setEnableCloudwatchLogsExports(const QList &enable_cloudwatch_logs_exports) {
    m_enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports;
    m_enable_cloudwatch_logs_exports_isSet = true;
}

bool OAICreateDBClusterMessage::is_enable_cloudwatch_logs_exports_Set() const{
    return m_enable_cloudwatch_logs_exports_isSet;
}

bool OAICreateDBClusterMessage::is_enable_cloudwatch_logs_exports_Valid() const{
    return m_enable_cloudwatch_logs_exports_isValid;
}

bool OAICreateDBClusterMessage::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAICreateDBClusterMessage::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAICreateDBClusterMessage::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAICreateDBClusterMessage::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

QString OAICreateDBClusterMessage::getGlobalClusterIdentifier() const {
    return m_global_cluster_identifier;
}
void OAICreateDBClusterMessage::setGlobalClusterIdentifier(const QString &global_cluster_identifier) {
    m_global_cluster_identifier = global_cluster_identifier;
    m_global_cluster_identifier_isSet = true;
}

bool OAICreateDBClusterMessage::is_global_cluster_identifier_Set() const{
    return m_global_cluster_identifier_isSet;
}

bool OAICreateDBClusterMessage::is_global_cluster_identifier_Valid() const{
    return m_global_cluster_identifier_isValid;
}

bool OAICreateDBClusterMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_signed_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDBClusterMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_cluster_identifier_isValid && m_engine_isValid && true;
}

} // namespace OpenAPI
