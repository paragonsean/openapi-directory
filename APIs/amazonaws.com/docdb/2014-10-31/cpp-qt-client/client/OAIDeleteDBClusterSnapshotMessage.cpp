/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteDBClusterSnapshotMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteDBClusterSnapshotMessage::OAIDeleteDBClusterSnapshotMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteDBClusterSnapshotMessage::OAIDeleteDBClusterSnapshotMessage() {
    this->initializeModel();
}

OAIDeleteDBClusterSnapshotMessage::~OAIDeleteDBClusterSnapshotMessage() {}

void OAIDeleteDBClusterSnapshotMessage::initializeModel() {

    m_db_cluster_snapshot_identifier_isSet = false;
    m_db_cluster_snapshot_identifier_isValid = false;
}

void OAIDeleteDBClusterSnapshotMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteDBClusterSnapshotMessage::fromJsonObject(QJsonObject json) {

    m_db_cluster_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_snapshot_identifier, json[QString("DBClusterSnapshotIdentifier")]);
    m_db_cluster_snapshot_identifier_isSet = !json[QString("DBClusterSnapshotIdentifier")].isNull() && m_db_cluster_snapshot_identifier_isValid;
}

QString OAIDeleteDBClusterSnapshotMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteDBClusterSnapshotMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_snapshot_identifier_isSet) {
        obj.insert(QString("DBClusterSnapshotIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_snapshot_identifier));
    }
    return obj;
}

QString OAIDeleteDBClusterSnapshotMessage::getDbClusterSnapshotIdentifier() const {
    return m_db_cluster_snapshot_identifier;
}
void OAIDeleteDBClusterSnapshotMessage::setDbClusterSnapshotIdentifier(const QString &db_cluster_snapshot_identifier) {
    m_db_cluster_snapshot_identifier = db_cluster_snapshot_identifier;
    m_db_cluster_snapshot_identifier_isSet = true;
}

bool OAIDeleteDBClusterSnapshotMessage::is_db_cluster_snapshot_identifier_Set() const{
    return m_db_cluster_snapshot_identifier_isSet;
}

bool OAIDeleteDBClusterSnapshotMessage::is_db_cluster_snapshot_identifier_Valid() const{
    return m_db_cluster_snapshot_identifier_isValid;
}

bool OAIDeleteDBClusterSnapshotMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteDBClusterSnapshotMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_cluster_snapshot_identifier_isValid && true;
}

} // namespace OpenAPI
