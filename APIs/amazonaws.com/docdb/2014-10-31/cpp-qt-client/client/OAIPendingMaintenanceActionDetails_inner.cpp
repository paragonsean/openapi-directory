/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPendingMaintenanceActionDetails_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPendingMaintenanceActionDetails_inner::OAIPendingMaintenanceActionDetails_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPendingMaintenanceActionDetails_inner::OAIPendingMaintenanceActionDetails_inner() {
    this->initializeModel();
}

OAIPendingMaintenanceActionDetails_inner::~OAIPendingMaintenanceActionDetails_inner() {}

void OAIPendingMaintenanceActionDetails_inner::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_auto_applied_after_date_isSet = false;
    m_auto_applied_after_date_isValid = false;

    m_forced_apply_date_isSet = false;
    m_forced_apply_date_isValid = false;

    m_opt_in_status_isSet = false;
    m_opt_in_status_isValid = false;

    m_current_apply_date_isSet = false;
    m_current_apply_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIPendingMaintenanceActionDetails_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPendingMaintenanceActionDetails_inner::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_auto_applied_after_date_isValid = ::OpenAPI::fromJsonValue(m_auto_applied_after_date, json[QString("AutoAppliedAfterDate")]);
    m_auto_applied_after_date_isSet = !json[QString("AutoAppliedAfterDate")].isNull() && m_auto_applied_after_date_isValid;

    m_forced_apply_date_isValid = ::OpenAPI::fromJsonValue(m_forced_apply_date, json[QString("ForcedApplyDate")]);
    m_forced_apply_date_isSet = !json[QString("ForcedApplyDate")].isNull() && m_forced_apply_date_isValid;

    m_opt_in_status_isValid = ::OpenAPI::fromJsonValue(m_opt_in_status, json[QString("OptInStatus")]);
    m_opt_in_status_isSet = !json[QString("OptInStatus")].isNull() && m_opt_in_status_isValid;

    m_current_apply_date_isValid = ::OpenAPI::fromJsonValue(m_current_apply_date, json[QString("CurrentApplyDate")]);
    m_current_apply_date_isSet = !json[QString("CurrentApplyDate")].isNull() && m_current_apply_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIPendingMaintenanceActionDetails_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPendingMaintenanceActionDetails_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_auto_applied_after_date_isSet) {
        obj.insert(QString("AutoAppliedAfterDate"), ::OpenAPI::toJsonValue(m_auto_applied_after_date));
    }
    if (m_forced_apply_date_isSet) {
        obj.insert(QString("ForcedApplyDate"), ::OpenAPI::toJsonValue(m_forced_apply_date));
    }
    if (m_opt_in_status_isSet) {
        obj.insert(QString("OptInStatus"), ::OpenAPI::toJsonValue(m_opt_in_status));
    }
    if (m_current_apply_date_isSet) {
        obj.insert(QString("CurrentApplyDate"), ::OpenAPI::toJsonValue(m_current_apply_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIPendingMaintenanceActionDetails_inner::getAction() const {
    return m_action;
}
void OAIPendingMaintenanceActionDetails_inner::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPendingMaintenanceActionDetails_inner::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPendingMaintenanceActionDetails_inner::is_action_Valid() const{
    return m_action_isValid;
}

QDateTime OAIPendingMaintenanceActionDetails_inner::getAutoAppliedAfterDate() const {
    return m_auto_applied_after_date;
}
void OAIPendingMaintenanceActionDetails_inner::setAutoAppliedAfterDate(const QDateTime &auto_applied_after_date) {
    m_auto_applied_after_date = auto_applied_after_date;
    m_auto_applied_after_date_isSet = true;
}

bool OAIPendingMaintenanceActionDetails_inner::is_auto_applied_after_date_Set() const{
    return m_auto_applied_after_date_isSet;
}

bool OAIPendingMaintenanceActionDetails_inner::is_auto_applied_after_date_Valid() const{
    return m_auto_applied_after_date_isValid;
}

QDateTime OAIPendingMaintenanceActionDetails_inner::getForcedApplyDate() const {
    return m_forced_apply_date;
}
void OAIPendingMaintenanceActionDetails_inner::setForcedApplyDate(const QDateTime &forced_apply_date) {
    m_forced_apply_date = forced_apply_date;
    m_forced_apply_date_isSet = true;
}

bool OAIPendingMaintenanceActionDetails_inner::is_forced_apply_date_Set() const{
    return m_forced_apply_date_isSet;
}

bool OAIPendingMaintenanceActionDetails_inner::is_forced_apply_date_Valid() const{
    return m_forced_apply_date_isValid;
}

QString OAIPendingMaintenanceActionDetails_inner::getOptInStatus() const {
    return m_opt_in_status;
}
void OAIPendingMaintenanceActionDetails_inner::setOptInStatus(const QString &opt_in_status) {
    m_opt_in_status = opt_in_status;
    m_opt_in_status_isSet = true;
}

bool OAIPendingMaintenanceActionDetails_inner::is_opt_in_status_Set() const{
    return m_opt_in_status_isSet;
}

bool OAIPendingMaintenanceActionDetails_inner::is_opt_in_status_Valid() const{
    return m_opt_in_status_isValid;
}

QDateTime OAIPendingMaintenanceActionDetails_inner::getCurrentApplyDate() const {
    return m_current_apply_date;
}
void OAIPendingMaintenanceActionDetails_inner::setCurrentApplyDate(const QDateTime &current_apply_date) {
    m_current_apply_date = current_apply_date;
    m_current_apply_date_isSet = true;
}

bool OAIPendingMaintenanceActionDetails_inner::is_current_apply_date_Set() const{
    return m_current_apply_date_isSet;
}

bool OAIPendingMaintenanceActionDetails_inner::is_current_apply_date_Valid() const{
    return m_current_apply_date_isValid;
}

QString OAIPendingMaintenanceActionDetails_inner::getDescription() const {
    return m_description;
}
void OAIPendingMaintenanceActionDetails_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPendingMaintenanceActionDetails_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPendingMaintenanceActionDetails_inner::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPendingMaintenanceActionDetails_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_applied_after_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forced_apply_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_apply_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPendingMaintenanceActionDetails_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
