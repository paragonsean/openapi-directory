/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudwatchLogsExportConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudwatchLogsExportConfiguration::OAICloudwatchLogsExportConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudwatchLogsExportConfiguration::OAICloudwatchLogsExportConfiguration() {
    this->initializeModel();
}

OAICloudwatchLogsExportConfiguration::~OAICloudwatchLogsExportConfiguration() {}

void OAICloudwatchLogsExportConfiguration::initializeModel() {

    m_enable_log_types_isSet = false;
    m_enable_log_types_isValid = false;

    m_disable_log_types_isSet = false;
    m_disable_log_types_isValid = false;
}

void OAICloudwatchLogsExportConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudwatchLogsExportConfiguration::fromJsonObject(QJsonObject json) {

    m_enable_log_types_isValid = ::OpenAPI::fromJsonValue(m_enable_log_types, json[QString("EnableLogTypes")]);
    m_enable_log_types_isSet = !json[QString("EnableLogTypes")].isNull() && m_enable_log_types_isValid;

    m_disable_log_types_isValid = ::OpenAPI::fromJsonValue(m_disable_log_types, json[QString("DisableLogTypes")]);
    m_disable_log_types_isSet = !json[QString("DisableLogTypes")].isNull() && m_disable_log_types_isValid;
}

QString OAICloudwatchLogsExportConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudwatchLogsExportConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_log_types.isSet()) {
        obj.insert(QString("EnableLogTypes"), ::OpenAPI::toJsonValue(m_enable_log_types));
    }
    if (m_disable_log_types.isSet()) {
        obj.insert(QString("DisableLogTypes"), ::OpenAPI::toJsonValue(m_disable_log_types));
    }
    return obj;
}

QList OAICloudwatchLogsExportConfiguration::getEnableLogTypes() const {
    return m_enable_log_types;
}
void OAICloudwatchLogsExportConfiguration::setEnableLogTypes(const QList &enable_log_types) {
    m_enable_log_types = enable_log_types;
    m_enable_log_types_isSet = true;
}

bool OAICloudwatchLogsExportConfiguration::is_enable_log_types_Set() const{
    return m_enable_log_types_isSet;
}

bool OAICloudwatchLogsExportConfiguration::is_enable_log_types_Valid() const{
    return m_enable_log_types_isValid;
}

QList OAICloudwatchLogsExportConfiguration::getDisableLogTypes() const {
    return m_disable_log_types;
}
void OAICloudwatchLogsExportConfiguration::setDisableLogTypes(const QList &disable_log_types) {
    m_disable_log_types = disable_log_types;
    m_disable_log_types_isSet = true;
}

bool OAICloudwatchLogsExportConfiguration::is_disable_log_types_Set() const{
    return m_disable_log_types_isSet;
}

bool OAICloudwatchLogsExportConfiguration::is_disable_log_types_Valid() const{
    return m_disable_log_types_isValid;
}

bool OAICloudwatchLogsExportConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_log_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_log_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudwatchLogsExportConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
