/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICertificate.h
 *
 * A certificate authority (CA) certificate for an Amazon Web Services account.
 */

#ifndef OAICertificate_H
#define OAICertificate_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICertificate : public OAIObject {
public:
    OAICertificate();
    OAICertificate(QString json);
    ~OAICertificate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCertificateIdentifier() const;
    void setCertificateIdentifier(const QString &certificate_identifier);
    bool is_certificate_identifier_Set() const;
    bool is_certificate_identifier_Valid() const;

    QString getCertificateType() const;
    void setCertificateType(const QString &certificate_type);
    bool is_certificate_type_Set() const;
    bool is_certificate_type_Valid() const;

    QString getThumbprint() const;
    void setThumbprint(const QString &thumbprint);
    bool is_thumbprint_Set() const;
    bool is_thumbprint_Valid() const;

    QDateTime getValidFrom() const;
    void setValidFrom(const QDateTime &valid_from);
    bool is_valid_from_Set() const;
    bool is_valid_from_Valid() const;

    QDateTime getValidTill() const;
    void setValidTill(const QDateTime &valid_till);
    bool is_valid_till_Set() const;
    bool is_valid_till_Valid() const;

    QString getCertificateArn() const;
    void setCertificateArn(const QString &certificate_arn);
    bool is_certificate_arn_Set() const;
    bool is_certificate_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_certificate_identifier;
    bool m_certificate_identifier_isSet;
    bool m_certificate_identifier_isValid;

    QString m_certificate_type;
    bool m_certificate_type_isSet;
    bool m_certificate_type_isValid;

    QString m_thumbprint;
    bool m_thumbprint_isSet;
    bool m_thumbprint_isValid;

    QDateTime m_valid_from;
    bool m_valid_from_isSet;
    bool m_valid_from_isValid;

    QDateTime m_valid_till;
    bool m_valid_till_isSet;
    bool m_valid_till_isValid;

    QString m_certificate_arn;
    bool m_certificate_arn_isSet;
    bool m_certificate_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICertificate)

#endif // OAICertificate_H
