/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteDBClusterMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteDBClusterMessage::OAIDeleteDBClusterMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteDBClusterMessage::OAIDeleteDBClusterMessage() {
    this->initializeModel();
}

OAIDeleteDBClusterMessage::~OAIDeleteDBClusterMessage() {}

void OAIDeleteDBClusterMessage::initializeModel() {

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_skip_final_snapshot_isSet = false;
    m_skip_final_snapshot_isValid = false;

    m_final_db_snapshot_identifier_isSet = false;
    m_final_db_snapshot_identifier_isValid = false;
}

void OAIDeleteDBClusterMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteDBClusterMessage::fromJsonObject(QJsonObject json) {

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_skip_final_snapshot_isValid = ::OpenAPI::fromJsonValue(m_skip_final_snapshot, json[QString("SkipFinalSnapshot")]);
    m_skip_final_snapshot_isSet = !json[QString("SkipFinalSnapshot")].isNull() && m_skip_final_snapshot_isValid;

    m_final_db_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_final_db_snapshot_identifier, json[QString("FinalDBSnapshotIdentifier")]);
    m_final_db_snapshot_identifier_isSet = !json[QString("FinalDBSnapshotIdentifier")].isNull() && m_final_db_snapshot_identifier_isValid;
}

QString OAIDeleteDBClusterMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteDBClusterMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_skip_final_snapshot_isSet) {
        obj.insert(QString("SkipFinalSnapshot"), ::OpenAPI::toJsonValue(m_skip_final_snapshot));
    }
    if (m_final_db_snapshot_identifier_isSet) {
        obj.insert(QString("FinalDBSnapshotIdentifier"), ::OpenAPI::toJsonValue(m_final_db_snapshot_identifier));
    }
    return obj;
}

QString OAIDeleteDBClusterMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIDeleteDBClusterMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIDeleteDBClusterMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIDeleteDBClusterMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

bool OAIDeleteDBClusterMessage::getSkipFinalSnapshot() const {
    return m_skip_final_snapshot;
}
void OAIDeleteDBClusterMessage::setSkipFinalSnapshot(const bool &skip_final_snapshot) {
    m_skip_final_snapshot = skip_final_snapshot;
    m_skip_final_snapshot_isSet = true;
}

bool OAIDeleteDBClusterMessage::is_skip_final_snapshot_Set() const{
    return m_skip_final_snapshot_isSet;
}

bool OAIDeleteDBClusterMessage::is_skip_final_snapshot_Valid() const{
    return m_skip_final_snapshot_isValid;
}

QString OAIDeleteDBClusterMessage::getFinalDbSnapshotIdentifier() const {
    return m_final_db_snapshot_identifier;
}
void OAIDeleteDBClusterMessage::setFinalDbSnapshotIdentifier(const QString &final_db_snapshot_identifier) {
    m_final_db_snapshot_identifier = final_db_snapshot_identifier;
    m_final_db_snapshot_identifier_isSet = true;
}

bool OAIDeleteDBClusterMessage::is_final_db_snapshot_identifier_Set() const{
    return m_final_db_snapshot_identifier_isSet;
}

bool OAIDeleteDBClusterMessage::is_final_db_snapshot_identifier_Valid() const{
    return m_final_db_snapshot_identifier_isValid;
}

bool OAIDeleteDBClusterMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_final_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_final_db_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteDBClusterMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_cluster_identifier_isValid && true;
}

} // namespace OpenAPI
