/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBClusterRoles_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBClusterRoles_inner::OAIDBClusterRoles_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBClusterRoles_inner::OAIDBClusterRoles_inner() {
    this->initializeModel();
}

OAIDBClusterRoles_inner::~OAIDBClusterRoles_inner() {}

void OAIDBClusterRoles_inner::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDBClusterRoles_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBClusterRoles_inner::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDBClusterRoles_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBClusterRoles_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDBClusterRoles_inner::getRoleArn() const {
    return m_role_arn;
}
void OAIDBClusterRoles_inner::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDBClusterRoles_inner::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDBClusterRoles_inner::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIDBClusterRoles_inner::getStatus() const {
    return m_status;
}
void OAIDBClusterRoles_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDBClusterRoles_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDBClusterRoles_inner::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDBClusterRoles_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBClusterRoles_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
