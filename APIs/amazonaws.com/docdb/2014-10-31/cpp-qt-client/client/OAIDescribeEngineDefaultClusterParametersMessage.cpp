/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEngineDefaultClusterParametersMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEngineDefaultClusterParametersMessage::OAIDescribeEngineDefaultClusterParametersMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEngineDefaultClusterParametersMessage::OAIDescribeEngineDefaultClusterParametersMessage() {
    this->initializeModel();
}

OAIDescribeEngineDefaultClusterParametersMessage::~OAIDescribeEngineDefaultClusterParametersMessage() {}

void OAIDescribeEngineDefaultClusterParametersMessage::initializeModel() {

    m_db_parameter_group_family_isSet = false;
    m_db_parameter_group_family_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_records_isSet = false;
    m_max_records_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;
}

void OAIDescribeEngineDefaultClusterParametersMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEngineDefaultClusterParametersMessage::fromJsonObject(QJsonObject json) {

    m_db_parameter_group_family_isValid = ::OpenAPI::fromJsonValue(m_db_parameter_group_family, json[QString("DBParameterGroupFamily")]);
    m_db_parameter_group_family_isSet = !json[QString("DBParameterGroupFamily")].isNull() && m_db_parameter_group_family_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_records_isValid = ::OpenAPI::fromJsonValue(m_max_records, json[QString("MaxRecords")]);
    m_max_records_isSet = !json[QString("MaxRecords")].isNull() && m_max_records_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;
}

QString OAIDescribeEngineDefaultClusterParametersMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEngineDefaultClusterParametersMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_parameter_group_family_isSet) {
        obj.insert(QString("DBParameterGroupFamily"), ::OpenAPI::toJsonValue(m_db_parameter_group_family));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_records_isSet) {
        obj.insert(QString("MaxRecords"), ::OpenAPI::toJsonValue(m_max_records));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    return obj;
}

QString OAIDescribeEngineDefaultClusterParametersMessage::getDbParameterGroupFamily() const {
    return m_db_parameter_group_family;
}
void OAIDescribeEngineDefaultClusterParametersMessage::setDbParameterGroupFamily(const QString &db_parameter_group_family) {
    m_db_parameter_group_family = db_parameter_group_family;
    m_db_parameter_group_family_isSet = true;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::is_db_parameter_group_family_Set() const{
    return m_db_parameter_group_family_isSet;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::is_db_parameter_group_family_Valid() const{
    return m_db_parameter_group_family_isValid;
}

QList OAIDescribeEngineDefaultClusterParametersMessage::getFilters() const {
    return m_filters;
}
void OAIDescribeEngineDefaultClusterParametersMessage::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIDescribeEngineDefaultClusterParametersMessage::getMaxRecords() const {
    return m_max_records;
}
void OAIDescribeEngineDefaultClusterParametersMessage::setMaxRecords(const qint32 &max_records) {
    m_max_records = max_records;
    m_max_records_isSet = true;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::is_max_records_Set() const{
    return m_max_records_isSet;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::is_max_records_Valid() const{
    return m_max_records_isValid;
}

QString OAIDescribeEngineDefaultClusterParametersMessage::getMarker() const {
    return m_marker;
}
void OAIDescribeEngineDefaultClusterParametersMessage::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::is_marker_Valid() const{
    return m_marker_isValid;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_parameter_group_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEngineDefaultClusterParametersMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_parameter_group_family_isValid && true;
}

} // namespace OpenAPI
