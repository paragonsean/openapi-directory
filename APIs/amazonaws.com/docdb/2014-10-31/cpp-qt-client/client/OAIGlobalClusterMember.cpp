/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalClusterMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalClusterMember::OAIGlobalClusterMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalClusterMember::OAIGlobalClusterMember() {
    this->initializeModel();
}

OAIGlobalClusterMember::~OAIGlobalClusterMember() {}

void OAIGlobalClusterMember::initializeModel() {

    m_db_cluster_arn_isSet = false;
    m_db_cluster_arn_isValid = false;

    m_readers_isSet = false;
    m_readers_isValid = false;

    m_is_writer_isSet = false;
    m_is_writer_isValid = false;
}

void OAIGlobalClusterMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalClusterMember::fromJsonObject(QJsonObject json) {

    m_db_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_arn, json[QString("DBClusterArn")]);
    m_db_cluster_arn_isSet = !json[QString("DBClusterArn")].isNull() && m_db_cluster_arn_isValid;

    m_readers_isValid = ::OpenAPI::fromJsonValue(m_readers, json[QString("Readers")]);
    m_readers_isSet = !json[QString("Readers")].isNull() && m_readers_isValid;

    m_is_writer_isValid = ::OpenAPI::fromJsonValue(m_is_writer, json[QString("IsWriter")]);
    m_is_writer_isSet = !json[QString("IsWriter")].isNull() && m_is_writer_isValid;
}

QString OAIGlobalClusterMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalClusterMember::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_arn_isSet) {
        obj.insert(QString("DBClusterArn"), ::OpenAPI::toJsonValue(m_db_cluster_arn));
    }
    if (m_readers.isSet()) {
        obj.insert(QString("Readers"), ::OpenAPI::toJsonValue(m_readers));
    }
    if (m_is_writer_isSet) {
        obj.insert(QString("IsWriter"), ::OpenAPI::toJsonValue(m_is_writer));
    }
    return obj;
}

QString OAIGlobalClusterMember::getDbClusterArn() const {
    return m_db_cluster_arn;
}
void OAIGlobalClusterMember::setDbClusterArn(const QString &db_cluster_arn) {
    m_db_cluster_arn = db_cluster_arn;
    m_db_cluster_arn_isSet = true;
}

bool OAIGlobalClusterMember::is_db_cluster_arn_Set() const{
    return m_db_cluster_arn_isSet;
}

bool OAIGlobalClusterMember::is_db_cluster_arn_Valid() const{
    return m_db_cluster_arn_isValid;
}

QList OAIGlobalClusterMember::getReaders() const {
    return m_readers;
}
void OAIGlobalClusterMember::setReaders(const QList &readers) {
    m_readers = readers;
    m_readers_isSet = true;
}

bool OAIGlobalClusterMember::is_readers_Set() const{
    return m_readers_isSet;
}

bool OAIGlobalClusterMember::is_readers_Valid() const{
    return m_readers_isValid;
}

bool OAIGlobalClusterMember::getIsWriter() const {
    return m_is_writer;
}
void OAIGlobalClusterMember::setIsWriter(const bool &is_writer) {
    m_is_writer = is_writer;
    m_is_writer_isSet = true;
}

bool OAIGlobalClusterMember::is_is_writer_Set() const{
    return m_is_writer_isSet;
}

bool OAIGlobalClusterMember::is_is_writer_Valid() const{
    return m_is_writer_isValid;
}

bool OAIGlobalClusterMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_writer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalClusterMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
