/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSubscription::OAIEventSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSubscription::OAIEventSubscription() {
    this->initializeModel();
}

OAIEventSubscription::~OAIEventSubscription() {}

void OAIEventSubscription::initializeModel() {

    m_customer_aws_id_isSet = false;
    m_customer_aws_id_isValid = false;

    m_cust_subscription_id_isSet = false;
    m_cust_subscription_id_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_creation_time_isSet = false;
    m_subscription_creation_time_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_source_ids_list_isSet = false;
    m_source_ids_list_isValid = false;

    m_event_categories_list_isSet = false;
    m_event_categories_list_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_event_subscription_arn_isSet = false;
    m_event_subscription_arn_isValid = false;
}

void OAIEventSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSubscription::fromJsonObject(QJsonObject json) {

    m_customer_aws_id_isValid = ::OpenAPI::fromJsonValue(m_customer_aws_id, json[QString("CustomerAwsId")]);
    m_customer_aws_id_isSet = !json[QString("CustomerAwsId")].isNull() && m_customer_aws_id_isValid;

    m_cust_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_cust_subscription_id, json[QString("CustSubscriptionId")]);
    m_cust_subscription_id_isSet = !json[QString("CustSubscriptionId")].isNull() && m_cust_subscription_id_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SnsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("SnsTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_subscription_creation_time_isValid = ::OpenAPI::fromJsonValue(m_subscription_creation_time, json[QString("SubscriptionCreationTime")]);
    m_subscription_creation_time_isSet = !json[QString("SubscriptionCreationTime")].isNull() && m_subscription_creation_time_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_source_ids_list_isValid = ::OpenAPI::fromJsonValue(m_source_ids_list, json[QString("SourceIdsList")]);
    m_source_ids_list_isSet = !json[QString("SourceIdsList")].isNull() && m_source_ids_list_isValid;

    m_event_categories_list_isValid = ::OpenAPI::fromJsonValue(m_event_categories_list, json[QString("EventCategoriesList")]);
    m_event_categories_list_isSet = !json[QString("EventCategoriesList")].isNull() && m_event_categories_list_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_event_subscription_arn_isValid = ::OpenAPI::fromJsonValue(m_event_subscription_arn, json[QString("EventSubscriptionArn")]);
    m_event_subscription_arn_isSet = !json[QString("EventSubscriptionArn")].isNull() && m_event_subscription_arn_isValid;
}

QString OAIEventSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_aws_id_isSet) {
        obj.insert(QString("CustomerAwsId"), ::OpenAPI::toJsonValue(m_customer_aws_id));
    }
    if (m_cust_subscription_id_isSet) {
        obj.insert(QString("CustSubscriptionId"), ::OpenAPI::toJsonValue(m_cust_subscription_id));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SnsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_creation_time_isSet) {
        obj.insert(QString("SubscriptionCreationTime"), ::OpenAPI::toJsonValue(m_subscription_creation_time));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_source_ids_list.isSet()) {
        obj.insert(QString("SourceIdsList"), ::OpenAPI::toJsonValue(m_source_ids_list));
    }
    if (m_event_categories_list.isSet()) {
        obj.insert(QString("EventCategoriesList"), ::OpenAPI::toJsonValue(m_event_categories_list));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_event_subscription_arn_isSet) {
        obj.insert(QString("EventSubscriptionArn"), ::OpenAPI::toJsonValue(m_event_subscription_arn));
    }
    return obj;
}

QString OAIEventSubscription::getCustomerAwsId() const {
    return m_customer_aws_id;
}
void OAIEventSubscription::setCustomerAwsId(const QString &customer_aws_id) {
    m_customer_aws_id = customer_aws_id;
    m_customer_aws_id_isSet = true;
}

bool OAIEventSubscription::is_customer_aws_id_Set() const{
    return m_customer_aws_id_isSet;
}

bool OAIEventSubscription::is_customer_aws_id_Valid() const{
    return m_customer_aws_id_isValid;
}

QString OAIEventSubscription::getCustSubscriptionId() const {
    return m_cust_subscription_id;
}
void OAIEventSubscription::setCustSubscriptionId(const QString &cust_subscription_id) {
    m_cust_subscription_id = cust_subscription_id;
    m_cust_subscription_id_isSet = true;
}

bool OAIEventSubscription::is_cust_subscription_id_Set() const{
    return m_cust_subscription_id_isSet;
}

bool OAIEventSubscription::is_cust_subscription_id_Valid() const{
    return m_cust_subscription_id_isValid;
}

QString OAIEventSubscription::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIEventSubscription::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIEventSubscription::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIEventSubscription::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

QString OAIEventSubscription::getStatus() const {
    return m_status;
}
void OAIEventSubscription::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEventSubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEventSubscription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEventSubscription::getSubscriptionCreationTime() const {
    return m_subscription_creation_time;
}
void OAIEventSubscription::setSubscriptionCreationTime(const QString &subscription_creation_time) {
    m_subscription_creation_time = subscription_creation_time;
    m_subscription_creation_time_isSet = true;
}

bool OAIEventSubscription::is_subscription_creation_time_Set() const{
    return m_subscription_creation_time_isSet;
}

bool OAIEventSubscription::is_subscription_creation_time_Valid() const{
    return m_subscription_creation_time_isValid;
}

QString OAIEventSubscription::getSourceType() const {
    return m_source_type;
}
void OAIEventSubscription::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIEventSubscription::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIEventSubscription::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QList OAIEventSubscription::getSourceIdsList() const {
    return m_source_ids_list;
}
void OAIEventSubscription::setSourceIdsList(const QList &source_ids_list) {
    m_source_ids_list = source_ids_list;
    m_source_ids_list_isSet = true;
}

bool OAIEventSubscription::is_source_ids_list_Set() const{
    return m_source_ids_list_isSet;
}

bool OAIEventSubscription::is_source_ids_list_Valid() const{
    return m_source_ids_list_isValid;
}

QList OAIEventSubscription::getEventCategoriesList() const {
    return m_event_categories_list;
}
void OAIEventSubscription::setEventCategoriesList(const QList &event_categories_list) {
    m_event_categories_list = event_categories_list;
    m_event_categories_list_isSet = true;
}

bool OAIEventSubscription::is_event_categories_list_Set() const{
    return m_event_categories_list_isSet;
}

bool OAIEventSubscription::is_event_categories_list_Valid() const{
    return m_event_categories_list_isValid;
}

bool OAIEventSubscription::getEnabled() const {
    return m_enabled;
}
void OAIEventSubscription::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIEventSubscription::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIEventSubscription::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIEventSubscription::getEventSubscriptionArn() const {
    return m_event_subscription_arn;
}
void OAIEventSubscription::setEventSubscriptionArn(const QString &event_subscription_arn) {
    m_event_subscription_arn = event_subscription_arn;
    m_event_subscription_arn_isSet = true;
}

bool OAIEventSubscription::is_event_subscription_arn_Set() const{
    return m_event_subscription_arn_isSet;
}

bool OAIEventSubscription::is_event_subscription_arn_Valid() const{
    return m_event_subscription_arn_isValid;
}

bool OAIEventSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_aws_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cust_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ids_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_categories_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_subscription_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
