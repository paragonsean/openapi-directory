/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBSubnetGroups_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBSubnetGroups_inner::OAIDBSubnetGroups_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBSubnetGroups_inner::OAIDBSubnetGroups_inner() {
    this->initializeModel();
}

OAIDBSubnetGroups_inner::~OAIDBSubnetGroups_inner() {}

void OAIDBSubnetGroups_inner::initializeModel() {

    m_db_subnet_group_name_isSet = false;
    m_db_subnet_group_name_isValid = false;

    m_db_subnet_group_description_isSet = false;
    m_db_subnet_group_description_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_subnet_group_status_isSet = false;
    m_subnet_group_status_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_db_subnet_group_arn_isSet = false;
    m_db_subnet_group_arn_isValid = false;
}

void OAIDBSubnetGroups_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBSubnetGroups_inner::fromJsonObject(QJsonObject json) {

    m_db_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_name, json[QString("DBSubnetGroupName")]);
    m_db_subnet_group_name_isSet = !json[QString("DBSubnetGroupName")].isNull() && m_db_subnet_group_name_isValid;

    m_db_subnet_group_description_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_description, json[QString("DBSubnetGroupDescription")]);
    m_db_subnet_group_description_isSet = !json[QString("DBSubnetGroupDescription")].isNull() && m_db_subnet_group_description_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;

    m_subnet_group_status_isValid = ::OpenAPI::fromJsonValue(m_subnet_group_status, json[QString("SubnetGroupStatus")]);
    m_subnet_group_status_isSet = !json[QString("SubnetGroupStatus")].isNull() && m_subnet_group_status_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("Subnets")]);
    m_subnets_isSet = !json[QString("Subnets")].isNull() && m_subnets_isValid;

    m_db_subnet_group_arn_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_arn, json[QString("DBSubnetGroupArn")]);
    m_db_subnet_group_arn_isSet = !json[QString("DBSubnetGroupArn")].isNull() && m_db_subnet_group_arn_isValid;
}

QString OAIDBSubnetGroups_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBSubnetGroups_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_db_subnet_group_name_isSet) {
        obj.insert(QString("DBSubnetGroupName"), ::OpenAPI::toJsonValue(m_db_subnet_group_name));
    }
    if (m_db_subnet_group_description_isSet) {
        obj.insert(QString("DBSubnetGroupDescription"), ::OpenAPI::toJsonValue(m_db_subnet_group_description));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_subnet_group_status_isSet) {
        obj.insert(QString("SubnetGroupStatus"), ::OpenAPI::toJsonValue(m_subnet_group_status));
    }
    if (m_subnets.isSet()) {
        obj.insert(QString("Subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_db_subnet_group_arn_isSet) {
        obj.insert(QString("DBSubnetGroupArn"), ::OpenAPI::toJsonValue(m_db_subnet_group_arn));
    }
    return obj;
}

QString OAIDBSubnetGroups_inner::getDbSubnetGroupName() const {
    return m_db_subnet_group_name;
}
void OAIDBSubnetGroups_inner::setDbSubnetGroupName(const QString &db_subnet_group_name) {
    m_db_subnet_group_name = db_subnet_group_name;
    m_db_subnet_group_name_isSet = true;
}

bool OAIDBSubnetGroups_inner::is_db_subnet_group_name_Set() const{
    return m_db_subnet_group_name_isSet;
}

bool OAIDBSubnetGroups_inner::is_db_subnet_group_name_Valid() const{
    return m_db_subnet_group_name_isValid;
}

QString OAIDBSubnetGroups_inner::getDbSubnetGroupDescription() const {
    return m_db_subnet_group_description;
}
void OAIDBSubnetGroups_inner::setDbSubnetGroupDescription(const QString &db_subnet_group_description) {
    m_db_subnet_group_description = db_subnet_group_description;
    m_db_subnet_group_description_isSet = true;
}

bool OAIDBSubnetGroups_inner::is_db_subnet_group_description_Set() const{
    return m_db_subnet_group_description_isSet;
}

bool OAIDBSubnetGroups_inner::is_db_subnet_group_description_Valid() const{
    return m_db_subnet_group_description_isValid;
}

QString OAIDBSubnetGroups_inner::getVpcId() const {
    return m_vpc_id;
}
void OAIDBSubnetGroups_inner::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIDBSubnetGroups_inner::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIDBSubnetGroups_inner::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QString OAIDBSubnetGroups_inner::getSubnetGroupStatus() const {
    return m_subnet_group_status;
}
void OAIDBSubnetGroups_inner::setSubnetGroupStatus(const QString &subnet_group_status) {
    m_subnet_group_status = subnet_group_status;
    m_subnet_group_status_isSet = true;
}

bool OAIDBSubnetGroups_inner::is_subnet_group_status_Set() const{
    return m_subnet_group_status_isSet;
}

bool OAIDBSubnetGroups_inner::is_subnet_group_status_Valid() const{
    return m_subnet_group_status_isValid;
}

QList OAIDBSubnetGroups_inner::getSubnets() const {
    return m_subnets;
}
void OAIDBSubnetGroups_inner::setSubnets(const QList &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIDBSubnetGroups_inner::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIDBSubnetGroups_inner::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QString OAIDBSubnetGroups_inner::getDbSubnetGroupArn() const {
    return m_db_subnet_group_arn;
}
void OAIDBSubnetGroups_inner::setDbSubnetGroupArn(const QString &db_subnet_group_arn) {
    m_db_subnet_group_arn = db_subnet_group_arn;
    m_db_subnet_group_arn_isSet = true;
}

bool OAIDBSubnetGroups_inner::is_db_subnet_group_arn_Set() const{
    return m_db_subnet_group_arn_isSet;
}

bool OAIDBSubnetGroups_inner::is_db_subnet_group_arn_Valid() const{
    return m_db_subnet_group_arn_isValid;
}

bool OAIDBSubnetGroups_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_group_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBSubnetGroups_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
