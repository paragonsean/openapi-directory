/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDBInstanceMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDBInstanceMessage::OAICreateDBInstanceMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDBInstanceMessage::OAICreateDBInstanceMessage() {
    this->initializeModel();
}

OAICreateDBInstanceMessage::~OAICreateDBInstanceMessage() {}

void OAICreateDBInstanceMessage::initializeModel() {

    m_db_instance_identifier_isSet = false;
    m_db_instance_identifier_isValid = false;

    m_db_instance_class_isSet = false;
    m_db_instance_class_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_auto_minor_version_upgrade_isSet = false;
    m_auto_minor_version_upgrade_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_copy_tags_to_snapshot_isSet = false;
    m_copy_tags_to_snapshot_isValid = false;

    m_promotion_tier_isSet = false;
    m_promotion_tier_isValid = false;

    m_enable_performance_insights_isSet = false;
    m_enable_performance_insights_isValid = false;

    m_performance_insights_kms_key_id_isSet = false;
    m_performance_insights_kms_key_id_isValid = false;
}

void OAICreateDBInstanceMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDBInstanceMessage::fromJsonObject(QJsonObject json) {

    m_db_instance_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_instance_identifier, json[QString("DBInstanceIdentifier")]);
    m_db_instance_identifier_isSet = !json[QString("DBInstanceIdentifier")].isNull() && m_db_instance_identifier_isValid;

    m_db_instance_class_isValid = ::OpenAPI::fromJsonValue(m_db_instance_class, json[QString("DBInstanceClass")]);
    m_db_instance_class_isSet = !json[QString("DBInstanceClass")].isNull() && m_db_instance_class_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_auto_minor_version_upgrade_isValid = ::OpenAPI::fromJsonValue(m_auto_minor_version_upgrade, json[QString("AutoMinorVersionUpgrade")]);
    m_auto_minor_version_upgrade_isSet = !json[QString("AutoMinorVersionUpgrade")].isNull() && m_auto_minor_version_upgrade_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_copy_tags_to_snapshot_isValid = ::OpenAPI::fromJsonValue(m_copy_tags_to_snapshot, json[QString("CopyTagsToSnapshot")]);
    m_copy_tags_to_snapshot_isSet = !json[QString("CopyTagsToSnapshot")].isNull() && m_copy_tags_to_snapshot_isValid;

    m_promotion_tier_isValid = ::OpenAPI::fromJsonValue(m_promotion_tier, json[QString("PromotionTier")]);
    m_promotion_tier_isSet = !json[QString("PromotionTier")].isNull() && m_promotion_tier_isValid;

    m_enable_performance_insights_isValid = ::OpenAPI::fromJsonValue(m_enable_performance_insights, json[QString("EnablePerformanceInsights")]);
    m_enable_performance_insights_isSet = !json[QString("EnablePerformanceInsights")].isNull() && m_enable_performance_insights_isValid;

    m_performance_insights_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_performance_insights_kms_key_id, json[QString("PerformanceInsightsKMSKeyId")]);
    m_performance_insights_kms_key_id_isSet = !json[QString("PerformanceInsightsKMSKeyId")].isNull() && m_performance_insights_kms_key_id_isValid;
}

QString OAICreateDBInstanceMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDBInstanceMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_instance_identifier_isSet) {
        obj.insert(QString("DBInstanceIdentifier"), ::OpenAPI::toJsonValue(m_db_instance_identifier));
    }
    if (m_db_instance_class_isSet) {
        obj.insert(QString("DBInstanceClass"), ::OpenAPI::toJsonValue(m_db_instance_class));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_auto_minor_version_upgrade_isSet) {
        obj.insert(QString("AutoMinorVersionUpgrade"), ::OpenAPI::toJsonValue(m_auto_minor_version_upgrade));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_copy_tags_to_snapshot_isSet) {
        obj.insert(QString("CopyTagsToSnapshot"), ::OpenAPI::toJsonValue(m_copy_tags_to_snapshot));
    }
    if (m_promotion_tier_isSet) {
        obj.insert(QString("PromotionTier"), ::OpenAPI::toJsonValue(m_promotion_tier));
    }
    if (m_enable_performance_insights_isSet) {
        obj.insert(QString("EnablePerformanceInsights"), ::OpenAPI::toJsonValue(m_enable_performance_insights));
    }
    if (m_performance_insights_kms_key_id_isSet) {
        obj.insert(QString("PerformanceInsightsKMSKeyId"), ::OpenAPI::toJsonValue(m_performance_insights_kms_key_id));
    }
    return obj;
}

QString OAICreateDBInstanceMessage::getDbInstanceIdentifier() const {
    return m_db_instance_identifier;
}
void OAICreateDBInstanceMessage::setDbInstanceIdentifier(const QString &db_instance_identifier) {
    m_db_instance_identifier = db_instance_identifier;
    m_db_instance_identifier_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_instance_identifier_Set() const{
    return m_db_instance_identifier_isSet;
}

bool OAICreateDBInstanceMessage::is_db_instance_identifier_Valid() const{
    return m_db_instance_identifier_isValid;
}

QString OAICreateDBInstanceMessage::getDbInstanceClass() const {
    return m_db_instance_class;
}
void OAICreateDBInstanceMessage::setDbInstanceClass(const QString &db_instance_class) {
    m_db_instance_class = db_instance_class;
    m_db_instance_class_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_instance_class_Set() const{
    return m_db_instance_class_isSet;
}

bool OAICreateDBInstanceMessage::is_db_instance_class_Valid() const{
    return m_db_instance_class_isValid;
}

QString OAICreateDBInstanceMessage::getEngine() const {
    return m_engine;
}
void OAICreateDBInstanceMessage::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAICreateDBInstanceMessage::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAICreateDBInstanceMessage::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAICreateDBInstanceMessage::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAICreateDBInstanceMessage::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAICreateDBInstanceMessage::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAICreateDBInstanceMessage::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAICreateDBInstanceMessage::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAICreateDBInstanceMessage::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAICreateDBInstanceMessage::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAICreateDBInstanceMessage::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

bool OAICreateDBInstanceMessage::getAutoMinorVersionUpgrade() const {
    return m_auto_minor_version_upgrade;
}
void OAICreateDBInstanceMessage::setAutoMinorVersionUpgrade(const bool &auto_minor_version_upgrade) {
    m_auto_minor_version_upgrade = auto_minor_version_upgrade;
    m_auto_minor_version_upgrade_isSet = true;
}

bool OAICreateDBInstanceMessage::is_auto_minor_version_upgrade_Set() const{
    return m_auto_minor_version_upgrade_isSet;
}

bool OAICreateDBInstanceMessage::is_auto_minor_version_upgrade_Valid() const{
    return m_auto_minor_version_upgrade_isValid;
}

QList OAICreateDBInstanceMessage::getTags() const {
    return m_tags;
}
void OAICreateDBInstanceMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDBInstanceMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDBInstanceMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDBInstanceMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAICreateDBInstanceMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAICreateDBInstanceMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAICreateDBInstanceMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

bool OAICreateDBInstanceMessage::getCopyTagsToSnapshot() const {
    return m_copy_tags_to_snapshot;
}
void OAICreateDBInstanceMessage::setCopyTagsToSnapshot(const bool &copy_tags_to_snapshot) {
    m_copy_tags_to_snapshot = copy_tags_to_snapshot;
    m_copy_tags_to_snapshot_isSet = true;
}

bool OAICreateDBInstanceMessage::is_copy_tags_to_snapshot_Set() const{
    return m_copy_tags_to_snapshot_isSet;
}

bool OAICreateDBInstanceMessage::is_copy_tags_to_snapshot_Valid() const{
    return m_copy_tags_to_snapshot_isValid;
}

qint32 OAICreateDBInstanceMessage::getPromotionTier() const {
    return m_promotion_tier;
}
void OAICreateDBInstanceMessage::setPromotionTier(const qint32 &promotion_tier) {
    m_promotion_tier = promotion_tier;
    m_promotion_tier_isSet = true;
}

bool OAICreateDBInstanceMessage::is_promotion_tier_Set() const{
    return m_promotion_tier_isSet;
}

bool OAICreateDBInstanceMessage::is_promotion_tier_Valid() const{
    return m_promotion_tier_isValid;
}

bool OAICreateDBInstanceMessage::getEnablePerformanceInsights() const {
    return m_enable_performance_insights;
}
void OAICreateDBInstanceMessage::setEnablePerformanceInsights(const bool &enable_performance_insights) {
    m_enable_performance_insights = enable_performance_insights;
    m_enable_performance_insights_isSet = true;
}

bool OAICreateDBInstanceMessage::is_enable_performance_insights_Set() const{
    return m_enable_performance_insights_isSet;
}

bool OAICreateDBInstanceMessage::is_enable_performance_insights_Valid() const{
    return m_enable_performance_insights_isValid;
}

QString OAICreateDBInstanceMessage::getPerformanceInsightsKmsKeyId() const {
    return m_performance_insights_kms_key_id;
}
void OAICreateDBInstanceMessage::setPerformanceInsightsKmsKeyId(const QString &performance_insights_kms_key_id) {
    m_performance_insights_kms_key_id = performance_insights_kms_key_id;
    m_performance_insights_kms_key_id_isSet = true;
}

bool OAICreateDBInstanceMessage::is_performance_insights_kms_key_id_Set() const{
    return m_performance_insights_kms_key_id_isSet;
}

bool OAICreateDBInstanceMessage::is_performance_insights_kms_key_id_Valid() const{
    return m_performance_insights_kms_key_id_isValid;
}

bool OAICreateDBInstanceMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_instance_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_instance_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_minor_version_upgrade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_to_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_performance_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_insights_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDBInstanceMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_instance_identifier_isValid && m_db_instance_class_isValid && m_engine_isValid && m_db_cluster_identifier_isValid && true;
}

} // namespace OpenAPI
