/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBClusterList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBClusterList_inner::OAIDBClusterList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBClusterList_inner::OAIDBClusterList_inner() {
    this->initializeModel();
}

OAIDBClusterList_inner::~OAIDBClusterList_inner() {}

void OAIDBClusterList_inner::initializeModel() {

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_backup_retention_period_isSet = false;
    m_backup_retention_period_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_db_cluster_parameter_group_isSet = false;
    m_db_cluster_parameter_group_isValid = false;

    m_db_subnet_group_isSet = false;
    m_db_subnet_group_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_percent_progress_isSet = false;
    m_percent_progress_isValid = false;

    m_earliest_restorable_time_isSet = false;
    m_earliest_restorable_time_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_reader_endpoint_isSet = false;
    m_reader_endpoint_isValid = false;

    m_multi_az_isSet = false;
    m_multi_az_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_latest_restorable_time_isSet = false;
    m_latest_restorable_time_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_master_username_isSet = false;
    m_master_username_isValid = false;

    m_preferred_backup_window_isSet = false;
    m_preferred_backup_window_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_replication_source_identifier_isSet = false;
    m_replication_source_identifier_isValid = false;

    m_read_replica_identifiers_isSet = false;
    m_read_replica_identifiers_isValid = false;

    m_db_cluster_members_isSet = false;
    m_db_cluster_members_isValid = false;

    m_vpc_security_groups_isSet = false;
    m_vpc_security_groups_isValid = false;

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;

    m_storage_encrypted_isSet = false;
    m_storage_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_db_cluster_resource_id_isSet = false;
    m_db_cluster_resource_id_isValid = false;

    m_db_cluster_arn_isSet = false;
    m_db_cluster_arn_isValid = false;

    m_associated_roles_isSet = false;
    m_associated_roles_isValid = false;

    m_clone_group_id_isSet = false;
    m_clone_group_id_isValid = false;

    m_cluster_create_time_isSet = false;
    m_cluster_create_time_isValid = false;

    m_enabled_cloudwatch_logs_exports_isSet = false;
    m_enabled_cloudwatch_logs_exports_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;
}

void OAIDBClusterList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBClusterList_inner::fromJsonObject(QJsonObject json) {

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_backup_retention_period_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_period, json[QString("BackupRetentionPeriod")]);
    m_backup_retention_period_isSet = !json[QString("BackupRetentionPeriod")].isNull() && m_backup_retention_period_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_db_cluster_parameter_group_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group, json[QString("DBClusterParameterGroup")]);
    m_db_cluster_parameter_group_isSet = !json[QString("DBClusterParameterGroup")].isNull() && m_db_cluster_parameter_group_isValid;

    m_db_subnet_group_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group, json[QString("DBSubnetGroup")]);
    m_db_subnet_group_isSet = !json[QString("DBSubnetGroup")].isNull() && m_db_subnet_group_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_percent_progress_isValid = ::OpenAPI::fromJsonValue(m_percent_progress, json[QString("PercentProgress")]);
    m_percent_progress_isSet = !json[QString("PercentProgress")].isNull() && m_percent_progress_isValid;

    m_earliest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_earliest_restorable_time, json[QString("EarliestRestorableTime")]);
    m_earliest_restorable_time_isSet = !json[QString("EarliestRestorableTime")].isNull() && m_earliest_restorable_time_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_reader_endpoint_isValid = ::OpenAPI::fromJsonValue(m_reader_endpoint, json[QString("ReaderEndpoint")]);
    m_reader_endpoint_isSet = !json[QString("ReaderEndpoint")].isNull() && m_reader_endpoint_isValid;

    m_multi_az_isValid = ::OpenAPI::fromJsonValue(m_multi_az, json[QString("MultiAZ")]);
    m_multi_az_isSet = !json[QString("MultiAZ")].isNull() && m_multi_az_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_latest_restorable_time_isValid = ::OpenAPI::fromJsonValue(m_latest_restorable_time, json[QString("LatestRestorableTime")]);
    m_latest_restorable_time_isSet = !json[QString("LatestRestorableTime")].isNull() && m_latest_restorable_time_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_master_username_isValid = ::OpenAPI::fromJsonValue(m_master_username, json[QString("MasterUsername")]);
    m_master_username_isSet = !json[QString("MasterUsername")].isNull() && m_master_username_isValid;

    m_preferred_backup_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_backup_window, json[QString("PreferredBackupWindow")]);
    m_preferred_backup_window_isSet = !json[QString("PreferredBackupWindow")].isNull() && m_preferred_backup_window_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("PreferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("PreferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_replication_source_identifier_isValid = ::OpenAPI::fromJsonValue(m_replication_source_identifier, json[QString("ReplicationSourceIdentifier")]);
    m_replication_source_identifier_isSet = !json[QString("ReplicationSourceIdentifier")].isNull() && m_replication_source_identifier_isValid;

    m_read_replica_identifiers_isValid = ::OpenAPI::fromJsonValue(m_read_replica_identifiers, json[QString("ReadReplicaIdentifiers")]);
    m_read_replica_identifiers_isSet = !json[QString("ReadReplicaIdentifiers")].isNull() && m_read_replica_identifiers_isValid;

    m_db_cluster_members_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_members, json[QString("DBClusterMembers")]);
    m_db_cluster_members_isSet = !json[QString("DBClusterMembers")].isNull() && m_db_cluster_members_isValid;

    m_vpc_security_groups_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_groups, json[QString("VpcSecurityGroups")]);
    m_vpc_security_groups_isSet = !json[QString("VpcSecurityGroups")].isNull() && m_vpc_security_groups_isValid;

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("HostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("HostedZoneId")].isNull() && m_hosted_zone_id_isValid;

    m_storage_encrypted_isValid = ::OpenAPI::fromJsonValue(m_storage_encrypted, json[QString("StorageEncrypted")]);
    m_storage_encrypted_isSet = !json[QString("StorageEncrypted")].isNull() && m_storage_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_db_cluster_resource_id_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_resource_id, json[QString("DbClusterResourceId")]);
    m_db_cluster_resource_id_isSet = !json[QString("DbClusterResourceId")].isNull() && m_db_cluster_resource_id_isValid;

    m_db_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_arn, json[QString("DBClusterArn")]);
    m_db_cluster_arn_isSet = !json[QString("DBClusterArn")].isNull() && m_db_cluster_arn_isValid;

    m_associated_roles_isValid = ::OpenAPI::fromJsonValue(m_associated_roles, json[QString("AssociatedRoles")]);
    m_associated_roles_isSet = !json[QString("AssociatedRoles")].isNull() && m_associated_roles_isValid;

    m_clone_group_id_isValid = ::OpenAPI::fromJsonValue(m_clone_group_id, json[QString("CloneGroupId")]);
    m_clone_group_id_isSet = !json[QString("CloneGroupId")].isNull() && m_clone_group_id_isValid;

    m_cluster_create_time_isValid = ::OpenAPI::fromJsonValue(m_cluster_create_time, json[QString("ClusterCreateTime")]);
    m_cluster_create_time_isSet = !json[QString("ClusterCreateTime")].isNull() && m_cluster_create_time_isValid;

    m_enabled_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enabled_cloudwatch_logs_exports, json[QString("EnabledCloudwatchLogsExports")]);
    m_enabled_cloudwatch_logs_exports_isSet = !json[QString("EnabledCloudwatchLogsExports")].isNull() && m_enabled_cloudwatch_logs_exports_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;
}

QString OAIDBClusterList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBClusterList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_backup_retention_period_isSet) {
        obj.insert(QString("BackupRetentionPeriod"), ::OpenAPI::toJsonValue(m_backup_retention_period));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_db_cluster_parameter_group_isSet) {
        obj.insert(QString("DBClusterParameterGroup"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group));
    }
    if (m_db_subnet_group_isSet) {
        obj.insert(QString("DBSubnetGroup"), ::OpenAPI::toJsonValue(m_db_subnet_group));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_percent_progress_isSet) {
        obj.insert(QString("PercentProgress"), ::OpenAPI::toJsonValue(m_percent_progress));
    }
    if (m_earliest_restorable_time_isSet) {
        obj.insert(QString("EarliestRestorableTime"), ::OpenAPI::toJsonValue(m_earliest_restorable_time));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_reader_endpoint_isSet) {
        obj.insert(QString("ReaderEndpoint"), ::OpenAPI::toJsonValue(m_reader_endpoint));
    }
    if (m_multi_az_isSet) {
        obj.insert(QString("MultiAZ"), ::OpenAPI::toJsonValue(m_multi_az));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_latest_restorable_time_isSet) {
        obj.insert(QString("LatestRestorableTime"), ::OpenAPI::toJsonValue(m_latest_restorable_time));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_master_username_isSet) {
        obj.insert(QString("MasterUsername"), ::OpenAPI::toJsonValue(m_master_username));
    }
    if (m_preferred_backup_window_isSet) {
        obj.insert(QString("PreferredBackupWindow"), ::OpenAPI::toJsonValue(m_preferred_backup_window));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("PreferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_replication_source_identifier_isSet) {
        obj.insert(QString("ReplicationSourceIdentifier"), ::OpenAPI::toJsonValue(m_replication_source_identifier));
    }
    if (m_read_replica_identifiers.isSet()) {
        obj.insert(QString("ReadReplicaIdentifiers"), ::OpenAPI::toJsonValue(m_read_replica_identifiers));
    }
    if (m_db_cluster_members.isSet()) {
        obj.insert(QString("DBClusterMembers"), ::OpenAPI::toJsonValue(m_db_cluster_members));
    }
    if (m_vpc_security_groups.isSet()) {
        obj.insert(QString("VpcSecurityGroups"), ::OpenAPI::toJsonValue(m_vpc_security_groups));
    }
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("HostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    if (m_storage_encrypted_isSet) {
        obj.insert(QString("StorageEncrypted"), ::OpenAPI::toJsonValue(m_storage_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_db_cluster_resource_id_isSet) {
        obj.insert(QString("DbClusterResourceId"), ::OpenAPI::toJsonValue(m_db_cluster_resource_id));
    }
    if (m_db_cluster_arn_isSet) {
        obj.insert(QString("DBClusterArn"), ::OpenAPI::toJsonValue(m_db_cluster_arn));
    }
    if (m_associated_roles.isSet()) {
        obj.insert(QString("AssociatedRoles"), ::OpenAPI::toJsonValue(m_associated_roles));
    }
    if (m_clone_group_id_isSet) {
        obj.insert(QString("CloneGroupId"), ::OpenAPI::toJsonValue(m_clone_group_id));
    }
    if (m_cluster_create_time_isSet) {
        obj.insert(QString("ClusterCreateTime"), ::OpenAPI::toJsonValue(m_cluster_create_time));
    }
    if (m_enabled_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnabledCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enabled_cloudwatch_logs_exports));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    return obj;
}

QList OAIDBClusterList_inner::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIDBClusterList_inner::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIDBClusterList_inner::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIDBClusterList_inner::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

qint32 OAIDBClusterList_inner::getBackupRetentionPeriod() const {
    return m_backup_retention_period;
}
void OAIDBClusterList_inner::setBackupRetentionPeriod(const qint32 &backup_retention_period) {
    m_backup_retention_period = backup_retention_period;
    m_backup_retention_period_isSet = true;
}

bool OAIDBClusterList_inner::is_backup_retention_period_Set() const{
    return m_backup_retention_period_isSet;
}

bool OAIDBClusterList_inner::is_backup_retention_period_Valid() const{
    return m_backup_retention_period_isValid;
}

QString OAIDBClusterList_inner::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIDBClusterList_inner::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIDBClusterList_inner::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIDBClusterList_inner::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAIDBClusterList_inner::getDbClusterParameterGroup() const {
    return m_db_cluster_parameter_group;
}
void OAIDBClusterList_inner::setDbClusterParameterGroup(const QString &db_cluster_parameter_group) {
    m_db_cluster_parameter_group = db_cluster_parameter_group;
    m_db_cluster_parameter_group_isSet = true;
}

bool OAIDBClusterList_inner::is_db_cluster_parameter_group_Set() const{
    return m_db_cluster_parameter_group_isSet;
}

bool OAIDBClusterList_inner::is_db_cluster_parameter_group_Valid() const{
    return m_db_cluster_parameter_group_isValid;
}

QString OAIDBClusterList_inner::getDbSubnetGroup() const {
    return m_db_subnet_group;
}
void OAIDBClusterList_inner::setDbSubnetGroup(const QString &db_subnet_group) {
    m_db_subnet_group = db_subnet_group;
    m_db_subnet_group_isSet = true;
}

bool OAIDBClusterList_inner::is_db_subnet_group_Set() const{
    return m_db_subnet_group_isSet;
}

bool OAIDBClusterList_inner::is_db_subnet_group_Valid() const{
    return m_db_subnet_group_isValid;
}

QString OAIDBClusterList_inner::getStatus() const {
    return m_status;
}
void OAIDBClusterList_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDBClusterList_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDBClusterList_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDBClusterList_inner::getPercentProgress() const {
    return m_percent_progress;
}
void OAIDBClusterList_inner::setPercentProgress(const QString &percent_progress) {
    m_percent_progress = percent_progress;
    m_percent_progress_isSet = true;
}

bool OAIDBClusterList_inner::is_percent_progress_Set() const{
    return m_percent_progress_isSet;
}

bool OAIDBClusterList_inner::is_percent_progress_Valid() const{
    return m_percent_progress_isValid;
}

QDateTime OAIDBClusterList_inner::getEarliestRestorableTime() const {
    return m_earliest_restorable_time;
}
void OAIDBClusterList_inner::setEarliestRestorableTime(const QDateTime &earliest_restorable_time) {
    m_earliest_restorable_time = earliest_restorable_time;
    m_earliest_restorable_time_isSet = true;
}

bool OAIDBClusterList_inner::is_earliest_restorable_time_Set() const{
    return m_earliest_restorable_time_isSet;
}

bool OAIDBClusterList_inner::is_earliest_restorable_time_Valid() const{
    return m_earliest_restorable_time_isValid;
}

QString OAIDBClusterList_inner::getEndpoint() const {
    return m_endpoint;
}
void OAIDBClusterList_inner::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIDBClusterList_inner::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIDBClusterList_inner::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIDBClusterList_inner::getReaderEndpoint() const {
    return m_reader_endpoint;
}
void OAIDBClusterList_inner::setReaderEndpoint(const QString &reader_endpoint) {
    m_reader_endpoint = reader_endpoint;
    m_reader_endpoint_isSet = true;
}

bool OAIDBClusterList_inner::is_reader_endpoint_Set() const{
    return m_reader_endpoint_isSet;
}

bool OAIDBClusterList_inner::is_reader_endpoint_Valid() const{
    return m_reader_endpoint_isValid;
}

bool OAIDBClusterList_inner::getMultiAz() const {
    return m_multi_az;
}
void OAIDBClusterList_inner::setMultiAz(const bool &multi_az) {
    m_multi_az = multi_az;
    m_multi_az_isSet = true;
}

bool OAIDBClusterList_inner::is_multi_az_Set() const{
    return m_multi_az_isSet;
}

bool OAIDBClusterList_inner::is_multi_az_Valid() const{
    return m_multi_az_isValid;
}

QString OAIDBClusterList_inner::getEngine() const {
    return m_engine;
}
void OAIDBClusterList_inner::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDBClusterList_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDBClusterList_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDBClusterList_inner::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBClusterList_inner::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBClusterList_inner::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBClusterList_inner::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QDateTime OAIDBClusterList_inner::getLatestRestorableTime() const {
    return m_latest_restorable_time;
}
void OAIDBClusterList_inner::setLatestRestorableTime(const QDateTime &latest_restorable_time) {
    m_latest_restorable_time = latest_restorable_time;
    m_latest_restorable_time_isSet = true;
}

bool OAIDBClusterList_inner::is_latest_restorable_time_Set() const{
    return m_latest_restorable_time_isSet;
}

bool OAIDBClusterList_inner::is_latest_restorable_time_Valid() const{
    return m_latest_restorable_time_isValid;
}

qint32 OAIDBClusterList_inner::getPort() const {
    return m_port;
}
void OAIDBClusterList_inner::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDBClusterList_inner::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDBClusterList_inner::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIDBClusterList_inner::getMasterUsername() const {
    return m_master_username;
}
void OAIDBClusterList_inner::setMasterUsername(const QString &master_username) {
    m_master_username = master_username;
    m_master_username_isSet = true;
}

bool OAIDBClusterList_inner::is_master_username_Set() const{
    return m_master_username_isSet;
}

bool OAIDBClusterList_inner::is_master_username_Valid() const{
    return m_master_username_isValid;
}

QString OAIDBClusterList_inner::getPreferredBackupWindow() const {
    return m_preferred_backup_window;
}
void OAIDBClusterList_inner::setPreferredBackupWindow(const QString &preferred_backup_window) {
    m_preferred_backup_window = preferred_backup_window;
    m_preferred_backup_window_isSet = true;
}

bool OAIDBClusterList_inner::is_preferred_backup_window_Set() const{
    return m_preferred_backup_window_isSet;
}

bool OAIDBClusterList_inner::is_preferred_backup_window_Valid() const{
    return m_preferred_backup_window_isValid;
}

QString OAIDBClusterList_inner::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIDBClusterList_inner::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIDBClusterList_inner::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIDBClusterList_inner::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

QString OAIDBClusterList_inner::getReplicationSourceIdentifier() const {
    return m_replication_source_identifier;
}
void OAIDBClusterList_inner::setReplicationSourceIdentifier(const QString &replication_source_identifier) {
    m_replication_source_identifier = replication_source_identifier;
    m_replication_source_identifier_isSet = true;
}

bool OAIDBClusterList_inner::is_replication_source_identifier_Set() const{
    return m_replication_source_identifier_isSet;
}

bool OAIDBClusterList_inner::is_replication_source_identifier_Valid() const{
    return m_replication_source_identifier_isValid;
}

QList OAIDBClusterList_inner::getReadReplicaIdentifiers() const {
    return m_read_replica_identifiers;
}
void OAIDBClusterList_inner::setReadReplicaIdentifiers(const QList &read_replica_identifiers) {
    m_read_replica_identifiers = read_replica_identifiers;
    m_read_replica_identifiers_isSet = true;
}

bool OAIDBClusterList_inner::is_read_replica_identifiers_Set() const{
    return m_read_replica_identifiers_isSet;
}

bool OAIDBClusterList_inner::is_read_replica_identifiers_Valid() const{
    return m_read_replica_identifiers_isValid;
}

QList OAIDBClusterList_inner::getDbClusterMembers() const {
    return m_db_cluster_members;
}
void OAIDBClusterList_inner::setDbClusterMembers(const QList &db_cluster_members) {
    m_db_cluster_members = db_cluster_members;
    m_db_cluster_members_isSet = true;
}

bool OAIDBClusterList_inner::is_db_cluster_members_Set() const{
    return m_db_cluster_members_isSet;
}

bool OAIDBClusterList_inner::is_db_cluster_members_Valid() const{
    return m_db_cluster_members_isValid;
}

QList OAIDBClusterList_inner::getVpcSecurityGroups() const {
    return m_vpc_security_groups;
}
void OAIDBClusterList_inner::setVpcSecurityGroups(const QList &vpc_security_groups) {
    m_vpc_security_groups = vpc_security_groups;
    m_vpc_security_groups_isSet = true;
}

bool OAIDBClusterList_inner::is_vpc_security_groups_Set() const{
    return m_vpc_security_groups_isSet;
}

bool OAIDBClusterList_inner::is_vpc_security_groups_Valid() const{
    return m_vpc_security_groups_isValid;
}

QString OAIDBClusterList_inner::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAIDBClusterList_inner::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAIDBClusterList_inner::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAIDBClusterList_inner::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

bool OAIDBClusterList_inner::getStorageEncrypted() const {
    return m_storage_encrypted;
}
void OAIDBClusterList_inner::setStorageEncrypted(const bool &storage_encrypted) {
    m_storage_encrypted = storage_encrypted;
    m_storage_encrypted_isSet = true;
}

bool OAIDBClusterList_inner::is_storage_encrypted_Set() const{
    return m_storage_encrypted_isSet;
}

bool OAIDBClusterList_inner::is_storage_encrypted_Valid() const{
    return m_storage_encrypted_isValid;
}

QString OAIDBClusterList_inner::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDBClusterList_inner::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDBClusterList_inner::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDBClusterList_inner::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAIDBClusterList_inner::getDbClusterResourceId() const {
    return m_db_cluster_resource_id;
}
void OAIDBClusterList_inner::setDbClusterResourceId(const QString &db_cluster_resource_id) {
    m_db_cluster_resource_id = db_cluster_resource_id;
    m_db_cluster_resource_id_isSet = true;
}

bool OAIDBClusterList_inner::is_db_cluster_resource_id_Set() const{
    return m_db_cluster_resource_id_isSet;
}

bool OAIDBClusterList_inner::is_db_cluster_resource_id_Valid() const{
    return m_db_cluster_resource_id_isValid;
}

QString OAIDBClusterList_inner::getDbClusterArn() const {
    return m_db_cluster_arn;
}
void OAIDBClusterList_inner::setDbClusterArn(const QString &db_cluster_arn) {
    m_db_cluster_arn = db_cluster_arn;
    m_db_cluster_arn_isSet = true;
}

bool OAIDBClusterList_inner::is_db_cluster_arn_Set() const{
    return m_db_cluster_arn_isSet;
}

bool OAIDBClusterList_inner::is_db_cluster_arn_Valid() const{
    return m_db_cluster_arn_isValid;
}

QList OAIDBClusterList_inner::getAssociatedRoles() const {
    return m_associated_roles;
}
void OAIDBClusterList_inner::setAssociatedRoles(const QList &associated_roles) {
    m_associated_roles = associated_roles;
    m_associated_roles_isSet = true;
}

bool OAIDBClusterList_inner::is_associated_roles_Set() const{
    return m_associated_roles_isSet;
}

bool OAIDBClusterList_inner::is_associated_roles_Valid() const{
    return m_associated_roles_isValid;
}

QString OAIDBClusterList_inner::getCloneGroupId() const {
    return m_clone_group_id;
}
void OAIDBClusterList_inner::setCloneGroupId(const QString &clone_group_id) {
    m_clone_group_id = clone_group_id;
    m_clone_group_id_isSet = true;
}

bool OAIDBClusterList_inner::is_clone_group_id_Set() const{
    return m_clone_group_id_isSet;
}

bool OAIDBClusterList_inner::is_clone_group_id_Valid() const{
    return m_clone_group_id_isValid;
}

QDateTime OAIDBClusterList_inner::getClusterCreateTime() const {
    return m_cluster_create_time;
}
void OAIDBClusterList_inner::setClusterCreateTime(const QDateTime &cluster_create_time) {
    m_cluster_create_time = cluster_create_time;
    m_cluster_create_time_isSet = true;
}

bool OAIDBClusterList_inner::is_cluster_create_time_Set() const{
    return m_cluster_create_time_isSet;
}

bool OAIDBClusterList_inner::is_cluster_create_time_Valid() const{
    return m_cluster_create_time_isValid;
}

QList OAIDBClusterList_inner::getEnabledCloudwatchLogsExports() const {
    return m_enabled_cloudwatch_logs_exports;
}
void OAIDBClusterList_inner::setEnabledCloudwatchLogsExports(const QList &enabled_cloudwatch_logs_exports) {
    m_enabled_cloudwatch_logs_exports = enabled_cloudwatch_logs_exports;
    m_enabled_cloudwatch_logs_exports_isSet = true;
}

bool OAIDBClusterList_inner::is_enabled_cloudwatch_logs_exports_Set() const{
    return m_enabled_cloudwatch_logs_exports_isSet;
}

bool OAIDBClusterList_inner::is_enabled_cloudwatch_logs_exports_Valid() const{
    return m_enabled_cloudwatch_logs_exports_isValid;
}

bool OAIDBClusterList_inner::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIDBClusterList_inner::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIDBClusterList_inner::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIDBClusterList_inner::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

bool OAIDBClusterList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_parameter_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reader_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_az_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_restorable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_backup_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_source_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_replica_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBClusterList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
