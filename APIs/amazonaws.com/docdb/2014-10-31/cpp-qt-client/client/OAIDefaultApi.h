/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddSourceIdentifierToSubscriptionMessage.h"
#include "OAIAddSourceIdentifierToSubscriptionResult.h"
#include "OAIAddTagsToResourceMessage.h"
#include "OAIApplyPendingMaintenanceActionMessage.h"
#include "OAIApplyPendingMaintenanceActionResult.h"
#include "OAICertificateMessage.h"
#include "OAICopyDBClusterParameterGroupMessage.h"
#include "OAICopyDBClusterParameterGroupResult.h"
#include "OAICopyDBClusterSnapshotMessage.h"
#include "OAICopyDBClusterSnapshotResult.h"
#include "OAICreateDBClusterMessage.h"
#include "OAICreateDBClusterParameterGroupMessage.h"
#include "OAICreateDBClusterParameterGroupResult.h"
#include "OAICreateDBClusterResult.h"
#include "OAICreateDBClusterSnapshotMessage.h"
#include "OAICreateDBClusterSnapshotResult.h"
#include "OAICreateDBInstanceMessage.h"
#include "OAICreateDBInstanceResult.h"
#include "OAICreateDBSubnetGroupMessage.h"
#include "OAICreateDBSubnetGroupResult.h"
#include "OAICreateEventSubscriptionMessage.h"
#include "OAICreateEventSubscriptionResult.h"
#include "OAICreateGlobalClusterMessage.h"
#include "OAICreateGlobalClusterResult.h"
#include "OAIDBClusterMessage.h"
#include "OAIDBClusterParameterGroupDetails.h"
#include "OAIDBClusterParameterGroupNameMessage.h"
#include "OAIDBClusterParameterGroupsMessage.h"
#include "OAIDBClusterSnapshotMessage.h"
#include "OAIDBEngineVersionMessage.h"
#include "OAIDBInstanceMessage.h"
#include "OAIDBSubnetGroupMessage.h"
#include "OAIDeleteDBClusterMessage.h"
#include "OAIDeleteDBClusterParameterGroupMessage.h"
#include "OAIDeleteDBClusterResult.h"
#include "OAIDeleteDBClusterSnapshotMessage.h"
#include "OAIDeleteDBClusterSnapshotResult.h"
#include "OAIDeleteDBInstanceMessage.h"
#include "OAIDeleteDBInstanceResult.h"
#include "OAIDeleteDBSubnetGroupMessage.h"
#include "OAIDeleteEventSubscriptionMessage.h"
#include "OAIDeleteEventSubscriptionResult.h"
#include "OAIDeleteGlobalClusterMessage.h"
#include "OAIDeleteGlobalClusterResult.h"
#include "OAIDescribeCertificatesMessage.h"
#include "OAIDescribeDBClusterParameterGroupsMessage.h"
#include "OAIDescribeDBClusterParametersMessage.h"
#include "OAIDescribeDBClusterSnapshotAttributesMessage.h"
#include "OAIDescribeDBClusterSnapshotAttributesResult.h"
#include "OAIDescribeDBClusterSnapshotsMessage.h"
#include "OAIDescribeDBClustersMessage.h"
#include "OAIDescribeDBEngineVersionsMessage.h"
#include "OAIDescribeDBInstancesMessage.h"
#include "OAIDescribeDBSubnetGroupsMessage.h"
#include "OAIDescribeEngineDefaultClusterParametersMessage.h"
#include "OAIDescribeEngineDefaultClusterParametersResult.h"
#include "OAIDescribeEventCategoriesMessage.h"
#include "OAIDescribeEventSubscriptionsMessage.h"
#include "OAIDescribeEventsMessage.h"
#include "OAIDescribeGlobalClustersMessage.h"
#include "OAIDescribeOrderableDBInstanceOptionsMessage.h"
#include "OAIDescribePendingMaintenanceActionsMessage.h"
#include "OAIEventCategoriesMessage.h"
#include "OAIEventSubscriptionsMessage.h"
#include "OAIEventsMessage.h"
#include "OAIFailoverDBClusterMessage.h"
#include "OAIFailoverDBClusterResult.h"
#include "OAIGET_AddTagsToResource_Tags_parameter_inner.h"
#include "OAIGET_DescribeCertificates_Filters_parameter_inner.h"
#include "OAIGET_ModifyDBClusterParameterGroup_Parameters_parameter_inner.h"
#include "OAIGET_ModifyDBCluster_CloudwatchLogsExportConfiguration_parameter.h"
#include "OAIGlobalClustersMessage.h"
#include "OAIListTagsForResourceMessage.h"
#include "OAIModifyDBClusterMessage.h"
#include "OAIModifyDBClusterParameterGroupMessage.h"
#include "OAIModifyDBClusterResult.h"
#include "OAIModifyDBClusterSnapshotAttributeMessage.h"
#include "OAIModifyDBClusterSnapshotAttributeResult.h"
#include "OAIModifyDBInstanceMessage.h"
#include "OAIModifyDBInstanceResult.h"
#include "OAIModifyDBSubnetGroupMessage.h"
#include "OAIModifyDBSubnetGroupResult.h"
#include "OAIModifyEventSubscriptionMessage.h"
#include "OAIModifyEventSubscriptionResult.h"
#include "OAIModifyGlobalClusterMessage.h"
#include "OAIModifyGlobalClusterResult.h"
#include "OAIOrderableDBInstanceOptionsMessage.h"
#include "OAIPendingMaintenanceActionsMessage.h"
#include "OAIRebootDBInstanceMessage.h"
#include "OAIRebootDBInstanceResult.h"
#include "OAIRemoveFromGlobalClusterMessage.h"
#include "OAIRemoveFromGlobalClusterResult.h"
#include "OAIRemoveSourceIdentifierFromSubscriptionMessage.h"
#include "OAIRemoveSourceIdentifierFromSubscriptionResult.h"
#include "OAIRemoveTagsFromResourceMessage.h"
#include "OAIResetDBClusterParameterGroupMessage.h"
#include "OAIRestoreDBClusterFromSnapshotMessage.h"
#include "OAIRestoreDBClusterFromSnapshotResult.h"
#include "OAIRestoreDBClusterToPointInTimeMessage.h"
#include "OAIRestoreDBClusterToPointInTimeResult.h"
#include "OAIStartDBClusterMessage.h"
#include "OAIStartDBClusterResult.h"
#include "OAIStopDBClusterMessage.h"
#include "OAIStopDBClusterResult.h"
#include "OAITagListMessage.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  source_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAddSourceIdentifierToSubscription(const QString &subscription_name, const QString &source_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_name QString [required]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETAddTagsToResource(const QString &resource_name, const QList<OAIGET_AddTagsToResource_Tags_parameter_inner> &tags, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_identifier QString [required]
    * @param[in]  apply_action QString [required]
    * @param[in]  opt_in_type QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETApplyPendingMaintenanceAction(const QString &resource_identifier, const QString &apply_action, const QString &opt_in_type, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source_db_cluster_parameter_group_identifier QString [required]
    * @param[in]  target_db_cluster_parameter_group_identifier QString [required]
    * @param[in]  target_db_cluster_parameter_group_description QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    */
    virtual void gETCopyDBClusterParameterGroup(const QString &source_db_cluster_parameter_group_identifier, const QString &target_db_cluster_parameter_group_identifier, const QString &target_db_cluster_parameter_group_description, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>());

    /**
    * @param[in]  source_db_cluster_snapshot_identifier QString [required]
    * @param[in]  target_db_cluster_snapshot_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  kms_key_id QString [optional]
    * @param[in]  pre_signed_url QString [optional]
    * @param[in]  copy_tags bool [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    */
    virtual void gETCopyDBClusterSnapshot(const QString &source_db_cluster_snapshot_identifier, const QString &target_db_cluster_snapshot_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &kms_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pre_signed_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &copy_tags = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>());

    /**
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  engine QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  availability_zones QList<QString> [optional]
    * @param[in]  backup_retention_period qint32 [optional]
    * @param[in]  db_cluster_parameter_group_name QString [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    * @param[in]  db_subnet_group_name QString [optional]
    * @param[in]  engine_version QString [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  master_username QString [optional]
    * @param[in]  master_user_password QString [optional]
    * @param[in]  preferred_backup_window QString [optional]
    * @param[in]  preferred_maintenance_window QString [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    * @param[in]  storage_encrypted bool [optional]
    * @param[in]  kms_key_id QString [optional]
    * @param[in]  pre_signed_url QString [optional]
    * @param[in]  enable_cloudwatch_logs_exports QList<QString> [optional]
    * @param[in]  deletion_protection bool [optional]
    * @param[in]  global_cluster_identifier QString [optional]
    */
    virtual void gETCreateDBCluster(const QString &db_cluster_identifier, const QString &engine, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability_zones = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &backup_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &db_cluster_parameter_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &db_subnet_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &master_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &master_user_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preferred_backup_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preferred_maintenance_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>(), const ::OpenAPI::OptionalParam<bool> &storage_encrypted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &kms_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pre_signed_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &enable_cloudwatch_logs_exports = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &deletion_protection = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &global_cluster_identifier = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_parameter_group_name QString [required]
    * @param[in]  db_parameter_group_family QString [required]
    * @param[in]  description QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateDBClusterParameterGroup(const QString &db_cluster_parameter_group_name, const QString &db_parameter_group_family, const QString &description, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>());

    /**
    * @param[in]  db_cluster_snapshot_identifier QString [required]
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateDBClusterSnapshot(const QString &db_cluster_snapshot_identifier, const QString &db_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>());

    /**
    * @param[in]  db_instance_identifier QString [required]
    * @param[in]  db_instance_class QString [required]
    * @param[in]  engine QString [required]
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  availability_zone QString [optional]
    * @param[in]  preferred_maintenance_window QString [optional]
    * @param[in]  auto_minor_version_upgrade bool [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    * @param[in]  copy_tags_to_snapshot bool [optional]
    * @param[in]  promotion_tier qint32 [optional]
    * @param[in]  enable_performance_insights bool [optional]
    * @param[in]  performance_insights_kms_key_id QString [optional]
    */
    virtual void gETCreateDBInstance(const QString &db_instance_identifier, const QString &db_instance_class, const QString &engine, const QString &db_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &availability_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preferred_maintenance_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_minor_version_upgrade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>(), const ::OpenAPI::OptionalParam<bool> &copy_tags_to_snapshot = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &promotion_tier = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &enable_performance_insights = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &performance_insights_kms_key_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_subnet_group_name QString [required]
    * @param[in]  db_subnet_group_description QString [required]
    * @param[in]  subnet_ids QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateDBSubnetGroup(const QString &db_subnet_group_name, const QString &db_subnet_group_description, const QList<QString> &subnet_ids, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>());

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  sns_topic_arn QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_type QString [optional]
    * @param[in]  event_categories QList<QString> [optional]
    * @param[in]  source_ids QList<QString> [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    */
    virtual void gETCreateEventSubscription(const QString &subscription_name, const QString &sns_topic_arn, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>());

    /**
    * @param[in]  global_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_db_cluster_identifier QString [optional]
    * @param[in]  engine QString [optional]
    * @param[in]  engine_version QString [optional]
    * @param[in]  deletion_protection bool [optional]
    * @param[in]  database_name QString [optional]
    * @param[in]  storage_encrypted bool [optional]
    */
    virtual void gETCreateGlobalCluster(const QString &global_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_db_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deletion_protection = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &database_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &storage_encrypted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  skip_final_snapshot bool [optional]
    * @param[in]  final_db_snapshot_identifier QString [optional]
    */
    virtual void gETDeleteDBCluster(const QString &db_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &skip_final_snapshot = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &final_db_snapshot_identifier = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_parameter_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteDBClusterParameterGroup(const QString &db_cluster_parameter_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_snapshot_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteDBClusterSnapshot(const QString &db_cluster_snapshot_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_instance_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteDBInstance(const QString &db_instance_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_subnet_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteDBSubnetGroup(const QString &db_subnet_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteEventSubscription(const QString &subscription_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  global_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteGlobalCluster(const QString &global_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  certificate_identifier QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeCertificates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &certificate_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_cluster_parameter_group_name QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDBClusterParameterGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_cluster_parameter_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_parameter_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDBClusterParameters(const QString &db_cluster_parameter_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_snapshot_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeDBClusterSnapshotAttributes(const QString &db_cluster_snapshot_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_cluster_identifier QString [optional]
    * @param[in]  db_cluster_snapshot_identifier QString [optional]
    * @param[in]  snapshot_type QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  include_shared bool [optional]
    * @param[in]  include_public bool [optional]
    */
    virtual void gETDescribeDBClusterSnapshots(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_cluster_snapshot_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &snapshot_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_shared = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_public = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_cluster_identifier QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDBClusters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  engine QString [optional]
    * @param[in]  engine_version QString [optional]
    * @param[in]  db_parameter_group_family QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  default_only bool [optional]
    * @param[in]  list_supported_character_sets bool [optional]
    * @param[in]  list_supported_timezones bool [optional]
    */
    virtual void gETDescribeDBEngineVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_parameter_group_family = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &default_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &list_supported_character_sets = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &list_supported_timezones = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_instance_identifier QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDBInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_instance_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_subnet_group_name QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeDBSubnetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_subnet_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_parameter_group_family QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeEngineDefaultClusterParameters(const QString &db_parameter_group_family, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_type QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    */
    virtual void gETDescribeEventCategories(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  subscription_name QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeEventSubscriptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subscription_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_identifier QString [optional]
    * @param[in]  source_type QString [optional]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  event_categories QList<QString> [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeEvents(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  global_cluster_identifier QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeGlobalClusters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &global_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  engine QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  engine_version QString [optional]
    * @param[in]  db_instance_class QString [optional]
    * @param[in]  license_model QString [optional]
    * @param[in]  vpc bool [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  max_records qint32 [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void gETDescribeOrderableDBInstanceOptions(const QString &engine, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &engine_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_instance_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license_model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &vpc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  resource_identifier QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  max_records qint32 [optional]
    */
    virtual void gETDescribePendingMaintenanceActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_records = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_cluster_identifier QString [optional]
    * @param[in]  target_db_instance_identifier QString [optional]
    */
    virtual void gETFailoverDBCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_db_instance_identifier = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  filters QList<OAIGET_DescribeCertificates_Filters_parameter_inner> [optional]
    */
    virtual void gETListTagsForResource(const QString &resource_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>> &filters = ::OpenAPI::OptionalParam<QList<OAIGET_DescribeCertificates_Filters_parameter_inner>>());

    /**
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  new_db_cluster_identifier QString [optional]
    * @param[in]  apply_immediately bool [optional]
    * @param[in]  backup_retention_period qint32 [optional]
    * @param[in]  db_cluster_parameter_group_name QString [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  master_user_password QString [optional]
    * @param[in]  preferred_backup_window QString [optional]
    * @param[in]  preferred_maintenance_window QString [optional]
    * @param[in]  cloudwatch_logs_export_configuration OAIGET_ModifyDBCluster_CloudwatchLogsExportConfiguration_parameter [optional]
    * @param[in]  engine_version QString [optional]
    * @param[in]  allow_major_version_upgrade bool [optional]
    * @param[in]  deletion_protection bool [optional]
    */
    virtual void gETModifyDBCluster(const QString &db_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_db_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &apply_immediately = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &backup_retention_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &db_cluster_parameter_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &master_user_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preferred_backup_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preferred_maintenance_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_ModifyDBCluster_CloudwatchLogsExportConfiguration_parameter> &cloudwatch_logs_export_configuration = ::OpenAPI::OptionalParam<OAIGET_ModifyDBCluster_CloudwatchLogsExportConfiguration_parameter>(), const ::OpenAPI::OptionalParam<QString> &engine_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_major_version_upgrade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &deletion_protection = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  db_cluster_parameter_group_name QString [required]
    * @param[in]  parameters QList<OAIGET_ModifyDBClusterParameterGroup_Parameters_parameter_inner> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETModifyDBClusterParameterGroup(const QString &db_cluster_parameter_group_name, const QList<OAIGET_ModifyDBClusterParameterGroup_Parameters_parameter_inner> &parameters, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_snapshot_identifier QString [required]
    * @param[in]  attribute_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  values_to_add QList<QString> [optional]
    * @param[in]  values_to_remove QList<QString> [optional]
    */
    virtual void gETModifyDBClusterSnapshotAttribute(const QString &db_cluster_snapshot_identifier, const QString &attribute_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &values_to_add = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &values_to_remove = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  db_instance_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_instance_class QString [optional]
    * @param[in]  apply_immediately bool [optional]
    * @param[in]  preferred_maintenance_window QString [optional]
    * @param[in]  auto_minor_version_upgrade bool [optional]
    * @param[in]  new_db_instance_identifier QString [optional]
    * @param[in]  ca_certificate_identifier QString [optional]
    * @param[in]  copy_tags_to_snapshot bool [optional]
    * @param[in]  promotion_tier qint32 [optional]
    * @param[in]  enable_performance_insights bool [optional]
    * @param[in]  performance_insights_kms_key_id QString [optional]
    */
    virtual void gETModifyDBInstance(const QString &db_instance_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_instance_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &apply_immediately = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &preferred_maintenance_window = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_minor_version_upgrade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &new_db_instance_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ca_certificate_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &copy_tags_to_snapshot = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &promotion_tier = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &enable_performance_insights = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &performance_insights_kms_key_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_subnet_group_name QString [required]
    * @param[in]  subnet_ids QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  db_subnet_group_description QString [optional]
    */
    virtual void gETModifyDBSubnetGroup(const QString &db_subnet_group_name, const QList<QString> &subnet_ids, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_subnet_group_description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  sns_topic_arn QString [optional]
    * @param[in]  source_type QString [optional]
    * @param[in]  event_categories QList<QString> [optional]
    * @param[in]  enabled bool [optional]
    */
    virtual void gETModifyEventSubscription(const QString &subscription_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sns_topic_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_categories = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  global_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  new_global_cluster_identifier QString [optional]
    * @param[in]  deletion_protection bool [optional]
    */
    virtual void gETModifyGlobalCluster(const QString &global_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_global_cluster_identifier = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &deletion_protection = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  db_instance_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  force_failover bool [optional]
    */
    virtual void gETRebootDBInstance(const QString &db_instance_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force_failover = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  global_cluster_identifier QString [required]
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRemoveFromGlobalCluster(const QString &global_cluster_identifier, const QString &db_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_name QString [required]
    * @param[in]  source_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRemoveSourceIdentifierFromSubscription(const QString &subscription_name, const QString &source_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_name QString [required]
    * @param[in]  tag_keys QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETRemoveTagsFromResource(const QString &resource_name, const QList<QString> &tag_keys, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_parameter_group_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  reset_all_parameters bool [optional]
    * @param[in]  parameters QList<OAIGET_ModifyDBClusterParameterGroup_Parameters_parameter_inner> [optional]
    */
    virtual void gETResetDBClusterParameterGroup(const QString &db_cluster_parameter_group_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reset_all_parameters = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIGET_ModifyDBClusterParameterGroup_Parameters_parameter_inner>> &parameters = ::OpenAPI::OptionalParam<QList<OAIGET_ModifyDBClusterParameterGroup_Parameters_parameter_inner>>());

    /**
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  snapshot_identifier QString [required]
    * @param[in]  engine QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  availability_zones QList<QString> [optional]
    * @param[in]  engine_version QString [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  db_subnet_group_name QString [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    * @param[in]  kms_key_id QString [optional]
    * @param[in]  enable_cloudwatch_logs_exports QList<QString> [optional]
    * @param[in]  deletion_protection bool [optional]
    * @param[in]  db_cluster_parameter_group_name QString [optional]
    */
    virtual void gETRestoreDBClusterFromSnapshot(const QString &db_cluster_identifier, const QString &snapshot_identifier, const QString &engine, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &availability_zones = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &engine_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &db_subnet_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>(), const ::OpenAPI::OptionalParam<QString> &kms_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &enable_cloudwatch_logs_exports = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &deletion_protection = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &db_cluster_parameter_group_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  source_db_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  restore_type QString [optional]
    * @param[in]  restore_to_time QDateTime [optional]
    * @param[in]  use_latest_restorable_time bool [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  db_subnet_group_name QString [optional]
    * @param[in]  vpc_security_group_ids QList<QString> [optional]
    * @param[in]  tags QList<OAIGET_AddTagsToResource_Tags_parameter_inner> [optional]
    * @param[in]  kms_key_id QString [optional]
    * @param[in]  enable_cloudwatch_logs_exports QList<QString> [optional]
    * @param[in]  deletion_protection bool [optional]
    */
    virtual void gETRestoreDBClusterToPointInTime(const QString &db_cluster_identifier, const QString &source_db_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &restore_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &restore_to_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<bool> &use_latest_restorable_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &db_subnet_group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &vpc_security_group_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>> &tags = ::OpenAPI::OptionalParam<QList<OAIGET_AddTagsToResource_Tags_parameter_inner>>(), const ::OpenAPI::OptionalParam<QString> &kms_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &enable_cloudwatch_logs_exports = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &deletion_protection = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETStartDBCluster(const QString &db_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db_cluster_identifier QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETStopDBCluster(const QString &db_cluster_identifier, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_add_source_identifier_to_subscription_message OAIAddSourceIdentifierToSubscriptionMessage [optional]
    */
    virtual void pOSTAddSourceIdentifierToSubscription(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddSourceIdentifierToSubscriptionMessage> &oai_add_source_identifier_to_subscription_message = ::OpenAPI::OptionalParam<OAIAddSourceIdentifierToSubscriptionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_add_tags_to_resource_message OAIAddTagsToResourceMessage [optional]
    */
    virtual void pOSTAddTagsToResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddTagsToResourceMessage> &oai_add_tags_to_resource_message = ::OpenAPI::OptionalParam<OAIAddTagsToResourceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_apply_pending_maintenance_action_message OAIApplyPendingMaintenanceActionMessage [optional]
    */
    virtual void pOSTApplyPendingMaintenanceAction(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIApplyPendingMaintenanceActionMessage> &oai_apply_pending_maintenance_action_message = ::OpenAPI::OptionalParam<OAIApplyPendingMaintenanceActionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_copy_db_cluster_parameter_group_message OAICopyDBClusterParameterGroupMessage [optional]
    */
    virtual void pOSTCopyDBClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICopyDBClusterParameterGroupMessage> &oai_copy_db_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAICopyDBClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_copy_db_cluster_snapshot_message OAICopyDBClusterSnapshotMessage [optional]
    */
    virtual void pOSTCopyDBClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICopyDBClusterSnapshotMessage> &oai_copy_db_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAICopyDBClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_db_cluster_message OAICreateDBClusterMessage [optional]
    */
    virtual void pOSTCreateDBCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateDBClusterMessage> &oai_create_db_cluster_message = ::OpenAPI::OptionalParam<OAICreateDBClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_db_cluster_parameter_group_message OAICreateDBClusterParameterGroupMessage [optional]
    */
    virtual void pOSTCreateDBClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateDBClusterParameterGroupMessage> &oai_create_db_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAICreateDBClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_db_cluster_snapshot_message OAICreateDBClusterSnapshotMessage [optional]
    */
    virtual void pOSTCreateDBClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateDBClusterSnapshotMessage> &oai_create_db_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAICreateDBClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_db_instance_message OAICreateDBInstanceMessage [optional]
    */
    virtual void pOSTCreateDBInstance(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateDBInstanceMessage> &oai_create_db_instance_message = ::OpenAPI::OptionalParam<OAICreateDBInstanceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_db_subnet_group_message OAICreateDBSubnetGroupMessage [optional]
    */
    virtual void pOSTCreateDBSubnetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateDBSubnetGroupMessage> &oai_create_db_subnet_group_message = ::OpenAPI::OptionalParam<OAICreateDBSubnetGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_event_subscription_message OAICreateEventSubscriptionMessage [optional]
    */
    virtual void pOSTCreateEventSubscription(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateEventSubscriptionMessage> &oai_create_event_subscription_message = ::OpenAPI::OptionalParam<OAICreateEventSubscriptionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_global_cluster_message OAICreateGlobalClusterMessage [optional]
    */
    virtual void pOSTCreateGlobalCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateGlobalClusterMessage> &oai_create_global_cluster_message = ::OpenAPI::OptionalParam<OAICreateGlobalClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_db_cluster_message OAIDeleteDBClusterMessage [optional]
    */
    virtual void pOSTDeleteDBCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteDBClusterMessage> &oai_delete_db_cluster_message = ::OpenAPI::OptionalParam<OAIDeleteDBClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_db_cluster_parameter_group_message OAIDeleteDBClusterParameterGroupMessage [optional]
    */
    virtual void pOSTDeleteDBClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteDBClusterParameterGroupMessage> &oai_delete_db_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAIDeleteDBClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_db_cluster_snapshot_message OAIDeleteDBClusterSnapshotMessage [optional]
    */
    virtual void pOSTDeleteDBClusterSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteDBClusterSnapshotMessage> &oai_delete_db_cluster_snapshot_message = ::OpenAPI::OptionalParam<OAIDeleteDBClusterSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_db_instance_message OAIDeleteDBInstanceMessage [optional]
    */
    virtual void pOSTDeleteDBInstance(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteDBInstanceMessage> &oai_delete_db_instance_message = ::OpenAPI::OptionalParam<OAIDeleteDBInstanceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_db_subnet_group_message OAIDeleteDBSubnetGroupMessage [optional]
    */
    virtual void pOSTDeleteDBSubnetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteDBSubnetGroupMessage> &oai_delete_db_subnet_group_message = ::OpenAPI::OptionalParam<OAIDeleteDBSubnetGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_event_subscription_message OAIDeleteEventSubscriptionMessage [optional]
    */
    virtual void pOSTDeleteEventSubscription(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteEventSubscriptionMessage> &oai_delete_event_subscription_message = ::OpenAPI::OptionalParam<OAIDeleteEventSubscriptionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_global_cluster_message OAIDeleteGlobalClusterMessage [optional]
    */
    virtual void pOSTDeleteGlobalCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteGlobalClusterMessage> &oai_delete_global_cluster_message = ::OpenAPI::OptionalParam<OAIDeleteGlobalClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_certificates_message OAIDescribeCertificatesMessage [optional]
    */
    virtual void pOSTDescribeCertificates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeCertificatesMessage> &oai_describe_certificates_message = ::OpenAPI::OptionalParam<OAIDescribeCertificatesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_db_cluster_parameter_groups_message OAIDescribeDBClusterParameterGroupsMessage [optional]
    */
    virtual void pOSTDescribeDBClusterParameterGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDBClusterParameterGroupsMessage> &oai_describe_db_cluster_parameter_groups_message = ::OpenAPI::OptionalParam<OAIDescribeDBClusterParameterGroupsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_db_cluster_parameters_message OAIDescribeDBClusterParametersMessage [optional]
    */
    virtual void pOSTDescribeDBClusterParameters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDBClusterParametersMessage> &oai_describe_db_cluster_parameters_message = ::OpenAPI::OptionalParam<OAIDescribeDBClusterParametersMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_db_cluster_snapshot_attributes_message OAIDescribeDBClusterSnapshotAttributesMessage [optional]
    */
    virtual void pOSTDescribeDBClusterSnapshotAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDBClusterSnapshotAttributesMessage> &oai_describe_db_cluster_snapshot_attributes_message = ::OpenAPI::OptionalParam<OAIDescribeDBClusterSnapshotAttributesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_db_cluster_snapshots_message OAIDescribeDBClusterSnapshotsMessage [optional]
    */
    virtual void pOSTDescribeDBClusterSnapshots(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDBClusterSnapshotsMessage> &oai_describe_db_cluster_snapshots_message = ::OpenAPI::OptionalParam<OAIDescribeDBClusterSnapshotsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_db_clusters_message OAIDescribeDBClustersMessage [optional]
    */
    virtual void pOSTDescribeDBClusters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDBClustersMessage> &oai_describe_db_clusters_message = ::OpenAPI::OptionalParam<OAIDescribeDBClustersMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_db_engine_versions_message OAIDescribeDBEngineVersionsMessage [optional]
    */
    virtual void pOSTDescribeDBEngineVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDBEngineVersionsMessage> &oai_describe_db_engine_versions_message = ::OpenAPI::OptionalParam<OAIDescribeDBEngineVersionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_db_instances_message OAIDescribeDBInstancesMessage [optional]
    */
    virtual void pOSTDescribeDBInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDBInstancesMessage> &oai_describe_db_instances_message = ::OpenAPI::OptionalParam<OAIDescribeDBInstancesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_db_subnet_groups_message OAIDescribeDBSubnetGroupsMessage [optional]
    */
    virtual void pOSTDescribeDBSubnetGroups(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeDBSubnetGroupsMessage> &oai_describe_db_subnet_groups_message = ::OpenAPI::OptionalParam<OAIDescribeDBSubnetGroupsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_engine_default_cluster_parameters_message OAIDescribeEngineDefaultClusterParametersMessage [optional]
    */
    virtual void pOSTDescribeEngineDefaultClusterParameters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEngineDefaultClusterParametersMessage> &oai_describe_engine_default_cluster_parameters_message = ::OpenAPI::OptionalParam<OAIDescribeEngineDefaultClusterParametersMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_event_categories_message OAIDescribeEventCategoriesMessage [optional]
    */
    virtual void pOSTDescribeEventCategories(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEventCategoriesMessage> &oai_describe_event_categories_message = ::OpenAPI::OptionalParam<OAIDescribeEventCategoriesMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_event_subscriptions_message OAIDescribeEventSubscriptionsMessage [optional]
    */
    virtual void pOSTDescribeEventSubscriptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEventSubscriptionsMessage> &oai_describe_event_subscriptions_message = ::OpenAPI::OptionalParam<OAIDescribeEventSubscriptionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_events_message OAIDescribeEventsMessage [optional]
    */
    virtual void pOSTDescribeEvents(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeEventsMessage> &oai_describe_events_message = ::OpenAPI::OptionalParam<OAIDescribeEventsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_global_clusters_message OAIDescribeGlobalClustersMessage [optional]
    */
    virtual void pOSTDescribeGlobalClusters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeGlobalClustersMessage> &oai_describe_global_clusters_message = ::OpenAPI::OptionalParam<OAIDescribeGlobalClustersMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_orderable_db_instance_options_message OAIDescribeOrderableDBInstanceOptionsMessage [optional]
    */
    virtual void pOSTDescribeOrderableDBInstanceOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeOrderableDBInstanceOptionsMessage> &oai_describe_orderable_db_instance_options_message = ::OpenAPI::OptionalParam<OAIDescribeOrderableDBInstanceOptionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_records QString [optional]
    * @param[in]  marker QString [optional]
    * @param[in]  oai_describe_pending_maintenance_actions_message OAIDescribePendingMaintenanceActionsMessage [optional]
    */
    virtual void pOSTDescribePendingMaintenanceActions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_records = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribePendingMaintenanceActionsMessage> &oai_describe_pending_maintenance_actions_message = ::OpenAPI::OptionalParam<OAIDescribePendingMaintenanceActionsMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_failover_db_cluster_message OAIFailoverDBClusterMessage [optional]
    */
    virtual void pOSTFailoverDBCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFailoverDBClusterMessage> &oai_failover_db_cluster_message = ::OpenAPI::OptionalParam<OAIFailoverDBClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_list_tags_for_resource_message OAIListTagsForResourceMessage [optional]
    */
    virtual void pOSTListTagsForResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListTagsForResourceMessage> &oai_list_tags_for_resource_message = ::OpenAPI::OptionalParam<OAIListTagsForResourceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_db_cluster_message OAIModifyDBClusterMessage [optional]
    */
    virtual void pOSTModifyDBCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyDBClusterMessage> &oai_modify_db_cluster_message = ::OpenAPI::OptionalParam<OAIModifyDBClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_db_cluster_parameter_group_message OAIModifyDBClusterParameterGroupMessage [optional]
    */
    virtual void pOSTModifyDBClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyDBClusterParameterGroupMessage> &oai_modify_db_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAIModifyDBClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_db_cluster_snapshot_attribute_message OAIModifyDBClusterSnapshotAttributeMessage [optional]
    */
    virtual void pOSTModifyDBClusterSnapshotAttribute(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyDBClusterSnapshotAttributeMessage> &oai_modify_db_cluster_snapshot_attribute_message = ::OpenAPI::OptionalParam<OAIModifyDBClusterSnapshotAttributeMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_db_instance_message OAIModifyDBInstanceMessage [optional]
    */
    virtual void pOSTModifyDBInstance(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyDBInstanceMessage> &oai_modify_db_instance_message = ::OpenAPI::OptionalParam<OAIModifyDBInstanceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_db_subnet_group_message OAIModifyDBSubnetGroupMessage [optional]
    */
    virtual void pOSTModifyDBSubnetGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyDBSubnetGroupMessage> &oai_modify_db_subnet_group_message = ::OpenAPI::OptionalParam<OAIModifyDBSubnetGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_event_subscription_message OAIModifyEventSubscriptionMessage [optional]
    */
    virtual void pOSTModifyEventSubscription(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyEventSubscriptionMessage> &oai_modify_event_subscription_message = ::OpenAPI::OptionalParam<OAIModifyEventSubscriptionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_modify_global_cluster_message OAIModifyGlobalClusterMessage [optional]
    */
    virtual void pOSTModifyGlobalCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyGlobalClusterMessage> &oai_modify_global_cluster_message = ::OpenAPI::OptionalParam<OAIModifyGlobalClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_reboot_db_instance_message OAIRebootDBInstanceMessage [optional]
    */
    virtual void pOSTRebootDBInstance(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRebootDBInstanceMessage> &oai_reboot_db_instance_message = ::OpenAPI::OptionalParam<OAIRebootDBInstanceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_remove_from_global_cluster_message OAIRemoveFromGlobalClusterMessage [optional]
    */
    virtual void pOSTRemoveFromGlobalCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveFromGlobalClusterMessage> &oai_remove_from_global_cluster_message = ::OpenAPI::OptionalParam<OAIRemoveFromGlobalClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_remove_source_identifier_from_subscription_message OAIRemoveSourceIdentifierFromSubscriptionMessage [optional]
    */
    virtual void pOSTRemoveSourceIdentifierFromSubscription(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveSourceIdentifierFromSubscriptionMessage> &oai_remove_source_identifier_from_subscription_message = ::OpenAPI::OptionalParam<OAIRemoveSourceIdentifierFromSubscriptionMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_remove_tags_from_resource_message OAIRemoveTagsFromResourceMessage [optional]
    */
    virtual void pOSTRemoveTagsFromResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveTagsFromResourceMessage> &oai_remove_tags_from_resource_message = ::OpenAPI::OptionalParam<OAIRemoveTagsFromResourceMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_reset_db_cluster_parameter_group_message OAIResetDBClusterParameterGroupMessage [optional]
    */
    virtual void pOSTResetDBClusterParameterGroup(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIResetDBClusterParameterGroupMessage> &oai_reset_db_cluster_parameter_group_message = ::OpenAPI::OptionalParam<OAIResetDBClusterParameterGroupMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_restore_db_cluster_from_snapshot_message OAIRestoreDBClusterFromSnapshotMessage [optional]
    */
    virtual void pOSTRestoreDBClusterFromSnapshot(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRestoreDBClusterFromSnapshotMessage> &oai_restore_db_cluster_from_snapshot_message = ::OpenAPI::OptionalParam<OAIRestoreDBClusterFromSnapshotMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_restore_db_cluster_to_point_in_time_message OAIRestoreDBClusterToPointInTimeMessage [optional]
    */
    virtual void pOSTRestoreDBClusterToPointInTime(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRestoreDBClusterToPointInTimeMessage> &oai_restore_db_cluster_to_point_in_time_message = ::OpenAPI::OptionalParam<OAIRestoreDBClusterToPointInTimeMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_start_db_cluster_message OAIStartDBClusterMessage [optional]
    */
    virtual void pOSTStartDBCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStartDBClusterMessage> &oai_start_db_cluster_message = ::OpenAPI::OptionalParam<OAIStartDBClusterMessage>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_stop_db_cluster_message OAIStopDBClusterMessage [optional]
    */
    virtual void pOSTStopDBCluster(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStopDBClusterMessage> &oai_stop_db_cluster_message = ::OpenAPI::OptionalParam<OAIStopDBClusterMessage>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETAddSourceIdentifierToSubscriptionCallback(OAIHttpRequestWorker *worker);
    void gETAddTagsToResourceCallback(OAIHttpRequestWorker *worker);
    void gETApplyPendingMaintenanceActionCallback(OAIHttpRequestWorker *worker);
    void gETCopyDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETCopyDBClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETCreateDBClusterCallback(OAIHttpRequestWorker *worker);
    void gETCreateDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETCreateDBClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETCreateDBInstanceCallback(OAIHttpRequestWorker *worker);
    void gETCreateDBSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void gETCreateEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void gETCreateGlobalClusterCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDBClusterCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDBClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDBInstanceCallback(OAIHttpRequestWorker *worker);
    void gETDeleteDBSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void gETDeleteEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void gETDeleteGlobalClusterCallback(OAIHttpRequestWorker *worker);
    void gETDescribeCertificatesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDBClusterParameterGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDBClusterParametersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDBClusterSnapshotAttributesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDBClusterSnapshotsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDBClustersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDBEngineVersionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDBInstancesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeDBSubnetGroupsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEngineDefaultClusterParametersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEventCategoriesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEventSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeEventsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeGlobalClustersCallback(OAIHttpRequestWorker *worker);
    void gETDescribeOrderableDBInstanceOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDescribePendingMaintenanceActionsCallback(OAIHttpRequestWorker *worker);
    void gETFailoverDBClusterCallback(OAIHttpRequestWorker *worker);
    void gETListTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void gETModifyDBClusterCallback(OAIHttpRequestWorker *worker);
    void gETModifyDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETModifyDBClusterSnapshotAttributeCallback(OAIHttpRequestWorker *worker);
    void gETModifyDBInstanceCallback(OAIHttpRequestWorker *worker);
    void gETModifyDBSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void gETModifyEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void gETModifyGlobalClusterCallback(OAIHttpRequestWorker *worker);
    void gETRebootDBInstanceCallback(OAIHttpRequestWorker *worker);
    void gETRemoveFromGlobalClusterCallback(OAIHttpRequestWorker *worker);
    void gETRemoveSourceIdentifierFromSubscriptionCallback(OAIHttpRequestWorker *worker);
    void gETRemoveTagsFromResourceCallback(OAIHttpRequestWorker *worker);
    void gETResetDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void gETRestoreDBClusterFromSnapshotCallback(OAIHttpRequestWorker *worker);
    void gETRestoreDBClusterToPointInTimeCallback(OAIHttpRequestWorker *worker);
    void gETStartDBClusterCallback(OAIHttpRequestWorker *worker);
    void gETStopDBClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTAddSourceIdentifierToSubscriptionCallback(OAIHttpRequestWorker *worker);
    void pOSTAddTagsToResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTApplyPendingMaintenanceActionCallback(OAIHttpRequestWorker *worker);
    void pOSTCopyDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTCopyDBClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateDBClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateDBClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateDBInstanceCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateDBSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateGlobalClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDBClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDBClusterSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDBInstanceCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteDBSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteGlobalClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeCertificatesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDBClusterParameterGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDBClusterParametersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDBClusterSnapshotAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDBClusterSnapshotsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDBClustersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDBEngineVersionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDBInstancesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeDBSubnetGroupsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEngineDefaultClusterParametersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEventCategoriesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEventSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeEventsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeGlobalClustersCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeOrderableDBInstanceOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribePendingMaintenanceActionsCallback(OAIHttpRequestWorker *worker);
    void pOSTFailoverDBClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTListTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyDBClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyDBClusterSnapshotAttributeCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyDBInstanceCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyDBSubnetGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyEventSubscriptionCallback(OAIHttpRequestWorker *worker);
    void pOSTModifyGlobalClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTRebootDBInstanceCallback(OAIHttpRequestWorker *worker);
    void pOSTRemoveFromGlobalClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTRemoveSourceIdentifierFromSubscriptionCallback(OAIHttpRequestWorker *worker);
    void pOSTRemoveTagsFromResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTResetDBClusterParameterGroupCallback(OAIHttpRequestWorker *worker);
    void pOSTRestoreDBClusterFromSnapshotCallback(OAIHttpRequestWorker *worker);
    void pOSTRestoreDBClusterToPointInTimeCallback(OAIHttpRequestWorker *worker);
    void pOSTStartDBClusterCallback(OAIHttpRequestWorker *worker);
    void pOSTStopDBClusterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETAddSourceIdentifierToSubscriptionSignal(OAIAddSourceIdentifierToSubscriptionResult summary);
    void gETAddTagsToResourceSignal();
    void gETApplyPendingMaintenanceActionSignal(OAIApplyPendingMaintenanceActionResult summary);
    void gETCopyDBClusterParameterGroupSignal(OAICopyDBClusterParameterGroupResult summary);
    void gETCopyDBClusterSnapshotSignal(OAICopyDBClusterSnapshotResult summary);
    void gETCreateDBClusterSignal(OAICreateDBClusterResult summary);
    void gETCreateDBClusterParameterGroupSignal(OAICreateDBClusterParameterGroupResult summary);
    void gETCreateDBClusterSnapshotSignal(OAICreateDBClusterSnapshotResult summary);
    void gETCreateDBInstanceSignal(OAICreateDBInstanceResult summary);
    void gETCreateDBSubnetGroupSignal(OAICreateDBSubnetGroupResult summary);
    void gETCreateEventSubscriptionSignal(OAICreateEventSubscriptionResult summary);
    void gETCreateGlobalClusterSignal(OAICreateGlobalClusterResult summary);
    void gETDeleteDBClusterSignal(OAIDeleteDBClusterResult summary);
    void gETDeleteDBClusterParameterGroupSignal();
    void gETDeleteDBClusterSnapshotSignal(OAIDeleteDBClusterSnapshotResult summary);
    void gETDeleteDBInstanceSignal(OAIDeleteDBInstanceResult summary);
    void gETDeleteDBSubnetGroupSignal();
    void gETDeleteEventSubscriptionSignal(OAIDeleteEventSubscriptionResult summary);
    void gETDeleteGlobalClusterSignal(OAIDeleteGlobalClusterResult summary);
    void gETDescribeCertificatesSignal(OAICertificateMessage summary);
    void gETDescribeDBClusterParameterGroupsSignal(OAIDBClusterParameterGroupsMessage summary);
    void gETDescribeDBClusterParametersSignal(OAIDBClusterParameterGroupDetails summary);
    void gETDescribeDBClusterSnapshotAttributesSignal(OAIDescribeDBClusterSnapshotAttributesResult summary);
    void gETDescribeDBClusterSnapshotsSignal(OAIDBClusterSnapshotMessage summary);
    void gETDescribeDBClustersSignal(OAIDBClusterMessage summary);
    void gETDescribeDBEngineVersionsSignal(OAIDBEngineVersionMessage summary);
    void gETDescribeDBInstancesSignal(OAIDBInstanceMessage summary);
    void gETDescribeDBSubnetGroupsSignal(OAIDBSubnetGroupMessage summary);
    void gETDescribeEngineDefaultClusterParametersSignal(OAIDescribeEngineDefaultClusterParametersResult summary);
    void gETDescribeEventCategoriesSignal(OAIEventCategoriesMessage summary);
    void gETDescribeEventSubscriptionsSignal(OAIEventSubscriptionsMessage summary);
    void gETDescribeEventsSignal(OAIEventsMessage summary);
    void gETDescribeGlobalClustersSignal(OAIGlobalClustersMessage summary);
    void gETDescribeOrderableDBInstanceOptionsSignal(OAIOrderableDBInstanceOptionsMessage summary);
    void gETDescribePendingMaintenanceActionsSignal(OAIPendingMaintenanceActionsMessage summary);
    void gETFailoverDBClusterSignal(OAIFailoverDBClusterResult summary);
    void gETListTagsForResourceSignal(OAITagListMessage summary);
    void gETModifyDBClusterSignal(OAIModifyDBClusterResult summary);
    void gETModifyDBClusterParameterGroupSignal(OAIDBClusterParameterGroupNameMessage summary);
    void gETModifyDBClusterSnapshotAttributeSignal(OAIModifyDBClusterSnapshotAttributeResult summary);
    void gETModifyDBInstanceSignal(OAIModifyDBInstanceResult summary);
    void gETModifyDBSubnetGroupSignal(OAIModifyDBSubnetGroupResult summary);
    void gETModifyEventSubscriptionSignal(OAIModifyEventSubscriptionResult summary);
    void gETModifyGlobalClusterSignal(OAIModifyGlobalClusterResult summary);
    void gETRebootDBInstanceSignal(OAIRebootDBInstanceResult summary);
    void gETRemoveFromGlobalClusterSignal(OAIRemoveFromGlobalClusterResult summary);
    void gETRemoveSourceIdentifierFromSubscriptionSignal(OAIRemoveSourceIdentifierFromSubscriptionResult summary);
    void gETRemoveTagsFromResourceSignal();
    void gETResetDBClusterParameterGroupSignal(OAIDBClusterParameterGroupNameMessage summary);
    void gETRestoreDBClusterFromSnapshotSignal(OAIRestoreDBClusterFromSnapshotResult summary);
    void gETRestoreDBClusterToPointInTimeSignal(OAIRestoreDBClusterToPointInTimeResult summary);
    void gETStartDBClusterSignal(OAIStartDBClusterResult summary);
    void gETStopDBClusterSignal(OAIStopDBClusterResult summary);
    void pOSTAddSourceIdentifierToSubscriptionSignal(OAIAddSourceIdentifierToSubscriptionResult summary);
    void pOSTAddTagsToResourceSignal();
    void pOSTApplyPendingMaintenanceActionSignal(OAIApplyPendingMaintenanceActionResult summary);
    void pOSTCopyDBClusterParameterGroupSignal(OAICopyDBClusterParameterGroupResult summary);
    void pOSTCopyDBClusterSnapshotSignal(OAICopyDBClusterSnapshotResult summary);
    void pOSTCreateDBClusterSignal(OAICreateDBClusterResult summary);
    void pOSTCreateDBClusterParameterGroupSignal(OAICreateDBClusterParameterGroupResult summary);
    void pOSTCreateDBClusterSnapshotSignal(OAICreateDBClusterSnapshotResult summary);
    void pOSTCreateDBInstanceSignal(OAICreateDBInstanceResult summary);
    void pOSTCreateDBSubnetGroupSignal(OAICreateDBSubnetGroupResult summary);
    void pOSTCreateEventSubscriptionSignal(OAICreateEventSubscriptionResult summary);
    void pOSTCreateGlobalClusterSignal(OAICreateGlobalClusterResult summary);
    void pOSTDeleteDBClusterSignal(OAIDeleteDBClusterResult summary);
    void pOSTDeleteDBClusterParameterGroupSignal();
    void pOSTDeleteDBClusterSnapshotSignal(OAIDeleteDBClusterSnapshotResult summary);
    void pOSTDeleteDBInstanceSignal(OAIDeleteDBInstanceResult summary);
    void pOSTDeleteDBSubnetGroupSignal();
    void pOSTDeleteEventSubscriptionSignal(OAIDeleteEventSubscriptionResult summary);
    void pOSTDeleteGlobalClusterSignal(OAIDeleteGlobalClusterResult summary);
    void pOSTDescribeCertificatesSignal(OAICertificateMessage summary);
    void pOSTDescribeDBClusterParameterGroupsSignal(OAIDBClusterParameterGroupsMessage summary);
    void pOSTDescribeDBClusterParametersSignal(OAIDBClusterParameterGroupDetails summary);
    void pOSTDescribeDBClusterSnapshotAttributesSignal(OAIDescribeDBClusterSnapshotAttributesResult summary);
    void pOSTDescribeDBClusterSnapshotsSignal(OAIDBClusterSnapshotMessage summary);
    void pOSTDescribeDBClustersSignal(OAIDBClusterMessage summary);
    void pOSTDescribeDBEngineVersionsSignal(OAIDBEngineVersionMessage summary);
    void pOSTDescribeDBInstancesSignal(OAIDBInstanceMessage summary);
    void pOSTDescribeDBSubnetGroupsSignal(OAIDBSubnetGroupMessage summary);
    void pOSTDescribeEngineDefaultClusterParametersSignal(OAIDescribeEngineDefaultClusterParametersResult summary);
    void pOSTDescribeEventCategoriesSignal(OAIEventCategoriesMessage summary);
    void pOSTDescribeEventSubscriptionsSignal(OAIEventSubscriptionsMessage summary);
    void pOSTDescribeEventsSignal(OAIEventsMessage summary);
    void pOSTDescribeGlobalClustersSignal(OAIGlobalClustersMessage summary);
    void pOSTDescribeOrderableDBInstanceOptionsSignal(OAIOrderableDBInstanceOptionsMessage summary);
    void pOSTDescribePendingMaintenanceActionsSignal(OAIPendingMaintenanceActionsMessage summary);
    void pOSTFailoverDBClusterSignal(OAIFailoverDBClusterResult summary);
    void pOSTListTagsForResourceSignal(OAITagListMessage summary);
    void pOSTModifyDBClusterSignal(OAIModifyDBClusterResult summary);
    void pOSTModifyDBClusterParameterGroupSignal(OAIDBClusterParameterGroupNameMessage summary);
    void pOSTModifyDBClusterSnapshotAttributeSignal(OAIModifyDBClusterSnapshotAttributeResult summary);
    void pOSTModifyDBInstanceSignal(OAIModifyDBInstanceResult summary);
    void pOSTModifyDBSubnetGroupSignal(OAIModifyDBSubnetGroupResult summary);
    void pOSTModifyEventSubscriptionSignal(OAIModifyEventSubscriptionResult summary);
    void pOSTModifyGlobalClusterSignal(OAIModifyGlobalClusterResult summary);
    void pOSTRebootDBInstanceSignal(OAIRebootDBInstanceResult summary);
    void pOSTRemoveFromGlobalClusterSignal(OAIRemoveFromGlobalClusterResult summary);
    void pOSTRemoveSourceIdentifierFromSubscriptionSignal(OAIRemoveSourceIdentifierFromSubscriptionResult summary);
    void pOSTRemoveTagsFromResourceSignal();
    void pOSTResetDBClusterParameterGroupSignal(OAIDBClusterParameterGroupNameMessage summary);
    void pOSTRestoreDBClusterFromSnapshotSignal(OAIRestoreDBClusterFromSnapshotResult summary);
    void pOSTRestoreDBClusterToPointInTimeSignal(OAIRestoreDBClusterToPointInTimeResult summary);
    void pOSTStartDBClusterSignal(OAIStartDBClusterResult summary);
    void pOSTStopDBClusterSignal(OAIStopDBClusterResult summary);


    void gETAddSourceIdentifierToSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIAddSourceIdentifierToSubscriptionResult summary);
    void gETAddTagsToResourceSignalFull(OAIHttpRequestWorker *worker);
    void gETApplyPendingMaintenanceActionSignalFull(OAIHttpRequestWorker *worker, OAIApplyPendingMaintenanceActionResult summary);
    void gETCopyDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAICopyDBClusterParameterGroupResult summary);
    void gETCopyDBClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICopyDBClusterSnapshotResult summary);
    void gETCreateDBClusterSignalFull(OAIHttpRequestWorker *worker, OAICreateDBClusterResult summary);
    void gETCreateDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateDBClusterParameterGroupResult summary);
    void gETCreateDBClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICreateDBClusterSnapshotResult summary);
    void gETCreateDBInstanceSignalFull(OAIHttpRequestWorker *worker, OAICreateDBInstanceResult summary);
    void gETCreateDBSubnetGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateDBSubnetGroupResult summary);
    void gETCreateEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateEventSubscriptionResult summary);
    void gETCreateGlobalClusterSignalFull(OAIHttpRequestWorker *worker, OAICreateGlobalClusterResult summary);
    void gETDeleteDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDBClusterResult summary);
    void gETDeleteDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteDBClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDBClusterSnapshotResult summary);
    void gETDeleteDBInstanceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDBInstanceResult summary);
    void gETDeleteDBSubnetGroupSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteEventSubscriptionResult summary);
    void gETDeleteGlobalClusterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGlobalClusterResult summary);
    void gETDescribeCertificatesSignalFull(OAIHttpRequestWorker *worker, OAICertificateMessage summary);
    void gETDescribeDBClusterParameterGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterParameterGroupsMessage summary);
    void gETDescribeDBClusterParametersSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterParameterGroupDetails summary);
    void gETDescribeDBClusterSnapshotAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDBClusterSnapshotAttributesResult summary);
    void gETDescribeDBClusterSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterSnapshotMessage summary);
    void gETDescribeDBClustersSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterMessage summary);
    void gETDescribeDBEngineVersionsSignalFull(OAIHttpRequestWorker *worker, OAIDBEngineVersionMessage summary);
    void gETDescribeDBInstancesSignalFull(OAIHttpRequestWorker *worker, OAIDBInstanceMessage summary);
    void gETDescribeDBSubnetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDBSubnetGroupMessage summary);
    void gETDescribeEngineDefaultClusterParametersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEngineDefaultClusterParametersResult summary);
    void gETDescribeEventCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIEventCategoriesMessage summary);
    void gETDescribeEventSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsMessage summary);
    void gETDescribeEventsSignalFull(OAIHttpRequestWorker *worker, OAIEventsMessage summary);
    void gETDescribeGlobalClustersSignalFull(OAIHttpRequestWorker *worker, OAIGlobalClustersMessage summary);
    void gETDescribeOrderableDBInstanceOptionsSignalFull(OAIHttpRequestWorker *worker, OAIOrderableDBInstanceOptionsMessage summary);
    void gETDescribePendingMaintenanceActionsSignalFull(OAIHttpRequestWorker *worker, OAIPendingMaintenanceActionsMessage summary);
    void gETFailoverDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIFailoverDBClusterResult summary);
    void gETListTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAITagListMessage summary);
    void gETModifyDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIModifyDBClusterResult summary);
    void gETModifyDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterParameterGroupNameMessage summary);
    void gETModifyDBClusterSnapshotAttributeSignalFull(OAIHttpRequestWorker *worker, OAIModifyDBClusterSnapshotAttributeResult summary);
    void gETModifyDBInstanceSignalFull(OAIHttpRequestWorker *worker, OAIModifyDBInstanceResult summary);
    void gETModifyDBSubnetGroupSignalFull(OAIHttpRequestWorker *worker, OAIModifyDBSubnetGroupResult summary);
    void gETModifyEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIModifyEventSubscriptionResult summary);
    void gETModifyGlobalClusterSignalFull(OAIHttpRequestWorker *worker, OAIModifyGlobalClusterResult summary);
    void gETRebootDBInstanceSignalFull(OAIHttpRequestWorker *worker, OAIRebootDBInstanceResult summary);
    void gETRemoveFromGlobalClusterSignalFull(OAIHttpRequestWorker *worker, OAIRemoveFromGlobalClusterResult summary);
    void gETRemoveSourceIdentifierFromSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRemoveSourceIdentifierFromSubscriptionResult summary);
    void gETRemoveTagsFromResourceSignalFull(OAIHttpRequestWorker *worker);
    void gETResetDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterParameterGroupNameMessage summary);
    void gETRestoreDBClusterFromSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreDBClusterFromSnapshotResult summary);
    void gETRestoreDBClusterToPointInTimeSignalFull(OAIHttpRequestWorker *worker, OAIRestoreDBClusterToPointInTimeResult summary);
    void gETStartDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIStartDBClusterResult summary);
    void gETStopDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIStopDBClusterResult summary);
    void pOSTAddSourceIdentifierToSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIAddSourceIdentifierToSubscriptionResult summary);
    void pOSTAddTagsToResourceSignalFull(OAIHttpRequestWorker *worker);
    void pOSTApplyPendingMaintenanceActionSignalFull(OAIHttpRequestWorker *worker, OAIApplyPendingMaintenanceActionResult summary);
    void pOSTCopyDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAICopyDBClusterParameterGroupResult summary);
    void pOSTCopyDBClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICopyDBClusterSnapshotResult summary);
    void pOSTCreateDBClusterSignalFull(OAIHttpRequestWorker *worker, OAICreateDBClusterResult summary);
    void pOSTCreateDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateDBClusterParameterGroupResult summary);
    void pOSTCreateDBClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICreateDBClusterSnapshotResult summary);
    void pOSTCreateDBInstanceSignalFull(OAIHttpRequestWorker *worker, OAICreateDBInstanceResult summary);
    void pOSTCreateDBSubnetGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateDBSubnetGroupResult summary);
    void pOSTCreateEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAICreateEventSubscriptionResult summary);
    void pOSTCreateGlobalClusterSignalFull(OAIHttpRequestWorker *worker, OAICreateGlobalClusterResult summary);
    void pOSTDeleteDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDBClusterResult summary);
    void pOSTDeleteDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteDBClusterSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDBClusterSnapshotResult summary);
    void pOSTDeleteDBInstanceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDBInstanceResult summary);
    void pOSTDeleteDBSubnetGroupSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDeleteEventSubscriptionResult summary);
    void pOSTDeleteGlobalClusterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGlobalClusterResult summary);
    void pOSTDescribeCertificatesSignalFull(OAIHttpRequestWorker *worker, OAICertificateMessage summary);
    void pOSTDescribeDBClusterParameterGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterParameterGroupsMessage summary);
    void pOSTDescribeDBClusterParametersSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterParameterGroupDetails summary);
    void pOSTDescribeDBClusterSnapshotAttributesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeDBClusterSnapshotAttributesResult summary);
    void pOSTDescribeDBClusterSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterSnapshotMessage summary);
    void pOSTDescribeDBClustersSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterMessage summary);
    void pOSTDescribeDBEngineVersionsSignalFull(OAIHttpRequestWorker *worker, OAIDBEngineVersionMessage summary);
    void pOSTDescribeDBInstancesSignalFull(OAIHttpRequestWorker *worker, OAIDBInstanceMessage summary);
    void pOSTDescribeDBSubnetGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDBSubnetGroupMessage summary);
    void pOSTDescribeEngineDefaultClusterParametersSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEngineDefaultClusterParametersResult summary);
    void pOSTDescribeEventCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIEventCategoriesMessage summary);
    void pOSTDescribeEventSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsMessage summary);
    void pOSTDescribeEventsSignalFull(OAIHttpRequestWorker *worker, OAIEventsMessage summary);
    void pOSTDescribeGlobalClustersSignalFull(OAIHttpRequestWorker *worker, OAIGlobalClustersMessage summary);
    void pOSTDescribeOrderableDBInstanceOptionsSignalFull(OAIHttpRequestWorker *worker, OAIOrderableDBInstanceOptionsMessage summary);
    void pOSTDescribePendingMaintenanceActionsSignalFull(OAIHttpRequestWorker *worker, OAIPendingMaintenanceActionsMessage summary);
    void pOSTFailoverDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIFailoverDBClusterResult summary);
    void pOSTListTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAITagListMessage summary);
    void pOSTModifyDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIModifyDBClusterResult summary);
    void pOSTModifyDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterParameterGroupNameMessage summary);
    void pOSTModifyDBClusterSnapshotAttributeSignalFull(OAIHttpRequestWorker *worker, OAIModifyDBClusterSnapshotAttributeResult summary);
    void pOSTModifyDBInstanceSignalFull(OAIHttpRequestWorker *worker, OAIModifyDBInstanceResult summary);
    void pOSTModifyDBSubnetGroupSignalFull(OAIHttpRequestWorker *worker, OAIModifyDBSubnetGroupResult summary);
    void pOSTModifyEventSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIModifyEventSubscriptionResult summary);
    void pOSTModifyGlobalClusterSignalFull(OAIHttpRequestWorker *worker, OAIModifyGlobalClusterResult summary);
    void pOSTRebootDBInstanceSignalFull(OAIHttpRequestWorker *worker, OAIRebootDBInstanceResult summary);
    void pOSTRemoveFromGlobalClusterSignalFull(OAIHttpRequestWorker *worker, OAIRemoveFromGlobalClusterResult summary);
    void pOSTRemoveSourceIdentifierFromSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIRemoveSourceIdentifierFromSubscriptionResult summary);
    void pOSTRemoveTagsFromResourceSignalFull(OAIHttpRequestWorker *worker);
    void pOSTResetDBClusterParameterGroupSignalFull(OAIHttpRequestWorker *worker, OAIDBClusterParameterGroupNameMessage summary);
    void pOSTRestoreDBClusterFromSnapshotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreDBClusterFromSnapshotResult summary);
    void pOSTRestoreDBClusterToPointInTimeSignalFull(OAIHttpRequestWorker *worker, OAIRestoreDBClusterToPointInTimeResult summary);
    void pOSTStartDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIStartDBClusterResult summary);
    void pOSTStopDBClusterSignalFull(OAIHttpRequestWorker *worker, OAIStopDBClusterResult summary);

    Q_DECL_DEPRECATED_X("Use gETAddSourceIdentifierToSubscriptionSignalError() instead")
    void gETAddSourceIdentifierToSubscriptionSignalE(OAIAddSourceIdentifierToSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddSourceIdentifierToSubscriptionSignalError(OAIAddSourceIdentifierToSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAddTagsToResourceSignalError() instead")
    void gETAddTagsToResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddTagsToResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETApplyPendingMaintenanceActionSignalError() instead")
    void gETApplyPendingMaintenanceActionSignalE(OAIApplyPendingMaintenanceActionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETApplyPendingMaintenanceActionSignalError(OAIApplyPendingMaintenanceActionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCopyDBClusterParameterGroupSignalError() instead")
    void gETCopyDBClusterParameterGroupSignalE(OAICopyDBClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCopyDBClusterParameterGroupSignalError(OAICopyDBClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCopyDBClusterSnapshotSignalError() instead")
    void gETCopyDBClusterSnapshotSignalE(OAICopyDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCopyDBClusterSnapshotSignalError(OAICopyDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBClusterSignalError() instead")
    void gETCreateDBClusterSignalE(OAICreateDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBClusterSignalError(OAICreateDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBClusterParameterGroupSignalError() instead")
    void gETCreateDBClusterParameterGroupSignalE(OAICreateDBClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBClusterParameterGroupSignalError(OAICreateDBClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBClusterSnapshotSignalError() instead")
    void gETCreateDBClusterSnapshotSignalE(OAICreateDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBClusterSnapshotSignalError(OAICreateDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBInstanceSignalError() instead")
    void gETCreateDBInstanceSignalE(OAICreateDBInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBInstanceSignalError(OAICreateDBInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBSubnetGroupSignalError() instead")
    void gETCreateDBSubnetGroupSignalE(OAICreateDBSubnetGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBSubnetGroupSignalError(OAICreateDBSubnetGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateEventSubscriptionSignalError() instead")
    void gETCreateEventSubscriptionSignalE(OAICreateEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateEventSubscriptionSignalError(OAICreateEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateGlobalClusterSignalError() instead")
    void gETCreateGlobalClusterSignalE(OAICreateGlobalClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateGlobalClusterSignalError(OAICreateGlobalClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBClusterSignalError() instead")
    void gETDeleteDBClusterSignalE(OAIDeleteDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBClusterSignalError(OAIDeleteDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBClusterParameterGroupSignalError() instead")
    void gETDeleteDBClusterParameterGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBClusterParameterGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBClusterSnapshotSignalError() instead")
    void gETDeleteDBClusterSnapshotSignalE(OAIDeleteDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBClusterSnapshotSignalError(OAIDeleteDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBInstanceSignalError() instead")
    void gETDeleteDBInstanceSignalE(OAIDeleteDBInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBInstanceSignalError(OAIDeleteDBInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBSubnetGroupSignalError() instead")
    void gETDeleteDBSubnetGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBSubnetGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteEventSubscriptionSignalError() instead")
    void gETDeleteEventSubscriptionSignalE(OAIDeleteEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteEventSubscriptionSignalError(OAIDeleteEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteGlobalClusterSignalError() instead")
    void gETDeleteGlobalClusterSignalE(OAIDeleteGlobalClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteGlobalClusterSignalError(OAIDeleteGlobalClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeCertificatesSignalError() instead")
    void gETDescribeCertificatesSignalE(OAICertificateMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeCertificatesSignalError(OAICertificateMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClusterParameterGroupsSignalError() instead")
    void gETDescribeDBClusterParameterGroupsSignalE(OAIDBClusterParameterGroupsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClusterParameterGroupsSignalError(OAIDBClusterParameterGroupsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClusterParametersSignalError() instead")
    void gETDescribeDBClusterParametersSignalE(OAIDBClusterParameterGroupDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClusterParametersSignalError(OAIDBClusterParameterGroupDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClusterSnapshotAttributesSignalError() instead")
    void gETDescribeDBClusterSnapshotAttributesSignalE(OAIDescribeDBClusterSnapshotAttributesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClusterSnapshotAttributesSignalError(OAIDescribeDBClusterSnapshotAttributesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClusterSnapshotsSignalError() instead")
    void gETDescribeDBClusterSnapshotsSignalE(OAIDBClusterSnapshotMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClusterSnapshotsSignalError(OAIDBClusterSnapshotMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClustersSignalError() instead")
    void gETDescribeDBClustersSignalE(OAIDBClusterMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClustersSignalError(OAIDBClusterMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBEngineVersionsSignalError() instead")
    void gETDescribeDBEngineVersionsSignalE(OAIDBEngineVersionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBEngineVersionsSignalError(OAIDBEngineVersionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBInstancesSignalError() instead")
    void gETDescribeDBInstancesSignalE(OAIDBInstanceMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBInstancesSignalError(OAIDBInstanceMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBSubnetGroupsSignalError() instead")
    void gETDescribeDBSubnetGroupsSignalE(OAIDBSubnetGroupMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBSubnetGroupsSignalError(OAIDBSubnetGroupMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEngineDefaultClusterParametersSignalError() instead")
    void gETDescribeEngineDefaultClusterParametersSignalE(OAIDescribeEngineDefaultClusterParametersResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEngineDefaultClusterParametersSignalError(OAIDescribeEngineDefaultClusterParametersResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventCategoriesSignalError() instead")
    void gETDescribeEventCategoriesSignalE(OAIEventCategoriesMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventCategoriesSignalError(OAIEventCategoriesMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventSubscriptionsSignalError() instead")
    void gETDescribeEventSubscriptionsSignalE(OAIEventSubscriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventSubscriptionsSignalError(OAIEventSubscriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventsSignalError() instead")
    void gETDescribeEventsSignalE(OAIEventsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventsSignalError(OAIEventsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeGlobalClustersSignalError() instead")
    void gETDescribeGlobalClustersSignalE(OAIGlobalClustersMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeGlobalClustersSignalError(OAIGlobalClustersMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeOrderableDBInstanceOptionsSignalError() instead")
    void gETDescribeOrderableDBInstanceOptionsSignalE(OAIOrderableDBInstanceOptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeOrderableDBInstanceOptionsSignalError(OAIOrderableDBInstanceOptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePendingMaintenanceActionsSignalError() instead")
    void gETDescribePendingMaintenanceActionsSignalE(OAIPendingMaintenanceActionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePendingMaintenanceActionsSignalError(OAIPendingMaintenanceActionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETFailoverDBClusterSignalError() instead")
    void gETFailoverDBClusterSignalE(OAIFailoverDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETFailoverDBClusterSignalError(OAIFailoverDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTagsForResourceSignalError() instead")
    void gETListTagsForResourceSignalE(OAITagListMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTagsForResourceSignalError(OAITagListMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBClusterSignalError() instead")
    void gETModifyDBClusterSignalE(OAIModifyDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBClusterSignalError(OAIModifyDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBClusterParameterGroupSignalError() instead")
    void gETModifyDBClusterParameterGroupSignalE(OAIDBClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBClusterParameterGroupSignalError(OAIDBClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBClusterSnapshotAttributeSignalError() instead")
    void gETModifyDBClusterSnapshotAttributeSignalE(OAIModifyDBClusterSnapshotAttributeResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBClusterSnapshotAttributeSignalError(OAIModifyDBClusterSnapshotAttributeResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBInstanceSignalError() instead")
    void gETModifyDBInstanceSignalE(OAIModifyDBInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBInstanceSignalError(OAIModifyDBInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBSubnetGroupSignalError() instead")
    void gETModifyDBSubnetGroupSignalE(OAIModifyDBSubnetGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBSubnetGroupSignalError(OAIModifyDBSubnetGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyEventSubscriptionSignalError() instead")
    void gETModifyEventSubscriptionSignalE(OAIModifyEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyEventSubscriptionSignalError(OAIModifyEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyGlobalClusterSignalError() instead")
    void gETModifyGlobalClusterSignalE(OAIModifyGlobalClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyGlobalClusterSignalError(OAIModifyGlobalClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRebootDBInstanceSignalError() instead")
    void gETRebootDBInstanceSignalE(OAIRebootDBInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRebootDBInstanceSignalError(OAIRebootDBInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveFromGlobalClusterSignalError() instead")
    void gETRemoveFromGlobalClusterSignalE(OAIRemoveFromGlobalClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveFromGlobalClusterSignalError(OAIRemoveFromGlobalClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveSourceIdentifierFromSubscriptionSignalError() instead")
    void gETRemoveSourceIdentifierFromSubscriptionSignalE(OAIRemoveSourceIdentifierFromSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveSourceIdentifierFromSubscriptionSignalError(OAIRemoveSourceIdentifierFromSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveTagsFromResourceSignalError() instead")
    void gETRemoveTagsFromResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveTagsFromResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResetDBClusterParameterGroupSignalError() instead")
    void gETResetDBClusterParameterGroupSignalE(OAIDBClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResetDBClusterParameterGroupSignalError(OAIDBClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestoreDBClusterFromSnapshotSignalError() instead")
    void gETRestoreDBClusterFromSnapshotSignalE(OAIRestoreDBClusterFromSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestoreDBClusterFromSnapshotSignalError(OAIRestoreDBClusterFromSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestoreDBClusterToPointInTimeSignalError() instead")
    void gETRestoreDBClusterToPointInTimeSignalE(OAIRestoreDBClusterToPointInTimeResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestoreDBClusterToPointInTimeSignalError(OAIRestoreDBClusterToPointInTimeResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStartDBClusterSignalError() instead")
    void gETStartDBClusterSignalE(OAIStartDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStartDBClusterSignalError(OAIStartDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStopDBClusterSignalError() instead")
    void gETStopDBClusterSignalE(OAIStopDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStopDBClusterSignalError(OAIStopDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddSourceIdentifierToSubscriptionSignalError() instead")
    void pOSTAddSourceIdentifierToSubscriptionSignalE(OAIAddSourceIdentifierToSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddSourceIdentifierToSubscriptionSignalError(OAIAddSourceIdentifierToSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddTagsToResourceSignalError() instead")
    void pOSTAddTagsToResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddTagsToResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTApplyPendingMaintenanceActionSignalError() instead")
    void pOSTApplyPendingMaintenanceActionSignalE(OAIApplyPendingMaintenanceActionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTApplyPendingMaintenanceActionSignalError(OAIApplyPendingMaintenanceActionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCopyDBClusterParameterGroupSignalError() instead")
    void pOSTCopyDBClusterParameterGroupSignalE(OAICopyDBClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCopyDBClusterParameterGroupSignalError(OAICopyDBClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCopyDBClusterSnapshotSignalError() instead")
    void pOSTCopyDBClusterSnapshotSignalE(OAICopyDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCopyDBClusterSnapshotSignalError(OAICopyDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBClusterSignalError() instead")
    void pOSTCreateDBClusterSignalE(OAICreateDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBClusterSignalError(OAICreateDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBClusterParameterGroupSignalError() instead")
    void pOSTCreateDBClusterParameterGroupSignalE(OAICreateDBClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBClusterParameterGroupSignalError(OAICreateDBClusterParameterGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBClusterSnapshotSignalError() instead")
    void pOSTCreateDBClusterSnapshotSignalE(OAICreateDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBClusterSnapshotSignalError(OAICreateDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBInstanceSignalError() instead")
    void pOSTCreateDBInstanceSignalE(OAICreateDBInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBInstanceSignalError(OAICreateDBInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBSubnetGroupSignalError() instead")
    void pOSTCreateDBSubnetGroupSignalE(OAICreateDBSubnetGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBSubnetGroupSignalError(OAICreateDBSubnetGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateEventSubscriptionSignalError() instead")
    void pOSTCreateEventSubscriptionSignalE(OAICreateEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateEventSubscriptionSignalError(OAICreateEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateGlobalClusterSignalError() instead")
    void pOSTCreateGlobalClusterSignalE(OAICreateGlobalClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateGlobalClusterSignalError(OAICreateGlobalClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBClusterSignalError() instead")
    void pOSTDeleteDBClusterSignalE(OAIDeleteDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBClusterSignalError(OAIDeleteDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBClusterParameterGroupSignalError() instead")
    void pOSTDeleteDBClusterParameterGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBClusterParameterGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBClusterSnapshotSignalError() instead")
    void pOSTDeleteDBClusterSnapshotSignalE(OAIDeleteDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBClusterSnapshotSignalError(OAIDeleteDBClusterSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBInstanceSignalError() instead")
    void pOSTDeleteDBInstanceSignalE(OAIDeleteDBInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBInstanceSignalError(OAIDeleteDBInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBSubnetGroupSignalError() instead")
    void pOSTDeleteDBSubnetGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBSubnetGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteEventSubscriptionSignalError() instead")
    void pOSTDeleteEventSubscriptionSignalE(OAIDeleteEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteEventSubscriptionSignalError(OAIDeleteEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteGlobalClusterSignalError() instead")
    void pOSTDeleteGlobalClusterSignalE(OAIDeleteGlobalClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteGlobalClusterSignalError(OAIDeleteGlobalClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeCertificatesSignalError() instead")
    void pOSTDescribeCertificatesSignalE(OAICertificateMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeCertificatesSignalError(OAICertificateMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClusterParameterGroupsSignalError() instead")
    void pOSTDescribeDBClusterParameterGroupsSignalE(OAIDBClusterParameterGroupsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClusterParameterGroupsSignalError(OAIDBClusterParameterGroupsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClusterParametersSignalError() instead")
    void pOSTDescribeDBClusterParametersSignalE(OAIDBClusterParameterGroupDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClusterParametersSignalError(OAIDBClusterParameterGroupDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClusterSnapshotAttributesSignalError() instead")
    void pOSTDescribeDBClusterSnapshotAttributesSignalE(OAIDescribeDBClusterSnapshotAttributesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClusterSnapshotAttributesSignalError(OAIDescribeDBClusterSnapshotAttributesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClusterSnapshotsSignalError() instead")
    void pOSTDescribeDBClusterSnapshotsSignalE(OAIDBClusterSnapshotMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClusterSnapshotsSignalError(OAIDBClusterSnapshotMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClustersSignalError() instead")
    void pOSTDescribeDBClustersSignalE(OAIDBClusterMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClustersSignalError(OAIDBClusterMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBEngineVersionsSignalError() instead")
    void pOSTDescribeDBEngineVersionsSignalE(OAIDBEngineVersionMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBEngineVersionsSignalError(OAIDBEngineVersionMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBInstancesSignalError() instead")
    void pOSTDescribeDBInstancesSignalE(OAIDBInstanceMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBInstancesSignalError(OAIDBInstanceMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBSubnetGroupsSignalError() instead")
    void pOSTDescribeDBSubnetGroupsSignalE(OAIDBSubnetGroupMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBSubnetGroupsSignalError(OAIDBSubnetGroupMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEngineDefaultClusterParametersSignalError() instead")
    void pOSTDescribeEngineDefaultClusterParametersSignalE(OAIDescribeEngineDefaultClusterParametersResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEngineDefaultClusterParametersSignalError(OAIDescribeEngineDefaultClusterParametersResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventCategoriesSignalError() instead")
    void pOSTDescribeEventCategoriesSignalE(OAIEventCategoriesMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventCategoriesSignalError(OAIEventCategoriesMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventSubscriptionsSignalError() instead")
    void pOSTDescribeEventSubscriptionsSignalE(OAIEventSubscriptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventSubscriptionsSignalError(OAIEventSubscriptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventsSignalError() instead")
    void pOSTDescribeEventsSignalE(OAIEventsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventsSignalError(OAIEventsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeGlobalClustersSignalError() instead")
    void pOSTDescribeGlobalClustersSignalE(OAIGlobalClustersMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeGlobalClustersSignalError(OAIGlobalClustersMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeOrderableDBInstanceOptionsSignalError() instead")
    void pOSTDescribeOrderableDBInstanceOptionsSignalE(OAIOrderableDBInstanceOptionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeOrderableDBInstanceOptionsSignalError(OAIOrderableDBInstanceOptionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePendingMaintenanceActionsSignalError() instead")
    void pOSTDescribePendingMaintenanceActionsSignalE(OAIPendingMaintenanceActionsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePendingMaintenanceActionsSignalError(OAIPendingMaintenanceActionsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTFailoverDBClusterSignalError() instead")
    void pOSTFailoverDBClusterSignalE(OAIFailoverDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTFailoverDBClusterSignalError(OAIFailoverDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTagsForResourceSignalError() instead")
    void pOSTListTagsForResourceSignalE(OAITagListMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTagsForResourceSignalError(OAITagListMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBClusterSignalError() instead")
    void pOSTModifyDBClusterSignalE(OAIModifyDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBClusterSignalError(OAIModifyDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBClusterParameterGroupSignalError() instead")
    void pOSTModifyDBClusterParameterGroupSignalE(OAIDBClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBClusterParameterGroupSignalError(OAIDBClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBClusterSnapshotAttributeSignalError() instead")
    void pOSTModifyDBClusterSnapshotAttributeSignalE(OAIModifyDBClusterSnapshotAttributeResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBClusterSnapshotAttributeSignalError(OAIModifyDBClusterSnapshotAttributeResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBInstanceSignalError() instead")
    void pOSTModifyDBInstanceSignalE(OAIModifyDBInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBInstanceSignalError(OAIModifyDBInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBSubnetGroupSignalError() instead")
    void pOSTModifyDBSubnetGroupSignalE(OAIModifyDBSubnetGroupResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBSubnetGroupSignalError(OAIModifyDBSubnetGroupResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyEventSubscriptionSignalError() instead")
    void pOSTModifyEventSubscriptionSignalE(OAIModifyEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyEventSubscriptionSignalError(OAIModifyEventSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyGlobalClusterSignalError() instead")
    void pOSTModifyGlobalClusterSignalE(OAIModifyGlobalClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyGlobalClusterSignalError(OAIModifyGlobalClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRebootDBInstanceSignalError() instead")
    void pOSTRebootDBInstanceSignalE(OAIRebootDBInstanceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRebootDBInstanceSignalError(OAIRebootDBInstanceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveFromGlobalClusterSignalError() instead")
    void pOSTRemoveFromGlobalClusterSignalE(OAIRemoveFromGlobalClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveFromGlobalClusterSignalError(OAIRemoveFromGlobalClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveSourceIdentifierFromSubscriptionSignalError() instead")
    void pOSTRemoveSourceIdentifierFromSubscriptionSignalE(OAIRemoveSourceIdentifierFromSubscriptionResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveSourceIdentifierFromSubscriptionSignalError(OAIRemoveSourceIdentifierFromSubscriptionResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveTagsFromResourceSignalError() instead")
    void pOSTRemoveTagsFromResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveTagsFromResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResetDBClusterParameterGroupSignalError() instead")
    void pOSTResetDBClusterParameterGroupSignalE(OAIDBClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResetDBClusterParameterGroupSignalError(OAIDBClusterParameterGroupNameMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestoreDBClusterFromSnapshotSignalError() instead")
    void pOSTRestoreDBClusterFromSnapshotSignalE(OAIRestoreDBClusterFromSnapshotResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestoreDBClusterFromSnapshotSignalError(OAIRestoreDBClusterFromSnapshotResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestoreDBClusterToPointInTimeSignalError() instead")
    void pOSTRestoreDBClusterToPointInTimeSignalE(OAIRestoreDBClusterToPointInTimeResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestoreDBClusterToPointInTimeSignalError(OAIRestoreDBClusterToPointInTimeResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStartDBClusterSignalError() instead")
    void pOSTStartDBClusterSignalE(OAIStartDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStartDBClusterSignalError(OAIStartDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStopDBClusterSignalError() instead")
    void pOSTStopDBClusterSignalE(OAIStopDBClusterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStopDBClusterSignalError(OAIStopDBClusterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETAddSourceIdentifierToSubscriptionSignalErrorFull() instead")
    void gETAddSourceIdentifierToSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddSourceIdentifierToSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETAddTagsToResourceSignalErrorFull() instead")
    void gETAddTagsToResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETAddTagsToResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETApplyPendingMaintenanceActionSignalErrorFull() instead")
    void gETApplyPendingMaintenanceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETApplyPendingMaintenanceActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCopyDBClusterParameterGroupSignalErrorFull() instead")
    void gETCopyDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCopyDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCopyDBClusterSnapshotSignalErrorFull() instead")
    void gETCopyDBClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCopyDBClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBClusterSignalErrorFull() instead")
    void gETCreateDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBClusterParameterGroupSignalErrorFull() instead")
    void gETCreateDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBClusterSnapshotSignalErrorFull() instead")
    void gETCreateDBClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBInstanceSignalErrorFull() instead")
    void gETCreateDBInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateDBSubnetGroupSignalErrorFull() instead")
    void gETCreateDBSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateDBSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateEventSubscriptionSignalErrorFull() instead")
    void gETCreateEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateGlobalClusterSignalErrorFull() instead")
    void gETCreateGlobalClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateGlobalClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBClusterSignalErrorFull() instead")
    void gETDeleteDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBClusterParameterGroupSignalErrorFull() instead")
    void gETDeleteDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBClusterSnapshotSignalErrorFull() instead")
    void gETDeleteDBClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBInstanceSignalErrorFull() instead")
    void gETDeleteDBInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteDBSubnetGroupSignalErrorFull() instead")
    void gETDeleteDBSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteDBSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteEventSubscriptionSignalErrorFull() instead")
    void gETDeleteEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteGlobalClusterSignalErrorFull() instead")
    void gETDeleteGlobalClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteGlobalClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeCertificatesSignalErrorFull() instead")
    void gETDescribeCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClusterParameterGroupsSignalErrorFull() instead")
    void gETDescribeDBClusterParameterGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClusterParameterGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClusterParametersSignalErrorFull() instead")
    void gETDescribeDBClusterParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClusterParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClusterSnapshotAttributesSignalErrorFull() instead")
    void gETDescribeDBClusterSnapshotAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClusterSnapshotAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClusterSnapshotsSignalErrorFull() instead")
    void gETDescribeDBClusterSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClusterSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBClustersSignalErrorFull() instead")
    void gETDescribeDBClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBEngineVersionsSignalErrorFull() instead")
    void gETDescribeDBEngineVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBEngineVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBInstancesSignalErrorFull() instead")
    void gETDescribeDBInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeDBSubnetGroupsSignalErrorFull() instead")
    void gETDescribeDBSubnetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeDBSubnetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEngineDefaultClusterParametersSignalErrorFull() instead")
    void gETDescribeEngineDefaultClusterParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEngineDefaultClusterParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventCategoriesSignalErrorFull() instead")
    void gETDescribeEventCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventSubscriptionsSignalErrorFull() instead")
    void gETDescribeEventSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeEventsSignalErrorFull() instead")
    void gETDescribeEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeGlobalClustersSignalErrorFull() instead")
    void gETDescribeGlobalClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeGlobalClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeOrderableDBInstanceOptionsSignalErrorFull() instead")
    void gETDescribeOrderableDBInstanceOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeOrderableDBInstanceOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePendingMaintenanceActionsSignalErrorFull() instead")
    void gETDescribePendingMaintenanceActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePendingMaintenanceActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETFailoverDBClusterSignalErrorFull() instead")
    void gETFailoverDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETFailoverDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTagsForResourceSignalErrorFull() instead")
    void gETListTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBClusterSignalErrorFull() instead")
    void gETModifyDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBClusterParameterGroupSignalErrorFull() instead")
    void gETModifyDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBClusterSnapshotAttributeSignalErrorFull() instead")
    void gETModifyDBClusterSnapshotAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBClusterSnapshotAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBInstanceSignalErrorFull() instead")
    void gETModifyDBInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyDBSubnetGroupSignalErrorFull() instead")
    void gETModifyDBSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyDBSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyEventSubscriptionSignalErrorFull() instead")
    void gETModifyEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETModifyGlobalClusterSignalErrorFull() instead")
    void gETModifyGlobalClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETModifyGlobalClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRebootDBInstanceSignalErrorFull() instead")
    void gETRebootDBInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRebootDBInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveFromGlobalClusterSignalErrorFull() instead")
    void gETRemoveFromGlobalClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveFromGlobalClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveSourceIdentifierFromSubscriptionSignalErrorFull() instead")
    void gETRemoveSourceIdentifierFromSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveSourceIdentifierFromSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRemoveTagsFromResourceSignalErrorFull() instead")
    void gETRemoveTagsFromResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRemoveTagsFromResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETResetDBClusterParameterGroupSignalErrorFull() instead")
    void gETResetDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETResetDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestoreDBClusterFromSnapshotSignalErrorFull() instead")
    void gETRestoreDBClusterFromSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestoreDBClusterFromSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRestoreDBClusterToPointInTimeSignalErrorFull() instead")
    void gETRestoreDBClusterToPointInTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRestoreDBClusterToPointInTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStartDBClusterSignalErrorFull() instead")
    void gETStartDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStartDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStopDBClusterSignalErrorFull() instead")
    void gETStopDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStopDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddSourceIdentifierToSubscriptionSignalErrorFull() instead")
    void pOSTAddSourceIdentifierToSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddSourceIdentifierToSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTAddTagsToResourceSignalErrorFull() instead")
    void pOSTAddTagsToResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTAddTagsToResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTApplyPendingMaintenanceActionSignalErrorFull() instead")
    void pOSTApplyPendingMaintenanceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTApplyPendingMaintenanceActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCopyDBClusterParameterGroupSignalErrorFull() instead")
    void pOSTCopyDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCopyDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCopyDBClusterSnapshotSignalErrorFull() instead")
    void pOSTCopyDBClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCopyDBClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBClusterSignalErrorFull() instead")
    void pOSTCreateDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBClusterParameterGroupSignalErrorFull() instead")
    void pOSTCreateDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBClusterSnapshotSignalErrorFull() instead")
    void pOSTCreateDBClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBInstanceSignalErrorFull() instead")
    void pOSTCreateDBInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateDBSubnetGroupSignalErrorFull() instead")
    void pOSTCreateDBSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateDBSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateEventSubscriptionSignalErrorFull() instead")
    void pOSTCreateEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateGlobalClusterSignalErrorFull() instead")
    void pOSTCreateGlobalClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateGlobalClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBClusterSignalErrorFull() instead")
    void pOSTDeleteDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBClusterParameterGroupSignalErrorFull() instead")
    void pOSTDeleteDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBClusterSnapshotSignalErrorFull() instead")
    void pOSTDeleteDBClusterSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBClusterSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBInstanceSignalErrorFull() instead")
    void pOSTDeleteDBInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteDBSubnetGroupSignalErrorFull() instead")
    void pOSTDeleteDBSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteDBSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteEventSubscriptionSignalErrorFull() instead")
    void pOSTDeleteEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteGlobalClusterSignalErrorFull() instead")
    void pOSTDeleteGlobalClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteGlobalClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeCertificatesSignalErrorFull() instead")
    void pOSTDescribeCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClusterParameterGroupsSignalErrorFull() instead")
    void pOSTDescribeDBClusterParameterGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClusterParameterGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClusterParametersSignalErrorFull() instead")
    void pOSTDescribeDBClusterParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClusterParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClusterSnapshotAttributesSignalErrorFull() instead")
    void pOSTDescribeDBClusterSnapshotAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClusterSnapshotAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClusterSnapshotsSignalErrorFull() instead")
    void pOSTDescribeDBClusterSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClusterSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBClustersSignalErrorFull() instead")
    void pOSTDescribeDBClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBEngineVersionsSignalErrorFull() instead")
    void pOSTDescribeDBEngineVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBEngineVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBInstancesSignalErrorFull() instead")
    void pOSTDescribeDBInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeDBSubnetGroupsSignalErrorFull() instead")
    void pOSTDescribeDBSubnetGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeDBSubnetGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEngineDefaultClusterParametersSignalErrorFull() instead")
    void pOSTDescribeEngineDefaultClusterParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEngineDefaultClusterParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventCategoriesSignalErrorFull() instead")
    void pOSTDescribeEventCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventSubscriptionsSignalErrorFull() instead")
    void pOSTDescribeEventSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeEventsSignalErrorFull() instead")
    void pOSTDescribeEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeGlobalClustersSignalErrorFull() instead")
    void pOSTDescribeGlobalClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeGlobalClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeOrderableDBInstanceOptionsSignalErrorFull() instead")
    void pOSTDescribeOrderableDBInstanceOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeOrderableDBInstanceOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePendingMaintenanceActionsSignalErrorFull() instead")
    void pOSTDescribePendingMaintenanceActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePendingMaintenanceActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTFailoverDBClusterSignalErrorFull() instead")
    void pOSTFailoverDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTFailoverDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTagsForResourceSignalErrorFull() instead")
    void pOSTListTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBClusterSignalErrorFull() instead")
    void pOSTModifyDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBClusterParameterGroupSignalErrorFull() instead")
    void pOSTModifyDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBClusterSnapshotAttributeSignalErrorFull() instead")
    void pOSTModifyDBClusterSnapshotAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBClusterSnapshotAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBInstanceSignalErrorFull() instead")
    void pOSTModifyDBInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyDBSubnetGroupSignalErrorFull() instead")
    void pOSTModifyDBSubnetGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyDBSubnetGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyEventSubscriptionSignalErrorFull() instead")
    void pOSTModifyEventSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyEventSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTModifyGlobalClusterSignalErrorFull() instead")
    void pOSTModifyGlobalClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTModifyGlobalClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRebootDBInstanceSignalErrorFull() instead")
    void pOSTRebootDBInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRebootDBInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveFromGlobalClusterSignalErrorFull() instead")
    void pOSTRemoveFromGlobalClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveFromGlobalClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveSourceIdentifierFromSubscriptionSignalErrorFull() instead")
    void pOSTRemoveSourceIdentifierFromSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveSourceIdentifierFromSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRemoveTagsFromResourceSignalErrorFull() instead")
    void pOSTRemoveTagsFromResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRemoveTagsFromResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTResetDBClusterParameterGroupSignalErrorFull() instead")
    void pOSTResetDBClusterParameterGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTResetDBClusterParameterGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestoreDBClusterFromSnapshotSignalErrorFull() instead")
    void pOSTRestoreDBClusterFromSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestoreDBClusterFromSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRestoreDBClusterToPointInTimeSignalErrorFull() instead")
    void pOSTRestoreDBClusterToPointInTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRestoreDBClusterToPointInTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStartDBClusterSignalErrorFull() instead")
    void pOSTStartDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStartDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStopDBClusterSignalErrorFull() instead")
    void pOSTStopDBClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStopDBClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
