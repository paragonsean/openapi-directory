/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResetDBClusterParameterGroupMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResetDBClusterParameterGroupMessage::OAIResetDBClusterParameterGroupMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResetDBClusterParameterGroupMessage::OAIResetDBClusterParameterGroupMessage() {
    this->initializeModel();
}

OAIResetDBClusterParameterGroupMessage::~OAIResetDBClusterParameterGroupMessage() {}

void OAIResetDBClusterParameterGroupMessage::initializeModel() {

    m_db_cluster_parameter_group_name_isSet = false;
    m_db_cluster_parameter_group_name_isValid = false;

    m_reset_all_parameters_isSet = false;
    m_reset_all_parameters_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIResetDBClusterParameterGroupMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResetDBClusterParameterGroupMessage::fromJsonObject(QJsonObject json) {

    m_db_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group_name, json[QString("DBClusterParameterGroupName")]);
    m_db_cluster_parameter_group_name_isSet = !json[QString("DBClusterParameterGroupName")].isNull() && m_db_cluster_parameter_group_name_isValid;

    m_reset_all_parameters_isValid = ::OpenAPI::fromJsonValue(m_reset_all_parameters, json[QString("ResetAllParameters")]);
    m_reset_all_parameters_isSet = !json[QString("ResetAllParameters")].isNull() && m_reset_all_parameters_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;
}

QString OAIResetDBClusterParameterGroupMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResetDBClusterParameterGroupMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_db_cluster_parameter_group_name_isSet) {
        obj.insert(QString("DBClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group_name));
    }
    if (m_reset_all_parameters_isSet) {
        obj.insert(QString("ResetAllParameters"), ::OpenAPI::toJsonValue(m_reset_all_parameters));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAIResetDBClusterParameterGroupMessage::getDbClusterParameterGroupName() const {
    return m_db_cluster_parameter_group_name;
}
void OAIResetDBClusterParameterGroupMessage::setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name) {
    m_db_cluster_parameter_group_name = db_cluster_parameter_group_name;
    m_db_cluster_parameter_group_name_isSet = true;
}

bool OAIResetDBClusterParameterGroupMessage::is_db_cluster_parameter_group_name_Set() const{
    return m_db_cluster_parameter_group_name_isSet;
}

bool OAIResetDBClusterParameterGroupMessage::is_db_cluster_parameter_group_name_Valid() const{
    return m_db_cluster_parameter_group_name_isValid;
}

bool OAIResetDBClusterParameterGroupMessage::getResetAllParameters() const {
    return m_reset_all_parameters;
}
void OAIResetDBClusterParameterGroupMessage::setResetAllParameters(const bool &reset_all_parameters) {
    m_reset_all_parameters = reset_all_parameters;
    m_reset_all_parameters_isSet = true;
}

bool OAIResetDBClusterParameterGroupMessage::is_reset_all_parameters_Set() const{
    return m_reset_all_parameters_isSet;
}

bool OAIResetDBClusterParameterGroupMessage::is_reset_all_parameters_Valid() const{
    return m_reset_all_parameters_isValid;
}

QList OAIResetDBClusterParameterGroupMessage::getParameters() const {
    return m_parameters;
}
void OAIResetDBClusterParameterGroupMessage::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIResetDBClusterParameterGroupMessage::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIResetDBClusterParameterGroupMessage::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIResetDBClusterParameterGroupMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_db_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_all_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResetDBClusterParameterGroupMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_cluster_parameter_group_name_isValid && true;
}

} // namespace OpenAPI
