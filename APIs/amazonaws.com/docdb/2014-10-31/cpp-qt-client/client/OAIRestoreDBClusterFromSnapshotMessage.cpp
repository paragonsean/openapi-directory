/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreDBClusterFromSnapshotMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreDBClusterFromSnapshotMessage::OAIRestoreDBClusterFromSnapshotMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreDBClusterFromSnapshotMessage::OAIRestoreDBClusterFromSnapshotMessage() {
    this->initializeModel();
}

OAIRestoreDBClusterFromSnapshotMessage::~OAIRestoreDBClusterFromSnapshotMessage() {}

void OAIRestoreDBClusterFromSnapshotMessage::initializeModel() {

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;

    m_db_cluster_identifier_isSet = false;
    m_db_cluster_identifier_isValid = false;

    m_snapshot_identifier_isSet = false;
    m_snapshot_identifier_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_db_subnet_group_name_isSet = false;
    m_db_subnet_group_name_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_enable_cloudwatch_logs_exports_isSet = false;
    m_enable_cloudwatch_logs_exports_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;

    m_db_cluster_parameter_group_name_isSet = false;
    m_db_cluster_parameter_group_name_isValid = false;
}

void OAIRestoreDBClusterFromSnapshotMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreDBClusterFromSnapshotMessage::fromJsonObject(QJsonObject json) {

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;

    m_db_cluster_identifier_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_identifier, json[QString("DBClusterIdentifier")]);
    m_db_cluster_identifier_isSet = !json[QString("DBClusterIdentifier")].isNull() && m_db_cluster_identifier_isValid;

    m_snapshot_identifier_isValid = ::OpenAPI::fromJsonValue(m_snapshot_identifier, json[QString("SnapshotIdentifier")]);
    m_snapshot_identifier_isSet = !json[QString("SnapshotIdentifier")].isNull() && m_snapshot_identifier_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_db_subnet_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_subnet_group_name, json[QString("DBSubnetGroupName")]);
    m_db_subnet_group_name_isSet = !json[QString("DBSubnetGroupName")].isNull() && m_db_subnet_group_name_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("VpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("VpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_enable_cloudwatch_logs_exports_isValid = ::OpenAPI::fromJsonValue(m_enable_cloudwatch_logs_exports, json[QString("EnableCloudwatchLogsExports")]);
    m_enable_cloudwatch_logs_exports_isSet = !json[QString("EnableCloudwatchLogsExports")].isNull() && m_enable_cloudwatch_logs_exports_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;

    m_db_cluster_parameter_group_name_isValid = ::OpenAPI::fromJsonValue(m_db_cluster_parameter_group_name, json[QString("DBClusterParameterGroupName")]);
    m_db_cluster_parameter_group_name_isSet = !json[QString("DBClusterParameterGroupName")].isNull() && m_db_cluster_parameter_group_name_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreDBClusterFromSnapshotMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    if (m_db_cluster_identifier_isSet) {
        obj.insert(QString("DBClusterIdentifier"), ::OpenAPI::toJsonValue(m_db_cluster_identifier));
    }
    if (m_snapshot_identifier_isSet) {
        obj.insert(QString("SnapshotIdentifier"), ::OpenAPI::toJsonValue(m_snapshot_identifier));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_db_subnet_group_name_isSet) {
        obj.insert(QString("DBSubnetGroupName"), ::OpenAPI::toJsonValue(m_db_subnet_group_name));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("VpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_enable_cloudwatch_logs_exports.isSet()) {
        obj.insert(QString("EnableCloudwatchLogsExports"), ::OpenAPI::toJsonValue(m_enable_cloudwatch_logs_exports));
    }
    if (m_deletion_protection_isSet) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    if (m_db_cluster_parameter_group_name_isSet) {
        obj.insert(QString("DBClusterParameterGroupName"), ::OpenAPI::toJsonValue(m_db_cluster_parameter_group_name));
    }
    return obj;
}

QList OAIRestoreDBClusterFromSnapshotMessage::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIRestoreDBClusterFromSnapshotMessage::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getDbClusterIdentifier() const {
    return m_db_cluster_identifier;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDbClusterIdentifier(const QString &db_cluster_identifier) {
    m_db_cluster_identifier = db_cluster_identifier;
    m_db_cluster_identifier_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_cluster_identifier_Set() const{
    return m_db_cluster_identifier_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_cluster_identifier_Valid() const{
    return m_db_cluster_identifier_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getSnapshotIdentifier() const {
    return m_snapshot_identifier;
}
void OAIRestoreDBClusterFromSnapshotMessage::setSnapshotIdentifier(const QString &snapshot_identifier) {
    m_snapshot_identifier = snapshot_identifier;
    m_snapshot_identifier_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_snapshot_identifier_Set() const{
    return m_snapshot_identifier_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_snapshot_identifier_Valid() const{
    return m_snapshot_identifier_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getEngine() const {
    return m_engine;
}
void OAIRestoreDBClusterFromSnapshotMessage::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getEngineVersion() const {
    return m_engine_version;
}
void OAIRestoreDBClusterFromSnapshotMessage::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

qint32 OAIRestoreDBClusterFromSnapshotMessage::getPort() const {
    return m_port;
}
void OAIRestoreDBClusterFromSnapshotMessage::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getDbSubnetGroupName() const {
    return m_db_subnet_group_name;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDbSubnetGroupName(const QString &db_subnet_group_name) {
    m_db_subnet_group_name = db_subnet_group_name;
    m_db_subnet_group_name_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_subnet_group_name_Set() const{
    return m_db_subnet_group_name_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_subnet_group_name_Valid() const{
    return m_db_subnet_group_name_isValid;
}

QList OAIRestoreDBClusterFromSnapshotMessage::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIRestoreDBClusterFromSnapshotMessage::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

QList OAIRestoreDBClusterFromSnapshotMessage::getTags() const {
    return m_tags;
}
void OAIRestoreDBClusterFromSnapshotMessage::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIRestoreDBClusterFromSnapshotMessage::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QList OAIRestoreDBClusterFromSnapshotMessage::getEnableCloudwatchLogsExports() const {
    return m_enable_cloudwatch_logs_exports;
}
void OAIRestoreDBClusterFromSnapshotMessage::setEnableCloudwatchLogsExports(const QList &enable_cloudwatch_logs_exports) {
    m_enable_cloudwatch_logs_exports = enable_cloudwatch_logs_exports;
    m_enable_cloudwatch_logs_exports_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_enable_cloudwatch_logs_exports_Set() const{
    return m_enable_cloudwatch_logs_exports_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_enable_cloudwatch_logs_exports_Valid() const{
    return m_enable_cloudwatch_logs_exports_isValid;
}

bool OAIRestoreDBClusterFromSnapshotMessage::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDeletionProtection(const bool &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

QString OAIRestoreDBClusterFromSnapshotMessage::getDbClusterParameterGroupName() const {
    return m_db_cluster_parameter_group_name;
}
void OAIRestoreDBClusterFromSnapshotMessage::setDbClusterParameterGroupName(const QString &db_cluster_parameter_group_name) {
    m_db_cluster_parameter_group_name = db_cluster_parameter_group_name;
    m_db_cluster_parameter_group_name_isSet = true;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_cluster_parameter_group_name_Set() const{
    return m_db_cluster_parameter_group_name_isSet;
}

bool OAIRestoreDBClusterFromSnapshotMessage::is_db_cluster_parameter_group_name_Valid() const{
    return m_db_cluster_parameter_group_name_isValid;
}

bool OAIRestoreDBClusterFromSnapshotMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_subnet_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cloudwatch_logs_exports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_cluster_parameter_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreDBClusterFromSnapshotMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_db_cluster_identifier_isValid && m_snapshot_identifier_isValid && m_engine_isValid && true;
}

} // namespace OpenAPI
