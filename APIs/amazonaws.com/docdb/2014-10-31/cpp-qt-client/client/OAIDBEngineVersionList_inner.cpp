/**
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDBEngineVersionList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDBEngineVersionList_inner::OAIDBEngineVersionList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDBEngineVersionList_inner::OAIDBEngineVersionList_inner() {
    this->initializeModel();
}

OAIDBEngineVersionList_inner::~OAIDBEngineVersionList_inner() {}

void OAIDBEngineVersionList_inner::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_db_parameter_group_family_isSet = false;
    m_db_parameter_group_family_isValid = false;

    m_db_engine_description_isSet = false;
    m_db_engine_description_isValid = false;

    m_db_engine_version_description_isSet = false;
    m_db_engine_version_description_isValid = false;

    m_valid_upgrade_target_isSet = false;
    m_valid_upgrade_target_isValid = false;

    m_exportable_log_types_isSet = false;
    m_exportable_log_types_isValid = false;

    m_supports_log_exports_to_cloudwatch_logs_isSet = false;
    m_supports_log_exports_to_cloudwatch_logs_isValid = false;
}

void OAIDBEngineVersionList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDBEngineVersionList_inner::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_db_parameter_group_family_isValid = ::OpenAPI::fromJsonValue(m_db_parameter_group_family, json[QString("DBParameterGroupFamily")]);
    m_db_parameter_group_family_isSet = !json[QString("DBParameterGroupFamily")].isNull() && m_db_parameter_group_family_isValid;

    m_db_engine_description_isValid = ::OpenAPI::fromJsonValue(m_db_engine_description, json[QString("DBEngineDescription")]);
    m_db_engine_description_isSet = !json[QString("DBEngineDescription")].isNull() && m_db_engine_description_isValid;

    m_db_engine_version_description_isValid = ::OpenAPI::fromJsonValue(m_db_engine_version_description, json[QString("DBEngineVersionDescription")]);
    m_db_engine_version_description_isSet = !json[QString("DBEngineVersionDescription")].isNull() && m_db_engine_version_description_isValid;

    m_valid_upgrade_target_isValid = ::OpenAPI::fromJsonValue(m_valid_upgrade_target, json[QString("ValidUpgradeTarget")]);
    m_valid_upgrade_target_isSet = !json[QString("ValidUpgradeTarget")].isNull() && m_valid_upgrade_target_isValid;

    m_exportable_log_types_isValid = ::OpenAPI::fromJsonValue(m_exportable_log_types, json[QString("ExportableLogTypes")]);
    m_exportable_log_types_isSet = !json[QString("ExportableLogTypes")].isNull() && m_exportable_log_types_isValid;

    m_supports_log_exports_to_cloudwatch_logs_isValid = ::OpenAPI::fromJsonValue(m_supports_log_exports_to_cloudwatch_logs, json[QString("SupportsLogExportsToCloudwatchLogs")]);
    m_supports_log_exports_to_cloudwatch_logs_isSet = !json[QString("SupportsLogExportsToCloudwatchLogs")].isNull() && m_supports_log_exports_to_cloudwatch_logs_isValid;
}

QString OAIDBEngineVersionList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDBEngineVersionList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_engine_version_isSet) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_db_parameter_group_family_isSet) {
        obj.insert(QString("DBParameterGroupFamily"), ::OpenAPI::toJsonValue(m_db_parameter_group_family));
    }
    if (m_db_engine_description_isSet) {
        obj.insert(QString("DBEngineDescription"), ::OpenAPI::toJsonValue(m_db_engine_description));
    }
    if (m_db_engine_version_description_isSet) {
        obj.insert(QString("DBEngineVersionDescription"), ::OpenAPI::toJsonValue(m_db_engine_version_description));
    }
    if (m_valid_upgrade_target.isSet()) {
        obj.insert(QString("ValidUpgradeTarget"), ::OpenAPI::toJsonValue(m_valid_upgrade_target));
    }
    if (m_exportable_log_types.isSet()) {
        obj.insert(QString("ExportableLogTypes"), ::OpenAPI::toJsonValue(m_exportable_log_types));
    }
    if (m_supports_log_exports_to_cloudwatch_logs_isSet) {
        obj.insert(QString("SupportsLogExportsToCloudwatchLogs"), ::OpenAPI::toJsonValue(m_supports_log_exports_to_cloudwatch_logs));
    }
    return obj;
}

QString OAIDBEngineVersionList_inner::getEngine() const {
    return m_engine;
}
void OAIDBEngineVersionList_inner::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDBEngineVersionList_inner::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDBEngineVersionList_inner::getEngineVersion() const {
    return m_engine_version;
}
void OAIDBEngineVersionList_inner::setEngineVersion(const QString &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDBEngineVersionList_inner::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

QString OAIDBEngineVersionList_inner::getDbParameterGroupFamily() const {
    return m_db_parameter_group_family;
}
void OAIDBEngineVersionList_inner::setDbParameterGroupFamily(const QString &db_parameter_group_family) {
    m_db_parameter_group_family = db_parameter_group_family;
    m_db_parameter_group_family_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_db_parameter_group_family_Set() const{
    return m_db_parameter_group_family_isSet;
}

bool OAIDBEngineVersionList_inner::is_db_parameter_group_family_Valid() const{
    return m_db_parameter_group_family_isValid;
}

QString OAIDBEngineVersionList_inner::getDbEngineDescription() const {
    return m_db_engine_description;
}
void OAIDBEngineVersionList_inner::setDbEngineDescription(const QString &db_engine_description) {
    m_db_engine_description = db_engine_description;
    m_db_engine_description_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_db_engine_description_Set() const{
    return m_db_engine_description_isSet;
}

bool OAIDBEngineVersionList_inner::is_db_engine_description_Valid() const{
    return m_db_engine_description_isValid;
}

QString OAIDBEngineVersionList_inner::getDbEngineVersionDescription() const {
    return m_db_engine_version_description;
}
void OAIDBEngineVersionList_inner::setDbEngineVersionDescription(const QString &db_engine_version_description) {
    m_db_engine_version_description = db_engine_version_description;
    m_db_engine_version_description_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_db_engine_version_description_Set() const{
    return m_db_engine_version_description_isSet;
}

bool OAIDBEngineVersionList_inner::is_db_engine_version_description_Valid() const{
    return m_db_engine_version_description_isValid;
}

QList OAIDBEngineVersionList_inner::getValidUpgradeTarget() const {
    return m_valid_upgrade_target;
}
void OAIDBEngineVersionList_inner::setValidUpgradeTarget(const QList &valid_upgrade_target) {
    m_valid_upgrade_target = valid_upgrade_target;
    m_valid_upgrade_target_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_valid_upgrade_target_Set() const{
    return m_valid_upgrade_target_isSet;
}

bool OAIDBEngineVersionList_inner::is_valid_upgrade_target_Valid() const{
    return m_valid_upgrade_target_isValid;
}

QList OAIDBEngineVersionList_inner::getExportableLogTypes() const {
    return m_exportable_log_types;
}
void OAIDBEngineVersionList_inner::setExportableLogTypes(const QList &exportable_log_types) {
    m_exportable_log_types = exportable_log_types;
    m_exportable_log_types_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_exportable_log_types_Set() const{
    return m_exportable_log_types_isSet;
}

bool OAIDBEngineVersionList_inner::is_exportable_log_types_Valid() const{
    return m_exportable_log_types_isValid;
}

bool OAIDBEngineVersionList_inner::getSupportsLogExportsToCloudwatchLogs() const {
    return m_supports_log_exports_to_cloudwatch_logs;
}
void OAIDBEngineVersionList_inner::setSupportsLogExportsToCloudwatchLogs(const bool &supports_log_exports_to_cloudwatch_logs) {
    m_supports_log_exports_to_cloudwatch_logs = supports_log_exports_to_cloudwatch_logs;
    m_supports_log_exports_to_cloudwatch_logs_isSet = true;
}

bool OAIDBEngineVersionList_inner::is_supports_log_exports_to_cloudwatch_logs_Set() const{
    return m_supports_log_exports_to_cloudwatch_logs_isSet;
}

bool OAIDBEngineVersionList_inner::is_supports_log_exports_to_cloudwatch_logs_Valid() const{
    return m_supports_log_exports_to_cloudwatch_logs_isValid;
}

bool OAIDBEngineVersionList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_parameter_group_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_engine_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_engine_version_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_upgrade_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exportable_log_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_log_exports_to_cloudwatch_logs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDBEngineVersionList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
