# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeDBEngineVersionsMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, engine_version: str=None, db_parameter_group_family: str=None, filters: List=None, max_records: int=None, marker: str=None, default_only: bool=None, list_supported_character_sets: bool=None, list_supported_timezones: bool=None):
        """DescribeDBEngineVersionsMessage - a model defined in OpenAPI

        :param engine: The engine of this DescribeDBEngineVersionsMessage.
        :param engine_version: The engine_version of this DescribeDBEngineVersionsMessage.
        :param db_parameter_group_family: The db_parameter_group_family of this DescribeDBEngineVersionsMessage.
        :param filters: The filters of this DescribeDBEngineVersionsMessage.
        :param max_records: The max_records of this DescribeDBEngineVersionsMessage.
        :param marker: The marker of this DescribeDBEngineVersionsMessage.
        :param default_only: The default_only of this DescribeDBEngineVersionsMessage.
        :param list_supported_character_sets: The list_supported_character_sets of this DescribeDBEngineVersionsMessage.
        :param list_supported_timezones: The list_supported_timezones of this DescribeDBEngineVersionsMessage.
        """
        self.openapi_types = {
            'engine': str,
            'engine_version': str,
            'db_parameter_group_family': str,
            'filters': List,
            'max_records': int,
            'marker': str,
            'default_only': bool,
            'list_supported_character_sets': bool,
            'list_supported_timezones': bool
        }

        self.attribute_map = {
            'engine': 'Engine',
            'engine_version': 'EngineVersion',
            'db_parameter_group_family': 'DBParameterGroupFamily',
            'filters': 'Filters',
            'max_records': 'MaxRecords',
            'marker': 'Marker',
            'default_only': 'DefaultOnly',
            'list_supported_character_sets': 'ListSupportedCharacterSets',
            'list_supported_timezones': 'ListSupportedTimezones'
        }

        self._engine = engine
        self._engine_version = engine_version
        self._db_parameter_group_family = db_parameter_group_family
        self._filters = filters
        self._max_records = max_records
        self._marker = marker
        self._default_only = default_only
        self._list_supported_character_sets = list_supported_character_sets
        self._list_supported_timezones = list_supported_timezones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDBEngineVersionsMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDBEngineVersionsMessage of this DescribeDBEngineVersionsMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this DescribeDBEngineVersionsMessage.


        :return: The engine of this DescribeDBEngineVersionsMessage.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DescribeDBEngineVersionsMessage.


        :param engine: The engine of this DescribeDBEngineVersionsMessage.
        :type engine: str
        """

        self._engine = engine

    @property
    def engine_version(self):
        """Gets the engine_version of this DescribeDBEngineVersionsMessage.


        :return: The engine_version of this DescribeDBEngineVersionsMessage.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this DescribeDBEngineVersionsMessage.


        :param engine_version: The engine_version of this DescribeDBEngineVersionsMessage.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def db_parameter_group_family(self):
        """Gets the db_parameter_group_family of this DescribeDBEngineVersionsMessage.


        :return: The db_parameter_group_family of this DescribeDBEngineVersionsMessage.
        :rtype: str
        """
        return self._db_parameter_group_family

    @db_parameter_group_family.setter
    def db_parameter_group_family(self, db_parameter_group_family):
        """Sets the db_parameter_group_family of this DescribeDBEngineVersionsMessage.


        :param db_parameter_group_family: The db_parameter_group_family of this DescribeDBEngineVersionsMessage.
        :type db_parameter_group_family: str
        """

        self._db_parameter_group_family = db_parameter_group_family

    @property
    def filters(self):
        """Gets the filters of this DescribeDBEngineVersionsMessage.


        :return: The filters of this DescribeDBEngineVersionsMessage.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeDBEngineVersionsMessage.


        :param filters: The filters of this DescribeDBEngineVersionsMessage.
        :type filters: List
        """

        self._filters = filters

    @property
    def max_records(self):
        """Gets the max_records of this DescribeDBEngineVersionsMessage.


        :return: The max_records of this DescribeDBEngineVersionsMessage.
        :rtype: int
        """
        return self._max_records

    @max_records.setter
    def max_records(self, max_records):
        """Sets the max_records of this DescribeDBEngineVersionsMessage.


        :param max_records: The max_records of this DescribeDBEngineVersionsMessage.
        :type max_records: int
        """

        self._max_records = max_records

    @property
    def marker(self):
        """Gets the marker of this DescribeDBEngineVersionsMessage.


        :return: The marker of this DescribeDBEngineVersionsMessage.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this DescribeDBEngineVersionsMessage.


        :param marker: The marker of this DescribeDBEngineVersionsMessage.
        :type marker: str
        """

        self._marker = marker

    @property
    def default_only(self):
        """Gets the default_only of this DescribeDBEngineVersionsMessage.


        :return: The default_only of this DescribeDBEngineVersionsMessage.
        :rtype: bool
        """
        return self._default_only

    @default_only.setter
    def default_only(self, default_only):
        """Sets the default_only of this DescribeDBEngineVersionsMessage.


        :param default_only: The default_only of this DescribeDBEngineVersionsMessage.
        :type default_only: bool
        """

        self._default_only = default_only

    @property
    def list_supported_character_sets(self):
        """Gets the list_supported_character_sets of this DescribeDBEngineVersionsMessage.


        :return: The list_supported_character_sets of this DescribeDBEngineVersionsMessage.
        :rtype: bool
        """
        return self._list_supported_character_sets

    @list_supported_character_sets.setter
    def list_supported_character_sets(self, list_supported_character_sets):
        """Sets the list_supported_character_sets of this DescribeDBEngineVersionsMessage.


        :param list_supported_character_sets: The list_supported_character_sets of this DescribeDBEngineVersionsMessage.
        :type list_supported_character_sets: bool
        """

        self._list_supported_character_sets = list_supported_character_sets

    @property
    def list_supported_timezones(self):
        """Gets the list_supported_timezones of this DescribeDBEngineVersionsMessage.


        :return: The list_supported_timezones of this DescribeDBEngineVersionsMessage.
        :rtype: bool
        """
        return self._list_supported_timezones

    @list_supported_timezones.setter
    def list_supported_timezones(self, list_supported_timezones):
        """Sets the list_supported_timezones of this DescribeDBEngineVersionsMessage.


        :param list_supported_timezones: The list_supported_timezones of this DescribeDBEngineVersionsMessage.
        :type list_supported_timezones: bool
        """

        self._list_supported_timezones = list_supported_timezones
