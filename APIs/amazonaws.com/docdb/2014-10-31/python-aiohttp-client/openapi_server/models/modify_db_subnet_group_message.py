# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModifyDBSubnetGroupMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_subnet_group_name: str=None, db_subnet_group_description: str=None, subnet_ids: List=None):
        """ModifyDBSubnetGroupMessage - a model defined in OpenAPI

        :param db_subnet_group_name: The db_subnet_group_name of this ModifyDBSubnetGroupMessage.
        :param db_subnet_group_description: The db_subnet_group_description of this ModifyDBSubnetGroupMessage.
        :param subnet_ids: The subnet_ids of this ModifyDBSubnetGroupMessage.
        """
        self.openapi_types = {
            'db_subnet_group_name': str,
            'db_subnet_group_description': str,
            'subnet_ids': List
        }

        self.attribute_map = {
            'db_subnet_group_name': 'DBSubnetGroupName',
            'db_subnet_group_description': 'DBSubnetGroupDescription',
            'subnet_ids': 'SubnetIds'
        }

        self._db_subnet_group_name = db_subnet_group_name
        self._db_subnet_group_description = db_subnet_group_description
        self._subnet_ids = subnet_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyDBSubnetGroupMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyDBSubnetGroupMessage of this ModifyDBSubnetGroupMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_subnet_group_name(self):
        """Gets the db_subnet_group_name of this ModifyDBSubnetGroupMessage.


        :return: The db_subnet_group_name of this ModifyDBSubnetGroupMessage.
        :rtype: str
        """
        return self._db_subnet_group_name

    @db_subnet_group_name.setter
    def db_subnet_group_name(self, db_subnet_group_name):
        """Sets the db_subnet_group_name of this ModifyDBSubnetGroupMessage.


        :param db_subnet_group_name: The db_subnet_group_name of this ModifyDBSubnetGroupMessage.
        :type db_subnet_group_name: str
        """
        if db_subnet_group_name is None:
            raise ValueError("Invalid value for `db_subnet_group_name`, must not be `None`")

        self._db_subnet_group_name = db_subnet_group_name

    @property
    def db_subnet_group_description(self):
        """Gets the db_subnet_group_description of this ModifyDBSubnetGroupMessage.


        :return: The db_subnet_group_description of this ModifyDBSubnetGroupMessage.
        :rtype: str
        """
        return self._db_subnet_group_description

    @db_subnet_group_description.setter
    def db_subnet_group_description(self, db_subnet_group_description):
        """Sets the db_subnet_group_description of this ModifyDBSubnetGroupMessage.


        :param db_subnet_group_description: The db_subnet_group_description of this ModifyDBSubnetGroupMessage.
        :type db_subnet_group_description: str
        """

        self._db_subnet_group_description = db_subnet_group_description

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this ModifyDBSubnetGroupMessage.


        :return: The subnet_ids of this ModifyDBSubnetGroupMessage.
        :rtype: List
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this ModifyDBSubnetGroupMessage.


        :param subnet_ids: The subnet_ids of this ModifyDBSubnetGroupMessage.
        :type subnet_ids: List
        """
        if subnet_ids is None:
            raise ValueError("Invalid value for `subnet_ids`, must not be `None`")

        self._subnet_ids = subnet_ids
