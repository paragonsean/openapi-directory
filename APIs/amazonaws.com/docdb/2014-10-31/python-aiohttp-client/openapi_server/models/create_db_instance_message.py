# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDBInstanceMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_instance_identifier: str=None, db_instance_class: str=None, engine: str=None, availability_zone: str=None, preferred_maintenance_window: str=None, auto_minor_version_upgrade: bool=None, tags: List=None, db_cluster_identifier: str=None, copy_tags_to_snapshot: bool=None, promotion_tier: int=None, enable_performance_insights: bool=None, performance_insights_kms_key_id: str=None):
        """CreateDBInstanceMessage - a model defined in OpenAPI

        :param db_instance_identifier: The db_instance_identifier of this CreateDBInstanceMessage.
        :param db_instance_class: The db_instance_class of this CreateDBInstanceMessage.
        :param engine: The engine of this CreateDBInstanceMessage.
        :param availability_zone: The availability_zone of this CreateDBInstanceMessage.
        :param preferred_maintenance_window: The preferred_maintenance_window of this CreateDBInstanceMessage.
        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this CreateDBInstanceMessage.
        :param tags: The tags of this CreateDBInstanceMessage.
        :param db_cluster_identifier: The db_cluster_identifier of this CreateDBInstanceMessage.
        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this CreateDBInstanceMessage.
        :param promotion_tier: The promotion_tier of this CreateDBInstanceMessage.
        :param enable_performance_insights: The enable_performance_insights of this CreateDBInstanceMessage.
        :param performance_insights_kms_key_id: The performance_insights_kms_key_id of this CreateDBInstanceMessage.
        """
        self.openapi_types = {
            'db_instance_identifier': str,
            'db_instance_class': str,
            'engine': str,
            'availability_zone': str,
            'preferred_maintenance_window': str,
            'auto_minor_version_upgrade': bool,
            'tags': List,
            'db_cluster_identifier': str,
            'copy_tags_to_snapshot': bool,
            'promotion_tier': int,
            'enable_performance_insights': bool,
            'performance_insights_kms_key_id': str
        }

        self.attribute_map = {
            'db_instance_identifier': 'DBInstanceIdentifier',
            'db_instance_class': 'DBInstanceClass',
            'engine': 'Engine',
            'availability_zone': 'AvailabilityZone',
            'preferred_maintenance_window': 'PreferredMaintenanceWindow',
            'auto_minor_version_upgrade': 'AutoMinorVersionUpgrade',
            'tags': 'Tags',
            'db_cluster_identifier': 'DBClusterIdentifier',
            'copy_tags_to_snapshot': 'CopyTagsToSnapshot',
            'promotion_tier': 'PromotionTier',
            'enable_performance_insights': 'EnablePerformanceInsights',
            'performance_insights_kms_key_id': 'PerformanceInsightsKMSKeyId'
        }

        self._db_instance_identifier = db_instance_identifier
        self._db_instance_class = db_instance_class
        self._engine = engine
        self._availability_zone = availability_zone
        self._preferred_maintenance_window = preferred_maintenance_window
        self._auto_minor_version_upgrade = auto_minor_version_upgrade
        self._tags = tags
        self._db_cluster_identifier = db_cluster_identifier
        self._copy_tags_to_snapshot = copy_tags_to_snapshot
        self._promotion_tier = promotion_tier
        self._enable_performance_insights = enable_performance_insights
        self._performance_insights_kms_key_id = performance_insights_kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDBInstanceMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDBInstanceMessage of this CreateDBInstanceMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_instance_identifier(self):
        """Gets the db_instance_identifier of this CreateDBInstanceMessage.


        :return: The db_instance_identifier of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_instance_identifier

    @db_instance_identifier.setter
    def db_instance_identifier(self, db_instance_identifier):
        """Sets the db_instance_identifier of this CreateDBInstanceMessage.


        :param db_instance_identifier: The db_instance_identifier of this CreateDBInstanceMessage.
        :type db_instance_identifier: str
        """
        if db_instance_identifier is None:
            raise ValueError("Invalid value for `db_instance_identifier`, must not be `None`")

        self._db_instance_identifier = db_instance_identifier

    @property
    def db_instance_class(self):
        """Gets the db_instance_class of this CreateDBInstanceMessage.


        :return: The db_instance_class of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_instance_class

    @db_instance_class.setter
    def db_instance_class(self, db_instance_class):
        """Sets the db_instance_class of this CreateDBInstanceMessage.


        :param db_instance_class: The db_instance_class of this CreateDBInstanceMessage.
        :type db_instance_class: str
        """
        if db_instance_class is None:
            raise ValueError("Invalid value for `db_instance_class`, must not be `None`")

        self._db_instance_class = db_instance_class

    @property
    def engine(self):
        """Gets the engine of this CreateDBInstanceMessage.


        :return: The engine of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this CreateDBInstanceMessage.


        :param engine: The engine of this CreateDBInstanceMessage.
        :type engine: str
        """
        if engine is None:
            raise ValueError("Invalid value for `engine`, must not be `None`")

        self._engine = engine

    @property
    def availability_zone(self):
        """Gets the availability_zone of this CreateDBInstanceMessage.


        :return: The availability_zone of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this CreateDBInstanceMessage.


        :param availability_zone: The availability_zone of this CreateDBInstanceMessage.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this CreateDBInstanceMessage.


        :return: The preferred_maintenance_window of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this CreateDBInstanceMessage.


        :param preferred_maintenance_window: The preferred_maintenance_window of this CreateDBInstanceMessage.
        :type preferred_maintenance_window: str
        """

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def auto_minor_version_upgrade(self):
        """Gets the auto_minor_version_upgrade of this CreateDBInstanceMessage.


        :return: The auto_minor_version_upgrade of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._auto_minor_version_upgrade

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, auto_minor_version_upgrade):
        """Sets the auto_minor_version_upgrade of this CreateDBInstanceMessage.


        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this CreateDBInstanceMessage.
        :type auto_minor_version_upgrade: bool
        """

        self._auto_minor_version_upgrade = auto_minor_version_upgrade

    @property
    def tags(self):
        """Gets the tags of this CreateDBInstanceMessage.


        :return: The tags of this CreateDBInstanceMessage.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDBInstanceMessage.


        :param tags: The tags of this CreateDBInstanceMessage.
        :type tags: List
        """

        self._tags = tags

    @property
    def db_cluster_identifier(self):
        """Gets the db_cluster_identifier of this CreateDBInstanceMessage.


        :return: The db_cluster_identifier of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._db_cluster_identifier

    @db_cluster_identifier.setter
    def db_cluster_identifier(self, db_cluster_identifier):
        """Sets the db_cluster_identifier of this CreateDBInstanceMessage.


        :param db_cluster_identifier: The db_cluster_identifier of this CreateDBInstanceMessage.
        :type db_cluster_identifier: str
        """
        if db_cluster_identifier is None:
            raise ValueError("Invalid value for `db_cluster_identifier`, must not be `None`")

        self._db_cluster_identifier = db_cluster_identifier

    @property
    def copy_tags_to_snapshot(self):
        """Gets the copy_tags_to_snapshot of this CreateDBInstanceMessage.


        :return: The copy_tags_to_snapshot of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._copy_tags_to_snapshot

    @copy_tags_to_snapshot.setter
    def copy_tags_to_snapshot(self, copy_tags_to_snapshot):
        """Sets the copy_tags_to_snapshot of this CreateDBInstanceMessage.


        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this CreateDBInstanceMessage.
        :type copy_tags_to_snapshot: bool
        """

        self._copy_tags_to_snapshot = copy_tags_to_snapshot

    @property
    def promotion_tier(self):
        """Gets the promotion_tier of this CreateDBInstanceMessage.


        :return: The promotion_tier of this CreateDBInstanceMessage.
        :rtype: int
        """
        return self._promotion_tier

    @promotion_tier.setter
    def promotion_tier(self, promotion_tier):
        """Sets the promotion_tier of this CreateDBInstanceMessage.


        :param promotion_tier: The promotion_tier of this CreateDBInstanceMessage.
        :type promotion_tier: int
        """

        self._promotion_tier = promotion_tier

    @property
    def enable_performance_insights(self):
        """Gets the enable_performance_insights of this CreateDBInstanceMessage.


        :return: The enable_performance_insights of this CreateDBInstanceMessage.
        :rtype: bool
        """
        return self._enable_performance_insights

    @enable_performance_insights.setter
    def enable_performance_insights(self, enable_performance_insights):
        """Sets the enable_performance_insights of this CreateDBInstanceMessage.


        :param enable_performance_insights: The enable_performance_insights of this CreateDBInstanceMessage.
        :type enable_performance_insights: bool
        """

        self._enable_performance_insights = enable_performance_insights

    @property
    def performance_insights_kms_key_id(self):
        """Gets the performance_insights_kms_key_id of this CreateDBInstanceMessage.


        :return: The performance_insights_kms_key_id of this CreateDBInstanceMessage.
        :rtype: str
        """
        return self._performance_insights_kms_key_id

    @performance_insights_kms_key_id.setter
    def performance_insights_kms_key_id(self, performance_insights_kms_key_id):
        """Sets the performance_insights_kms_key_id of this CreateDBInstanceMessage.


        :param performance_insights_kms_key_id: The performance_insights_kms_key_id of this CreateDBInstanceMessage.
        :type performance_insights_kms_key_id: str
        """

        self._performance_insights_kms_key_id = performance_insights_kms_key_id
