# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DBSubnetGroupsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_subnet_group_name: str=None, db_subnet_group_description: str=None, vpc_id: str=None, subnet_group_status: str=None, subnets: List=None, db_subnet_group_arn: str=None):
        """DBSubnetGroupsInner - a model defined in OpenAPI

        :param db_subnet_group_name: The db_subnet_group_name of this DBSubnetGroupsInner.
        :param db_subnet_group_description: The db_subnet_group_description of this DBSubnetGroupsInner.
        :param vpc_id: The vpc_id of this DBSubnetGroupsInner.
        :param subnet_group_status: The subnet_group_status of this DBSubnetGroupsInner.
        :param subnets: The subnets of this DBSubnetGroupsInner.
        :param db_subnet_group_arn: The db_subnet_group_arn of this DBSubnetGroupsInner.
        """
        self.openapi_types = {
            'db_subnet_group_name': str,
            'db_subnet_group_description': str,
            'vpc_id': str,
            'subnet_group_status': str,
            'subnets': List,
            'db_subnet_group_arn': str
        }

        self.attribute_map = {
            'db_subnet_group_name': 'DBSubnetGroupName',
            'db_subnet_group_description': 'DBSubnetGroupDescription',
            'vpc_id': 'VpcId',
            'subnet_group_status': 'SubnetGroupStatus',
            'subnets': 'Subnets',
            'db_subnet_group_arn': 'DBSubnetGroupArn'
        }

        self._db_subnet_group_name = db_subnet_group_name
        self._db_subnet_group_description = db_subnet_group_description
        self._vpc_id = vpc_id
        self._subnet_group_status = subnet_group_status
        self._subnets = subnets
        self._db_subnet_group_arn = db_subnet_group_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DBSubnetGroupsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DBSubnetGroups_inner of this DBSubnetGroupsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_subnet_group_name(self):
        """Gets the db_subnet_group_name of this DBSubnetGroupsInner.


        :return: The db_subnet_group_name of this DBSubnetGroupsInner.
        :rtype: str
        """
        return self._db_subnet_group_name

    @db_subnet_group_name.setter
    def db_subnet_group_name(self, db_subnet_group_name):
        """Sets the db_subnet_group_name of this DBSubnetGroupsInner.


        :param db_subnet_group_name: The db_subnet_group_name of this DBSubnetGroupsInner.
        :type db_subnet_group_name: str
        """

        self._db_subnet_group_name = db_subnet_group_name

    @property
    def db_subnet_group_description(self):
        """Gets the db_subnet_group_description of this DBSubnetGroupsInner.


        :return: The db_subnet_group_description of this DBSubnetGroupsInner.
        :rtype: str
        """
        return self._db_subnet_group_description

    @db_subnet_group_description.setter
    def db_subnet_group_description(self, db_subnet_group_description):
        """Sets the db_subnet_group_description of this DBSubnetGroupsInner.


        :param db_subnet_group_description: The db_subnet_group_description of this DBSubnetGroupsInner.
        :type db_subnet_group_description: str
        """

        self._db_subnet_group_description = db_subnet_group_description

    @property
    def vpc_id(self):
        """Gets the vpc_id of this DBSubnetGroupsInner.


        :return: The vpc_id of this DBSubnetGroupsInner.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this DBSubnetGroupsInner.


        :param vpc_id: The vpc_id of this DBSubnetGroupsInner.
        :type vpc_id: str
        """

        self._vpc_id = vpc_id

    @property
    def subnet_group_status(self):
        """Gets the subnet_group_status of this DBSubnetGroupsInner.


        :return: The subnet_group_status of this DBSubnetGroupsInner.
        :rtype: str
        """
        return self._subnet_group_status

    @subnet_group_status.setter
    def subnet_group_status(self, subnet_group_status):
        """Sets the subnet_group_status of this DBSubnetGroupsInner.


        :param subnet_group_status: The subnet_group_status of this DBSubnetGroupsInner.
        :type subnet_group_status: str
        """

        self._subnet_group_status = subnet_group_status

    @property
    def subnets(self):
        """Gets the subnets of this DBSubnetGroupsInner.


        :return: The subnets of this DBSubnetGroupsInner.
        :rtype: List
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this DBSubnetGroupsInner.


        :param subnets: The subnets of this DBSubnetGroupsInner.
        :type subnets: List
        """

        self._subnets = subnets

    @property
    def db_subnet_group_arn(self):
        """Gets the db_subnet_group_arn of this DBSubnetGroupsInner.


        :return: The db_subnet_group_arn of this DBSubnetGroupsInner.
        :rtype: str
        """
        return self._db_subnet_group_arn

    @db_subnet_group_arn.setter
    def db_subnet_group_arn(self, db_subnet_group_arn):
        """Sets the db_subnet_group_arn of this DBSubnetGroupsInner.


        :param db_subnet_group_arn: The db_subnet_group_arn of this DBSubnetGroupsInner.
        :type db_subnet_group_arn: str
        """

        self._db_subnet_group_arn = db_subnet_group_arn
