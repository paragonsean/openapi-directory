# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModifyDBInstanceMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_instance_identifier: str=None, db_instance_class: str=None, apply_immediately: bool=None, preferred_maintenance_window: str=None, auto_minor_version_upgrade: bool=None, new_db_instance_identifier: str=None, ca_certificate_identifier: str=None, copy_tags_to_snapshot: bool=None, promotion_tier: int=None, enable_performance_insights: bool=None, performance_insights_kms_key_id: str=None):
        """ModifyDBInstanceMessage - a model defined in OpenAPI

        :param db_instance_identifier: The db_instance_identifier of this ModifyDBInstanceMessage.
        :param db_instance_class: The db_instance_class of this ModifyDBInstanceMessage.
        :param apply_immediately: The apply_immediately of this ModifyDBInstanceMessage.
        :param preferred_maintenance_window: The preferred_maintenance_window of this ModifyDBInstanceMessage.
        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this ModifyDBInstanceMessage.
        :param new_db_instance_identifier: The new_db_instance_identifier of this ModifyDBInstanceMessage.
        :param ca_certificate_identifier: The ca_certificate_identifier of this ModifyDBInstanceMessage.
        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this ModifyDBInstanceMessage.
        :param promotion_tier: The promotion_tier of this ModifyDBInstanceMessage.
        :param enable_performance_insights: The enable_performance_insights of this ModifyDBInstanceMessage.
        :param performance_insights_kms_key_id: The performance_insights_kms_key_id of this ModifyDBInstanceMessage.
        """
        self.openapi_types = {
            'db_instance_identifier': str,
            'db_instance_class': str,
            'apply_immediately': bool,
            'preferred_maintenance_window': str,
            'auto_minor_version_upgrade': bool,
            'new_db_instance_identifier': str,
            'ca_certificate_identifier': str,
            'copy_tags_to_snapshot': bool,
            'promotion_tier': int,
            'enable_performance_insights': bool,
            'performance_insights_kms_key_id': str
        }

        self.attribute_map = {
            'db_instance_identifier': 'DBInstanceIdentifier',
            'db_instance_class': 'DBInstanceClass',
            'apply_immediately': 'ApplyImmediately',
            'preferred_maintenance_window': 'PreferredMaintenanceWindow',
            'auto_minor_version_upgrade': 'AutoMinorVersionUpgrade',
            'new_db_instance_identifier': 'NewDBInstanceIdentifier',
            'ca_certificate_identifier': 'CACertificateIdentifier',
            'copy_tags_to_snapshot': 'CopyTagsToSnapshot',
            'promotion_tier': 'PromotionTier',
            'enable_performance_insights': 'EnablePerformanceInsights',
            'performance_insights_kms_key_id': 'PerformanceInsightsKMSKeyId'
        }

        self._db_instance_identifier = db_instance_identifier
        self._db_instance_class = db_instance_class
        self._apply_immediately = apply_immediately
        self._preferred_maintenance_window = preferred_maintenance_window
        self._auto_minor_version_upgrade = auto_minor_version_upgrade
        self._new_db_instance_identifier = new_db_instance_identifier
        self._ca_certificate_identifier = ca_certificate_identifier
        self._copy_tags_to_snapshot = copy_tags_to_snapshot
        self._promotion_tier = promotion_tier
        self._enable_performance_insights = enable_performance_insights
        self._performance_insights_kms_key_id = performance_insights_kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyDBInstanceMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyDBInstanceMessage of this ModifyDBInstanceMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_instance_identifier(self):
        """Gets the db_instance_identifier of this ModifyDBInstanceMessage.


        :return: The db_instance_identifier of this ModifyDBInstanceMessage.
        :rtype: str
        """
        return self._db_instance_identifier

    @db_instance_identifier.setter
    def db_instance_identifier(self, db_instance_identifier):
        """Sets the db_instance_identifier of this ModifyDBInstanceMessage.


        :param db_instance_identifier: The db_instance_identifier of this ModifyDBInstanceMessage.
        :type db_instance_identifier: str
        """
        if db_instance_identifier is None:
            raise ValueError("Invalid value for `db_instance_identifier`, must not be `None`")

        self._db_instance_identifier = db_instance_identifier

    @property
    def db_instance_class(self):
        """Gets the db_instance_class of this ModifyDBInstanceMessage.


        :return: The db_instance_class of this ModifyDBInstanceMessage.
        :rtype: str
        """
        return self._db_instance_class

    @db_instance_class.setter
    def db_instance_class(self, db_instance_class):
        """Sets the db_instance_class of this ModifyDBInstanceMessage.


        :param db_instance_class: The db_instance_class of this ModifyDBInstanceMessage.
        :type db_instance_class: str
        """

        self._db_instance_class = db_instance_class

    @property
    def apply_immediately(self):
        """Gets the apply_immediately of this ModifyDBInstanceMessage.


        :return: The apply_immediately of this ModifyDBInstanceMessage.
        :rtype: bool
        """
        return self._apply_immediately

    @apply_immediately.setter
    def apply_immediately(self, apply_immediately):
        """Sets the apply_immediately of this ModifyDBInstanceMessage.


        :param apply_immediately: The apply_immediately of this ModifyDBInstanceMessage.
        :type apply_immediately: bool
        """

        self._apply_immediately = apply_immediately

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this ModifyDBInstanceMessage.


        :return: The preferred_maintenance_window of this ModifyDBInstanceMessage.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this ModifyDBInstanceMessage.


        :param preferred_maintenance_window: The preferred_maintenance_window of this ModifyDBInstanceMessage.
        :type preferred_maintenance_window: str
        """

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def auto_minor_version_upgrade(self):
        """Gets the auto_minor_version_upgrade of this ModifyDBInstanceMessage.


        :return: The auto_minor_version_upgrade of this ModifyDBInstanceMessage.
        :rtype: bool
        """
        return self._auto_minor_version_upgrade

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, auto_minor_version_upgrade):
        """Sets the auto_minor_version_upgrade of this ModifyDBInstanceMessage.


        :param auto_minor_version_upgrade: The auto_minor_version_upgrade of this ModifyDBInstanceMessage.
        :type auto_minor_version_upgrade: bool
        """

        self._auto_minor_version_upgrade = auto_minor_version_upgrade

    @property
    def new_db_instance_identifier(self):
        """Gets the new_db_instance_identifier of this ModifyDBInstanceMessage.


        :return: The new_db_instance_identifier of this ModifyDBInstanceMessage.
        :rtype: str
        """
        return self._new_db_instance_identifier

    @new_db_instance_identifier.setter
    def new_db_instance_identifier(self, new_db_instance_identifier):
        """Sets the new_db_instance_identifier of this ModifyDBInstanceMessage.


        :param new_db_instance_identifier: The new_db_instance_identifier of this ModifyDBInstanceMessage.
        :type new_db_instance_identifier: str
        """

        self._new_db_instance_identifier = new_db_instance_identifier

    @property
    def ca_certificate_identifier(self):
        """Gets the ca_certificate_identifier of this ModifyDBInstanceMessage.


        :return: The ca_certificate_identifier of this ModifyDBInstanceMessage.
        :rtype: str
        """
        return self._ca_certificate_identifier

    @ca_certificate_identifier.setter
    def ca_certificate_identifier(self, ca_certificate_identifier):
        """Sets the ca_certificate_identifier of this ModifyDBInstanceMessage.


        :param ca_certificate_identifier: The ca_certificate_identifier of this ModifyDBInstanceMessage.
        :type ca_certificate_identifier: str
        """

        self._ca_certificate_identifier = ca_certificate_identifier

    @property
    def copy_tags_to_snapshot(self):
        """Gets the copy_tags_to_snapshot of this ModifyDBInstanceMessage.


        :return: The copy_tags_to_snapshot of this ModifyDBInstanceMessage.
        :rtype: bool
        """
        return self._copy_tags_to_snapshot

    @copy_tags_to_snapshot.setter
    def copy_tags_to_snapshot(self, copy_tags_to_snapshot):
        """Sets the copy_tags_to_snapshot of this ModifyDBInstanceMessage.


        :param copy_tags_to_snapshot: The copy_tags_to_snapshot of this ModifyDBInstanceMessage.
        :type copy_tags_to_snapshot: bool
        """

        self._copy_tags_to_snapshot = copy_tags_to_snapshot

    @property
    def promotion_tier(self):
        """Gets the promotion_tier of this ModifyDBInstanceMessage.


        :return: The promotion_tier of this ModifyDBInstanceMessage.
        :rtype: int
        """
        return self._promotion_tier

    @promotion_tier.setter
    def promotion_tier(self, promotion_tier):
        """Sets the promotion_tier of this ModifyDBInstanceMessage.


        :param promotion_tier: The promotion_tier of this ModifyDBInstanceMessage.
        :type promotion_tier: int
        """

        self._promotion_tier = promotion_tier

    @property
    def enable_performance_insights(self):
        """Gets the enable_performance_insights of this ModifyDBInstanceMessage.


        :return: The enable_performance_insights of this ModifyDBInstanceMessage.
        :rtype: bool
        """
        return self._enable_performance_insights

    @enable_performance_insights.setter
    def enable_performance_insights(self, enable_performance_insights):
        """Sets the enable_performance_insights of this ModifyDBInstanceMessage.


        :param enable_performance_insights: The enable_performance_insights of this ModifyDBInstanceMessage.
        :type enable_performance_insights: bool
        """

        self._enable_performance_insights = enable_performance_insights

    @property
    def performance_insights_kms_key_id(self):
        """Gets the performance_insights_kms_key_id of this ModifyDBInstanceMessage.


        :return: The performance_insights_kms_key_id of this ModifyDBInstanceMessage.
        :rtype: str
        """
        return self._performance_insights_kms_key_id

    @performance_insights_kms_key_id.setter
    def performance_insights_kms_key_id(self, performance_insights_kms_key_id):
        """Sets the performance_insights_kms_key_id of this ModifyDBInstanceMessage.


        :param performance_insights_kms_key_id: The performance_insights_kms_key_id of this ModifyDBInstanceMessage.
        :type performance_insights_kms_key_id: str
        """

        self._performance_insights_kms_key_id = performance_insights_kms_key_id
