# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DBEngineVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, engine_version: str=None, db_parameter_group_family: str=None, db_engine_description: str=None, db_engine_version_description: str=None, valid_upgrade_target: List=None, exportable_log_types: List=None, supports_log_exports_to_cloudwatch_logs: bool=None):
        """DBEngineVersion - a model defined in OpenAPI

        :param engine: The engine of this DBEngineVersion.
        :param engine_version: The engine_version of this DBEngineVersion.
        :param db_parameter_group_family: The db_parameter_group_family of this DBEngineVersion.
        :param db_engine_description: The db_engine_description of this DBEngineVersion.
        :param db_engine_version_description: The db_engine_version_description of this DBEngineVersion.
        :param valid_upgrade_target: The valid_upgrade_target of this DBEngineVersion.
        :param exportable_log_types: The exportable_log_types of this DBEngineVersion.
        :param supports_log_exports_to_cloudwatch_logs: The supports_log_exports_to_cloudwatch_logs of this DBEngineVersion.
        """
        self.openapi_types = {
            'engine': str,
            'engine_version': str,
            'db_parameter_group_family': str,
            'db_engine_description': str,
            'db_engine_version_description': str,
            'valid_upgrade_target': List,
            'exportable_log_types': List,
            'supports_log_exports_to_cloudwatch_logs': bool
        }

        self.attribute_map = {
            'engine': 'Engine',
            'engine_version': 'EngineVersion',
            'db_parameter_group_family': 'DBParameterGroupFamily',
            'db_engine_description': 'DBEngineDescription',
            'db_engine_version_description': 'DBEngineVersionDescription',
            'valid_upgrade_target': 'ValidUpgradeTarget',
            'exportable_log_types': 'ExportableLogTypes',
            'supports_log_exports_to_cloudwatch_logs': 'SupportsLogExportsToCloudwatchLogs'
        }

        self._engine = engine
        self._engine_version = engine_version
        self._db_parameter_group_family = db_parameter_group_family
        self._db_engine_description = db_engine_description
        self._db_engine_version_description = db_engine_version_description
        self._valid_upgrade_target = valid_upgrade_target
        self._exportable_log_types = exportable_log_types
        self._supports_log_exports_to_cloudwatch_logs = supports_log_exports_to_cloudwatch_logs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DBEngineVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DBEngineVersion of this DBEngineVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this DBEngineVersion.


        :return: The engine of this DBEngineVersion.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this DBEngineVersion.


        :param engine: The engine of this DBEngineVersion.
        :type engine: str
        """

        self._engine = engine

    @property
    def engine_version(self):
        """Gets the engine_version of this DBEngineVersion.


        :return: The engine_version of this DBEngineVersion.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this DBEngineVersion.


        :param engine_version: The engine_version of this DBEngineVersion.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def db_parameter_group_family(self):
        """Gets the db_parameter_group_family of this DBEngineVersion.


        :return: The db_parameter_group_family of this DBEngineVersion.
        :rtype: str
        """
        return self._db_parameter_group_family

    @db_parameter_group_family.setter
    def db_parameter_group_family(self, db_parameter_group_family):
        """Sets the db_parameter_group_family of this DBEngineVersion.


        :param db_parameter_group_family: The db_parameter_group_family of this DBEngineVersion.
        :type db_parameter_group_family: str
        """

        self._db_parameter_group_family = db_parameter_group_family

    @property
    def db_engine_description(self):
        """Gets the db_engine_description of this DBEngineVersion.


        :return: The db_engine_description of this DBEngineVersion.
        :rtype: str
        """
        return self._db_engine_description

    @db_engine_description.setter
    def db_engine_description(self, db_engine_description):
        """Sets the db_engine_description of this DBEngineVersion.


        :param db_engine_description: The db_engine_description of this DBEngineVersion.
        :type db_engine_description: str
        """

        self._db_engine_description = db_engine_description

    @property
    def db_engine_version_description(self):
        """Gets the db_engine_version_description of this DBEngineVersion.


        :return: The db_engine_version_description of this DBEngineVersion.
        :rtype: str
        """
        return self._db_engine_version_description

    @db_engine_version_description.setter
    def db_engine_version_description(self, db_engine_version_description):
        """Sets the db_engine_version_description of this DBEngineVersion.


        :param db_engine_version_description: The db_engine_version_description of this DBEngineVersion.
        :type db_engine_version_description: str
        """

        self._db_engine_version_description = db_engine_version_description

    @property
    def valid_upgrade_target(self):
        """Gets the valid_upgrade_target of this DBEngineVersion.


        :return: The valid_upgrade_target of this DBEngineVersion.
        :rtype: List
        """
        return self._valid_upgrade_target

    @valid_upgrade_target.setter
    def valid_upgrade_target(self, valid_upgrade_target):
        """Sets the valid_upgrade_target of this DBEngineVersion.


        :param valid_upgrade_target: The valid_upgrade_target of this DBEngineVersion.
        :type valid_upgrade_target: List
        """

        self._valid_upgrade_target = valid_upgrade_target

    @property
    def exportable_log_types(self):
        """Gets the exportable_log_types of this DBEngineVersion.


        :return: The exportable_log_types of this DBEngineVersion.
        :rtype: List
        """
        return self._exportable_log_types

    @exportable_log_types.setter
    def exportable_log_types(self, exportable_log_types):
        """Sets the exportable_log_types of this DBEngineVersion.


        :param exportable_log_types: The exportable_log_types of this DBEngineVersion.
        :type exportable_log_types: List
        """

        self._exportable_log_types = exportable_log_types

    @property
    def supports_log_exports_to_cloudwatch_logs(self):
        """Gets the supports_log_exports_to_cloudwatch_logs of this DBEngineVersion.


        :return: The supports_log_exports_to_cloudwatch_logs of this DBEngineVersion.
        :rtype: bool
        """
        return self._supports_log_exports_to_cloudwatch_logs

    @supports_log_exports_to_cloudwatch_logs.setter
    def supports_log_exports_to_cloudwatch_logs(self, supports_log_exports_to_cloudwatch_logs):
        """Sets the supports_log_exports_to_cloudwatch_logs of this DBEngineVersion.


        :param supports_log_exports_to_cloudwatch_logs: The supports_log_exports_to_cloudwatch_logs of this DBEngineVersion.
        :type supports_log_exports_to_cloudwatch_logs: bool
        """

        self._supports_log_exports_to_cloudwatch_logs = supports_log_exports_to_cloudwatch_logs
