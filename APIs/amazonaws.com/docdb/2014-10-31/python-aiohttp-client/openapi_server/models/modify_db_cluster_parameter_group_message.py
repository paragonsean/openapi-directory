# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModifyDBClusterParameterGroupMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_cluster_parameter_group_name: str=None, parameters: List=None):
        """ModifyDBClusterParameterGroupMessage - a model defined in OpenAPI

        :param db_cluster_parameter_group_name: The db_cluster_parameter_group_name of this ModifyDBClusterParameterGroupMessage.
        :param parameters: The parameters of this ModifyDBClusterParameterGroupMessage.
        """
        self.openapi_types = {
            'db_cluster_parameter_group_name': str,
            'parameters': List
        }

        self.attribute_map = {
            'db_cluster_parameter_group_name': 'DBClusterParameterGroupName',
            'parameters': 'Parameters'
        }

        self._db_cluster_parameter_group_name = db_cluster_parameter_group_name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModifyDBClusterParameterGroupMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModifyDBClusterParameterGroupMessage of this ModifyDBClusterParameterGroupMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_cluster_parameter_group_name(self):
        """Gets the db_cluster_parameter_group_name of this ModifyDBClusterParameterGroupMessage.


        :return: The db_cluster_parameter_group_name of this ModifyDBClusterParameterGroupMessage.
        :rtype: str
        """
        return self._db_cluster_parameter_group_name

    @db_cluster_parameter_group_name.setter
    def db_cluster_parameter_group_name(self, db_cluster_parameter_group_name):
        """Sets the db_cluster_parameter_group_name of this ModifyDBClusterParameterGroupMessage.


        :param db_cluster_parameter_group_name: The db_cluster_parameter_group_name of this ModifyDBClusterParameterGroupMessage.
        :type db_cluster_parameter_group_name: str
        """
        if db_cluster_parameter_group_name is None:
            raise ValueError("Invalid value for `db_cluster_parameter_group_name`, must not be `None`")

        self._db_cluster_parameter_group_name = db_cluster_parameter_group_name

    @property
    def parameters(self):
        """Gets the parameters of this ModifyDBClusterParameterGroupMessage.


        :return: The parameters of this ModifyDBClusterParameterGroupMessage.
        :rtype: List
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ModifyDBClusterParameterGroupMessage.


        :param parameters: The parameters of this ModifyDBClusterParameterGroupMessage.
        :type parameters: List
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
