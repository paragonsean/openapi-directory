# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DBInstanceStatusInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_type: str=None, normal: bool=None, status: str=None, message: str=None):
        """DBInstanceStatusInfo - a model defined in OpenAPI

        :param status_type: The status_type of this DBInstanceStatusInfo.
        :param normal: The normal of this DBInstanceStatusInfo.
        :param status: The status of this DBInstanceStatusInfo.
        :param message: The message of this DBInstanceStatusInfo.
        """
        self.openapi_types = {
            'status_type': str,
            'normal': bool,
            'status': str,
            'message': str
        }

        self.attribute_map = {
            'status_type': 'StatusType',
            'normal': 'Normal',
            'status': 'Status',
            'message': 'Message'
        }

        self._status_type = status_type
        self._normal = normal
        self._status = status
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DBInstanceStatusInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DBInstanceStatusInfo of this DBInstanceStatusInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_type(self):
        """Gets the status_type of this DBInstanceStatusInfo.


        :return: The status_type of this DBInstanceStatusInfo.
        :rtype: str
        """
        return self._status_type

    @status_type.setter
    def status_type(self, status_type):
        """Sets the status_type of this DBInstanceStatusInfo.


        :param status_type: The status_type of this DBInstanceStatusInfo.
        :type status_type: str
        """

        self._status_type = status_type

    @property
    def normal(self):
        """Gets the normal of this DBInstanceStatusInfo.


        :return: The normal of this DBInstanceStatusInfo.
        :rtype: bool
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this DBInstanceStatusInfo.


        :param normal: The normal of this DBInstanceStatusInfo.
        :type normal: bool
        """

        self._normal = normal

    @property
    def status(self):
        """Gets the status of this DBInstanceStatusInfo.


        :return: The status of this DBInstanceStatusInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DBInstanceStatusInfo.


        :param status: The status of this DBInstanceStatusInfo.
        :type status: str
        """

        self._status = status

    @property
    def message(self):
        """Gets the message of this DBInstanceStatusInfo.


        :return: The message of this DBInstanceStatusInfo.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DBInstanceStatusInfo.


        :param message: The message of this DBInstanceStatusInfo.
        :type message: str
        """

        self._message = message
