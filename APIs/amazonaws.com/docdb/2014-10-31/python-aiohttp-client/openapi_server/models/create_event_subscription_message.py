# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateEventSubscriptionMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_name: str=None, sns_topic_arn: str=None, source_type: str=None, event_categories: List=None, source_ids: List=None, enabled: bool=None, tags: List=None):
        """CreateEventSubscriptionMessage - a model defined in OpenAPI

        :param subscription_name: The subscription_name of this CreateEventSubscriptionMessage.
        :param sns_topic_arn: The sns_topic_arn of this CreateEventSubscriptionMessage.
        :param source_type: The source_type of this CreateEventSubscriptionMessage.
        :param event_categories: The event_categories of this CreateEventSubscriptionMessage.
        :param source_ids: The source_ids of this CreateEventSubscriptionMessage.
        :param enabled: The enabled of this CreateEventSubscriptionMessage.
        :param tags: The tags of this CreateEventSubscriptionMessage.
        """
        self.openapi_types = {
            'subscription_name': str,
            'sns_topic_arn': str,
            'source_type': str,
            'event_categories': List,
            'source_ids': List,
            'enabled': bool,
            'tags': List
        }

        self.attribute_map = {
            'subscription_name': 'SubscriptionName',
            'sns_topic_arn': 'SnsTopicArn',
            'source_type': 'SourceType',
            'event_categories': 'EventCategories',
            'source_ids': 'SourceIds',
            'enabled': 'Enabled',
            'tags': 'Tags'
        }

        self._subscription_name = subscription_name
        self._sns_topic_arn = sns_topic_arn
        self._source_type = source_type
        self._event_categories = event_categories
        self._source_ids = source_ids
        self._enabled = enabled
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEventSubscriptionMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEventSubscriptionMessage of this CreateEventSubscriptionMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_name(self):
        """Gets the subscription_name of this CreateEventSubscriptionMessage.


        :return: The subscription_name of this CreateEventSubscriptionMessage.
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this CreateEventSubscriptionMessage.


        :param subscription_name: The subscription_name of this CreateEventSubscriptionMessage.
        :type subscription_name: str
        """
        if subscription_name is None:
            raise ValueError("Invalid value for `subscription_name`, must not be `None`")

        self._subscription_name = subscription_name

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this CreateEventSubscriptionMessage.


        :return: The sns_topic_arn of this CreateEventSubscriptionMessage.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this CreateEventSubscriptionMessage.


        :param sns_topic_arn: The sns_topic_arn of this CreateEventSubscriptionMessage.
        :type sns_topic_arn: str
        """
        if sns_topic_arn is None:
            raise ValueError("Invalid value for `sns_topic_arn`, must not be `None`")

        self._sns_topic_arn = sns_topic_arn

    @property
    def source_type(self):
        """Gets the source_type of this CreateEventSubscriptionMessage.


        :return: The source_type of this CreateEventSubscriptionMessage.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CreateEventSubscriptionMessage.


        :param source_type: The source_type of this CreateEventSubscriptionMessage.
        :type source_type: str
        """

        self._source_type = source_type

    @property
    def event_categories(self):
        """Gets the event_categories of this CreateEventSubscriptionMessage.


        :return: The event_categories of this CreateEventSubscriptionMessage.
        :rtype: List
        """
        return self._event_categories

    @event_categories.setter
    def event_categories(self, event_categories):
        """Sets the event_categories of this CreateEventSubscriptionMessage.


        :param event_categories: The event_categories of this CreateEventSubscriptionMessage.
        :type event_categories: List
        """

        self._event_categories = event_categories

    @property
    def source_ids(self):
        """Gets the source_ids of this CreateEventSubscriptionMessage.


        :return: The source_ids of this CreateEventSubscriptionMessage.
        :rtype: List
        """
        return self._source_ids

    @source_ids.setter
    def source_ids(self, source_ids):
        """Sets the source_ids of this CreateEventSubscriptionMessage.


        :param source_ids: The source_ids of this CreateEventSubscriptionMessage.
        :type source_ids: List
        """

        self._source_ids = source_ids

    @property
    def enabled(self):
        """Gets the enabled of this CreateEventSubscriptionMessage.


        :return: The enabled of this CreateEventSubscriptionMessage.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateEventSubscriptionMessage.


        :param enabled: The enabled of this CreateEventSubscriptionMessage.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def tags(self):
        """Gets the tags of this CreateEventSubscriptionMessage.


        :return: The tags of this CreateEventSubscriptionMessage.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateEventSubscriptionMessage.


        :param tags: The tags of this CreateEventSubscriptionMessage.
        :type tags: List
        """

        self._tags = tags
