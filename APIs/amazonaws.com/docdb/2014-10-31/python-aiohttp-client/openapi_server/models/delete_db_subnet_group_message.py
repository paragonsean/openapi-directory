# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteDBSubnetGroupMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_subnet_group_name: str=None):
        """DeleteDBSubnetGroupMessage - a model defined in OpenAPI

        :param db_subnet_group_name: The db_subnet_group_name of this DeleteDBSubnetGroupMessage.
        """
        self.openapi_types = {
            'db_subnet_group_name': str
        }

        self.attribute_map = {
            'db_subnet_group_name': 'DBSubnetGroupName'
        }

        self._db_subnet_group_name = db_subnet_group_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteDBSubnetGroupMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteDBSubnetGroupMessage of this DeleteDBSubnetGroupMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_subnet_group_name(self):
        """Gets the db_subnet_group_name of this DeleteDBSubnetGroupMessage.


        :return: The db_subnet_group_name of this DeleteDBSubnetGroupMessage.
        :rtype: str
        """
        return self._db_subnet_group_name

    @db_subnet_group_name.setter
    def db_subnet_group_name(self, db_subnet_group_name):
        """Sets the db_subnet_group_name of this DeleteDBSubnetGroupMessage.


        :param db_subnet_group_name: The db_subnet_group_name of this DeleteDBSubnetGroupMessage.
        :type db_subnet_group_name: str
        """
        if db_subnet_group_name is None:
            raise ValueError("Invalid value for `db_subnet_group_name`, must not be `None`")

        self._db_subnet_group_name = db_subnet_group_name
