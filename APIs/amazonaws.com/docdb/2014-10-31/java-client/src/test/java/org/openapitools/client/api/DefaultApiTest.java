/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddSourceIdentifierToSubscriptionMessage;
import org.openapitools.client.model.AddSourceIdentifierToSubscriptionResult;
import org.openapitools.client.model.AddTagsToResourceMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionResult;
import org.openapitools.client.model.CertificateMessage;
import org.openapitools.client.model.CopyDBClusterParameterGroupMessage;
import org.openapitools.client.model.CopyDBClusterParameterGroupResult;
import org.openapitools.client.model.CopyDBClusterSnapshotMessage;
import org.openapitools.client.model.CopyDBClusterSnapshotResult;
import org.openapitools.client.model.CreateDBClusterMessage;
import org.openapitools.client.model.CreateDBClusterParameterGroupMessage;
import org.openapitools.client.model.CreateDBClusterParameterGroupResult;
import org.openapitools.client.model.CreateDBClusterResult;
import org.openapitools.client.model.CreateDBClusterSnapshotMessage;
import org.openapitools.client.model.CreateDBClusterSnapshotResult;
import org.openapitools.client.model.CreateDBInstanceMessage;
import org.openapitools.client.model.CreateDBInstanceResult;
import org.openapitools.client.model.CreateDBSubnetGroupMessage;
import org.openapitools.client.model.CreateDBSubnetGroupResult;
import org.openapitools.client.model.CreateEventSubscriptionMessage;
import org.openapitools.client.model.CreateEventSubscriptionResult;
import org.openapitools.client.model.CreateGlobalClusterMessage;
import org.openapitools.client.model.CreateGlobalClusterResult;
import org.openapitools.client.model.DBClusterMessage;
import org.openapitools.client.model.DBClusterParameterGroupDetails;
import org.openapitools.client.model.DBClusterParameterGroupNameMessage;
import org.openapitools.client.model.DBClusterParameterGroupsMessage;
import org.openapitools.client.model.DBClusterSnapshotMessage;
import org.openapitools.client.model.DBEngineVersionMessage;
import org.openapitools.client.model.DBInstanceMessage;
import org.openapitools.client.model.DBSubnetGroupMessage;
import org.openapitools.client.model.DeleteDBClusterMessage;
import org.openapitools.client.model.DeleteDBClusterParameterGroupMessage;
import org.openapitools.client.model.DeleteDBClusterResult;
import org.openapitools.client.model.DeleteDBClusterSnapshotMessage;
import org.openapitools.client.model.DeleteDBClusterSnapshotResult;
import org.openapitools.client.model.DeleteDBInstanceMessage;
import org.openapitools.client.model.DeleteDBInstanceResult;
import org.openapitools.client.model.DeleteDBSubnetGroupMessage;
import org.openapitools.client.model.DeleteEventSubscriptionMessage;
import org.openapitools.client.model.DeleteEventSubscriptionResult;
import org.openapitools.client.model.DeleteGlobalClusterMessage;
import org.openapitools.client.model.DeleteGlobalClusterResult;
import org.openapitools.client.model.DescribeCertificatesMessage;
import org.openapitools.client.model.DescribeDBClusterParameterGroupsMessage;
import org.openapitools.client.model.DescribeDBClusterParametersMessage;
import org.openapitools.client.model.DescribeDBClusterSnapshotAttributesMessage;
import org.openapitools.client.model.DescribeDBClusterSnapshotAttributesResult;
import org.openapitools.client.model.DescribeDBClusterSnapshotsMessage;
import org.openapitools.client.model.DescribeDBClustersMessage;
import org.openapitools.client.model.DescribeDBEngineVersionsMessage;
import org.openapitools.client.model.DescribeDBInstancesMessage;
import org.openapitools.client.model.DescribeDBSubnetGroupsMessage;
import org.openapitools.client.model.DescribeEngineDefaultClusterParametersMessage;
import org.openapitools.client.model.DescribeEngineDefaultClusterParametersResult;
import org.openapitools.client.model.DescribeEventCategoriesMessage;
import org.openapitools.client.model.DescribeEventSubscriptionsMessage;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeGlobalClustersMessage;
import org.openapitools.client.model.DescribeOrderableDBInstanceOptionsMessage;
import org.openapitools.client.model.DescribePendingMaintenanceActionsMessage;
import org.openapitools.client.model.EventCategoriesMessage;
import org.openapitools.client.model.EventSubscriptionsMessage;
import org.openapitools.client.model.EventsMessage;
import org.openapitools.client.model.FailoverDBClusterMessage;
import org.openapitools.client.model.FailoverDBClusterResult;
import org.openapitools.client.model.GETAddTagsToResourceTagsParameterInner;
import org.openapitools.client.model.GETDescribeCertificatesFiltersParameterInner;
import org.openapitools.client.model.GETModifyDBClusterCloudwatchLogsExportConfigurationParameter;
import org.openapitools.client.model.GETModifyDBClusterParameterGroupParametersParameterInner;
import org.openapitools.client.model.GlobalClustersMessage;
import org.openapitools.client.model.ListTagsForResourceMessage;
import org.openapitools.client.model.ModifyDBClusterMessage;
import org.openapitools.client.model.ModifyDBClusterParameterGroupMessage;
import org.openapitools.client.model.ModifyDBClusterResult;
import org.openapitools.client.model.ModifyDBClusterSnapshotAttributeMessage;
import org.openapitools.client.model.ModifyDBClusterSnapshotAttributeResult;
import org.openapitools.client.model.ModifyDBInstanceMessage;
import org.openapitools.client.model.ModifyDBInstanceResult;
import org.openapitools.client.model.ModifyDBSubnetGroupMessage;
import org.openapitools.client.model.ModifyDBSubnetGroupResult;
import org.openapitools.client.model.ModifyEventSubscriptionMessage;
import org.openapitools.client.model.ModifyEventSubscriptionResult;
import org.openapitools.client.model.ModifyGlobalClusterMessage;
import org.openapitools.client.model.ModifyGlobalClusterResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderableDBInstanceOptionsMessage;
import org.openapitools.client.model.PendingMaintenanceActionsMessage;
import org.openapitools.client.model.RebootDBInstanceMessage;
import org.openapitools.client.model.RebootDBInstanceResult;
import org.openapitools.client.model.RemoveFromGlobalClusterMessage;
import org.openapitools.client.model.RemoveFromGlobalClusterResult;
import org.openapitools.client.model.RemoveSourceIdentifierFromSubscriptionMessage;
import org.openapitools.client.model.RemoveSourceIdentifierFromSubscriptionResult;
import org.openapitools.client.model.RemoveTagsFromResourceMessage;
import org.openapitools.client.model.ResetDBClusterParameterGroupMessage;
import org.openapitools.client.model.RestoreDBClusterFromSnapshotMessage;
import org.openapitools.client.model.RestoreDBClusterFromSnapshotResult;
import org.openapitools.client.model.RestoreDBClusterToPointInTimeMessage;
import org.openapitools.client.model.RestoreDBClusterToPointInTimeResult;
import org.openapitools.client.model.StartDBClusterMessage;
import org.openapitools.client.model.StartDBClusterResult;
import org.openapitools.client.model.StopDBClusterMessage;
import org.openapitools.client.model.StopDBClusterResult;
import org.openapitools.client.model.TagListMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds a source identifier to an existing event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddSourceIdentifierToSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String sourceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddSourceIdentifierToSubscriptionResult response = api.gETAddSourceIdentifierToSubscription(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a &lt;code&gt;Condition&lt;/code&gt; statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddTagsToResourceTest() throws ApiException {
        String resourceName = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETAddTagsToResource(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETApplyPendingMaintenanceActionTest() throws ApiException {
        String resourceIdentifier = null;
        String applyAction = null;
        String optInType = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ApplyPendingMaintenanceActionResult response = api.gETApplyPendingMaintenanceAction(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Copies the specified cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCopyDBClusterParameterGroupTest() throws ApiException {
        String sourceDBClusterParameterGroupIdentifier = null;
        String targetDBClusterParameterGroupIdentifier = null;
        String targetDBClusterParameterGroupDescription = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CopyDBClusterParameterGroupResult response = api.gETCopyDBClusterParameterGroup(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies a snapshot of a cluster.&lt;/p&gt; &lt;p&gt;To copy a cluster snapshot from a shared manual cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; while that cluster snapshot is in the &lt;i&gt;copying&lt;/i&gt; status.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCopyDBClusterSnapshotTest() throws ApiException {
        String sourceDBClusterSnapshotIdentifier = null;
        String targetDBClusterSnapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String kmsKeyId = null;
        String preSignedUrl = null;
        Boolean copyTags = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CopyDBClusterSnapshotResult response = api.gETCopyDBClusterSnapshot(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags);
        // TODO: test validations
    }

    /**
     * Creates a new Amazon DocumentDB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String engine = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> availabilityZones = null;
        Integer backupRetentionPeriod = null;
        String dbClusterParameterGroupName = null;
        List<String> vpcSecurityGroupIds = null;
        String dbSubnetGroupName = null;
        String engineVersion = null;
        Integer port = null;
        String masterUsername = null;
        String masterUserPassword = null;
        String preferredBackupWindow = null;
        String preferredMaintenanceWindow = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        Boolean storageEncrypted = null;
        String kmsKeyId = null;
        String preSignedUrl = null;
        List<String> enableCloudwatchLogsExports = null;
        Boolean deletionProtection = null;
        String globalClusterIdentifier = null;
        CreateDBClusterResult response = api.gETCreateDBCluster(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableCloudwatchLogsExports, deletionProtection, globalClusterIdentifier);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a cluster parameter group apply to all of the instances in a cluster.&lt;/p&gt; &lt;p&gt;A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the &lt;code&gt;default.docdb3.6&lt;/code&gt; cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\&quot;&gt; create a new parameter group&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\&quot;&gt; copy an existing parameter group&lt;/a&gt;, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\&quot;&gt; Modifying Amazon DocumentDB Cluster Parameter Groups&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBClusterParameterGroupTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        String dbParameterGroupFamily = null;
        String description = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateDBClusterParameterGroupResult response = api.gETCreateDBClusterParameterGroup(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * Creates a snapshot of a cluster. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBClusterSnapshotTest() throws ApiException {
        String dbClusterSnapshotIdentifier = null;
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateDBClusterSnapshotResult response = api.gETCreateDBClusterSnapshot(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * Creates a new instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBInstanceTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String dbInstanceClass = null;
        String engine = null;
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String availabilityZone = null;
        String preferredMaintenanceWindow = null;
        Boolean autoMinorVersionUpgrade = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        Boolean copyTagsToSnapshot = null;
        Integer promotionTier = null;
        Boolean enablePerformanceInsights = null;
        String performanceInsightsKMSKeyId = null;
        CreateDBInstanceResult response = api.gETCreateDBInstance(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZone, preferredMaintenanceWindow, autoMinorVersionUpgrade, tags, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId);
        // TODO: test validations
    }

    /**
     * Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateDBSubnetGroupTest() throws ApiException {
        String dbSubnetGroupName = null;
        String dbSubnetGroupDescription = null;
        List<String> subnetIds = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateDBSubnetGroupResult response = api.gETCreateDBSubnetGroup(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (&lt;code&gt;SourceIds&lt;/code&gt;) that trigger the events, and you can provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events that you want to be notified of. For example, you can specify &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt;, &lt;code&gt;SourceIds &#x3D; mydbinstance1, mydbinstance2&lt;/code&gt; and &lt;code&gt;EventCategories &#x3D; Availability, Backup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt; (such as &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; myDBInstance1&lt;/code&gt;), you are notified of all the &lt;code&gt;db-instance&lt;/code&gt; events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but do not specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the &lt;code&gt;SourceType&lt;/code&gt; or the &lt;code&gt;SourceIdentifier&lt;/code&gt;, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String snsTopicArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceType = null;
        List<String> eventCategories = null;
        List<String> sourceIds = null;
        Boolean enabled = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateEventSubscriptionResult response = api.gETCreateEventSubscription(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceDBClusterIdentifier = null;
        String engine = null;
        String engineVersion = null;
        Boolean deletionProtection = null;
        String databaseName = null;
        Boolean storageEncrypted = null;
        CreateGlobalClusterResult response = api.gETCreateGlobalCluster(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, databaseName, storageEncrypted);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.&lt;/p&gt; &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean skipFinalSnapshot = null;
        String finalDBSnapshotIdentifier = null;
        DeleteDBClusterResult response = api.gETDeleteDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier);
        // TODO: test validations
    }

    /**
     * Deletes a specified cluster parameter group. The cluster parameter group to be deleted can&#39;t be associated with any clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBClusterParameterGroupTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteDBClusterParameterGroup(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBClusterSnapshotTest() throws ApiException {
        String dbClusterSnapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterSnapshotResult response = api.gETDeleteDBClusterSnapshot(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a previously provisioned instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBInstanceTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBInstanceResult response = api.gETDeleteDBInstance(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteDBSubnetGroupTest() throws ApiException {
        String dbSubnetGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteDBSubnetGroup(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon DocumentDB event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEventSubscriptionResult response = api.gETDeleteEventSubscription(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGlobalClusterResult response = api.gETDeleteGlobalCluster(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeCertificatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String certificateIdentifier = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        CertificateMessage response = api.gETDescribeCertificates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, certificateIdentifier, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list contains only the description of the specified cluster parameter group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterParameterGroupName = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBClusterParameterGroupsMessage response = api.gETDescribeDBClusterParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterParametersTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String source = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBClusterParameterGroupDetails response = api.gETDescribeDBClusterParameters(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When you share snapshots with other Amazon Web Services accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterSnapshotAttributesTest() throws ApiException {
        String dbClusterSnapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDBClusterSnapshotAttributesResult response = api.gETDescribeDBClusterSnapshotAttributes(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about cluster snapshots. This API operation supports pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClusterSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterIdentifier = null;
        String dbClusterSnapshotIdentifier = null;
        String snapshotType = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        Boolean includeShared = null;
        Boolean includePublic = null;
        DBClusterSnapshotMessage response = api.gETDescribeDBClusterSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic);
        // TODO: test validations
    }

    /**
     * Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the &lt;code&gt;filterName&#x3D;engine,Values&#x3D;docdb&lt;/code&gt; filter parameter to return only Amazon DocumentDB clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterIdentifier = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBClusterMessage response = api.gETDescribeDBClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of the available engines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBEngineVersionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engine = null;
        String engineVersion = null;
        String dbParameterGroupFamily = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        Boolean defaultOnly = null;
        Boolean listSupportedCharacterSets = null;
        Boolean listSupportedTimezones = null;
        DBEngineVersionMessage response = api.gETDescribeDBEngineVersions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones);
        // TODO: test validations
    }

    /**
     * Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBInstancesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbInstanceIdentifier = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBInstanceMessage response = api.gETDescribeDBInstances(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DBSubnetGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBSubnetGroupName&lt;/code&gt; is specified, the list will contain only the descriptions of the specified &lt;code&gt;DBSubnetGroup&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDBSubnetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbSubnetGroupName = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DBSubnetGroupMessage response = api.gETDescribeDBSubnetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the default engine and system parameter information for the cluster database engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEngineDefaultClusterParametersTest() throws ApiException {
        String dbParameterGroupFamily = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeEngineDefaultClusterParametersResult response = api.gETDescribeEngineDefaultClusterParameters(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Displays a list of categories for all event source types, or, if specified, for a specified source type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventCategoriesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceType = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        EventCategoriesMessage response = api.gETDescribeEventCategories(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;SubscriptionName&lt;/code&gt;, lists the description for that subscription.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventSubscriptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String subscriptionName = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        EventSubscriptionsMessage response = api.gETDescribeEventSubscriptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceIdentifier = null;
        String sourceType = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer duration = null;
        List<String> eventCategories = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        EventsMessage response = api.gETDescribeEvents(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about Amazon DocumentDB global clusters. This API supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeGlobalClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String globalClusterIdentifier = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        GlobalClustersMessage response = api.gETDescribeGlobalClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of orderable instance options for the specified engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeOrderableDBInstanceOptionsTest() throws ApiException {
        String engine = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engineVersion = null;
        String dbInstanceClass = null;
        String licenseModel = null;
        Boolean vpc = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        Integer maxRecords = null;
        String marker = null;
        OrderableDBInstanceOptionsMessage response = api.gETDescribeOrderableDBInstanceOptions(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of resources (for example, instances) that have at least one pending maintenance action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribePendingMaintenanceActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String resourceIdentifier = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        String marker = null;
        Integer maxRecords = null;
        PendingMaintenanceActionsMessage response = api.gETDescribePendingMaintenanceActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Forces a failover for a cluster.&lt;/p&gt; &lt;p&gt;A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETFailoverDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbClusterIdentifier = null;
        String targetDBInstanceIdentifier = null;
        FailoverDBClusterResult response = api.gETFailoverDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier);
        // TODO: test validations
    }

    /**
     * Lists all tags on an Amazon DocumentDB resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListTagsForResourceTest() throws ApiException {
        String resourceName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETDescribeCertificatesFiltersParameterInner> filters = null;
        TagListMessage response = api.gETListTagsForResource(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters);
        // TODO: test validations
    }

    /**
     * Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String newDBClusterIdentifier = null;
        Boolean applyImmediately = null;
        Integer backupRetentionPeriod = null;
        String dbClusterParameterGroupName = null;
        List<String> vpcSecurityGroupIds = null;
        Integer port = null;
        String masterUserPassword = null;
        String preferredBackupWindow = null;
        String preferredMaintenanceWindow = null;
        GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration = null;
        String engineVersion = null;
        Boolean allowMajorVersionUpgrade = null;
        Boolean deletionProtection = null;
        ModifyDBClusterResult response = api.gETModifyDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, deletionProtection);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBClusterParameterGroupTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DBClusterParameterGroupNameMessage response = api.gETModifyDBClusterParameterGroup(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual cluster snapshot with other Amazon Web Services accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt;, and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBClusterSnapshotAttributeTest() throws ApiException {
        String dbClusterSnapshotIdentifier = null;
        String attributeName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> valuesToAdd = null;
        List<String> valuesToRemove = null;
        ModifyDBClusterSnapshotAttributeResult response = api.gETModifyDBClusterSnapshotAttribute(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove);
        // TODO: test validations
    }

    /**
     * Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBInstanceTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbInstanceClass = null;
        Boolean applyImmediately = null;
        String preferredMaintenanceWindow = null;
        Boolean autoMinorVersionUpgrade = null;
        String newDBInstanceIdentifier = null;
        String caCertificateIdentifier = null;
        Boolean copyTagsToSnapshot = null;
        Integer promotionTier = null;
        Boolean enablePerformanceInsights = null;
        String performanceInsightsKMSKeyId = null;
        ModifyDBInstanceResult response = api.gETModifyDBInstance(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceClass, applyImmediately, preferredMaintenanceWindow, autoMinorVersionUpgrade, newDBInstanceIdentifier, caCertificateIdentifier, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId);
        // TODO: test validations
    }

    /**
     * Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyDBSubnetGroupTest() throws ApiException {
        String dbSubnetGroupName = null;
        List<String> subnetIds = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbSubnetGroupDescription = null;
        ModifyDBSubnetGroupResult response = api.gETModifyDBSubnetGroup(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription);
        // TODO: test validations
    }

    /**
     * Modifies an existing Amazon DocumentDB event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snsTopicArn = null;
        String sourceType = null;
        List<String> eventCategories = null;
        Boolean enabled = null;
        ModifyEventSubscriptionResult response = api.gETModifyEventSubscription(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String newGlobalClusterIdentifier = null;
        Boolean deletionProtection = null;
        ModifyGlobalClusterResult response = api.gETModifyGlobalCluster(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. &lt;/p&gt; &lt;p&gt;Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to &lt;i&gt;rebooting&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRebootDBInstanceTest() throws ApiException {
        String dbInstanceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean forceFailover = null;
        RebootDBInstanceResult response = api.gETRebootDBInstance(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveFromGlobalClusterTest() throws ApiException {
        String globalClusterIdentifier = null;
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveFromGlobalClusterResult response = api.gETRemoveFromGlobalCluster(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveSourceIdentifierFromSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String sourceIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveSourceIdentifierFromSubscriptionResult response = api.gETRemoveSourceIdentifierFromSubscription(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes metadata tags from an Amazon DocumentDB resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveTagsFromResourceTest() throws ApiException {
        String resourceName = null;
        List<String> tagKeys = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETRemoveTagsFromResource(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. &lt;/p&gt; &lt;p&gt; When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance reboot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETResetDBClusterParameterGroupTest() throws ApiException {
        String dbClusterParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean resetAllParameters = null;
        List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters = null;
        DBClusterParameterGroupNameMessage response = api.gETResetDBClusterParameterGroup(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cluster from a snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRestoreDBClusterFromSnapshotTest() throws ApiException {
        String dbClusterIdentifier = null;
        String snapshotIdentifier = null;
        String engine = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> availabilityZones = null;
        String engineVersion = null;
        Integer port = null;
        String dbSubnetGroupName = null;
        List<String> vpcSecurityGroupIds = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        String kmsKeyId = null;
        List<String> enableCloudwatchLogsExports = null;
        Boolean deletionProtection = null;
        String dbClusterParameterGroupName = null;
        RestoreDBClusterFromSnapshotResult response = api.gETRestoreDBClusterFromSnapshot(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection, dbClusterParameterGroupName);
        // TODO: test validations
    }

    /**
     * Restores a cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRestoreDBClusterToPointInTimeTest() throws ApiException {
        String dbClusterIdentifier = null;
        String sourceDBClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String restoreType = null;
        OffsetDateTime restoreToTime = null;
        Boolean useLatestRestorableTime = null;
        Integer port = null;
        String dbSubnetGroupName = null;
        List<String> vpcSecurityGroupIds = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        String kmsKeyId = null;
        List<String> enableCloudwatchLogsExports = null;
        Boolean deletionProtection = null;
        RestoreDBClusterToPointInTimeResult response = api.gETRestoreDBClusterToPointInTime(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection);
        // TODO: test validations
    }

    /**
     * Restarts the stopped cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETStartDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDBClusterResult response = api.gETStartDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the running cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. The cluster must be in the &lt;i&gt;available&lt;/i&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETStopDBClusterTest() throws ApiException {
        String dbClusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopDBClusterResult response = api.gETStopDBCluster(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a source identifier to an existing event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddSourceIdentifierToSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage = null;
        AddSourceIdentifierToSubscriptionResult response = api.pOSTAddSourceIdentifierToSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a &lt;code&gt;Condition&lt;/code&gt; statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddTagsToResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddTagsToResourceMessage addTagsToResourceMessage = null;
        api.pOSTAddTagsToResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage);
        // TODO: test validations
    }

    /**
     * Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTApplyPendingMaintenanceActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage = null;
        ApplyPendingMaintenanceActionResult response = api.pOSTApplyPendingMaintenanceAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage);
        // TODO: test validations
    }

    /**
     * Copies the specified cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCopyDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage = null;
        CopyDBClusterParameterGroupResult response = api.pOSTCopyDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies a snapshot of a cluster.&lt;/p&gt; &lt;p&gt;To copy a cluster snapshot from a shared manual cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; while that cluster snapshot is in the &lt;i&gt;copying&lt;/i&gt; status.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCopyDBClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage = null;
        CopyDBClusterSnapshotResult response = api.pOSTCopyDBClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Creates a new Amazon DocumentDB cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBClusterMessage createDBClusterMessage = null;
        CreateDBClusterResult response = api.pOSTCreateDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a cluster parameter group apply to all of the instances in a cluster.&lt;/p&gt; &lt;p&gt;A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the &lt;code&gt;default.docdb3.6&lt;/code&gt; cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\&quot;&gt; create a new parameter group&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\&quot;&gt; copy an existing parameter group&lt;/a&gt;, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\&quot;&gt; Modifying Amazon DocumentDB Cluster Parameter Groups&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage = null;
        CreateDBClusterParameterGroupResult response = api.pOSTCreateDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * Creates a snapshot of a cluster. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage = null;
        CreateDBClusterSnapshotResult response = api.pOSTCreateDBClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Creates a new instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBInstanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBInstanceMessage createDBInstanceMessage = null;
        CreateDBInstanceResult response = api.pOSTCreateDBInstance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage);
        // TODO: test validations
    }

    /**
     * Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateDBSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDBSubnetGroupMessage createDBSubnetGroupMessage = null;
        CreateDBSubnetGroupResult response = api.pOSTCreateDBSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (&lt;code&gt;SourceIds&lt;/code&gt;) that trigger the events, and you can provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events that you want to be notified of. For example, you can specify &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt;, &lt;code&gt;SourceIds &#x3D; mydbinstance1, mydbinstance2&lt;/code&gt; and &lt;code&gt;EventCategories &#x3D; Availability, Backup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt; (such as &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; myDBInstance1&lt;/code&gt;), you are notified of all the &lt;code&gt;db-instance&lt;/code&gt; events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but do not specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the &lt;code&gt;SourceType&lt;/code&gt; or the &lt;code&gt;SourceIdentifier&lt;/code&gt;, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEventSubscriptionMessage createEventSubscriptionMessage = null;
        CreateEventSubscriptionResult response = api.pOSTCreateEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGlobalClusterMessage createGlobalClusterMessage = null;
        CreateGlobalClusterResult response = api.pOSTCreateGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.&lt;/p&gt; &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterMessage deleteDBClusterMessage = null;
        DeleteDBClusterResult response = api.pOSTDeleteDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage);
        // TODO: test validations
    }

    /**
     * Deletes a specified cluster parameter group. The cluster parameter group to be deleted can&#39;t be associated with any clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage = null;
        api.pOSTDeleteDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage = null;
        DeleteDBClusterSnapshotResult response = api.pOSTDeleteDBClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Deletes a previously provisioned instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBInstanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBInstanceMessage deleteDBInstanceMessage = null;
        DeleteDBInstanceResult response = api.pOSTDeleteDBInstance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteDBSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage = null;
        api.pOSTDeleteDBSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon DocumentDB event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEventSubscriptionMessage deleteEventSubscriptionMessage = null;
        DeleteEventSubscriptionResult response = api.pOSTDeleteEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGlobalClusterMessage deleteGlobalClusterMessage = null;
        DeleteGlobalClusterResult response = api.pOSTDeleteGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeCertificatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCertificatesMessage describeCertificatesMessage = null;
        CertificateMessage response = api.pOSTDescribeCertificates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCertificatesMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list contains only the description of the specified cluster parameter group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage = null;
        DBClusterParameterGroupsMessage response = api.pOSTDescribeDBClusterParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular cluster parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClusterParametersMessage describeDBClusterParametersMessage = null;
        DBClusterParameterGroupDetails response = api.pOSTDescribeDBClusterParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When you share snapshots with other Amazon Web Services accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterSnapshotAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage = null;
        DescribeDBClusterSnapshotAttributesResult response = api.pOSTDescribeDBClusterSnapshotAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage);
        // TODO: test validations
    }

    /**
     * Returns information about cluster snapshots. This API operation supports pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClusterSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage = null;
        DBClusterSnapshotMessage response = api.pOSTDescribeDBClusterSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage);
        // TODO: test validations
    }

    /**
     * Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the &lt;code&gt;filterName&#x3D;engine,Values&#x3D;docdb&lt;/code&gt; filter parameter to return only Amazon DocumentDB clusters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBClustersMessage describeDBClustersMessage = null;
        DBClusterMessage response = api.pOSTDescribeDBClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of the available engines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBEngineVersionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage = null;
        DBEngineVersionMessage response = api.pOSTDescribeDBEngineVersions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage);
        // TODO: test validations
    }

    /**
     * Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBInstancesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBInstancesMessage describeDBInstancesMessage = null;
        DBInstanceMessage response = api.pOSTDescribeDBInstances(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of &lt;code&gt;DBSubnetGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBSubnetGroupName&lt;/code&gt; is specified, the list will contain only the descriptions of the specified &lt;code&gt;DBSubnetGroup&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDBSubnetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage = null;
        DBSubnetGroupMessage response = api.pOSTDescribeDBSubnetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns the default engine and system parameter information for the cluster database engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEngineDefaultClusterParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage = null;
        DescribeEngineDefaultClusterParametersResult response = api.pOSTDescribeEngineDefaultClusterParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage);
        // TODO: test validations
    }

    /**
     * Displays a list of categories for all event source types, or, if specified, for a specified source type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventCategoriesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEventCategoriesMessage describeEventCategoriesMessage = null;
        EventCategoriesMessage response = api.pOSTDescribeEventCategories(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;SubscriptionName&lt;/code&gt;, lists the description for that subscription.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventSubscriptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage = null;
        EventSubscriptionsMessage response = api.pOSTDescribeEventSubscriptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage);
        // TODO: test validations
    }

    /**
     * Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventsMessage describeEventsMessage = null;
        EventsMessage response = api.pOSTDescribeEvents(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about Amazon DocumentDB global clusters. This API supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeGlobalClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeGlobalClustersMessage describeGlobalClustersMessage = null;
        GlobalClustersMessage response = api.pOSTDescribeGlobalClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of orderable instance options for the specified engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeOrderableDBInstanceOptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage = null;
        OrderableDBInstanceOptionsMessage response = api.pOSTDescribeOrderableDBInstanceOptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of resources (for example, instances) that have at least one pending maintenance action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribePendingMaintenanceActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage = null;
        PendingMaintenanceActionsMessage response = api.pOSTDescribePendingMaintenanceActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Forces a failover for a cluster.&lt;/p&gt; &lt;p&gt;A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTFailoverDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        FailoverDBClusterMessage failoverDBClusterMessage = null;
        FailoverDBClusterResult response = api.pOSTFailoverDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage);
        // TODO: test validations
    }

    /**
     * Lists all tags on an Amazon DocumentDB resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListTagsForResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceMessage listTagsForResourceMessage = null;
        TagListMessage response = api.pOSTListTagsForResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage);
        // TODO: test validations
    }

    /**
     * Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBClusterMessage modifyDBClusterMessage = null;
        ModifyDBClusterResult response = api.pOSTModifyDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage = null;
        DBClusterParameterGroupNameMessage response = api.pOSTModifyDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual cluster snapshot with other Amazon Web Services accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt;, and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBClusterSnapshotAttributeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage = null;
        ModifyDBClusterSnapshotAttributeResult response = api.pOSTModifyDBClusterSnapshotAttribute(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage);
        // TODO: test validations
    }

    /**
     * Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBInstanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBInstanceMessage modifyDBInstanceMessage = null;
        ModifyDBInstanceResult response = api.pOSTModifyDBInstance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage);
        // TODO: test validations
    }

    /**
     * Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyDBSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage = null;
        ModifyDBSubnetGroupResult response = api.pOSTModifyDBSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * Modifies an existing Amazon DocumentDB event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyEventSubscriptionMessage modifyEventSubscriptionMessage = null;
        ModifyEventSubscriptionResult response = api.pOSTModifyEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyGlobalClusterMessage modifyGlobalClusterMessage = null;
        ModifyGlobalClusterResult response = api.pOSTModifyGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. &lt;/p&gt; &lt;p&gt;Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to &lt;i&gt;rebooting&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRebootDBInstanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootDBInstanceMessage rebootDBInstanceMessage = null;
        RebootDBInstanceResult response = api.pOSTRebootDBInstance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveFromGlobalClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage = null;
        RemoveFromGlobalClusterResult response = api.pOSTRemoveFromGlobalCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage);
        // TODO: test validations
    }

    /**
     * Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveSourceIdentifierFromSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage = null;
        RemoveSourceIdentifierFromSubscriptionResult response = api.pOSTRemoveSourceIdentifierFromSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * Removes metadata tags from an Amazon DocumentDB resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveTagsFromResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveTagsFromResourceMessage removeTagsFromResourceMessage = null;
        api.pOSTRemoveTagsFromResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. &lt;/p&gt; &lt;p&gt; When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance reboot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTResetDBClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage = null;
        DBClusterParameterGroupNameMessage response = api.pOSTResetDBClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cluster from a snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRestoreDBClusterFromSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage = null;
        RestoreDBClusterFromSnapshotResult response = api.pOSTRestoreDBClusterFromSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Restores a cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRestoreDBClusterToPointInTimeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage = null;
        RestoreDBClusterToPointInTimeResult response = api.pOSTRestoreDBClusterToPointInTime(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage);
        // TODO: test validations
    }

    /**
     * Restarts the stopped cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTStartDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDBClusterMessage startDBClusterMessage = null;
        StartDBClusterResult response = api.pOSTStartDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage);
        // TODO: test validations
    }

    /**
     * Stops the running cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. The cluster must be in the &lt;i&gt;available&lt;/i&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTStopDBClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopDBClusterMessage stopDBClusterMessage = null;
        StopDBClusterResult response = api.pOSTStopDBCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage);
        // TODO: test validations
    }

}
