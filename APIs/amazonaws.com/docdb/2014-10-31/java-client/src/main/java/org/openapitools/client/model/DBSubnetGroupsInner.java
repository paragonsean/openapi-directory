/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DBSubnetGroupsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DBSubnetGroupsInner {
  public static final String SERIALIZED_NAME_DB_SUBNET_GROUP_NAME = "DBSubnetGroupName";
  @SerializedName(SERIALIZED_NAME_DB_SUBNET_GROUP_NAME)
  private String dbSubnetGroupName;

  public static final String SERIALIZED_NAME_DB_SUBNET_GROUP_DESCRIPTION = "DBSubnetGroupDescription";
  @SerializedName(SERIALIZED_NAME_DB_SUBNET_GROUP_DESCRIPTION)
  private String dbSubnetGroupDescription;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_SUBNET_GROUP_STATUS = "SubnetGroupStatus";
  @SerializedName(SERIALIZED_NAME_SUBNET_GROUP_STATUS)
  private String subnetGroupStatus;

  public static final String SERIALIZED_NAME_SUBNETS = "Subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List subnets;

  public static final String SERIALIZED_NAME_DB_SUBNET_GROUP_ARN = "DBSubnetGroupArn";
  @SerializedName(SERIALIZED_NAME_DB_SUBNET_GROUP_ARN)
  private String dbSubnetGroupArn;

  public DBSubnetGroupsInner() {
  }

  public DBSubnetGroupsInner dbSubnetGroupName(String dbSubnetGroupName) {
    this.dbSubnetGroupName = dbSubnetGroupName;
    return this;
  }

  /**
   * Get dbSubnetGroupName
   * @return dbSubnetGroupName
   */
  @javax.annotation.Nullable
  public String getDbSubnetGroupName() {
    return dbSubnetGroupName;
  }

  public void setDbSubnetGroupName(String dbSubnetGroupName) {
    this.dbSubnetGroupName = dbSubnetGroupName;
  }


  public DBSubnetGroupsInner dbSubnetGroupDescription(String dbSubnetGroupDescription) {
    this.dbSubnetGroupDescription = dbSubnetGroupDescription;
    return this;
  }

  /**
   * Get dbSubnetGroupDescription
   * @return dbSubnetGroupDescription
   */
  @javax.annotation.Nullable
  public String getDbSubnetGroupDescription() {
    return dbSubnetGroupDescription;
  }

  public void setDbSubnetGroupDescription(String dbSubnetGroupDescription) {
    this.dbSubnetGroupDescription = dbSubnetGroupDescription;
  }


  public DBSubnetGroupsInner vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public DBSubnetGroupsInner subnetGroupStatus(String subnetGroupStatus) {
    this.subnetGroupStatus = subnetGroupStatus;
    return this;
  }

  /**
   * Get subnetGroupStatus
   * @return subnetGroupStatus
   */
  @javax.annotation.Nullable
  public String getSubnetGroupStatus() {
    return subnetGroupStatus;
  }

  public void setSubnetGroupStatus(String subnetGroupStatus) {
    this.subnetGroupStatus = subnetGroupStatus;
  }


  public DBSubnetGroupsInner subnets(List subnets) {
    this.subnets = subnets;
    return this;
  }

  /**
   * Get subnets
   * @return subnets
   */
  @javax.annotation.Nullable
  public List getSubnets() {
    return subnets;
  }

  public void setSubnets(List subnets) {
    this.subnets = subnets;
  }


  public DBSubnetGroupsInner dbSubnetGroupArn(String dbSubnetGroupArn) {
    this.dbSubnetGroupArn = dbSubnetGroupArn;
    return this;
  }

  /**
   * Get dbSubnetGroupArn
   * @return dbSubnetGroupArn
   */
  @javax.annotation.Nullable
  public String getDbSubnetGroupArn() {
    return dbSubnetGroupArn;
  }

  public void setDbSubnetGroupArn(String dbSubnetGroupArn) {
    this.dbSubnetGroupArn = dbSubnetGroupArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBSubnetGroupsInner dbSubnetGroupsInner = (DBSubnetGroupsInner) o;
    return Objects.equals(this.dbSubnetGroupName, dbSubnetGroupsInner.dbSubnetGroupName) &&
        Objects.equals(this.dbSubnetGroupDescription, dbSubnetGroupsInner.dbSubnetGroupDescription) &&
        Objects.equals(this.vpcId, dbSubnetGroupsInner.vpcId) &&
        Objects.equals(this.subnetGroupStatus, dbSubnetGroupsInner.subnetGroupStatus) &&
        Objects.equals(this.subnets, dbSubnetGroupsInner.subnets) &&
        Objects.equals(this.dbSubnetGroupArn, dbSubnetGroupsInner.dbSubnetGroupArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbSubnetGroupName, dbSubnetGroupDescription, vpcId, subnetGroupStatus, subnets, dbSubnetGroupArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBSubnetGroupsInner {\n");
    sb.append("    dbSubnetGroupName: ").append(toIndentedString(dbSubnetGroupName)).append("\n");
    sb.append("    dbSubnetGroupDescription: ").append(toIndentedString(dbSubnetGroupDescription)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    subnetGroupStatus: ").append(toIndentedString(subnetGroupStatus)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    dbSubnetGroupArn: ").append(toIndentedString(dbSubnetGroupArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DBSubnetGroupName");
    openapiFields.add("DBSubnetGroupDescription");
    openapiFields.add("VpcId");
    openapiFields.add("SubnetGroupStatus");
    openapiFields.add("Subnets");
    openapiFields.add("DBSubnetGroupArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DBSubnetGroupsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DBSubnetGroupsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DBSubnetGroupsInner is not found in the empty JSON string", DBSubnetGroupsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DBSubnetGroupsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DBSubnetGroupsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DBSubnetGroupName`
      if (jsonObj.get("DBSubnetGroupName") != null && !jsonObj.get("DBSubnetGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBSubnetGroupName"));
      }
      // validate the optional field `DBSubnetGroupDescription`
      if (jsonObj.get("DBSubnetGroupDescription") != null && !jsonObj.get("DBSubnetGroupDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBSubnetGroupDescription"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `SubnetGroupStatus`
      if (jsonObj.get("SubnetGroupStatus") != null && !jsonObj.get("SubnetGroupStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetGroupStatus"));
      }
      // validate the optional field `Subnets`
      if (jsonObj.get("Subnets") != null && !jsonObj.get("Subnets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Subnets"));
      }
      // validate the optional field `DBSubnetGroupArn`
      if (jsonObj.get("DBSubnetGroupArn") != null && !jsonObj.get("DBSubnetGroupArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBSubnetGroupArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DBSubnetGroupsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DBSubnetGroupsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DBSubnetGroupsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DBSubnetGroupsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DBSubnetGroupsInner>() {
           @Override
           public void write(JsonWriter out, DBSubnetGroupsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DBSubnetGroupsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DBSubnetGroupsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DBSubnetGroupsInner
   * @throws IOException if the JSON string is invalid with respect to DBSubnetGroupsInner
   */
  public static DBSubnetGroupsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DBSubnetGroupsInner.class);
  }

  /**
   * Convert an instance of DBSubnetGroupsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

