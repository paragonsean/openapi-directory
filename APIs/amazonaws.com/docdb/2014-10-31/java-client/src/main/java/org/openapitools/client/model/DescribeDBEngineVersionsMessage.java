/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input to &lt;a&gt;DescribeDBEngineVersions&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDBEngineVersionsMessage {
  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_DB_PARAMETER_GROUP_FAMILY = "DBParameterGroupFamily";
  @SerializedName(SERIALIZED_NAME_DB_PARAMETER_GROUP_FAMILY)
  private String dbParameterGroupFamily;

  public static final String SERIALIZED_NAME_FILTERS = "Filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List filters;

  public static final String SERIALIZED_NAME_MAX_RECORDS = "MaxRecords";
  @SerializedName(SERIALIZED_NAME_MAX_RECORDS)
  private Integer maxRecords;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  private String marker;

  public static final String SERIALIZED_NAME_DEFAULT_ONLY = "DefaultOnly";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ONLY)
  private Boolean defaultOnly;

  public static final String SERIALIZED_NAME_LIST_SUPPORTED_CHARACTER_SETS = "ListSupportedCharacterSets";
  @SerializedName(SERIALIZED_NAME_LIST_SUPPORTED_CHARACTER_SETS)
  private Boolean listSupportedCharacterSets;

  public static final String SERIALIZED_NAME_LIST_SUPPORTED_TIMEZONES = "ListSupportedTimezones";
  @SerializedName(SERIALIZED_NAME_LIST_SUPPORTED_TIMEZONES)
  private Boolean listSupportedTimezones;

  public DescribeDBEngineVersionsMessage() {
  }

  public DescribeDBEngineVersionsMessage engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public DescribeDBEngineVersionsMessage engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public DescribeDBEngineVersionsMessage dbParameterGroupFamily(String dbParameterGroupFamily) {
    this.dbParameterGroupFamily = dbParameterGroupFamily;
    return this;
  }

  /**
   * Get dbParameterGroupFamily
   * @return dbParameterGroupFamily
   */
  @javax.annotation.Nullable
  public String getDbParameterGroupFamily() {
    return dbParameterGroupFamily;
  }

  public void setDbParameterGroupFamily(String dbParameterGroupFamily) {
    this.dbParameterGroupFamily = dbParameterGroupFamily;
  }


  public DescribeDBEngineVersionsMessage filters(List filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List getFilters() {
    return filters;
  }

  public void setFilters(List filters) {
    this.filters = filters;
  }


  public DescribeDBEngineVersionsMessage maxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
    return this;
  }

  /**
   * Get maxRecords
   * @return maxRecords
   */
  @javax.annotation.Nullable
  public Integer getMaxRecords() {
    return maxRecords;
  }

  public void setMaxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
  }


  public DescribeDBEngineVersionsMessage marker(String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Get marker
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(String marker) {
    this.marker = marker;
  }


  public DescribeDBEngineVersionsMessage defaultOnly(Boolean defaultOnly) {
    this.defaultOnly = defaultOnly;
    return this;
  }

  /**
   * Get defaultOnly
   * @return defaultOnly
   */
  @javax.annotation.Nullable
  public Boolean getDefaultOnly() {
    return defaultOnly;
  }

  public void setDefaultOnly(Boolean defaultOnly) {
    this.defaultOnly = defaultOnly;
  }


  public DescribeDBEngineVersionsMessage listSupportedCharacterSets(Boolean listSupportedCharacterSets) {
    this.listSupportedCharacterSets = listSupportedCharacterSets;
    return this;
  }

  /**
   * Get listSupportedCharacterSets
   * @return listSupportedCharacterSets
   */
  @javax.annotation.Nullable
  public Boolean getListSupportedCharacterSets() {
    return listSupportedCharacterSets;
  }

  public void setListSupportedCharacterSets(Boolean listSupportedCharacterSets) {
    this.listSupportedCharacterSets = listSupportedCharacterSets;
  }


  public DescribeDBEngineVersionsMessage listSupportedTimezones(Boolean listSupportedTimezones) {
    this.listSupportedTimezones = listSupportedTimezones;
    return this;
  }

  /**
   * Get listSupportedTimezones
   * @return listSupportedTimezones
   */
  @javax.annotation.Nullable
  public Boolean getListSupportedTimezones() {
    return listSupportedTimezones;
  }

  public void setListSupportedTimezones(Boolean listSupportedTimezones) {
    this.listSupportedTimezones = listSupportedTimezones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage = (DescribeDBEngineVersionsMessage) o;
    return Objects.equals(this.engine, describeDBEngineVersionsMessage.engine) &&
        Objects.equals(this.engineVersion, describeDBEngineVersionsMessage.engineVersion) &&
        Objects.equals(this.dbParameterGroupFamily, describeDBEngineVersionsMessage.dbParameterGroupFamily) &&
        Objects.equals(this.filters, describeDBEngineVersionsMessage.filters) &&
        Objects.equals(this.maxRecords, describeDBEngineVersionsMessage.maxRecords) &&
        Objects.equals(this.marker, describeDBEngineVersionsMessage.marker) &&
        Objects.equals(this.defaultOnly, describeDBEngineVersionsMessage.defaultOnly) &&
        Objects.equals(this.listSupportedCharacterSets, describeDBEngineVersionsMessage.listSupportedCharacterSets) &&
        Objects.equals(this.listSupportedTimezones, describeDBEngineVersionsMessage.listSupportedTimezones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDBEngineVersionsMessage {\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    dbParameterGroupFamily: ").append(toIndentedString(dbParameterGroupFamily)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    maxRecords: ").append(toIndentedString(maxRecords)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    defaultOnly: ").append(toIndentedString(defaultOnly)).append("\n");
    sb.append("    listSupportedCharacterSets: ").append(toIndentedString(listSupportedCharacterSets)).append("\n");
    sb.append("    listSupportedTimezones: ").append(toIndentedString(listSupportedTimezones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Engine");
    openapiFields.add("EngineVersion");
    openapiFields.add("DBParameterGroupFamily");
    openapiFields.add("Filters");
    openapiFields.add("MaxRecords");
    openapiFields.add("Marker");
    openapiFields.add("DefaultOnly");
    openapiFields.add("ListSupportedCharacterSets");
    openapiFields.add("ListSupportedTimezones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDBEngineVersionsMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDBEngineVersionsMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDBEngineVersionsMessage is not found in the empty JSON string", DescribeDBEngineVersionsMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDBEngineVersionsMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDBEngineVersionsMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `DBParameterGroupFamily`
      if (jsonObj.get("DBParameterGroupFamily") != null && !jsonObj.get("DBParameterGroupFamily").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBParameterGroupFamily"));
      }
      // validate the optional field `Filters`
      if (jsonObj.get("Filters") != null && !jsonObj.get("Filters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Filters"));
      }
      // validate the optional field `MaxRecords`
      if (jsonObj.get("MaxRecords") != null && !jsonObj.get("MaxRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRecords"));
      }
      // validate the optional field `Marker`
      if (jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Marker"));
      }
      // validate the optional field `DefaultOnly`
      if (jsonObj.get("DefaultOnly") != null && !jsonObj.get("DefaultOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DefaultOnly"));
      }
      // validate the optional field `ListSupportedCharacterSets`
      if (jsonObj.get("ListSupportedCharacterSets") != null && !jsonObj.get("ListSupportedCharacterSets").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ListSupportedCharacterSets"));
      }
      // validate the optional field `ListSupportedTimezones`
      if (jsonObj.get("ListSupportedTimezones") != null && !jsonObj.get("ListSupportedTimezones").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ListSupportedTimezones"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDBEngineVersionsMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDBEngineVersionsMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDBEngineVersionsMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDBEngineVersionsMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDBEngineVersionsMessage>() {
           @Override
           public void write(JsonWriter out, DescribeDBEngineVersionsMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDBEngineVersionsMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDBEngineVersionsMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDBEngineVersionsMessage
   * @throws IOException if the JSON string is invalid with respect to DescribeDBEngineVersionsMessage
   */
  public static DescribeDBEngineVersionsMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDBEngineVersionsMessage.class);
  }

  /**
   * Convert an instance of DescribeDBEngineVersionsMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

