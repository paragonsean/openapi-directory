/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DBEngineVersionListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DBEngineVersionListInner {
  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_DB_PARAMETER_GROUP_FAMILY = "DBParameterGroupFamily";
  @SerializedName(SERIALIZED_NAME_DB_PARAMETER_GROUP_FAMILY)
  private String dbParameterGroupFamily;

  public static final String SERIALIZED_NAME_DB_ENGINE_DESCRIPTION = "DBEngineDescription";
  @SerializedName(SERIALIZED_NAME_DB_ENGINE_DESCRIPTION)
  private String dbEngineDescription;

  public static final String SERIALIZED_NAME_DB_ENGINE_VERSION_DESCRIPTION = "DBEngineVersionDescription";
  @SerializedName(SERIALIZED_NAME_DB_ENGINE_VERSION_DESCRIPTION)
  private String dbEngineVersionDescription;

  public static final String SERIALIZED_NAME_VALID_UPGRADE_TARGET = "ValidUpgradeTarget";
  @SerializedName(SERIALIZED_NAME_VALID_UPGRADE_TARGET)
  private List validUpgradeTarget;

  public static final String SERIALIZED_NAME_EXPORTABLE_LOG_TYPES = "ExportableLogTypes";
  @SerializedName(SERIALIZED_NAME_EXPORTABLE_LOG_TYPES)
  private List exportableLogTypes;

  public static final String SERIALIZED_NAME_SUPPORTS_LOG_EXPORTS_TO_CLOUDWATCH_LOGS = "SupportsLogExportsToCloudwatchLogs";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_LOG_EXPORTS_TO_CLOUDWATCH_LOGS)
  private Boolean supportsLogExportsToCloudwatchLogs;

  public DBEngineVersionListInner() {
  }

  public DBEngineVersionListInner engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public DBEngineVersionListInner engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public DBEngineVersionListInner dbParameterGroupFamily(String dbParameterGroupFamily) {
    this.dbParameterGroupFamily = dbParameterGroupFamily;
    return this;
  }

  /**
   * Get dbParameterGroupFamily
   * @return dbParameterGroupFamily
   */
  @javax.annotation.Nullable
  public String getDbParameterGroupFamily() {
    return dbParameterGroupFamily;
  }

  public void setDbParameterGroupFamily(String dbParameterGroupFamily) {
    this.dbParameterGroupFamily = dbParameterGroupFamily;
  }


  public DBEngineVersionListInner dbEngineDescription(String dbEngineDescription) {
    this.dbEngineDescription = dbEngineDescription;
    return this;
  }

  /**
   * Get dbEngineDescription
   * @return dbEngineDescription
   */
  @javax.annotation.Nullable
  public String getDbEngineDescription() {
    return dbEngineDescription;
  }

  public void setDbEngineDescription(String dbEngineDescription) {
    this.dbEngineDescription = dbEngineDescription;
  }


  public DBEngineVersionListInner dbEngineVersionDescription(String dbEngineVersionDescription) {
    this.dbEngineVersionDescription = dbEngineVersionDescription;
    return this;
  }

  /**
   * Get dbEngineVersionDescription
   * @return dbEngineVersionDescription
   */
  @javax.annotation.Nullable
  public String getDbEngineVersionDescription() {
    return dbEngineVersionDescription;
  }

  public void setDbEngineVersionDescription(String dbEngineVersionDescription) {
    this.dbEngineVersionDescription = dbEngineVersionDescription;
  }


  public DBEngineVersionListInner validUpgradeTarget(List validUpgradeTarget) {
    this.validUpgradeTarget = validUpgradeTarget;
    return this;
  }

  /**
   * Get validUpgradeTarget
   * @return validUpgradeTarget
   */
  @javax.annotation.Nullable
  public List getValidUpgradeTarget() {
    return validUpgradeTarget;
  }

  public void setValidUpgradeTarget(List validUpgradeTarget) {
    this.validUpgradeTarget = validUpgradeTarget;
  }


  public DBEngineVersionListInner exportableLogTypes(List exportableLogTypes) {
    this.exportableLogTypes = exportableLogTypes;
    return this;
  }

  /**
   * Get exportableLogTypes
   * @return exportableLogTypes
   */
  @javax.annotation.Nullable
  public List getExportableLogTypes() {
    return exportableLogTypes;
  }

  public void setExportableLogTypes(List exportableLogTypes) {
    this.exportableLogTypes = exportableLogTypes;
  }


  public DBEngineVersionListInner supportsLogExportsToCloudwatchLogs(Boolean supportsLogExportsToCloudwatchLogs) {
    this.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs;
    return this;
  }

  /**
   * Get supportsLogExportsToCloudwatchLogs
   * @return supportsLogExportsToCloudwatchLogs
   */
  @javax.annotation.Nullable
  public Boolean getSupportsLogExportsToCloudwatchLogs() {
    return supportsLogExportsToCloudwatchLogs;
  }

  public void setSupportsLogExportsToCloudwatchLogs(Boolean supportsLogExportsToCloudwatchLogs) {
    this.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBEngineVersionListInner dbEngineVersionListInner = (DBEngineVersionListInner) o;
    return Objects.equals(this.engine, dbEngineVersionListInner.engine) &&
        Objects.equals(this.engineVersion, dbEngineVersionListInner.engineVersion) &&
        Objects.equals(this.dbParameterGroupFamily, dbEngineVersionListInner.dbParameterGroupFamily) &&
        Objects.equals(this.dbEngineDescription, dbEngineVersionListInner.dbEngineDescription) &&
        Objects.equals(this.dbEngineVersionDescription, dbEngineVersionListInner.dbEngineVersionDescription) &&
        Objects.equals(this.validUpgradeTarget, dbEngineVersionListInner.validUpgradeTarget) &&
        Objects.equals(this.exportableLogTypes, dbEngineVersionListInner.exportableLogTypes) &&
        Objects.equals(this.supportsLogExportsToCloudwatchLogs, dbEngineVersionListInner.supportsLogExportsToCloudwatchLogs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engine, engineVersion, dbParameterGroupFamily, dbEngineDescription, dbEngineVersionDescription, validUpgradeTarget, exportableLogTypes, supportsLogExportsToCloudwatchLogs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBEngineVersionListInner {\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    dbParameterGroupFamily: ").append(toIndentedString(dbParameterGroupFamily)).append("\n");
    sb.append("    dbEngineDescription: ").append(toIndentedString(dbEngineDescription)).append("\n");
    sb.append("    dbEngineVersionDescription: ").append(toIndentedString(dbEngineVersionDescription)).append("\n");
    sb.append("    validUpgradeTarget: ").append(toIndentedString(validUpgradeTarget)).append("\n");
    sb.append("    exportableLogTypes: ").append(toIndentedString(exportableLogTypes)).append("\n");
    sb.append("    supportsLogExportsToCloudwatchLogs: ").append(toIndentedString(supportsLogExportsToCloudwatchLogs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Engine");
    openapiFields.add("EngineVersion");
    openapiFields.add("DBParameterGroupFamily");
    openapiFields.add("DBEngineDescription");
    openapiFields.add("DBEngineVersionDescription");
    openapiFields.add("ValidUpgradeTarget");
    openapiFields.add("ExportableLogTypes");
    openapiFields.add("SupportsLogExportsToCloudwatchLogs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DBEngineVersionListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DBEngineVersionListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DBEngineVersionListInner is not found in the empty JSON string", DBEngineVersionListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DBEngineVersionListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DBEngineVersionListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `DBParameterGroupFamily`
      if (jsonObj.get("DBParameterGroupFamily") != null && !jsonObj.get("DBParameterGroupFamily").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBParameterGroupFamily"));
      }
      // validate the optional field `DBEngineDescription`
      if (jsonObj.get("DBEngineDescription") != null && !jsonObj.get("DBEngineDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBEngineDescription"));
      }
      // validate the optional field `DBEngineVersionDescription`
      if (jsonObj.get("DBEngineVersionDescription") != null && !jsonObj.get("DBEngineVersionDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBEngineVersionDescription"));
      }
      // validate the optional field `ValidUpgradeTarget`
      if (jsonObj.get("ValidUpgradeTarget") != null && !jsonObj.get("ValidUpgradeTarget").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ValidUpgradeTarget"));
      }
      // validate the optional field `ExportableLogTypes`
      if (jsonObj.get("ExportableLogTypes") != null && !jsonObj.get("ExportableLogTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExportableLogTypes"));
      }
      // validate the optional field `SupportsLogExportsToCloudwatchLogs`
      if (jsonObj.get("SupportsLogExportsToCloudwatchLogs") != null && !jsonObj.get("SupportsLogExportsToCloudwatchLogs").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SupportsLogExportsToCloudwatchLogs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DBEngineVersionListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DBEngineVersionListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DBEngineVersionListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DBEngineVersionListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DBEngineVersionListInner>() {
           @Override
           public void write(JsonWriter out, DBEngineVersionListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DBEngineVersionListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DBEngineVersionListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DBEngineVersionListInner
   * @throws IOException if the JSON string is invalid with respect to DBEngineVersionListInner
   */
  public static DBEngineVersionListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DBEngineVersionListInner.class);
  }

  /**
   * Convert an instance of DBEngineVersionListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

