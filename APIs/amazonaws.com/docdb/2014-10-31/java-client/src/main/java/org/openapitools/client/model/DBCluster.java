/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed information about a cluster. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DBCluster {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONES = "AvailabilityZones";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONES)
  private List availabilityZones;

  public static final String SERIALIZED_NAME_BACKUP_RETENTION_PERIOD = "BackupRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION_PERIOD)
  private Integer backupRetentionPeriod;

  public static final String SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER = "DBClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER)
  private String dbClusterIdentifier;

  public static final String SERIALIZED_NAME_DB_CLUSTER_PARAMETER_GROUP = "DBClusterParameterGroup";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_PARAMETER_GROUP)
  private String dbClusterParameterGroup;

  public static final String SERIALIZED_NAME_DB_SUBNET_GROUP = "DBSubnetGroup";
  @SerializedName(SERIALIZED_NAME_DB_SUBNET_GROUP)
  private String dbSubnetGroup;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PERCENT_PROGRESS = "PercentProgress";
  @SerializedName(SERIALIZED_NAME_PERCENT_PROGRESS)
  private String percentProgress;

  public static final String SERIALIZED_NAME_EARLIEST_RESTORABLE_TIME = "EarliestRestorableTime";
  @SerializedName(SERIALIZED_NAME_EARLIEST_RESTORABLE_TIME)
  private OffsetDateTime earliestRestorableTime;

  public static final String SERIALIZED_NAME_ENDPOINT = "Endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_READER_ENDPOINT = "ReaderEndpoint";
  @SerializedName(SERIALIZED_NAME_READER_ENDPOINT)
  private String readerEndpoint;

  public static final String SERIALIZED_NAME_MULTI_A_Z = "MultiAZ";
  @SerializedName(SERIALIZED_NAME_MULTI_A_Z)
  private Boolean multiAZ;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_LATEST_RESTORABLE_TIME = "LatestRestorableTime";
  @SerializedName(SERIALIZED_NAME_LATEST_RESTORABLE_TIME)
  private OffsetDateTime latestRestorableTime;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_MASTER_USERNAME = "MasterUsername";
  @SerializedName(SERIALIZED_NAME_MASTER_USERNAME)
  private String masterUsername;

  public static final String SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW = "PreferredBackupWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW)
  private String preferredBackupWindow;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_REPLICATION_SOURCE_IDENTIFIER = "ReplicationSourceIdentifier";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SOURCE_IDENTIFIER)
  private String replicationSourceIdentifier;

  public static final String SERIALIZED_NAME_READ_REPLICA_IDENTIFIERS = "ReadReplicaIdentifiers";
  @SerializedName(SERIALIZED_NAME_READ_REPLICA_IDENTIFIERS)
  private List readReplicaIdentifiers;

  public static final String SERIALIZED_NAME_DB_CLUSTER_MEMBERS = "DBClusterMembers";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_MEMBERS)
  private List dbClusterMembers;

  public static final String SERIALIZED_NAME_VPC_SECURITY_GROUPS = "VpcSecurityGroups";
  @SerializedName(SERIALIZED_NAME_VPC_SECURITY_GROUPS)
  private List vpcSecurityGroups;

  public static final String SERIALIZED_NAME_HOSTED_ZONE_ID = "HostedZoneId";
  @SerializedName(SERIALIZED_NAME_HOSTED_ZONE_ID)
  private String hostedZoneId;

  public static final String SERIALIZED_NAME_STORAGE_ENCRYPTED = "StorageEncrypted";
  @SerializedName(SERIALIZED_NAME_STORAGE_ENCRYPTED)
  private Boolean storageEncrypted;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_DB_CLUSTER_RESOURCE_ID = "DbClusterResourceId";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_RESOURCE_ID)
  private String dbClusterResourceId;

  public static final String SERIALIZED_NAME_DB_CLUSTER_ARN = "DBClusterArn";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_ARN)
  private String dbClusterArn;

  public static final String SERIALIZED_NAME_ASSOCIATED_ROLES = "AssociatedRoles";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_ROLES)
  private List associatedRoles;

  public static final String SERIALIZED_NAME_CLONE_GROUP_ID = "CloneGroupId";
  @SerializedName(SERIALIZED_NAME_CLONE_GROUP_ID)
  private String cloneGroupId;

  public static final String SERIALIZED_NAME_CLUSTER_CREATE_TIME = "ClusterCreateTime";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CREATE_TIME)
  private OffsetDateTime clusterCreateTime;

  public static final String SERIALIZED_NAME_ENABLED_CLOUDWATCH_LOGS_EXPORTS = "EnabledCloudwatchLogsExports";
  @SerializedName(SERIALIZED_NAME_ENABLED_CLOUDWATCH_LOGS_EXPORTS)
  private List enabledCloudwatchLogsExports;

  public static final String SERIALIZED_NAME_DELETION_PROTECTION = "DeletionProtection";
  @SerializedName(SERIALIZED_NAME_DELETION_PROTECTION)
  private Boolean deletionProtection;

  public DBCluster() {
  }

  public DBCluster availabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
    return this;
  }

  /**
   * Get availabilityZones
   * @return availabilityZones
   */
  @javax.annotation.Nullable
  public List getAvailabilityZones() {
    return availabilityZones;
  }

  public void setAvailabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
  }


  public DBCluster backupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
    return this;
  }

  /**
   * Get backupRetentionPeriod
   * @return backupRetentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getBackupRetentionPeriod() {
    return backupRetentionPeriod;
  }

  public void setBackupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
  }


  public DBCluster dbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
    return this;
  }

  /**
   * Get dbClusterIdentifier
   * @return dbClusterIdentifier
   */
  @javax.annotation.Nullable
  public String getDbClusterIdentifier() {
    return dbClusterIdentifier;
  }

  public void setDbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
  }


  public DBCluster dbClusterParameterGroup(String dbClusterParameterGroup) {
    this.dbClusterParameterGroup = dbClusterParameterGroup;
    return this;
  }

  /**
   * Get dbClusterParameterGroup
   * @return dbClusterParameterGroup
   */
  @javax.annotation.Nullable
  public String getDbClusterParameterGroup() {
    return dbClusterParameterGroup;
  }

  public void setDbClusterParameterGroup(String dbClusterParameterGroup) {
    this.dbClusterParameterGroup = dbClusterParameterGroup;
  }


  public DBCluster dbSubnetGroup(String dbSubnetGroup) {
    this.dbSubnetGroup = dbSubnetGroup;
    return this;
  }

  /**
   * Get dbSubnetGroup
   * @return dbSubnetGroup
   */
  @javax.annotation.Nullable
  public String getDbSubnetGroup() {
    return dbSubnetGroup;
  }

  public void setDbSubnetGroup(String dbSubnetGroup) {
    this.dbSubnetGroup = dbSubnetGroup;
  }


  public DBCluster status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DBCluster percentProgress(String percentProgress) {
    this.percentProgress = percentProgress;
    return this;
  }

  /**
   * Get percentProgress
   * @return percentProgress
   */
  @javax.annotation.Nullable
  public String getPercentProgress() {
    return percentProgress;
  }

  public void setPercentProgress(String percentProgress) {
    this.percentProgress = percentProgress;
  }


  public DBCluster earliestRestorableTime(OffsetDateTime earliestRestorableTime) {
    this.earliestRestorableTime = earliestRestorableTime;
    return this;
  }

  /**
   * Get earliestRestorableTime
   * @return earliestRestorableTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEarliestRestorableTime() {
    return earliestRestorableTime;
  }

  public void setEarliestRestorableTime(OffsetDateTime earliestRestorableTime) {
    this.earliestRestorableTime = earliestRestorableTime;
  }


  public DBCluster endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public DBCluster readerEndpoint(String readerEndpoint) {
    this.readerEndpoint = readerEndpoint;
    return this;
  }

  /**
   * Get readerEndpoint
   * @return readerEndpoint
   */
  @javax.annotation.Nullable
  public String getReaderEndpoint() {
    return readerEndpoint;
  }

  public void setReaderEndpoint(String readerEndpoint) {
    this.readerEndpoint = readerEndpoint;
  }


  public DBCluster multiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
    return this;
  }

  /**
   * Get multiAZ
   * @return multiAZ
   */
  @javax.annotation.Nullable
  public Boolean getMultiAZ() {
    return multiAZ;
  }

  public void setMultiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
  }


  public DBCluster engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public DBCluster engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public DBCluster latestRestorableTime(OffsetDateTime latestRestorableTime) {
    this.latestRestorableTime = latestRestorableTime;
    return this;
  }

  /**
   * Get latestRestorableTime
   * @return latestRestorableTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestRestorableTime() {
    return latestRestorableTime;
  }

  public void setLatestRestorableTime(OffsetDateTime latestRestorableTime) {
    this.latestRestorableTime = latestRestorableTime;
  }


  public DBCluster port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public DBCluster masterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
    return this;
  }

  /**
   * Get masterUsername
   * @return masterUsername
   */
  @javax.annotation.Nullable
  public String getMasterUsername() {
    return masterUsername;
  }

  public void setMasterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
  }


  public DBCluster preferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
    return this;
  }

  /**
   * Get preferredBackupWindow
   * @return preferredBackupWindow
   */
  @javax.annotation.Nullable
  public String getPreferredBackupWindow() {
    return preferredBackupWindow;
  }

  public void setPreferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
  }


  public DBCluster preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public DBCluster replicationSourceIdentifier(String replicationSourceIdentifier) {
    this.replicationSourceIdentifier = replicationSourceIdentifier;
    return this;
  }

  /**
   * Get replicationSourceIdentifier
   * @return replicationSourceIdentifier
   */
  @javax.annotation.Nullable
  public String getReplicationSourceIdentifier() {
    return replicationSourceIdentifier;
  }

  public void setReplicationSourceIdentifier(String replicationSourceIdentifier) {
    this.replicationSourceIdentifier = replicationSourceIdentifier;
  }


  public DBCluster readReplicaIdentifiers(List readReplicaIdentifiers) {
    this.readReplicaIdentifiers = readReplicaIdentifiers;
    return this;
  }

  /**
   * Get readReplicaIdentifiers
   * @return readReplicaIdentifiers
   */
  @javax.annotation.Nullable
  public List getReadReplicaIdentifiers() {
    return readReplicaIdentifiers;
  }

  public void setReadReplicaIdentifiers(List readReplicaIdentifiers) {
    this.readReplicaIdentifiers = readReplicaIdentifiers;
  }


  public DBCluster dbClusterMembers(List dbClusterMembers) {
    this.dbClusterMembers = dbClusterMembers;
    return this;
  }

  /**
   * Get dbClusterMembers
   * @return dbClusterMembers
   */
  @javax.annotation.Nullable
  public List getDbClusterMembers() {
    return dbClusterMembers;
  }

  public void setDbClusterMembers(List dbClusterMembers) {
    this.dbClusterMembers = dbClusterMembers;
  }


  public DBCluster vpcSecurityGroups(List vpcSecurityGroups) {
    this.vpcSecurityGroups = vpcSecurityGroups;
    return this;
  }

  /**
   * Get vpcSecurityGroups
   * @return vpcSecurityGroups
   */
  @javax.annotation.Nullable
  public List getVpcSecurityGroups() {
    return vpcSecurityGroups;
  }

  public void setVpcSecurityGroups(List vpcSecurityGroups) {
    this.vpcSecurityGroups = vpcSecurityGroups;
  }


  public DBCluster hostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
    return this;
  }

  /**
   * Get hostedZoneId
   * @return hostedZoneId
   */
  @javax.annotation.Nullable
  public String getHostedZoneId() {
    return hostedZoneId;
  }

  public void setHostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
  }


  public DBCluster storageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
    return this;
  }

  /**
   * Get storageEncrypted
   * @return storageEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getStorageEncrypted() {
    return storageEncrypted;
  }

  public void setStorageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
  }


  public DBCluster kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public DBCluster dbClusterResourceId(String dbClusterResourceId) {
    this.dbClusterResourceId = dbClusterResourceId;
    return this;
  }

  /**
   * Get dbClusterResourceId
   * @return dbClusterResourceId
   */
  @javax.annotation.Nullable
  public String getDbClusterResourceId() {
    return dbClusterResourceId;
  }

  public void setDbClusterResourceId(String dbClusterResourceId) {
    this.dbClusterResourceId = dbClusterResourceId;
  }


  public DBCluster dbClusterArn(String dbClusterArn) {
    this.dbClusterArn = dbClusterArn;
    return this;
  }

  /**
   * Get dbClusterArn
   * @return dbClusterArn
   */
  @javax.annotation.Nullable
  public String getDbClusterArn() {
    return dbClusterArn;
  }

  public void setDbClusterArn(String dbClusterArn) {
    this.dbClusterArn = dbClusterArn;
  }


  public DBCluster associatedRoles(List associatedRoles) {
    this.associatedRoles = associatedRoles;
    return this;
  }

  /**
   * Get associatedRoles
   * @return associatedRoles
   */
  @javax.annotation.Nullable
  public List getAssociatedRoles() {
    return associatedRoles;
  }

  public void setAssociatedRoles(List associatedRoles) {
    this.associatedRoles = associatedRoles;
  }


  public DBCluster cloneGroupId(String cloneGroupId) {
    this.cloneGroupId = cloneGroupId;
    return this;
  }

  /**
   * Get cloneGroupId
   * @return cloneGroupId
   */
  @javax.annotation.Nullable
  public String getCloneGroupId() {
    return cloneGroupId;
  }

  public void setCloneGroupId(String cloneGroupId) {
    this.cloneGroupId = cloneGroupId;
  }


  public DBCluster clusterCreateTime(OffsetDateTime clusterCreateTime) {
    this.clusterCreateTime = clusterCreateTime;
    return this;
  }

  /**
   * Get clusterCreateTime
   * @return clusterCreateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClusterCreateTime() {
    return clusterCreateTime;
  }

  public void setClusterCreateTime(OffsetDateTime clusterCreateTime) {
    this.clusterCreateTime = clusterCreateTime;
  }


  public DBCluster enabledCloudwatchLogsExports(List enabledCloudwatchLogsExports) {
    this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
    return this;
  }

  /**
   * Get enabledCloudwatchLogsExports
   * @return enabledCloudwatchLogsExports
   */
  @javax.annotation.Nullable
  public List getEnabledCloudwatchLogsExports() {
    return enabledCloudwatchLogsExports;
  }

  public void setEnabledCloudwatchLogsExports(List enabledCloudwatchLogsExports) {
    this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
  }


  public DBCluster deletionProtection(Boolean deletionProtection) {
    this.deletionProtection = deletionProtection;
    return this;
  }

  /**
   * Get deletionProtection
   * @return deletionProtection
   */
  @javax.annotation.Nullable
  public Boolean getDeletionProtection() {
    return deletionProtection;
  }

  public void setDeletionProtection(Boolean deletionProtection) {
    this.deletionProtection = deletionProtection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBCluster dbCluster = (DBCluster) o;
    return Objects.equals(this.availabilityZones, dbCluster.availabilityZones) &&
        Objects.equals(this.backupRetentionPeriod, dbCluster.backupRetentionPeriod) &&
        Objects.equals(this.dbClusterIdentifier, dbCluster.dbClusterIdentifier) &&
        Objects.equals(this.dbClusterParameterGroup, dbCluster.dbClusterParameterGroup) &&
        Objects.equals(this.dbSubnetGroup, dbCluster.dbSubnetGroup) &&
        Objects.equals(this.status, dbCluster.status) &&
        Objects.equals(this.percentProgress, dbCluster.percentProgress) &&
        Objects.equals(this.earliestRestorableTime, dbCluster.earliestRestorableTime) &&
        Objects.equals(this.endpoint, dbCluster.endpoint) &&
        Objects.equals(this.readerEndpoint, dbCluster.readerEndpoint) &&
        Objects.equals(this.multiAZ, dbCluster.multiAZ) &&
        Objects.equals(this.engine, dbCluster.engine) &&
        Objects.equals(this.engineVersion, dbCluster.engineVersion) &&
        Objects.equals(this.latestRestorableTime, dbCluster.latestRestorableTime) &&
        Objects.equals(this.port, dbCluster.port) &&
        Objects.equals(this.masterUsername, dbCluster.masterUsername) &&
        Objects.equals(this.preferredBackupWindow, dbCluster.preferredBackupWindow) &&
        Objects.equals(this.preferredMaintenanceWindow, dbCluster.preferredMaintenanceWindow) &&
        Objects.equals(this.replicationSourceIdentifier, dbCluster.replicationSourceIdentifier) &&
        Objects.equals(this.readReplicaIdentifiers, dbCluster.readReplicaIdentifiers) &&
        Objects.equals(this.dbClusterMembers, dbCluster.dbClusterMembers) &&
        Objects.equals(this.vpcSecurityGroups, dbCluster.vpcSecurityGroups) &&
        Objects.equals(this.hostedZoneId, dbCluster.hostedZoneId) &&
        Objects.equals(this.storageEncrypted, dbCluster.storageEncrypted) &&
        Objects.equals(this.kmsKeyId, dbCluster.kmsKeyId) &&
        Objects.equals(this.dbClusterResourceId, dbCluster.dbClusterResourceId) &&
        Objects.equals(this.dbClusterArn, dbCluster.dbClusterArn) &&
        Objects.equals(this.associatedRoles, dbCluster.associatedRoles) &&
        Objects.equals(this.cloneGroupId, dbCluster.cloneGroupId) &&
        Objects.equals(this.clusterCreateTime, dbCluster.clusterCreateTime) &&
        Objects.equals(this.enabledCloudwatchLogsExports, dbCluster.enabledCloudwatchLogsExports) &&
        Objects.equals(this.deletionProtection, dbCluster.deletionProtection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZones, backupRetentionPeriod, dbClusterIdentifier, dbClusterParameterGroup, dbSubnetGroup, status, percentProgress, earliestRestorableTime, endpoint, readerEndpoint, multiAZ, engine, engineVersion, latestRestorableTime, port, masterUsername, preferredBackupWindow, preferredMaintenanceWindow, replicationSourceIdentifier, readReplicaIdentifiers, dbClusterMembers, vpcSecurityGroups, hostedZoneId, storageEncrypted, kmsKeyId, dbClusterResourceId, dbClusterArn, associatedRoles, cloneGroupId, clusterCreateTime, enabledCloudwatchLogsExports, deletionProtection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBCluster {\n");
    sb.append("    availabilityZones: ").append(toIndentedString(availabilityZones)).append("\n");
    sb.append("    backupRetentionPeriod: ").append(toIndentedString(backupRetentionPeriod)).append("\n");
    sb.append("    dbClusterIdentifier: ").append(toIndentedString(dbClusterIdentifier)).append("\n");
    sb.append("    dbClusterParameterGroup: ").append(toIndentedString(dbClusterParameterGroup)).append("\n");
    sb.append("    dbSubnetGroup: ").append(toIndentedString(dbSubnetGroup)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    percentProgress: ").append(toIndentedString(percentProgress)).append("\n");
    sb.append("    earliestRestorableTime: ").append(toIndentedString(earliestRestorableTime)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    readerEndpoint: ").append(toIndentedString(readerEndpoint)).append("\n");
    sb.append("    multiAZ: ").append(toIndentedString(multiAZ)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    latestRestorableTime: ").append(toIndentedString(latestRestorableTime)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    masterUsername: ").append(toIndentedString(masterUsername)).append("\n");
    sb.append("    preferredBackupWindow: ").append(toIndentedString(preferredBackupWindow)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    replicationSourceIdentifier: ").append(toIndentedString(replicationSourceIdentifier)).append("\n");
    sb.append("    readReplicaIdentifiers: ").append(toIndentedString(readReplicaIdentifiers)).append("\n");
    sb.append("    dbClusterMembers: ").append(toIndentedString(dbClusterMembers)).append("\n");
    sb.append("    vpcSecurityGroups: ").append(toIndentedString(vpcSecurityGroups)).append("\n");
    sb.append("    hostedZoneId: ").append(toIndentedString(hostedZoneId)).append("\n");
    sb.append("    storageEncrypted: ").append(toIndentedString(storageEncrypted)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    dbClusterResourceId: ").append(toIndentedString(dbClusterResourceId)).append("\n");
    sb.append("    dbClusterArn: ").append(toIndentedString(dbClusterArn)).append("\n");
    sb.append("    associatedRoles: ").append(toIndentedString(associatedRoles)).append("\n");
    sb.append("    cloneGroupId: ").append(toIndentedString(cloneGroupId)).append("\n");
    sb.append("    clusterCreateTime: ").append(toIndentedString(clusterCreateTime)).append("\n");
    sb.append("    enabledCloudwatchLogsExports: ").append(toIndentedString(enabledCloudwatchLogsExports)).append("\n");
    sb.append("    deletionProtection: ").append(toIndentedString(deletionProtection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailabilityZones");
    openapiFields.add("BackupRetentionPeriod");
    openapiFields.add("DBClusterIdentifier");
    openapiFields.add("DBClusterParameterGroup");
    openapiFields.add("DBSubnetGroup");
    openapiFields.add("Status");
    openapiFields.add("PercentProgress");
    openapiFields.add("EarliestRestorableTime");
    openapiFields.add("Endpoint");
    openapiFields.add("ReaderEndpoint");
    openapiFields.add("MultiAZ");
    openapiFields.add("Engine");
    openapiFields.add("EngineVersion");
    openapiFields.add("LatestRestorableTime");
    openapiFields.add("Port");
    openapiFields.add("MasterUsername");
    openapiFields.add("PreferredBackupWindow");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("ReplicationSourceIdentifier");
    openapiFields.add("ReadReplicaIdentifiers");
    openapiFields.add("DBClusterMembers");
    openapiFields.add("VpcSecurityGroups");
    openapiFields.add("HostedZoneId");
    openapiFields.add("StorageEncrypted");
    openapiFields.add("KmsKeyId");
    openapiFields.add("DbClusterResourceId");
    openapiFields.add("DBClusterArn");
    openapiFields.add("AssociatedRoles");
    openapiFields.add("CloneGroupId");
    openapiFields.add("ClusterCreateTime");
    openapiFields.add("EnabledCloudwatchLogsExports");
    openapiFields.add("DeletionProtection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DBCluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DBCluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DBCluster is not found in the empty JSON string", DBCluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DBCluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DBCluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AvailabilityZones`
      if (jsonObj.get("AvailabilityZones") != null && !jsonObj.get("AvailabilityZones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AvailabilityZones"));
      }
      // validate the optional field `BackupRetentionPeriod`
      if (jsonObj.get("BackupRetentionPeriod") != null && !jsonObj.get("BackupRetentionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BackupRetentionPeriod"));
      }
      // validate the optional field `DBClusterIdentifier`
      if (jsonObj.get("DBClusterIdentifier") != null && !jsonObj.get("DBClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterIdentifier"));
      }
      // validate the optional field `DBClusterParameterGroup`
      if (jsonObj.get("DBClusterParameterGroup") != null && !jsonObj.get("DBClusterParameterGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterParameterGroup"));
      }
      // validate the optional field `DBSubnetGroup`
      if (jsonObj.get("DBSubnetGroup") != null && !jsonObj.get("DBSubnetGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBSubnetGroup"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `PercentProgress`
      if (jsonObj.get("PercentProgress") != null && !jsonObj.get("PercentProgress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PercentProgress"));
      }
      // validate the optional field `EarliestRestorableTime`
      if (jsonObj.get("EarliestRestorableTime") != null && !jsonObj.get("EarliestRestorableTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EarliestRestorableTime"));
      }
      // validate the optional field `Endpoint`
      if (jsonObj.get("Endpoint") != null && !jsonObj.get("Endpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Endpoint"));
      }
      // validate the optional field `ReaderEndpoint`
      if (jsonObj.get("ReaderEndpoint") != null && !jsonObj.get("ReaderEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReaderEndpoint"));
      }
      // validate the optional field `MultiAZ`
      if (jsonObj.get("MultiAZ") != null && !jsonObj.get("MultiAZ").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MultiAZ"));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `LatestRestorableTime`
      if (jsonObj.get("LatestRestorableTime") != null && !jsonObj.get("LatestRestorableTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LatestRestorableTime"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `MasterUsername`
      if (jsonObj.get("MasterUsername") != null && !jsonObj.get("MasterUsername").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterUsername"));
      }
      // validate the optional field `PreferredBackupWindow`
      if (jsonObj.get("PreferredBackupWindow") != null && !jsonObj.get("PreferredBackupWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredBackupWindow"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `ReplicationSourceIdentifier`
      if (jsonObj.get("ReplicationSourceIdentifier") != null && !jsonObj.get("ReplicationSourceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationSourceIdentifier"));
      }
      // validate the optional field `ReadReplicaIdentifiers`
      if (jsonObj.get("ReadReplicaIdentifiers") != null && !jsonObj.get("ReadReplicaIdentifiers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReadReplicaIdentifiers"));
      }
      // validate the optional field `DBClusterMembers`
      if (jsonObj.get("DBClusterMembers") != null && !jsonObj.get("DBClusterMembers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DBClusterMembers"));
      }
      // validate the optional field `VpcSecurityGroups`
      if (jsonObj.get("VpcSecurityGroups") != null && !jsonObj.get("VpcSecurityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcSecurityGroups"));
      }
      // validate the optional field `HostedZoneId`
      if (jsonObj.get("HostedZoneId") != null && !jsonObj.get("HostedZoneId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostedZoneId"));
      }
      // validate the optional field `StorageEncrypted`
      if (jsonObj.get("StorageEncrypted") != null && !jsonObj.get("StorageEncrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StorageEncrypted"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `DbClusterResourceId`
      if (jsonObj.get("DbClusterResourceId") != null && !jsonObj.get("DbClusterResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DbClusterResourceId"));
      }
      // validate the optional field `DBClusterArn`
      if (jsonObj.get("DBClusterArn") != null && !jsonObj.get("DBClusterArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterArn"));
      }
      // validate the optional field `AssociatedRoles`
      if (jsonObj.get("AssociatedRoles") != null && !jsonObj.get("AssociatedRoles").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AssociatedRoles"));
      }
      // validate the optional field `CloneGroupId`
      if (jsonObj.get("CloneGroupId") != null && !jsonObj.get("CloneGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CloneGroupId"));
      }
      // validate the optional field `ClusterCreateTime`
      if (jsonObj.get("ClusterCreateTime") != null && !jsonObj.get("ClusterCreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ClusterCreateTime"));
      }
      // validate the optional field `EnabledCloudwatchLogsExports`
      if (jsonObj.get("EnabledCloudwatchLogsExports") != null && !jsonObj.get("EnabledCloudwatchLogsExports").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnabledCloudwatchLogsExports"));
      }
      // validate the optional field `DeletionProtection`
      if (jsonObj.get("DeletionProtection") != null && !jsonObj.get("DeletionProtection").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeletionProtection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DBCluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DBCluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DBCluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DBCluster.class));

       return (TypeAdapter<T>) new TypeAdapter<DBCluster>() {
           @Override
           public void write(JsonWriter out, DBCluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DBCluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DBCluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DBCluster
   * @throws IOException if the JSON string is invalid with respect to DBCluster
   */
  public static DBCluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DBCluster.class);
  }

  /**
   * Convert an instance of DBCluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

