/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddSourceIdentifierToSubscriptionMessage;
import org.openapitools.client.model.AddSourceIdentifierToSubscriptionResult;
import org.openapitools.client.model.AddTagsToResourceMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionResult;
import org.openapitools.client.model.CertificateMessage;
import org.openapitools.client.model.CopyDBClusterParameterGroupMessage;
import org.openapitools.client.model.CopyDBClusterParameterGroupResult;
import org.openapitools.client.model.CopyDBClusterSnapshotMessage;
import org.openapitools.client.model.CopyDBClusterSnapshotResult;
import org.openapitools.client.model.CreateDBClusterMessage;
import org.openapitools.client.model.CreateDBClusterParameterGroupMessage;
import org.openapitools.client.model.CreateDBClusterParameterGroupResult;
import org.openapitools.client.model.CreateDBClusterResult;
import org.openapitools.client.model.CreateDBClusterSnapshotMessage;
import org.openapitools.client.model.CreateDBClusterSnapshotResult;
import org.openapitools.client.model.CreateDBInstanceMessage;
import org.openapitools.client.model.CreateDBInstanceResult;
import org.openapitools.client.model.CreateDBSubnetGroupMessage;
import org.openapitools.client.model.CreateDBSubnetGroupResult;
import org.openapitools.client.model.CreateEventSubscriptionMessage;
import org.openapitools.client.model.CreateEventSubscriptionResult;
import org.openapitools.client.model.CreateGlobalClusterMessage;
import org.openapitools.client.model.CreateGlobalClusterResult;
import org.openapitools.client.model.DBClusterMessage;
import org.openapitools.client.model.DBClusterParameterGroupDetails;
import org.openapitools.client.model.DBClusterParameterGroupNameMessage;
import org.openapitools.client.model.DBClusterParameterGroupsMessage;
import org.openapitools.client.model.DBClusterSnapshotMessage;
import org.openapitools.client.model.DBEngineVersionMessage;
import org.openapitools.client.model.DBInstanceMessage;
import org.openapitools.client.model.DBSubnetGroupMessage;
import org.openapitools.client.model.DeleteDBClusterMessage;
import org.openapitools.client.model.DeleteDBClusterParameterGroupMessage;
import org.openapitools.client.model.DeleteDBClusterResult;
import org.openapitools.client.model.DeleteDBClusterSnapshotMessage;
import org.openapitools.client.model.DeleteDBClusterSnapshotResult;
import org.openapitools.client.model.DeleteDBInstanceMessage;
import org.openapitools.client.model.DeleteDBInstanceResult;
import org.openapitools.client.model.DeleteDBSubnetGroupMessage;
import org.openapitools.client.model.DeleteEventSubscriptionMessage;
import org.openapitools.client.model.DeleteEventSubscriptionResult;
import org.openapitools.client.model.DeleteGlobalClusterMessage;
import org.openapitools.client.model.DeleteGlobalClusterResult;
import org.openapitools.client.model.DescribeCertificatesMessage;
import org.openapitools.client.model.DescribeDBClusterParameterGroupsMessage;
import org.openapitools.client.model.DescribeDBClusterParametersMessage;
import org.openapitools.client.model.DescribeDBClusterSnapshotAttributesMessage;
import org.openapitools.client.model.DescribeDBClusterSnapshotAttributesResult;
import org.openapitools.client.model.DescribeDBClusterSnapshotsMessage;
import org.openapitools.client.model.DescribeDBClustersMessage;
import org.openapitools.client.model.DescribeDBEngineVersionsMessage;
import org.openapitools.client.model.DescribeDBInstancesMessage;
import org.openapitools.client.model.DescribeDBSubnetGroupsMessage;
import org.openapitools.client.model.DescribeEngineDefaultClusterParametersMessage;
import org.openapitools.client.model.DescribeEngineDefaultClusterParametersResult;
import org.openapitools.client.model.DescribeEventCategoriesMessage;
import org.openapitools.client.model.DescribeEventSubscriptionsMessage;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeGlobalClustersMessage;
import org.openapitools.client.model.DescribeOrderableDBInstanceOptionsMessage;
import org.openapitools.client.model.DescribePendingMaintenanceActionsMessage;
import org.openapitools.client.model.EventCategoriesMessage;
import org.openapitools.client.model.EventSubscriptionsMessage;
import org.openapitools.client.model.EventsMessage;
import org.openapitools.client.model.FailoverDBClusterMessage;
import org.openapitools.client.model.FailoverDBClusterResult;
import org.openapitools.client.model.GETAddTagsToResourceTagsParameterInner;
import org.openapitools.client.model.GETDescribeCertificatesFiltersParameterInner;
import org.openapitools.client.model.GETModifyDBClusterCloudwatchLogsExportConfigurationParameter;
import org.openapitools.client.model.GETModifyDBClusterParameterGroupParametersParameterInner;
import org.openapitools.client.model.GlobalClustersMessage;
import org.openapitools.client.model.ListTagsForResourceMessage;
import org.openapitools.client.model.ModifyDBClusterMessage;
import org.openapitools.client.model.ModifyDBClusterParameterGroupMessage;
import org.openapitools.client.model.ModifyDBClusterResult;
import org.openapitools.client.model.ModifyDBClusterSnapshotAttributeMessage;
import org.openapitools.client.model.ModifyDBClusterSnapshotAttributeResult;
import org.openapitools.client.model.ModifyDBInstanceMessage;
import org.openapitools.client.model.ModifyDBInstanceResult;
import org.openapitools.client.model.ModifyDBSubnetGroupMessage;
import org.openapitools.client.model.ModifyDBSubnetGroupResult;
import org.openapitools.client.model.ModifyEventSubscriptionMessage;
import org.openapitools.client.model.ModifyEventSubscriptionResult;
import org.openapitools.client.model.ModifyGlobalClusterMessage;
import org.openapitools.client.model.ModifyGlobalClusterResult;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderableDBInstanceOptionsMessage;
import org.openapitools.client.model.PendingMaintenanceActionsMessage;
import org.openapitools.client.model.RebootDBInstanceMessage;
import org.openapitools.client.model.RebootDBInstanceResult;
import org.openapitools.client.model.RemoveFromGlobalClusterMessage;
import org.openapitools.client.model.RemoveFromGlobalClusterResult;
import org.openapitools.client.model.RemoveSourceIdentifierFromSubscriptionMessage;
import org.openapitools.client.model.RemoveSourceIdentifierFromSubscriptionResult;
import org.openapitools.client.model.RemoveTagsFromResourceMessage;
import org.openapitools.client.model.ResetDBClusterParameterGroupMessage;
import org.openapitools.client.model.RestoreDBClusterFromSnapshotMessage;
import org.openapitools.client.model.RestoreDBClusterFromSnapshotResult;
import org.openapitools.client.model.RestoreDBClusterToPointInTimeMessage;
import org.openapitools.client.model.RestoreDBClusterToPointInTimeResult;
import org.openapitools.client.model.StartDBClusterMessage;
import org.openapitools.client.model.StartDBClusterResult;
import org.openapitools.client.model.StopDBClusterMessage;
import org.openapitools.client.model.StopDBClusterResult;
import org.openapitools.client.model.TagListMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAddSourceIdentifierToSubscription
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to add a source identifier to. (required)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source to be added:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the source type is an instance, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddSourceIdentifierToSubscriptionCall(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddSourceIdentifierToSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (sourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceIdentifier", sourceIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddSourceIdentifierToSubscriptionValidateBeforeCall(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETAddSourceIdentifierToSubscription(Async)");
        }

        // verify the required parameter 'sourceIdentifier' is set
        if (sourceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceIdentifier' when calling gETAddSourceIdentifierToSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddSourceIdentifierToSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddSourceIdentifierToSubscription(Async)");
        }

        return gETAddSourceIdentifierToSubscriptionCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds a source identifier to an existing event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to add a source identifier to. (required)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source to be added:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the source type is an instance, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AddSourceIdentifierToSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public AddSourceIdentifierToSubscriptionResult gETAddSourceIdentifierToSubscription(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AddSourceIdentifierToSubscriptionResult> localVarResp = gETAddSourceIdentifierToSubscriptionWithHttpInfo(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a source identifier to an existing event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to add a source identifier to. (required)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source to be added:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the source type is an instance, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AddSourceIdentifierToSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddSourceIdentifierToSubscriptionResult> gETAddSourceIdentifierToSubscriptionWithHttpInfo(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddSourceIdentifierToSubscriptionValidateBeforeCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AddSourceIdentifierToSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a source identifier to an existing event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to add a source identifier to. (required)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source to be added:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the source type is an instance, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddSourceIdentifierToSubscriptionAsync(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AddSourceIdentifierToSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddSourceIdentifierToSubscriptionValidateBeforeCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AddSourceIdentifierToSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAddTagsToResource
     * @param resourceName The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name . (required)
     * @param tags The tags to be assigned to the Amazon DocumentDB resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsToResourceCall(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddTagsToResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddTagsToResourceValidateBeforeCall(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddTagsToResource(Async)");
        }

        return gETAddTagsToResourceCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a &lt;code&gt;Condition&lt;/code&gt; statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
     * @param resourceName The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name . (required)
     * @param tags The tags to be assigned to the Amazon DocumentDB resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETAddTagsToResource(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETAddTagsToResourceWithHttpInfo(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a &lt;code&gt;Condition&lt;/code&gt; statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
     * @param resourceName The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name . (required)
     * @param tags The tags to be assigned to the Amazon DocumentDB resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETAddTagsToResourceWithHttpInfo(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddTagsToResourceValidateBeforeCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a &lt;code&gt;Condition&lt;/code&gt; statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
     * @param resourceName The Amazon DocumentDB resource that the tags are added to. This value is an Amazon Resource Name . (required)
     * @param tags The tags to be assigned to the Amazon DocumentDB resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsToResourceAsync(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddTagsToResourceValidateBeforeCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETApplyPendingMaintenanceAction
     * @param resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. (required)
     * @param applyAction &lt;p&gt;The pending maintenance action to apply to this resource.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;system-update&lt;/code&gt;, &lt;code&gt;db-upgrade&lt;/code&gt; &lt;/p&gt; (required)
     * @param optInType &lt;p&gt;A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type &lt;code&gt;immediate&lt;/code&gt; can&#39;t be undone.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;immediate&lt;/code&gt; - Apply the maintenance action immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;next-maintenance&lt;/code&gt; - Apply the maintenance action during the next maintenance window for the resource. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;undo-opt-in&lt;/code&gt; - Cancel any existing &lt;code&gt;next-maintenance&lt;/code&gt; opt-in requests.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETApplyPendingMaintenanceActionCall(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ApplyPendingMaintenanceAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceIdentifier", resourceIdentifier));
        }

        if (applyAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyAction", applyAction));
        }

        if (optInType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OptInType", optInType));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETApplyPendingMaintenanceActionValidateBeforeCall(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceIdentifier' is set
        if (resourceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'resourceIdentifier' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'applyAction' is set
        if (applyAction == null) {
            throw new ApiException("Missing the required parameter 'applyAction' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'optInType' is set
        if (optInType == null) {
            throw new ApiException("Missing the required parameter 'optInType' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETApplyPendingMaintenanceAction(Async)");
        }

        return gETApplyPendingMaintenanceActionCall(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
     * @param resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. (required)
     * @param applyAction &lt;p&gt;The pending maintenance action to apply to this resource.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;system-update&lt;/code&gt;, &lt;code&gt;db-upgrade&lt;/code&gt; &lt;/p&gt; (required)
     * @param optInType &lt;p&gt;A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type &lt;code&gt;immediate&lt;/code&gt; can&#39;t be undone.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;immediate&lt;/code&gt; - Apply the maintenance action immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;next-maintenance&lt;/code&gt; - Apply the maintenance action during the next maintenance window for the resource. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;undo-opt-in&lt;/code&gt; - Cancel any existing &lt;code&gt;next-maintenance&lt;/code&gt; opt-in requests.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApplyPendingMaintenanceActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApplyPendingMaintenanceActionResult gETApplyPendingMaintenanceAction(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ApplyPendingMaintenanceActionResult> localVarResp = gETApplyPendingMaintenanceActionWithHttpInfo(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
     * @param resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. (required)
     * @param applyAction &lt;p&gt;The pending maintenance action to apply to this resource.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;system-update&lt;/code&gt;, &lt;code&gt;db-upgrade&lt;/code&gt; &lt;/p&gt; (required)
     * @param optInType &lt;p&gt;A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type &lt;code&gt;immediate&lt;/code&gt; can&#39;t be undone.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;immediate&lt;/code&gt; - Apply the maintenance action immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;next-maintenance&lt;/code&gt; - Apply the maintenance action during the next maintenance window for the resource. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;undo-opt-in&lt;/code&gt; - Cancel any existing &lt;code&gt;next-maintenance&lt;/code&gt; opt-in requests.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ApplyPendingMaintenanceActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplyPendingMaintenanceActionResult> gETApplyPendingMaintenanceActionWithHttpInfo(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETApplyPendingMaintenanceActionValidateBeforeCall(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
     * @param resourceIdentifier The Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. (required)
     * @param applyAction &lt;p&gt;The pending maintenance action to apply to this resource.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;system-update&lt;/code&gt;, &lt;code&gt;db-upgrade&lt;/code&gt; &lt;/p&gt; (required)
     * @param optInType &lt;p&gt;A value that specifies the type of opt-in request or undoes an opt-in request. An opt-in request of type &lt;code&gt;immediate&lt;/code&gt; can&#39;t be undone.&lt;/p&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;immediate&lt;/code&gt; - Apply the maintenance action immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;next-maintenance&lt;/code&gt; - Apply the maintenance action during the next maintenance window for the resource. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;undo-opt-in&lt;/code&gt; - Cancel any existing &lt;code&gt;next-maintenance&lt;/code&gt; opt-in requests.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETApplyPendingMaintenanceActionAsync(String resourceIdentifier, String applyAction, String optInType, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ApplyPendingMaintenanceActionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETApplyPendingMaintenanceActionValidateBeforeCall(resourceIdentifier, applyAction, optInType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCopyDBClusterParameterGroup
     * @param sourceDBClusterParameterGroupIdentifier &lt;p&gt;The identifier or Amazon Resource Name (ARN) for the source cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source cluster parameter group is in the same Amazon Web Services Region as the copy, specify a valid parameter group identifier; for example, &lt;code&gt;my-db-cluster-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source parameter group is in a different Amazon Web Services Region than the copy, specify a valid cluster parameter group ARN; for example, &lt;code&gt;arn:aws:rds:us-east-1:123456789012:sample-cluster:sample-parameter-group&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBClusterParameterGroupIdentifier &lt;p&gt;The identifier for the copied cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-param-group1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterParameterGroupDescription A description for the copied cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags that are to be assigned to the parameter group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBClusterParameterGroupCall(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceDBClusterParameterGroupIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBClusterParameterGroupIdentifier", sourceDBClusterParameterGroupIdentifier));
        }

        if (targetDBClusterParameterGroupIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBClusterParameterGroupIdentifier", targetDBClusterParameterGroupIdentifier));
        }

        if (targetDBClusterParameterGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBClusterParameterGroupDescription", targetDBClusterParameterGroupDescription));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCopyDBClusterParameterGroupValidateBeforeCall(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDBClusterParameterGroupIdentifier' is set
        if (sourceDBClusterParameterGroupIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceDBClusterParameterGroupIdentifier' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'targetDBClusterParameterGroupIdentifier' is set
        if (targetDBClusterParameterGroupIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetDBClusterParameterGroupIdentifier' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'targetDBClusterParameterGroupDescription' is set
        if (targetDBClusterParameterGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'targetDBClusterParameterGroupDescription' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCopyDBClusterParameterGroup(Async)");
        }

        return gETCopyDBClusterParameterGroupCall(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * Copies the specified cluster parameter group.
     * @param sourceDBClusterParameterGroupIdentifier &lt;p&gt;The identifier or Amazon Resource Name (ARN) for the source cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source cluster parameter group is in the same Amazon Web Services Region as the copy, specify a valid parameter group identifier; for example, &lt;code&gt;my-db-cluster-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source parameter group is in a different Amazon Web Services Region than the copy, specify a valid cluster parameter group ARN; for example, &lt;code&gt;arn:aws:rds:us-east-1:123456789012:sample-cluster:sample-parameter-group&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBClusterParameterGroupIdentifier &lt;p&gt;The identifier for the copied cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-param-group1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterParameterGroupDescription A description for the copied cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags that are to be assigned to the parameter group. (optional)
     * @return CopyDBClusterParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBClusterParameterGroupResult gETCopyDBClusterParameterGroup(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CopyDBClusterParameterGroupResult> localVarResp = gETCopyDBClusterParameterGroupWithHttpInfo(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Copies the specified cluster parameter group.
     * @param sourceDBClusterParameterGroupIdentifier &lt;p&gt;The identifier or Amazon Resource Name (ARN) for the source cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source cluster parameter group is in the same Amazon Web Services Region as the copy, specify a valid parameter group identifier; for example, &lt;code&gt;my-db-cluster-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source parameter group is in a different Amazon Web Services Region than the copy, specify a valid cluster parameter group ARN; for example, &lt;code&gt;arn:aws:rds:us-east-1:123456789012:sample-cluster:sample-parameter-group&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBClusterParameterGroupIdentifier &lt;p&gt;The identifier for the copied cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-param-group1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterParameterGroupDescription A description for the copied cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags that are to be assigned to the parameter group. (optional)
     * @return ApiResponse&lt;CopyDBClusterParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBClusterParameterGroupResult> gETCopyDBClusterParameterGroupWithHttpInfo(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCopyDBClusterParameterGroupValidateBeforeCall(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CopyDBClusterParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copies the specified cluster parameter group.
     * @param sourceDBClusterParameterGroupIdentifier &lt;p&gt;The identifier or Amazon Resource Name (ARN) for the source cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source cluster parameter group is in the same Amazon Web Services Region as the copy, specify a valid parameter group identifier; for example, &lt;code&gt;my-db-cluster-param-group&lt;/code&gt;, or a valid ARN.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source parameter group is in a different Amazon Web Services Region than the copy, specify a valid cluster parameter group ARN; for example, &lt;code&gt;arn:aws:rds:us-east-1:123456789012:sample-cluster:sample-parameter-group&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param targetDBClusterParameterGroupIdentifier &lt;p&gt;The identifier for the copied cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Cannot be null, empty, or blank.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 255 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-param-group1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterParameterGroupDescription A description for the copied cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags that are to be assigned to the parameter group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBClusterParameterGroupAsync(String sourceDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupIdentifier, String targetDBClusterParameterGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CopyDBClusterParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCopyDBClusterParameterGroupValidateBeforeCall(sourceDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupIdentifier, targetDBClusterParameterGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CopyDBClusterParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCopyDBClusterSnapshot
     * @param sourceDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot to copy. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid system snapshot in the &lt;i&gt;available&lt;/i&gt; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid snapshot identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid cluster snapshot ARN.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the new cluster snapshot to create from the source cluster snapshot. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot2&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key ID for an encrypted cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. &lt;/p&gt; &lt;p&gt;If you copy an encrypted cluster snapshot from your Amazon Web Services account, you can specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt; to encrypt the copy with a new KMS encryption key. If you don&#39;t specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;, then the copy of the cluster snapshot is encrypted with the same KMS key as the source cluster snapshot.&lt;/p&gt; &lt;p&gt;If you copy an encrypted cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To copy an encrypted cluster snapshot to another Amazon Web Services Region, set &lt;code&gt;KmsKeyId&lt;/code&gt; to the KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. KMS encryption keys are specific to the Amazon Web Services Region that they are created in, and you can&#39;t use encryption keys from one Amazon Web Services Region in another Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If you copy an unencrypted cluster snapshot and specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, an error is returned.&lt;/p&gt; (optional)
     * @param preSignedUrl &lt;p&gt;The URL that contains a Signature Version 4 signed request for the&lt;code&gt;CopyDBClusterSnapshot&lt;/code&gt; API action in the Amazon Web Services Region that contains the source cluster snapshot to copy. You must use the &lt;code&gt;PreSignedUrl&lt;/code&gt; parameter when copying a cluster snapshot from another Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If you are using an Amazon Web Services SDK tool or the CLI, you can specify &lt;code&gt;SourceRegion&lt;/code&gt; (or &lt;code&gt;--source-region&lt;/code&gt; for the CLI) instead of specifying &lt;code&gt;PreSignedUrl&lt;/code&gt; manually. Specifying &lt;code&gt;SourceRegion&lt;/code&gt; autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;The presigned URL must be a valid request for the &lt;code&gt;CopyDBClusterSnapshot&lt;/code&gt; API action that can be executed in the source Amazon Web Services Region that contains the cluster snapshot to be copied. The presigned URL request must contain the following parameter values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceRegion&lt;/code&gt; - The ID of the region that contains the snapshot to be copied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; - The identifier for the the encrypted cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted cluster snapshot from the us-east-1 Amazon Web Services Region, then your &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; looks something like the following: &lt;code&gt;arn:aws:rds:us-east-1:12345678012:sample-cluster:sample-cluster-snapshot&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; - The identifier for the new cluster snapshot to be created. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param copyTags Set to &lt;code&gt;true&lt;/code&gt; to copy all tags from the source cluster snapshot to the target cluster snapshot, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param tags The tags to be assigned to the cluster snapshot. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBClusterSnapshotCall(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceDBClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBClusterSnapshotIdentifier", sourceDBClusterSnapshotIdentifier));
        }

        if (targetDBClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBClusterSnapshotIdentifier", targetDBClusterSnapshotIdentifier));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (preSignedUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreSignedUrl", preSignedUrl));
        }

        if (copyTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTags", copyTags));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCopyDBClusterSnapshotValidateBeforeCall(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceDBClusterSnapshotIdentifier' is set
        if (sourceDBClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceDBClusterSnapshotIdentifier' when calling gETCopyDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'targetDBClusterSnapshotIdentifier' is set
        if (targetDBClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'targetDBClusterSnapshotIdentifier' when calling gETCopyDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCopyDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCopyDBClusterSnapshot(Async)");
        }

        return gETCopyDBClusterSnapshotCall(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Copies a snapshot of a cluster.&lt;/p&gt; &lt;p&gt;To copy a cluster snapshot from a shared manual cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; while that cluster snapshot is in the &lt;i&gt;copying&lt;/i&gt; status.&lt;/p&gt;
     * @param sourceDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot to copy. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid system snapshot in the &lt;i&gt;available&lt;/i&gt; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid snapshot identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid cluster snapshot ARN.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the new cluster snapshot to create from the source cluster snapshot. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot2&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key ID for an encrypted cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. &lt;/p&gt; &lt;p&gt;If you copy an encrypted cluster snapshot from your Amazon Web Services account, you can specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt; to encrypt the copy with a new KMS encryption key. If you don&#39;t specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;, then the copy of the cluster snapshot is encrypted with the same KMS key as the source cluster snapshot.&lt;/p&gt; &lt;p&gt;If you copy an encrypted cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To copy an encrypted cluster snapshot to another Amazon Web Services Region, set &lt;code&gt;KmsKeyId&lt;/code&gt; to the KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. KMS encryption keys are specific to the Amazon Web Services Region that they are created in, and you can&#39;t use encryption keys from one Amazon Web Services Region in another Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If you copy an unencrypted cluster snapshot and specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, an error is returned.&lt;/p&gt; (optional)
     * @param preSignedUrl &lt;p&gt;The URL that contains a Signature Version 4 signed request for the&lt;code&gt;CopyDBClusterSnapshot&lt;/code&gt; API action in the Amazon Web Services Region that contains the source cluster snapshot to copy. You must use the &lt;code&gt;PreSignedUrl&lt;/code&gt; parameter when copying a cluster snapshot from another Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If you are using an Amazon Web Services SDK tool or the CLI, you can specify &lt;code&gt;SourceRegion&lt;/code&gt; (or &lt;code&gt;--source-region&lt;/code&gt; for the CLI) instead of specifying &lt;code&gt;PreSignedUrl&lt;/code&gt; manually. Specifying &lt;code&gt;SourceRegion&lt;/code&gt; autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;The presigned URL must be a valid request for the &lt;code&gt;CopyDBClusterSnapshot&lt;/code&gt; API action that can be executed in the source Amazon Web Services Region that contains the cluster snapshot to be copied. The presigned URL request must contain the following parameter values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceRegion&lt;/code&gt; - The ID of the region that contains the snapshot to be copied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; - The identifier for the the encrypted cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted cluster snapshot from the us-east-1 Amazon Web Services Region, then your &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; looks something like the following: &lt;code&gt;arn:aws:rds:us-east-1:12345678012:sample-cluster:sample-cluster-snapshot&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; - The identifier for the new cluster snapshot to be created. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param copyTags Set to &lt;code&gt;true&lt;/code&gt; to copy all tags from the source cluster snapshot to the target cluster snapshot, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param tags The tags to be assigned to the cluster snapshot. (optional)
     * @return CopyDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBClusterSnapshotResult gETCopyDBClusterSnapshot(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CopyDBClusterSnapshotResult> localVarResp = gETCopyDBClusterSnapshotWithHttpInfo(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Copies a snapshot of a cluster.&lt;/p&gt; &lt;p&gt;To copy a cluster snapshot from a shared manual cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; while that cluster snapshot is in the &lt;i&gt;copying&lt;/i&gt; status.&lt;/p&gt;
     * @param sourceDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot to copy. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid system snapshot in the &lt;i&gt;available&lt;/i&gt; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid snapshot identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid cluster snapshot ARN.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the new cluster snapshot to create from the source cluster snapshot. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot2&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key ID for an encrypted cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. &lt;/p&gt; &lt;p&gt;If you copy an encrypted cluster snapshot from your Amazon Web Services account, you can specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt; to encrypt the copy with a new KMS encryption key. If you don&#39;t specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;, then the copy of the cluster snapshot is encrypted with the same KMS key as the source cluster snapshot.&lt;/p&gt; &lt;p&gt;If you copy an encrypted cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To copy an encrypted cluster snapshot to another Amazon Web Services Region, set &lt;code&gt;KmsKeyId&lt;/code&gt; to the KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. KMS encryption keys are specific to the Amazon Web Services Region that they are created in, and you can&#39;t use encryption keys from one Amazon Web Services Region in another Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If you copy an unencrypted cluster snapshot and specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, an error is returned.&lt;/p&gt; (optional)
     * @param preSignedUrl &lt;p&gt;The URL that contains a Signature Version 4 signed request for the&lt;code&gt;CopyDBClusterSnapshot&lt;/code&gt; API action in the Amazon Web Services Region that contains the source cluster snapshot to copy. You must use the &lt;code&gt;PreSignedUrl&lt;/code&gt; parameter when copying a cluster snapshot from another Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If you are using an Amazon Web Services SDK tool or the CLI, you can specify &lt;code&gt;SourceRegion&lt;/code&gt; (or &lt;code&gt;--source-region&lt;/code&gt; for the CLI) instead of specifying &lt;code&gt;PreSignedUrl&lt;/code&gt; manually. Specifying &lt;code&gt;SourceRegion&lt;/code&gt; autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;The presigned URL must be a valid request for the &lt;code&gt;CopyDBClusterSnapshot&lt;/code&gt; API action that can be executed in the source Amazon Web Services Region that contains the cluster snapshot to be copied. The presigned URL request must contain the following parameter values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceRegion&lt;/code&gt; - The ID of the region that contains the snapshot to be copied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; - The identifier for the the encrypted cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted cluster snapshot from the us-east-1 Amazon Web Services Region, then your &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; looks something like the following: &lt;code&gt;arn:aws:rds:us-east-1:12345678012:sample-cluster:sample-cluster-snapshot&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; - The identifier for the new cluster snapshot to be created. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param copyTags Set to &lt;code&gt;true&lt;/code&gt; to copy all tags from the source cluster snapshot to the target cluster snapshot, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param tags The tags to be assigned to the cluster snapshot. (optional)
     * @return ApiResponse&lt;CopyDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBClusterSnapshotResult> gETCopyDBClusterSnapshotWithHttpInfo(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCopyDBClusterSnapshotValidateBeforeCall(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags, null);
        Type localVarReturnType = new TypeToken<CopyDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Copies a snapshot of a cluster.&lt;/p&gt; &lt;p&gt;To copy a cluster snapshot from a shared manual cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; while that cluster snapshot is in the &lt;i&gt;copying&lt;/i&gt; status.&lt;/p&gt;
     * @param sourceDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot to copy. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must specify a valid system snapshot in the &lt;i&gt;available&lt;/i&gt; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid snapshot identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid cluster snapshot ARN.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param targetDBClusterSnapshotIdentifier &lt;p&gt;The identifier of the new cluster snapshot to create from the source cluster snapshot. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot2&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key ID for an encrypted cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. &lt;/p&gt; &lt;p&gt;If you copy an encrypted cluster snapshot from your Amazon Web Services account, you can specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt; to encrypt the copy with a new KMS encryption key. If you don&#39;t specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;, then the copy of the cluster snapshot is encrypted with the same KMS key as the source cluster snapshot.&lt;/p&gt; &lt;p&gt;If you copy an encrypted cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for &lt;code&gt;KmsKeyId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To copy an encrypted cluster snapshot to another Amazon Web Services Region, set &lt;code&gt;KmsKeyId&lt;/code&gt; to the KMS key ID that you want to use to encrypt the copy of the cluster snapshot in the destination Region. KMS encryption keys are specific to the Amazon Web Services Region that they are created in, and you can&#39;t use encryption keys from one Amazon Web Services Region in another Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If you copy an unencrypted cluster snapshot and specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, an error is returned.&lt;/p&gt; (optional)
     * @param preSignedUrl &lt;p&gt;The URL that contains a Signature Version 4 signed request for the&lt;code&gt;CopyDBClusterSnapshot&lt;/code&gt; API action in the Amazon Web Services Region that contains the source cluster snapshot to copy. You must use the &lt;code&gt;PreSignedUrl&lt;/code&gt; parameter when copying a cluster snapshot from another Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;If you are using an Amazon Web Services SDK tool or the CLI, you can specify &lt;code&gt;SourceRegion&lt;/code&gt; (or &lt;code&gt;--source-region&lt;/code&gt; for the CLI) instead of specifying &lt;code&gt;PreSignedUrl&lt;/code&gt; manually. Specifying &lt;code&gt;SourceRegion&lt;/code&gt; autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;The presigned URL must be a valid request for the &lt;code&gt;CopyDBClusterSnapshot&lt;/code&gt; API action that can be executed in the source Amazon Web Services Region that contains the cluster snapshot to be copied. The presigned URL request must contain the following parameter values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceRegion&lt;/code&gt; - The ID of the region that contains the snapshot to be copied.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; - The identifier for the the encrypted cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted cluster snapshot from the us-east-1 Amazon Web Services Region, then your &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; looks something like the following: &lt;code&gt;arn:aws:rds:us-east-1:12345678012:sample-cluster:sample-cluster-snapshot&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; - The identifier for the new cluster snapshot to be created. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param copyTags Set to &lt;code&gt;true&lt;/code&gt; to copy all tags from the source cluster snapshot to the target cluster snapshot, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param tags The tags to be assigned to the cluster snapshot. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopyDBClusterSnapshotAsync(String sourceDBClusterSnapshotIdentifier, String targetDBClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String kmsKeyId, String preSignedUrl, Boolean copyTags, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CopyDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCopyDBClusterSnapshotValidateBeforeCall(sourceDBClusterSnapshotIdentifier, targetDBClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, preSignedUrl, copyTags, tags, _callback);
        Type localVarReturnType = new TypeToken<CopyDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBCluster
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt; (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this cluster.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;docdb&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones A list of Amazon EC2 Availability Zones that instances in the cluster can be created in. (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the cluster parameter group to associate with this cluster. (optional)
     * @param vpcSecurityGroupIds A list of EC2 VPC security groups to associate with this cluster.  (optional)
     * @param dbSubnetGroupName &lt;p&gt;A subnet group to associate with this cluster.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion The version number of the database engine to use. The &lt;code&gt;--engine-version&lt;/code&gt; will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version. (optional)
     * @param port The port number on which the instances in the cluster accept connections. (optional)
     * @param masterUsername &lt;p&gt;The name of the master user for the cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 63 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be a reserved word for the chosen database engine. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param masterUserPassword &lt;p&gt;The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;p&gt;Constraints: Must contain from 8 to 100 characters.&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter. &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param tags The tags to be assigned to the cluster. (optional)
     * @param storageEncrypted Specifies whether the cluster is encrypted. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier for an encrypted cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified in &lt;code&gt;KmsKeyId&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt;, Amazon DocumentDB uses your default encryption key. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.&lt;/p&gt; (optional)
     * @param preSignedUrl Not currently supported.  (optional)
     * @param enableCloudwatchLogsExports A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html\&quot;&gt; Auditing Amazon DocumentDB Events&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html\&quot;&gt; Profiling Amazon DocumentDB Operations&lt;/a&gt;.  (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param globalClusterIdentifier The cluster identifier of the new global cluster. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterCall(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String globalClusterIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (backupRetentionPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BackupRetentionPeriod", backupRetentionPeriod));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (masterUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUsername", masterUsername));
        }

        if (masterUserPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUserPassword", masterUserPassword));
        }

        if (preferredBackupWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredBackupWindow", preferredBackupWindow));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (storageEncrypted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageEncrypted", storageEncrypted));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (preSignedUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreSignedUrl", preSignedUrl));
        }

        if (enableCloudwatchLogsExports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnableCloudwatchLogsExports", enableCloudwatchLogsExports));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBClusterValidateBeforeCall(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String globalClusterIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETCreateDBCluster(Async)");
        }

        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETCreateDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBCluster(Async)");
        }

        return gETCreateDBClusterCall(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableCloudwatchLogsExports, deletionProtection, globalClusterIdentifier, _callback);

    }

    /**
     * 
     * Creates a new Amazon DocumentDB cluster.
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt; (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this cluster.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;docdb&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones A list of Amazon EC2 Availability Zones that instances in the cluster can be created in. (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the cluster parameter group to associate with this cluster. (optional)
     * @param vpcSecurityGroupIds A list of EC2 VPC security groups to associate with this cluster.  (optional)
     * @param dbSubnetGroupName &lt;p&gt;A subnet group to associate with this cluster.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion The version number of the database engine to use. The &lt;code&gt;--engine-version&lt;/code&gt; will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version. (optional)
     * @param port The port number on which the instances in the cluster accept connections. (optional)
     * @param masterUsername &lt;p&gt;The name of the master user for the cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 63 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be a reserved word for the chosen database engine. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param masterUserPassword &lt;p&gt;The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;p&gt;Constraints: Must contain from 8 to 100 characters.&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter. &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param tags The tags to be assigned to the cluster. (optional)
     * @param storageEncrypted Specifies whether the cluster is encrypted. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier for an encrypted cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified in &lt;code&gt;KmsKeyId&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt;, Amazon DocumentDB uses your default encryption key. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.&lt;/p&gt; (optional)
     * @param preSignedUrl Not currently supported.  (optional)
     * @param enableCloudwatchLogsExports A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html\&quot;&gt; Auditing Amazon DocumentDB Events&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html\&quot;&gt; Profiling Amazon DocumentDB Operations&lt;/a&gt;.  (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param globalClusterIdentifier The cluster identifier of the new global cluster. (optional)
     * @return CreateDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterResult gETCreateDBCluster(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String globalClusterIdentifier) throws ApiException {
        ApiResponse<CreateDBClusterResult> localVarResp = gETCreateDBClusterWithHttpInfo(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableCloudwatchLogsExports, deletionProtection, globalClusterIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new Amazon DocumentDB cluster.
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt; (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this cluster.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;docdb&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones A list of Amazon EC2 Availability Zones that instances in the cluster can be created in. (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the cluster parameter group to associate with this cluster. (optional)
     * @param vpcSecurityGroupIds A list of EC2 VPC security groups to associate with this cluster.  (optional)
     * @param dbSubnetGroupName &lt;p&gt;A subnet group to associate with this cluster.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion The version number of the database engine to use. The &lt;code&gt;--engine-version&lt;/code&gt; will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version. (optional)
     * @param port The port number on which the instances in the cluster accept connections. (optional)
     * @param masterUsername &lt;p&gt;The name of the master user for the cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 63 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be a reserved word for the chosen database engine. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param masterUserPassword &lt;p&gt;The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;p&gt;Constraints: Must contain from 8 to 100 characters.&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter. &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param tags The tags to be assigned to the cluster. (optional)
     * @param storageEncrypted Specifies whether the cluster is encrypted. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier for an encrypted cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified in &lt;code&gt;KmsKeyId&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt;, Amazon DocumentDB uses your default encryption key. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.&lt;/p&gt; (optional)
     * @param preSignedUrl Not currently supported.  (optional)
     * @param enableCloudwatchLogsExports A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html\&quot;&gt; Auditing Amazon DocumentDB Events&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html\&quot;&gt; Profiling Amazon DocumentDB Operations&lt;/a&gt;.  (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param globalClusterIdentifier The cluster identifier of the new global cluster. (optional)
     * @return ApiResponse&lt;CreateDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterResult> gETCreateDBClusterWithHttpInfo(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String globalClusterIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBClusterValidateBeforeCall(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableCloudwatchLogsExports, deletionProtection, globalClusterIdentifier, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new Amazon DocumentDB cluster.
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt; (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this cluster.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;docdb&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones A list of Amazon EC2 Availability Zones that instances in the cluster can be created in. (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the cluster parameter group to associate with this cluster. (optional)
     * @param vpcSecurityGroupIds A list of EC2 VPC security groups to associate with this cluster.  (optional)
     * @param dbSubnetGroupName &lt;p&gt;A subnet group to associate with this cluster.&lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion The version number of the database engine to use. The &lt;code&gt;--engine-version&lt;/code&gt; will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version. (optional)
     * @param port The port number on which the instances in the cluster accept connections. (optional)
     * @param masterUsername &lt;p&gt;The name of the master user for the cluster.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 63 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be a reserved word for the chosen database engine. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param masterUserPassword &lt;p&gt;The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;p&gt;Constraints: Must contain from 8 to 100 characters.&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter. &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param tags The tags to be assigned to the cluster. (optional)
     * @param storageEncrypted Specifies whether the cluster is encrypted. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier for an encrypted cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified in &lt;code&gt;KmsKeyId&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the &lt;code&gt;StorageEncrypted&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt;, Amazon DocumentDB uses your default encryption key. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.&lt;/p&gt; (optional)
     * @param preSignedUrl Not currently supported.  (optional)
     * @param enableCloudwatchLogsExports A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html\&quot;&gt; Auditing Amazon DocumentDB Events&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html\&quot;&gt; Profiling Amazon DocumentDB Operations&lt;/a&gt;.  (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param globalClusterIdentifier The cluster identifier of the new global cluster. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterAsync(String dbClusterIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, String dbSubnetGroupName, String engineVersion, Integer port, String masterUsername, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean storageEncrypted, String kmsKeyId, String preSignedUrl, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String globalClusterIdentifier, final ApiCallback<CreateDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBClusterValidateBeforeCall(dbClusterIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, dbSubnetGroupName, engineVersion, port, masterUsername, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, tags, storageEncrypted, kmsKeyId, preSignedUrl, enableCloudwatchLogsExports, deletionProtection, globalClusterIdentifier, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBClusterParameterGroup
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must not match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The cluster parameter group family name. (required)
     * @param description The description for the cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the cluster parameter group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterParameterGroupCall(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (dbParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupFamily", dbParameterGroupFamily));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBClusterParameterGroupValidateBeforeCall(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'dbParameterGroupFamily' is set
        if (dbParameterGroupFamily == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupFamily' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBClusterParameterGroup(Async)");
        }

        return gETCreateDBClusterParameterGroupCall(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a cluster parameter group apply to all of the instances in a cluster.&lt;/p&gt; &lt;p&gt;A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the &lt;code&gt;default.docdb3.6&lt;/code&gt; cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\&quot;&gt; create a new parameter group&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\&quot;&gt; copy an existing parameter group&lt;/a&gt;, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\&quot;&gt; Modifying Amazon DocumentDB Cluster Parameter Groups&lt;/a&gt;. &lt;/p&gt;
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must not match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The cluster parameter group family name. (required)
     * @param description The description for the cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the cluster parameter group. (optional)
     * @return CreateDBClusterParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterParameterGroupResult gETCreateDBClusterParameterGroup(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateDBClusterParameterGroupResult> localVarResp = gETCreateDBClusterParameterGroupWithHttpInfo(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a cluster parameter group apply to all of the instances in a cluster.&lt;/p&gt; &lt;p&gt;A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the &lt;code&gt;default.docdb3.6&lt;/code&gt; cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\&quot;&gt; create a new parameter group&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\&quot;&gt; copy an existing parameter group&lt;/a&gt;, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\&quot;&gt; Modifying Amazon DocumentDB Cluster Parameter Groups&lt;/a&gt;. &lt;/p&gt;
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must not match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The cluster parameter group family name. (required)
     * @param description The description for the cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the cluster parameter group. (optional)
     * @return ApiResponse&lt;CreateDBClusterParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterParameterGroupResult> gETCreateDBClusterParameterGroupWithHttpInfo(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a cluster parameter group apply to all of the instances in a cluster.&lt;/p&gt; &lt;p&gt;A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the &lt;code&gt;default.docdb3.6&lt;/code&gt; cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\&quot;&gt; create a new parameter group&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\&quot;&gt; copy an existing parameter group&lt;/a&gt;, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\&quot;&gt; Modifying Amazon DocumentDB Cluster Parameter Groups&lt;/a&gt;. &lt;/p&gt;
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must not match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This value is stored as a lowercase string.&lt;/p&gt; &lt;/note&gt; (required)
     * @param dbParameterGroupFamily The cluster parameter group family name. (required)
     * @param description The description for the cluster parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the cluster parameter group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterParameterGroupAsync(String dbClusterParameterGroupName, String dbParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateDBClusterParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, dbParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBClusterSnapshot
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the cluster to create a snapshot for. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the cluster snapshot. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterSnapshotCall(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBClusterSnapshotValidateBeforeCall(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterSnapshotIdentifier' is set
        if (dbClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterSnapshotIdentifier' when calling gETCreateDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETCreateDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBClusterSnapshot(Async)");
        }

        return gETCreateDBClusterSnapshotCall(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * Creates a snapshot of a cluster. 
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the cluster to create a snapshot for. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the cluster snapshot. (optional)
     * @return CreateDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterSnapshotResult gETCreateDBClusterSnapshot(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateDBClusterSnapshotResult> localVarResp = gETCreateDBClusterSnapshotWithHttpInfo(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a snapshot of a cluster. 
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the cluster to create a snapshot for. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the cluster snapshot. (optional)
     * @return ApiResponse&lt;CreateDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterSnapshotResult> gETCreateDBClusterSnapshotWithHttpInfo(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBClusterSnapshotValidateBeforeCall(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a snapshot of a cluster. 
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster-snapshot1&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier &lt;p&gt;The identifier of the cluster to create a snapshot for. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the cluster snapshot. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBClusterSnapshotAsync(String dbClusterSnapshotIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBClusterSnapshotValidateBeforeCall(dbClusterSnapshotIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBInstance
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbInstanceClass The compute and memory capacity of the instance; for example, &lt;code&gt;db.r5.large&lt;/code&gt;.  (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this instance.&lt;/p&gt; &lt;p&gt;Valid value: &lt;code&gt;docdb&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier The identifier of the cluster that the instance will belong to. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZone &lt;p&gt;The Amazon EC2 Availability Zone that the instance is created in. &lt;/p&gt; &lt;p&gt;Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;us-east-1d&lt;/code&gt; &lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade &lt;p&gt;This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags The tags to be assigned to the instance. You can assign up to 10 tags to an instance. (optional)
     * @param copyTagsToSnapshot A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid values: 0-15&lt;/p&gt; (optional)
     * @param enablePerformanceInsights A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\&quot;&gt;Using Amazon Performance Insights&lt;/a&gt;. (optional)
     * @param performanceInsightsKMSKeyId &lt;p&gt;The KMS key identifier for encryption of Performance Insights data.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBInstanceCall(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String availabilityZone, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (dbInstanceClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceClass", dbInstanceClass));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (availabilityZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AvailabilityZone", availabilityZone));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (autoMinorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoMinorVersionUpgrade", autoMinorVersionUpgrade));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (copyTagsToSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTagsToSnapshot", copyTagsToSnapshot));
        }

        if (promotionTier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PromotionTier", promotionTier));
        }

        if (enablePerformanceInsights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnablePerformanceInsights", enablePerformanceInsights));
        }

        if (performanceInsightsKMSKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerformanceInsightsKMSKeyId", performanceInsightsKMSKeyId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBInstanceValidateBeforeCall(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String availabilityZone, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'dbInstanceClass' is set
        if (dbInstanceClass == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceClass' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBInstance(Async)");
        }

        return gETCreateDBInstanceCall(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZone, preferredMaintenanceWindow, autoMinorVersionUpgrade, tags, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId, _callback);

    }

    /**
     * 
     * Creates a new instance.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbInstanceClass The compute and memory capacity of the instance; for example, &lt;code&gt;db.r5.large&lt;/code&gt;.  (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this instance.&lt;/p&gt; &lt;p&gt;Valid value: &lt;code&gt;docdb&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier The identifier of the cluster that the instance will belong to. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZone &lt;p&gt;The Amazon EC2 Availability Zone that the instance is created in. &lt;/p&gt; &lt;p&gt;Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;us-east-1d&lt;/code&gt; &lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade &lt;p&gt;This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags The tags to be assigned to the instance. You can assign up to 10 tags to an instance. (optional)
     * @param copyTagsToSnapshot A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid values: 0-15&lt;/p&gt; (optional)
     * @param enablePerformanceInsights A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\&quot;&gt;Using Amazon Performance Insights&lt;/a&gt;. (optional)
     * @param performanceInsightsKMSKeyId &lt;p&gt;The KMS key identifier for encryption of Performance Insights data.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.&lt;/p&gt; (optional)
     * @return CreateDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBInstanceResult gETCreateDBInstance(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String availabilityZone, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId) throws ApiException {
        ApiResponse<CreateDBInstanceResult> localVarResp = gETCreateDBInstanceWithHttpInfo(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZone, preferredMaintenanceWindow, autoMinorVersionUpgrade, tags, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new instance.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbInstanceClass The compute and memory capacity of the instance; for example, &lt;code&gt;db.r5.large&lt;/code&gt;.  (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this instance.&lt;/p&gt; &lt;p&gt;Valid value: &lt;code&gt;docdb&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier The identifier of the cluster that the instance will belong to. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZone &lt;p&gt;The Amazon EC2 Availability Zone that the instance is created in. &lt;/p&gt; &lt;p&gt;Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;us-east-1d&lt;/code&gt; &lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade &lt;p&gt;This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags The tags to be assigned to the instance. You can assign up to 10 tags to an instance. (optional)
     * @param copyTagsToSnapshot A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid values: 0-15&lt;/p&gt; (optional)
     * @param enablePerformanceInsights A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\&quot;&gt;Using Amazon Performance Insights&lt;/a&gt;. (optional)
     * @param performanceInsightsKMSKeyId &lt;p&gt;The KMS key identifier for encryption of Performance Insights data.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBInstanceResult> gETCreateDBInstanceWithHttpInfo(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String availabilityZone, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBInstanceValidateBeforeCall(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZone, preferredMaintenanceWindow, autoMinorVersionUpgrade, tags, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId, null);
        Type localVarReturnType = new TypeToken<CreateDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new instance.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbInstanceClass The compute and memory capacity of the instance; for example, &lt;code&gt;db.r5.large&lt;/code&gt;.  (required)
     * @param engine &lt;p&gt;The name of the database engine to be used for this instance.&lt;/p&gt; &lt;p&gt;Valid value: &lt;code&gt;docdb&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbClusterIdentifier The identifier of the cluster that the instance will belong to. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZone &lt;p&gt;The Amazon EC2 Availability Zone that the instance is created in. &lt;/p&gt; &lt;p&gt;Default: A random, system-chosen Availability Zone in the endpoint&#39;s Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;us-east-1d&lt;/code&gt; &lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade &lt;p&gt;This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags The tags to be assigned to the instance. You can assign up to 10 tags to an instance. (optional)
     * @param copyTagsToSnapshot A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid values: 0-15&lt;/p&gt; (optional)
     * @param enablePerformanceInsights A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\&quot;&gt;Using Amazon Performance Insights&lt;/a&gt;. (optional)
     * @param performanceInsightsKMSKeyId &lt;p&gt;The KMS key identifier for encryption of Performance Insights data.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBInstanceAsync(String dbInstanceIdentifier, String dbInstanceClass, String engine, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String availabilityZone, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, List<GETAddTagsToResourceTagsParameterInner> tags, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, final ApiCallback<CreateDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBInstanceValidateBeforeCall(dbInstanceIdentifier, dbInstanceClass, engine, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZone, preferredMaintenanceWindow, autoMinorVersionUpgrade, tags, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId, _callback);
        Type localVarReturnType = new TypeToken<CreateDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateDBSubnetGroup
     * @param dbSubnetGroupName &lt;p&gt;The name for the subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbSubnetGroupDescription The description for the subnet group. (required)
     * @param subnetIds The Amazon EC2 subnet IDs for the subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the subnet group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBSubnetGroupCall(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (dbSubnetGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupDescription", dbSubnetGroupDescription));
        }

        if (subnetIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SubnetIds", subnetIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateDBSubnetGroupValidateBeforeCall(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbSubnetGroupName' is set
        if (dbSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbSubnetGroupName' when calling gETCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'dbSubnetGroupDescription' is set
        if (dbSubnetGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'dbSubnetGroupDescription' when calling gETCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'subnetIds' is set
        if (subnetIds == null) {
            throw new ApiException("Missing the required parameter 'subnetIds' when calling gETCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateDBSubnetGroup(Async)");
        }

        return gETCreateDBSubnetGroupCall(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbSubnetGroupDescription The description for the subnet group. (required)
     * @param subnetIds The Amazon EC2 subnet IDs for the subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the subnet group. (optional)
     * @return CreateDBSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBSubnetGroupResult gETCreateDBSubnetGroup(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateDBSubnetGroupResult> localVarResp = gETCreateDBSubnetGroupWithHttpInfo(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbSubnetGroupDescription The description for the subnet group. (required)
     * @param subnetIds The Amazon EC2 subnet IDs for the subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the subnet group. (optional)
     * @return ApiResponse&lt;CreateDBSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBSubnetGroupResult> gETCreateDBSubnetGroupWithHttpInfo(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateDBSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param dbSubnetGroupDescription The description for the subnet group. (required)
     * @param subnetIds The Amazon EC2 subnet IDs for the subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags The tags to be assigned to the subnet group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateDBSubnetGroupAsync(String dbSubnetGroupName, String dbSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateDBSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, dbSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateDBSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateEventSubscription
     * @param subscriptionName &lt;p&gt;The name of the subscription.&lt;/p&gt; &lt;p&gt;Constraints: The name must be fewer than 255 characters.&lt;/p&gt; (required)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS creates the ARN when you create a topic and subscribe to it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, you would set this parameter to &lt;code&gt;db-instance&lt;/code&gt;. If this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-cluster&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt;, &lt;code&gt;db-cluster-snapshot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a &lt;code&gt;SourceType&lt;/code&gt; that you want to subscribe to.  (optional)
     * @param sourceIds &lt;p&gt;The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can&#39;t end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;SourceIds&lt;/code&gt; are provided, &lt;code&gt;SourceType&lt;/code&gt; must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is an instance, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enabled  A Boolean value; set to &lt;code&gt;true&lt;/code&gt; to activate the subscription, set to &lt;code&gt;false&lt;/code&gt; to create the subscription but not active it.  (optional)
     * @param tags The tags to be assigned to the event subscription. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateEventSubscriptionCall(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (snsTopicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnsTopicArn", snsTopicArn));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (eventCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EventCategories", eventCategories));
        }

        if (sourceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SourceIds", sourceIds));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Enabled", enabled));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateEventSubscriptionValidateBeforeCall(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETCreateEventSubscription(Async)");
        }

        // verify the required parameter 'snsTopicArn' is set
        if (snsTopicArn == null) {
            throw new ApiException("Missing the required parameter 'snsTopicArn' when calling gETCreateEventSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateEventSubscription(Async)");
        }

        return gETCreateEventSubscriptionCall(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (&lt;code&gt;SourceIds&lt;/code&gt;) that trigger the events, and you can provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events that you want to be notified of. For example, you can specify &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt;, &lt;code&gt;SourceIds &#x3D; mydbinstance1, mydbinstance2&lt;/code&gt; and &lt;code&gt;EventCategories &#x3D; Availability, Backup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt; (such as &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; myDBInstance1&lt;/code&gt;), you are notified of all the &lt;code&gt;db-instance&lt;/code&gt; events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but do not specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the &lt;code&gt;SourceType&lt;/code&gt; or the &lt;code&gt;SourceIdentifier&lt;/code&gt;, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.&lt;/p&gt;
     * @param subscriptionName &lt;p&gt;The name of the subscription.&lt;/p&gt; &lt;p&gt;Constraints: The name must be fewer than 255 characters.&lt;/p&gt; (required)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS creates the ARN when you create a topic and subscribe to it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, you would set this parameter to &lt;code&gt;db-instance&lt;/code&gt;. If this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-cluster&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt;, &lt;code&gt;db-cluster-snapshot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a &lt;code&gt;SourceType&lt;/code&gt; that you want to subscribe to.  (optional)
     * @param sourceIds &lt;p&gt;The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can&#39;t end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;SourceIds&lt;/code&gt; are provided, &lt;code&gt;SourceType&lt;/code&gt; must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is an instance, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enabled  A Boolean value; set to &lt;code&gt;true&lt;/code&gt; to activate the subscription, set to &lt;code&gt;false&lt;/code&gt; to create the subscription but not active it.  (optional)
     * @param tags The tags to be assigned to the event subscription. (optional)
     * @return CreateEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventSubscriptionResult gETCreateEventSubscription(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateEventSubscriptionResult> localVarResp = gETCreateEventSubscriptionWithHttpInfo(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (&lt;code&gt;SourceIds&lt;/code&gt;) that trigger the events, and you can provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events that you want to be notified of. For example, you can specify &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt;, &lt;code&gt;SourceIds &#x3D; mydbinstance1, mydbinstance2&lt;/code&gt; and &lt;code&gt;EventCategories &#x3D; Availability, Backup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt; (such as &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; myDBInstance1&lt;/code&gt;), you are notified of all the &lt;code&gt;db-instance&lt;/code&gt; events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but do not specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the &lt;code&gt;SourceType&lt;/code&gt; or the &lt;code&gt;SourceIdentifier&lt;/code&gt;, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.&lt;/p&gt;
     * @param subscriptionName &lt;p&gt;The name of the subscription.&lt;/p&gt; &lt;p&gt;Constraints: The name must be fewer than 255 characters.&lt;/p&gt; (required)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS creates the ARN when you create a topic and subscribe to it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, you would set this parameter to &lt;code&gt;db-instance&lt;/code&gt;. If this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-cluster&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt;, &lt;code&gt;db-cluster-snapshot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a &lt;code&gt;SourceType&lt;/code&gt; that you want to subscribe to.  (optional)
     * @param sourceIds &lt;p&gt;The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can&#39;t end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;SourceIds&lt;/code&gt; are provided, &lt;code&gt;SourceType&lt;/code&gt; must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is an instance, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enabled  A Boolean value; set to &lt;code&gt;true&lt;/code&gt; to activate the subscription, set to &lt;code&gt;false&lt;/code&gt; to create the subscription but not active it.  (optional)
     * @param tags The tags to be assigned to the event subscription. (optional)
     * @return ApiResponse&lt;CreateEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEventSubscriptionResult> gETCreateEventSubscriptionWithHttpInfo(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateEventSubscriptionValidateBeforeCall(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags, null);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (&lt;code&gt;SourceIds&lt;/code&gt;) that trigger the events, and you can provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events that you want to be notified of. For example, you can specify &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt;, &lt;code&gt;SourceIds &#x3D; mydbinstance1, mydbinstance2&lt;/code&gt; and &lt;code&gt;EventCategories &#x3D; Availability, Backup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt; (such as &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; myDBInstance1&lt;/code&gt;), you are notified of all the &lt;code&gt;db-instance&lt;/code&gt; events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but do not specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the &lt;code&gt;SourceType&lt;/code&gt; or the &lt;code&gt;SourceIdentifier&lt;/code&gt;, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.&lt;/p&gt;
     * @param subscriptionName &lt;p&gt;The name of the subscription.&lt;/p&gt; &lt;p&gt;Constraints: The name must be fewer than 255 characters.&lt;/p&gt; (required)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. Amazon SNS creates the ARN when you create a topic and subscribe to it. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, you would set this parameter to &lt;code&gt;db-instance&lt;/code&gt;. If this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-cluster&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt;, &lt;code&gt;db-cluster-snapshot&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a &lt;code&gt;SourceType&lt;/code&gt; that you want to subscribe to.  (optional)
     * @param sourceIds &lt;p&gt;The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can&#39;t end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;SourceIds&lt;/code&gt; are provided, &lt;code&gt;SourceType&lt;/code&gt; must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is an instance, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a security group, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a parameter group, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is a snapshot, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enabled  A Boolean value; set to &lt;code&gt;true&lt;/code&gt; to activate the subscription, set to &lt;code&gt;false&lt;/code&gt; to create the subscription but not active it.  (optional)
     * @param tags The tags to be assigned to the event subscription. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateEventSubscriptionAsync(String subscriptionName, String snsTopicArn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<String> eventCategories, List<String> sourceIds, Boolean enabled, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateEventSubscriptionValidateBeforeCall(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, eventCategories, sourceIds, enabled, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateGlobalCluster
     * @param globalClusterIdentifier The cluster identifier of the new global cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceDBClusterIdentifier The Amazon Resource Name (ARN) to use as the primary cluster of the global cluster. This parameter is optional. (optional)
     * @param engine The name of the database engine to be used for this cluster. (optional)
     * @param engineVersion The engine version of the global cluster. (optional)
     * @param deletionProtection The deletion protection setting for the new global cluster. The global cluster can&#39;t be deleted when deletion protection is enabled.  (optional)
     * @param databaseName The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon DocumentDB will not create a database in the global cluster you are creating. (optional)
     * @param storageEncrypted The storage encryption setting for the new global cluster.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateGlobalClusterCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, String databaseName, Boolean storageEncrypted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (sourceDBClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBClusterIdentifier", sourceDBClusterIdentifier));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (databaseName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DatabaseName", databaseName));
        }

        if (storageEncrypted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StorageEncrypted", storageEncrypted));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, String databaseName, Boolean storageEncrypted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETCreateGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateGlobalCluster(Async)");
        }

        return gETCreateGlobalClusterCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, databaseName, storageEncrypted, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier of the new global cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceDBClusterIdentifier The Amazon Resource Name (ARN) to use as the primary cluster of the global cluster. This parameter is optional. (optional)
     * @param engine The name of the database engine to be used for this cluster. (optional)
     * @param engineVersion The engine version of the global cluster. (optional)
     * @param deletionProtection The deletion protection setting for the new global cluster. The global cluster can&#39;t be deleted when deletion protection is enabled.  (optional)
     * @param databaseName The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon DocumentDB will not create a database in the global cluster you are creating. (optional)
     * @param storageEncrypted The storage encryption setting for the new global cluster.  (optional)
     * @return CreateGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalClusterResult gETCreateGlobalCluster(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, String databaseName, Boolean storageEncrypted) throws ApiException {
        ApiResponse<CreateGlobalClusterResult> localVarResp = gETCreateGlobalClusterWithHttpInfo(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, databaseName, storageEncrypted);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier of the new global cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceDBClusterIdentifier The Amazon Resource Name (ARN) to use as the primary cluster of the global cluster. This parameter is optional. (optional)
     * @param engine The name of the database engine to be used for this cluster. (optional)
     * @param engineVersion The engine version of the global cluster. (optional)
     * @param deletionProtection The deletion protection setting for the new global cluster. The global cluster can&#39;t be deleted when deletion protection is enabled.  (optional)
     * @param databaseName The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon DocumentDB will not create a database in the global cluster you are creating. (optional)
     * @param storageEncrypted The storage encryption setting for the new global cluster.  (optional)
     * @return ApiResponse&lt;CreateGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalClusterResult> gETCreateGlobalClusterWithHttpInfo(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, String databaseName, Boolean storageEncrypted) throws ApiException {
        okhttp3.Call localVarCall = gETCreateGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, databaseName, storageEncrypted, null);
        Type localVarReturnType = new TypeToken<CreateGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier of the new global cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceDBClusterIdentifier The Amazon Resource Name (ARN) to use as the primary cluster of the global cluster. This parameter is optional. (optional)
     * @param engine The name of the database engine to be used for this cluster. (optional)
     * @param engineVersion The engine version of the global cluster. (optional)
     * @param deletionProtection The deletion protection setting for the new global cluster. The global cluster can&#39;t be deleted when deletion protection is enabled.  (optional)
     * @param databaseName The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon DocumentDB will not create a database in the global cluster you are creating. (optional)
     * @param storageEncrypted The storage encryption setting for the new global cluster.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateGlobalClusterAsync(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceDBClusterIdentifier, String engine, String engineVersion, Boolean deletionProtection, String databaseName, Boolean storageEncrypted, final ApiCallback<CreateGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceDBClusterIdentifier, engine, engineVersion, deletionProtection, databaseName, storageEncrypted, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBCluster
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier for the cluster to be deleted. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing &lt;code&gt;DBClusterIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final cluster snapshot is created before the cluster is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no cluster snapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a cluster snapshot is created before the DB cluster is deleted. &lt;/p&gt; &lt;note&gt; &lt;p&gt;If &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, you must specify a &lt;code&gt;FinalDBSnapshotIdentifier&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The cluster snapshot identifier of the new cluster snapshot created when &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; Specifying this parameter and also setting the &lt;code&gt;SkipFinalShapshot&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; results in an error. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (skipFinalSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SkipFinalSnapshot", skipFinalSnapshot));
        }

        if (finalDBSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FinalDBSnapshotIdentifier", finalDBSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETDeleteDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBCluster(Async)");
        }

        return gETDeleteDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.&lt;/p&gt; &lt;p/&gt;
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier for the cluster to be deleted. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing &lt;code&gt;DBClusterIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final cluster snapshot is created before the cluster is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no cluster snapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a cluster snapshot is created before the DB cluster is deleted. &lt;/p&gt; &lt;note&gt; &lt;p&gt;If &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, you must specify a &lt;code&gt;FinalDBSnapshotIdentifier&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The cluster snapshot identifier of the new cluster snapshot created when &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; Specifying this parameter and also setting the &lt;code&gt;SkipFinalShapshot&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; results in an error. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DeleteDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterResult gETDeleteDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier) throws ApiException {
        ApiResponse<DeleteDBClusterResult> localVarResp = gETDeleteDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.&lt;/p&gt; &lt;p/&gt;
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier for the cluster to be deleted. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing &lt;code&gt;DBClusterIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final cluster snapshot is created before the cluster is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no cluster snapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a cluster snapshot is created before the DB cluster is deleted. &lt;/p&gt; &lt;note&gt; &lt;p&gt;If &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, you must specify a &lt;code&gt;FinalDBSnapshotIdentifier&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The cluster snapshot identifier of the new cluster snapshot created when &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; Specifying this parameter and also setting the &lt;code&gt;SkipFinalShapshot&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; results in an error. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DeleteDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterResult> gETDeleteDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.&lt;/p&gt; &lt;p/&gt;
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier for the cluster to be deleted. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing &lt;code&gt;DBClusterIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param skipFinalSnapshot &lt;p&gt; Determines whether a final cluster snapshot is created before the cluster is deleted. If &lt;code&gt;true&lt;/code&gt; is specified, no cluster snapshot is created. If &lt;code&gt;false&lt;/code&gt; is specified, a cluster snapshot is created before the DB cluster is deleted. &lt;/p&gt; &lt;note&gt; &lt;p&gt;If &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, you must specify a &lt;code&gt;FinalDBSnapshotIdentifier&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param finalDBSnapshotIdentifier &lt;p&gt; The cluster snapshot identifier of the new cluster snapshot created when &lt;code&gt;SkipFinalSnapshot&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; Specifying this parameter and also setting the &lt;code&gt;SkipFinalShapshot&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; results in an error. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 255 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean skipFinalSnapshot, String finalDBSnapshotIdentifier, final ApiCallback<DeleteDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalSnapshot, finalDBSnapshotIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBClusterParameterGroup
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any clusters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterParameterGroupCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBClusterParameterGroupValidateBeforeCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETDeleteDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBClusterParameterGroup(Async)");
        }

        return gETDeleteDBClusterParameterGroupCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a specified cluster parameter group. The cluster parameter group to be deleted can&#39;t be associated with any clusters.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any clusters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteDBClusterParameterGroup(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteDBClusterParameterGroupWithHttpInfo(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes a specified cluster parameter group. The cluster parameter group to be deleted can&#39;t be associated with any clusters.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any clusters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteDBClusterParameterGroupWithHttpInfo(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified cluster parameter group. The cluster parameter group to be deleted can&#39;t be associated with any clusters.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the cluster parameter group.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be the name of an existing cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can&#39;t delete a default cluster parameter group.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be associated with any clusters.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterParameterGroupAsync(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBClusterSnapshot
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must be the name of an existing cluster snapshot in the &lt;code&gt;available&lt;/code&gt; state.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterSnapshotCall(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBClusterSnapshotValidateBeforeCall(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterSnapshotIdentifier' is set
        if (dbClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterSnapshotIdentifier' when calling gETDeleteDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBClusterSnapshot(Async)");
        }

        return gETDeleteDBClusterSnapshotCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must be the name of an existing cluster snapshot in the &lt;code&gt;available&lt;/code&gt; state.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterSnapshotResult gETDeleteDBClusterSnapshot(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteDBClusterSnapshotResult> localVarResp = gETDeleteDBClusterSnapshotWithHttpInfo(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must be the name of an existing cluster snapshot in the &lt;code&gt;available&lt;/code&gt; state.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterSnapshotResult> gETDeleteDBClusterSnapshotWithHttpInfo(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBClusterSnapshotValidateBeforeCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param dbClusterSnapshotIdentifier &lt;p&gt;The identifier of the cluster snapshot to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must be the name of an existing cluster snapshot in the &lt;code&gt;available&lt;/code&gt; state.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBClusterSnapshotAsync(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBClusterSnapshotValidateBeforeCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBInstance
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier for the instance to be deleted. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBInstanceCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBInstanceValidateBeforeCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETDeleteDBInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBInstance(Async)");
        }

        return gETDeleteDBInstanceCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a previously provisioned instance.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier for the instance to be deleted. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBInstanceResult gETDeleteDBInstance(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteDBInstanceResult> localVarResp = gETDeleteDBInstanceWithHttpInfo(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a previously provisioned instance.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier for the instance to be deleted. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBInstanceResult> gETDeleteDBInstanceWithHttpInfo(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a previously provisioned instance.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier for the instance to be deleted. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the name of an existing instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBInstanceAsync(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteDBSubnetGroup
     * @param dbSubnetGroupName &lt;p&gt;The name of the database subnet group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete the default subnet group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;p&gt;Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBSubnetGroupCall(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteDBSubnetGroupValidateBeforeCall(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbSubnetGroupName' is set
        if (dbSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbSubnetGroupName' when calling gETDeleteDBSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteDBSubnetGroup(Async)");
        }

        return gETDeleteDBSubnetGroupCall(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param dbSubnetGroupName &lt;p&gt;The name of the database subnet group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete the default subnet group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;p&gt;Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteDBSubnetGroup(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteDBSubnetGroupWithHttpInfo(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param dbSubnetGroupName &lt;p&gt;The name of the database subnet group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete the default subnet group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;p&gt;Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteDBSubnetGroupWithHttpInfo(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param dbSubnetGroupName &lt;p&gt;The name of the database subnet group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t delete the default subnet group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;p&gt;Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteDBSubnetGroupAsync(String dbSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteEventSubscription
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteEventSubscriptionCall(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteEventSubscriptionValidateBeforeCall(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETDeleteEventSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteEventSubscription(Async)");
        }

        return gETDeleteEventSubscriptionCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEventSubscriptionResult gETDeleteEventSubscription(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteEventSubscriptionResult> localVarResp = gETDeleteEventSubscriptionWithHttpInfo(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteEventSubscriptionResult> gETDeleteEventSubscriptionWithHttpInfo(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteEventSubscriptionValidateBeforeCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteEventSubscriptionAsync(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteEventSubscriptionValidateBeforeCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteGlobalCluster
     * @param globalClusterIdentifier The cluster identifier of the global cluster being deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteGlobalClusterCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETDeleteGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteGlobalCluster(Async)");
        }

        return gETDeleteGlobalClusterCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier of the global cluster being deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGlobalClusterResult gETDeleteGlobalCluster(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteGlobalClusterResult> localVarResp = gETDeleteGlobalClusterWithHttpInfo(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier of the global cluster being deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGlobalClusterResult> gETDeleteGlobalClusterWithHttpInfo(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier of the global cluster being deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteGlobalClusterAsync(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeCertificates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param certificateIdentifier &lt;p&gt;The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to &lt;code&gt;MaxRecords&lt;/code&gt; certificates is returned. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing &lt;code&gt;CertificateIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Minimum: 20&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum: 100&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeCertificates&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCertificatesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String certificateIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (certificateIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CertificateIdentifier", certificateIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeCertificatesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String certificateIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeCertificates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeCertificates(Async)");
        }

        return gETDescribeCertificatesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, certificateIdentifier, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param certificateIdentifier &lt;p&gt;The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to &lt;code&gt;MaxRecords&lt;/code&gt; certificates is returned. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing &lt;code&gt;CertificateIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Minimum: 20&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum: 100&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeCertificates&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return CertificateMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CertificateMessage gETDescribeCertificates(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String certificateIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<CertificateMessage> localVarResp = gETDescribeCertificatesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, certificateIdentifier, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param certificateIdentifier &lt;p&gt;The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to &lt;code&gt;MaxRecords&lt;/code&gt; certificates is returned. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing &lt;code&gt;CertificateIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Minimum: 20&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum: 100&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeCertificates&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;CertificateMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateMessage> gETDescribeCertificatesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String certificateIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, certificateIdentifier, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<CertificateMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param certificateIdentifier &lt;p&gt;The user-supplied certificate identifier. If this parameter is specified, information for only the specified certificate is returned. If this parameter is omitted, a list of up to &lt;code&gt;MaxRecords&lt;/code&gt; certificates is returned. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match an existing &lt;code&gt;CertificateIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Minimum: 20&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum: 100&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeCertificates&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCertificatesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String certificateIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<CertificateMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, certificateIdentifier, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<CertificateMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterParameterGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific cluster parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterParameterGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterParameterGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterParameterGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterParameterGroups(Async)");
        }

        return gETDescribeDBClusterParameterGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list contains only the description of the specified cluster parameter group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific cluster parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBClusterParameterGroupsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupsMessage gETDescribeDBClusterParameterGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBClusterParameterGroupsMessage> localVarResp = gETDescribeDBClusterParameterGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list contains only the description of the specified cluster parameter group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific cluster parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupsMessage> gETDescribeDBClusterParameterGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list contains only the description of the specified cluster parameter group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific cluster parameter group to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterParameterGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterParameterGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBClusterParameterGroupsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterParameterGroupName, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterParameters
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific cluster parameter group to return parameter details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source  A value that indicates to return only parameters for a specific source. Parameter sources can be &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, or &lt;code&gt;customer&lt;/code&gt;.  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterParametersCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Source", source));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterParametersValidateBeforeCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETDescribeDBClusterParameters(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterParameters(Async)");
        }

        return gETDescribeDBClusterParametersCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular cluster parameter group.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific cluster parameter group to return parameter details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source  A value that indicates to return only parameters for a specific source. Parameter sources can be &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, or &lt;code&gt;customer&lt;/code&gt;.  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBClusterParameterGroupDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupDetails gETDescribeDBClusterParameters(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBClusterParameterGroupDetails> localVarResp = gETDescribeDBClusterParametersWithHttpInfo(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular cluster parameter group.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific cluster parameter group to return parameter details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source  A value that indicates to return only parameters for a specific source. Parameter sources can be &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, or &lt;code&gt;customer&lt;/code&gt;.  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupDetails> gETDescribeDBClusterParametersWithHttpInfo(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterParametersValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular cluster parameter group.
     * @param dbClusterParameterGroupName &lt;p&gt;The name of a specific cluster parameter group to return parameter details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the name of an existing &lt;code&gt;DBClusterParameterGroup&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source  A value that indicates to return only parameters for a specific source. Parameter sources can be &lt;code&gt;engine&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt;, or &lt;code&gt;customer&lt;/code&gt;.  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterParametersAsync(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBClusterParameterGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterParametersValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterSnapshotAttributes
     * @param dbClusterSnapshotIdentifier The identifier for the cluster snapshot to describe the attributes for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterSnapshotAttributesCall(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterSnapshotAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterSnapshotAttributesValidateBeforeCall(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterSnapshotIdentifier' is set
        if (dbClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterSnapshotIdentifier' when calling gETDescribeDBClusterSnapshotAttributes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterSnapshotAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterSnapshotAttributes(Async)");
        }

        return gETDescribeDBClusterSnapshotAttributesCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When you share snapshots with other Amazon Web Services accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the cluster snapshot to describe the attributes for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeDBClusterSnapshotAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeDBClusterSnapshotAttributesResult gETDescribeDBClusterSnapshotAttributes(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeDBClusterSnapshotAttributesResult> localVarResp = gETDescribeDBClusterSnapshotAttributesWithHttpInfo(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When you share snapshots with other Amazon Web Services accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the cluster snapshot to describe the attributes for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeDBClusterSnapshotAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeDBClusterSnapshotAttributesResult> gETDescribeDBClusterSnapshotAttributesWithHttpInfo(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterSnapshotAttributesValidateBeforeCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeDBClusterSnapshotAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When you share snapshots with other Amazon Web Services accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the cluster snapshot to describe the attributes for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterSnapshotAttributesAsync(String dbClusterSnapshotIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeDBClusterSnapshotAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterSnapshotAttributesValidateBeforeCall(dbClusterSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeDBClusterSnapshotAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusterSnapshots
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can&#39;t be used with the &lt;code&gt;DBClusterSnapshotIdentifier&lt;/code&gt; parameter. This parameter is not case sensitive. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterSnapshotIdentifier &lt;p&gt;A specific cluster snapshot identifier to describe. This parameter can&#39;t be used with the &lt;code&gt;DBClusterIdentifier&lt;/code&gt; parameter. This value is stored as a lowercase string. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBClusterSnapshot&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If this identifier is for an automated snapshot, the &lt;code&gt;SnapshotType&lt;/code&gt; parameter must also be specified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param snapshotType &lt;p&gt;The type of cluster snapshots to be returned. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;automated&lt;/code&gt; - Return all cluster snapshots that Amazon DocumentDB has automatically created for your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manual&lt;/code&gt; - Return all cluster snapshots that you have manually created for your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;shared&lt;/code&gt; - Return all manual cluster snapshots that have been shared to your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;public&lt;/code&gt; - Return all cluster snapshots that have been marked as public.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;SnapshotType&lt;/code&gt; value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the &lt;code&gt;IncludeShared&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;. You can include public cluster snapshots with these results by setting the&lt;code&gt;IncludePublic&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;IncludeShared&lt;/code&gt; and &lt;code&gt;IncludePublic&lt;/code&gt; parameters don&#39;t apply for &lt;code&gt;SnapshotType&lt;/code&gt; values of &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;automated&lt;/code&gt;. The &lt;code&gt;IncludePublic&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;shared&lt;/code&gt;. The &lt;code&gt;IncludeShared&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param includeShared Set to &lt;code&gt;true&lt;/code&gt; to include shared manual cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param includePublic Set to &lt;code&gt;true&lt;/code&gt; to include manual cluster snapshots that are public and can be copied or restored by any Amazon Web Services account, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterSnapshotsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterSnapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (snapshotType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotType", snapshotType));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (includeShared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeShared", includeShared));
        }

        if (includePublic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludePublic", includePublic));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClusterSnapshotsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusterSnapshots(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusterSnapshots(Async)");
        }

        return gETDescribeDBClusterSnapshotsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic, _callback);

    }

    /**
     * 
     * Returns information about cluster snapshots. This API operation supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can&#39;t be used with the &lt;code&gt;DBClusterSnapshotIdentifier&lt;/code&gt; parameter. This parameter is not case sensitive. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterSnapshotIdentifier &lt;p&gt;A specific cluster snapshot identifier to describe. This parameter can&#39;t be used with the &lt;code&gt;DBClusterIdentifier&lt;/code&gt; parameter. This value is stored as a lowercase string. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBClusterSnapshot&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If this identifier is for an automated snapshot, the &lt;code&gt;SnapshotType&lt;/code&gt; parameter must also be specified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param snapshotType &lt;p&gt;The type of cluster snapshots to be returned. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;automated&lt;/code&gt; - Return all cluster snapshots that Amazon DocumentDB has automatically created for your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manual&lt;/code&gt; - Return all cluster snapshots that you have manually created for your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;shared&lt;/code&gt; - Return all manual cluster snapshots that have been shared to your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;public&lt;/code&gt; - Return all cluster snapshots that have been marked as public.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;SnapshotType&lt;/code&gt; value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the &lt;code&gt;IncludeShared&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;. You can include public cluster snapshots with these results by setting the&lt;code&gt;IncludePublic&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;IncludeShared&lt;/code&gt; and &lt;code&gt;IncludePublic&lt;/code&gt; parameters don&#39;t apply for &lt;code&gt;SnapshotType&lt;/code&gt; values of &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;automated&lt;/code&gt;. The &lt;code&gt;IncludePublic&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;shared&lt;/code&gt;. The &lt;code&gt;IncludeShared&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param includeShared Set to &lt;code&gt;true&lt;/code&gt; to include shared manual cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param includePublic Set to &lt;code&gt;true&lt;/code&gt; to include manual cluster snapshots that are public and can be copied or restored by any Amazon Web Services account, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @return DBClusterSnapshotMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterSnapshotMessage gETDescribeDBClusterSnapshots(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic) throws ApiException {
        ApiResponse<DBClusterSnapshotMessage> localVarResp = gETDescribeDBClusterSnapshotsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about cluster snapshots. This API operation supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can&#39;t be used with the &lt;code&gt;DBClusterSnapshotIdentifier&lt;/code&gt; parameter. This parameter is not case sensitive. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterSnapshotIdentifier &lt;p&gt;A specific cluster snapshot identifier to describe. This parameter can&#39;t be used with the &lt;code&gt;DBClusterIdentifier&lt;/code&gt; parameter. This value is stored as a lowercase string. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBClusterSnapshot&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If this identifier is for an automated snapshot, the &lt;code&gt;SnapshotType&lt;/code&gt; parameter must also be specified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param snapshotType &lt;p&gt;The type of cluster snapshots to be returned. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;automated&lt;/code&gt; - Return all cluster snapshots that Amazon DocumentDB has automatically created for your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manual&lt;/code&gt; - Return all cluster snapshots that you have manually created for your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;shared&lt;/code&gt; - Return all manual cluster snapshots that have been shared to your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;public&lt;/code&gt; - Return all cluster snapshots that have been marked as public.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;SnapshotType&lt;/code&gt; value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the &lt;code&gt;IncludeShared&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;. You can include public cluster snapshots with these results by setting the&lt;code&gt;IncludePublic&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;IncludeShared&lt;/code&gt; and &lt;code&gt;IncludePublic&lt;/code&gt; parameters don&#39;t apply for &lt;code&gt;SnapshotType&lt;/code&gt; values of &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;automated&lt;/code&gt;. The &lt;code&gt;IncludePublic&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;shared&lt;/code&gt;. The &lt;code&gt;IncludeShared&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param includeShared Set to &lt;code&gt;true&lt;/code&gt; to include shared manual cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param includePublic Set to &lt;code&gt;true&lt;/code&gt; to include manual cluster snapshots that are public and can be copied or restored by any Amazon Web Services account, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBClusterSnapshotMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterSnapshotMessage> gETDescribeDBClusterSnapshotsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClusterSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic, null);
        Type localVarReturnType = new TypeToken<DBClusterSnapshotMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about cluster snapshots. This API operation supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The ID of the cluster to retrieve the list of cluster snapshots for. This parameter can&#39;t be used with the &lt;code&gt;DBClusterSnapshotIdentifier&lt;/code&gt; parameter. This parameter is not case sensitive. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterSnapshotIdentifier &lt;p&gt;A specific cluster snapshot identifier to describe. This parameter can&#39;t be used with the &lt;code&gt;DBClusterIdentifier&lt;/code&gt; parameter. This value is stored as a lowercase string. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBClusterSnapshot&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If this identifier is for an automated snapshot, the &lt;code&gt;SnapshotType&lt;/code&gt; parameter must also be specified.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param snapshotType &lt;p&gt;The type of cluster snapshots to be returned. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;automated&lt;/code&gt; - Return all cluster snapshots that Amazon DocumentDB has automatically created for your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;manual&lt;/code&gt; - Return all cluster snapshots that you have manually created for your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;shared&lt;/code&gt; - Return all manual cluster snapshots that have been shared to your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;public&lt;/code&gt; - Return all cluster snapshots that have been marked as public.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;SnapshotType&lt;/code&gt; value, then both automated and manual cluster snapshots are returned. You can include shared cluster snapshots with these results by setting the &lt;code&gt;IncludeShared&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;. You can include public cluster snapshots with these results by setting the&lt;code&gt;IncludePublic&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;IncludeShared&lt;/code&gt; and &lt;code&gt;IncludePublic&lt;/code&gt; parameters don&#39;t apply for &lt;code&gt;SnapshotType&lt;/code&gt; values of &lt;code&gt;manual&lt;/code&gt; or &lt;code&gt;automated&lt;/code&gt;. The &lt;code&gt;IncludePublic&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;shared&lt;/code&gt;. The &lt;code&gt;IncludeShared&lt;/code&gt; parameter doesn&#39;t apply when &lt;code&gt;SnapshotType&lt;/code&gt; is set to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param includeShared Set to &lt;code&gt;true&lt;/code&gt; to include shared manual cluster snapshots from other Amazon Web Services accounts that this Amazon Web Services account has been given permission to copy or restore, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param includePublic Set to &lt;code&gt;true&lt;/code&gt; to include manual cluster snapshots that are public and can be copied or restored by any Amazon Web Services account, and otherwise &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClusterSnapshotsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String dbClusterSnapshotIdentifier, String snapshotType, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean includeShared, Boolean includePublic, final ApiCallback<DBClusterSnapshotMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClusterSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, dbClusterSnapshotIdentifier, snapshotType, filters, maxRecords, marker, includeShared, includePublic, _callback);
        Type localVarReturnType = new TypeToken<DBClusterSnapshotMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match an existing &lt;code&gt;DBClusterIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBClusters(Async)");
        }

        return gETDescribeDBClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the &lt;code&gt;filterName&#x3D;engine,Values&#x3D;docdb&lt;/code&gt; filter parameter to return only Amazon DocumentDB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match an existing &lt;code&gt;DBClusterIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBClusterMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterMessage gETDescribeDBClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBClusterMessage> localVarResp = gETDescribeDBClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the &lt;code&gt;filterName&#x3D;engine,Values&#x3D;docdb&lt;/code&gt; filter parameter to return only Amazon DocumentDB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match an existing &lt;code&gt;DBClusterIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBClusterMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterMessage> gETDescribeDBClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBClusterMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the &lt;code&gt;filterName&#x3D;engine,Values&#x3D;docdb&lt;/code&gt; filter parameter to return only Amazon DocumentDB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;The user-provided cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match an existing &lt;code&gt;DBClusterIdentifier&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list only includes information about the clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBClusterMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBClusterMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBEngineVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The database engine to return. (optional)
     * @param engineVersion &lt;p&gt;The database engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;3.6.0&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbParameterGroupFamily &lt;p&gt;The name of a specific parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match an existing &lt;code&gt;DBParameterGroupFamily&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly Indicates that only the default version of the specified engine or engine and major version combination is returned. (optional)
     * @param listSupportedCharacterSets If this parameter is specified and the requested engine supports the &lt;code&gt;CharacterSetName&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported character sets for each engine version.  (optional)
     * @param listSupportedTimezones If this parameter is specified and the requested engine supports the &lt;code&gt;TimeZone&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported time zones for each engine version.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBEngineVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBEngineVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (dbParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupFamily", dbParameterGroupFamily));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (defaultOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultOnly", defaultOnly));
        }

        if (listSupportedCharacterSets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListSupportedCharacterSets", listSupportedCharacterSets));
        }

        if (listSupportedTimezones != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ListSupportedTimezones", listSupportedTimezones));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBEngineVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBEngineVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBEngineVersions(Async)");
        }

        return gETDescribeDBEngineVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones, _callback);

    }

    /**
     * 
     * Returns a list of the available engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The database engine to return. (optional)
     * @param engineVersion &lt;p&gt;The database engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;3.6.0&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbParameterGroupFamily &lt;p&gt;The name of a specific parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match an existing &lt;code&gt;DBParameterGroupFamily&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly Indicates that only the default version of the specified engine or engine and major version combination is returned. (optional)
     * @param listSupportedCharacterSets If this parameter is specified and the requested engine supports the &lt;code&gt;CharacterSetName&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported character sets for each engine version.  (optional)
     * @param listSupportedTimezones If this parameter is specified and the requested engine supports the &lt;code&gt;TimeZone&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported time zones for each engine version.  (optional)
     * @return DBEngineVersionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DBEngineVersionMessage gETDescribeDBEngineVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones) throws ApiException {
        ApiResponse<DBEngineVersionMessage> localVarResp = gETDescribeDBEngineVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The database engine to return. (optional)
     * @param engineVersion &lt;p&gt;The database engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;3.6.0&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbParameterGroupFamily &lt;p&gt;The name of a specific parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match an existing &lt;code&gt;DBParameterGroupFamily&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly Indicates that only the default version of the specified engine or engine and major version combination is returned. (optional)
     * @param listSupportedCharacterSets If this parameter is specified and the requested engine supports the &lt;code&gt;CharacterSetName&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported character sets for each engine version.  (optional)
     * @param listSupportedTimezones If this parameter is specified and the requested engine supports the &lt;code&gt;TimeZone&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported time zones for each engine version.  (optional)
     * @return ApiResponse&lt;DBEngineVersionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBEngineVersionMessage> gETDescribeDBEngineVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones, null);
        Type localVarReturnType = new TypeToken<DBEngineVersionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The database engine to return. (optional)
     * @param engineVersion &lt;p&gt;The database engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;3.6.0&lt;/code&gt; &lt;/p&gt; (optional)
     * @param dbParameterGroupFamily &lt;p&gt;The name of a specific parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match an existing &lt;code&gt;DBParameterGroupFamily&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly Indicates that only the default version of the specified engine or engine and major version combination is returned. (optional)
     * @param listSupportedCharacterSets If this parameter is specified and the requested engine supports the &lt;code&gt;CharacterSetName&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported character sets for each engine version.  (optional)
     * @param listSupportedTimezones If this parameter is specified and the requested engine supports the &lt;code&gt;TimeZone&lt;/code&gt; parameter for &lt;code&gt;CreateDBInstance&lt;/code&gt;, the response includes a list of supported time zones for each engine version.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBEngineVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String dbParameterGroupFamily, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, Boolean defaultOnly, Boolean listSupportedCharacterSets, Boolean listSupportedTimezones, final ApiCallback<DBEngineVersionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, dbParameterGroupFamily, filters, maxRecords, marker, defaultOnly, listSupportedCharacterSets, listSupportedTimezones, _callback);
        Type localVarReturnType = new TypeToken<DBEngineVersionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceIdentifier &lt;p&gt;The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more instances to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBInstances(Async)");
        }

        return gETDescribeDBInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceIdentifier &lt;p&gt;The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more instances to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBInstanceMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBInstanceMessage gETDescribeDBInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBInstanceMessage> localVarResp = gETDescribeDBInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceIdentifier &lt;p&gt;The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more instances to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBInstanceMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBInstanceMessage> gETDescribeDBInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBInstanceMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceIdentifier &lt;p&gt;The user-provided instance identifier. If this parameter is specified, information from only the specific instance is returned. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If provided, must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more instances to describe.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only the information about the instances that are associated with the clusters that are identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts instance identifiers and instance ARNs. The results list includes only the information about the instances that are identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBInstanceMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceIdentifier, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBInstanceMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeDBSubnetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupName The name of the subnet group to return details for. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBSubnetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBSubnetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeDBSubnetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeDBSubnetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeDBSubnetGroups(Async)");
        }

        return gETDescribeDBSubnetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBSubnetGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBSubnetGroupName&lt;/code&gt; is specified, the list will contain only the descriptions of the specified &lt;code&gt;DBSubnetGroup&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupName The name of the subnet group to return details for. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DBSubnetGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBSubnetGroupMessage gETDescribeDBSubnetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DBSubnetGroupMessage> localVarResp = gETDescribeDBSubnetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBSubnetGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBSubnetGroupName&lt;/code&gt; is specified, the list will contain only the descriptions of the specified &lt;code&gt;DBSubnetGroup&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupName The name of the subnet group to return details for. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBSubnetGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBSubnetGroupMessage> gETDescribeDBSubnetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeDBSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DBSubnetGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of &lt;code&gt;DBSubnetGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBSubnetGroupName&lt;/code&gt; is specified, the list will contain only the descriptions of the specified &lt;code&gt;DBSubnetGroup&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupName The name of the subnet group to return details for. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeDBSubnetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DBSubnetGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeDBSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupName, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DBSubnetGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEngineDefaultClusterParameters
     * @param dbParameterGroupFamily The name of the cluster parameter group family to return the engine parameter information for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEngineDefaultClusterParametersCall(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEngineDefaultClusterParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBParameterGroupFamily", dbParameterGroupFamily));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEngineDefaultClusterParametersValidateBeforeCall(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbParameterGroupFamily' is set
        if (dbParameterGroupFamily == null) {
            throw new ApiException("Missing the required parameter 'dbParameterGroupFamily' when calling gETDescribeEngineDefaultClusterParameters(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEngineDefaultClusterParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEngineDefaultClusterParameters(Async)");
        }

        return gETDescribeEngineDefaultClusterParametersCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param dbParameterGroupFamily The name of the cluster parameter group family to return the engine parameter information for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DescribeEngineDefaultClusterParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineDefaultClusterParametersResult gETDescribeEngineDefaultClusterParameters(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEngineDefaultClusterParametersResult> localVarResp = gETDescribeEngineDefaultClusterParametersWithHttpInfo(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param dbParameterGroupFamily The name of the cluster parameter group family to return the engine parameter information for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeEngineDefaultClusterParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineDefaultClusterParametersResult> gETDescribeEngineDefaultClusterParametersWithHttpInfo(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEngineDefaultClusterParametersValidateBeforeCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultClusterParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param dbParameterGroupFamily The name of the cluster parameter group family to return the engine parameter information for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEngineDefaultClusterParametersAsync(String dbParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<DescribeEngineDefaultClusterParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEngineDefaultClusterParametersValidateBeforeCall(dbParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultClusterParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEventCategories
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt; &lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventCategoriesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeCertificatesFiltersParameterInner> filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEventCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEventCategoriesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeCertificatesFiltersParameterInner> filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEventCategories(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEventCategories(Async)");
        }

        return gETDescribeEventCategoriesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters, _callback);

    }

    /**
     * 
     * Displays a list of categories for all event source types, or, if specified, for a specified source type. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt; &lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @return EventCategoriesMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventCategoriesMessage gETDescribeEventCategories(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeCertificatesFiltersParameterInner> filters) throws ApiException {
        ApiResponse<EventCategoriesMessage> localVarResp = gETDescribeEventCategoriesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters);
        return localVarResp.getData();
    }

    /**
     * 
     * Displays a list of categories for all event source types, or, if specified, for a specified source type. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt; &lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @return ApiResponse&lt;EventCategoriesMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventCategoriesMessage> gETDescribeEventCategoriesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeCertificatesFiltersParameterInner> filters) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEventCategoriesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters, null);
        Type localVarReturnType = new TypeToken<EventCategoriesMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Displays a list of categories for all event source types, or, if specified, for a specified source type. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt; &lt;/p&gt; (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventCategoriesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceType, List<GETDescribeCertificatesFiltersParameterInner> filters, final ApiCallback<EventCategoriesMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEventCategoriesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, filters, _callback);
        Type localVarReturnType = new TypeToken<EventCategoriesMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEventSubscriptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to describe. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventSubscriptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEventSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEventSubscriptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEventSubscriptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEventSubscriptions(Async)");
        }

        return gETDescribeEventSubscriptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;SubscriptionName&lt;/code&gt;, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to describe. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return EventSubscriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsMessage gETDescribeEventSubscriptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<EventSubscriptionsMessage> localVarResp = gETDescribeEventSubscriptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;SubscriptionName&lt;/code&gt;, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to describe. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;EventSubscriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsMessage> gETDescribeEventSubscriptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEventSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;SubscriptionName&lt;/code&gt;, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to describe. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventSubscriptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String subscriptionName, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<EventSubscriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEventSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;SourceIdentifier&lt;/code&gt; is provided, &lt;code&gt;SourceType&lt;/code&gt; must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBInstance&lt;/code&gt;, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSecurityGroup&lt;/code&gt;, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBParameterGroup&lt;/code&gt;, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSnapshot&lt;/code&gt;, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt; The beginning of the time interval to retrieve events for, specified in ISO 8601 format. &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt; The end of the time interval for which to retrieve events, specified in ISO 8601 format. &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param duration &lt;p&gt;The number of minutes to retrieve events for.&lt;/p&gt; &lt;p&gt;Default: 60&lt;/p&gt; (optional)
     * @param eventCategories A list of event categories that trigger notifications for an event notification subscription. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceIdentifier", sourceIdentifier));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Duration", duration));
        }

        if (eventCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EventCategories", eventCategories));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEvents(Async)");
        }

        return gETDescribeEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;SourceIdentifier&lt;/code&gt; is provided, &lt;code&gt;SourceType&lt;/code&gt; must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBInstance&lt;/code&gt;, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSecurityGroup&lt;/code&gt;, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBParameterGroup&lt;/code&gt;, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSnapshot&lt;/code&gt;, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt; The beginning of the time interval to retrieve events for, specified in ISO 8601 format. &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt; The end of the time interval for which to retrieve events, specified in ISO 8601 format. &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param duration &lt;p&gt;The number of minutes to retrieve events for.&lt;/p&gt; &lt;p&gt;Default: 60&lt;/p&gt; (optional)
     * @param eventCategories A list of event categories that trigger notifications for an event notification subscription. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return EventsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventsMessage gETDescribeEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<EventsMessage> localVarResp = gETDescribeEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;SourceIdentifier&lt;/code&gt; is provided, &lt;code&gt;SourceType&lt;/code&gt; must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBInstance&lt;/code&gt;, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSecurityGroup&lt;/code&gt;, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBParameterGroup&lt;/code&gt;, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSnapshot&lt;/code&gt;, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt; The beginning of the time interval to retrieve events for, specified in ISO 8601 format. &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt; The end of the time interval for which to retrieve events, specified in ISO 8601 format. &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param duration &lt;p&gt;The number of minutes to retrieve events for.&lt;/p&gt; &lt;p&gt;Default: 60&lt;/p&gt; (optional)
     * @param eventCategories A list of event categories that trigger notifications for an event notification subscription. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;EventsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsMessage> gETDescribeEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier &lt;p&gt;The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If &lt;code&gt;SourceIdentifier&lt;/code&gt; is provided, &lt;code&gt;SourceType&lt;/code&gt; must also be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBInstance&lt;/code&gt;, a &lt;code&gt;DBInstanceIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSecurityGroup&lt;/code&gt;, a &lt;code&gt;DBSecurityGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBParameterGroup&lt;/code&gt;, a &lt;code&gt;DBParameterGroupName&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the source type is &lt;code&gt;DBSnapshot&lt;/code&gt;, a &lt;code&gt;DBSnapshotIdentifier&lt;/code&gt; must be provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt; The beginning of the time interval to retrieve events for, specified in ISO 8601 format. &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt; The end of the time interval for which to retrieve events, specified in ISO 8601 format. &lt;/p&gt; &lt;p&gt;Example: 2009-07-08T18:00Z&lt;/p&gt; (optional)
     * @param duration &lt;p&gt;The number of minutes to retrieve events for.&lt;/p&gt; &lt;p&gt;Default: 60&lt;/p&gt; (optional)
     * @param eventCategories A list of event categories that trigger notifications for an event notification subscription. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, List<String> eventCategories, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<EventsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, eventCategories, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeGlobalClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalClusterIdentifier The user-supplied cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn&#39;t case-sensitive. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more global DB clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters: &lt;code&gt;db-cluster-id&lt;/code&gt; accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list will only include information about the clusters identified by these ARNs.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeGlobalClusters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeGlobalClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeGlobalClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeGlobalClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeGlobalClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeGlobalClusters(Async)");
        }

        return gETDescribeGlobalClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about Amazon DocumentDB global clusters. This API supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalClusterIdentifier The user-supplied cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn&#39;t case-sensitive. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more global DB clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters: &lt;code&gt;db-cluster-id&lt;/code&gt; accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list will only include information about the clusters identified by these ARNs.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeGlobalClusters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return GlobalClustersMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public GlobalClustersMessage gETDescribeGlobalClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<GlobalClustersMessage> localVarResp = gETDescribeGlobalClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about Amazon DocumentDB global clusters. This API supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalClusterIdentifier The user-supplied cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn&#39;t case-sensitive. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more global DB clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters: &lt;code&gt;db-cluster-id&lt;/code&gt; accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list will only include information about the clusters identified by these ARNs.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeGlobalClusters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;GlobalClustersMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalClustersMessage> gETDescribeGlobalClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeGlobalClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<GlobalClustersMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about Amazon DocumentDB global clusters. This API supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalClusterIdentifier The user-supplied cluster identifier. If this parameter is specified, information from only the specific cluster is returned. This parameter isn&#39;t case-sensitive. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more global DB clusters to describe.&lt;/p&gt; &lt;p&gt;Supported filters: &lt;code&gt;db-cluster-id&lt;/code&gt; accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list will only include information about the clusters identified by these ARNs.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.  (optional)
     * @param marker An optional pagination token provided by a previous &lt;code&gt;DescribeGlobalClusters&lt;/code&gt; request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeGlobalClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalClusterIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<GlobalClustersMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeGlobalClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalClusterIdentifier, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<GlobalClustersMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeOrderableDBInstanceOptions
     * @param engine The name of the engine to retrieve instance options for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engineVersion The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version. (optional)
     * @param dbInstanceClass The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class. (optional)
     * @param licenseModel The license model filter value. Specify this parameter to show only the available offerings that match the specified license model. (optional)
     * @param vpc The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeOrderableDBInstanceOptionsCall(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeOrderableDBInstanceOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (dbInstanceClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceClass", dbInstanceClass));
        }

        if (licenseModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LicenseModel", licenseModel));
        }

        if (vpc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Vpc", vpc));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeOrderableDBInstanceOptionsValidateBeforeCall(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETDescribeOrderableDBInstanceOptions(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeOrderableDBInstanceOptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeOrderableDBInstanceOptions(Async)");
        }

        return gETDescribeOrderableDBInstanceOptionsCall(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of orderable instance options for the specified engine.
     * @param engine The name of the engine to retrieve instance options for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engineVersion The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version. (optional)
     * @param dbInstanceClass The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class. (optional)
     * @param licenseModel The license model filter value. Specify this parameter to show only the available offerings that match the specified license model. (optional)
     * @param vpc The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return OrderableDBInstanceOptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderableDBInstanceOptionsMessage gETDescribeOrderableDBInstanceOptions(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<OrderableDBInstanceOptionsMessage> localVarResp = gETDescribeOrderableDBInstanceOptionsWithHttpInfo(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of orderable instance options for the specified engine.
     * @param engine The name of the engine to retrieve instance options for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engineVersion The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version. (optional)
     * @param dbInstanceClass The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class. (optional)
     * @param licenseModel The license model filter value. Specify this parameter to show only the available offerings that match the specified license model. (optional)
     * @param vpc The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;OrderableDBInstanceOptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderableDBInstanceOptionsMessage> gETDescribeOrderableDBInstanceOptionsWithHttpInfo(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeOrderableDBInstanceOptionsValidateBeforeCall(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<OrderableDBInstanceOptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of orderable instance options for the specified engine.
     * @param engine The name of the engine to retrieve instance options for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engineVersion The engine version filter value. Specify this parameter to show only the available offerings that match the specified engine version. (optional)
     * @param dbInstanceClass The instance class filter value. Specify this parameter to show only the available offerings that match the specified instance class. (optional)
     * @param licenseModel The license model filter value. Specify this parameter to show only the available offerings that match the specified license model. (optional)
     * @param vpc The virtual private cloud (VPC) filter value. Specify this parameter to show only the available VPC or non-VPC offerings. (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeOrderableDBInstanceOptionsAsync(String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engineVersion, String dbInstanceClass, String licenseModel, Boolean vpc, List<GETDescribeCertificatesFiltersParameterInner> filters, Integer maxRecords, String marker, final ApiCallback<OrderableDBInstanceOptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeOrderableDBInstanceOptionsValidateBeforeCall(engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engineVersion, dbInstanceClass, licenseModel, vpc, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<OrderableDBInstanceOptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribePendingMaintenanceActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resourceIdentifier The ARN of a resource to return pending maintenance actions for. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more resources to return pending maintenance actions for.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePendingMaintenanceActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, String marker, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribePendingMaintenanceActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceIdentifier", resourceIdentifier));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribePendingMaintenanceActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, String marker, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribePendingMaintenanceActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribePendingMaintenanceActions(Async)");
        }

        return gETDescribePendingMaintenanceActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords, _callback);

    }

    /**
     * 
     * Returns a list of resources (for example, instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resourceIdentifier The ARN of a resource to return pending maintenance actions for. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more resources to return pending maintenance actions for.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @return PendingMaintenanceActionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public PendingMaintenanceActionsMessage gETDescribePendingMaintenanceActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, String marker, Integer maxRecords) throws ApiException {
        ApiResponse<PendingMaintenanceActionsMessage> localVarResp = gETDescribePendingMaintenanceActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of resources (for example, instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resourceIdentifier The ARN of a resource to return pending maintenance actions for. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more resources to return pending maintenance actions for.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;PendingMaintenanceActionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingMaintenanceActionsMessage> gETDescribePendingMaintenanceActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, String marker, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribePendingMaintenanceActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords, null);
        Type localVarReturnType = new TypeToken<PendingMaintenanceActionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of resources (for example, instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resourceIdentifier The ARN of a resource to return pending maintenance actions for. (optional)
     * @param filters &lt;p&gt;A filter that specifies one or more resources to return pending maintenance actions for.&lt;/p&gt; &lt;p&gt;Supported filters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-cluster-id&lt;/code&gt; - Accepts cluster identifiers and cluster Amazon Resource Names (ARNs). The results list includes only pending maintenance actions for the clusters identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;db-instance-id&lt;/code&gt; - Accepts instance identifiers and instance ARNs. The results list includes only pending maintenance actions for the DB instances identified by these ARNs.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param marker An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt; The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: Minimum 20, maximum 100.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePendingMaintenanceActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String resourceIdentifier, List<GETDescribeCertificatesFiltersParameterInner> filters, String marker, Integer maxRecords, final ApiCallback<PendingMaintenanceActionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribePendingMaintenanceActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceIdentifier, filters, marker, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<PendingMaintenanceActionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETFailoverDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;A cluster identifier to force a failover for. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param targetDBInstanceIdentifier &lt;p&gt;The name of the instance to promote to the primary instance.&lt;/p&gt; &lt;p&gt;You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, &lt;code&gt;mydbcluster-replica1&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETFailoverDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=FailoverDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (targetDBInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetDBInstanceIdentifier", targetDBInstanceIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETFailoverDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETFailoverDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETFailoverDBCluster(Async)");
        }

        return gETFailoverDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;Forces a failover for a cluster.&lt;/p&gt; &lt;p&gt;A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;A cluster identifier to force a failover for. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param targetDBInstanceIdentifier &lt;p&gt;The name of the instance to promote to the primary instance.&lt;/p&gt; &lt;p&gt;You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, &lt;code&gt;mydbcluster-replica1&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return FailoverDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public FailoverDBClusterResult gETFailoverDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier) throws ApiException {
        ApiResponse<FailoverDBClusterResult> localVarResp = gETFailoverDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Forces a failover for a cluster.&lt;/p&gt; &lt;p&gt;A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;A cluster identifier to force a failover for. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param targetDBInstanceIdentifier &lt;p&gt;The name of the instance to promote to the primary instance.&lt;/p&gt; &lt;p&gt;You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, &lt;code&gt;mydbcluster-replica1&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;FailoverDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverDBClusterResult> gETFailoverDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETFailoverDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier, null);
        Type localVarReturnType = new TypeToken<FailoverDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Forces a failover for a cluster.&lt;/p&gt; &lt;p&gt;A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbClusterIdentifier &lt;p&gt;A cluster identifier to force a failover for. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param targetDBInstanceIdentifier &lt;p&gt;The name of the instance to promote to the primary instance.&lt;/p&gt; &lt;p&gt;You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, &lt;code&gt;mydbcluster-replica1&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETFailoverDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbClusterIdentifier, String targetDBInstanceIdentifier, final ApiCallback<FailoverDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETFailoverDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbClusterIdentifier, targetDBInstanceIdentifier, _callback);
        Type localVarReturnType = new TypeToken<FailoverDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTagsForResource
     * @param resourceName The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN). (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceCall(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTagsForResourceValidateBeforeCall(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTagsForResource(Async)");
        }

        return gETListTagsForResourceCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, _callback);

    }

    /**
     * 
     * Lists all tags on an Amazon DocumentDB resource.
     * @param resourceName The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN). (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage gETListTagsForResource(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = gETListTagsForResourceWithHttpInfo(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all tags on an Amazon DocumentDB resource.
     * @param resourceName The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN). (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> gETListTagsForResourceWithHttpInfo(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters) throws ApiException {
        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all tags on an Amazon DocumentDB resource.
     * @param resourceName The Amazon DocumentDB resource with tags to be listed. This value is an Amazon Resource Name (ARN). (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters This parameter is not currently supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceAsync(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETDescribeCertificatesFiltersParameterInner> filters, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBCluster
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier for the cluster that is being modified. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newDBClusterIdentifier &lt;p&gt;The new cluster identifier for the cluster when renaming a cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the cluster. If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the cluster are applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter affects only the &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; and &lt;code&gt;MasterUserPassword&lt;/code&gt; values. If you set this parameter value to &lt;code&gt;false&lt;/code&gt;, the changes to the &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; and &lt;code&gt;MasterUserPassword&lt;/code&gt; values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the cluster parameter group to use for the cluster. (optional)
     * @param vpcSecurityGroupIds A list of virtual private cloud (VPC) security groups that the cluster will belong to. (optional)
     * @param port &lt;p&gt;The port number on which the cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Default: The same port as the original cluster.&lt;/p&gt; (optional)
     * @param masterUserPassword &lt;p&gt;The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;p&gt;Constraints: Must contain from 8 to 100 characters.&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled, using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter. &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster. The &lt;code&gt;EnableLogTypes&lt;/code&gt; and &lt;code&gt;DisableLogTypes&lt;/code&gt; arrays determine which logs are exported (or not exported) to CloudWatch Logs. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;To list all of the available engine versions for Amazon DocumentDB use the following command:&lt;/p&gt; &lt;p&gt; &lt;code&gt;aws docdb describe-db-engine-versions --engine docdb --query \&quot;DBEngineVersions[].EngineVersion\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether major version upgrades are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must allow major version upgrades when specifying a value for the &lt;code&gt;EngineVersion&lt;/code&gt; parameter that is a different major version than the DB cluster&#39;s current version.&lt;/p&gt; (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (newDBClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewDBClusterIdentifier", newDBClusterIdentifier));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (backupRetentionPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BackupRetentionPeriod", backupRetentionPeriod));
        }

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (masterUserPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MasterUserPassword", masterUserPassword));
        }

        if (preferredBackupWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredBackupWindow", preferredBackupWindow));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (cloudwatchLogsExportConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CloudwatchLogsExportConfiguration", cloudwatchLogsExportConfiguration));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (allowMajorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AllowMajorVersionUpgrade", allowMajorVersionUpgrade));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETModifyDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBCluster(Async)");
        }

        return gETModifyDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, deletionProtection, _callback);

    }

    /**
     * 
     * Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. 
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier for the cluster that is being modified. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newDBClusterIdentifier &lt;p&gt;The new cluster identifier for the cluster when renaming a cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the cluster. If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the cluster are applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter affects only the &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; and &lt;code&gt;MasterUserPassword&lt;/code&gt; values. If you set this parameter value to &lt;code&gt;false&lt;/code&gt;, the changes to the &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; and &lt;code&gt;MasterUserPassword&lt;/code&gt; values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the cluster parameter group to use for the cluster. (optional)
     * @param vpcSecurityGroupIds A list of virtual private cloud (VPC) security groups that the cluster will belong to. (optional)
     * @param port &lt;p&gt;The port number on which the cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Default: The same port as the original cluster.&lt;/p&gt; (optional)
     * @param masterUserPassword &lt;p&gt;The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;p&gt;Constraints: Must contain from 8 to 100 characters.&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled, using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter. &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster. The &lt;code&gt;EnableLogTypes&lt;/code&gt; and &lt;code&gt;DisableLogTypes&lt;/code&gt; arrays determine which logs are exported (or not exported) to CloudWatch Logs. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;To list all of the available engine versions for Amazon DocumentDB use the following command:&lt;/p&gt; &lt;p&gt; &lt;code&gt;aws docdb describe-db-engine-versions --engine docdb --query \&quot;DBEngineVersions[].EngineVersion\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether major version upgrades are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must allow major version upgrades when specifying a value for the &lt;code&gt;EngineVersion&lt;/code&gt; parameter that is a different major version than the DB cluster&#39;s current version.&lt;/p&gt; (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @return ModifyDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterResult gETModifyDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean deletionProtection) throws ApiException {
        ApiResponse<ModifyDBClusterResult> localVarResp = gETModifyDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, deletionProtection);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. 
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier for the cluster that is being modified. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newDBClusterIdentifier &lt;p&gt;The new cluster identifier for the cluster when renaming a cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the cluster. If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the cluster are applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter affects only the &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; and &lt;code&gt;MasterUserPassword&lt;/code&gt; values. If you set this parameter value to &lt;code&gt;false&lt;/code&gt;, the changes to the &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; and &lt;code&gt;MasterUserPassword&lt;/code&gt; values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the cluster parameter group to use for the cluster. (optional)
     * @param vpcSecurityGroupIds A list of virtual private cloud (VPC) security groups that the cluster will belong to. (optional)
     * @param port &lt;p&gt;The port number on which the cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Default: The same port as the original cluster.&lt;/p&gt; (optional)
     * @param masterUserPassword &lt;p&gt;The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;p&gt;Constraints: Must contain from 8 to 100 characters.&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled, using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter. &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster. The &lt;code&gt;EnableLogTypes&lt;/code&gt; and &lt;code&gt;DisableLogTypes&lt;/code&gt; arrays determine which logs are exported (or not exported) to CloudWatch Logs. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;To list all of the available engine versions for Amazon DocumentDB use the following command:&lt;/p&gt; &lt;p&gt; &lt;code&gt;aws docdb describe-db-engine-versions --engine docdb --query \&quot;DBEngineVersions[].EngineVersion\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether major version upgrades are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must allow major version upgrades when specifying a value for the &lt;code&gt;EngineVersion&lt;/code&gt; parameter that is a different major version than the DB cluster&#39;s current version.&lt;/p&gt; (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @return ApiResponse&lt;ModifyDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterResult> gETModifyDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean deletionProtection) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, deletionProtection, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. 
     * @param dbClusterIdentifier &lt;p&gt;The cluster identifier for the cluster that is being modified. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newDBClusterIdentifier &lt;p&gt;The new cluster identifier for the cluster when renaming a cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;A value that specifies whether the changes in this request and any pending changes are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the cluster. If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the cluster are applied during the next maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter affects only the &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; and &lt;code&gt;MasterUserPassword&lt;/code&gt; values. If you set this parameter value to &lt;code&gt;false&lt;/code&gt;, the changes to the &lt;code&gt;NewDBClusterIdentifier&lt;/code&gt; and &lt;code&gt;MasterUserPassword&lt;/code&gt; values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param backupRetentionPeriod &lt;p&gt;The number of days for which automated backups are retained. You must specify a minimum value of 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be a value from 1 to 35.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param dbClusterParameterGroupName The name of the cluster parameter group to use for the cluster. (optional)
     * @param vpcSecurityGroupIds A list of virtual private cloud (VPC) security groups that the cluster will belong to. (optional)
     * @param port &lt;p&gt;The port number on which the cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Default: The same port as the original cluster.&lt;/p&gt; (optional)
     * @param masterUserPassword &lt;p&gt;The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;p&gt;Constraints: Must contain from 8 to 100 characters.&lt;/p&gt; (optional)
     * @param preferredBackupWindow &lt;p&gt;The daily time range during which automated backups are created if automated backups are enabled, using the &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; parameter. &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be in the format &lt;code&gt;hh24:mi-hh24:mi&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must not conflict with the preferred maintenance window.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 30 minutes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Minimum 30-minute window.&lt;/p&gt; (optional)
     * @param cloudwatchLogsExportConfiguration The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster. The &lt;code&gt;EnableLogTypes&lt;/code&gt; and &lt;code&gt;DisableLogTypes&lt;/code&gt; arrays determine which logs are exported (or not exported) to CloudWatch Logs. (optional)
     * @param engineVersion &lt;p&gt;The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;To list all of the available engine versions for Amazon DocumentDB use the following command:&lt;/p&gt; &lt;p&gt; &lt;code&gt;aws docdb describe-db-engine-versions --engine docdb --query \&quot;DBEngineVersions[].EngineVersion\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param allowMajorVersionUpgrade &lt;p&gt;A value that indicates whether major version upgrades are allowed.&lt;/p&gt; &lt;p&gt;Constraints: You must allow major version upgrades when specifying a value for the &lt;code&gt;EngineVersion&lt;/code&gt; parameter that is a different major version than the DB cluster&#39;s current version.&lt;/p&gt; (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newDBClusterIdentifier, Boolean applyImmediately, Integer backupRetentionPeriod, String dbClusterParameterGroupName, List<String> vpcSecurityGroupIds, Integer port, String masterUserPassword, String preferredBackupWindow, String preferredMaintenanceWindow, GETModifyDBClusterCloudwatchLogsExportConfigurationParameter cloudwatchLogsExportConfiguration, String engineVersion, Boolean allowMajorVersionUpgrade, Boolean deletionProtection, final ApiCallback<ModifyDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newDBClusterIdentifier, applyImmediately, backupRetentionPeriod, dbClusterParameterGroupName, vpcSecurityGroupIds, port, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, cloudwatchLogsExportConfiguration, engineVersion, allowMajorVersionUpgrade, deletionProtection, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBClusterParameterGroup
     * @param dbClusterParameterGroupName The name of the cluster parameter group to modify. (required)
     * @param parameters A list of parameters in the cluster parameter group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterParameterGroupCall(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBClusterParameterGroupValidateBeforeCall(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETModifyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling gETModifyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBClusterParameterGroup(Async)");
        }

        return gETModifyDBClusterParameterGroupCall(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName The name of the cluster parameter group to modify. (required)
     * @param parameters A list of parameters in the cluster parameter group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DBClusterParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupNameMessage gETModifyDBClusterParameterGroup(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DBClusterParameterGroupNameMessage> localVarResp = gETModifyDBClusterParameterGroupWithHttpInfo(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName The name of the cluster parameter group to modify. (required)
     * @param parameters A list of parameters in the cluster parameter group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupNameMessage> gETModifyDBClusterParameterGroupWithHttpInfo(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter.&lt;/p&gt; &lt;/important&gt;
     * @param dbClusterParameterGroupName The name of the cluster parameter group to modify. (required)
     * @param parameters A list of parameters in the cluster parameter group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterParameterGroupAsync(String dbClusterParameterGroupName, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DBClusterParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBClusterSnapshotAttribute
     * @param dbClusterSnapshotIdentifier The identifier for the cluster snapshot to modify the attributes for. (required)
     * @param attributeName &lt;p&gt;The name of the cluster snapshot attribute to modify.&lt;/p&gt; &lt;p&gt;To manage authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this value to &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param valuesToAdd &lt;p&gt;A list of cluster snapshot attributes to add to the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To authorize other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account IDs. To make the manual cluster snapshot restorable by any Amazon Web Services account, set it to &lt;code&gt;all&lt;/code&gt;. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want to be available to all Amazon Web Services accounts.&lt;/p&gt; (optional)
     * @param valuesToRemove &lt;p&gt;A list of cluster snapshot attributes to remove from the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To remove authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account identifiers. To remove authorization for any Amazon Web Services account to copy or restore the cluster snapshot, set it to &lt;code&gt;all&lt;/code&gt; . If you specify &lt;code&gt;all&lt;/code&gt;, an Amazon Web Services account whose account ID is explicitly added to the &lt;code&gt;restore&lt;/code&gt; attribute can still copy or restore a manual cluster snapshot.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterSnapshotAttributeCall(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterSnapshotAttribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterSnapshotIdentifier", dbClusterSnapshotIdentifier));
        }

        if (attributeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AttributeName", attributeName));
        }

        if (valuesToAdd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ValuesToAdd", valuesToAdd));
        }

        if (valuesToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ValuesToRemove", valuesToRemove));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBClusterSnapshotAttributeValidateBeforeCall(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterSnapshotIdentifier' is set
        if (dbClusterSnapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterSnapshotIdentifier' when calling gETModifyDBClusterSnapshotAttribute(Async)");
        }

        // verify the required parameter 'attributeName' is set
        if (attributeName == null) {
            throw new ApiException("Missing the required parameter 'attributeName' when calling gETModifyDBClusterSnapshotAttribute(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBClusterSnapshotAttribute(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBClusterSnapshotAttribute(Async)");
        }

        return gETModifyDBClusterSnapshotAttributeCall(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual cluster snapshot with other Amazon Web Services accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt;, and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the cluster snapshot to modify the attributes for. (required)
     * @param attributeName &lt;p&gt;The name of the cluster snapshot attribute to modify.&lt;/p&gt; &lt;p&gt;To manage authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this value to &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param valuesToAdd &lt;p&gt;A list of cluster snapshot attributes to add to the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To authorize other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account IDs. To make the manual cluster snapshot restorable by any Amazon Web Services account, set it to &lt;code&gt;all&lt;/code&gt;. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want to be available to all Amazon Web Services accounts.&lt;/p&gt; (optional)
     * @param valuesToRemove &lt;p&gt;A list of cluster snapshot attributes to remove from the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To remove authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account identifiers. To remove authorization for any Amazon Web Services account to copy or restore the cluster snapshot, set it to &lt;code&gt;all&lt;/code&gt; . If you specify &lt;code&gt;all&lt;/code&gt;, an Amazon Web Services account whose account ID is explicitly added to the &lt;code&gt;restore&lt;/code&gt; attribute can still copy or restore a manual cluster snapshot.&lt;/p&gt; (optional)
     * @return ModifyDBClusterSnapshotAttributeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterSnapshotAttributeResult gETModifyDBClusterSnapshotAttribute(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove) throws ApiException {
        ApiResponse<ModifyDBClusterSnapshotAttributeResult> localVarResp = gETModifyDBClusterSnapshotAttributeWithHttpInfo(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual cluster snapshot with other Amazon Web Services accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt;, and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the cluster snapshot to modify the attributes for. (required)
     * @param attributeName &lt;p&gt;The name of the cluster snapshot attribute to modify.&lt;/p&gt; &lt;p&gt;To manage authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this value to &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param valuesToAdd &lt;p&gt;A list of cluster snapshot attributes to add to the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To authorize other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account IDs. To make the manual cluster snapshot restorable by any Amazon Web Services account, set it to &lt;code&gt;all&lt;/code&gt;. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want to be available to all Amazon Web Services accounts.&lt;/p&gt; (optional)
     * @param valuesToRemove &lt;p&gt;A list of cluster snapshot attributes to remove from the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To remove authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account identifiers. To remove authorization for any Amazon Web Services account to copy or restore the cluster snapshot, set it to &lt;code&gt;all&lt;/code&gt; . If you specify &lt;code&gt;all&lt;/code&gt;, an Amazon Web Services account whose account ID is explicitly added to the &lt;code&gt;restore&lt;/code&gt; attribute can still copy or restore a manual cluster snapshot.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ModifyDBClusterSnapshotAttributeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterSnapshotAttributeResult> gETModifyDBClusterSnapshotAttributeWithHttpInfo(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBClusterSnapshotAttributeValidateBeforeCall(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterSnapshotAttributeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual cluster snapshot with other Amazon Web Services accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt;, and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt;
     * @param dbClusterSnapshotIdentifier The identifier for the cluster snapshot to modify the attributes for. (required)
     * @param attributeName &lt;p&gt;The name of the cluster snapshot attribute to modify.&lt;/p&gt; &lt;p&gt;To manage authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this value to &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param valuesToAdd &lt;p&gt;A list of cluster snapshot attributes to add to the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To authorize other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account IDs. To make the manual cluster snapshot restorable by any Amazon Web Services account, set it to &lt;code&gt;all&lt;/code&gt;. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want to be available to all Amazon Web Services accounts.&lt;/p&gt; (optional)
     * @param valuesToRemove &lt;p&gt;A list of cluster snapshot attributes to remove from the attribute specified by &lt;code&gt;AttributeName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To remove authorization for other Amazon Web Services accounts to copy or restore a manual cluster snapshot, set this list to include one or more Amazon Web Services account identifiers. To remove authorization for any Amazon Web Services account to copy or restore the cluster snapshot, set it to &lt;code&gt;all&lt;/code&gt; . If you specify &lt;code&gt;all&lt;/code&gt;, an Amazon Web Services account whose account ID is explicitly added to the &lt;code&gt;restore&lt;/code&gt; attribute can still copy or restore a manual cluster snapshot.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBClusterSnapshotAttributeAsync(String dbClusterSnapshotIdentifier, String attributeName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> valuesToAdd, List<String> valuesToRemove, final ApiCallback<ModifyDBClusterSnapshotAttributeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBClusterSnapshotAttributeValidateBeforeCall(dbClusterSnapshotIdentifier, attributeName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, valuesToAdd, valuesToRemove, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterSnapshotAttributeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBInstance
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceClass &lt;p&gt;The new compute and memory capacity of the instance; for example, &lt;code&gt;db.r5.large&lt;/code&gt;. Not all instance classes are available in all Amazon Web Services Regions. &lt;/p&gt; &lt;p&gt;If you modify the instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt; for this request. &lt;/p&gt; &lt;p&gt;Default: Uses existing setting.&lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the instance. &lt;/p&gt; &lt;p&gt; If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn&#39;t result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting.&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Must be at least 30 minutes.&lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set. (optional)
     * @param newDBInstanceIdentifier &lt;p&gt; The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. It occurs during the next maintenance window if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. This value is stored as a lowercase string. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (optional)
     * @param caCertificateIdentifier Indicates the certificate that needs to be associated with the instance. (optional)
     * @param copyTagsToSnapshot A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid values: 0-15&lt;/p&gt; (optional)
     * @param enablePerformanceInsights A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\&quot;&gt;Using Amazon Performance Insights&lt;/a&gt;. (optional)
     * @param performanceInsightsKMSKeyId &lt;p&gt;The KMS key identifier for encryption of Performance Insights data.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBInstanceCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceClass, Boolean applyImmediately, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, String newDBInstanceIdentifier, String caCertificateIdentifier, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (dbInstanceClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceClass", dbInstanceClass));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (autoMinorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoMinorVersionUpgrade", autoMinorVersionUpgrade));
        }

        if (newDBInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewDBInstanceIdentifier", newDBInstanceIdentifier));
        }

        if (caCertificateIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CACertificateIdentifier", caCertificateIdentifier));
        }

        if (copyTagsToSnapshot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CopyTagsToSnapshot", copyTagsToSnapshot));
        }

        if (promotionTier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PromotionTier", promotionTier));
        }

        if (enablePerformanceInsights != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnablePerformanceInsights", enablePerformanceInsights));
        }

        if (performanceInsightsKMSKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PerformanceInsightsKMSKeyId", performanceInsightsKMSKeyId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBInstanceValidateBeforeCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceClass, Boolean applyImmediately, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, String newDBInstanceIdentifier, String caCertificateIdentifier, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETModifyDBInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBInstance(Async)");
        }

        return gETModifyDBInstanceCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceClass, applyImmediately, preferredMaintenanceWindow, autoMinorVersionUpgrade, newDBInstanceIdentifier, caCertificateIdentifier, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId, _callback);

    }

    /**
     * 
     * Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceClass &lt;p&gt;The new compute and memory capacity of the instance; for example, &lt;code&gt;db.r5.large&lt;/code&gt;. Not all instance classes are available in all Amazon Web Services Regions. &lt;/p&gt; &lt;p&gt;If you modify the instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt; for this request. &lt;/p&gt; &lt;p&gt;Default: Uses existing setting.&lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the instance. &lt;/p&gt; &lt;p&gt; If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn&#39;t result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting.&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Must be at least 30 minutes.&lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set. (optional)
     * @param newDBInstanceIdentifier &lt;p&gt; The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. It occurs during the next maintenance window if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. This value is stored as a lowercase string. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (optional)
     * @param caCertificateIdentifier Indicates the certificate that needs to be associated with the instance. (optional)
     * @param copyTagsToSnapshot A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid values: 0-15&lt;/p&gt; (optional)
     * @param enablePerformanceInsights A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\&quot;&gt;Using Amazon Performance Insights&lt;/a&gt;. (optional)
     * @param performanceInsightsKMSKeyId &lt;p&gt;The KMS key identifier for encryption of Performance Insights data.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.&lt;/p&gt; (optional)
     * @return ModifyDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBInstanceResult gETModifyDBInstance(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceClass, Boolean applyImmediately, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, String newDBInstanceIdentifier, String caCertificateIdentifier, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId) throws ApiException {
        ApiResponse<ModifyDBInstanceResult> localVarResp = gETModifyDBInstanceWithHttpInfo(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceClass, applyImmediately, preferredMaintenanceWindow, autoMinorVersionUpgrade, newDBInstanceIdentifier, caCertificateIdentifier, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceClass &lt;p&gt;The new compute and memory capacity of the instance; for example, &lt;code&gt;db.r5.large&lt;/code&gt;. Not all instance classes are available in all Amazon Web Services Regions. &lt;/p&gt; &lt;p&gt;If you modify the instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt; for this request. &lt;/p&gt; &lt;p&gt;Default: Uses existing setting.&lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the instance. &lt;/p&gt; &lt;p&gt; If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn&#39;t result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting.&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Must be at least 30 minutes.&lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set. (optional)
     * @param newDBInstanceIdentifier &lt;p&gt; The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. It occurs during the next maintenance window if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. This value is stored as a lowercase string. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (optional)
     * @param caCertificateIdentifier Indicates the certificate that needs to be associated with the instance. (optional)
     * @param copyTagsToSnapshot A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid values: 0-15&lt;/p&gt; (optional)
     * @param enablePerformanceInsights A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\&quot;&gt;Using Amazon Performance Insights&lt;/a&gt;. (optional)
     * @param performanceInsightsKMSKeyId &lt;p&gt;The KMS key identifier for encryption of Performance Insights data.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ModifyDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBInstanceResult> gETModifyDBInstanceWithHttpInfo(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceClass, Boolean applyImmediately, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, String newDBInstanceIdentifier, String caCertificateIdentifier, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceClass, applyImmediately, preferredMaintenanceWindow, autoMinorVersionUpgrade, newDBInstanceIdentifier, caCertificateIdentifier, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId, null);
        Type localVarReturnType = new TypeToken<ModifyDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbInstanceClass &lt;p&gt;The new compute and memory capacity of the instance; for example, &lt;code&gt;db.r5.large&lt;/code&gt;. Not all instance classes are available in all Amazon Web Services Regions. &lt;/p&gt; &lt;p&gt;If you modify the instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless &lt;code&gt;ApplyImmediately&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt; for this request. &lt;/p&gt; &lt;p&gt;Default: Uses existing setting.&lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the instance. &lt;/p&gt; &lt;p&gt; If this parameter is set to &lt;code&gt;false&lt;/code&gt;, changes to the instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next reboot.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn&#39;t result in an outage except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, changing this parameter causes a reboot of the instance. If you are moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure that pending changes are applied.&lt;/p&gt; &lt;p&gt;Default: Uses existing setting.&lt;/p&gt; &lt;p&gt;Format: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt;Constraints: Must be at least 30 minutes.&lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set. (optional)
     * @param newDBInstanceIdentifier &lt;p&gt; The new instance identifier for the instance when renaming an instance. When you change the instance identifier, an instance reboot occurs immediately if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. It occurs during the next maintenance window if you set &lt;code&gt;Apply Immediately&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. This value is stored as a lowercase string. &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;mydbinstance&lt;/code&gt; &lt;/p&gt; (optional)
     * @param caCertificateIdentifier Indicates the certificate that needs to be associated with the instance. (optional)
     * @param copyTagsToSnapshot A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. (optional)
     * @param promotionTier &lt;p&gt;A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; &lt;p&gt;Valid values: 0-15&lt;/p&gt; (optional)
     * @param enablePerformanceInsights A value that indicates whether to enable Performance Insights for the DB Instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\&quot;&gt;Using Amazon Performance Insights&lt;/a&gt;. (optional)
     * @param performanceInsightsKMSKeyId &lt;p&gt;The KMS key identifier for encryption of Performance Insights data.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon DocumentDB uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services region.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBInstanceAsync(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbInstanceClass, Boolean applyImmediately, String preferredMaintenanceWindow, Boolean autoMinorVersionUpgrade, String newDBInstanceIdentifier, String caCertificateIdentifier, Boolean copyTagsToSnapshot, Integer promotionTier, Boolean enablePerformanceInsights, String performanceInsightsKMSKeyId, final ApiCallback<ModifyDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbInstanceClass, applyImmediately, preferredMaintenanceWindow, autoMinorVersionUpgrade, newDBInstanceIdentifier, caCertificateIdentifier, copyTagsToSnapshot, promotionTier, enablePerformanceInsights, performanceInsightsKMSKeyId, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyDBSubnetGroup
     * @param dbSubnetGroupName &lt;p&gt;The name for the subnet group. This value is stored as a lowercase string. You can&#39;t modify the default subnet group. &lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param subnetIds The Amazon EC2 subnet IDs for the subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupDescription The description for the subnet group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBSubnetGroupCall(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (dbSubnetGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupDescription", dbSubnetGroupDescription));
        }

        if (subnetIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SubnetIds", subnetIds));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyDBSubnetGroupValidateBeforeCall(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbSubnetGroupName' is set
        if (dbSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbSubnetGroupName' when calling gETModifyDBSubnetGroup(Async)");
        }

        // verify the required parameter 'subnetIds' is set
        if (subnetIds == null) {
            throw new ApiException("Missing the required parameter 'subnetIds' when calling gETModifyDBSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyDBSubnetGroup(Async)");
        }

        return gETModifyDBSubnetGroupCall(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription, _callback);

    }

    /**
     * 
     * Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the subnet group. This value is stored as a lowercase string. You can&#39;t modify the default subnet group. &lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param subnetIds The Amazon EC2 subnet IDs for the subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupDescription The description for the subnet group. (optional)
     * @return ModifyDBSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBSubnetGroupResult gETModifyDBSubnetGroup(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription) throws ApiException {
        ApiResponse<ModifyDBSubnetGroupResult> localVarResp = gETModifyDBSubnetGroupWithHttpInfo(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the subnet group. This value is stored as a lowercase string. You can&#39;t modify the default subnet group. &lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param subnetIds The Amazon EC2 subnet IDs for the subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupDescription The description for the subnet group. (optional)
     * @return ApiResponse&lt;ModifyDBSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBSubnetGroupResult> gETModifyDBSubnetGroupWithHttpInfo(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription) throws ApiException {
        okhttp3.Call localVarCall = gETModifyDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription, null);
        Type localVarReturnType = new TypeToken<ModifyDBSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param dbSubnetGroupName &lt;p&gt;The name for the subnet group. This value is stored as a lowercase string. You can&#39;t modify the default subnet group. &lt;/p&gt; &lt;p&gt;Constraints: Must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;. Must not be default.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param subnetIds The Amazon EC2 subnet IDs for the subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param dbSubnetGroupDescription The description for the subnet group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyDBSubnetGroupAsync(String dbSubnetGroupName, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String dbSubnetGroupDescription, final ApiCallback<ModifyDBSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyDBSubnetGroupValidateBeforeCall(dbSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbSubnetGroupDescription, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyEventSubscription
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, set this parameter to &lt;code&gt;db-instance&lt;/code&gt;. If this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a &lt;code&gt;SourceType&lt;/code&gt; that you want to subscribe to. (optional)
     * @param enabled  A Boolean value; set to &lt;code&gt;true&lt;/code&gt; to activate the subscription.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyEventSubscriptionCall(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (snsTopicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnsTopicArn", snsTopicArn));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (eventCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EventCategories", eventCategories));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Enabled", enabled));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyEventSubscriptionValidateBeforeCall(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETModifyEventSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyEventSubscription(Async)");
        }

        return gETModifyEventSubscriptionCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled, _callback);

    }

    /**
     * 
     * Modifies an existing Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, set this parameter to &lt;code&gt;db-instance&lt;/code&gt;. If this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a &lt;code&gt;SourceType&lt;/code&gt; that you want to subscribe to. (optional)
     * @param enabled  A Boolean value; set to &lt;code&gt;true&lt;/code&gt; to activate the subscription.  (optional)
     * @return ModifyEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyEventSubscriptionResult gETModifyEventSubscription(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled) throws ApiException {
        ApiResponse<ModifyEventSubscriptionResult> localVarResp = gETModifyEventSubscriptionWithHttpInfo(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, set this parameter to &lt;code&gt;db-instance&lt;/code&gt;. If this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a &lt;code&gt;SourceType&lt;/code&gt; that you want to subscribe to. (optional)
     * @param enabled  A Boolean value; set to &lt;code&gt;true&lt;/code&gt; to activate the subscription.  (optional)
     * @return ApiResponse&lt;ModifyEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyEventSubscriptionResult> gETModifyEventSubscriptionWithHttpInfo(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled) throws ApiException {
        okhttp3.Call localVarCall = gETModifyEventSubscriptionValidateBeforeCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled, null);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param snsTopicArn The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it. (optional)
     * @param sourceType &lt;p&gt;The type of source that is generating the events. For example, if you want to be notified of events generated by an instance, set this parameter to &lt;code&gt;db-instance&lt;/code&gt;. If this value is not specified, all events are returned.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;db-instance&lt;/code&gt;, &lt;code&gt;db-parameter-group&lt;/code&gt;, &lt;code&gt;db-security-group&lt;/code&gt; &lt;/p&gt; (optional)
     * @param eventCategories  A list of event categories for a &lt;code&gt;SourceType&lt;/code&gt; that you want to subscribe to. (optional)
     * @param enabled  A Boolean value; set to &lt;code&gt;true&lt;/code&gt; to activate the subscription.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyEventSubscriptionAsync(String subscriptionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String snsTopicArn, String sourceType, List<String> eventCategories, Boolean enabled, final ApiCallback<ModifyEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyEventSubscriptionValidateBeforeCall(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, eventCategories, enabled, _callback);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyGlobalCluster
     * @param globalClusterIdentifier &lt;p&gt;The identifier for the global cluster being modified. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing global cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newGlobalClusterIdentifier &lt;p&gt;The new identifier for a global cluster when you modify a global cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;p&gt;The first character must be a letter&lt;/p&gt; &lt;p&gt;Can&#39;t end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param deletionProtection Indicates if the global cluster has deletion protection enabled. The global cluster can&#39;t be deleted when deletion protection is enabled.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyGlobalClusterCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (newGlobalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewGlobalClusterIdentifier", newGlobalClusterIdentifier));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETModifyGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyGlobalCluster(Async)");
        }

        return gETModifyGlobalClusterCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier &lt;p&gt;The identifier for the global cluster being modified. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing global cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newGlobalClusterIdentifier &lt;p&gt;The new identifier for a global cluster when you modify a global cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;p&gt;The first character must be a letter&lt;/p&gt; &lt;p&gt;Can&#39;t end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param deletionProtection Indicates if the global cluster has deletion protection enabled. The global cluster can&#39;t be deleted when deletion protection is enabled.  (optional)
     * @return ModifyGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyGlobalClusterResult gETModifyGlobalCluster(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection) throws ApiException {
        ApiResponse<ModifyGlobalClusterResult> localVarResp = gETModifyGlobalClusterWithHttpInfo(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier &lt;p&gt;The identifier for the global cluster being modified. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing global cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newGlobalClusterIdentifier &lt;p&gt;The new identifier for a global cluster when you modify a global cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;p&gt;The first character must be a letter&lt;/p&gt; &lt;p&gt;Can&#39;t end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param deletionProtection Indicates if the global cluster has deletion protection enabled. The global cluster can&#39;t be deleted when deletion protection is enabled.  (optional)
     * @return ApiResponse&lt;ModifyGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyGlobalClusterResult> gETModifyGlobalClusterWithHttpInfo(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection) throws ApiException {
        okhttp3.Call localVarCall = gETModifyGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection, null);
        Type localVarReturnType = new TypeToken<ModifyGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier &lt;p&gt;The identifier for the global cluster being modified. This parameter isn&#39;t case-sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing global cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newGlobalClusterIdentifier &lt;p&gt;The new identifier for a global cluster when you modify a global cluster. This value is stored as a lowercase string.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens&lt;/p&gt; &lt;p&gt;The first character must be a letter&lt;/p&gt; &lt;p&gt;Can&#39;t end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-cluster2&lt;/code&gt; &lt;/p&gt; (optional)
     * @param deletionProtection Indicates if the global cluster has deletion protection enabled. The global cluster can&#39;t be deleted when deletion protection is enabled.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyGlobalClusterAsync(String globalClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String newGlobalClusterIdentifier, Boolean deletionProtection, final ApiCallback<ModifyGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyGlobalClusterValidateBeforeCall(globalClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newGlobalClusterIdentifier, deletionProtection, _callback);
        Type localVarReturnType = new TypeToken<ModifyGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRebootDBInstance
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceFailover &lt;p&gt; When &lt;code&gt;true&lt;/code&gt;, the reboot is conducted through a Multi-AZ failover. &lt;/p&gt; &lt;p&gt;Constraint: You can&#39;t specify &lt;code&gt;true&lt;/code&gt; if the instance is not configured for Multi-AZ.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebootDBInstanceCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RebootDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbInstanceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBInstanceIdentifier", dbInstanceIdentifier));
        }

        if (forceFailover != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceFailover", forceFailover));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRebootDBInstanceValidateBeforeCall(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbInstanceIdentifier' is set
        if (dbInstanceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbInstanceIdentifier' when calling gETRebootDBInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRebootDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRebootDBInstance(Async)");
        }

        return gETRebootDBInstanceCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover, _callback);

    }

    /**
     * 
     * &lt;p&gt;You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. &lt;/p&gt; &lt;p&gt;Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to &lt;i&gt;rebooting&lt;/i&gt;. &lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceFailover &lt;p&gt; When &lt;code&gt;true&lt;/code&gt;, the reboot is conducted through a Multi-AZ failover. &lt;/p&gt; &lt;p&gt;Constraint: You can&#39;t specify &lt;code&gt;true&lt;/code&gt; if the instance is not configured for Multi-AZ.&lt;/p&gt; (optional)
     * @return RebootDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RebootDBInstanceResult gETRebootDBInstance(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover) throws ApiException {
        ApiResponse<RebootDBInstanceResult> localVarResp = gETRebootDBInstanceWithHttpInfo(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. &lt;/p&gt; &lt;p&gt;Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to &lt;i&gt;rebooting&lt;/i&gt;. &lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceFailover &lt;p&gt; When &lt;code&gt;true&lt;/code&gt;, the reboot is conducted through a Multi-AZ failover. &lt;/p&gt; &lt;p&gt;Constraint: You can&#39;t specify &lt;code&gt;true&lt;/code&gt; if the instance is not configured for Multi-AZ.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;RebootDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebootDBInstanceResult> gETRebootDBInstanceWithHttpInfo(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover) throws ApiException {
        okhttp3.Call localVarCall = gETRebootDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover, null);
        Type localVarReturnType = new TypeToken<RebootDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. &lt;/p&gt; &lt;p&gt;Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to &lt;i&gt;rebooting&lt;/i&gt;. &lt;/p&gt;
     * @param dbInstanceIdentifier &lt;p&gt;The instance identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceFailover &lt;p&gt; When &lt;code&gt;true&lt;/code&gt;, the reboot is conducted through a Multi-AZ failover. &lt;/p&gt; &lt;p&gt;Constraint: You can&#39;t specify &lt;code&gt;true&lt;/code&gt; if the instance is not configured for Multi-AZ.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebootDBInstanceAsync(String dbInstanceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceFailover, final ApiCallback<RebootDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRebootDBInstanceValidateBeforeCall(dbInstanceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceFailover, _callback);
        Type localVarReturnType = new TypeToken<RebootDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveFromGlobalCluster
     * @param globalClusterIdentifier The cluster identifier to detach from the Amazon DocumentDB global cluster.  (required)
     * @param dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster that was detached from the Amazon DocumentDB global cluster.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveFromGlobalClusterCall(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveFromGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalClusterIdentifier", globalClusterIdentifier));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DbClusterIdentifier", dbClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveFromGlobalClusterValidateBeforeCall(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalClusterIdentifier' is set
        if (globalClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'globalClusterIdentifier' when calling gETRemoveFromGlobalCluster(Async)");
        }

        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETRemoveFromGlobalCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveFromGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveFromGlobalCluster(Async)");
        }

        return gETRemoveFromGlobalClusterCall(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier to detach from the Amazon DocumentDB global cluster.  (required)
     * @param dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster that was detached from the Amazon DocumentDB global cluster.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RemoveFromGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromGlobalClusterResult gETRemoveFromGlobalCluster(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RemoveFromGlobalClusterResult> localVarResp = gETRemoveFromGlobalClusterWithHttpInfo(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier to detach from the Amazon DocumentDB global cluster.  (required)
     * @param dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster that was detached from the Amazon DocumentDB global cluster.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RemoveFromGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveFromGlobalClusterResult> gETRemoveFromGlobalClusterWithHttpInfo(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveFromGlobalClusterValidateBeforeCall(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RemoveFromGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param globalClusterIdentifier The cluster identifier to detach from the Amazon DocumentDB global cluster.  (required)
     * @param dbClusterIdentifier The Amazon Resource Name (ARN) identifying the cluster that was detached from the Amazon DocumentDB global cluster.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveFromGlobalClusterAsync(String globalClusterIdentifier, String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RemoveFromGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveFromGlobalClusterValidateBeforeCall(globalClusterIdentifier, dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RemoveFromGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveSourceIdentifierFromSubscription
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to remove a source identifier from. (required)
     * @param sourceIdentifier  The source identifier to be removed from the subscription, such as the instance identifier for an instance, or the name of a security group.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveSourceIdentifierFromSubscriptionCall(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveSourceIdentifierFromSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SubscriptionName", subscriptionName));
        }

        if (sourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceIdentifier", sourceIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionName' is set
        if (subscriptionName == null) {
            throw new ApiException("Missing the required parameter 'subscriptionName' when calling gETRemoveSourceIdentifierFromSubscription(Async)");
        }

        // verify the required parameter 'sourceIdentifier' is set
        if (sourceIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceIdentifier' when calling gETRemoveSourceIdentifierFromSubscription(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveSourceIdentifierFromSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveSourceIdentifierFromSubscription(Async)");
        }

        return gETRemoveSourceIdentifierFromSubscriptionCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to remove a source identifier from. (required)
     * @param sourceIdentifier  The source identifier to be removed from the subscription, such as the instance identifier for an instance, or the name of a security group.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RemoveSourceIdentifierFromSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSourceIdentifierFromSubscriptionResult gETRemoveSourceIdentifierFromSubscription(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RemoveSourceIdentifierFromSubscriptionResult> localVarResp = gETRemoveSourceIdentifierFromSubscriptionWithHttpInfo(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to remove a source identifier from. (required)
     * @param sourceIdentifier  The source identifier to be removed from the subscription, such as the instance identifier for an instance, or the name of a security group.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RemoveSourceIdentifierFromSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveSourceIdentifierFromSubscriptionResult> gETRemoveSourceIdentifierFromSubscriptionWithHttpInfo(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RemoveSourceIdentifierFromSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
     * @param subscriptionName The name of the Amazon DocumentDB event notification subscription that you want to remove a source identifier from. (required)
     * @param sourceIdentifier  The source identifier to be removed from the subscription, such as the instance identifier for an instance, or the name of a security group.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveSourceIdentifierFromSubscriptionAsync(String subscriptionName, String sourceIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RemoveSourceIdentifierFromSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(subscriptionName, sourceIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RemoveSourceIdentifierFromSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveTagsFromResource
     * @param resourceName The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN). (required)
     * @param tagKeys The tag key (name) of the tag to be removed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsFromResourceCall(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTagsFromResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (tagKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagKeys", tagKeys));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveTagsFromResourceValidateBeforeCall(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'tagKeys' is set
        if (tagKeys == null) {
            throw new ApiException("Missing the required parameter 'tagKeys' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveTagsFromResource(Async)");
        }

        return gETRemoveTagsFromResourceCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes metadata tags from an Amazon DocumentDB resource.
     * @param resourceName The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN). (required)
     * @param tagKeys The tag key (name) of the tag to be removed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETRemoveTagsFromResource(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETRemoveTagsFromResourceWithHttpInfo(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Removes metadata tags from an Amazon DocumentDB resource.
     * @param resourceName The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN). (required)
     * @param tagKeys The tag key (name) of the tag to be removed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETRemoveTagsFromResourceWithHttpInfo(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveTagsFromResourceValidateBeforeCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes metadata tags from an Amazon DocumentDB resource.
     * @param resourceName The Amazon DocumentDB resource that the tags are removed from. This value is an Amazon Resource Name (ARN). (required)
     * @param tagKeys The tag key (name) of the tag to be removed. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsFromResourceAsync(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveTagsFromResourceValidateBeforeCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETResetDBClusterParameterGroup
     * @param dbClusterParameterGroupName The name of the cluster parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters A value that is set to &lt;code&gt;true&lt;/code&gt; to reset all parameters in the cluster parameter group to their default values, and &lt;code&gt;false&lt;/code&gt; otherwise. You can&#39;t use this parameter if there is a list of parameter names specified for the &lt;code&gt;Parameters&lt;/code&gt; parameter. (optional)
     * @param parameters A list of parameter names in the cluster parameter group to reset to the default values. You can&#39;t use this parameter if the &lt;code&gt;ResetAllParameters&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResetDBClusterParameterGroupCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ResetDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (resetAllParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResetAllParameters", resetAllParameters));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETResetDBClusterParameterGroupValidateBeforeCall(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterParameterGroupName' is set
        if (dbClusterParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'dbClusterParameterGroupName' when calling gETResetDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETResetDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETResetDBClusterParameterGroup(Async)");
        }

        return gETResetDBClusterParameterGroupCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, _callback);

    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. &lt;/p&gt; &lt;p&gt; When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance reboot.&lt;/p&gt;
     * @param dbClusterParameterGroupName The name of the cluster parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters A value that is set to &lt;code&gt;true&lt;/code&gt; to reset all parameters in the cluster parameter group to their default values, and &lt;code&gt;false&lt;/code&gt; otherwise. You can&#39;t use this parameter if there is a list of parameter names specified for the &lt;code&gt;Parameters&lt;/code&gt; parameter. (optional)
     * @param parameters A list of parameter names in the cluster parameter group to reset to the default values. You can&#39;t use this parameter if the &lt;code&gt;ResetAllParameters&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. (optional)
     * @return DBClusterParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupNameMessage gETResetDBClusterParameterGroup(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters) throws ApiException {
        ApiResponse<DBClusterParameterGroupNameMessage> localVarResp = gETResetDBClusterParameterGroupWithHttpInfo(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. &lt;/p&gt; &lt;p&gt; When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance reboot.&lt;/p&gt;
     * @param dbClusterParameterGroupName The name of the cluster parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters A value that is set to &lt;code&gt;true&lt;/code&gt; to reset all parameters in the cluster parameter group to their default values, and &lt;code&gt;false&lt;/code&gt; otherwise. You can&#39;t use this parameter if there is a list of parameter names specified for the &lt;code&gt;Parameters&lt;/code&gt; parameter. (optional)
     * @param parameters A list of parameter names in the cluster parameter group to reset to the default values. You can&#39;t use this parameter if the &lt;code&gt;ResetAllParameters&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupNameMessage> gETResetDBClusterParameterGroupWithHttpInfo(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters) throws ApiException {
        okhttp3.Call localVarCall = gETResetDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. &lt;/p&gt; &lt;p&gt; When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance reboot.&lt;/p&gt;
     * @param dbClusterParameterGroupName The name of the cluster parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters A value that is set to &lt;code&gt;true&lt;/code&gt; to reset all parameters in the cluster parameter group to their default values, and &lt;code&gt;false&lt;/code&gt; otherwise. You can&#39;t use this parameter if there is a list of parameter names specified for the &lt;code&gt;Parameters&lt;/code&gt; parameter. (optional)
     * @param parameters A list of parameter names in the cluster parameter group to reset to the default values. You can&#39;t use this parameter if the &lt;code&gt;ResetAllParameters&lt;/code&gt; parameter is set to &lt;code&gt;true&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResetDBClusterParameterGroupAsync(String dbClusterParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyDBClusterParameterGroupParametersParameterInner> parameters, final ApiCallback<DBClusterParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETResetDBClusterParameterGroupValidateBeforeCall(dbClusterParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRestoreDBClusterFromSnapshot
     * @param dbClusterIdentifier &lt;p&gt;The name of the cluster to create from the snapshot or cluster snapshot. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-snapshot-id&lt;/code&gt; &lt;/p&gt; (required)
     * @param snapshotIdentifier &lt;p&gt;The identifier for the snapshot or cluster snapshot to restore from.&lt;/p&gt; &lt;p&gt;You can use either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot. However, you can use only the ARN to specify a snapshot.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param engine &lt;p&gt;The database engine to use for the new cluster.&lt;/p&gt; &lt;p&gt;Default: The same as source.&lt;/p&gt; &lt;p&gt;Constraint: Must be compatible with the engine of the source.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in. (optional)
     * @param engineVersion The version of the database engine to use for the new cluster. (optional)
     * @param port &lt;p&gt;The port number on which the new cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: The same port as the original cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The name of the subnet group to use for the new cluster.&lt;/p&gt; &lt;p&gt;Constraints: If provided, must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds A list of virtual private cloud (VPC) security groups that the new cluster will belong to. (optional)
     * @param tags The tags to be assigned to the restored cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the snapshot or cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the snapshot or the cluster snapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the snapshot or the cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enableCloudwatchLogsExports A list of log types that must be enabled for exporting to Amazon CloudWatch Logs. (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with this DB cluster.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Type:&lt;/i&gt; String.       &lt;i&gt;Required:&lt;/i&gt; No.&lt;/p&gt; &lt;p&gt;If this argument is omitted, the default DB cluster parameter group is used. If supplied, must match the name of an existing default DB cluster parameter group. The string must consist of from 1 to 255 letters, numbers or hyphens. Its first character must be a letter, and it cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestoreDBClusterFromSnapshotCall(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String dbClusterParameterGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RestoreDBClusterFromSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (snapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotIdentifier", snapshotIdentifier));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (enableCloudwatchLogsExports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnableCloudwatchLogsExports", enableCloudwatchLogsExports));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (dbClusterParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterParameterGroupName", dbClusterParameterGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRestoreDBClusterFromSnapshotValidateBeforeCall(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String dbClusterParameterGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'snapshotIdentifier' is set
        if (snapshotIdentifier == null) {
            throw new ApiException("Missing the required parameter 'snapshotIdentifier' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRestoreDBClusterFromSnapshot(Async)");
        }

        return gETRestoreDBClusterFromSnapshotCall(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection, dbClusterParameterGroupName, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new cluster from a snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the cluster to create from the snapshot or cluster snapshot. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-snapshot-id&lt;/code&gt; &lt;/p&gt; (required)
     * @param snapshotIdentifier &lt;p&gt;The identifier for the snapshot or cluster snapshot to restore from.&lt;/p&gt; &lt;p&gt;You can use either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot. However, you can use only the ARN to specify a snapshot.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param engine &lt;p&gt;The database engine to use for the new cluster.&lt;/p&gt; &lt;p&gt;Default: The same as source.&lt;/p&gt; &lt;p&gt;Constraint: Must be compatible with the engine of the source.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in. (optional)
     * @param engineVersion The version of the database engine to use for the new cluster. (optional)
     * @param port &lt;p&gt;The port number on which the new cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: The same port as the original cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The name of the subnet group to use for the new cluster.&lt;/p&gt; &lt;p&gt;Constraints: If provided, must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds A list of virtual private cloud (VPC) security groups that the new cluster will belong to. (optional)
     * @param tags The tags to be assigned to the restored cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the snapshot or cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the snapshot or the cluster snapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the snapshot or the cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enableCloudwatchLogsExports A list of log types that must be enabled for exporting to Amazon CloudWatch Logs. (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with this DB cluster.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Type:&lt;/i&gt; String.       &lt;i&gt;Required:&lt;/i&gt; No.&lt;/p&gt; &lt;p&gt;If this argument is omitted, the default DB cluster parameter group is used. If supplied, must match the name of an existing default DB cluster parameter group. The string must consist of from 1 to 255 letters, numbers or hyphens. Its first character must be a letter, and it cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; (optional)
     * @return RestoreDBClusterFromSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public RestoreDBClusterFromSnapshotResult gETRestoreDBClusterFromSnapshot(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String dbClusterParameterGroupName) throws ApiException {
        ApiResponse<RestoreDBClusterFromSnapshotResult> localVarResp = gETRestoreDBClusterFromSnapshotWithHttpInfo(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection, dbClusterParameterGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new cluster from a snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the cluster to create from the snapshot or cluster snapshot. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-snapshot-id&lt;/code&gt; &lt;/p&gt; (required)
     * @param snapshotIdentifier &lt;p&gt;The identifier for the snapshot or cluster snapshot to restore from.&lt;/p&gt; &lt;p&gt;You can use either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot. However, you can use only the ARN to specify a snapshot.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param engine &lt;p&gt;The database engine to use for the new cluster.&lt;/p&gt; &lt;p&gt;Default: The same as source.&lt;/p&gt; &lt;p&gt;Constraint: Must be compatible with the engine of the source.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in. (optional)
     * @param engineVersion The version of the database engine to use for the new cluster. (optional)
     * @param port &lt;p&gt;The port number on which the new cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: The same port as the original cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The name of the subnet group to use for the new cluster.&lt;/p&gt; &lt;p&gt;Constraints: If provided, must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds A list of virtual private cloud (VPC) security groups that the new cluster will belong to. (optional)
     * @param tags The tags to be assigned to the restored cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the snapshot or cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the snapshot or the cluster snapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the snapshot or the cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enableCloudwatchLogsExports A list of log types that must be enabled for exporting to Amazon CloudWatch Logs. (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with this DB cluster.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Type:&lt;/i&gt; String.       &lt;i&gt;Required:&lt;/i&gt; No.&lt;/p&gt; &lt;p&gt;If this argument is omitted, the default DB cluster parameter group is used. If supplied, must match the name of an existing default DB cluster parameter group. The string must consist of from 1 to 255 letters, numbers or hyphens. Its first character must be a letter, and it cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;RestoreDBClusterFromSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreDBClusterFromSnapshotResult> gETRestoreDBClusterFromSnapshotWithHttpInfo(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String dbClusterParameterGroupName) throws ApiException {
        okhttp3.Call localVarCall = gETRestoreDBClusterFromSnapshotValidateBeforeCall(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection, dbClusterParameterGroupName, null);
        Type localVarReturnType = new TypeToken<RestoreDBClusterFromSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new cluster from a snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.&lt;/p&gt;
     * @param dbClusterIdentifier &lt;p&gt;The name of the cluster to create from the snapshot or cluster snapshot. This parameter isn&#39;t case sensitive.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;my-snapshot-id&lt;/code&gt; &lt;/p&gt; (required)
     * @param snapshotIdentifier &lt;p&gt;The identifier for the snapshot or cluster snapshot to restore from.&lt;/p&gt; &lt;p&gt;You can use either the name or the Amazon Resource Name (ARN) to specify a cluster snapshot. However, you can use only the ARN to specify a snapshot.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing snapshot.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param engine &lt;p&gt;The database engine to use for the new cluster.&lt;/p&gt; &lt;p&gt;Default: The same as source.&lt;/p&gt; &lt;p&gt;Constraint: Must be compatible with the engine of the source.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param availabilityZones Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in. (optional)
     * @param engineVersion The version of the database engine to use for the new cluster. (optional)
     * @param port &lt;p&gt;The port number on which the new cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: The same port as the original cluster.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The name of the subnet group to use for the new cluster.&lt;/p&gt; &lt;p&gt;Constraints: If provided, must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds A list of virtual private cloud (VPC) security groups that the new cluster will belong to. (optional)
     * @param tags The tags to be assigned to the restored cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier to use when restoring an encrypted cluster from a DB snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the snapshot or cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the snapshot or the cluster snapshot.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the snapshot or the cluster snapshot in &lt;code&gt;SnapshotIdentifier&lt;/code&gt; is not encrypted, then the restored DB cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param enableCloudwatchLogsExports A list of log types that must be enabled for exporting to Amazon CloudWatch Logs. (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param dbClusterParameterGroupName &lt;p&gt;The name of the DB cluster parameter group to associate with this DB cluster.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Type:&lt;/i&gt; String.       &lt;i&gt;Required:&lt;/i&gt; No.&lt;/p&gt; &lt;p&gt;If this argument is omitted, the default DB cluster parameter group is used. If supplied, must match the name of an existing default DB cluster parameter group. The string must consist of from 1 to 255 letters, numbers or hyphens. Its first character must be a letter, and it cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestoreDBClusterFromSnapshotAsync(String dbClusterIdentifier, String snapshotIdentifier, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> availabilityZones, String engineVersion, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, String dbClusterParameterGroupName, final ApiCallback<RestoreDBClusterFromSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRestoreDBClusterFromSnapshotValidateBeforeCall(dbClusterIdentifier, snapshotIdentifier, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, availabilityZones, engineVersion, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection, dbClusterParameterGroupName, _callback);
        Type localVarReturnType = new TypeToken<RestoreDBClusterFromSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRestoreDBClusterToPointInTime
     * @param dbClusterIdentifier &lt;p&gt;The name of the new cluster to be created.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param sourceDBClusterIdentifier &lt;p&gt;The identifier of the source cluster from which to restore.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreType &lt;p&gt;The type of restore to be performed. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;full-copy&lt;/code&gt; - The new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;copy-on-write&lt;/code&gt; - The new DB cluster is restored as a clone of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraints: You can&#39;t specify &lt;code&gt;copy-on-write&lt;/code&gt; if the engine version of the source DB cluster is earlier than 1.11.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;RestoreType&lt;/code&gt; value, then the new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; (optional)
     * @param restoreToTime &lt;p&gt;The date and time to restore the cluster to.&lt;/p&gt; &lt;p&gt;Valid values: A time in Universal Coordinated Time (UTC) format.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be before the latest restorable time for the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be specified if the &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is not provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if the &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if the &lt;code&gt;RestoreType&lt;/code&gt; parameter is &lt;code&gt;copy-on-write&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;2015-03-07T23:45:00Z&lt;/code&gt; &lt;/p&gt; (optional)
     * @param useLatestRestorableTime &lt;p&gt;A value that is set to &lt;code&gt;true&lt;/code&gt; to restore the cluster to the latest restorable backup time, and &lt;code&gt;false&lt;/code&gt; otherwise. &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Cannot be specified if the &lt;code&gt;RestoreToTime&lt;/code&gt; parameter is provided.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the new cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Default: The default port for the engine.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The subnet group name to use for the new cluster.&lt;/p&gt; &lt;p&gt;Constraints: If provided, must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new cluster belongs to. (optional)
     * @param tags The tags to be assigned to the restored cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;You can restore to a new cluster and encrypt the new cluster with an KMS key that is different from the KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the KMS key identified by the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the cluster is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the source cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the cluster is not encrypted, then the restored cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;DBClusterIdentifier&lt;/code&gt; refers to a cluster that is not encrypted, then the restore request is rejected.&lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports A list of log types that must be enabled for exporting to Amazon CloudWatch Logs. (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestoreDBClusterToPointInTimeCall(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RestoreDBClusterToPointInTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (restoreType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RestoreType", restoreType));
        }

        if (sourceDBClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceDBClusterIdentifier", sourceDBClusterIdentifier));
        }

        if (restoreToTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RestoreToTime", restoreToTime));
        }

        if (useLatestRestorableTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UseLatestRestorableTime", useLatestRestorableTime));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (dbSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBSubnetGroupName", dbSubnetGroupName));
        }

        if (vpcSecurityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "VpcSecurityGroupIds", vpcSecurityGroupIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (enableCloudwatchLogsExports != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "EnableCloudwatchLogsExports", enableCloudwatchLogsExports));
        }

        if (deletionProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionProtection", deletionProtection));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRestoreDBClusterToPointInTimeValidateBeforeCall(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETRestoreDBClusterToPointInTime(Async)");
        }

        // verify the required parameter 'sourceDBClusterIdentifier' is set
        if (sourceDBClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'sourceDBClusterIdentifier' when calling gETRestoreDBClusterToPointInTime(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRestoreDBClusterToPointInTime(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRestoreDBClusterToPointInTime(Async)");
        }

        return gETRestoreDBClusterToPointInTimeCall(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection, _callback);

    }

    /**
     * 
     * Restores a cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. 
     * @param dbClusterIdentifier &lt;p&gt;The name of the new cluster to be created.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param sourceDBClusterIdentifier &lt;p&gt;The identifier of the source cluster from which to restore.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreType &lt;p&gt;The type of restore to be performed. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;full-copy&lt;/code&gt; - The new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;copy-on-write&lt;/code&gt; - The new DB cluster is restored as a clone of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraints: You can&#39;t specify &lt;code&gt;copy-on-write&lt;/code&gt; if the engine version of the source DB cluster is earlier than 1.11.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;RestoreType&lt;/code&gt; value, then the new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; (optional)
     * @param restoreToTime &lt;p&gt;The date and time to restore the cluster to.&lt;/p&gt; &lt;p&gt;Valid values: A time in Universal Coordinated Time (UTC) format.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be before the latest restorable time for the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be specified if the &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is not provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if the &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if the &lt;code&gt;RestoreType&lt;/code&gt; parameter is &lt;code&gt;copy-on-write&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;2015-03-07T23:45:00Z&lt;/code&gt; &lt;/p&gt; (optional)
     * @param useLatestRestorableTime &lt;p&gt;A value that is set to &lt;code&gt;true&lt;/code&gt; to restore the cluster to the latest restorable backup time, and &lt;code&gt;false&lt;/code&gt; otherwise. &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Cannot be specified if the &lt;code&gt;RestoreToTime&lt;/code&gt; parameter is provided.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the new cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Default: The default port for the engine.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The subnet group name to use for the new cluster.&lt;/p&gt; &lt;p&gt;Constraints: If provided, must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new cluster belongs to. (optional)
     * @param tags The tags to be assigned to the restored cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;You can restore to a new cluster and encrypt the new cluster with an KMS key that is different from the KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the KMS key identified by the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the cluster is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the source cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the cluster is not encrypted, then the restored cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;DBClusterIdentifier&lt;/code&gt; refers to a cluster that is not encrypted, then the restore request is rejected.&lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports A list of log types that must be enabled for exporting to Amazon CloudWatch Logs. (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @return RestoreDBClusterToPointInTimeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public RestoreDBClusterToPointInTimeResult gETRestoreDBClusterToPointInTime(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection) throws ApiException {
        ApiResponse<RestoreDBClusterToPointInTimeResult> localVarResp = gETRestoreDBClusterToPointInTimeWithHttpInfo(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection);
        return localVarResp.getData();
    }

    /**
     * 
     * Restores a cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. 
     * @param dbClusterIdentifier &lt;p&gt;The name of the new cluster to be created.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param sourceDBClusterIdentifier &lt;p&gt;The identifier of the source cluster from which to restore.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreType &lt;p&gt;The type of restore to be performed. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;full-copy&lt;/code&gt; - The new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;copy-on-write&lt;/code&gt; - The new DB cluster is restored as a clone of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraints: You can&#39;t specify &lt;code&gt;copy-on-write&lt;/code&gt; if the engine version of the source DB cluster is earlier than 1.11.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;RestoreType&lt;/code&gt; value, then the new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; (optional)
     * @param restoreToTime &lt;p&gt;The date and time to restore the cluster to.&lt;/p&gt; &lt;p&gt;Valid values: A time in Universal Coordinated Time (UTC) format.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be before the latest restorable time for the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be specified if the &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is not provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if the &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if the &lt;code&gt;RestoreType&lt;/code&gt; parameter is &lt;code&gt;copy-on-write&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;2015-03-07T23:45:00Z&lt;/code&gt; &lt;/p&gt; (optional)
     * @param useLatestRestorableTime &lt;p&gt;A value that is set to &lt;code&gt;true&lt;/code&gt; to restore the cluster to the latest restorable backup time, and &lt;code&gt;false&lt;/code&gt; otherwise. &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Cannot be specified if the &lt;code&gt;RestoreToTime&lt;/code&gt; parameter is provided.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the new cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Default: The default port for the engine.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The subnet group name to use for the new cluster.&lt;/p&gt; &lt;p&gt;Constraints: If provided, must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new cluster belongs to. (optional)
     * @param tags The tags to be assigned to the restored cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;You can restore to a new cluster and encrypt the new cluster with an KMS key that is different from the KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the KMS key identified by the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the cluster is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the source cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the cluster is not encrypted, then the restored cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;DBClusterIdentifier&lt;/code&gt; refers to a cluster that is not encrypted, then the restore request is rejected.&lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports A list of log types that must be enabled for exporting to Amazon CloudWatch Logs. (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @return ApiResponse&lt;RestoreDBClusterToPointInTimeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreDBClusterToPointInTimeResult> gETRestoreDBClusterToPointInTimeWithHttpInfo(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection) throws ApiException {
        okhttp3.Call localVarCall = gETRestoreDBClusterToPointInTimeValidateBeforeCall(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection, null);
        Type localVarReturnType = new TypeToken<RestoreDBClusterToPointInTimeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restores a cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. 
     * @param dbClusterIdentifier &lt;p&gt;The name of the new cluster to be created.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param sourceDBClusterIdentifier &lt;p&gt;The identifier of the source cluster from which to restore.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must match the identifier of an existing &lt;code&gt;DBCluster&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreType &lt;p&gt;The type of restore to be performed. You can specify one of the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;full-copy&lt;/code&gt; - The new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;copy-on-write&lt;/code&gt; - The new DB cluster is restored as a clone of the source DB cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Constraints: You can&#39;t specify &lt;code&gt;copy-on-write&lt;/code&gt; if the engine version of the source DB cluster is earlier than 1.11.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a &lt;code&gt;RestoreType&lt;/code&gt; value, then the new DB cluster is restored as a full copy of the source DB cluster.&lt;/p&gt; (optional)
     * @param restoreToTime &lt;p&gt;The date and time to restore the cluster to.&lt;/p&gt; &lt;p&gt;Valid values: A time in Universal Coordinated Time (UTC) format.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be before the latest restorable time for the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be specified if the &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is not provided.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if the &lt;code&gt;UseLatestRestorableTime&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be specified if the &lt;code&gt;RestoreType&lt;/code&gt; parameter is &lt;code&gt;copy-on-write&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;2015-03-07T23:45:00Z&lt;/code&gt; &lt;/p&gt; (optional)
     * @param useLatestRestorableTime &lt;p&gt;A value that is set to &lt;code&gt;true&lt;/code&gt; to restore the cluster to the latest restorable backup time, and &lt;code&gt;false&lt;/code&gt; otherwise. &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints: Cannot be specified if the &lt;code&gt;RestoreToTime&lt;/code&gt; parameter is provided.&lt;/p&gt; (optional)
     * @param port &lt;p&gt;The port number on which the new cluster accepts connections.&lt;/p&gt; &lt;p&gt;Constraints: Must be a value from &lt;code&gt;1150&lt;/code&gt; to &lt;code&gt;65535&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Default: The default port for the engine.&lt;/p&gt; (optional)
     * @param dbSubnetGroupName &lt;p&gt;The subnet group name to use for the new cluster.&lt;/p&gt; &lt;p&gt;Constraints: If provided, must match the name of an existing &lt;code&gt;DBSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mySubnetgroup&lt;/code&gt; &lt;/p&gt; (optional)
     * @param vpcSecurityGroupIds A list of VPC security groups that the new cluster belongs to. (optional)
     * @param tags The tags to be assigned to the restored cluster. (optional)
     * @param kmsKeyId &lt;p&gt;The KMS key identifier to use when restoring an encrypted cluster from an encrypted cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a cluster with the same Amazon Web Services account that owns the KMS encryption key used to encrypt the new cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.&lt;/p&gt; &lt;p&gt;You can restore to a new cluster and encrypt the new cluster with an KMS key that is different from the KMS key used to encrypt the source cluster. The new DB cluster is encrypted with the KMS key identified by the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;If you do not specify a value for the &lt;code&gt;KmsKeyId&lt;/code&gt; parameter, then the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the cluster is encrypted, then the restored cluster is encrypted using the KMS key that was used to encrypt the source cluster.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the cluster is not encrypted, then the restored cluster is not encrypted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If &lt;code&gt;DBClusterIdentifier&lt;/code&gt; refers to a cluster that is not encrypted, then the restore request is rejected.&lt;/p&gt; (optional)
     * @param enableCloudwatchLogsExports A list of log types that must be enabled for exporting to Amazon CloudWatch Logs. (optional)
     * @param deletionProtection Specifies whether this cluster can be deleted. If &lt;code&gt;DeletionProtection&lt;/code&gt; is enabled, the cluster cannot be deleted unless it is modified and &lt;code&gt;DeletionProtection&lt;/code&gt; is disabled. &lt;code&gt;DeletionProtection&lt;/code&gt; protects clusters from being accidentally deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRestoreDBClusterToPointInTimeAsync(String dbClusterIdentifier, String sourceDBClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String restoreType, OffsetDateTime restoreToTime, Boolean useLatestRestorableTime, Integer port, String dbSubnetGroupName, List<String> vpcSecurityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, String kmsKeyId, List<String> enableCloudwatchLogsExports, Boolean deletionProtection, final ApiCallback<RestoreDBClusterToPointInTimeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRestoreDBClusterToPointInTimeValidateBeforeCall(dbClusterIdentifier, sourceDBClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreType, restoreToTime, useLatestRestorableTime, port, dbSubnetGroupName, vpcSecurityGroupIds, tags, kmsKeyId, enableCloudwatchLogsExports, deletionProtection, _callback);
        Type localVarReturnType = new TypeToken<RestoreDBClusterToPointInTimeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStartDBCluster
     * @param dbClusterIdentifier The identifier of the cluster to restart. Example: &lt;code&gt;docdb-2019-05-28-15-24-52&lt;/code&gt;  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StartDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStartDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETStartDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStartDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStartDBCluster(Async)");
        }

        return gETStartDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Restarts the stopped cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param dbClusterIdentifier The identifier of the cluster to restart. Example: &lt;code&gt;docdb-2019-05-28-15-24-52&lt;/code&gt;  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StartDBClusterResult gETStartDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartDBClusterResult> localVarResp = gETStartDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Restarts the stopped cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param dbClusterIdentifier The identifier of the cluster to restart. Example: &lt;code&gt;docdb-2019-05-28-15-24-52&lt;/code&gt;  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartDBClusterResult> gETStartDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETStartDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restarts the stopped cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param dbClusterIdentifier The identifier of the cluster to restart. Example: &lt;code&gt;docdb-2019-05-28-15-24-52&lt;/code&gt;  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStartDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStopDBCluster
     * @param dbClusterIdentifier The identifier of the cluster to stop. Example: &lt;code&gt;docdb-2019-05-28-15-24-52&lt;/code&gt;  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStopDBClusterCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StopDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dbClusterIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DBClusterIdentifier", dbClusterIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStopDBClusterValidateBeforeCall(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dbClusterIdentifier' is set
        if (dbClusterIdentifier == null) {
            throw new ApiException("Missing the required parameter 'dbClusterIdentifier' when calling gETStopDBCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStopDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStopDBCluster(Async)");
        }

        return gETStopDBClusterCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Stops the running cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. The cluster must be in the &lt;i&gt;available&lt;/i&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param dbClusterIdentifier The identifier of the cluster to stop. Example: &lt;code&gt;docdb-2019-05-28-15-24-52&lt;/code&gt;  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StopDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StopDBClusterResult gETStopDBCluster(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StopDBClusterResult> localVarResp = gETStopDBClusterWithHttpInfo(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops the running cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. The cluster must be in the &lt;i&gt;available&lt;/i&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param dbClusterIdentifier The identifier of the cluster to stop. Example: &lt;code&gt;docdb-2019-05-28-15-24-52&lt;/code&gt;  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StopDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopDBClusterResult> gETStopDBClusterWithHttpInfo(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETStopDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StopDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops the running cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. The cluster must be in the &lt;i&gt;available&lt;/i&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param dbClusterIdentifier The identifier of the cluster to stop. Example: &lt;code&gt;docdb-2019-05-28-15-24-52&lt;/code&gt;  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStopDBClusterAsync(String dbClusterIdentifier, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StopDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStopDBClusterValidateBeforeCall(dbClusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StopDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddSourceIdentifierToSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addSourceIdentifierToSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddSourceIdentifierToSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSourceIdentifierToSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=AddSourceIdentifierToSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddSourceIdentifierToSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddSourceIdentifierToSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddSourceIdentifierToSubscription(Async)");
        }

        return pOSTAddSourceIdentifierToSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage, _callback);

    }

    /**
     * 
     * Adds a source identifier to an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addSourceIdentifierToSubscriptionMessage  (optional)
     * @return AddSourceIdentifierToSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public AddSourceIdentifierToSubscriptionResult pOSTAddSourceIdentifierToSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage) throws ApiException {
        ApiResponse<AddSourceIdentifierToSubscriptionResult> localVarResp = pOSTAddSourceIdentifierToSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a source identifier to an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addSourceIdentifierToSubscriptionMessage  (optional)
     * @return ApiResponse&lt;AddSourceIdentifierToSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddSourceIdentifierToSubscriptionResult> pOSTAddSourceIdentifierToSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddSourceIdentifierToSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<AddSourceIdentifierToSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a source identifier to an existing event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addSourceIdentifierToSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddSourceIdentifierToSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddSourceIdentifierToSubscriptionMessage addSourceIdentifierToSubscriptionMessage, final ApiCallback<AddSourceIdentifierToSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddSourceIdentifierToSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addSourceIdentifierToSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<AddSourceIdentifierToSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddTagsToResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsToResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagsToResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=AddTagsToResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddTagsToResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddTagsToResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddTagsToResource(Async)");
        }

        return pOSTAddTagsToResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, _callback);

    }

    /**
     * 
     * Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a &lt;code&gt;Condition&lt;/code&gt; statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTAddTagsToResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage) throws ApiException {
        pOSTAddTagsToResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage);
    }

    /**
     * 
     * Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a &lt;code&gt;Condition&lt;/code&gt; statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTAddTagsToResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddTagsToResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a &lt;code&gt;Condition&lt;/code&gt; statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsToResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddTagsToResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTApplyPendingMaintenanceAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyPendingMaintenanceActionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTApplyPendingMaintenanceActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applyPendingMaintenanceActionMessage;

        // create path and map variables
        String localVarPath = "/#Action=ApplyPendingMaintenanceAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTApplyPendingMaintenanceActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTApplyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTApplyPendingMaintenanceAction(Async)");
        }

        return pOSTApplyPendingMaintenanceActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage, _callback);

    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyPendingMaintenanceActionMessage  (optional)
     * @return ApplyPendingMaintenanceActionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApplyPendingMaintenanceActionResult pOSTApplyPendingMaintenanceAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage) throws ApiException {
        ApiResponse<ApplyPendingMaintenanceActionResult> localVarResp = pOSTApplyPendingMaintenanceActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyPendingMaintenanceActionMessage  (optional)
     * @return ApiResponse&lt;ApplyPendingMaintenanceActionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplyPendingMaintenanceActionResult> pOSTApplyPendingMaintenanceActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTApplyPendingMaintenanceActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage, null);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param applyPendingMaintenanceActionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTApplyPendingMaintenanceActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, final ApiCallback<ApplyPendingMaintenanceActionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTApplyPendingMaintenanceActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, applyPendingMaintenanceActionMessage, _callback);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCopyDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCopyDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCopyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCopyDBClusterParameterGroup(Async)");
        }

        return pOSTCopyDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * Copies the specified cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterParameterGroupMessage  (optional)
     * @return CopyDBClusterParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBClusterParameterGroupResult pOSTCopyDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage) throws ApiException {
        ApiResponse<CopyDBClusterParameterGroupResult> localVarResp = pOSTCopyDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Copies the specified cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CopyDBClusterParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBClusterParameterGroupResult> pOSTCopyDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCopyDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CopyDBClusterParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copies the specified cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterParameterGroupMessage copyDBClusterParameterGroupMessage, final ApiCallback<CopyDBClusterParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCopyDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CopyDBClusterParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCopyDBClusterSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBClusterSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copyDBClusterSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=CopyDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCopyDBClusterSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCopyDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCopyDBClusterSnapshot(Async)");
        }

        return pOSTCopyDBClusterSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Copies a snapshot of a cluster.&lt;/p&gt; &lt;p&gt;To copy a cluster snapshot from a shared manual cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; while that cluster snapshot is in the &lt;i&gt;copying&lt;/i&gt; status.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterSnapshotMessage  (optional)
     * @return CopyDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public CopyDBClusterSnapshotResult pOSTCopyDBClusterSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage) throws ApiException {
        ApiResponse<CopyDBClusterSnapshotResult> localVarResp = pOSTCopyDBClusterSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Copies a snapshot of a cluster.&lt;/p&gt; &lt;p&gt;To copy a cluster snapshot from a shared manual cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; while that cluster snapshot is in the &lt;i&gt;copying&lt;/i&gt; status.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterSnapshotMessage  (optional)
     * @return ApiResponse&lt;CopyDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopyDBClusterSnapshotResult> pOSTCopyDBClusterSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCopyDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<CopyDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Copies a snapshot of a cluster.&lt;/p&gt; &lt;p&gt;To copy a cluster snapshot from a shared manual cluster snapshot, &lt;code&gt;SourceDBClusterSnapshotIdentifier&lt;/code&gt; must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by &lt;code&gt;TargetDBClusterSnapshotIdentifier&lt;/code&gt; while that cluster snapshot is in the &lt;i&gt;copying&lt;/i&gt; status.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copyDBClusterSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopyDBClusterSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopyDBClusterSnapshotMessage copyDBClusterSnapshotMessage, final ApiCallback<CopyDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCopyDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyDBClusterSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<CopyDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBCluster(Async)");
        }

        return pOSTCreateDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage, _callback);

    }

    /**
     * 
     * Creates a new Amazon DocumentDB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterMessage  (optional)
     * @return CreateDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterResult pOSTCreateDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage) throws ApiException {
        ApiResponse<CreateDBClusterResult> localVarResp = pOSTCreateDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new Amazon DocumentDB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterMessage  (optional)
     * @return ApiResponse&lt;CreateDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterResult> pOSTCreateDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new Amazon DocumentDB cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterMessage createDBClusterMessage, final ApiCallback<CreateDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBClusterParameterGroup(Async)");
        }

        return pOSTCreateDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a cluster parameter group apply to all of the instances in a cluster.&lt;/p&gt; &lt;p&gt;A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the &lt;code&gt;default.docdb3.6&lt;/code&gt; cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\&quot;&gt; create a new parameter group&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\&quot;&gt; copy an existing parameter group&lt;/a&gt;, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\&quot;&gt; Modifying Amazon DocumentDB Cluster Parameter Groups&lt;/a&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterParameterGroupMessage  (optional)
     * @return CreateDBClusterParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterParameterGroupResult pOSTCreateDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage) throws ApiException {
        ApiResponse<CreateDBClusterParameterGroupResult> localVarResp = pOSTCreateDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a cluster parameter group apply to all of the instances in a cluster.&lt;/p&gt; &lt;p&gt;A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the &lt;code&gt;default.docdb3.6&lt;/code&gt; cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\&quot;&gt; create a new parameter group&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\&quot;&gt; copy an existing parameter group&lt;/a&gt;, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\&quot;&gt; Modifying Amazon DocumentDB Cluster Parameter Groups&lt;/a&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CreateDBClusterParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterParameterGroupResult> pOSTCreateDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new cluster parameter group.&lt;/p&gt; &lt;p&gt;Parameters in a cluster parameter group apply to all of the instances in a cluster.&lt;/p&gt; &lt;p&gt;A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the &lt;code&gt;default.docdb3.6&lt;/code&gt; cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html\&quot;&gt; create a new parameter group&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html\&quot;&gt; copy an existing parameter group&lt;/a&gt;, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html\&quot;&gt; Modifying Amazon DocumentDB Cluster Parameter Groups&lt;/a&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterParameterGroupMessage createDBClusterParameterGroupMessage, final ApiCallback<CreateDBClusterParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBClusterSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBClusterSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBClusterSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBClusterSnapshot(Async)");
        }

        return pOSTCreateDBClusterSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage, _callback);

    }

    /**
     * 
     * Creates a snapshot of a cluster. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterSnapshotMessage  (optional)
     * @return CreateDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBClusterSnapshotResult pOSTCreateDBClusterSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage) throws ApiException {
        ApiResponse<CreateDBClusterSnapshotResult> localVarResp = pOSTCreateDBClusterSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a snapshot of a cluster. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterSnapshotMessage  (optional)
     * @return ApiResponse&lt;CreateDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBClusterSnapshotResult> pOSTCreateDBClusterSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a snapshot of a cluster. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBClusterSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBClusterSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBClusterSnapshotMessage createDBClusterSnapshotMessage, final ApiCallback<CreateDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBClusterSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBInstanceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBInstanceMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBInstance(Async)");
        }

        return pOSTCreateDBInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage, _callback);

    }

    /**
     * 
     * Creates a new instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBInstanceMessage  (optional)
     * @return CreateDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBInstanceResult pOSTCreateDBInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage) throws ApiException {
        ApiResponse<CreateDBInstanceResult> localVarResp = pOSTCreateDBInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBInstanceMessage  (optional)
     * @return ApiResponse&lt;CreateDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBInstanceResult> pOSTCreateDBInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBInstanceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InstanceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBInstanceMessage createDBInstanceMessage, final ApiCallback<CreateDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBInstanceMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateDBSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDBSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateDBSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateDBSubnetGroup(Async)");
        }

        return pOSTCreateDBSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage, _callback);

    }

    /**
     * 
     * Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBSubnetGroupMessage  (optional)
     * @return CreateDBSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBSubnetGroupResult pOSTCreateDBSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage) throws ApiException {
        ApiResponse<CreateDBSubnetGroupResult> localVarResp = pOSTCreateDBSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;CreateDBSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBSubnetGroupResult> pOSTCreateDBSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateDBSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createDBSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateDBSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateDBSubnetGroupMessage createDBSubnetGroupMessage, final ApiCallback<CreateDBSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createDBSubnetGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateDBSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateEventSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEventSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateEventSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateEventSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateEventSubscription(Async)");
        }

        return pOSTCreateEventSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (&lt;code&gt;SourceIds&lt;/code&gt;) that trigger the events, and you can provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events that you want to be notified of. For example, you can specify &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt;, &lt;code&gt;SourceIds &#x3D; mydbinstance1, mydbinstance2&lt;/code&gt; and &lt;code&gt;EventCategories &#x3D; Availability, Backup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt; (such as &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; myDBInstance1&lt;/code&gt;), you are notified of all the &lt;code&gt;db-instance&lt;/code&gt; events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but do not specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the &lt;code&gt;SourceType&lt;/code&gt; or the &lt;code&gt;SourceIdentifier&lt;/code&gt;, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEventSubscriptionMessage  (optional)
     * @return CreateEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventSubscriptionResult pOSTCreateEventSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage) throws ApiException {
        ApiResponse<CreateEventSubscriptionResult> localVarResp = pOSTCreateEventSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (&lt;code&gt;SourceIds&lt;/code&gt;) that trigger the events, and you can provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events that you want to be notified of. For example, you can specify &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt;, &lt;code&gt;SourceIds &#x3D; mydbinstance1, mydbinstance2&lt;/code&gt; and &lt;code&gt;EventCategories &#x3D; Availability, Backup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt; (such as &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; myDBInstance1&lt;/code&gt;), you are notified of all the &lt;code&gt;db-instance&lt;/code&gt; events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but do not specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the &lt;code&gt;SourceType&lt;/code&gt; or the &lt;code&gt;SourceIdentifier&lt;/code&gt;, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEventSubscriptionMessage  (optional)
     * @return ApiResponse&lt;CreateEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEventSubscriptionResult> pOSTCreateEventSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.&lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (&lt;code&gt;SourceIds&lt;/code&gt;) that trigger the events, and you can provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events that you want to be notified of. For example, you can specify &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt;, &lt;code&gt;SourceIds &#x3D; mydbinstance1, mydbinstance2&lt;/code&gt; and &lt;code&gt;EventCategories &#x3D; Availability, Backup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt; (such as &lt;code&gt;SourceType &#x3D; db-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; myDBInstance1&lt;/code&gt;), you are notified of all the &lt;code&gt;db-instance&lt;/code&gt; events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but do not specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the &lt;code&gt;SourceType&lt;/code&gt; or the &lt;code&gt;SourceIdentifier&lt;/code&gt;, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createEventSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionAlreadyExistFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateEventSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateEventSubscriptionMessage createEventSubscriptionMessage, final ApiCallback<CreateEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateGlobalCluster(Async)");
        }

        return pOSTCreateGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalClusterMessage  (optional)
     * @return CreateGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalClusterResult pOSTCreateGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage) throws ApiException {
        ApiResponse<CreateGlobalClusterResult> localVarResp = pOSTCreateGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;CreateGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalClusterResult> pOSTCreateGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<CreateGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GlobalClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalClusterMessage createGlobalClusterMessage, final ApiCallback<CreateGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBCluster(Async)");
        }

        return pOSTDeleteDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterMessage  (optional)
     * @return DeleteDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterResult pOSTDeleteDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage) throws ApiException {
        ApiResponse<DeleteDBClusterResult> localVarResp = pOSTDeleteDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterMessage  (optional)
     * @return ApiResponse&lt;DeleteDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterResult> pOSTDeleteDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can&#39;t be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterMessage deleteDBClusterMessage, final ApiCallback<DeleteDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBClusterParameterGroup(Async)");
        }

        return pOSTDeleteDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * Deletes a specified cluster parameter group. The cluster parameter group to be deleted can&#39;t be associated with any clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterParameterGroupMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage) throws ApiException {
        pOSTDeleteDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage);
    }

    /**
     * 
     * Deletes a specified cluster parameter group. The cluster parameter group to be deleted can&#39;t be associated with any clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified cluster parameter group. The cluster parameter group to be deleted can&#39;t be associated with any clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterParameterGroupMessage deleteDBClusterParameterGroupMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterParameterGroupMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBClusterSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBClusterSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBClusterSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBClusterSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBClusterSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBClusterSnapshot(Async)");
        }

        return pOSTDeleteDBClusterSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterSnapshotMessage  (optional)
     * @return DeleteDBClusterSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBClusterSnapshotResult pOSTDeleteDBClusterSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage) throws ApiException {
        ApiResponse<DeleteDBClusterSnapshotResult> localVarResp = pOSTDeleteDBClusterSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterSnapshotMessage  (optional)
     * @return ApiResponse&lt;DeleteDBClusterSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBClusterSnapshotResult> pOSTDeleteDBClusterSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<DeleteDBClusterSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The cluster snapshot must be in the &lt;code&gt;available&lt;/code&gt; state to be deleted.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBClusterSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBClusterSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBClusterSnapshotMessage deleteDBClusterSnapshotMessage, final ApiCallback<DeleteDBClusterSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBClusterSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBClusterSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBClusterSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBInstanceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBInstanceMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBInstance(Async)");
        }

        return pOSTDeleteDBInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage, _callback);

    }

    /**
     * 
     * Deletes a previously provisioned instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBInstanceMessage  (optional)
     * @return DeleteDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDBInstanceResult pOSTDeleteDBInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage) throws ApiException {
        ApiResponse<DeleteDBInstanceResult> localVarResp = pOSTDeleteDBInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a previously provisioned instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBInstanceMessage  (optional)
     * @return ApiResponse&lt;DeleteDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDBInstanceResult> pOSTDeleteDBInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage, null);
        Type localVarReturnType = new TypeToken<DeleteDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a previously provisioned instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBInstanceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBInstanceMessage deleteDBInstanceMessage, final ApiCallback<DeleteDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBInstanceMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteDBSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDBSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteDBSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteDBSubnetGroup(Async)");
        }

        return pOSTDeleteDBSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBSubnetGroupMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteDBSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage) throws ApiException {
        pOSTDeleteDBSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage);
    }

    /**
     * 
     * &lt;p&gt;Deletes a subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteDBSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified database subnet group must not be associated with any DB instances.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteDBSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSubnetStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteDBSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteDBSubnetGroupMessage deleteDBSubnetGroupMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteDBSubnetGroupMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteEventSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEventSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteEventSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteEventSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteEventSubscription(Async)");
        }

        return pOSTDeleteEventSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage, _callback);

    }

    /**
     * 
     * Deletes an Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEventSubscriptionMessage  (optional)
     * @return DeleteEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEventSubscriptionResult pOSTDeleteEventSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage) throws ApiException {
        ApiResponse<DeleteEventSubscriptionResult> localVarResp = pOSTDeleteEventSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEventSubscriptionMessage  (optional)
     * @return ApiResponse&lt;DeleteEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteEventSubscriptionResult> pOSTDeleteEventSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteEventSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidEventSubscriptionStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteEventSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, final ApiCallback<DeleteEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteGlobalCluster(Async)");
        }

        return pOSTDeleteGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalClusterMessage  (optional)
     * @return DeleteGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGlobalClusterResult pOSTDeleteGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage) throws ApiException {
        ApiResponse<DeleteGlobalClusterResult> localVarResp = pOSTDeleteGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;DeleteGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGlobalClusterResult> pOSTDeleteGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<DeleteGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalClusterMessage deleteGlobalClusterMessage, final ApiCallback<DeleteGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeCertificates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCertificatesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCertificatesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCertificatesMessage describeCertificatesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCertificatesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeCertificatesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCertificatesMessage describeCertificatesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeCertificates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeCertificates(Async)");
        }

        return pOSTDescribeCertificatesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCertificatesMessage, _callback);

    }

    /**
     * 
     * Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCertificatesMessage  (optional)
     * @return CertificateMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CertificateMessage pOSTDescribeCertificates(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCertificatesMessage describeCertificatesMessage) throws ApiException {
        ApiResponse<CertificateMessage> localVarResp = pOSTDescribeCertificatesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCertificatesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCertificatesMessage  (optional)
     * @return ApiResponse&lt;CertificateMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateMessage> pOSTDescribeCertificatesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCertificatesMessage describeCertificatesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCertificatesMessage, null);
        Type localVarReturnType = new TypeToken<CertificateMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCertificatesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCertificatesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCertificatesMessage describeCertificatesMessage, final ApiCallback<CertificateMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeCertificatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCertificatesMessage, _callback);
        Type localVarReturnType = new TypeToken<CertificateMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterParameterGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParameterGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterParameterGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterParameterGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterParameterGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterParameterGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterParameterGroups(Async)");
        }

        return pOSTDescribeDBClusterParameterGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage, _callback);

    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list contains only the description of the specified cluster parameter group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParameterGroupsMessage  (optional)
     * @return DBClusterParameterGroupsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupsMessage pOSTDescribeDBClusterParameterGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage) throws ApiException {
        ApiResponse<DBClusterParameterGroupsMessage> localVarResp = pOSTDescribeDBClusterParameterGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list contains only the description of the specified cluster parameter group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParameterGroupsMessage  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupsMessage> pOSTDescribeDBClusterParameterGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of &lt;code&gt;DBClusterParameterGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; parameter is specified, the list contains only the description of the specified cluster parameter group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParameterGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterParameterGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage, final ApiCallback<DBClusterParameterGroupsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParameterGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterParameters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParametersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterParametersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterParametersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterParametersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterParameters(Async)");
        }

        return pOSTDescribeDBClusterParametersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParametersMessage  (optional)
     * @return DBClusterParameterGroupDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupDetails pOSTDescribeDBClusterParameters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage) throws ApiException {
        ApiResponse<DBClusterParameterGroupDetails> localVarResp = pOSTDescribeDBClusterParametersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParametersMessage  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupDetails> pOSTDescribeDBClusterParametersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular cluster parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterParametersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterParametersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterParametersMessage describeDBClusterParametersMessage, final ApiCallback<DBClusterParameterGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterParametersMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterSnapshotAttributes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeDBClusterSnapshotAttributesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterSnapshotAttributesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterSnapshotAttributesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterSnapshotAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterSnapshotAttributesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterSnapshotAttributes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterSnapshotAttributes(Async)");
        }

        return pOSTDescribeDBClusterSnapshotAttributesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When you share snapshots with other Amazon Web Services accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeDBClusterSnapshotAttributesMessage  (optional)
     * @return DescribeDBClusterSnapshotAttributesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeDBClusterSnapshotAttributesResult pOSTDescribeDBClusterSnapshotAttributes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage) throws ApiException {
        ApiResponse<DescribeDBClusterSnapshotAttributesResult> localVarResp = pOSTDescribeDBClusterSnapshotAttributesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When you share snapshots with other Amazon Web Services accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeDBClusterSnapshotAttributesMessage  (optional)
     * @return ApiResponse&lt;DescribeDBClusterSnapshotAttributesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeDBClusterSnapshotAttributesResult> pOSTDescribeDBClusterSnapshotAttributesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterSnapshotAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage, null);
        Type localVarReturnType = new TypeToken<DescribeDBClusterSnapshotAttributesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.&lt;/p&gt; &lt;p&gt;When you share snapshots with other Amazon Web Services accounts, &lt;code&gt;DescribeDBClusterSnapshotAttributes&lt;/code&gt; returns the &lt;code&gt;restore&lt;/code&gt; attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If &lt;code&gt;all&lt;/code&gt; is included in the list of values for the &lt;code&gt;restore&lt;/code&gt; attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeDBClusterSnapshotAttributesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterSnapshotAttributesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeDBClusterSnapshotAttributesMessage describeDBClusterSnapshotAttributesMessage, final ApiCallback<DescribeDBClusterSnapshotAttributesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterSnapshotAttributesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeDBClusterSnapshotAttributesMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeDBClusterSnapshotAttributesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusterSnapshots
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterSnapshotsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterSnapshotsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClusterSnapshotsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusterSnapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClusterSnapshotsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusterSnapshots(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusterSnapshots(Async)");
        }

        return pOSTDescribeDBClusterSnapshotsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage, _callback);

    }

    /**
     * 
     * Returns information about cluster snapshots. This API operation supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterSnapshotsMessage  (optional)
     * @return DBClusterSnapshotMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterSnapshotMessage pOSTDescribeDBClusterSnapshots(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage) throws ApiException {
        ApiResponse<DBClusterSnapshotMessage> localVarResp = pOSTDescribeDBClusterSnapshotsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about cluster snapshots. This API operation supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterSnapshotsMessage  (optional)
     * @return ApiResponse&lt;DBClusterSnapshotMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterSnapshotMessage> pOSTDescribeDBClusterSnapshotsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClusterSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterSnapshotMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about cluster snapshots. This API operation supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClusterSnapshotsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClusterSnapshotsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClusterSnapshotsMessage describeDBClusterSnapshotsMessage, final ApiCallback<DBClusterSnapshotMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClusterSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClusterSnapshotsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterSnapshotMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClustersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBClustersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBClusters(Async)");
        }

        return pOSTDescribeDBClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage, _callback);

    }

    /**
     * 
     * Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the &lt;code&gt;filterName&#x3D;engine,Values&#x3D;docdb&lt;/code&gt; filter parameter to return only Amazon DocumentDB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClustersMessage  (optional)
     * @return DBClusterMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterMessage pOSTDescribeDBClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage) throws ApiException {
        ApiResponse<DBClusterMessage> localVarResp = pOSTDescribeDBClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the &lt;code&gt;filterName&#x3D;engine,Values&#x3D;docdb&lt;/code&gt; filter parameter to return only Amazon DocumentDB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClustersMessage  (optional)
     * @return ApiResponse&lt;DBClusterMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterMessage> pOSTDescribeDBClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the &lt;code&gt;filterName&#x3D;engine,Values&#x3D;docdb&lt;/code&gt; filter parameter to return only Amazon DocumentDB clusters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBClustersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBClustersMessage describeDBClustersMessage, final ApiCallback<DBClusterMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBClustersMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBEngineVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBEngineVersionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBEngineVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBEngineVersionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBEngineVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBEngineVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBEngineVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBEngineVersions(Async)");
        }

        return pOSTDescribeDBEngineVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage, _callback);

    }

    /**
     * 
     * Returns a list of the available engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBEngineVersionsMessage  (optional)
     * @return DBEngineVersionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DBEngineVersionMessage pOSTDescribeDBEngineVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage) throws ApiException {
        ApiResponse<DBEngineVersionMessage> localVarResp = pOSTDescribeDBEngineVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBEngineVersionsMessage  (optional)
     * @return ApiResponse&lt;DBEngineVersionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBEngineVersionMessage> pOSTDescribeDBEngineVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage, null);
        Type localVarReturnType = new TypeToken<DBEngineVersionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available engines.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBEngineVersionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBEngineVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBEngineVersionsMessage describeDBEngineVersionsMessage, final ApiCallback<DBEngineVersionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBEngineVersionsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBEngineVersionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBInstancesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBInstancesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBInstances(Async)");
        }

        return pOSTDescribeDBInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage, _callback);

    }

    /**
     * 
     * Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBInstancesMessage  (optional)
     * @return DBInstanceMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBInstanceMessage pOSTDescribeDBInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage) throws ApiException {
        ApiResponse<DBInstanceMessage> localVarResp = pOSTDescribeDBInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBInstancesMessage  (optional)
     * @return ApiResponse&lt;DBInstanceMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBInstanceMessage> pOSTDescribeDBInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage, null);
        Type localVarReturnType = new TypeToken<DBInstanceMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBInstancesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBInstancesMessage describeDBInstancesMessage, final ApiCallback<DBInstanceMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBInstancesMessage, _callback);
        Type localVarReturnType = new TypeToken<DBInstanceMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeDBSubnetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBSubnetGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBSubnetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDBSubnetGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeDBSubnetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeDBSubnetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeDBSubnetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeDBSubnetGroups(Async)");
        }

        return pOSTDescribeDBSubnetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage, _callback);

    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBSubnetGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBSubnetGroupName&lt;/code&gt; is specified, the list will contain only the descriptions of the specified &lt;code&gt;DBSubnetGroup&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBSubnetGroupsMessage  (optional)
     * @return DBSubnetGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBSubnetGroupMessage pOSTDescribeDBSubnetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage) throws ApiException {
        ApiResponse<DBSubnetGroupMessage> localVarResp = pOSTDescribeDBSubnetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of &lt;code&gt;DBSubnetGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBSubnetGroupName&lt;/code&gt; is specified, the list will contain only the descriptions of the specified &lt;code&gt;DBSubnetGroup&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBSubnetGroupsMessage  (optional)
     * @return ApiResponse&lt;DBSubnetGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBSubnetGroupMessage> pOSTDescribeDBSubnetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeDBSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage, null);
        Type localVarReturnType = new TypeToken<DBSubnetGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of &lt;code&gt;DBSubnetGroup&lt;/code&gt; descriptions. If a &lt;code&gt;DBSubnetGroupName&lt;/code&gt; is specified, the list will contain only the descriptions of the specified &lt;code&gt;DBSubnetGroup&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeDBSubnetGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeDBSubnetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeDBSubnetGroupsMessage describeDBSubnetGroupsMessage, final ApiCallback<DBSubnetGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeDBSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDBSubnetGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<DBSubnetGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEngineDefaultClusterParameters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEngineDefaultClusterParametersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEngineDefaultClusterParametersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEngineDefaultClusterParametersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEngineDefaultClusterParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEngineDefaultClusterParametersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEngineDefaultClusterParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEngineDefaultClusterParameters(Async)");
        }

        return pOSTDescribeEngineDefaultClusterParametersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage, _callback);

    }

    /**
     * 
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEngineDefaultClusterParametersMessage  (optional)
     * @return DescribeEngineDefaultClusterParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineDefaultClusterParametersResult pOSTDescribeEngineDefaultClusterParameters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage) throws ApiException {
        ApiResponse<DescribeEngineDefaultClusterParametersResult> localVarResp = pOSTDescribeEngineDefaultClusterParametersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEngineDefaultClusterParametersMessage  (optional)
     * @return ApiResponse&lt;DescribeEngineDefaultClusterParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineDefaultClusterParametersResult> pOSTDescribeEngineDefaultClusterParametersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEngineDefaultClusterParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage, null);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultClusterParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default engine and system parameter information for the cluster database engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEngineDefaultClusterParametersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEngineDefaultClusterParametersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEngineDefaultClusterParametersMessage describeEngineDefaultClusterParametersMessage, final ApiCallback<DescribeEngineDefaultClusterParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEngineDefaultClusterParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEngineDefaultClusterParametersMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultClusterParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEventCategories
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEventCategoriesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventCategoriesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventCategoriesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEventCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEventCategoriesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEventCategories(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEventCategories(Async)");
        }

        return pOSTDescribeEventCategoriesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage, _callback);

    }

    /**
     * 
     * Displays a list of categories for all event source types, or, if specified, for a specified source type. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEventCategoriesMessage  (optional)
     * @return EventCategoriesMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventCategoriesMessage pOSTDescribeEventCategories(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage) throws ApiException {
        ApiResponse<EventCategoriesMessage> localVarResp = pOSTDescribeEventCategoriesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Displays a list of categories for all event source types, or, if specified, for a specified source type. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEventCategoriesMessage  (optional)
     * @return ApiResponse&lt;EventCategoriesMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventCategoriesMessage> pOSTDescribeEventCategoriesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEventCategoriesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage, null);
        Type localVarReturnType = new TypeToken<EventCategoriesMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Displays a list of categories for all event source types, or, if specified, for a specified source type. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeEventCategoriesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventCategoriesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeEventCategoriesMessage describeEventCategoriesMessage, final ApiCallback<EventCategoriesMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEventCategoriesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage, _callback);
        Type localVarReturnType = new TypeToken<EventCategoriesMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEventSubscriptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventSubscriptionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventSubscriptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventSubscriptionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEventSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEventSubscriptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEventSubscriptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEventSubscriptions(Async)");
        }

        return pOSTDescribeEventSubscriptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;SubscriptionName&lt;/code&gt;, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventSubscriptionsMessage  (optional)
     * @return EventSubscriptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsMessage pOSTDescribeEventSubscriptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage) throws ApiException {
        ApiResponse<EventSubscriptionsMessage> localVarResp = pOSTDescribeEventSubscriptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;SubscriptionName&lt;/code&gt;, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventSubscriptionsMessage  (optional)
     * @return ApiResponse&lt;EventSubscriptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsMessage> pOSTDescribeEventSubscriptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEventSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the subscription descriptions for a customer account. The description for a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;SubscriptionName&lt;/code&gt;, lists the description for that subscription.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventSubscriptionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventSubscriptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, final ApiCallback<EventSubscriptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEventSubscriptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEvents(Async)");
        }

        return pOSTDescribeEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, _callback);

    }

    /**
     * 
     * Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @return EventsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EventsMessage pOSTDescribeEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage) throws ApiException {
        ApiResponse<EventsMessage> localVarResp = pOSTDescribeEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @return ApiResponse&lt;EventsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsMessage> pOSTDescribeEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, null);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback<EventsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, _callback);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeGlobalClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalClustersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeGlobalClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeGlobalClustersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeGlobalClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeGlobalClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeGlobalClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeGlobalClusters(Async)");
        }

        return pOSTDescribeGlobalClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about Amazon DocumentDB global clusters. This API supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalClustersMessage  (optional)
     * @return GlobalClustersMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public GlobalClustersMessage pOSTDescribeGlobalClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage) throws ApiException {
        ApiResponse<GlobalClustersMessage> localVarResp = pOSTDescribeGlobalClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about Amazon DocumentDB global clusters. This API supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalClustersMessage  (optional)
     * @return ApiResponse&lt;GlobalClustersMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalClustersMessage> pOSTDescribeGlobalClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeGlobalClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage, null);
        Type localVarReturnType = new TypeToken<GlobalClustersMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about Amazon DocumentDB global clusters. This API supports pagination.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalClustersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeGlobalClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalClustersMessage describeGlobalClustersMessage, final ApiCallback<GlobalClustersMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeGlobalClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalClustersMessage, _callback);
        Type localVarReturnType = new TypeToken<GlobalClustersMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeOrderableDBInstanceOptions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeOrderableDBInstanceOptionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeOrderableDBInstanceOptionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeOrderableDBInstanceOptionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeOrderableDBInstanceOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeOrderableDBInstanceOptionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeOrderableDBInstanceOptions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeOrderableDBInstanceOptions(Async)");
        }

        return pOSTDescribeOrderableDBInstanceOptionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage, _callback);

    }

    /**
     * 
     * Returns a list of orderable instance options for the specified engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeOrderableDBInstanceOptionsMessage  (optional)
     * @return OrderableDBInstanceOptionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public OrderableDBInstanceOptionsMessage pOSTDescribeOrderableDBInstanceOptions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage) throws ApiException {
        ApiResponse<OrderableDBInstanceOptionsMessage> localVarResp = pOSTDescribeOrderableDBInstanceOptionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of orderable instance options for the specified engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeOrderableDBInstanceOptionsMessage  (optional)
     * @return ApiResponse&lt;OrderableDBInstanceOptionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderableDBInstanceOptionsMessage> pOSTDescribeOrderableDBInstanceOptionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeOrderableDBInstanceOptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage, null);
        Type localVarReturnType = new TypeToken<OrderableDBInstanceOptionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of orderable instance options for the specified engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeOrderableDBInstanceOptionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeOrderableDBInstanceOptionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeOrderableDBInstanceOptionsMessage describeOrderableDBInstanceOptionsMessage, final ApiCallback<OrderableDBInstanceOptionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeOrderableDBInstanceOptionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableDBInstanceOptionsMessage, _callback);
        Type localVarReturnType = new TypeToken<OrderableDBInstanceOptionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribePendingMaintenanceActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describePendingMaintenanceActionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePendingMaintenanceActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePendingMaintenanceActionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribePendingMaintenanceActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribePendingMaintenanceActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribePendingMaintenanceActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribePendingMaintenanceActions(Async)");
        }

        return pOSTDescribePendingMaintenanceActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage, _callback);

    }

    /**
     * 
     * Returns a list of resources (for example, instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describePendingMaintenanceActionsMessage  (optional)
     * @return PendingMaintenanceActionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public PendingMaintenanceActionsMessage pOSTDescribePendingMaintenanceActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage) throws ApiException {
        ApiResponse<PendingMaintenanceActionsMessage> localVarResp = pOSTDescribePendingMaintenanceActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of resources (for example, instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describePendingMaintenanceActionsMessage  (optional)
     * @return ApiResponse&lt;PendingMaintenanceActionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PendingMaintenanceActionsMessage> pOSTDescribePendingMaintenanceActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribePendingMaintenanceActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage, null);
        Type localVarReturnType = new TypeToken<PendingMaintenanceActionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of resources (for example, instances) that have at least one pending maintenance action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describePendingMaintenanceActionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePendingMaintenanceActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, final ApiCallback<PendingMaintenanceActionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribePendingMaintenanceActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describePendingMaintenanceActionsMessage, _callback);
        Type localVarReturnType = new TypeToken<PendingMaintenanceActionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTFailoverDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTFailoverDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=FailoverDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTFailoverDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTFailoverDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTFailoverDBCluster(Async)");
        }

        return pOSTFailoverDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Forces a failover for a cluster.&lt;/p&gt; &lt;p&gt;A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverDBClusterMessage  (optional)
     * @return FailoverDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public FailoverDBClusterResult pOSTFailoverDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage) throws ApiException {
        ApiResponse<FailoverDBClusterResult> localVarResp = pOSTFailoverDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Forces a failover for a cluster.&lt;/p&gt; &lt;p&gt;A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverDBClusterMessage  (optional)
     * @return ApiResponse&lt;FailoverDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverDBClusterResult> pOSTFailoverDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTFailoverDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<FailoverDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Forces a failover for a cluster.&lt;/p&gt; &lt;p&gt;A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).&lt;/p&gt; &lt;p&gt;If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTFailoverDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverDBClusterMessage failoverDBClusterMessage, final ApiCallback<FailoverDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTFailoverDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<FailoverDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTagsForResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTagsForResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTagsForResource(Async)");
        }

        return pOSTListTagsForResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, _callback);

    }

    /**
     * 
     * Lists all tags on an Amazon DocumentDB resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage pOSTListTagsForResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = pOSTListTagsForResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all tags on an Amazon DocumentDB resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> pOSTListTagsForResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all tags on an Amazon DocumentDB resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBCluster(Async)");
        }

        return pOSTModifyDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage, _callback);

    }

    /**
     * 
     * Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterMessage  (optional)
     * @return ModifyDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterResult pOSTModifyDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage) throws ApiException {
        ApiResponse<ModifyDBClusterResult> localVarResp = pOSTModifyDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterMessage  (optional)
     * @return ApiResponse&lt;ModifyDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterResult> pOSTModifyDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidDBSubnetGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DBClusterParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterMessage modifyDBClusterMessage, final ApiCallback<ModifyDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBClusterParameterGroup(Async)");
        }

        return pOSTModifyDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterParameterGroupMessage  (optional)
     * @return DBClusterParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupNameMessage pOSTModifyDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage) throws ApiException {
        ApiResponse<DBClusterParameterGroupNameMessage> localVarResp = pOSTModifyDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupNameMessage> pOSTModifyDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt;, &lt;code&gt;ParameterValue&lt;/code&gt;, and &lt;code&gt;ApplyMethod&lt;/code&gt;. A maximum of 20 parameters can be modified in a single request. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the &lt;code&gt;character_set_database&lt;/code&gt; parameter.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterParameterGroupMessage modifyDBClusterParameterGroupMessage, final ApiCallback<DBClusterParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBClusterSnapshotAttribute
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterSnapshotAttributeMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterSnapshotAttributeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBClusterSnapshotAttributeMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBClusterSnapshotAttribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBClusterSnapshotAttributeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBClusterSnapshotAttribute(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBClusterSnapshotAttribute(Async)");
        }

        return pOSTModifyDBClusterSnapshotAttributeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual cluster snapshot with other Amazon Web Services accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt;, and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterSnapshotAttributeMessage  (optional)
     * @return ModifyDBClusterSnapshotAttributeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBClusterSnapshotAttributeResult pOSTModifyDBClusterSnapshotAttribute(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage) throws ApiException {
        ApiResponse<ModifyDBClusterSnapshotAttributeResult> localVarResp = pOSTModifyDBClusterSnapshotAttributeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual cluster snapshot with other Amazon Web Services accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt;, and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterSnapshotAttributeMessage  (optional)
     * @return ApiResponse&lt;ModifyDBClusterSnapshotAttributeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBClusterSnapshotAttributeResult> pOSTModifyDBClusterSnapshotAttributeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBClusterSnapshotAttributeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBClusterSnapshotAttributeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.&lt;/p&gt; &lt;p&gt;To share a manual cluster snapshot with other Amazon Web Services accounts, specify &lt;code&gt;restore&lt;/code&gt; as the &lt;code&gt;AttributeName&lt;/code&gt;, and use the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value &lt;code&gt;all&lt;/code&gt; to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the &lt;code&gt;all&lt;/code&gt; value for any manual cluster snapshots that contain private information that you don&#39;t want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the &lt;code&gt;ValuesToAdd&lt;/code&gt; parameter. You can&#39;t use &lt;code&gt;all&lt;/code&gt; as a value for that parameter in this case.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBClusterSnapshotAttributeMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SharedSnapshotQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBClusterSnapshotAttributeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBClusterSnapshotAttributeMessage modifyDBClusterSnapshotAttributeMessage, final ApiCallback<ModifyDBClusterSnapshotAttributeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBClusterSnapshotAttributeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBClusterSnapshotAttributeMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBClusterSnapshotAttributeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBInstanceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBInstanceMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBInstance(Async)");
        }

        return pOSTModifyDBInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage, _callback);

    }

    /**
     * 
     * Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBInstanceMessage  (optional)
     * @return ModifyDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBInstanceResult pOSTModifyDBInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage) throws ApiException {
        ApiResponse<ModifyDBInstanceResult> localVarResp = pOSTModifyDBInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBInstanceMessage  (optional)
     * @return ApiResponse&lt;ModifyDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBInstanceResult> pOSTModifyDBInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBInstanceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBInstanceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBInstanceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> DBUpgradeDependencyFailureFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageTypeNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CertificateNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBInstanceMessage modifyDBInstanceMessage, final ApiCallback<ModifyDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBInstanceMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyDBSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyDBSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyDBSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyDBSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyDBSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyDBSubnetGroup(Async)");
        }

        return pOSTModifyDBSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage, _callback);

    }

    /**
     * 
     * Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBSubnetGroupMessage  (optional)
     * @return ModifyDBSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ModifyDBSubnetGroupResult pOSTModifyDBSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage) throws ApiException {
        ApiResponse<ModifyDBSubnetGroupResult> localVarResp = pOSTModifyDBSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;ModifyDBSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyDBSubnetGroupResult> pOSTModifyDBSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage, null);
        Type localVarReturnType = new TypeToken<ModifyDBSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyDBSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyDBSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyDBSubnetGroupMessage modifyDBSubnetGroupMessage, final ApiCallback<ModifyDBSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyDBSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyDBSubnetGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyDBSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyEventSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyEventSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyEventSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyEventSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyEventSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyEventSubscription(Async)");
        }

        return pOSTModifyEventSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage, _callback);

    }

    /**
     * 
     * Modifies an existing Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyEventSubscriptionMessage  (optional)
     * @return ModifyEventSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyEventSubscriptionResult pOSTModifyEventSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage) throws ApiException {
        ApiResponse<ModifyEventSubscriptionResult> localVarResp = pOSTModifyEventSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyEventSubscriptionMessage  (optional)
     * @return ApiResponse&lt;ModifyEventSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyEventSubscriptionResult> pOSTModifyEventSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyEventSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventSubscriptionQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSTopicArnNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubscriptionCategoryNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyEventSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, final ApiCallback<ModifyEventSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyEventSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyGlobalCluster(Async)");
        }

        return pOSTModifyGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalClusterMessage  (optional)
     * @return ModifyGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyGlobalClusterResult pOSTModifyGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage) throws ApiException {
        ApiResponse<ModifyGlobalClusterResult> localVarResp = pOSTModifyGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;ModifyGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyGlobalClusterResult> pOSTModifyGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<ModifyGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalClusterMessage modifyGlobalClusterMessage, final ApiCallback<ModifyGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRebootDBInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootDBInstanceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebootDBInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rebootDBInstanceMessage;

        // create path and map variables
        String localVarPath = "/#Action=RebootDBInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRebootDBInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRebootDBInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRebootDBInstance(Async)");
        }

        return pOSTRebootDBInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. &lt;/p&gt; &lt;p&gt;Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to &lt;i&gt;rebooting&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootDBInstanceMessage  (optional)
     * @return RebootDBInstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RebootDBInstanceResult pOSTRebootDBInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage) throws ApiException {
        ApiResponse<RebootDBInstanceResult> localVarResp = pOSTRebootDBInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. &lt;/p&gt; &lt;p&gt;Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to &lt;i&gt;rebooting&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootDBInstanceMessage  (optional)
     * @return ApiResponse&lt;RebootDBInstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebootDBInstanceResult> pOSTRebootDBInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRebootDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage, null);
        Type localVarReturnType = new TypeToken<RebootDBInstanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. &lt;/p&gt; &lt;p&gt;Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to &lt;i&gt;rebooting&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootDBInstanceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebootDBInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootDBInstanceMessage rebootDBInstanceMessage, final ApiCallback<RebootDBInstanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRebootDBInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootDBInstanceMessage, _callback);
        Type localVarReturnType = new TypeToken<RebootDBInstanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveFromGlobalCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeFromGlobalClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveFromGlobalClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeFromGlobalClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=RemoveFromGlobalCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveFromGlobalClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveFromGlobalCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveFromGlobalCluster(Async)");
        }

        return pOSTRemoveFromGlobalClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeFromGlobalClusterMessage  (optional)
     * @return RemoveFromGlobalClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromGlobalClusterResult pOSTRemoveFromGlobalCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage) throws ApiException {
        ApiResponse<RemoveFromGlobalClusterResult> localVarResp = pOSTRemoveFromGlobalClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeFromGlobalClusterMessage  (optional)
     * @return ApiResponse&lt;RemoveFromGlobalClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveFromGlobalClusterResult> pOSTRemoveFromGlobalClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveFromGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage, null);
        Type localVarReturnType = new TypeToken<RemoveFromGlobalClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. &lt;/p&gt; &lt;note&gt; &lt;p&gt;This action only applies to Amazon DocumentDB clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeFromGlobalClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveFromGlobalClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveFromGlobalClusterMessage removeFromGlobalClusterMessage, final ApiCallback<RemoveFromGlobalClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveFromGlobalClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeFromGlobalClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<RemoveFromGlobalClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveSourceIdentifierFromSubscription
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeSourceIdentifierFromSubscriptionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveSourceIdentifierFromSubscriptionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeSourceIdentifierFromSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#Action=RemoveSourceIdentifierFromSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveSourceIdentifierFromSubscription(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveSourceIdentifierFromSubscription(Async)");
        }

        return pOSTRemoveSourceIdentifierFromSubscriptionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage, _callback);

    }

    /**
     * 
     * Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeSourceIdentifierFromSubscriptionMessage  (optional)
     * @return RemoveSourceIdentifierFromSubscriptionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSourceIdentifierFromSubscriptionResult pOSTRemoveSourceIdentifierFromSubscription(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage) throws ApiException {
        ApiResponse<RemoveSourceIdentifierFromSubscriptionResult> localVarResp = pOSTRemoveSourceIdentifierFromSubscriptionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeSourceIdentifierFromSubscriptionMessage  (optional)
     * @return ApiResponse&lt;RemoveSourceIdentifierFromSubscriptionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveSourceIdentifierFromSubscriptionResult> pOSTRemoveSourceIdentifierFromSubscriptionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage, null);
        Type localVarReturnType = new TypeToken<RemoveSourceIdentifierFromSubscriptionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeSourceIdentifierFromSubscriptionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SubscriptionNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveSourceIdentifierFromSubscriptionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveSourceIdentifierFromSubscriptionMessage removeSourceIdentifierFromSubscriptionMessage, final ApiCallback<RemoveSourceIdentifierFromSubscriptionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveSourceIdentifierFromSubscriptionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeSourceIdentifierFromSubscriptionMessage, _callback);
        Type localVarReturnType = new TypeToken<RemoveSourceIdentifierFromSubscriptionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveTagsFromResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsFromResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTagsFromResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTagsFromResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveTagsFromResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveTagsFromResource(Async)");
        }

        return pOSTRemoveTagsFromResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, _callback);

    }

    /**
     * 
     * Removes metadata tags from an Amazon DocumentDB resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTRemoveTagsFromResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage) throws ApiException {
        pOSTRemoveTagsFromResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage);
    }

    /**
     * 
     * Removes metadata tags from an Amazon DocumentDB resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTRemoveTagsFromResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveTagsFromResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes metadata tags from an Amazon DocumentDB resource.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBInstanceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsFromResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveTagsFromResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTResetDBClusterParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBClusterParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResetDBClusterParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetDBClusterParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ResetDBClusterParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTResetDBClusterParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTResetDBClusterParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTResetDBClusterParameterGroup(Async)");
        }

        return pOSTResetDBClusterParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. &lt;/p&gt; &lt;p&gt; When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance reboot.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBClusterParameterGroupMessage  (optional)
     * @return DBClusterParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DBClusterParameterGroupNameMessage pOSTResetDBClusterParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage) throws ApiException {
        ApiResponse<DBClusterParameterGroupNameMessage> localVarResp = pOSTResetDBClusterParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. &lt;/p&gt; &lt;p&gt; When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance reboot.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBClusterParameterGroupMessage  (optional)
     * @return ApiResponse&lt;DBClusterParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DBClusterParameterGroupNameMessage> pOSTResetDBClusterParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTResetDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: &lt;code&gt;ParameterName&lt;/code&gt; and &lt;code&gt;ApplyMethod&lt;/code&gt;. To reset the entire cluster parameter group, specify the &lt;code&gt;DBClusterParameterGroupName&lt;/code&gt; and &lt;code&gt;ResetAllParameters&lt;/code&gt; parameters. &lt;/p&gt; &lt;p&gt; When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to &lt;code&gt;pending-reboot&lt;/code&gt; to take effect on the next DB instance reboot.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetDBClusterParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidDBParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBParameterGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResetDBClusterParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetDBClusterParameterGroupMessage resetDBClusterParameterGroupMessage, final ApiCallback<DBClusterParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTResetDBClusterParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetDBClusterParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DBClusterParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRestoreDBClusterFromSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterFromSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestoreDBClusterFromSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreDBClusterFromSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=RestoreDBClusterFromSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRestoreDBClusterFromSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRestoreDBClusterFromSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRestoreDBClusterFromSnapshot(Async)");
        }

        return pOSTRestoreDBClusterFromSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new cluster from a snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterFromSnapshotMessage  (optional)
     * @return RestoreDBClusterFromSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public RestoreDBClusterFromSnapshotResult pOSTRestoreDBClusterFromSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage) throws ApiException {
        ApiResponse<RestoreDBClusterFromSnapshotResult> localVarResp = pOSTRestoreDBClusterFromSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new cluster from a snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterFromSnapshotMessage  (optional)
     * @return ApiResponse&lt;RestoreDBClusterFromSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreDBClusterFromSnapshotResult> pOSTRestoreDBClusterFromSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRestoreDBClusterFromSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<RestoreDBClusterFromSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new cluster from a snapshot or cluster snapshot.&lt;/p&gt; &lt;p&gt;If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.&lt;/p&gt; &lt;p&gt;If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterFromSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestoreDBClusterFromSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterFromSnapshotMessage restoreDBClusterFromSnapshotMessage, final ApiCallback<RestoreDBClusterFromSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRestoreDBClusterFromSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterFromSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<RestoreDBClusterFromSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRestoreDBClusterToPointInTime
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterToPointInTimeMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestoreDBClusterToPointInTimeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreDBClusterToPointInTimeMessage;

        // create path and map variables
        String localVarPath = "/#Action=RestoreDBClusterToPointInTime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRestoreDBClusterToPointInTimeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRestoreDBClusterToPointInTime(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRestoreDBClusterToPointInTime(Async)");
        }

        return pOSTRestoreDBClusterToPointInTimeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage, _callback);

    }

    /**
     * 
     * Restores a cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterToPointInTimeMessage  (optional)
     * @return RestoreDBClusterToPointInTimeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public RestoreDBClusterToPointInTimeResult pOSTRestoreDBClusterToPointInTime(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage) throws ApiException {
        ApiResponse<RestoreDBClusterToPointInTimeResult> localVarResp = pOSTRestoreDBClusterToPointInTimeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Restores a cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterToPointInTimeMessage  (optional)
     * @return ApiResponse&lt;RestoreDBClusterToPointInTimeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreDBClusterToPointInTimeResult> pOSTRestoreDBClusterToPointInTimeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRestoreDBClusterToPointInTimeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage, null);
        Type localVarReturnType = new TypeToken<RestoreDBClusterToPointInTimeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restores a cluster to an arbitrary point in time. Users can restore to any point in time before &lt;code&gt;LatestRestorableTime&lt;/code&gt; for up to &lt;code&gt;BackupRetentionPeriod&lt;/code&gt; days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param restoreDBClusterToPointInTimeMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DBClusterQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DBClusterSnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DBSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientDBClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientStorageClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidDBClusterSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidDBSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRestoreFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRestoreDBClusterToPointInTimeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RestoreDBClusterToPointInTimeMessage restoreDBClusterToPointInTimeMessage, final ApiCallback<RestoreDBClusterToPointInTimeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRestoreDBClusterToPointInTimeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreDBClusterToPointInTimeMessage, _callback);
        Type localVarReturnType = new TypeToken<RestoreDBClusterToPointInTimeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStartDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=StartDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStartDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStartDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStartDBCluster(Async)");
        }

        return pOSTStartDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage, _callback);

    }

    /**
     * 
     * Restarts the stopped cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startDBClusterMessage  (optional)
     * @return StartDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StartDBClusterResult pOSTStartDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage) throws ApiException {
        ApiResponse<StartDBClusterResult> localVarResp = pOSTStartDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Restarts the stopped cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startDBClusterMessage  (optional)
     * @return ApiResponse&lt;StartDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartDBClusterResult> pOSTStartDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTStartDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<StartDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restarts the stopped cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartDBClusterMessage startDBClusterMessage, final ApiCallback<StartDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStartDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<StartDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStopDBCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopDBClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStopDBClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopDBClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=StopDBCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStopDBClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStopDBCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStopDBCluster(Async)");
        }

        return pOSTStopDBClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage, _callback);

    }

    /**
     * 
     * Stops the running cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. The cluster must be in the &lt;i&gt;available&lt;/i&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopDBClusterMessage  (optional)
     * @return StopDBClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StopDBClusterResult pOSTStopDBCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage) throws ApiException {
        ApiResponse<StopDBClusterResult> localVarResp = pOSTStopDBClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops the running cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. The cluster must be in the &lt;i&gt;available&lt;/i&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopDBClusterMessage  (optional)
     * @return ApiResponse&lt;StopDBClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopDBClusterResult> pOSTStopDBClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTStopDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage, null);
        Type localVarReturnType = new TypeToken<StopDBClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops the running cluster that is specified by &lt;code&gt;DBClusterIdentifier&lt;/code&gt;. The cluster must be in the &lt;i&gt;available&lt;/i&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html\&quot;&gt;Stopping and Starting an Amazon DocumentDB Cluster&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopDBClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DBClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidDBClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidDBInstanceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStopDBClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopDBClusterMessage stopDBClusterMessage, final ApiCallback<StopDBClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStopDBClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopDBClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<StopDBClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
