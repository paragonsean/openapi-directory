/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DBClusterSnapshotListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DBClusterSnapshotListInner {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONES = "AvailabilityZones";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONES)
  private List availabilityZones;

  public static final String SERIALIZED_NAME_DB_CLUSTER_SNAPSHOT_IDENTIFIER = "DBClusterSnapshotIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_SNAPSHOT_IDENTIFIER)
  private String dbClusterSnapshotIdentifier;

  public static final String SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER = "DBClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER)
  private String dbClusterIdentifier;

  public static final String SERIALIZED_NAME_SNAPSHOT_CREATE_TIME = "SnapshotCreateTime";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_CREATE_TIME)
  private OffsetDateTime snapshotCreateTime;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_CLUSTER_CREATE_TIME = "ClusterCreateTime";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CREATE_TIME)
  private OffsetDateTime clusterCreateTime;

  public static final String SERIALIZED_NAME_MASTER_USERNAME = "MasterUsername";
  @SerializedName(SERIALIZED_NAME_MASTER_USERNAME)
  private String masterUsername;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_SNAPSHOT_TYPE = "SnapshotType";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_TYPE)
  private String snapshotType;

  public static final String SERIALIZED_NAME_PERCENT_PROGRESS = "PercentProgress";
  @SerializedName(SERIALIZED_NAME_PERCENT_PROGRESS)
  private Integer percentProgress;

  public static final String SERIALIZED_NAME_STORAGE_ENCRYPTED = "StorageEncrypted";
  @SerializedName(SERIALIZED_NAME_STORAGE_ENCRYPTED)
  private Boolean storageEncrypted;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_DB_CLUSTER_SNAPSHOT_ARN = "DBClusterSnapshotArn";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_SNAPSHOT_ARN)
  private String dbClusterSnapshotArn;

  public static final String SERIALIZED_NAME_SOURCE_D_B_CLUSTER_SNAPSHOT_ARN = "SourceDBClusterSnapshotArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_D_B_CLUSTER_SNAPSHOT_ARN)
  private String sourceDBClusterSnapshotArn;

  public DBClusterSnapshotListInner() {
  }

  public DBClusterSnapshotListInner availabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
    return this;
  }

  /**
   * Get availabilityZones
   * @return availabilityZones
   */
  @javax.annotation.Nullable
  public List getAvailabilityZones() {
    return availabilityZones;
  }

  public void setAvailabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
  }


  public DBClusterSnapshotListInner dbClusterSnapshotIdentifier(String dbClusterSnapshotIdentifier) {
    this.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier;
    return this;
  }

  /**
   * Get dbClusterSnapshotIdentifier
   * @return dbClusterSnapshotIdentifier
   */
  @javax.annotation.Nullable
  public String getDbClusterSnapshotIdentifier() {
    return dbClusterSnapshotIdentifier;
  }

  public void setDbClusterSnapshotIdentifier(String dbClusterSnapshotIdentifier) {
    this.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier;
  }


  public DBClusterSnapshotListInner dbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
    return this;
  }

  /**
   * Get dbClusterIdentifier
   * @return dbClusterIdentifier
   */
  @javax.annotation.Nullable
  public String getDbClusterIdentifier() {
    return dbClusterIdentifier;
  }

  public void setDbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
  }


  public DBClusterSnapshotListInner snapshotCreateTime(OffsetDateTime snapshotCreateTime) {
    this.snapshotCreateTime = snapshotCreateTime;
    return this;
  }

  /**
   * Get snapshotCreateTime
   * @return snapshotCreateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSnapshotCreateTime() {
    return snapshotCreateTime;
  }

  public void setSnapshotCreateTime(OffsetDateTime snapshotCreateTime) {
    this.snapshotCreateTime = snapshotCreateTime;
  }


  public DBClusterSnapshotListInner engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public DBClusterSnapshotListInner status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DBClusterSnapshotListInner port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public DBClusterSnapshotListInner vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public DBClusterSnapshotListInner clusterCreateTime(OffsetDateTime clusterCreateTime) {
    this.clusterCreateTime = clusterCreateTime;
    return this;
  }

  /**
   * Get clusterCreateTime
   * @return clusterCreateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getClusterCreateTime() {
    return clusterCreateTime;
  }

  public void setClusterCreateTime(OffsetDateTime clusterCreateTime) {
    this.clusterCreateTime = clusterCreateTime;
  }


  public DBClusterSnapshotListInner masterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
    return this;
  }

  /**
   * Get masterUsername
   * @return masterUsername
   */
  @javax.annotation.Nullable
  public String getMasterUsername() {
    return masterUsername;
  }

  public void setMasterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
  }


  public DBClusterSnapshotListInner engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public DBClusterSnapshotListInner snapshotType(String snapshotType) {
    this.snapshotType = snapshotType;
    return this;
  }

  /**
   * Get snapshotType
   * @return snapshotType
   */
  @javax.annotation.Nullable
  public String getSnapshotType() {
    return snapshotType;
  }

  public void setSnapshotType(String snapshotType) {
    this.snapshotType = snapshotType;
  }


  public DBClusterSnapshotListInner percentProgress(Integer percentProgress) {
    this.percentProgress = percentProgress;
    return this;
  }

  /**
   * Get percentProgress
   * @return percentProgress
   */
  @javax.annotation.Nullable
  public Integer getPercentProgress() {
    return percentProgress;
  }

  public void setPercentProgress(Integer percentProgress) {
    this.percentProgress = percentProgress;
  }


  public DBClusterSnapshotListInner storageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
    return this;
  }

  /**
   * Get storageEncrypted
   * @return storageEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getStorageEncrypted() {
    return storageEncrypted;
  }

  public void setStorageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
  }


  public DBClusterSnapshotListInner kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public DBClusterSnapshotListInner dbClusterSnapshotArn(String dbClusterSnapshotArn) {
    this.dbClusterSnapshotArn = dbClusterSnapshotArn;
    return this;
  }

  /**
   * Get dbClusterSnapshotArn
   * @return dbClusterSnapshotArn
   */
  @javax.annotation.Nullable
  public String getDbClusterSnapshotArn() {
    return dbClusterSnapshotArn;
  }

  public void setDbClusterSnapshotArn(String dbClusterSnapshotArn) {
    this.dbClusterSnapshotArn = dbClusterSnapshotArn;
  }


  public DBClusterSnapshotListInner sourceDBClusterSnapshotArn(String sourceDBClusterSnapshotArn) {
    this.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn;
    return this;
  }

  /**
   * Get sourceDBClusterSnapshotArn
   * @return sourceDBClusterSnapshotArn
   */
  @javax.annotation.Nullable
  public String getSourceDBClusterSnapshotArn() {
    return sourceDBClusterSnapshotArn;
  }

  public void setSourceDBClusterSnapshotArn(String sourceDBClusterSnapshotArn) {
    this.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBClusterSnapshotListInner dbClusterSnapshotListInner = (DBClusterSnapshotListInner) o;
    return Objects.equals(this.availabilityZones, dbClusterSnapshotListInner.availabilityZones) &&
        Objects.equals(this.dbClusterSnapshotIdentifier, dbClusterSnapshotListInner.dbClusterSnapshotIdentifier) &&
        Objects.equals(this.dbClusterIdentifier, dbClusterSnapshotListInner.dbClusterIdentifier) &&
        Objects.equals(this.snapshotCreateTime, dbClusterSnapshotListInner.snapshotCreateTime) &&
        Objects.equals(this.engine, dbClusterSnapshotListInner.engine) &&
        Objects.equals(this.status, dbClusterSnapshotListInner.status) &&
        Objects.equals(this.port, dbClusterSnapshotListInner.port) &&
        Objects.equals(this.vpcId, dbClusterSnapshotListInner.vpcId) &&
        Objects.equals(this.clusterCreateTime, dbClusterSnapshotListInner.clusterCreateTime) &&
        Objects.equals(this.masterUsername, dbClusterSnapshotListInner.masterUsername) &&
        Objects.equals(this.engineVersion, dbClusterSnapshotListInner.engineVersion) &&
        Objects.equals(this.snapshotType, dbClusterSnapshotListInner.snapshotType) &&
        Objects.equals(this.percentProgress, dbClusterSnapshotListInner.percentProgress) &&
        Objects.equals(this.storageEncrypted, dbClusterSnapshotListInner.storageEncrypted) &&
        Objects.equals(this.kmsKeyId, dbClusterSnapshotListInner.kmsKeyId) &&
        Objects.equals(this.dbClusterSnapshotArn, dbClusterSnapshotListInner.dbClusterSnapshotArn) &&
        Objects.equals(this.sourceDBClusterSnapshotArn, dbClusterSnapshotListInner.sourceDBClusterSnapshotArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZones, dbClusterSnapshotIdentifier, dbClusterIdentifier, snapshotCreateTime, engine, status, port, vpcId, clusterCreateTime, masterUsername, engineVersion, snapshotType, percentProgress, storageEncrypted, kmsKeyId, dbClusterSnapshotArn, sourceDBClusterSnapshotArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBClusterSnapshotListInner {\n");
    sb.append("    availabilityZones: ").append(toIndentedString(availabilityZones)).append("\n");
    sb.append("    dbClusterSnapshotIdentifier: ").append(toIndentedString(dbClusterSnapshotIdentifier)).append("\n");
    sb.append("    dbClusterIdentifier: ").append(toIndentedString(dbClusterIdentifier)).append("\n");
    sb.append("    snapshotCreateTime: ").append(toIndentedString(snapshotCreateTime)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    clusterCreateTime: ").append(toIndentedString(clusterCreateTime)).append("\n");
    sb.append("    masterUsername: ").append(toIndentedString(masterUsername)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    snapshotType: ").append(toIndentedString(snapshotType)).append("\n");
    sb.append("    percentProgress: ").append(toIndentedString(percentProgress)).append("\n");
    sb.append("    storageEncrypted: ").append(toIndentedString(storageEncrypted)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    dbClusterSnapshotArn: ").append(toIndentedString(dbClusterSnapshotArn)).append("\n");
    sb.append("    sourceDBClusterSnapshotArn: ").append(toIndentedString(sourceDBClusterSnapshotArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailabilityZones");
    openapiFields.add("DBClusterSnapshotIdentifier");
    openapiFields.add("DBClusterIdentifier");
    openapiFields.add("SnapshotCreateTime");
    openapiFields.add("Engine");
    openapiFields.add("Status");
    openapiFields.add("Port");
    openapiFields.add("VpcId");
    openapiFields.add("ClusterCreateTime");
    openapiFields.add("MasterUsername");
    openapiFields.add("EngineVersion");
    openapiFields.add("SnapshotType");
    openapiFields.add("PercentProgress");
    openapiFields.add("StorageEncrypted");
    openapiFields.add("KmsKeyId");
    openapiFields.add("DBClusterSnapshotArn");
    openapiFields.add("SourceDBClusterSnapshotArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DBClusterSnapshotListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DBClusterSnapshotListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DBClusterSnapshotListInner is not found in the empty JSON string", DBClusterSnapshotListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DBClusterSnapshotListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DBClusterSnapshotListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AvailabilityZones`
      if (jsonObj.get("AvailabilityZones") != null && !jsonObj.get("AvailabilityZones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AvailabilityZones"));
      }
      // validate the optional field `DBClusterSnapshotIdentifier`
      if (jsonObj.get("DBClusterSnapshotIdentifier") != null && !jsonObj.get("DBClusterSnapshotIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterSnapshotIdentifier"));
      }
      // validate the optional field `DBClusterIdentifier`
      if (jsonObj.get("DBClusterIdentifier") != null && !jsonObj.get("DBClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterIdentifier"));
      }
      // validate the optional field `SnapshotCreateTime`
      if (jsonObj.get("SnapshotCreateTime") != null && !jsonObj.get("SnapshotCreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SnapshotCreateTime"));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `ClusterCreateTime`
      if (jsonObj.get("ClusterCreateTime") != null && !jsonObj.get("ClusterCreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ClusterCreateTime"));
      }
      // validate the optional field `MasterUsername`
      if (jsonObj.get("MasterUsername") != null && !jsonObj.get("MasterUsername").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterUsername"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `SnapshotType`
      if (jsonObj.get("SnapshotType") != null && !jsonObj.get("SnapshotType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotType"));
      }
      // validate the optional field `PercentProgress`
      if (jsonObj.get("PercentProgress") != null && !jsonObj.get("PercentProgress").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PercentProgress"));
      }
      // validate the optional field `StorageEncrypted`
      if (jsonObj.get("StorageEncrypted") != null && !jsonObj.get("StorageEncrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StorageEncrypted"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `DBClusterSnapshotArn`
      if (jsonObj.get("DBClusterSnapshotArn") != null && !jsonObj.get("DBClusterSnapshotArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterSnapshotArn"));
      }
      // validate the optional field `SourceDBClusterSnapshotArn`
      if (jsonObj.get("SourceDBClusterSnapshotArn") != null && !jsonObj.get("SourceDBClusterSnapshotArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceDBClusterSnapshotArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DBClusterSnapshotListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DBClusterSnapshotListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DBClusterSnapshotListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DBClusterSnapshotListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DBClusterSnapshotListInner>() {
           @Override
           public void write(JsonWriter out, DBClusterSnapshotListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DBClusterSnapshotListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DBClusterSnapshotListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DBClusterSnapshotListInner
   * @throws IOException if the JSON string is invalid with respect to DBClusterSnapshotListInner
   */
  public static DBClusterSnapshotListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DBClusterSnapshotListInner.class);
  }

  /**
   * Convert an instance of DBClusterSnapshotListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

