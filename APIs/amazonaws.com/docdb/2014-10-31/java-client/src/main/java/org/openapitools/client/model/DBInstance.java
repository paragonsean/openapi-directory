/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DBInstanceDBSubnetGroup;
import org.openapitools.client.model.DBInstanceEndpoint;
import org.openapitools.client.model.DBInstancePendingModifiedValues;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed information about an instance. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DBInstance {
  public static final String SERIALIZED_NAME_DB_INSTANCE_IDENTIFIER = "DBInstanceIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_IDENTIFIER)
  private String dbInstanceIdentifier;

  public static final String SERIALIZED_NAME_DB_INSTANCE_CLASS = "DBInstanceClass";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_CLASS)
  private String dbInstanceClass;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_DB_INSTANCE_STATUS = "DBInstanceStatus";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_STATUS)
  private String dbInstanceStatus;

  public static final String SERIALIZED_NAME_ENDPOINT = "Endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private DBInstanceEndpoint endpoint;

  public static final String SERIALIZED_NAME_INSTANCE_CREATE_TIME = "InstanceCreateTime";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CREATE_TIME)
  private OffsetDateTime instanceCreateTime;

  public static final String SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW = "PreferredBackupWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW)
  private String preferredBackupWindow;

  public static final String SERIALIZED_NAME_BACKUP_RETENTION_PERIOD = "BackupRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION_PERIOD)
  private Integer backupRetentionPeriod;

  public static final String SERIALIZED_NAME_VPC_SECURITY_GROUPS = "VpcSecurityGroups";
  @SerializedName(SERIALIZED_NAME_VPC_SECURITY_GROUPS)
  private List vpcSecurityGroups;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_DB_SUBNET_GROUP = "DBSubnetGroup";
  @SerializedName(SERIALIZED_NAME_DB_SUBNET_GROUP)
  private DBInstanceDBSubnetGroup dbSubnetGroup;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_PENDING_MODIFIED_VALUES = "PendingModifiedValues";
  @SerializedName(SERIALIZED_NAME_PENDING_MODIFIED_VALUES)
  private DBInstancePendingModifiedValues pendingModifiedValues;

  public static final String SERIALIZED_NAME_LATEST_RESTORABLE_TIME = "LatestRestorableTime";
  @SerializedName(SERIALIZED_NAME_LATEST_RESTORABLE_TIME)
  private OffsetDateTime latestRestorableTime;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE = "AutoMinorVersionUpgrade";
  @SerializedName(SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE)
  private Boolean autoMinorVersionUpgrade;

  public static final String SERIALIZED_NAME_PUBLICLY_ACCESSIBLE = "PubliclyAccessible";
  @SerializedName(SERIALIZED_NAME_PUBLICLY_ACCESSIBLE)
  private Boolean publiclyAccessible;

  public static final String SERIALIZED_NAME_STATUS_INFOS = "StatusInfos";
  @SerializedName(SERIALIZED_NAME_STATUS_INFOS)
  private List statusInfos;

  public static final String SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER = "DBClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_IDENTIFIER)
  private String dbClusterIdentifier;

  public static final String SERIALIZED_NAME_STORAGE_ENCRYPTED = "StorageEncrypted";
  @SerializedName(SERIALIZED_NAME_STORAGE_ENCRYPTED)
  private Boolean storageEncrypted;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_DBI_RESOURCE_ID = "DbiResourceId";
  @SerializedName(SERIALIZED_NAME_DBI_RESOURCE_ID)
  private String dbiResourceId;

  public static final String SERIALIZED_NAME_CA_CERTIFICATE_IDENTIFIER = "CACertificateIdentifier";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE_IDENTIFIER)
  private String caCertificateIdentifier;

  public static final String SERIALIZED_NAME_COPY_TAGS_TO_SNAPSHOT = "CopyTagsToSnapshot";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS_TO_SNAPSHOT)
  private Boolean copyTagsToSnapshot;

  public static final String SERIALIZED_NAME_PROMOTION_TIER = "PromotionTier";
  @SerializedName(SERIALIZED_NAME_PROMOTION_TIER)
  private Integer promotionTier;

  public static final String SERIALIZED_NAME_DB_INSTANCE_ARN = "DBInstanceArn";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_ARN)
  private String dbInstanceArn;

  public static final String SERIALIZED_NAME_ENABLED_CLOUDWATCH_LOGS_EXPORTS = "EnabledCloudwatchLogsExports";
  @SerializedName(SERIALIZED_NAME_ENABLED_CLOUDWATCH_LOGS_EXPORTS)
  private List enabledCloudwatchLogsExports;

  public DBInstance() {
  }

  public DBInstance dbInstanceIdentifier(String dbInstanceIdentifier) {
    this.dbInstanceIdentifier = dbInstanceIdentifier;
    return this;
  }

  /**
   * Get dbInstanceIdentifier
   * @return dbInstanceIdentifier
   */
  @javax.annotation.Nullable
  public String getDbInstanceIdentifier() {
    return dbInstanceIdentifier;
  }

  public void setDbInstanceIdentifier(String dbInstanceIdentifier) {
    this.dbInstanceIdentifier = dbInstanceIdentifier;
  }


  public DBInstance dbInstanceClass(String dbInstanceClass) {
    this.dbInstanceClass = dbInstanceClass;
    return this;
  }

  /**
   * Get dbInstanceClass
   * @return dbInstanceClass
   */
  @javax.annotation.Nullable
  public String getDbInstanceClass() {
    return dbInstanceClass;
  }

  public void setDbInstanceClass(String dbInstanceClass) {
    this.dbInstanceClass = dbInstanceClass;
  }


  public DBInstance engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public DBInstance dbInstanceStatus(String dbInstanceStatus) {
    this.dbInstanceStatus = dbInstanceStatus;
    return this;
  }

  /**
   * Get dbInstanceStatus
   * @return dbInstanceStatus
   */
  @javax.annotation.Nullable
  public String getDbInstanceStatus() {
    return dbInstanceStatus;
  }

  public void setDbInstanceStatus(String dbInstanceStatus) {
    this.dbInstanceStatus = dbInstanceStatus;
  }


  public DBInstance endpoint(DBInstanceEndpoint endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  public DBInstanceEndpoint getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(DBInstanceEndpoint endpoint) {
    this.endpoint = endpoint;
  }


  public DBInstance instanceCreateTime(OffsetDateTime instanceCreateTime) {
    this.instanceCreateTime = instanceCreateTime;
    return this;
  }

  /**
   * Get instanceCreateTime
   * @return instanceCreateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInstanceCreateTime() {
    return instanceCreateTime;
  }

  public void setInstanceCreateTime(OffsetDateTime instanceCreateTime) {
    this.instanceCreateTime = instanceCreateTime;
  }


  public DBInstance preferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
    return this;
  }

  /**
   * Get preferredBackupWindow
   * @return preferredBackupWindow
   */
  @javax.annotation.Nullable
  public String getPreferredBackupWindow() {
    return preferredBackupWindow;
  }

  public void setPreferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
  }


  public DBInstance backupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
    return this;
  }

  /**
   * Get backupRetentionPeriod
   * @return backupRetentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getBackupRetentionPeriod() {
    return backupRetentionPeriod;
  }

  public void setBackupRetentionPeriod(Integer backupRetentionPeriod) {
    this.backupRetentionPeriod = backupRetentionPeriod;
  }


  public DBInstance vpcSecurityGroups(List vpcSecurityGroups) {
    this.vpcSecurityGroups = vpcSecurityGroups;
    return this;
  }

  /**
   * Get vpcSecurityGroups
   * @return vpcSecurityGroups
   */
  @javax.annotation.Nullable
  public List getVpcSecurityGroups() {
    return vpcSecurityGroups;
  }

  public void setVpcSecurityGroups(List vpcSecurityGroups) {
    this.vpcSecurityGroups = vpcSecurityGroups;
  }


  public DBInstance availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public DBInstance dbSubnetGroup(DBInstanceDBSubnetGroup dbSubnetGroup) {
    this.dbSubnetGroup = dbSubnetGroup;
    return this;
  }

  /**
   * Get dbSubnetGroup
   * @return dbSubnetGroup
   */
  @javax.annotation.Nullable
  public DBInstanceDBSubnetGroup getDbSubnetGroup() {
    return dbSubnetGroup;
  }

  public void setDbSubnetGroup(DBInstanceDBSubnetGroup dbSubnetGroup) {
    this.dbSubnetGroup = dbSubnetGroup;
  }


  public DBInstance preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public DBInstance pendingModifiedValues(DBInstancePendingModifiedValues pendingModifiedValues) {
    this.pendingModifiedValues = pendingModifiedValues;
    return this;
  }

  /**
   * Get pendingModifiedValues
   * @return pendingModifiedValues
   */
  @javax.annotation.Nullable
  public DBInstancePendingModifiedValues getPendingModifiedValues() {
    return pendingModifiedValues;
  }

  public void setPendingModifiedValues(DBInstancePendingModifiedValues pendingModifiedValues) {
    this.pendingModifiedValues = pendingModifiedValues;
  }


  public DBInstance latestRestorableTime(OffsetDateTime latestRestorableTime) {
    this.latestRestorableTime = latestRestorableTime;
    return this;
  }

  /**
   * Get latestRestorableTime
   * @return latestRestorableTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestRestorableTime() {
    return latestRestorableTime;
  }

  public void setLatestRestorableTime(OffsetDateTime latestRestorableTime) {
    this.latestRestorableTime = latestRestorableTime;
  }


  public DBInstance engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public DBInstance autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
    return this;
  }

  /**
   * Get autoMinorVersionUpgrade
   * @return autoMinorVersionUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getAutoMinorVersionUpgrade() {
    return autoMinorVersionUpgrade;
  }

  public void setAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
  }


  public DBInstance publiclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
    return this;
  }

  /**
   * Get publiclyAccessible
   * @return publiclyAccessible
   */
  @javax.annotation.Nullable
  public Boolean getPubliclyAccessible() {
    return publiclyAccessible;
  }

  public void setPubliclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
  }


  public DBInstance statusInfos(List statusInfos) {
    this.statusInfos = statusInfos;
    return this;
  }

  /**
   * Get statusInfos
   * @return statusInfos
   */
  @javax.annotation.Nullable
  public List getStatusInfos() {
    return statusInfos;
  }

  public void setStatusInfos(List statusInfos) {
    this.statusInfos = statusInfos;
  }


  public DBInstance dbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
    return this;
  }

  /**
   * Get dbClusterIdentifier
   * @return dbClusterIdentifier
   */
  @javax.annotation.Nullable
  public String getDbClusterIdentifier() {
    return dbClusterIdentifier;
  }

  public void setDbClusterIdentifier(String dbClusterIdentifier) {
    this.dbClusterIdentifier = dbClusterIdentifier;
  }


  public DBInstance storageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
    return this;
  }

  /**
   * Get storageEncrypted
   * @return storageEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getStorageEncrypted() {
    return storageEncrypted;
  }

  public void setStorageEncrypted(Boolean storageEncrypted) {
    this.storageEncrypted = storageEncrypted;
  }


  public DBInstance kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public DBInstance dbiResourceId(String dbiResourceId) {
    this.dbiResourceId = dbiResourceId;
    return this;
  }

  /**
   * Get dbiResourceId
   * @return dbiResourceId
   */
  @javax.annotation.Nullable
  public String getDbiResourceId() {
    return dbiResourceId;
  }

  public void setDbiResourceId(String dbiResourceId) {
    this.dbiResourceId = dbiResourceId;
  }


  public DBInstance caCertificateIdentifier(String caCertificateIdentifier) {
    this.caCertificateIdentifier = caCertificateIdentifier;
    return this;
  }

  /**
   * Get caCertificateIdentifier
   * @return caCertificateIdentifier
   */
  @javax.annotation.Nullable
  public String getCaCertificateIdentifier() {
    return caCertificateIdentifier;
  }

  public void setCaCertificateIdentifier(String caCertificateIdentifier) {
    this.caCertificateIdentifier = caCertificateIdentifier;
  }


  public DBInstance copyTagsToSnapshot(Boolean copyTagsToSnapshot) {
    this.copyTagsToSnapshot = copyTagsToSnapshot;
    return this;
  }

  /**
   * Get copyTagsToSnapshot
   * @return copyTagsToSnapshot
   */
  @javax.annotation.Nullable
  public Boolean getCopyTagsToSnapshot() {
    return copyTagsToSnapshot;
  }

  public void setCopyTagsToSnapshot(Boolean copyTagsToSnapshot) {
    this.copyTagsToSnapshot = copyTagsToSnapshot;
  }


  public DBInstance promotionTier(Integer promotionTier) {
    this.promotionTier = promotionTier;
    return this;
  }

  /**
   * Get promotionTier
   * @return promotionTier
   */
  @javax.annotation.Nullable
  public Integer getPromotionTier() {
    return promotionTier;
  }

  public void setPromotionTier(Integer promotionTier) {
    this.promotionTier = promotionTier;
  }


  public DBInstance dbInstanceArn(String dbInstanceArn) {
    this.dbInstanceArn = dbInstanceArn;
    return this;
  }

  /**
   * Get dbInstanceArn
   * @return dbInstanceArn
   */
  @javax.annotation.Nullable
  public String getDbInstanceArn() {
    return dbInstanceArn;
  }

  public void setDbInstanceArn(String dbInstanceArn) {
    this.dbInstanceArn = dbInstanceArn;
  }


  public DBInstance enabledCloudwatchLogsExports(List enabledCloudwatchLogsExports) {
    this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
    return this;
  }

  /**
   * Get enabledCloudwatchLogsExports
   * @return enabledCloudwatchLogsExports
   */
  @javax.annotation.Nullable
  public List getEnabledCloudwatchLogsExports() {
    return enabledCloudwatchLogsExports;
  }

  public void setEnabledCloudwatchLogsExports(List enabledCloudwatchLogsExports) {
    this.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DBInstance dbInstance = (DBInstance) o;
    return Objects.equals(this.dbInstanceIdentifier, dbInstance.dbInstanceIdentifier) &&
        Objects.equals(this.dbInstanceClass, dbInstance.dbInstanceClass) &&
        Objects.equals(this.engine, dbInstance.engine) &&
        Objects.equals(this.dbInstanceStatus, dbInstance.dbInstanceStatus) &&
        Objects.equals(this.endpoint, dbInstance.endpoint) &&
        Objects.equals(this.instanceCreateTime, dbInstance.instanceCreateTime) &&
        Objects.equals(this.preferredBackupWindow, dbInstance.preferredBackupWindow) &&
        Objects.equals(this.backupRetentionPeriod, dbInstance.backupRetentionPeriod) &&
        Objects.equals(this.vpcSecurityGroups, dbInstance.vpcSecurityGroups) &&
        Objects.equals(this.availabilityZone, dbInstance.availabilityZone) &&
        Objects.equals(this.dbSubnetGroup, dbInstance.dbSubnetGroup) &&
        Objects.equals(this.preferredMaintenanceWindow, dbInstance.preferredMaintenanceWindow) &&
        Objects.equals(this.pendingModifiedValues, dbInstance.pendingModifiedValues) &&
        Objects.equals(this.latestRestorableTime, dbInstance.latestRestorableTime) &&
        Objects.equals(this.engineVersion, dbInstance.engineVersion) &&
        Objects.equals(this.autoMinorVersionUpgrade, dbInstance.autoMinorVersionUpgrade) &&
        Objects.equals(this.publiclyAccessible, dbInstance.publiclyAccessible) &&
        Objects.equals(this.statusInfos, dbInstance.statusInfos) &&
        Objects.equals(this.dbClusterIdentifier, dbInstance.dbClusterIdentifier) &&
        Objects.equals(this.storageEncrypted, dbInstance.storageEncrypted) &&
        Objects.equals(this.kmsKeyId, dbInstance.kmsKeyId) &&
        Objects.equals(this.dbiResourceId, dbInstance.dbiResourceId) &&
        Objects.equals(this.caCertificateIdentifier, dbInstance.caCertificateIdentifier) &&
        Objects.equals(this.copyTagsToSnapshot, dbInstance.copyTagsToSnapshot) &&
        Objects.equals(this.promotionTier, dbInstance.promotionTier) &&
        Objects.equals(this.dbInstanceArn, dbInstance.dbInstanceArn) &&
        Objects.equals(this.enabledCloudwatchLogsExports, dbInstance.enabledCloudwatchLogsExports);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbInstanceIdentifier, dbInstanceClass, engine, dbInstanceStatus, endpoint, instanceCreateTime, preferredBackupWindow, backupRetentionPeriod, vpcSecurityGroups, availabilityZone, dbSubnetGroup, preferredMaintenanceWindow, pendingModifiedValues, latestRestorableTime, engineVersion, autoMinorVersionUpgrade, publiclyAccessible, statusInfos, dbClusterIdentifier, storageEncrypted, kmsKeyId, dbiResourceId, caCertificateIdentifier, copyTagsToSnapshot, promotionTier, dbInstanceArn, enabledCloudwatchLogsExports);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DBInstance {\n");
    sb.append("    dbInstanceIdentifier: ").append(toIndentedString(dbInstanceIdentifier)).append("\n");
    sb.append("    dbInstanceClass: ").append(toIndentedString(dbInstanceClass)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    dbInstanceStatus: ").append(toIndentedString(dbInstanceStatus)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    instanceCreateTime: ").append(toIndentedString(instanceCreateTime)).append("\n");
    sb.append("    preferredBackupWindow: ").append(toIndentedString(preferredBackupWindow)).append("\n");
    sb.append("    backupRetentionPeriod: ").append(toIndentedString(backupRetentionPeriod)).append("\n");
    sb.append("    vpcSecurityGroups: ").append(toIndentedString(vpcSecurityGroups)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    dbSubnetGroup: ").append(toIndentedString(dbSubnetGroup)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    pendingModifiedValues: ").append(toIndentedString(pendingModifiedValues)).append("\n");
    sb.append("    latestRestorableTime: ").append(toIndentedString(latestRestorableTime)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    autoMinorVersionUpgrade: ").append(toIndentedString(autoMinorVersionUpgrade)).append("\n");
    sb.append("    publiclyAccessible: ").append(toIndentedString(publiclyAccessible)).append("\n");
    sb.append("    statusInfos: ").append(toIndentedString(statusInfos)).append("\n");
    sb.append("    dbClusterIdentifier: ").append(toIndentedString(dbClusterIdentifier)).append("\n");
    sb.append("    storageEncrypted: ").append(toIndentedString(storageEncrypted)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    dbiResourceId: ").append(toIndentedString(dbiResourceId)).append("\n");
    sb.append("    caCertificateIdentifier: ").append(toIndentedString(caCertificateIdentifier)).append("\n");
    sb.append("    copyTagsToSnapshot: ").append(toIndentedString(copyTagsToSnapshot)).append("\n");
    sb.append("    promotionTier: ").append(toIndentedString(promotionTier)).append("\n");
    sb.append("    dbInstanceArn: ").append(toIndentedString(dbInstanceArn)).append("\n");
    sb.append("    enabledCloudwatchLogsExports: ").append(toIndentedString(enabledCloudwatchLogsExports)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DBInstanceIdentifier");
    openapiFields.add("DBInstanceClass");
    openapiFields.add("Engine");
    openapiFields.add("DBInstanceStatus");
    openapiFields.add("Endpoint");
    openapiFields.add("InstanceCreateTime");
    openapiFields.add("PreferredBackupWindow");
    openapiFields.add("BackupRetentionPeriod");
    openapiFields.add("VpcSecurityGroups");
    openapiFields.add("AvailabilityZone");
    openapiFields.add("DBSubnetGroup");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("PendingModifiedValues");
    openapiFields.add("LatestRestorableTime");
    openapiFields.add("EngineVersion");
    openapiFields.add("AutoMinorVersionUpgrade");
    openapiFields.add("PubliclyAccessible");
    openapiFields.add("StatusInfos");
    openapiFields.add("DBClusterIdentifier");
    openapiFields.add("StorageEncrypted");
    openapiFields.add("KmsKeyId");
    openapiFields.add("DbiResourceId");
    openapiFields.add("CACertificateIdentifier");
    openapiFields.add("CopyTagsToSnapshot");
    openapiFields.add("PromotionTier");
    openapiFields.add("DBInstanceArn");
    openapiFields.add("EnabledCloudwatchLogsExports");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DBInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DBInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DBInstance is not found in the empty JSON string", DBInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DBInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DBInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DBInstanceIdentifier`
      if (jsonObj.get("DBInstanceIdentifier") != null && !jsonObj.get("DBInstanceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBInstanceIdentifier"));
      }
      // validate the optional field `DBInstanceClass`
      if (jsonObj.get("DBInstanceClass") != null && !jsonObj.get("DBInstanceClass").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBInstanceClass"));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `DBInstanceStatus`
      if (jsonObj.get("DBInstanceStatus") != null && !jsonObj.get("DBInstanceStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBInstanceStatus"));
      }
      // validate the optional field `Endpoint`
      if (jsonObj.get("Endpoint") != null && !jsonObj.get("Endpoint").isJsonNull()) {
        DBInstanceEndpoint.validateJsonElement(jsonObj.get("Endpoint"));
      }
      // validate the optional field `InstanceCreateTime`
      if (jsonObj.get("InstanceCreateTime") != null && !jsonObj.get("InstanceCreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("InstanceCreateTime"));
      }
      // validate the optional field `PreferredBackupWindow`
      if (jsonObj.get("PreferredBackupWindow") != null && !jsonObj.get("PreferredBackupWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredBackupWindow"));
      }
      // validate the optional field `BackupRetentionPeriod`
      if (jsonObj.get("BackupRetentionPeriod") != null && !jsonObj.get("BackupRetentionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BackupRetentionPeriod"));
      }
      // validate the optional field `VpcSecurityGroups`
      if (jsonObj.get("VpcSecurityGroups") != null && !jsonObj.get("VpcSecurityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcSecurityGroups"));
      }
      // validate the optional field `AvailabilityZone`
      if (jsonObj.get("AvailabilityZone") != null && !jsonObj.get("AvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZone"));
      }
      // validate the optional field `DBSubnetGroup`
      if (jsonObj.get("DBSubnetGroup") != null && !jsonObj.get("DBSubnetGroup").isJsonNull()) {
        DBInstanceDBSubnetGroup.validateJsonElement(jsonObj.get("DBSubnetGroup"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `PendingModifiedValues`
      if (jsonObj.get("PendingModifiedValues") != null && !jsonObj.get("PendingModifiedValues").isJsonNull()) {
        DBInstancePendingModifiedValues.validateJsonElement(jsonObj.get("PendingModifiedValues"));
      }
      // validate the optional field `LatestRestorableTime`
      if (jsonObj.get("LatestRestorableTime") != null && !jsonObj.get("LatestRestorableTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LatestRestorableTime"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `AutoMinorVersionUpgrade`
      if (jsonObj.get("AutoMinorVersionUpgrade") != null && !jsonObj.get("AutoMinorVersionUpgrade").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoMinorVersionUpgrade"));
      }
      // validate the optional field `PubliclyAccessible`
      if (jsonObj.get("PubliclyAccessible") != null && !jsonObj.get("PubliclyAccessible").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("PubliclyAccessible"));
      }
      // validate the optional field `StatusInfos`
      if (jsonObj.get("StatusInfos") != null && !jsonObj.get("StatusInfos").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StatusInfos"));
      }
      // validate the optional field `DBClusterIdentifier`
      if (jsonObj.get("DBClusterIdentifier") != null && !jsonObj.get("DBClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterIdentifier"));
      }
      // validate the optional field `StorageEncrypted`
      if (jsonObj.get("StorageEncrypted") != null && !jsonObj.get("StorageEncrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StorageEncrypted"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `DbiResourceId`
      if (jsonObj.get("DbiResourceId") != null && !jsonObj.get("DbiResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DbiResourceId"));
      }
      // validate the optional field `CACertificateIdentifier`
      if (jsonObj.get("CACertificateIdentifier") != null && !jsonObj.get("CACertificateIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CACertificateIdentifier"));
      }
      // validate the optional field `CopyTagsToSnapshot`
      if (jsonObj.get("CopyTagsToSnapshot") != null && !jsonObj.get("CopyTagsToSnapshot").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CopyTagsToSnapshot"));
      }
      // validate the optional field `PromotionTier`
      if (jsonObj.get("PromotionTier") != null && !jsonObj.get("PromotionTier").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PromotionTier"));
      }
      // validate the optional field `DBInstanceArn`
      if (jsonObj.get("DBInstanceArn") != null && !jsonObj.get("DBInstanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBInstanceArn"));
      }
      // validate the optional field `EnabledCloudwatchLogsExports`
      if (jsonObj.get("EnabledCloudwatchLogsExports") != null && !jsonObj.get("EnabledCloudwatchLogsExports").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnabledCloudwatchLogsExports"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DBInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DBInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DBInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DBInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<DBInstance>() {
           @Override
           public void write(JsonWriter out, DBInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DBInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DBInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DBInstance
   * @throws IOException if the JSON string is invalid with respect to DBInstance
   */
  public static DBInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DBInstance.class);
  }

  /**
   * Convert an instance of DBInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

