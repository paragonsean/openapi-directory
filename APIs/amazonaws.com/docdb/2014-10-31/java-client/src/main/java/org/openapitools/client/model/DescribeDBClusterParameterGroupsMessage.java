/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input to &lt;a&gt;DescribeDBClusterParameterGroups&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDBClusterParameterGroupsMessage {
  public static final String SERIALIZED_NAME_DB_CLUSTER_PARAMETER_GROUP_NAME = "DBClusterParameterGroupName";
  @SerializedName(SERIALIZED_NAME_DB_CLUSTER_PARAMETER_GROUP_NAME)
  private String dbClusterParameterGroupName;

  public static final String SERIALIZED_NAME_FILTERS = "Filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List filters;

  public static final String SERIALIZED_NAME_MAX_RECORDS = "MaxRecords";
  @SerializedName(SERIALIZED_NAME_MAX_RECORDS)
  private Integer maxRecords;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  private String marker;

  public DescribeDBClusterParameterGroupsMessage() {
  }

  public DescribeDBClusterParameterGroupsMessage dbClusterParameterGroupName(String dbClusterParameterGroupName) {
    this.dbClusterParameterGroupName = dbClusterParameterGroupName;
    return this;
  }

  /**
   * Get dbClusterParameterGroupName
   * @return dbClusterParameterGroupName
   */
  @javax.annotation.Nullable
  public String getDbClusterParameterGroupName() {
    return dbClusterParameterGroupName;
  }

  public void setDbClusterParameterGroupName(String dbClusterParameterGroupName) {
    this.dbClusterParameterGroupName = dbClusterParameterGroupName;
  }


  public DescribeDBClusterParameterGroupsMessage filters(List filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List getFilters() {
    return filters;
  }

  public void setFilters(List filters) {
    this.filters = filters;
  }


  public DescribeDBClusterParameterGroupsMessage maxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
    return this;
  }

  /**
   * Get maxRecords
   * @return maxRecords
   */
  @javax.annotation.Nullable
  public Integer getMaxRecords() {
    return maxRecords;
  }

  public void setMaxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
  }


  public DescribeDBClusterParameterGroupsMessage marker(String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Get marker
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(String marker) {
    this.marker = marker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDBClusterParameterGroupsMessage describeDBClusterParameterGroupsMessage = (DescribeDBClusterParameterGroupsMessage) o;
    return Objects.equals(this.dbClusterParameterGroupName, describeDBClusterParameterGroupsMessage.dbClusterParameterGroupName) &&
        Objects.equals(this.filters, describeDBClusterParameterGroupsMessage.filters) &&
        Objects.equals(this.maxRecords, describeDBClusterParameterGroupsMessage.maxRecords) &&
        Objects.equals(this.marker, describeDBClusterParameterGroupsMessage.marker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbClusterParameterGroupName, filters, maxRecords, marker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDBClusterParameterGroupsMessage {\n");
    sb.append("    dbClusterParameterGroupName: ").append(toIndentedString(dbClusterParameterGroupName)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    maxRecords: ").append(toIndentedString(maxRecords)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DBClusterParameterGroupName");
    openapiFields.add("Filters");
    openapiFields.add("MaxRecords");
    openapiFields.add("Marker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDBClusterParameterGroupsMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDBClusterParameterGroupsMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDBClusterParameterGroupsMessage is not found in the empty JSON string", DescribeDBClusterParameterGroupsMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDBClusterParameterGroupsMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDBClusterParameterGroupsMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DBClusterParameterGroupName`
      if (jsonObj.get("DBClusterParameterGroupName") != null && !jsonObj.get("DBClusterParameterGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DBClusterParameterGroupName"));
      }
      // validate the optional field `Filters`
      if (jsonObj.get("Filters") != null && !jsonObj.get("Filters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Filters"));
      }
      // validate the optional field `MaxRecords`
      if (jsonObj.get("MaxRecords") != null && !jsonObj.get("MaxRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRecords"));
      }
      // validate the optional field `Marker`
      if (jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Marker"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDBClusterParameterGroupsMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDBClusterParameterGroupsMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDBClusterParameterGroupsMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDBClusterParameterGroupsMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDBClusterParameterGroupsMessage>() {
           @Override
           public void write(JsonWriter out, DescribeDBClusterParameterGroupsMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDBClusterParameterGroupsMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDBClusterParameterGroupsMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDBClusterParameterGroupsMessage
   * @throws IOException if the JSON string is invalid with respect to DescribeDBClusterParameterGroupsMessage
   */
  public static DescribeDBClusterParameterGroupsMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDBClusterParameterGroupsMessage.class);
  }

  /**
   * Convert an instance of DescribeDBClusterParameterGroupsMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

