/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input to &lt;a&gt;RebootDBInstance&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RebootDBInstanceMessage {
  public static final String SERIALIZED_NAME_DB_INSTANCE_IDENTIFIER = "DBInstanceIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_IDENTIFIER)
  private String dbInstanceIdentifier;

  public static final String SERIALIZED_NAME_FORCE_FAILOVER = "ForceFailover";
  @SerializedName(SERIALIZED_NAME_FORCE_FAILOVER)
  private Boolean forceFailover;

  public RebootDBInstanceMessage() {
  }

  public RebootDBInstanceMessage dbInstanceIdentifier(String dbInstanceIdentifier) {
    this.dbInstanceIdentifier = dbInstanceIdentifier;
    return this;
  }

  /**
   * Get dbInstanceIdentifier
   * @return dbInstanceIdentifier
   */
  @javax.annotation.Nonnull
  public String getDbInstanceIdentifier() {
    return dbInstanceIdentifier;
  }

  public void setDbInstanceIdentifier(String dbInstanceIdentifier) {
    this.dbInstanceIdentifier = dbInstanceIdentifier;
  }


  public RebootDBInstanceMessage forceFailover(Boolean forceFailover) {
    this.forceFailover = forceFailover;
    return this;
  }

  /**
   * Get forceFailover
   * @return forceFailover
   */
  @javax.annotation.Nullable
  public Boolean getForceFailover() {
    return forceFailover;
  }

  public void setForceFailover(Boolean forceFailover) {
    this.forceFailover = forceFailover;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RebootDBInstanceMessage rebootDBInstanceMessage = (RebootDBInstanceMessage) o;
    return Objects.equals(this.dbInstanceIdentifier, rebootDBInstanceMessage.dbInstanceIdentifier) &&
        Objects.equals(this.forceFailover, rebootDBInstanceMessage.forceFailover);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbInstanceIdentifier, forceFailover);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RebootDBInstanceMessage {\n");
    sb.append("    dbInstanceIdentifier: ").append(toIndentedString(dbInstanceIdentifier)).append("\n");
    sb.append("    forceFailover: ").append(toIndentedString(forceFailover)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DBInstanceIdentifier");
    openapiFields.add("ForceFailover");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DBInstanceIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RebootDBInstanceMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RebootDBInstanceMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RebootDBInstanceMessage is not found in the empty JSON string", RebootDBInstanceMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RebootDBInstanceMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RebootDBInstanceMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RebootDBInstanceMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DBInstanceIdentifier`
      String.validateJsonElement(jsonObj.get("DBInstanceIdentifier"));
      // validate the optional field `ForceFailover`
      if (jsonObj.get("ForceFailover") != null && !jsonObj.get("ForceFailover").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ForceFailover"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RebootDBInstanceMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RebootDBInstanceMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RebootDBInstanceMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RebootDBInstanceMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<RebootDBInstanceMessage>() {
           @Override
           public void write(JsonWriter out, RebootDBInstanceMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RebootDBInstanceMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RebootDBInstanceMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RebootDBInstanceMessage
   * @throws IOException if the JSON string is invalid with respect to RebootDBInstanceMessage
   */
  public static RebootDBInstanceMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RebootDBInstanceMessage.class);
  }

  /**
   * Convert an instance of RebootDBInstanceMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

