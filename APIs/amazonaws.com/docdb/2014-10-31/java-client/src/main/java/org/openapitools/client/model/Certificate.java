/*
 * Amazon DocumentDB with MongoDB compatibility
 * Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
 *
 * The version of the OpenAPI document: 2014-10-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A certificate authority (CA) certificate for an Amazon Web Services account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:37.919151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Certificate {
  public static final String SERIALIZED_NAME_CERTIFICATE_IDENTIFIER = "CertificateIdentifier";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_IDENTIFIER)
  private String certificateIdentifier;

  public static final String SERIALIZED_NAME_CERTIFICATE_TYPE = "CertificateType";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_TYPE)
  private String certificateType;

  public static final String SERIALIZED_NAME_THUMBPRINT = "Thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_VALID_FROM = "ValidFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TILL = "ValidTill";
  @SerializedName(SERIALIZED_NAME_VALID_TILL)
  private OffsetDateTime validTill;

  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "CertificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  private String certificateArn;

  public Certificate() {
  }

  public Certificate certificateIdentifier(String certificateIdentifier) {
    this.certificateIdentifier = certificateIdentifier;
    return this;
  }

  /**
   * Get certificateIdentifier
   * @return certificateIdentifier
   */
  @javax.annotation.Nullable
  public String getCertificateIdentifier() {
    return certificateIdentifier;
  }

  public void setCertificateIdentifier(String certificateIdentifier) {
    this.certificateIdentifier = certificateIdentifier;
  }


  public Certificate certificateType(String certificateType) {
    this.certificateType = certificateType;
    return this;
  }

  /**
   * Get certificateType
   * @return certificateType
   */
  @javax.annotation.Nullable
  public String getCertificateType() {
    return certificateType;
  }

  public void setCertificateType(String certificateType) {
    this.certificateType = certificateType;
  }


  public Certificate thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Get thumbprint
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public Certificate validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Get validFrom
   * @return validFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public Certificate validTill(OffsetDateTime validTill) {
    this.validTill = validTill;
    return this;
  }

  /**
   * Get validTill
   * @return validTill
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidTill() {
    return validTill;
  }

  public void setValidTill(OffsetDateTime validTill) {
    this.validTill = validTill;
  }


  public Certificate certificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * Get certificateArn
   * @return certificateArn
   */
  @javax.annotation.Nullable
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Certificate certificate = (Certificate) o;
    return Objects.equals(this.certificateIdentifier, certificate.certificateIdentifier) &&
        Objects.equals(this.certificateType, certificate.certificateType) &&
        Objects.equals(this.thumbprint, certificate.thumbprint) &&
        Objects.equals(this.validFrom, certificate.validFrom) &&
        Objects.equals(this.validTill, certificate.validTill) &&
        Objects.equals(this.certificateArn, certificate.certificateArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateIdentifier, certificateType, thumbprint, validFrom, validTill, certificateArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Certificate {\n");
    sb.append("    certificateIdentifier: ").append(toIndentedString(certificateIdentifier)).append("\n");
    sb.append("    certificateType: ").append(toIndentedString(certificateType)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTill: ").append(toIndentedString(validTill)).append("\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertificateIdentifier");
    openapiFields.add("CertificateType");
    openapiFields.add("Thumbprint");
    openapiFields.add("ValidFrom");
    openapiFields.add("ValidTill");
    openapiFields.add("CertificateArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Certificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Certificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Certificate is not found in the empty JSON string", Certificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Certificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Certificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CertificateIdentifier`
      if (jsonObj.get("CertificateIdentifier") != null && !jsonObj.get("CertificateIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateIdentifier"));
      }
      // validate the optional field `CertificateType`
      if (jsonObj.get("CertificateType") != null && !jsonObj.get("CertificateType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateType"));
      }
      // validate the optional field `Thumbprint`
      if (jsonObj.get("Thumbprint") != null && !jsonObj.get("Thumbprint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Thumbprint"));
      }
      // validate the optional field `ValidFrom`
      if (jsonObj.get("ValidFrom") != null && !jsonObj.get("ValidFrom").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ValidFrom"));
      }
      // validate the optional field `ValidTill`
      if (jsonObj.get("ValidTill") != null && !jsonObj.get("ValidTill").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ValidTill"));
      }
      // validate the optional field `CertificateArn`
      if (jsonObj.get("CertificateArn") != null && !jsonObj.get("CertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Certificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Certificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Certificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Certificate.class));

       return (TypeAdapter<T>) new TypeAdapter<Certificate>() {
           @Override
           public void write(JsonWriter out, Certificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Certificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Certificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Certificate
   * @throws IOException if the JSON string is invalid with respect to Certificate
   */
  public static Certificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Certificate.class);
  }

  /**
   * Convert an instance of Certificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

