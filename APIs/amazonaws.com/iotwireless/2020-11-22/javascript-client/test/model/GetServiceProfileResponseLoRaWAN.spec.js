/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTWireless);
  }
}(this, function(expect, AwsIoTWireless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetServiceProfileResponseLoRaWAN', function() {
    it('should create an instance of GetServiceProfileResponseLoRaWAN', function() {
      // uncomment below and update the code to test GetServiceProfileResponseLoRaWAN
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be.a(AwsIoTWireless.GetServiceProfileResponseLoRaWAN);
    });

    it('should have the property ulRate (base name: "UlRate")', function() {
      // uncomment below and update the code to test the property ulRate
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property ulBucketSize (base name: "UlBucketSize")', function() {
      // uncomment below and update the code to test the property ulBucketSize
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property ulRatePolicy (base name: "UlRatePolicy")', function() {
      // uncomment below and update the code to test the property ulRatePolicy
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property dlRate (base name: "DlRate")', function() {
      // uncomment below and update the code to test the property dlRate
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property dlBucketSize (base name: "DlBucketSize")', function() {
      // uncomment below and update the code to test the property dlBucketSize
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property dlRatePolicy (base name: "DlRatePolicy")', function() {
      // uncomment below and update the code to test the property dlRatePolicy
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property addGwMetadata (base name: "AddGwMetadata")', function() {
      // uncomment below and update the code to test the property addGwMetadata
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property devStatusReqFreq (base name: "DevStatusReqFreq")', function() {
      // uncomment below and update the code to test the property devStatusReqFreq
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property reportDevStatusBattery (base name: "ReportDevStatusBattery")', function() {
      // uncomment below and update the code to test the property reportDevStatusBattery
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property reportDevStatusMargin (base name: "ReportDevStatusMargin")', function() {
      // uncomment below and update the code to test the property reportDevStatusMargin
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property drMin (base name: "DrMin")', function() {
      // uncomment below and update the code to test the property drMin
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property drMax (base name: "DrMax")', function() {
      // uncomment below and update the code to test the property drMax
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property channelMask (base name: "ChannelMask")', function() {
      // uncomment below and update the code to test the property channelMask
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property prAllowed (base name: "PrAllowed")', function() {
      // uncomment below and update the code to test the property prAllowed
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property hrAllowed (base name: "HrAllowed")', function() {
      // uncomment below and update the code to test the property hrAllowed
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property raAllowed (base name: "RaAllowed")', function() {
      // uncomment below and update the code to test the property raAllowed
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property nwkGeoLoc (base name: "NwkGeoLoc")', function() {
      // uncomment below and update the code to test the property nwkGeoLoc
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property targetPer (base name: "TargetPer")', function() {
      // uncomment below and update the code to test the property targetPer
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property minGwDiversity (base name: "MinGwDiversity")', function() {
      // uncomment below and update the code to test the property minGwDiversity
      //var instance = new AwsIoTWireless.GetServiceProfileResponseLoRaWAN();
      //expect(instance).to.be();
    });

  });

}));
