/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTWireless);
  }
}(this, function(expect, AwsIoTWireless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetWirelessGatewayResponseLoRaWAN', function() {
    it('should create an instance of GetWirelessGatewayResponseLoRaWAN', function() {
      // uncomment below and update the code to test GetWirelessGatewayResponseLoRaWAN
      //var instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
      //expect(instance).to.be.a(AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN);
    });

    it('should have the property gatewayEui (base name: "GatewayEui")', function() {
      // uncomment below and update the code to test the property gatewayEui
      //var instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property rfRegion (base name: "RfRegion")', function() {
      // uncomment below and update the code to test the property rfRegion
      //var instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property joinEuiFilters (base name: "JoinEuiFilters")', function() {
      // uncomment below and update the code to test the property joinEuiFilters
      //var instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property netIdFilters (base name: "NetIdFilters")', function() {
      // uncomment below and update the code to test the property netIdFilters
      //var instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property subBands (base name: "SubBands")', function() {
      // uncomment below and update the code to test the property subBands
      //var instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property beaconing (base name: "Beaconing")', function() {
      // uncomment below and update the code to test the property beaconing
      //var instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
      //expect(instance).to.be();
    });

    it('should have the property maxEirp (base name: "MaxEirp")', function() {
      // uncomment below and update the code to test the property maxEirp
      //var instance = new AwsIoTWireless.GetWirelessGatewayResponseLoRaWAN();
      //expect(instance).to.be();
    });

  });

}));
