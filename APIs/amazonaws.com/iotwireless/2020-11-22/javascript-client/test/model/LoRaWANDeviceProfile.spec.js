/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTWireless);
  }
}(this, function(expect, AwsIoTWireless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTWireless.LoRaWANDeviceProfile();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LoRaWANDeviceProfile', function() {
    it('should create an instance of LoRaWANDeviceProfile', function() {
      // uncomment below and update the code to test LoRaWANDeviceProfile
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be.a(AwsIoTWireless.LoRaWANDeviceProfile);
    });

    it('should have the property supportsClassB (base name: "SupportsClassB")', function() {
      // uncomment below and update the code to test the property supportsClassB
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property classBTimeout (base name: "ClassBTimeout")', function() {
      // uncomment below and update the code to test the property classBTimeout
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property pingSlotPeriod (base name: "PingSlotPeriod")', function() {
      // uncomment below and update the code to test the property pingSlotPeriod
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property pingSlotDr (base name: "PingSlotDr")', function() {
      // uncomment below and update the code to test the property pingSlotDr
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property pingSlotFreq (base name: "PingSlotFreq")', function() {
      // uncomment below and update the code to test the property pingSlotFreq
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportsClassC (base name: "SupportsClassC")', function() {
      // uncomment below and update the code to test the property supportsClassC
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property classCTimeout (base name: "ClassCTimeout")', function() {
      // uncomment below and update the code to test the property classCTimeout
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property macVersion (base name: "MacVersion")', function() {
      // uncomment below and update the code to test the property macVersion
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property regParamsRevision (base name: "RegParamsRevision")', function() {
      // uncomment below and update the code to test the property regParamsRevision
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property rxDelay1 (base name: "RxDelay1")', function() {
      // uncomment below and update the code to test the property rxDelay1
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property rxDrOffset1 (base name: "RxDrOffset1")', function() {
      // uncomment below and update the code to test the property rxDrOffset1
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property rxDataRate2 (base name: "RxDataRate2")', function() {
      // uncomment below and update the code to test the property rxDataRate2
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property rxFreq2 (base name: "RxFreq2")', function() {
      // uncomment below and update the code to test the property rxFreq2
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property factoryPresetFreqsList (base name: "FactoryPresetFreqsList")', function() {
      // uncomment below and update the code to test the property factoryPresetFreqsList
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxEirp (base name: "MaxEirp")', function() {
      // uncomment below and update the code to test the property maxEirp
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property maxDutyCycle (base name: "MaxDutyCycle")', function() {
      // uncomment below and update the code to test the property maxDutyCycle
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property rfRegion (base name: "RfRegion")', function() {
      // uncomment below and update the code to test the property rfRegion
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property supportsJoin (base name: "SupportsJoin")', function() {
      // uncomment below and update the code to test the property supportsJoin
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

    it('should have the property supports32BitFCnt (base name: "Supports32BitFCnt")', function() {
      // uncomment below and update the code to test the property supports32BitFCnt
      //var instance = new AwsIoTWireless.LoRaWANDeviceProfile();
      //expect(instance).to.be();
    });

  });

}));
