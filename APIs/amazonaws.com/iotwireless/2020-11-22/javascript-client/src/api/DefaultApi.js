/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateAwsAccountWithPartnerAccountRequest from '../model/AssociateAwsAccountWithPartnerAccountRequest';
import AssociateAwsAccountWithPartnerAccountResponse from '../model/AssociateAwsAccountWithPartnerAccountResponse';
import AssociateMulticastGroupWithFuotaTaskRequest from '../model/AssociateMulticastGroupWithFuotaTaskRequest';
import AssociateWirelessDeviceWithFuotaTaskRequest from '../model/AssociateWirelessDeviceWithFuotaTaskRequest';
import AssociateWirelessDeviceWithThingRequest from '../model/AssociateWirelessDeviceWithThingRequest';
import AssociateWirelessGatewayWithCertificateRequest from '../model/AssociateWirelessGatewayWithCertificateRequest';
import AssociateWirelessGatewayWithCertificateResponse from '../model/AssociateWirelessGatewayWithCertificateResponse';
import AssociateWirelessGatewayWithThingRequest from '../model/AssociateWirelessGatewayWithThingRequest';
import CreateDestinationRequest from '../model/CreateDestinationRequest';
import CreateDestinationResponse from '../model/CreateDestinationResponse';
import CreateDeviceProfileRequest from '../model/CreateDeviceProfileRequest';
import CreateDeviceProfileResponse from '../model/CreateDeviceProfileResponse';
import CreateFuotaTaskRequest from '../model/CreateFuotaTaskRequest';
import CreateFuotaTaskResponse from '../model/CreateFuotaTaskResponse';
import CreateMulticastGroupRequest from '../model/CreateMulticastGroupRequest';
import CreateMulticastGroupResponse from '../model/CreateMulticastGroupResponse';
import CreateNetworkAnalyzerConfigurationRequest from '../model/CreateNetworkAnalyzerConfigurationRequest';
import CreateNetworkAnalyzerConfigurationResponse from '../model/CreateNetworkAnalyzerConfigurationResponse';
import CreateServiceProfileRequest from '../model/CreateServiceProfileRequest';
import CreateServiceProfileResponse from '../model/CreateServiceProfileResponse';
import CreateWirelessDeviceRequest from '../model/CreateWirelessDeviceRequest';
import CreateWirelessDeviceResponse from '../model/CreateWirelessDeviceResponse';
import CreateWirelessGatewayRequest from '../model/CreateWirelessGatewayRequest';
import CreateWirelessGatewayResponse from '../model/CreateWirelessGatewayResponse';
import CreateWirelessGatewayTaskDefinitionRequest from '../model/CreateWirelessGatewayTaskDefinitionRequest';
import CreateWirelessGatewayTaskDefinitionResponse from '../model/CreateWirelessGatewayTaskDefinitionResponse';
import CreateWirelessGatewayTaskRequest from '../model/CreateWirelessGatewayTaskRequest';
import CreateWirelessGatewayTaskResponse from '../model/CreateWirelessGatewayTaskResponse';
import GetDestinationResponse from '../model/GetDestinationResponse';
import GetDeviceProfileResponse from '../model/GetDeviceProfileResponse';
import GetEventConfigurationByResourceTypesResponse from '../model/GetEventConfigurationByResourceTypesResponse';
import GetFuotaTaskResponse from '../model/GetFuotaTaskResponse';
import GetLogLevelsByResourceTypesResponse from '../model/GetLogLevelsByResourceTypesResponse';
import GetMulticastGroupResponse from '../model/GetMulticastGroupResponse';
import GetMulticastGroupSessionResponse from '../model/GetMulticastGroupSessionResponse';
import GetNetworkAnalyzerConfigurationResponse from '../model/GetNetworkAnalyzerConfigurationResponse';
import GetPartnerAccountResponse from '../model/GetPartnerAccountResponse';
import GetPositionConfigurationResponse from '../model/GetPositionConfigurationResponse';
import GetPositionEstimateRequest from '../model/GetPositionEstimateRequest';
import GetPositionEstimateResponse from '../model/GetPositionEstimateResponse';
import GetPositionResponse from '../model/GetPositionResponse';
import GetResourceEventConfigurationResponse from '../model/GetResourceEventConfigurationResponse';
import GetResourceLogLevelResponse from '../model/GetResourceLogLevelResponse';
import GetResourcePositionResponse from '../model/GetResourcePositionResponse';
import GetServiceEndpointResponse from '../model/GetServiceEndpointResponse';
import GetServiceProfileResponse from '../model/GetServiceProfileResponse';
import GetWirelessDeviceImportTaskResponse from '../model/GetWirelessDeviceImportTaskResponse';
import GetWirelessDeviceResponse from '../model/GetWirelessDeviceResponse';
import GetWirelessDeviceStatisticsResponse from '../model/GetWirelessDeviceStatisticsResponse';
import GetWirelessGatewayCertificateResponse from '../model/GetWirelessGatewayCertificateResponse';
import GetWirelessGatewayFirmwareInformationResponse from '../model/GetWirelessGatewayFirmwareInformationResponse';
import GetWirelessGatewayResponse from '../model/GetWirelessGatewayResponse';
import GetWirelessGatewayStatisticsResponse from '../model/GetWirelessGatewayStatisticsResponse';
import GetWirelessGatewayTaskDefinitionResponse from '../model/GetWirelessGatewayTaskDefinitionResponse';
import GetWirelessGatewayTaskResponse from '../model/GetWirelessGatewayTaskResponse';
import ListDestinationsResponse from '../model/ListDestinationsResponse';
import ListDeviceProfilesResponse from '../model/ListDeviceProfilesResponse';
import ListDevicesForWirelessDeviceImportTaskResponse from '../model/ListDevicesForWirelessDeviceImportTaskResponse';
import ListEventConfigurationsResponse from '../model/ListEventConfigurationsResponse';
import ListFuotaTasksResponse from '../model/ListFuotaTasksResponse';
import ListMulticastGroupsByFuotaTaskResponse from '../model/ListMulticastGroupsByFuotaTaskResponse';
import ListMulticastGroupsResponse from '../model/ListMulticastGroupsResponse';
import ListNetworkAnalyzerConfigurationsResponse from '../model/ListNetworkAnalyzerConfigurationsResponse';
import ListPartnerAccountsResponse from '../model/ListPartnerAccountsResponse';
import ListPositionConfigurationsResponse from '../model/ListPositionConfigurationsResponse';
import ListQueuedMessagesResponse from '../model/ListQueuedMessagesResponse';
import ListServiceProfilesResponse from '../model/ListServiceProfilesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListWirelessDeviceImportTasksResponse from '../model/ListWirelessDeviceImportTasksResponse';
import ListWirelessDevicesResponse from '../model/ListWirelessDevicesResponse';
import ListWirelessGatewayTaskDefinitionsResponse from '../model/ListWirelessGatewayTaskDefinitionsResponse';
import ListWirelessGatewaysResponse from '../model/ListWirelessGatewaysResponse';
import PutPositionConfigurationRequest from '../model/PutPositionConfigurationRequest';
import PutResourceLogLevelRequest from '../model/PutResourceLogLevelRequest';
import SendDataToMulticastGroupRequest from '../model/SendDataToMulticastGroupRequest';
import SendDataToMulticastGroupResponse from '../model/SendDataToMulticastGroupResponse';
import SendDataToWirelessDeviceRequest from '../model/SendDataToWirelessDeviceRequest';
import SendDataToWirelessDeviceResponse from '../model/SendDataToWirelessDeviceResponse';
import StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest from '../model/StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest';
import StartFuotaTaskRequest from '../model/StartFuotaTaskRequest';
import StartMulticastGroupSessionRequest from '../model/StartMulticastGroupSessionRequest';
import StartSingleWirelessDeviceImportTaskRequest from '../model/StartSingleWirelessDeviceImportTaskRequest';
import StartSingleWirelessDeviceImportTaskResponse from '../model/StartSingleWirelessDeviceImportTaskResponse';
import StartWirelessDeviceImportTaskRequest from '../model/StartWirelessDeviceImportTaskRequest';
import StartWirelessDeviceImportTaskResponse from '../model/StartWirelessDeviceImportTaskResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import TestWirelessDeviceResponse from '../model/TestWirelessDeviceResponse';
import UpdateDestinationRequest from '../model/UpdateDestinationRequest';
import UpdateEventConfigurationByResourceTypesRequest from '../model/UpdateEventConfigurationByResourceTypesRequest';
import UpdateFuotaTaskRequest from '../model/UpdateFuotaTaskRequest';
import UpdateLogLevelsByResourceTypesRequest from '../model/UpdateLogLevelsByResourceTypesRequest';
import UpdateMulticastGroupRequest from '../model/UpdateMulticastGroupRequest';
import UpdateNetworkAnalyzerConfigurationRequest from '../model/UpdateNetworkAnalyzerConfigurationRequest';
import UpdatePartnerAccountRequest from '../model/UpdatePartnerAccountRequest';
import UpdatePositionRequest from '../model/UpdatePositionRequest';
import UpdateResourceEventConfigurationRequest from '../model/UpdateResourceEventConfigurationRequest';
import UpdateResourcePositionRequest from '../model/UpdateResourcePositionRequest';
import UpdateWirelessDeviceImportTaskRequest from '../model/UpdateWirelessDeviceImportTaskRequest';
import UpdateWirelessDeviceRequest from '../model/UpdateWirelessDeviceRequest';
import UpdateWirelessGatewayRequest from '../model/UpdateWirelessGatewayRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-11-22
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateAwsAccountWithPartnerAccount operation.
     * @callback module:api/DefaultApi~associateAwsAccountWithPartnerAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateAwsAccountWithPartnerAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a partner account with your AWS account.
     * @param {module:model/AssociateAwsAccountWithPartnerAccountRequest} associateAwsAccountWithPartnerAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateAwsAccountWithPartnerAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateAwsAccountWithPartnerAccountResponse}
     */
    associateAwsAccountWithPartnerAccount(associateAwsAccountWithPartnerAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateAwsAccountWithPartnerAccountRequest;
      // verify the required parameter 'associateAwsAccountWithPartnerAccountRequest' is set
      if (associateAwsAccountWithPartnerAccountRequest === undefined || associateAwsAccountWithPartnerAccountRequest === null) {
        throw new Error("Missing the required parameter 'associateAwsAccountWithPartnerAccountRequest' when calling associateAwsAccountWithPartnerAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateAwsAccountWithPartnerAccountResponse;
      return this.apiClient.callApi(
        '/partner-accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateMulticastGroupWithFuotaTask operation.
     * @callback module:api/DefaultApi~associateMulticastGroupWithFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a multicast group with a FUOTA task.
     * @param {String} id 
     * @param {module:model/AssociateMulticastGroupWithFuotaTaskRequest} associateMulticastGroupWithFuotaTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateMulticastGroupWithFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateMulticastGroupWithFuotaTask(id, associateMulticastGroupWithFuotaTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateMulticastGroupWithFuotaTaskRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling associateMulticastGroupWithFuotaTask");
      }
      // verify the required parameter 'associateMulticastGroupWithFuotaTaskRequest' is set
      if (associateMulticastGroupWithFuotaTaskRequest === undefined || associateMulticastGroupWithFuotaTaskRequest === null) {
        throw new Error("Missing the required parameter 'associateMulticastGroupWithFuotaTaskRequest' when calling associateMulticastGroupWithFuotaTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}/multicast-group', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateWirelessDeviceWithFuotaTask operation.
     * @callback module:api/DefaultApi~associateWirelessDeviceWithFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a wireless device with a FUOTA task.
     * @param {String} id 
     * @param {module:model/AssociateWirelessDeviceWithFuotaTaskRequest} associateWirelessDeviceWithFuotaTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateWirelessDeviceWithFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateWirelessDeviceWithFuotaTask(id, associateWirelessDeviceWithFuotaTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateWirelessDeviceWithFuotaTaskRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling associateWirelessDeviceWithFuotaTask");
      }
      // verify the required parameter 'associateWirelessDeviceWithFuotaTaskRequest' is set
      if (associateWirelessDeviceWithFuotaTaskRequest === undefined || associateWirelessDeviceWithFuotaTaskRequest === null) {
        throw new Error("Missing the required parameter 'associateWirelessDeviceWithFuotaTaskRequest' when calling associateWirelessDeviceWithFuotaTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}/wireless-device', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateWirelessDeviceWithMulticastGroup operation.
     * @callback module:api/DefaultApi~associateWirelessDeviceWithMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a wireless device with a multicast group.
     * @param {String} id 
     * @param {module:model/AssociateWirelessDeviceWithFuotaTaskRequest} associateWirelessDeviceWithFuotaTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateWirelessDeviceWithMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateWirelessDeviceWithMulticastGroup(id, associateWirelessDeviceWithFuotaTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateWirelessDeviceWithFuotaTaskRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling associateWirelessDeviceWithMulticastGroup");
      }
      // verify the required parameter 'associateWirelessDeviceWithFuotaTaskRequest' is set
      if (associateWirelessDeviceWithFuotaTaskRequest === undefined || associateWirelessDeviceWithFuotaTaskRequest === null) {
        throw new Error("Missing the required parameter 'associateWirelessDeviceWithFuotaTaskRequest' when calling associateWirelessDeviceWithMulticastGroup");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}/wireless-device', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateWirelessDeviceWithThing operation.
     * @callback module:api/DefaultApi~associateWirelessDeviceWithThingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a wireless device with a thing.
     * @param {String} id The ID of the resource to update.
     * @param {module:model/AssociateWirelessDeviceWithThingRequest} associateWirelessDeviceWithThingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateWirelessDeviceWithThingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateWirelessDeviceWithThing(id, associateWirelessDeviceWithThingRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateWirelessDeviceWithThingRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling associateWirelessDeviceWithThing");
      }
      // verify the required parameter 'associateWirelessDeviceWithThingRequest' is set
      if (associateWirelessDeviceWithThingRequest === undefined || associateWirelessDeviceWithThingRequest === null) {
        throw new Error("Missing the required parameter 'associateWirelessDeviceWithThingRequest' when calling associateWirelessDeviceWithThing");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}/thing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateWirelessGatewayWithCertificate operation.
     * @callback module:api/DefaultApi~associateWirelessGatewayWithCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateWirelessGatewayWithCertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a wireless gateway with a certificate.
     * @param {String} id The ID of the resource to update.
     * @param {module:model/AssociateWirelessGatewayWithCertificateRequest} associateWirelessGatewayWithCertificateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateWirelessGatewayWithCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateWirelessGatewayWithCertificateResponse}
     */
    associateWirelessGatewayWithCertificate(id, associateWirelessGatewayWithCertificateRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateWirelessGatewayWithCertificateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling associateWirelessGatewayWithCertificate");
      }
      // verify the required parameter 'associateWirelessGatewayWithCertificateRequest' is set
      if (associateWirelessGatewayWithCertificateRequest === undefined || associateWirelessGatewayWithCertificateRequest === null) {
        throw new Error("Missing the required parameter 'associateWirelessGatewayWithCertificateRequest' when calling associateWirelessGatewayWithCertificate");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateWirelessGatewayWithCertificateResponse;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/certificate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateWirelessGatewayWithThing operation.
     * @callback module:api/DefaultApi~associateWirelessGatewayWithThingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a wireless gateway with a thing.
     * @param {String} id The ID of the resource to update.
     * @param {module:model/AssociateWirelessGatewayWithThingRequest} associateWirelessGatewayWithThingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateWirelessGatewayWithThingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateWirelessGatewayWithThing(id, associateWirelessGatewayWithThingRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateWirelessGatewayWithThingRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling associateWirelessGatewayWithThing");
      }
      // verify the required parameter 'associateWirelessGatewayWithThingRequest' is set
      if (associateWirelessGatewayWithThingRequest === undefined || associateWirelessGatewayWithThingRequest === null) {
        throw new Error("Missing the required parameter 'associateWirelessGatewayWithThingRequest' when calling associateWirelessGatewayWithThing");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/thing', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelMulticastGroupSession operation.
     * @callback module:api/DefaultApi~cancelMulticastGroupSessionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels an existing multicast group session.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelMulticastGroupSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelMulticastGroupSession(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cancelMulticastGroupSession");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}/session', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDestination operation.
     * @callback module:api/DefaultApi~createDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDestinationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new destination that maps a device message to an AWS IoT rule.
     * @param {module:model/CreateDestinationRequest} createDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDestinationResponse}
     */
    createDestination(createDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDestinationRequest;
      // verify the required parameter 'createDestinationRequest' is set
      if (createDestinationRequest === undefined || createDestinationRequest === null) {
        throw new Error("Missing the required parameter 'createDestinationRequest' when calling createDestination");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDestinationResponse;
      return this.apiClient.callApi(
        '/destinations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceProfile operation.
     * @callback module:api/DefaultApi~createDeviceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeviceProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new device profile.
     * @param {module:model/CreateDeviceProfileRequest} createDeviceProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDeviceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeviceProfileResponse}
     */
    createDeviceProfile(createDeviceProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDeviceProfileRequest;
      // verify the required parameter 'createDeviceProfileRequest' is set
      if (createDeviceProfileRequest === undefined || createDeviceProfileRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceProfileRequest' when calling createDeviceProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeviceProfileResponse;
      return this.apiClient.callApi(
        '/device-profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFuotaTask operation.
     * @callback module:api/DefaultApi~createFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFuotaTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a FUOTA task.
     * @param {module:model/CreateFuotaTaskRequest} createFuotaTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFuotaTaskResponse}
     */
    createFuotaTask(createFuotaTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFuotaTaskRequest;
      // verify the required parameter 'createFuotaTaskRequest' is set
      if (createFuotaTaskRequest === undefined || createFuotaTaskRequest === null) {
        throw new Error("Missing the required parameter 'createFuotaTaskRequest' when calling createFuotaTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFuotaTaskResponse;
      return this.apiClient.callApi(
        '/fuota-tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMulticastGroup operation.
     * @callback module:api/DefaultApi~createMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMulticastGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a multicast group.
     * @param {module:model/CreateMulticastGroupRequest} createMulticastGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMulticastGroupResponse}
     */
    createMulticastGroup(createMulticastGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMulticastGroupRequest;
      // verify the required parameter 'createMulticastGroupRequest' is set
      if (createMulticastGroupRequest === undefined || createMulticastGroupRequest === null) {
        throw new Error("Missing the required parameter 'createMulticastGroupRequest' when calling createMulticastGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMulticastGroupResponse;
      return this.apiClient.callApi(
        '/multicast-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkAnalyzerConfiguration operation.
     * @callback module:api/DefaultApi~createNetworkAnalyzerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkAnalyzerConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new network analyzer configuration.
     * @param {module:model/CreateNetworkAnalyzerConfigurationRequest} createNetworkAnalyzerConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createNetworkAnalyzerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkAnalyzerConfigurationResponse}
     */
    createNetworkAnalyzerConfiguration(createNetworkAnalyzerConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createNetworkAnalyzerConfigurationRequest;
      // verify the required parameter 'createNetworkAnalyzerConfigurationRequest' is set
      if (createNetworkAnalyzerConfigurationRequest === undefined || createNetworkAnalyzerConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkAnalyzerConfigurationRequest' when calling createNetworkAnalyzerConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkAnalyzerConfigurationResponse;
      return this.apiClient.callApi(
        '/network-analyzer-configurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createServiceProfile operation.
     * @callback module:api/DefaultApi~createServiceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServiceProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new service profile.
     * @param {module:model/CreateServiceProfileRequest} createServiceProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createServiceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServiceProfileResponse}
     */
    createServiceProfile(createServiceProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createServiceProfileRequest;
      // verify the required parameter 'createServiceProfileRequest' is set
      if (createServiceProfileRequest === undefined || createServiceProfileRequest === null) {
        throw new Error("Missing the required parameter 'createServiceProfileRequest' when calling createServiceProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceProfileResponse;
      return this.apiClient.callApi(
        '/service-profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWirelessDevice operation.
     * @callback module:api/DefaultApi~createWirelessDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWirelessDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a wireless device.
     * @param {module:model/CreateWirelessDeviceRequest} createWirelessDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWirelessDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWirelessDeviceResponse}
     */
    createWirelessDevice(createWirelessDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWirelessDeviceRequest;
      // verify the required parameter 'createWirelessDeviceRequest' is set
      if (createWirelessDeviceRequest === undefined || createWirelessDeviceRequest === null) {
        throw new Error("Missing the required parameter 'createWirelessDeviceRequest' when calling createWirelessDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWirelessDeviceResponse;
      return this.apiClient.callApi(
        '/wireless-devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWirelessGateway operation.
     * @callback module:api/DefaultApi~createWirelessGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWirelessGatewayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a wireless gateway.
     * @param {module:model/CreateWirelessGatewayRequest} createWirelessGatewayRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWirelessGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWirelessGatewayResponse}
     */
    createWirelessGateway(createWirelessGatewayRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWirelessGatewayRequest;
      // verify the required parameter 'createWirelessGatewayRequest' is set
      if (createWirelessGatewayRequest === undefined || createWirelessGatewayRequest === null) {
        throw new Error("Missing the required parameter 'createWirelessGatewayRequest' when calling createWirelessGateway");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWirelessGatewayResponse;
      return this.apiClient.callApi(
        '/wireless-gateways', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWirelessGatewayTask operation.
     * @callback module:api/DefaultApi~createWirelessGatewayTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWirelessGatewayTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a task for a wireless gateway.
     * @param {String} id The ID of the resource to update.
     * @param {module:model/CreateWirelessGatewayTaskRequest} createWirelessGatewayTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWirelessGatewayTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWirelessGatewayTaskResponse}
     */
    createWirelessGatewayTask(id, createWirelessGatewayTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWirelessGatewayTaskRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createWirelessGatewayTask");
      }
      // verify the required parameter 'createWirelessGatewayTaskRequest' is set
      if (createWirelessGatewayTaskRequest === undefined || createWirelessGatewayTaskRequest === null) {
        throw new Error("Missing the required parameter 'createWirelessGatewayTaskRequest' when calling createWirelessGatewayTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWirelessGatewayTaskResponse;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWirelessGatewayTaskDefinition operation.
     * @callback module:api/DefaultApi~createWirelessGatewayTaskDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWirelessGatewayTaskDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a gateway task definition.
     * @param {module:model/CreateWirelessGatewayTaskDefinitionRequest} createWirelessGatewayTaskDefinitionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWirelessGatewayTaskDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWirelessGatewayTaskDefinitionResponse}
     */
    createWirelessGatewayTaskDefinition(createWirelessGatewayTaskDefinitionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWirelessGatewayTaskDefinitionRequest;
      // verify the required parameter 'createWirelessGatewayTaskDefinitionRequest' is set
      if (createWirelessGatewayTaskDefinitionRequest === undefined || createWirelessGatewayTaskDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'createWirelessGatewayTaskDefinitionRequest' when calling createWirelessGatewayTaskDefinition");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWirelessGatewayTaskDefinitionResponse;
      return this.apiClient.callApi(
        '/wireless-gateway-task-definitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDestination operation.
     * @callback module:api/DefaultApi~deleteDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a destination.
     * @param {String} name The name of the resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteDestination(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteDestination");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/destinations/{Name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceProfile operation.
     * @callback module:api/DefaultApi~deleteDeviceProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device profile.
     * @param {String} id The ID of the resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDeviceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteDeviceProfile(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDeviceProfile");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/device-profiles/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFuotaTask operation.
     * @callback module:api/DefaultApi~deleteFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a FUOTA task.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFuotaTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFuotaTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMulticastGroup operation.
     * @callback module:api/DefaultApi~deleteMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a multicast group if it is not in use by a fuota task.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMulticastGroup(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMulticastGroup");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkAnalyzerConfiguration operation.
     * @callback module:api/DefaultApi~deleteNetworkAnalyzerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a network analyzer configuration.
     * @param {String} configurationName 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteNetworkAnalyzerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteNetworkAnalyzerConfiguration(configurationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling deleteNetworkAnalyzerConfiguration");
      }

      let pathParams = {
        'ConfigurationName': configurationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/network-analyzer-configurations/{ConfigurationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQueuedMessages operation.
     * @callback module:api/DefaultApi~deleteQueuedMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove queued messages from the downlink queue.
     * @param {String} id The ID of a given wireless device for which downlink messages will be deleted.
     * @param {String} messageId If message ID is <code>\"*\"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [wirelessDeviceType] The wireless device type, which can be either Sidewalk or LoRaWAN.
     * @param {module:api/DefaultApi~deleteQueuedMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteQueuedMessages(id, messageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQueuedMessages");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling deleteQueuedMessages");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
        'messageId': messageId,
        'WirelessDeviceType': opts['wirelessDeviceType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}/data#messageId', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServiceProfile operation.
     * @callback module:api/DefaultApi~deleteServiceProfileCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a service profile.
     * @param {String} id The ID of the resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServiceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteServiceProfile(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteServiceProfile");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service-profiles/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWirelessDevice operation.
     * @callback module:api/DefaultApi~deleteWirelessDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a wireless device.
     * @param {String} id The ID of the resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWirelessDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWirelessDevice(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWirelessDevice");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWirelessDeviceImportTask operation.
     * @callback module:api/DefaultApi~deleteWirelessDeviceImportTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an import task.
     * @param {String} id The unique identifier of the import task to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWirelessDeviceImportTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWirelessDeviceImportTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWirelessDeviceImportTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless_device_import_task/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWirelessGateway operation.
     * @callback module:api/DefaultApi~deleteWirelessGatewayCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a wireless gateway.
     * @param {String} id The ID of the resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWirelessGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWirelessGateway(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWirelessGateway");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWirelessGatewayTask operation.
     * @callback module:api/DefaultApi~deleteWirelessGatewayTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a wireless gateway task.
     * @param {String} id The ID of the resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWirelessGatewayTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWirelessGatewayTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWirelessGatewayTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/tasks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWirelessGatewayTaskDefinition operation.
     * @callback module:api/DefaultApi~deleteWirelessGatewayTaskDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.
     * @param {String} id The ID of the resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWirelessGatewayTaskDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWirelessGatewayTaskDefinition(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteWirelessGatewayTaskDefinition");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-gateway-task-definitions/{Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterWirelessDevice operation.
     * @callback module:api/DefaultApi~deregisterWirelessDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregister a wireless device from AWS IoT Wireless.
     * @param {String} identifier The identifier of the wireless device to deregister from AWS IoT Wireless.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [wirelessDeviceType] The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.
     * @param {module:api/DefaultApi~deregisterWirelessDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deregisterWirelessDevice(identifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling deregisterWirelessDevice");
      }

      let pathParams = {
        'Identifier': identifier
      };
      let queryParams = {
        'WirelessDeviceType': opts['wirelessDeviceType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-devices/{Identifier}/deregister', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateAwsAccountFromPartnerAccount operation.
     * @callback module:api/DefaultApi~disassociateAwsAccountFromPartnerAccountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates your AWS account from a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, disassociates your AWS account from all partner accounts.
     * @param {String} partnerAccountId The partner account ID to disassociate from the AWS account.
     * @param {module:model/String} partnerType The partner type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateAwsAccountFromPartnerAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateAwsAccountFromPartnerAccount(partnerAccountId, partnerType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partnerAccountId' is set
      if (partnerAccountId === undefined || partnerAccountId === null) {
        throw new Error("Missing the required parameter 'partnerAccountId' when calling disassociateAwsAccountFromPartnerAccount");
      }
      // verify the required parameter 'partnerType' is set
      if (partnerType === undefined || partnerType === null) {
        throw new Error("Missing the required parameter 'partnerType' when calling disassociateAwsAccountFromPartnerAccount");
      }

      let pathParams = {
        'PartnerAccountId': partnerAccountId
      };
      let queryParams = {
        'partnerType': partnerType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/partner-accounts/{PartnerAccountId}#partnerType', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateMulticastGroupFromFuotaTask operation.
     * @callback module:api/DefaultApi~disassociateMulticastGroupFromFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a multicast group from a fuota task.
     * @param {String} id 
     * @param {String} multicastGroupId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateMulticastGroupFromFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateMulticastGroupFromFuotaTask(id, multicastGroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disassociateMulticastGroupFromFuotaTask");
      }
      // verify the required parameter 'multicastGroupId' is set
      if (multicastGroupId === undefined || multicastGroupId === null) {
        throw new Error("Missing the required parameter 'multicastGroupId' when calling disassociateMulticastGroupFromFuotaTask");
      }

      let pathParams = {
        'Id': id,
        'MulticastGroupId': multicastGroupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}/multicast-groups/{MulticastGroupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateWirelessDeviceFromFuotaTask operation.
     * @callback module:api/DefaultApi~disassociateWirelessDeviceFromFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a wireless device from a FUOTA task.
     * @param {String} id 
     * @param {String} wirelessDeviceId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateWirelessDeviceFromFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateWirelessDeviceFromFuotaTask(id, wirelessDeviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disassociateWirelessDeviceFromFuotaTask");
      }
      // verify the required parameter 'wirelessDeviceId' is set
      if (wirelessDeviceId === undefined || wirelessDeviceId === null) {
        throw new Error("Missing the required parameter 'wirelessDeviceId' when calling disassociateWirelessDeviceFromFuotaTask");
      }

      let pathParams = {
        'Id': id,
        'WirelessDeviceId': wirelessDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}/wireless-devices/{WirelessDeviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateWirelessDeviceFromMulticastGroup operation.
     * @callback module:api/DefaultApi~disassociateWirelessDeviceFromMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a wireless device from a multicast group.
     * @param {String} id 
     * @param {String} wirelessDeviceId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateWirelessDeviceFromMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateWirelessDeviceFromMulticastGroup(id, wirelessDeviceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disassociateWirelessDeviceFromMulticastGroup");
      }
      // verify the required parameter 'wirelessDeviceId' is set
      if (wirelessDeviceId === undefined || wirelessDeviceId === null) {
        throw new Error("Missing the required parameter 'wirelessDeviceId' when calling disassociateWirelessDeviceFromMulticastGroup");
      }

      let pathParams = {
        'Id': id,
        'WirelessDeviceId': wirelessDeviceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}/wireless-devices/{WirelessDeviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateWirelessDeviceFromThing operation.
     * @callback module:api/DefaultApi~disassociateWirelessDeviceFromThingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a wireless device from its currently associated thing.
     * @param {String} id The ID of the resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateWirelessDeviceFromThingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateWirelessDeviceFromThing(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disassociateWirelessDeviceFromThing");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}/thing', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateWirelessGatewayFromCertificate operation.
     * @callback module:api/DefaultApi~disassociateWirelessGatewayFromCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a wireless gateway from its currently associated certificate.
     * @param {String} id The ID of the resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateWirelessGatewayFromCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateWirelessGatewayFromCertificate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disassociateWirelessGatewayFromCertificate");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/certificate', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateWirelessGatewayFromThing operation.
     * @callback module:api/DefaultApi~disassociateWirelessGatewayFromThingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a wireless gateway from its currently associated thing.
     * @param {String} id The ID of the resource to update.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateWirelessGatewayFromThingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateWirelessGatewayFromThing(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disassociateWirelessGatewayFromThing");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/thing', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDestination operation.
     * @callback module:api/DefaultApi~getDestinationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDestinationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a destination.
     * @param {String} name The name of the resource to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDestinationResponse}
     */
    getDestination(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getDestination");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDestinationResponse;
      return this.apiClient.callApi(
        '/destinations/{Name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceProfile operation.
     * @callback module:api/DefaultApi~getDeviceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a device profile.
     * @param {String} id The ID of the resource to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeviceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceProfileResponse}
     */
    getDeviceProfile(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDeviceProfile");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceProfileResponse;
      return this.apiClient.callApi(
        '/device-profiles/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventConfigurationByResourceTypes operation.
     * @callback module:api/DefaultApi~getEventConfigurationByResourceTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEventConfigurationByResourceTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the event configuration based on resource types.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEventConfigurationByResourceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEventConfigurationByResourceTypesResponse}
     */
    getEventConfigurationByResourceTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEventConfigurationByResourceTypesResponse;
      return this.apiClient.callApi(
        '/event-configurations-resource-types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFuotaTask operation.
     * @callback module:api/DefaultApi~getFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFuotaTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a FUOTA task.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFuotaTaskResponse}
     */
    getFuotaTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFuotaTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFuotaTaskResponse;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogLevelsByResourceTypes operation.
     * @callback module:api/DefaultApi~getLogLevelsByResourceTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLogLevelsByResourceTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current default log levels or log levels by resource types. Based on resource types, log levels can be for wireless device log options or wireless gateway log options.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLogLevelsByResourceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLogLevelsByResourceTypesResponse}
     */
    getLogLevelsByResourceTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLogLevelsByResourceTypesResponse;
      return this.apiClient.callApi(
        '/log-levels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMulticastGroup operation.
     * @callback module:api/DefaultApi~getMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMulticastGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a multicast group.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMulticastGroupResponse}
     */
    getMulticastGroup(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMulticastGroup");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMulticastGroupResponse;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMulticastGroupSession operation.
     * @callback module:api/DefaultApi~getMulticastGroupSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMulticastGroupSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a multicast group session.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMulticastGroupSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMulticastGroupSessionResponse}
     */
    getMulticastGroupSession(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMulticastGroupSession");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMulticastGroupSessionResponse;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}/session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAnalyzerConfiguration operation.
     * @callback module:api/DefaultApi~getNetworkAnalyzerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkAnalyzerConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get network analyzer configuration.
     * @param {String} configurationName 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getNetworkAnalyzerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkAnalyzerConfigurationResponse}
     */
    getNetworkAnalyzerConfiguration(configurationName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getNetworkAnalyzerConfiguration");
      }

      let pathParams = {
        'ConfigurationName': configurationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkAnalyzerConfigurationResponse;
      return this.apiClient.callApi(
        '/network-analyzer-configurations/{ConfigurationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPartnerAccount operation.
     * @callback module:api/DefaultApi~getPartnerAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPartnerAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, returns all partner accounts.
     * @param {String} partnerAccountId The partner account ID to disassociate from the AWS account.
     * @param {module:model/String} partnerType The partner type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPartnerAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPartnerAccountResponse}
     */
    getPartnerAccount(partnerAccountId, partnerType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'partnerAccountId' is set
      if (partnerAccountId === undefined || partnerAccountId === null) {
        throw new Error("Missing the required parameter 'partnerAccountId' when calling getPartnerAccount");
      }
      // verify the required parameter 'partnerType' is set
      if (partnerType === undefined || partnerType === null) {
        throw new Error("Missing the required parameter 'partnerType' when calling getPartnerAccount");
      }

      let pathParams = {
        'PartnerAccountId': partnerAccountId
      };
      let queryParams = {
        'partnerType': partnerType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPartnerAccountResponse;
      return this.apiClient.callApi(
        '/partner-accounts/{PartnerAccountId}#partnerType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPosition operation.
     * @callback module:api/DefaultApi~getPositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Get the position information for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>
     * @param {String} resourceIdentifier Resource identifier used to retrieve the position information.
     * @param {module:model/String} resourceType Resource type of the resource for which position information is retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPositionResponse}
     */
    getPosition(resourceIdentifier, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling getPosition");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getPosition");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPositionResponse;
      return this.apiClient.callApi(
        '/positions/{ResourceIdentifier}#resourceType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPositionConfiguration operation.
     * @callback module:api/DefaultApi~getPositionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPositionConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Get position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position configuration should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>
     * @param {String} resourceIdentifier Resource identifier used in a position configuration.
     * @param {module:model/String} resourceType Resource type of the resource for which position configuration is retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPositionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPositionConfigurationResponse}
     */
    getPositionConfiguration(resourceIdentifier, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling getPositionConfiguration");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getPositionConfiguration");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPositionConfigurationResponse;
      return this.apiClient.callApi(
        '/position-configurations/{ResourceIdentifier}#resourceType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPositionEstimate operation.
     * @callback module:api/DefaultApi~getPositionEstimateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPositionEstimateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get estimated position information as a payload in GeoJSON format. The payload measurement data is resolved using solvers that are provided by third-party vendors.
     * @param {module:model/GetPositionEstimateRequest} getPositionEstimateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPositionEstimateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPositionEstimateResponse}
     */
    getPositionEstimate(getPositionEstimateRequest, opts, callback) {
      opts = opts || {};
      let postBody = getPositionEstimateRequest;
      // verify the required parameter 'getPositionEstimateRequest' is set
      if (getPositionEstimateRequest === undefined || getPositionEstimateRequest === null) {
        throw new Error("Missing the required parameter 'getPositionEstimateRequest' when calling getPositionEstimate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPositionEstimateResponse;
      return this.apiClient.callApi(
        '/position-estimate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceEventConfiguration operation.
     * @callback module:api/DefaultApi~getResourceEventConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourceEventConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the event configuration for a particular resource identifier.
     * @param {String} identifier Resource identifier to opt in for event messaging.
     * @param {module:model/String} identifierType Identifier type of the particular resource identifier for event configuration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [partnerType] Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.
     * @param {module:api/DefaultApi~getResourceEventConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourceEventConfigurationResponse}
     */
    getResourceEventConfiguration(identifier, identifierType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getResourceEventConfiguration");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getResourceEventConfiguration");
      }

      let pathParams = {
        'Identifier': identifier
      };
      let queryParams = {
        'identifierType': identifierType,
        'partnerType': opts['partnerType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResourceEventConfigurationResponse;
      return this.apiClient.callApi(
        '/event-configurations/{Identifier}#identifierType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceLogLevel operation.
     * @callback module:api/DefaultApi~getResourceLogLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourceLogLevelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.
     * @param {String} resourceIdentifier 
     * @param {String} resourceType The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResourceLogLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourceLogLevelResponse}
     */
    getResourceLogLevel(resourceIdentifier, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling getResourceLogLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getResourceLogLevel");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResourceLogLevelResponse;
      return this.apiClient.callApi(
        '/log-levels/{ResourceIdentifier}#resourceType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourcePosition operation.
     * @callback module:api/DefaultApi~getResourcePositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourcePositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the position information for a given wireless device or a wireless gateway resource. The position information uses the <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\"> World Geodetic System (WGS84)</a>.
     * @param {String} resourceIdentifier The identifier of the resource for which position information is retrieved. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.
     * @param {module:model/String} resourceType The type of resource for which position information is retrieved, which can be a wireless device or a wireless gateway.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResourcePositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourcePositionResponse}
     */
    getResourcePosition(resourceIdentifier, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling getResourcePosition");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling getResourcePosition");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResourcePositionResponse;
      return this.apiClient.callApi(
        '/resource-positions/{ResourceIdentifier}#resourceType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceEndpoint operation.
     * @callback module:api/DefaultApi~getServiceEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [serviceType] The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.
     * @param {module:api/DefaultApi~getServiceEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceEndpointResponse}
     */
    getServiceEndpoint(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'serviceType': opts['serviceType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceEndpointResponse;
      return this.apiClient.callApi(
        '/service-endpoint', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceProfile operation.
     * @callback module:api/DefaultApi~getServiceProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a service profile.
     * @param {String} id The ID of the resource to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServiceProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceProfileResponse}
     */
    getServiceProfile(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getServiceProfile");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetServiceProfileResponse;
      return this.apiClient.callApi(
        '/service-profiles/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessDevice operation.
     * @callback module:api/DefaultApi~getWirelessDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a wireless device.
     * @param {String} identifier The identifier of the wireless device to get.
     * @param {module:model/String} identifierType The type of identifier used in <code>identifier</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessDeviceResponse}
     */
    getWirelessDevice(identifier, identifierType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getWirelessDevice");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getWirelessDevice");
      }

      let pathParams = {
        'Identifier': identifier
      };
      let queryParams = {
        'identifierType': identifierType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessDeviceResponse;
      return this.apiClient.callApi(
        '/wireless-devices/{Identifier}#identifierType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessDeviceImportTask operation.
     * @callback module:api/DefaultApi~getWirelessDeviceImportTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessDeviceImportTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about an import task and count of device onboarding summary information for the import task.
     * @param {String} id The identifier of the import task for which information is requested.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessDeviceImportTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessDeviceImportTaskResponse}
     */
    getWirelessDeviceImportTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWirelessDeviceImportTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessDeviceImportTaskResponse;
      return this.apiClient.callApi(
        '/wireless_device_import_task/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessDeviceStatistics operation.
     * @callback module:api/DefaultApi~getWirelessDeviceStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessDeviceStatisticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets operating information about a wireless device.
     * @param {String} id The ID of the wireless device for which to get the data.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessDeviceStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessDeviceStatisticsResponse}
     */
    getWirelessDeviceStatistics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWirelessDeviceStatistics");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessDeviceStatisticsResponse;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessGateway operation.
     * @callback module:api/DefaultApi~getWirelessGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessGatewayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a wireless gateway.
     * @param {String} identifier The identifier of the wireless gateway to get.
     * @param {module:model/String} identifierType The type of identifier used in <code>identifier</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessGatewayResponse}
     */
    getWirelessGateway(identifier, identifierType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getWirelessGateway");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling getWirelessGateway");
      }

      let pathParams = {
        'Identifier': identifier
      };
      let queryParams = {
        'identifierType': identifierType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessGatewayResponse;
      return this.apiClient.callApi(
        '/wireless-gateways/{Identifier}#identifierType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessGatewayCertificate operation.
     * @callback module:api/DefaultApi~getWirelessGatewayCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessGatewayCertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the ID of the certificate that is currently associated with a wireless gateway.
     * @param {String} id The ID of the resource to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessGatewayCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessGatewayCertificateResponse}
     */
    getWirelessGatewayCertificate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWirelessGatewayCertificate");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessGatewayCertificateResponse;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/certificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessGatewayFirmwareInformation operation.
     * @callback module:api/DefaultApi~getWirelessGatewayFirmwareInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessGatewayFirmwareInformationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the firmware version and other information about a wireless gateway.
     * @param {String} id The ID of the resource to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessGatewayFirmwareInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessGatewayFirmwareInformationResponse}
     */
    getWirelessGatewayFirmwareInformation(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWirelessGatewayFirmwareInformation");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessGatewayFirmwareInformationResponse;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/firmware-information', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessGatewayStatistics operation.
     * @callback module:api/DefaultApi~getWirelessGatewayStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessGatewayStatisticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets operating information about a wireless gateway.
     * @param {String} id The ID of the wireless gateway for which to get the data.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessGatewayStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessGatewayStatisticsResponse}
     */
    getWirelessGatewayStatistics(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWirelessGatewayStatistics");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessGatewayStatisticsResponse;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessGatewayTask operation.
     * @callback module:api/DefaultApi~getWirelessGatewayTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessGatewayTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a wireless gateway task.
     * @param {String} id The ID of the resource to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessGatewayTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessGatewayTaskResponse}
     */
    getWirelessGatewayTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWirelessGatewayTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessGatewayTaskResponse;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWirelessGatewayTaskDefinition operation.
     * @callback module:api/DefaultApi~getWirelessGatewayTaskDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWirelessGatewayTaskDefinitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a wireless gateway task definition.
     * @param {String} id The ID of the resource to get.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWirelessGatewayTaskDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWirelessGatewayTaskDefinitionResponse}
     */
    getWirelessGatewayTaskDefinition(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWirelessGatewayTaskDefinition");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWirelessGatewayTaskDefinitionResponse;
      return this.apiClient.callApi(
        '/wireless-gateway-task-definitions/{Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDestinations operation.
     * @callback module:api/DefaultApi~listDestinationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDestinationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the destinations registered to your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return in this operation.
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listDestinationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDestinationsResponse}
     */
    listDestinations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDestinationsResponse;
      return this.apiClient.callApi(
        '/destinations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeviceProfiles operation.
     * @callback module:api/DefaultApi~listDeviceProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeviceProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the device profiles registered to your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {Number} [maxResults] The maximum number of results to return in this operation.
     * @param {module:model/String} [deviceProfileType] A filter to list only device profiles that use this type, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listDeviceProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeviceProfilesResponse}
     */
    listDeviceProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'deviceProfileType': opts['deviceProfileType'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDeviceProfilesResponse;
      return this.apiClient.callApi(
        '/device-profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevicesForWirelessDeviceImportTask operation.
     * @callback module:api/DefaultApi~listDevicesForWirelessDeviceImportTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicesForWirelessDeviceImportTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Sidewalk devices in an import task and their onboarding status.
     * @param {String} id The identifier of the import task for which wireless devices are listed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
     * @param {module:model/String} [status] The status of the devices in the import task.
     * @param {module:api/DefaultApi~listDevicesForWirelessDeviceImportTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicesForWirelessDeviceImportTaskResponse}
     */
    listDevicesForWirelessDeviceImportTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listDevicesForWirelessDeviceImportTask");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDevicesForWirelessDeviceImportTaskResponse;
      return this.apiClient.callApi(
        '/wireless_device_import_task#id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEventConfigurations operation.
     * @callback module:api/DefaultApi~listEventConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEventConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List event configurations where at least one event topic has been enabled.
     * @param {module:model/String} resourceType Resource type to filter event configurations.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {module:api/DefaultApi~listEventConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEventConfigurationsResponse}
     */
    listEventConfigurations(resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling listEventConfigurations");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceType': resourceType,
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEventConfigurationsResponse;
      return this.apiClient.callApi(
        '/event-configurations#resourceType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFuotaTasks operation.
     * @callback module:api/DefaultApi~listFuotaTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFuotaTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the FUOTA tasks registered to your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {Number} [maxResults] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listFuotaTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFuotaTasksResponse}
     */
    listFuotaTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFuotaTasksResponse;
      return this.apiClient.callApi(
        '/fuota-tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMulticastGroups operation.
     * @callback module:api/DefaultApi~listMulticastGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMulticastGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the multicast groups registered to your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {Number} [maxResults] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listMulticastGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMulticastGroupsResponse}
     */
    listMulticastGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMulticastGroupsResponse;
      return this.apiClient.callApi(
        '/multicast-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMulticastGroupsByFuotaTask operation.
     * @callback module:api/DefaultApi~listMulticastGroupsByFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMulticastGroupsByFuotaTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all multicast groups associated with a fuota task.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {Number} [maxResults] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listMulticastGroupsByFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMulticastGroupsByFuotaTaskResponse}
     */
    listMulticastGroupsByFuotaTask(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listMulticastGroupsByFuotaTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMulticastGroupsByFuotaTaskResponse;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}/multicast-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkAnalyzerConfigurations operation.
     * @callback module:api/DefaultApi~listNetworkAnalyzerConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNetworkAnalyzerConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the network analyzer configurations.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listNetworkAnalyzerConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNetworkAnalyzerConfigurationsResponse}
     */
    listNetworkAnalyzerConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListNetworkAnalyzerConfigurationsResponse;
      return this.apiClient.callApi(
        '/network-analyzer-configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPartnerAccounts operation.
     * @callback module:api/DefaultApi~listPartnerAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPartnerAccountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the partner accounts associated with your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {Number} [maxResults] The maximum number of results to return in this operation.
     * @param {module:api/DefaultApi~listPartnerAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPartnerAccountsResponse}
     */
    listPartnerAccounts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPartnerAccountsResponse;
      return this.apiClient.callApi(
        '/partner-accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPositionConfigurations operation.
     * @callback module:api/DefaultApi~listPositionConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPositionConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List position configurations for a given resource, such as positioning solvers.</p> <important> <p>This action is no longer supported. Calls to retrieve position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [resourceType] Resource type for which position configurations are listed.
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listPositionConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPositionConfigurationsResponse}
     */
    listPositionConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'resourceType': opts['resourceType'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPositionConfigurationsResponse;
      return this.apiClient.callApi(
        '/position-configurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listQueuedMessages operation.
     * @callback module:api/DefaultApi~listQueuedMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListQueuedMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List queued messages in the downlink queue.
     * @param {String} id The ID of a given wireless device which the downlink message packets are being sent.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {Number} [maxResults] The maximum number of results to return in this operation.
     * @param {module:model/String} [wirelessDeviceType] The wireless device type, whic can be either Sidewalk or LoRaWAN.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listQueuedMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListQueuedMessagesResponse}
     */
    listQueuedMessages(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listQueuedMessages");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'WirelessDeviceType': opts['wirelessDeviceType'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListQueuedMessagesResponse;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceProfiles operation.
     * @callback module:api/DefaultApi~listServiceProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceProfilesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the service profiles registered to your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {Number} [maxResults] The maximum number of results to return in this operation.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listServiceProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceProfilesResponse}
     */
    listServiceProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListServiceProfilesResponse;
      return this.apiClient.callApi(
        '/service-profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags (metadata) you have assigned to the resource.
     * @param {String} resourceArn The ARN of the resource for which you want to list tags.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags#resourceArn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWirelessDeviceImportTasks operation.
     * @callback module:api/DefaultApi~listWirelessDeviceImportTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWirelessDeviceImportTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List wireless devices that have been added to an import task.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
     * @param {module:api/DefaultApi~listWirelessDeviceImportTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWirelessDeviceImportTasksResponse}
     */
    listWirelessDeviceImportTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWirelessDeviceImportTasksResponse;
      return this.apiClient.callApi(
        '/wireless_device_import_tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWirelessDevices operation.
     * @callback module:api/DefaultApi~listWirelessDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWirelessDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the wireless devices registered to your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return in this operation.
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {String} [destinationName] A filter to list only the wireless devices that use this destination.
     * @param {String} [deviceProfileId] A filter to list only the wireless devices that use this device profile.
     * @param {String} [serviceProfileId] A filter to list only the wireless devices that use this service profile.
     * @param {module:model/String} [wirelessDeviceType] A filter to list only the wireless devices that use this wireless device type.
     * @param {String} [fuotaTaskId] 
     * @param {String} [multicastGroupId] 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listWirelessDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWirelessDevicesResponse}
     */
    listWirelessDevices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'destinationName': opts['destinationName'],
        'deviceProfileId': opts['deviceProfileId'],
        'serviceProfileId': opts['serviceProfileId'],
        'wirelessDeviceType': opts['wirelessDeviceType'],
        'fuotaTaskId': opts['fuotaTaskId'],
        'multicastGroupId': opts['multicastGroupId'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWirelessDevicesResponse;
      return this.apiClient.callApi(
        '/wireless-devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWirelessGatewayTaskDefinitions operation.
     * @callback module:api/DefaultApi~listWirelessGatewayTaskDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWirelessGatewayTaskDefinitionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the wireless gateway tasks definitions registered to your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return in this operation.
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {module:model/String} [taskDefinitionType] A filter to list only the wireless gateway task definitions that use this task definition type.
     * @param {module:api/DefaultApi~listWirelessGatewayTaskDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWirelessGatewayTaskDefinitionsResponse}
     */
    listWirelessGatewayTaskDefinitions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'taskDefinitionType': opts['taskDefinitionType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWirelessGatewayTaskDefinitionsResponse;
      return this.apiClient.callApi(
        '/wireless-gateway-task-definitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWirelessGateways operation.
     * @callback module:api/DefaultApi~listWirelessGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWirelessGatewaysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the wireless gateways registered to your AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
     * @param {Number} [maxResults] The maximum number of results to return in this operation.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listWirelessGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWirelessGatewaysResponse}
     */
    listWirelessGateways(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWirelessGatewaysResponse;
      return this.apiClient.callApi(
        '/wireless-gateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPositionConfiguration operation.
     * @callback module:api/DefaultApi~putPositionConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Put position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to update the position configuration should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\">UpdateResourcePosition</a> API operation instead.</p> </important>
     * @param {String} resourceIdentifier Resource identifier used to update the position configuration.
     * @param {module:model/String} resourceType Resource type of the resource for which you want to update the position configuration.
     * @param {module:model/PutPositionConfigurationRequest} putPositionConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putPositionConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putPositionConfiguration(resourceIdentifier, resourceType, putPositionConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putPositionConfigurationRequest;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling putPositionConfiguration");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling putPositionConfiguration");
      }
      // verify the required parameter 'putPositionConfigurationRequest' is set
      if (putPositionConfigurationRequest === undefined || putPositionConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putPositionConfigurationRequest' when calling putPositionConfiguration");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/position-configurations/{ResourceIdentifier}#resourceType', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResourceLogLevel operation.
     * @callback module:api/DefaultApi~putResourceLogLevelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway or a wireless device. A limit of 200 log level override can be set per account.
     * @param {String} resourceIdentifier 
     * @param {String} resourceType The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.
     * @param {module:model/PutResourceLogLevelRequest} putResourceLogLevelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putResourceLogLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putResourceLogLevel(resourceIdentifier, resourceType, putResourceLogLevelRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResourceLogLevelRequest;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling putResourceLogLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling putResourceLogLevel");
      }
      // verify the required parameter 'putResourceLogLevelRequest' is set
      if (putResourceLogLevelRequest === undefined || putResourceLogLevelRequest === null) {
        throw new Error("Missing the required parameter 'putResourceLogLevelRequest' when calling putResourceLogLevel");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/log-levels/{ResourceIdentifier}#resourceType', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetAllResourceLogLevels operation.
     * @callback module:api/DefaultApi~resetAllResourceLogLevelsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the log-level overrides for all resources; both wireless devices and wireless gateways.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resetAllResourceLogLevelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resetAllResourceLogLevels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/log-levels', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetResourceLogLevel operation.
     * @callback module:api/DefaultApi~resetResourceLogLevelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.
     * @param {String} resourceIdentifier 
     * @param {String} resourceType The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resetResourceLogLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resetResourceLogLevel(resourceIdentifier, resourceType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling resetResourceLogLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling resetResourceLogLevel");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/log-levels/{ResourceIdentifier}#resourceType', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDataToMulticastGroup operation.
     * @callback module:api/DefaultApi~sendDataToMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendDataToMulticastGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends the specified data to a multicast group.
     * @param {String} id 
     * @param {module:model/SendDataToMulticastGroupRequest} sendDataToMulticastGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendDataToMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendDataToMulticastGroupResponse}
     */
    sendDataToMulticastGroup(id, sendDataToMulticastGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendDataToMulticastGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendDataToMulticastGroup");
      }
      // verify the required parameter 'sendDataToMulticastGroupRequest' is set
      if (sendDataToMulticastGroupRequest === undefined || sendDataToMulticastGroupRequest === null) {
        throw new Error("Missing the required parameter 'sendDataToMulticastGroupRequest' when calling sendDataToMulticastGroup");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendDataToMulticastGroupResponse;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDataToWirelessDevice operation.
     * @callback module:api/DefaultApi~sendDataToWirelessDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendDataToWirelessDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a decrypted application data frame to a device.
     * @param {String} id The ID of the wireless device to receive the data.
     * @param {module:model/SendDataToWirelessDeviceRequest} sendDataToWirelessDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendDataToWirelessDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendDataToWirelessDeviceResponse}
     */
    sendDataToWirelessDevice(id, sendDataToWirelessDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendDataToWirelessDeviceRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendDataToWirelessDevice");
      }
      // verify the required parameter 'sendDataToWirelessDeviceRequest' is set
      if (sendDataToWirelessDeviceRequest === undefined || sendDataToWirelessDeviceRequest === null) {
        throw new Error("Missing the required parameter 'sendDataToWirelessDeviceRequest' when calling sendDataToWirelessDevice");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendDataToWirelessDeviceResponse;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBulkAssociateWirelessDeviceWithMulticastGroup operation.
     * @callback module:api/DefaultApi~startBulkAssociateWirelessDeviceWithMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a bulk association of all qualifying wireless devices with a multicast group.
     * @param {String} id 
     * @param {module:model/StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest} startBulkDisassociateWirelessDeviceFromMulticastGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startBulkAssociateWirelessDeviceWithMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startBulkAssociateWirelessDeviceWithMulticastGroup(id, startBulkDisassociateWirelessDeviceFromMulticastGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = startBulkDisassociateWirelessDeviceFromMulticastGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startBulkAssociateWirelessDeviceWithMulticastGroup");
      }
      // verify the required parameter 'startBulkDisassociateWirelessDeviceFromMulticastGroupRequest' is set
      if (startBulkDisassociateWirelessDeviceFromMulticastGroupRequest === undefined || startBulkDisassociateWirelessDeviceFromMulticastGroupRequest === null) {
        throw new Error("Missing the required parameter 'startBulkDisassociateWirelessDeviceFromMulticastGroupRequest' when calling startBulkAssociateWirelessDeviceWithMulticastGroup");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}/bulk', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBulkDisassociateWirelessDeviceFromMulticastGroup operation.
     * @callback module:api/DefaultApi~startBulkDisassociateWirelessDeviceFromMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a bulk disassociatin of all qualifying wireless devices from a multicast group.
     * @param {String} id 
     * @param {module:model/StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest} startBulkDisassociateWirelessDeviceFromMulticastGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startBulkDisassociateWirelessDeviceFromMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startBulkDisassociateWirelessDeviceFromMulticastGroup(id, startBulkDisassociateWirelessDeviceFromMulticastGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = startBulkDisassociateWirelessDeviceFromMulticastGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startBulkDisassociateWirelessDeviceFromMulticastGroup");
      }
      // verify the required parameter 'startBulkDisassociateWirelessDeviceFromMulticastGroupRequest' is set
      if (startBulkDisassociateWirelessDeviceFromMulticastGroupRequest === undefined || startBulkDisassociateWirelessDeviceFromMulticastGroupRequest === null) {
        throw new Error("Missing the required parameter 'startBulkDisassociateWirelessDeviceFromMulticastGroupRequest' when calling startBulkDisassociateWirelessDeviceFromMulticastGroup");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startFuotaTask operation.
     * @callback module:api/DefaultApi~startFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a FUOTA task.
     * @param {String} id 
     * @param {module:model/StartFuotaTaskRequest} startFuotaTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startFuotaTask(id, startFuotaTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = startFuotaTaskRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startFuotaTask");
      }
      // verify the required parameter 'startFuotaTaskRequest' is set
      if (startFuotaTaskRequest === undefined || startFuotaTaskRequest === null) {
        throw new Error("Missing the required parameter 'startFuotaTaskRequest' when calling startFuotaTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startMulticastGroupSession operation.
     * @callback module:api/DefaultApi~startMulticastGroupSessionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a multicast group session.
     * @param {String} id 
     * @param {module:model/StartMulticastGroupSessionRequest} startMulticastGroupSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startMulticastGroupSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startMulticastGroupSession(id, startMulticastGroupSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = startMulticastGroupSessionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startMulticastGroupSession");
      }
      // verify the required parameter 'startMulticastGroupSessionRequest' is set
      if (startMulticastGroupSessionRequest === undefined || startMulticastGroupSessionRequest === null) {
        throw new Error("Missing the required parameter 'startMulticastGroupSessionRequest' when calling startMulticastGroupSession");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}/session', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSingleWirelessDeviceImportTask operation.
     * @callback module:api/DefaultApi~startSingleWirelessDeviceImportTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSingleWirelessDeviceImportTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start import task for a single wireless device.
     * @param {module:model/StartSingleWirelessDeviceImportTaskRequest} startSingleWirelessDeviceImportTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startSingleWirelessDeviceImportTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSingleWirelessDeviceImportTaskResponse}
     */
    startSingleWirelessDeviceImportTask(startSingleWirelessDeviceImportTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = startSingleWirelessDeviceImportTaskRequest;
      // verify the required parameter 'startSingleWirelessDeviceImportTaskRequest' is set
      if (startSingleWirelessDeviceImportTaskRequest === undefined || startSingleWirelessDeviceImportTaskRequest === null) {
        throw new Error("Missing the required parameter 'startSingleWirelessDeviceImportTaskRequest' when calling startSingleWirelessDeviceImportTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartSingleWirelessDeviceImportTaskResponse;
      return this.apiClient.callApi(
        '/wireless_single_device_import_task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startWirelessDeviceImportTask operation.
     * @callback module:api/DefaultApi~startWirelessDeviceImportTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartWirelessDeviceImportTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start import task for provisioning Sidewalk devices in bulk using an S3 CSV file.
     * @param {module:model/StartWirelessDeviceImportTaskRequest} startWirelessDeviceImportTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startWirelessDeviceImportTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartWirelessDeviceImportTaskResponse}
     */
    startWirelessDeviceImportTask(startWirelessDeviceImportTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = startWirelessDeviceImportTaskRequest;
      // verify the required parameter 'startWirelessDeviceImportTaskRequest' is set
      if (startWirelessDeviceImportTaskRequest === undefined || startWirelessDeviceImportTaskRequest === null) {
        throw new Error("Missing the required parameter 'startWirelessDeviceImportTaskRequest' when calling startWirelessDeviceImportTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartWirelessDeviceImportTaskResponse;
      return this.apiClient.callApi(
        '/wireless_device_import_task', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a tag to a resource.
     * @param {String} resourceArn The ARN of the resource to add tags to.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags#resourceArn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testWirelessDevice operation.
     * @callback module:api/DefaultApi~testWirelessDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestWirelessDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulates a provisioned device by sending an uplink data payload of <code>Hello</code>.
     * @param {String} id The ID of the wireless device to test.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~testWirelessDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestWirelessDeviceResponse}
     */
    testWirelessDevice(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testWirelessDevice");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestWirelessDeviceResponse;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from a resource.
     * @param {String} resourceArn The ARN of the resource to remove tags from.
     * @param {Array.<String>} tagKeys A list of the keys of the tags to remove from the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceArn': resourceArn,
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags#resourceArn&tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDestination operation.
     * @callback module:api/DefaultApi~updateDestinationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates properties of a destination.
     * @param {String} name The new name of the resource.
     * @param {module:model/UpdateDestinationRequest} updateDestinationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDestinationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDestination(name, updateDestinationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDestinationRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateDestination");
      }
      // verify the required parameter 'updateDestinationRequest' is set
      if (updateDestinationRequest === undefined || updateDestinationRequest === null) {
        throw new Error("Missing the required parameter 'updateDestinationRequest' when calling updateDestination");
      }

      let pathParams = {
        'Name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/destinations/{Name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEventConfigurationByResourceTypes operation.
     * @callback module:api/DefaultApi~updateEventConfigurationByResourceTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the event configuration based on resource types.
     * @param {module:model/UpdateEventConfigurationByResourceTypesRequest} updateEventConfigurationByResourceTypesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEventConfigurationByResourceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateEventConfigurationByResourceTypes(updateEventConfigurationByResourceTypesRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEventConfigurationByResourceTypesRequest;
      // verify the required parameter 'updateEventConfigurationByResourceTypesRequest' is set
      if (updateEventConfigurationByResourceTypesRequest === undefined || updateEventConfigurationByResourceTypesRequest === null) {
        throw new Error("Missing the required parameter 'updateEventConfigurationByResourceTypesRequest' when calling updateEventConfigurationByResourceTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/event-configurations-resource-types', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFuotaTask operation.
     * @callback module:api/DefaultApi~updateFuotaTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates properties of a FUOTA task.
     * @param {String} id 
     * @param {module:model/UpdateFuotaTaskRequest} updateFuotaTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFuotaTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateFuotaTask(id, updateFuotaTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFuotaTaskRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateFuotaTask");
      }
      // verify the required parameter 'updateFuotaTaskRequest' is set
      if (updateFuotaTaskRequest === undefined || updateFuotaTaskRequest === null) {
        throw new Error("Missing the required parameter 'updateFuotaTaskRequest' when calling updateFuotaTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/fuota-tasks/{Id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLogLevelsByResourceTypes operation.
     * @callback module:api/DefaultApi~updateLogLevelsByResourceTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set default log level, or log levels by resource types. This can be for wireless device log options or wireless gateways log options and is used to control the log messages that'll be displayed in CloudWatch.
     * @param {module:model/UpdateLogLevelsByResourceTypesRequest} updateLogLevelsByResourceTypesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLogLevelsByResourceTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLogLevelsByResourceTypes(updateLogLevelsByResourceTypesRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLogLevelsByResourceTypesRequest;
      // verify the required parameter 'updateLogLevelsByResourceTypesRequest' is set
      if (updateLogLevelsByResourceTypesRequest === undefined || updateLogLevelsByResourceTypesRequest === null) {
        throw new Error("Missing the required parameter 'updateLogLevelsByResourceTypesRequest' when calling updateLogLevelsByResourceTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/log-levels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMulticastGroup operation.
     * @callback module:api/DefaultApi~updateMulticastGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates properties of a multicast group session.
     * @param {String} id 
     * @param {module:model/UpdateMulticastGroupRequest} updateMulticastGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMulticastGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateMulticastGroup(id, updateMulticastGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMulticastGroupRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMulticastGroup");
      }
      // verify the required parameter 'updateMulticastGroupRequest' is set
      if (updateMulticastGroupRequest === undefined || updateMulticastGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateMulticastGroupRequest' when calling updateMulticastGroup");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/multicast-groups/{Id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAnalyzerConfiguration operation.
     * @callback module:api/DefaultApi~updateNetworkAnalyzerConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update network analyzer configuration.
     * @param {String} configurationName 
     * @param {module:model/UpdateNetworkAnalyzerConfigurationRequest} updateNetworkAnalyzerConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateNetworkAnalyzerConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateNetworkAnalyzerConfiguration(configurationName, updateNetworkAnalyzerConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateNetworkAnalyzerConfigurationRequest;
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling updateNetworkAnalyzerConfiguration");
      }
      // verify the required parameter 'updateNetworkAnalyzerConfigurationRequest' is set
      if (updateNetworkAnalyzerConfigurationRequest === undefined || updateNetworkAnalyzerConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkAnalyzerConfigurationRequest' when calling updateNetworkAnalyzerConfiguration");
      }

      let pathParams = {
        'ConfigurationName': configurationName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/network-analyzer-configurations/{ConfigurationName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePartnerAccount operation.
     * @callback module:api/DefaultApi~updatePartnerAccountCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates properties of a partner account.
     * @param {String} partnerAccountId The ID of the partner account to update.
     * @param {module:model/String} partnerType The partner type.
     * @param {module:model/UpdatePartnerAccountRequest} updatePartnerAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePartnerAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updatePartnerAccount(partnerAccountId, partnerType, updatePartnerAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePartnerAccountRequest;
      // verify the required parameter 'partnerAccountId' is set
      if (partnerAccountId === undefined || partnerAccountId === null) {
        throw new Error("Missing the required parameter 'partnerAccountId' when calling updatePartnerAccount");
      }
      // verify the required parameter 'partnerType' is set
      if (partnerType === undefined || partnerType === null) {
        throw new Error("Missing the required parameter 'partnerType' when calling updatePartnerAccount");
      }
      // verify the required parameter 'updatePartnerAccountRequest' is set
      if (updatePartnerAccountRequest === undefined || updatePartnerAccountRequest === null) {
        throw new Error("Missing the required parameter 'updatePartnerAccountRequest' when calling updatePartnerAccount");
      }

      let pathParams = {
        'PartnerAccountId': partnerAccountId
      };
      let queryParams = {
        'partnerType': partnerType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/partner-accounts/{PartnerAccountId}#partnerType', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePosition operation.
     * @callback module:api/DefaultApi~updatePositionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update the position information of a resource.</p> <important> <p>This action is no longer supported. Calls to update the position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\">UpdateResourcePosition</a> API operation instead.</p> </important>
     * @param {String} resourceIdentifier Resource identifier of the resource for which position is updated.
     * @param {module:model/String} resourceType Resource type of the resource for which position is updated.
     * @param {module:model/UpdatePositionRequest} updatePositionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updatePosition(resourceIdentifier, resourceType, updatePositionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePositionRequest;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling updatePosition");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling updatePosition");
      }
      // verify the required parameter 'updatePositionRequest' is set
      if (updatePositionRequest === undefined || updatePositionRequest === null) {
        throw new Error("Missing the required parameter 'updatePositionRequest' when calling updatePosition");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/positions/{ResourceIdentifier}#resourceType', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResourceEventConfiguration operation.
     * @callback module:api/DefaultApi~updateResourceEventConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the event configuration for a particular resource identifier.
     * @param {String} identifier Resource identifier to opt in for event messaging.
     * @param {module:model/String} identifierType Identifier type of the particular resource identifier for event configuration.
     * @param {module:model/UpdateResourceEventConfigurationRequest} updateResourceEventConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [partnerType] Partner type of the resource if the identifier type is <code>PartnerAccountId</code> 
     * @param {module:api/DefaultApi~updateResourceEventConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateResourceEventConfiguration(identifier, identifierType, updateResourceEventConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResourceEventConfigurationRequest;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling updateResourceEventConfiguration");
      }
      // verify the required parameter 'identifierType' is set
      if (identifierType === undefined || identifierType === null) {
        throw new Error("Missing the required parameter 'identifierType' when calling updateResourceEventConfiguration");
      }
      // verify the required parameter 'updateResourceEventConfigurationRequest' is set
      if (updateResourceEventConfigurationRequest === undefined || updateResourceEventConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateResourceEventConfigurationRequest' when calling updateResourceEventConfiguration");
      }

      let pathParams = {
        'Identifier': identifier
      };
      let queryParams = {
        'identifierType': identifierType,
        'partnerType': opts['partnerType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/event-configurations/{Identifier}#identifierType', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResourcePosition operation.
     * @callback module:api/DefaultApi~updateResourcePositionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the position information of a given wireless device or a wireless gateway resource. The position coordinates are based on the <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\"> World Geodetic System (WGS84)</a>.
     * @param {String} resourceIdentifier The identifier of the resource for which position information is updated. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.
     * @param {module:model/String} resourceType The type of resource for which position information is updated, which can be a wireless device or a wireless gateway.
     * @param {module:model/UpdateResourcePositionRequest} updateResourcePositionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResourcePositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateResourcePosition(resourceIdentifier, resourceType, updateResourcePositionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResourcePositionRequest;
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling updateResourcePosition");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling updateResourcePosition");
      }
      // verify the required parameter 'updateResourcePositionRequest' is set
      if (updateResourcePositionRequest === undefined || updateResourcePositionRequest === null) {
        throw new Error("Missing the required parameter 'updateResourcePositionRequest' when calling updateResourcePosition");
      }

      let pathParams = {
        'ResourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'resourceType': resourceType
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resource-positions/{ResourceIdentifier}#resourceType', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWirelessDevice operation.
     * @callback module:api/DefaultApi~updateWirelessDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates properties of a wireless device.
     * @param {String} id The ID of the resource to update.
     * @param {module:model/UpdateWirelessDeviceRequest} updateWirelessDeviceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWirelessDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWirelessDevice(id, updateWirelessDeviceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWirelessDeviceRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWirelessDevice");
      }
      // verify the required parameter 'updateWirelessDeviceRequest' is set
      if (updateWirelessDeviceRequest === undefined || updateWirelessDeviceRequest === null) {
        throw new Error("Missing the required parameter 'updateWirelessDeviceRequest' when calling updateWirelessDevice");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-devices/{Id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWirelessDeviceImportTask operation.
     * @callback module:api/DefaultApi~updateWirelessDeviceImportTaskCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an import task to add more devices to the task.
     * @param {String} id The identifier of the import task to be updated.
     * @param {module:model/UpdateWirelessDeviceImportTaskRequest} updateWirelessDeviceImportTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWirelessDeviceImportTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWirelessDeviceImportTask(id, updateWirelessDeviceImportTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWirelessDeviceImportTaskRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWirelessDeviceImportTask");
      }
      // verify the required parameter 'updateWirelessDeviceImportTaskRequest' is set
      if (updateWirelessDeviceImportTaskRequest === undefined || updateWirelessDeviceImportTaskRequest === null) {
        throw new Error("Missing the required parameter 'updateWirelessDeviceImportTaskRequest' when calling updateWirelessDeviceImportTask");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless_device_import_task/{Id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWirelessGateway operation.
     * @callback module:api/DefaultApi~updateWirelessGatewayCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates properties of a wireless gateway.
     * @param {String} id The ID of the resource to update.
     * @param {module:model/UpdateWirelessGatewayRequest} updateWirelessGatewayRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWirelessGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateWirelessGateway(id, updateWirelessGatewayRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWirelessGatewayRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWirelessGateway");
      }
      // verify the required parameter 'updateWirelessGatewayRequest' is set
      if (updateWirelessGatewayRequest === undefined || updateWirelessGatewayRequest === null) {
        throw new Error("Missing the required parameter 'updateWirelessGatewayRequest' when calling updateWirelessGateway");
      }

      let pathParams = {
        'Id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/wireless-gateways/{Id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
