/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogLevel from './LogLevel';
import WirelessDeviceEvent from './WirelessDeviceEvent';

/**
 * The WirelessDeviceEventLogOption model module.
 * @module model/WirelessDeviceEventLogOption
 * @version 2020-11-22
 */
class WirelessDeviceEventLogOption {
    /**
     * Constructs a new <code>WirelessDeviceEventLogOption</code>.
     * &lt;p&gt;The log options for a wireless device event and can be used to set log levels for a specific wireless device event.&lt;/p&gt; &lt;p&gt;For a LoRaWAN device, possible events for a log messsage are: &lt;code&gt;Join&lt;/code&gt;, &lt;code&gt;Rejoin&lt;/code&gt;, &lt;code&gt;Downlink_Data&lt;/code&gt;, and &lt;code&gt;Uplink_Data&lt;/code&gt;. For a Sidewalk device, possible events for a log message are &lt;code&gt;Registration&lt;/code&gt;, &lt;code&gt;Downlink_Data&lt;/code&gt;, and &lt;code&gt;Uplink_Data&lt;/code&gt;.&lt;/p&gt;
     * @alias module:model/WirelessDeviceEventLogOption
     * @param event {module:model/WirelessDeviceEvent} 
     * @param logLevel {module:model/LogLevel} 
     */
    constructor(event, logLevel) { 
        
        WirelessDeviceEventLogOption.initialize(this, event, logLevel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, event, logLevel) { 
        obj['Event'] = event;
        obj['LogLevel'] = logLevel;
    }

    /**
     * Constructs a <code>WirelessDeviceEventLogOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WirelessDeviceEventLogOption} obj Optional instance to populate.
     * @return {module:model/WirelessDeviceEventLogOption} The populated <code>WirelessDeviceEventLogOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WirelessDeviceEventLogOption();

            if (data.hasOwnProperty('Event')) {
                obj['Event'] = WirelessDeviceEvent.constructFromObject(data['Event']);
            }
            if (data.hasOwnProperty('LogLevel')) {
                obj['LogLevel'] = LogLevel.constructFromObject(data['LogLevel']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WirelessDeviceEventLogOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WirelessDeviceEventLogOption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WirelessDeviceEventLogOption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

WirelessDeviceEventLogOption.RequiredProperties = ["Event", "LogLevel"];

/**
 * @member {module:model/WirelessDeviceEvent} Event
 */
WirelessDeviceEventLogOption.prototype['Event'] = undefined;

/**
 * @member {module:model/LogLevel} LogLevel
 */
WirelessDeviceEventLogOption.prototype['LogLevel'] = undefined;






export default WirelessDeviceEventLogOption;

