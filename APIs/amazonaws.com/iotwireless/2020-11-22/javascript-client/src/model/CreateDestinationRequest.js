/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tag from './Tag';

/**
 * The CreateDestinationRequest model module.
 * @module model/CreateDestinationRequest
 * @version 2020-11-22
 */
class CreateDestinationRequest {
    /**
     * Constructs a new <code>CreateDestinationRequest</code>.
     * @alias module:model/CreateDestinationRequest
     * @param name {String} The name of the new resource.
     * @param expressionType {module:model/CreateDestinationRequest.ExpressionTypeEnum} The type of value in <code>Expression</code>.
     * @param expression {String} The rule name or topic rule to send messages to.
     * @param roleArn {String} The ARN of the IAM Role that authorizes the destination.
     */
    constructor(name, expressionType, expression, roleArn) { 
        
        CreateDestinationRequest.initialize(this, name, expressionType, expression, roleArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, expressionType, expression, roleArn) { 
        obj['Name'] = name;
        obj['ExpressionType'] = expressionType;
        obj['Expression'] = expression;
        obj['RoleArn'] = roleArn;
    }

    /**
     * Constructs a <code>CreateDestinationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDestinationRequest} obj Optional instance to populate.
     * @return {module:model/CreateDestinationRequest} The populated <code>CreateDestinationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDestinationRequest();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ExpressionType')) {
                obj['ExpressionType'] = ApiClient.convertToType(data['ExpressionType'], 'String');
            }
            if (data.hasOwnProperty('Expression')) {
                obj['Expression'] = ApiClient.convertToType(data['Expression'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDestinationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDestinationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDestinationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ExpressionType'] && !(typeof data['ExpressionType'] === 'string' || data['ExpressionType'] instanceof String)) {
            throw new Error("Expected the field `ExpressionType` to be a primitive type in the JSON string but got " + data['ExpressionType']);
        }
        // ensure the json data is a string
        if (data['Expression'] && !(typeof data['Expression'] === 'string' || data['Expression'] instanceof String)) {
            throw new Error("Expected the field `Expression` to be a primitive type in the JSON string but got " + data['Expression']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['RoleArn'] && !(typeof data['RoleArn'] === 'string' || data['RoleArn'] instanceof String)) {
            throw new Error("Expected the field `RoleArn` to be a primitive type in the JSON string but got " + data['RoleArn']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ClientRequestToken'] && !(typeof data['ClientRequestToken'] === 'string' || data['ClientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got " + data['ClientRequestToken']);
        }

        return true;
    }


}

CreateDestinationRequest.RequiredProperties = ["Name", "ExpressionType", "Expression", "RoleArn"];

/**
 * The name of the new resource.
 * @member {String} Name
 */
CreateDestinationRequest.prototype['Name'] = undefined;

/**
 * The type of value in <code>Expression</code>.
 * @member {module:model/CreateDestinationRequest.ExpressionTypeEnum} ExpressionType
 */
CreateDestinationRequest.prototype['ExpressionType'] = undefined;

/**
 * The rule name or topic rule to send messages to.
 * @member {String} Expression
 */
CreateDestinationRequest.prototype['Expression'] = undefined;

/**
 * The description of the new resource.
 * @member {String} Description
 */
CreateDestinationRequest.prototype['Description'] = undefined;

/**
 * The ARN of the IAM Role that authorizes the destination.
 * @member {String} RoleArn
 */
CreateDestinationRequest.prototype['RoleArn'] = undefined;

/**
 * The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
 * @member {Array.<module:model/Tag>} Tags
 */
CreateDestinationRequest.prototype['Tags'] = undefined;

/**
 * Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
 * @member {String} ClientRequestToken
 */
CreateDestinationRequest.prototype['ClientRequestToken'] = undefined;





/**
 * Allowed values for the <code>ExpressionType</code> property.
 * @enum {String}
 * @readonly
 */
CreateDestinationRequest['ExpressionTypeEnum'] = {

    /**
     * value: "RuleName"
     * @const
     */
    "RuleName": "RuleName",

    /**
     * value: "MqttTopic"
     * @const
     */
    "MqttTopic": "MqttTopic"
};



export default CreateDestinationRequest;

