/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetPositionEstimateRequestCellTowers from './GetPositionEstimateRequestCellTowers';
import GetPositionEstimateRequestGnss from './GetPositionEstimateRequestGnss';
import GetPositionEstimateRequestIp from './GetPositionEstimateRequestIp';
import WiFiAccessPoint from './WiFiAccessPoint';

/**
 * The GetPositionEstimateRequest model module.
 * @module model/GetPositionEstimateRequest
 * @version 2020-11-22
 */
class GetPositionEstimateRequest {
    /**
     * Constructs a new <code>GetPositionEstimateRequest</code>.
     * @alias module:model/GetPositionEstimateRequest
     */
    constructor() { 
        
        GetPositionEstimateRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetPositionEstimateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetPositionEstimateRequest} obj Optional instance to populate.
     * @return {module:model/GetPositionEstimateRequest} The populated <code>GetPositionEstimateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetPositionEstimateRequest();

            if (data.hasOwnProperty('WiFiAccessPoints')) {
                obj['WiFiAccessPoints'] = ApiClient.convertToType(data['WiFiAccessPoints'], [WiFiAccessPoint]);
            }
            if (data.hasOwnProperty('CellTowers')) {
                obj['CellTowers'] = GetPositionEstimateRequestCellTowers.constructFromObject(data['CellTowers']);
            }
            if (data.hasOwnProperty('Ip')) {
                obj['Ip'] = GetPositionEstimateRequestIp.constructFromObject(data['Ip']);
            }
            if (data.hasOwnProperty('Gnss')) {
                obj['Gnss'] = GetPositionEstimateRequestGnss.constructFromObject(data['Gnss']);
            }
            if (data.hasOwnProperty('Timestamp')) {
                obj['Timestamp'] = ApiClient.convertToType(data['Timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetPositionEstimateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetPositionEstimateRequest</code>.
     */
    static validateJSON(data) {
        if (data['WiFiAccessPoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['WiFiAccessPoints'])) {
                throw new Error("Expected the field `WiFiAccessPoints` to be an array in the JSON data but got " + data['WiFiAccessPoints']);
            }
            // validate the optional field `WiFiAccessPoints` (array)
            for (const item of data['WiFiAccessPoints']) {
                WiFiAccessPoint.validateJSON(item);
            };
        }
        // validate the optional field `CellTowers`
        if (data['CellTowers']) { // data not null
          GetPositionEstimateRequestCellTowers.validateJSON(data['CellTowers']);
        }
        // validate the optional field `Ip`
        if (data['Ip']) { // data not null
          GetPositionEstimateRequestIp.validateJSON(data['Ip']);
        }
        // validate the optional field `Gnss`
        if (data['Gnss']) { // data not null
          GetPositionEstimateRequestGnss.validateJSON(data['Gnss']);
        }

        return true;
    }


}



/**
 * Retrieves an estimated device position by resolving WLAN measurement data. The position is resolved using HERE's Wi-Fi based solver.
 * @member {Array.<module:model/WiFiAccessPoint>} WiFiAccessPoints
 */
GetPositionEstimateRequest.prototype['WiFiAccessPoints'] = undefined;

/**
 * @member {module:model/GetPositionEstimateRequestCellTowers} CellTowers
 */
GetPositionEstimateRequest.prototype['CellTowers'] = undefined;

/**
 * @member {module:model/GetPositionEstimateRequestIp} Ip
 */
GetPositionEstimateRequest.prototype['Ip'] = undefined;

/**
 * @member {module:model/GetPositionEstimateRequestGnss} Gnss
 */
GetPositionEstimateRequest.prototype['Gnss'] = undefined;

/**
 * Optional information that specifies the time when the position information will be resolved. It uses the Unix timestamp format. If not specified, the time at which the request was received will be used.
 * @member {Date} Timestamp
 */
GetPositionEstimateRequest.prototype['Timestamp'] = undefined;






export default GetPositionEstimateRequest;

