/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN() {
    this->initializeModel();
}

OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::~OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN() {}

void OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::initializeModel() {

    m_update_signature_isSet = false;
    m_update_signature_isValid = false;

    m_sig_key_crc_isSet = false;
    m_sig_key_crc_isValid = false;

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_update_version_isSet = false;
    m_update_version_isValid = false;
}

void OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::fromJsonObject(QJsonObject json) {

    m_update_signature_isValid = ::OpenAPI::fromJsonValue(m_update_signature, json[QString("UpdateSignature")]);
    m_update_signature_isSet = !json[QString("UpdateSignature")].isNull() && m_update_signature_isValid;

    m_sig_key_crc_isValid = ::OpenAPI::fromJsonValue(m_sig_key_crc, json[QString("SigKeyCrc")]);
    m_sig_key_crc_isSet = !json[QString("SigKeyCrc")].isNull() && m_sig_key_crc_isValid;

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("CurrentVersion")]);
    m_current_version_isSet = !json[QString("CurrentVersion")].isNull() && m_current_version_isValid;

    m_update_version_isValid = ::OpenAPI::fromJsonValue(m_update_version, json[QString("UpdateVersion")]);
    m_update_version_isSet = !json[QString("UpdateVersion")].isNull() && m_update_version_isValid;
}

QString OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::asJsonObject() const {
    QJsonObject obj;
    if (m_update_signature_isSet) {
        obj.insert(QString("UpdateSignature"), ::OpenAPI::toJsonValue(m_update_signature));
    }
    if (m_sig_key_crc_isSet) {
        obj.insert(QString("SigKeyCrc"), ::OpenAPI::toJsonValue(m_sig_key_crc));
    }
    if (m_current_version.isSet()) {
        obj.insert(QString("CurrentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_update_version.isSet()) {
        obj.insert(QString("UpdateVersion"), ::OpenAPI::toJsonValue(m_update_version));
    }
    return obj;
}

QString OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::getUpdateSignature() const {
    return m_update_signature;
}
void OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::setUpdateSignature(const QString &update_signature) {
    m_update_signature = update_signature;
    m_update_signature_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::is_update_signature_Set() const{
    return m_update_signature_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::is_update_signature_Valid() const{
    return m_update_signature_isValid;
}

qint32 OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::getSigKeyCrc() const {
    return m_sig_key_crc;
}
void OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::setSigKeyCrc(const qint32 &sig_key_crc) {
    m_sig_key_crc = sig_key_crc;
    m_sig_key_crc_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::is_sig_key_crc_Set() const{
    return m_sig_key_crc_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::is_sig_key_crc_Valid() const{
    return m_sig_key_crc_isValid;
}

OAILoRaWANUpdateGatewayTaskCreate_CurrentVersion OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::getCurrentVersion() const {
    return m_current_version;
}
void OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::setCurrentVersion(const OAILoRaWANUpdateGatewayTaskCreate_CurrentVersion &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::is_current_version_Valid() const{
    return m_current_version_isValid;
}

OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::getUpdateVersion() const {
    return m_update_version;
}
void OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::setUpdateVersion(const OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion &update_version) {
    m_update_version = update_version;
    m_update_version_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::is_update_version_Set() const{
    return m_update_version_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::is_update_version_Valid() const{
    return m_update_version_isValid;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sig_key_crc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
