/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGsmObj_GsmLocalId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGsmObj_GsmLocalId::OAIGsmObj_GsmLocalId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGsmObj_GsmLocalId::OAIGsmObj_GsmLocalId() {
    this->initializeModel();
}

OAIGsmObj_GsmLocalId::~OAIGsmObj_GsmLocalId() {}

void OAIGsmObj_GsmLocalId::initializeModel() {

    m_bsic_isSet = false;
    m_bsic_isValid = false;

    m_bcch_isSet = false;
    m_bcch_isValid = false;
}

void OAIGsmObj_GsmLocalId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGsmObj_GsmLocalId::fromJsonObject(QJsonObject json) {

    m_bsic_isValid = ::OpenAPI::fromJsonValue(m_bsic, json[QString("Bsic")]);
    m_bsic_isSet = !json[QString("Bsic")].isNull() && m_bsic_isValid;

    m_bcch_isValid = ::OpenAPI::fromJsonValue(m_bcch, json[QString("Bcch")]);
    m_bcch_isSet = !json[QString("Bcch")].isNull() && m_bcch_isValid;
}

QString OAIGsmObj_GsmLocalId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGsmObj_GsmLocalId::asJsonObject() const {
    QJsonObject obj;
    if (m_bsic_isSet) {
        obj.insert(QString("Bsic"), ::OpenAPI::toJsonValue(m_bsic));
    }
    if (m_bcch_isSet) {
        obj.insert(QString("Bcch"), ::OpenAPI::toJsonValue(m_bcch));
    }
    return obj;
}

qint32 OAIGsmObj_GsmLocalId::getBsic() const {
    return m_bsic;
}
void OAIGsmObj_GsmLocalId::setBsic(const qint32 &bsic) {
    m_bsic = bsic;
    m_bsic_isSet = true;
}

bool OAIGsmObj_GsmLocalId::is_bsic_Set() const{
    return m_bsic_isSet;
}

bool OAIGsmObj_GsmLocalId::is_bsic_Valid() const{
    return m_bsic_isValid;
}

qint32 OAIGsmObj_GsmLocalId::getBcch() const {
    return m_bcch;
}
void OAIGsmObj_GsmLocalId::setBcch(const qint32 &bcch) {
    m_bcch = bcch;
    m_bcch_isSet = true;
}

bool OAIGsmObj_GsmLocalId::is_bcch_Set() const{
    return m_bcch_isSet;
}

bool OAIGsmObj_GsmLocalId::is_bcch_Valid() const{
    return m_bcch_isValid;
}

bool OAIGsmObj_GsmLocalId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bsic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcch_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGsmObj_GsmLocalId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bsic_isValid && m_bcch_isValid && true;
}

} // namespace OpenAPI
