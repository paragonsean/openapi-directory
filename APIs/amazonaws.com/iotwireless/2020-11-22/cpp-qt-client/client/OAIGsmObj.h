/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGsmObj.h
 *
 * GSM object.
 */

#ifndef OAIGsmObj_H
#define OAIGsmObj_H

#include <QJsonObject>

#include "OAIGsmObj_GsmLocalId.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGsmObj_GsmLocalId;

class OAIGsmObj : public OAIObject {
public:
    OAIGsmObj();
    OAIGsmObj(QString json);
    ~OAIGsmObj() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMcc() const;
    void setMcc(const qint32 &mcc);
    bool is_mcc_Set() const;
    bool is_mcc_Valid() const;

    qint32 getMnc() const;
    void setMnc(const qint32 &mnc);
    bool is_mnc_Set() const;
    bool is_mnc_Valid() const;

    qint32 getLac() const;
    void setLac(const qint32 &lac);
    bool is_lac_Set() const;
    bool is_lac_Valid() const;

    qint32 getGeranCid() const;
    void setGeranCid(const qint32 &geran_cid);
    bool is_geran_cid_Set() const;
    bool is_geran_cid_Valid() const;

    OAIGsmObj_GsmLocalId getGsmLocalId() const;
    void setGsmLocalId(const OAIGsmObj_GsmLocalId &gsm_local_id);
    bool is_gsm_local_id_Set() const;
    bool is_gsm_local_id_Valid() const;

    qint32 getGsmTimingAdvance() const;
    void setGsmTimingAdvance(const qint32 &gsm_timing_advance);
    bool is_gsm_timing_advance_Set() const;
    bool is_gsm_timing_advance_Valid() const;

    qint32 getRxLevel() const;
    void setRxLevel(const qint32 &rx_level);
    bool is_rx_level_Set() const;
    bool is_rx_level_Valid() const;

    QList getGsmNmr() const;
    void setGsmNmr(const QList &gsm_nmr);
    bool is_gsm_nmr_Set() const;
    bool is_gsm_nmr_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_mcc;
    bool m_mcc_isSet;
    bool m_mcc_isValid;

    qint32 m_mnc;
    bool m_mnc_isSet;
    bool m_mnc_isValid;

    qint32 m_lac;
    bool m_lac_isSet;
    bool m_lac_isValid;

    qint32 m_geran_cid;
    bool m_geran_cid_isSet;
    bool m_geran_cid_isValid;

    OAIGsmObj_GsmLocalId m_gsm_local_id;
    bool m_gsm_local_id_isSet;
    bool m_gsm_local_id_isValid;

    qint32 m_gsm_timing_advance;
    bool m_gsm_timing_advance_isSet;
    bool m_gsm_timing_advance_isValid;

    qint32 m_rx_level;
    bool m_rx_level_isSet;
    bool m_rx_level_isValid;

    QList m_gsm_nmr;
    bool m_gsm_nmr_isSet;
    bool m_gsm_nmr_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGsmObj)

#endif // OAIGsmObj_H
