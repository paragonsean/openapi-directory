/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISidewalkDeviceMetadata.h
 *
 * MetaData for Sidewalk device.
 */

#ifndef OAISidewalkDeviceMetadata_H
#define OAISidewalkDeviceMetadata_H

#include <QJsonObject>

#include "OAIBatteryLevel.h"
#include "OAIDeviceState.h"
#include "OAIEvent.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISidewalkDeviceMetadata : public OAIObject {
public:
    OAISidewalkDeviceMetadata();
    OAISidewalkDeviceMetadata(QString json);
    ~OAISidewalkDeviceMetadata() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getRssi() const;
    void setRssi(const qint32 &rssi);
    bool is_rssi_Set() const;
    bool is_rssi_Valid() const;

    OAIBatteryLevel getBatteryLevel() const;
    void setBatteryLevel(const OAIBatteryLevel &battery_level);
    bool is_battery_level_Set() const;
    bool is_battery_level_Valid() const;

    OAIEvent getEvent() const;
    void setEvent(const OAIEvent &event);
    bool is_event_Set() const;
    bool is_event_Valid() const;

    OAIDeviceState getDeviceState() const;
    void setDeviceState(const OAIDeviceState &device_state);
    bool is_device_state_Set() const;
    bool is_device_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_rssi;
    bool m_rssi_isSet;
    bool m_rssi_isValid;

    OAIBatteryLevel m_battery_level;
    bool m_battery_level_isSet;
    bool m_battery_level_isValid;

    OAIEvent m_event;
    bool m_event_isSet;
    bool m_event_isValid;

    OAIDeviceState m_device_state;
    bool m_device_state_isSet;
    bool m_device_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISidewalkDeviceMetadata)

#endif // OAISidewalkDeviceMetadata_H
