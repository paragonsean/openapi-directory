/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutPositionConfiguration_request_Solvers_SemtechGnss.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutPositionConfiguration_request_Solvers_SemtechGnss::OAIPutPositionConfiguration_request_Solvers_SemtechGnss(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutPositionConfiguration_request_Solvers_SemtechGnss::OAIPutPositionConfiguration_request_Solvers_SemtechGnss() {
    this->initializeModel();
}

OAIPutPositionConfiguration_request_Solvers_SemtechGnss::~OAIPutPositionConfiguration_request_Solvers_SemtechGnss() {}

void OAIPutPositionConfiguration_request_Solvers_SemtechGnss::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_fec_isSet = false;
    m_fec_isValid = false;
}

void OAIPutPositionConfiguration_request_Solvers_SemtechGnss::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutPositionConfiguration_request_Solvers_SemtechGnss::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_fec_isValid = ::OpenAPI::fromJsonValue(m_fec, json[QString("Fec")]);
    m_fec_isSet = !json[QString("Fec")].isNull() && m_fec_isValid;
}

QString OAIPutPositionConfiguration_request_Solvers_SemtechGnss::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutPositionConfiguration_request_Solvers_SemtechGnss::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_fec.isSet()) {
        obj.insert(QString("Fec"), ::OpenAPI::toJsonValue(m_fec));
    }
    return obj;
}

OAIPositionConfigurationStatus OAIPutPositionConfiguration_request_Solvers_SemtechGnss::getStatus() const {
    return m_status;
}
void OAIPutPositionConfiguration_request_Solvers_SemtechGnss::setStatus(const OAIPositionConfigurationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPutPositionConfiguration_request_Solvers_SemtechGnss::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPutPositionConfiguration_request_Solvers_SemtechGnss::is_status_Valid() const{
    return m_status_isValid;
}

OAIPositionConfigurationFec OAIPutPositionConfiguration_request_Solvers_SemtechGnss::getFec() const {
    return m_fec;
}
void OAIPutPositionConfiguration_request_Solvers_SemtechGnss::setFec(const OAIPositionConfigurationFec &fec) {
    m_fec = fec;
    m_fec_isSet = true;
}

bool OAIPutPositionConfiguration_request_Solvers_SemtechGnss::is_fec_Set() const{
    return m_fec_isSet;
}

bool OAIPutPositionConfiguration_request_Solvers_SemtechGnss::is_fec_Valid() const{
    return m_fec_isValid;
}

bool OAIPutPositionConfiguration_request_Solvers_SemtechGnss::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutPositionConfiguration_request_Solvers_SemtechGnss::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_fec_isValid && true;
}

} // namespace OpenAPI
