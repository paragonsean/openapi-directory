/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeviceProfile_request_LoRaWAN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeviceProfile_request_LoRaWAN::OAICreateDeviceProfile_request_LoRaWAN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeviceProfile_request_LoRaWAN::OAICreateDeviceProfile_request_LoRaWAN() {
    this->initializeModel();
}

OAICreateDeviceProfile_request_LoRaWAN::~OAICreateDeviceProfile_request_LoRaWAN() {}

void OAICreateDeviceProfile_request_LoRaWAN::initializeModel() {

    m_supports_class_b_isSet = false;
    m_supports_class_b_isValid = false;

    m_class_b_timeout_isSet = false;
    m_class_b_timeout_isValid = false;

    m_ping_slot_period_isSet = false;
    m_ping_slot_period_isValid = false;

    m_ping_slot_dr_isSet = false;
    m_ping_slot_dr_isValid = false;

    m_ping_slot_freq_isSet = false;
    m_ping_slot_freq_isValid = false;

    m_supports_class_c_isSet = false;
    m_supports_class_c_isValid = false;

    m_class_c_timeout_isSet = false;
    m_class_c_timeout_isValid = false;

    m_mac_version_isSet = false;
    m_mac_version_isValid = false;

    m_reg_params_revision_isSet = false;
    m_reg_params_revision_isValid = false;

    m_rx_delay1_isSet = false;
    m_rx_delay1_isValid = false;

    m_rx_dr_offset1_isSet = false;
    m_rx_dr_offset1_isValid = false;

    m_rx_data_rate2_isSet = false;
    m_rx_data_rate2_isValid = false;

    m_rx_freq2_isSet = false;
    m_rx_freq2_isValid = false;

    m_factory_preset_freqs_list_isSet = false;
    m_factory_preset_freqs_list_isValid = false;

    m_max_eirp_isSet = false;
    m_max_eirp_isValid = false;

    m_max_duty_cycle_isSet = false;
    m_max_duty_cycle_isValid = false;

    m_rf_region_isSet = false;
    m_rf_region_isValid = false;

    m_supports_join_isSet = false;
    m_supports_join_isValid = false;

    m_supports32_bit_f_cnt_isSet = false;
    m_supports32_bit_f_cnt_isValid = false;
}

void OAICreateDeviceProfile_request_LoRaWAN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeviceProfile_request_LoRaWAN::fromJsonObject(QJsonObject json) {

    m_supports_class_b_isValid = ::OpenAPI::fromJsonValue(m_supports_class_b, json[QString("SupportsClassB")]);
    m_supports_class_b_isSet = !json[QString("SupportsClassB")].isNull() && m_supports_class_b_isValid;

    m_class_b_timeout_isValid = ::OpenAPI::fromJsonValue(m_class_b_timeout, json[QString("ClassBTimeout")]);
    m_class_b_timeout_isSet = !json[QString("ClassBTimeout")].isNull() && m_class_b_timeout_isValid;

    m_ping_slot_period_isValid = ::OpenAPI::fromJsonValue(m_ping_slot_period, json[QString("PingSlotPeriod")]);
    m_ping_slot_period_isSet = !json[QString("PingSlotPeriod")].isNull() && m_ping_slot_period_isValid;

    m_ping_slot_dr_isValid = ::OpenAPI::fromJsonValue(m_ping_slot_dr, json[QString("PingSlotDr")]);
    m_ping_slot_dr_isSet = !json[QString("PingSlotDr")].isNull() && m_ping_slot_dr_isValid;

    m_ping_slot_freq_isValid = ::OpenAPI::fromJsonValue(m_ping_slot_freq, json[QString("PingSlotFreq")]);
    m_ping_slot_freq_isSet = !json[QString("PingSlotFreq")].isNull() && m_ping_slot_freq_isValid;

    m_supports_class_c_isValid = ::OpenAPI::fromJsonValue(m_supports_class_c, json[QString("SupportsClassC")]);
    m_supports_class_c_isSet = !json[QString("SupportsClassC")].isNull() && m_supports_class_c_isValid;

    m_class_c_timeout_isValid = ::OpenAPI::fromJsonValue(m_class_c_timeout, json[QString("ClassCTimeout")]);
    m_class_c_timeout_isSet = !json[QString("ClassCTimeout")].isNull() && m_class_c_timeout_isValid;

    m_mac_version_isValid = ::OpenAPI::fromJsonValue(m_mac_version, json[QString("MacVersion")]);
    m_mac_version_isSet = !json[QString("MacVersion")].isNull() && m_mac_version_isValid;

    m_reg_params_revision_isValid = ::OpenAPI::fromJsonValue(m_reg_params_revision, json[QString("RegParamsRevision")]);
    m_reg_params_revision_isSet = !json[QString("RegParamsRevision")].isNull() && m_reg_params_revision_isValid;

    m_rx_delay1_isValid = ::OpenAPI::fromJsonValue(m_rx_delay1, json[QString("RxDelay1")]);
    m_rx_delay1_isSet = !json[QString("RxDelay1")].isNull() && m_rx_delay1_isValid;

    m_rx_dr_offset1_isValid = ::OpenAPI::fromJsonValue(m_rx_dr_offset1, json[QString("RxDrOffset1")]);
    m_rx_dr_offset1_isSet = !json[QString("RxDrOffset1")].isNull() && m_rx_dr_offset1_isValid;

    m_rx_data_rate2_isValid = ::OpenAPI::fromJsonValue(m_rx_data_rate2, json[QString("RxDataRate2")]);
    m_rx_data_rate2_isSet = !json[QString("RxDataRate2")].isNull() && m_rx_data_rate2_isValid;

    m_rx_freq2_isValid = ::OpenAPI::fromJsonValue(m_rx_freq2, json[QString("RxFreq2")]);
    m_rx_freq2_isSet = !json[QString("RxFreq2")].isNull() && m_rx_freq2_isValid;

    m_factory_preset_freqs_list_isValid = ::OpenAPI::fromJsonValue(m_factory_preset_freqs_list, json[QString("FactoryPresetFreqsList")]);
    m_factory_preset_freqs_list_isSet = !json[QString("FactoryPresetFreqsList")].isNull() && m_factory_preset_freqs_list_isValid;

    m_max_eirp_isValid = ::OpenAPI::fromJsonValue(m_max_eirp, json[QString("MaxEirp")]);
    m_max_eirp_isSet = !json[QString("MaxEirp")].isNull() && m_max_eirp_isValid;

    m_max_duty_cycle_isValid = ::OpenAPI::fromJsonValue(m_max_duty_cycle, json[QString("MaxDutyCycle")]);
    m_max_duty_cycle_isSet = !json[QString("MaxDutyCycle")].isNull() && m_max_duty_cycle_isValid;

    m_rf_region_isValid = ::OpenAPI::fromJsonValue(m_rf_region, json[QString("RfRegion")]);
    m_rf_region_isSet = !json[QString("RfRegion")].isNull() && m_rf_region_isValid;

    m_supports_join_isValid = ::OpenAPI::fromJsonValue(m_supports_join, json[QString("SupportsJoin")]);
    m_supports_join_isSet = !json[QString("SupportsJoin")].isNull() && m_supports_join_isValid;

    m_supports32_bit_f_cnt_isValid = ::OpenAPI::fromJsonValue(m_supports32_bit_f_cnt, json[QString("Supports32BitFCnt")]);
    m_supports32_bit_f_cnt_isSet = !json[QString("Supports32BitFCnt")].isNull() && m_supports32_bit_f_cnt_isValid;
}

QString OAICreateDeviceProfile_request_LoRaWAN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeviceProfile_request_LoRaWAN::asJsonObject() const {
    QJsonObject obj;
    if (m_supports_class_b_isSet) {
        obj.insert(QString("SupportsClassB"), ::OpenAPI::toJsonValue(m_supports_class_b));
    }
    if (m_class_b_timeout_isSet) {
        obj.insert(QString("ClassBTimeout"), ::OpenAPI::toJsonValue(m_class_b_timeout));
    }
    if (m_ping_slot_period_isSet) {
        obj.insert(QString("PingSlotPeriod"), ::OpenAPI::toJsonValue(m_ping_slot_period));
    }
    if (m_ping_slot_dr_isSet) {
        obj.insert(QString("PingSlotDr"), ::OpenAPI::toJsonValue(m_ping_slot_dr));
    }
    if (m_ping_slot_freq_isSet) {
        obj.insert(QString("PingSlotFreq"), ::OpenAPI::toJsonValue(m_ping_slot_freq));
    }
    if (m_supports_class_c_isSet) {
        obj.insert(QString("SupportsClassC"), ::OpenAPI::toJsonValue(m_supports_class_c));
    }
    if (m_class_c_timeout_isSet) {
        obj.insert(QString("ClassCTimeout"), ::OpenAPI::toJsonValue(m_class_c_timeout));
    }
    if (m_mac_version_isSet) {
        obj.insert(QString("MacVersion"), ::OpenAPI::toJsonValue(m_mac_version));
    }
    if (m_reg_params_revision_isSet) {
        obj.insert(QString("RegParamsRevision"), ::OpenAPI::toJsonValue(m_reg_params_revision));
    }
    if (m_rx_delay1_isSet) {
        obj.insert(QString("RxDelay1"), ::OpenAPI::toJsonValue(m_rx_delay1));
    }
    if (m_rx_dr_offset1_isSet) {
        obj.insert(QString("RxDrOffset1"), ::OpenAPI::toJsonValue(m_rx_dr_offset1));
    }
    if (m_rx_data_rate2_isSet) {
        obj.insert(QString("RxDataRate2"), ::OpenAPI::toJsonValue(m_rx_data_rate2));
    }
    if (m_rx_freq2_isSet) {
        obj.insert(QString("RxFreq2"), ::OpenAPI::toJsonValue(m_rx_freq2));
    }
    if (m_factory_preset_freqs_list.isSet()) {
        obj.insert(QString("FactoryPresetFreqsList"), ::OpenAPI::toJsonValue(m_factory_preset_freqs_list));
    }
    if (m_max_eirp_isSet) {
        obj.insert(QString("MaxEirp"), ::OpenAPI::toJsonValue(m_max_eirp));
    }
    if (m_max_duty_cycle_isSet) {
        obj.insert(QString("MaxDutyCycle"), ::OpenAPI::toJsonValue(m_max_duty_cycle));
    }
    if (m_rf_region_isSet) {
        obj.insert(QString("RfRegion"), ::OpenAPI::toJsonValue(m_rf_region));
    }
    if (m_supports_join_isSet) {
        obj.insert(QString("SupportsJoin"), ::OpenAPI::toJsonValue(m_supports_join));
    }
    if (m_supports32_bit_f_cnt_isSet) {
        obj.insert(QString("Supports32BitFCnt"), ::OpenAPI::toJsonValue(m_supports32_bit_f_cnt));
    }
    return obj;
}

bool OAICreateDeviceProfile_request_LoRaWAN::getSupportsClassB() const {
    return m_supports_class_b;
}
void OAICreateDeviceProfile_request_LoRaWAN::setSupportsClassB(const bool &supports_class_b) {
    m_supports_class_b = supports_class_b;
    m_supports_class_b_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_supports_class_b_Set() const{
    return m_supports_class_b_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_supports_class_b_Valid() const{
    return m_supports_class_b_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getClassBTimeout() const {
    return m_class_b_timeout;
}
void OAICreateDeviceProfile_request_LoRaWAN::setClassBTimeout(const qint32 &class_b_timeout) {
    m_class_b_timeout = class_b_timeout;
    m_class_b_timeout_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_class_b_timeout_Set() const{
    return m_class_b_timeout_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_class_b_timeout_Valid() const{
    return m_class_b_timeout_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getPingSlotPeriod() const {
    return m_ping_slot_period;
}
void OAICreateDeviceProfile_request_LoRaWAN::setPingSlotPeriod(const qint32 &ping_slot_period) {
    m_ping_slot_period = ping_slot_period;
    m_ping_slot_period_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_ping_slot_period_Set() const{
    return m_ping_slot_period_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_ping_slot_period_Valid() const{
    return m_ping_slot_period_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getPingSlotDr() const {
    return m_ping_slot_dr;
}
void OAICreateDeviceProfile_request_LoRaWAN::setPingSlotDr(const qint32 &ping_slot_dr) {
    m_ping_slot_dr = ping_slot_dr;
    m_ping_slot_dr_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_ping_slot_dr_Set() const{
    return m_ping_slot_dr_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_ping_slot_dr_Valid() const{
    return m_ping_slot_dr_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getPingSlotFreq() const {
    return m_ping_slot_freq;
}
void OAICreateDeviceProfile_request_LoRaWAN::setPingSlotFreq(const qint32 &ping_slot_freq) {
    m_ping_slot_freq = ping_slot_freq;
    m_ping_slot_freq_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_ping_slot_freq_Set() const{
    return m_ping_slot_freq_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_ping_slot_freq_Valid() const{
    return m_ping_slot_freq_isValid;
}

bool OAICreateDeviceProfile_request_LoRaWAN::getSupportsClassC() const {
    return m_supports_class_c;
}
void OAICreateDeviceProfile_request_LoRaWAN::setSupportsClassC(const bool &supports_class_c) {
    m_supports_class_c = supports_class_c;
    m_supports_class_c_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_supports_class_c_Set() const{
    return m_supports_class_c_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_supports_class_c_Valid() const{
    return m_supports_class_c_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getClassCTimeout() const {
    return m_class_c_timeout;
}
void OAICreateDeviceProfile_request_LoRaWAN::setClassCTimeout(const qint32 &class_c_timeout) {
    m_class_c_timeout = class_c_timeout;
    m_class_c_timeout_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_class_c_timeout_Set() const{
    return m_class_c_timeout_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_class_c_timeout_Valid() const{
    return m_class_c_timeout_isValid;
}

QString OAICreateDeviceProfile_request_LoRaWAN::getMacVersion() const {
    return m_mac_version;
}
void OAICreateDeviceProfile_request_LoRaWAN::setMacVersion(const QString &mac_version) {
    m_mac_version = mac_version;
    m_mac_version_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_mac_version_Set() const{
    return m_mac_version_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_mac_version_Valid() const{
    return m_mac_version_isValid;
}

QString OAICreateDeviceProfile_request_LoRaWAN::getRegParamsRevision() const {
    return m_reg_params_revision;
}
void OAICreateDeviceProfile_request_LoRaWAN::setRegParamsRevision(const QString &reg_params_revision) {
    m_reg_params_revision = reg_params_revision;
    m_reg_params_revision_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_reg_params_revision_Set() const{
    return m_reg_params_revision_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_reg_params_revision_Valid() const{
    return m_reg_params_revision_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getRxDelay1() const {
    return m_rx_delay1;
}
void OAICreateDeviceProfile_request_LoRaWAN::setRxDelay1(const qint32 &rx_delay1) {
    m_rx_delay1 = rx_delay1;
    m_rx_delay1_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rx_delay1_Set() const{
    return m_rx_delay1_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rx_delay1_Valid() const{
    return m_rx_delay1_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getRxDrOffset1() const {
    return m_rx_dr_offset1;
}
void OAICreateDeviceProfile_request_LoRaWAN::setRxDrOffset1(const qint32 &rx_dr_offset1) {
    m_rx_dr_offset1 = rx_dr_offset1;
    m_rx_dr_offset1_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rx_dr_offset1_Set() const{
    return m_rx_dr_offset1_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rx_dr_offset1_Valid() const{
    return m_rx_dr_offset1_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getRxDataRate2() const {
    return m_rx_data_rate2;
}
void OAICreateDeviceProfile_request_LoRaWAN::setRxDataRate2(const qint32 &rx_data_rate2) {
    m_rx_data_rate2 = rx_data_rate2;
    m_rx_data_rate2_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rx_data_rate2_Set() const{
    return m_rx_data_rate2_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rx_data_rate2_Valid() const{
    return m_rx_data_rate2_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getRxFreq2() const {
    return m_rx_freq2;
}
void OAICreateDeviceProfile_request_LoRaWAN::setRxFreq2(const qint32 &rx_freq2) {
    m_rx_freq2 = rx_freq2;
    m_rx_freq2_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rx_freq2_Set() const{
    return m_rx_freq2_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rx_freq2_Valid() const{
    return m_rx_freq2_isValid;
}

QList OAICreateDeviceProfile_request_LoRaWAN::getFactoryPresetFreqsList() const {
    return m_factory_preset_freqs_list;
}
void OAICreateDeviceProfile_request_LoRaWAN::setFactoryPresetFreqsList(const QList &factory_preset_freqs_list) {
    m_factory_preset_freqs_list = factory_preset_freqs_list;
    m_factory_preset_freqs_list_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_factory_preset_freqs_list_Set() const{
    return m_factory_preset_freqs_list_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_factory_preset_freqs_list_Valid() const{
    return m_factory_preset_freqs_list_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getMaxEirp() const {
    return m_max_eirp;
}
void OAICreateDeviceProfile_request_LoRaWAN::setMaxEirp(const qint32 &max_eirp) {
    m_max_eirp = max_eirp;
    m_max_eirp_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_max_eirp_Set() const{
    return m_max_eirp_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_max_eirp_Valid() const{
    return m_max_eirp_isValid;
}

qint32 OAICreateDeviceProfile_request_LoRaWAN::getMaxDutyCycle() const {
    return m_max_duty_cycle;
}
void OAICreateDeviceProfile_request_LoRaWAN::setMaxDutyCycle(const qint32 &max_duty_cycle) {
    m_max_duty_cycle = max_duty_cycle;
    m_max_duty_cycle_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_max_duty_cycle_Set() const{
    return m_max_duty_cycle_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_max_duty_cycle_Valid() const{
    return m_max_duty_cycle_isValid;
}

QString OAICreateDeviceProfile_request_LoRaWAN::getRfRegion() const {
    return m_rf_region;
}
void OAICreateDeviceProfile_request_LoRaWAN::setRfRegion(const QString &rf_region) {
    m_rf_region = rf_region;
    m_rf_region_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rf_region_Set() const{
    return m_rf_region_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_rf_region_Valid() const{
    return m_rf_region_isValid;
}

bool OAICreateDeviceProfile_request_LoRaWAN::getSupportsJoin() const {
    return m_supports_join;
}
void OAICreateDeviceProfile_request_LoRaWAN::setSupportsJoin(const bool &supports_join) {
    m_supports_join = supports_join;
    m_supports_join_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_supports_join_Set() const{
    return m_supports_join_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_supports_join_Valid() const{
    return m_supports_join_isValid;
}

bool OAICreateDeviceProfile_request_LoRaWAN::getSupports32BitFCnt() const {
    return m_supports32_bit_f_cnt;
}
void OAICreateDeviceProfile_request_LoRaWAN::setSupports32BitFCnt(const bool &supports32_bit_f_cnt) {
    m_supports32_bit_f_cnt = supports32_bit_f_cnt;
    m_supports32_bit_f_cnt_isSet = true;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_supports32_bit_f_cnt_Set() const{
    return m_supports32_bit_f_cnt_isSet;
}

bool OAICreateDeviceProfile_request_LoRaWAN::is_supports32_bit_f_cnt_Valid() const{
    return m_supports32_bit_f_cnt_isValid;
}

bool OAICreateDeviceProfile_request_LoRaWAN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_supports_class_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_b_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_slot_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_slot_dr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_slot_freq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_class_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_c_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reg_params_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_delay1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_dr_offset1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_data_rate2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_freq2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_factory_preset_freqs_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_eirp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_duty_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_join_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports32_bit_f_cnt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeviceProfile_request_LoRaWAN::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
