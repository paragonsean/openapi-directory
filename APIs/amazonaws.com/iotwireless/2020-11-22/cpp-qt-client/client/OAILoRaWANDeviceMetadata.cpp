/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoRaWANDeviceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoRaWANDeviceMetadata::OAILoRaWANDeviceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoRaWANDeviceMetadata::OAILoRaWANDeviceMetadata() {
    this->initializeModel();
}

OAILoRaWANDeviceMetadata::~OAILoRaWANDeviceMetadata() {}

void OAILoRaWANDeviceMetadata::initializeModel() {

    m_dev_eui_isSet = false;
    m_dev_eui_isValid = false;

    m_f_port_isSet = false;
    m_f_port_isValid = false;

    m_data_rate_isSet = false;
    m_data_rate_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_gateways_isSet = false;
    m_gateways_isValid = false;
}

void OAILoRaWANDeviceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoRaWANDeviceMetadata::fromJsonObject(QJsonObject json) {

    m_dev_eui_isValid = ::OpenAPI::fromJsonValue(m_dev_eui, json[QString("DevEui")]);
    m_dev_eui_isSet = !json[QString("DevEui")].isNull() && m_dev_eui_isValid;

    m_f_port_isValid = ::OpenAPI::fromJsonValue(m_f_port, json[QString("FPort")]);
    m_f_port_isSet = !json[QString("FPort")].isNull() && m_f_port_isValid;

    m_data_rate_isValid = ::OpenAPI::fromJsonValue(m_data_rate, json[QString("DataRate")]);
    m_data_rate_isSet = !json[QString("DataRate")].isNull() && m_data_rate_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("Frequency")]);
    m_frequency_isSet = !json[QString("Frequency")].isNull() && m_frequency_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_gateways_isValid = ::OpenAPI::fromJsonValue(m_gateways, json[QString("Gateways")]);
    m_gateways_isSet = !json[QString("Gateways")].isNull() && m_gateways_isValid;
}

QString OAILoRaWANDeviceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoRaWANDeviceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_dev_eui_isSet) {
        obj.insert(QString("DevEui"), ::OpenAPI::toJsonValue(m_dev_eui));
    }
    if (m_f_port_isSet) {
        obj.insert(QString("FPort"), ::OpenAPI::toJsonValue(m_f_port));
    }
    if (m_data_rate_isSet) {
        obj.insert(QString("DataRate"), ::OpenAPI::toJsonValue(m_data_rate));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("Frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_gateways.isSet()) {
        obj.insert(QString("Gateways"), ::OpenAPI::toJsonValue(m_gateways));
    }
    return obj;
}

QString OAILoRaWANDeviceMetadata::getDevEui() const {
    return m_dev_eui;
}
void OAILoRaWANDeviceMetadata::setDevEui(const QString &dev_eui) {
    m_dev_eui = dev_eui;
    m_dev_eui_isSet = true;
}

bool OAILoRaWANDeviceMetadata::is_dev_eui_Set() const{
    return m_dev_eui_isSet;
}

bool OAILoRaWANDeviceMetadata::is_dev_eui_Valid() const{
    return m_dev_eui_isValid;
}

qint32 OAILoRaWANDeviceMetadata::getFPort() const {
    return m_f_port;
}
void OAILoRaWANDeviceMetadata::setFPort(const qint32 &f_port) {
    m_f_port = f_port;
    m_f_port_isSet = true;
}

bool OAILoRaWANDeviceMetadata::is_f_port_Set() const{
    return m_f_port_isSet;
}

bool OAILoRaWANDeviceMetadata::is_f_port_Valid() const{
    return m_f_port_isValid;
}

qint32 OAILoRaWANDeviceMetadata::getDataRate() const {
    return m_data_rate;
}
void OAILoRaWANDeviceMetadata::setDataRate(const qint32 &data_rate) {
    m_data_rate = data_rate;
    m_data_rate_isSet = true;
}

bool OAILoRaWANDeviceMetadata::is_data_rate_Set() const{
    return m_data_rate_isSet;
}

bool OAILoRaWANDeviceMetadata::is_data_rate_Valid() const{
    return m_data_rate_isValid;
}

qint32 OAILoRaWANDeviceMetadata::getFrequency() const {
    return m_frequency;
}
void OAILoRaWANDeviceMetadata::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAILoRaWANDeviceMetadata::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAILoRaWANDeviceMetadata::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAILoRaWANDeviceMetadata::getTimestamp() const {
    return m_timestamp;
}
void OAILoRaWANDeviceMetadata::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAILoRaWANDeviceMetadata::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAILoRaWANDeviceMetadata::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QList OAILoRaWANDeviceMetadata::getGateways() const {
    return m_gateways;
}
void OAILoRaWANDeviceMetadata::setGateways(const QList &gateways) {
    m_gateways = gateways;
    m_gateways_isSet = true;
}

bool OAILoRaWANDeviceMetadata::is_gateways_Set() const{
    return m_gateways_isSet;
}

bool OAILoRaWANDeviceMetadata::is_gateways_Valid() const{
    return m_gateways_isValid;
}

bool OAILoRaWANDeviceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dev_eui_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateways.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoRaWANDeviceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
