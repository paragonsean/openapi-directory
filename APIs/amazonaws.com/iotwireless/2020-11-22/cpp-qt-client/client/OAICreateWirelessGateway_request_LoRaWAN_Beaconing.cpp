/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWirelessGateway_request_LoRaWAN_Beaconing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWirelessGateway_request_LoRaWAN_Beaconing::OAICreateWirelessGateway_request_LoRaWAN_Beaconing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWirelessGateway_request_LoRaWAN_Beaconing::OAICreateWirelessGateway_request_LoRaWAN_Beaconing() {
    this->initializeModel();
}

OAICreateWirelessGateway_request_LoRaWAN_Beaconing::~OAICreateWirelessGateway_request_LoRaWAN_Beaconing() {}

void OAICreateWirelessGateway_request_LoRaWAN_Beaconing::initializeModel() {

    m_data_rate_isSet = false;
    m_data_rate_isValid = false;

    m_frequencies_isSet = false;
    m_frequencies_isValid = false;
}

void OAICreateWirelessGateway_request_LoRaWAN_Beaconing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWirelessGateway_request_LoRaWAN_Beaconing::fromJsonObject(QJsonObject json) {

    m_data_rate_isValid = ::OpenAPI::fromJsonValue(m_data_rate, json[QString("DataRate")]);
    m_data_rate_isSet = !json[QString("DataRate")].isNull() && m_data_rate_isValid;

    m_frequencies_isValid = ::OpenAPI::fromJsonValue(m_frequencies, json[QString("Frequencies")]);
    m_frequencies_isSet = !json[QString("Frequencies")].isNull() && m_frequencies_isValid;
}

QString OAICreateWirelessGateway_request_LoRaWAN_Beaconing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWirelessGateway_request_LoRaWAN_Beaconing::asJsonObject() const {
    QJsonObject obj;
    if (m_data_rate_isSet) {
        obj.insert(QString("DataRate"), ::OpenAPI::toJsonValue(m_data_rate));
    }
    if (m_frequencies.isSet()) {
        obj.insert(QString("Frequencies"), ::OpenAPI::toJsonValue(m_frequencies));
    }
    return obj;
}

qint32 OAICreateWirelessGateway_request_LoRaWAN_Beaconing::getDataRate() const {
    return m_data_rate;
}
void OAICreateWirelessGateway_request_LoRaWAN_Beaconing::setDataRate(const qint32 &data_rate) {
    m_data_rate = data_rate;
    m_data_rate_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN_Beaconing::is_data_rate_Set() const{
    return m_data_rate_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN_Beaconing::is_data_rate_Valid() const{
    return m_data_rate_isValid;
}

QList OAICreateWirelessGateway_request_LoRaWAN_Beaconing::getFrequencies() const {
    return m_frequencies;
}
void OAICreateWirelessGateway_request_LoRaWAN_Beaconing::setFrequencies(const QList &frequencies) {
    m_frequencies = frequencies;
    m_frequencies_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN_Beaconing::is_frequencies_Set() const{
    return m_frequencies_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN_Beaconing::is_frequencies_Valid() const{
    return m_frequencies_isValid;
}

bool OAICreateWirelessGateway_request_LoRaWAN_Beaconing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequencies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWirelessGateway_request_LoRaWAN_Beaconing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
