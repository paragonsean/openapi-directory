/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartWirelessDeviceImportTask_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartWirelessDeviceImportTask_request::OAIStartWirelessDeviceImportTask_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartWirelessDeviceImportTask_request::OAIStartWirelessDeviceImportTask_request() {
    this->initializeModel();
}

OAIStartWirelessDeviceImportTask_request::~OAIStartWirelessDeviceImportTask_request() {}

void OAIStartWirelessDeviceImportTask_request::initializeModel() {

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_sidewalk_isSet = false;
    m_sidewalk_isValid = false;
}

void OAIStartWirelessDeviceImportTask_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartWirelessDeviceImportTask_request::fromJsonObject(QJsonObject json) {

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("DestinationName")]);
    m_destination_name_isSet = !json[QString("DestinationName")].isNull() && m_destination_name_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_sidewalk_isValid = ::OpenAPI::fromJsonValue(m_sidewalk, json[QString("Sidewalk")]);
    m_sidewalk_isSet = !json[QString("Sidewalk")].isNull() && m_sidewalk_isValid;
}

QString OAIStartWirelessDeviceImportTask_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartWirelessDeviceImportTask_request::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_name_isSet) {
        obj.insert(QString("DestinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_sidewalk.isSet()) {
        obj.insert(QString("Sidewalk"), ::OpenAPI::toJsonValue(m_sidewalk));
    }
    return obj;
}

QString OAIStartWirelessDeviceImportTask_request::getDestinationName() const {
    return m_destination_name;
}
void OAIStartWirelessDeviceImportTask_request::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIStartWirelessDeviceImportTask_request::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIStartWirelessDeviceImportTask_request::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIStartWirelessDeviceImportTask_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIStartWirelessDeviceImportTask_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIStartWirelessDeviceImportTask_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIStartWirelessDeviceImportTask_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList<OAITag> OAIStartWirelessDeviceImportTask_request::getTags() const {
    return m_tags;
}
void OAIStartWirelessDeviceImportTask_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartWirelessDeviceImportTask_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartWirelessDeviceImportTask_request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIStartWirelessDeviceImportTask_request_Sidewalk OAIStartWirelessDeviceImportTask_request::getSidewalk() const {
    return m_sidewalk;
}
void OAIStartWirelessDeviceImportTask_request::setSidewalk(const OAIStartWirelessDeviceImportTask_request_Sidewalk &sidewalk) {
    m_sidewalk = sidewalk;
    m_sidewalk_isSet = true;
}

bool OAIStartWirelessDeviceImportTask_request::is_sidewalk_Set() const{
    return m_sidewalk_isSet;
}

bool OAIStartWirelessDeviceImportTask_request::is_sidewalk_Valid() const{
    return m_sidewalk_isValid;
}

bool OAIStartWirelessDeviceImportTask_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartWirelessDeviceImportTask_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_name_isValid && m_sidewalk_isValid && true;
}

} // namespace OpenAPI
