/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPositionSolverDetails_SemtechGnss.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPositionSolverDetails_SemtechGnss::OAIPositionSolverDetails_SemtechGnss(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPositionSolverDetails_SemtechGnss::OAIPositionSolverDetails_SemtechGnss() {
    this->initializeModel();
}

OAIPositionSolverDetails_SemtechGnss::~OAIPositionSolverDetails_SemtechGnss() {}

void OAIPositionSolverDetails_SemtechGnss::initializeModel() {

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_fec_isSet = false;
    m_fec_isValid = false;
}

void OAIPositionSolverDetails_SemtechGnss::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPositionSolverDetails_SemtechGnss::fromJsonObject(QJsonObject json) {

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("Provider")]);
    m_provider_isSet = !json[QString("Provider")].isNull() && m_provider_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_fec_isValid = ::OpenAPI::fromJsonValue(m_fec, json[QString("Fec")]);
    m_fec_isSet = !json[QString("Fec")].isNull() && m_fec_isValid;
}

QString OAIPositionSolverDetails_SemtechGnss::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPositionSolverDetails_SemtechGnss::asJsonObject() const {
    QJsonObject obj;
    if (m_provider.isSet()) {
        obj.insert(QString("Provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_fec.isSet()) {
        obj.insert(QString("Fec"), ::OpenAPI::toJsonValue(m_fec));
    }
    return obj;
}

OAIPositionSolverProvider OAIPositionSolverDetails_SemtechGnss::getProvider() const {
    return m_provider;
}
void OAIPositionSolverDetails_SemtechGnss::setProvider(const OAIPositionSolverProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIPositionSolverDetails_SemtechGnss::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIPositionSolverDetails_SemtechGnss::is_provider_Valid() const{
    return m_provider_isValid;
}

OAIPositionSolverType OAIPositionSolverDetails_SemtechGnss::getType() const {
    return m_type;
}
void OAIPositionSolverDetails_SemtechGnss::setType(const OAIPositionSolverType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPositionSolverDetails_SemtechGnss::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPositionSolverDetails_SemtechGnss::is_type_Valid() const{
    return m_type_isValid;
}

OAIPositionConfigurationStatus OAIPositionSolverDetails_SemtechGnss::getStatus() const {
    return m_status;
}
void OAIPositionSolverDetails_SemtechGnss::setStatus(const OAIPositionConfigurationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPositionSolverDetails_SemtechGnss::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPositionSolverDetails_SemtechGnss::is_status_Valid() const{
    return m_status_isValid;
}

OAIPositionConfigurationFec OAIPositionSolverDetails_SemtechGnss::getFec() const {
    return m_fec;
}
void OAIPositionSolverDetails_SemtechGnss::setFec(const OAIPositionConfigurationFec &fec) {
    m_fec = fec;
    m_fec_isSet = true;
}

bool OAIPositionSolverDetails_SemtechGnss::is_fec_Set() const{
    return m_fec_isSet;
}

bool OAIPositionSolverDetails_SemtechGnss::is_fec_Valid() const{
    return m_fec_isValid;
}

bool OAIPositionSolverDetails_SemtechGnss::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPositionSolverDetails_SemtechGnss::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
