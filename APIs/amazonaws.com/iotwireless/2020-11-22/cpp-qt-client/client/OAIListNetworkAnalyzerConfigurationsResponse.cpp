/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListNetworkAnalyzerConfigurationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListNetworkAnalyzerConfigurationsResponse::OAIListNetworkAnalyzerConfigurationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListNetworkAnalyzerConfigurationsResponse::OAIListNetworkAnalyzerConfigurationsResponse() {
    this->initializeModel();
}

OAIListNetworkAnalyzerConfigurationsResponse::~OAIListNetworkAnalyzerConfigurationsResponse() {}

void OAIListNetworkAnalyzerConfigurationsResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_network_analyzer_configuration_list_isSet = false;
    m_network_analyzer_configuration_list_isValid = false;
}

void OAIListNetworkAnalyzerConfigurationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListNetworkAnalyzerConfigurationsResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_network_analyzer_configuration_list_isValid = ::OpenAPI::fromJsonValue(m_network_analyzer_configuration_list, json[QString("NetworkAnalyzerConfigurationList")]);
    m_network_analyzer_configuration_list_isSet = !json[QString("NetworkAnalyzerConfigurationList")].isNull() && m_network_analyzer_configuration_list_isValid;
}

QString OAIListNetworkAnalyzerConfigurationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListNetworkAnalyzerConfigurationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_network_analyzer_configuration_list.isSet()) {
        obj.insert(QString("NetworkAnalyzerConfigurationList"), ::OpenAPI::toJsonValue(m_network_analyzer_configuration_list));
    }
    return obj;
}

QString OAIListNetworkAnalyzerConfigurationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListNetworkAnalyzerConfigurationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListNetworkAnalyzerConfigurationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListNetworkAnalyzerConfigurationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListNetworkAnalyzerConfigurationsResponse::getNetworkAnalyzerConfigurationList() const {
    return m_network_analyzer_configuration_list;
}
void OAIListNetworkAnalyzerConfigurationsResponse::setNetworkAnalyzerConfigurationList(const QList &network_analyzer_configuration_list) {
    m_network_analyzer_configuration_list = network_analyzer_configuration_list;
    m_network_analyzer_configuration_list_isSet = true;
}

bool OAIListNetworkAnalyzerConfigurationsResponse::is_network_analyzer_configuration_list_Set() const{
    return m_network_analyzer_configuration_list_isSet;
}

bool OAIListNetworkAnalyzerConfigurationsResponse::is_network_analyzer_configuration_list_Valid() const{
    return m_network_analyzer_configuration_list_isValid;
}

bool OAIListNetworkAnalyzerConfigurationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_analyzer_configuration_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListNetworkAnalyzerConfigurationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
