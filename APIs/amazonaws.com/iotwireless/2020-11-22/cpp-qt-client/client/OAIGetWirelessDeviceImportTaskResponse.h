/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetWirelessDeviceImportTaskResponse.h
 *
 * 
 */

#ifndef OAIGetWirelessDeviceImportTaskResponse_H
#define OAIGetWirelessDeviceImportTaskResponse_H

#include <QJsonObject>

#include "OAIGetWirelessDeviceImportTaskResponse_Sidewalk.h"
#include "OAIImportTaskStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetWirelessDeviceImportTaskResponse_Sidewalk;

class OAIGetWirelessDeviceImportTaskResponse : public OAIObject {
public:
    OAIGetWirelessDeviceImportTaskResponse();
    OAIGetWirelessDeviceImportTaskResponse(QString json);
    ~OAIGetWirelessDeviceImportTaskResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getDestinationName() const;
    void setDestinationName(const QString &destination_name);
    bool is_destination_name_Set() const;
    bool is_destination_name_Valid() const;

    OAIGetWirelessDeviceImportTaskResponse_Sidewalk getSidewalk() const;
    void setSidewalk(const OAIGetWirelessDeviceImportTaskResponse_Sidewalk &sidewalk);
    bool is_sidewalk_Set() const;
    bool is_sidewalk_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    OAIImportTaskStatus getStatus() const;
    void setStatus(const OAIImportTaskStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    qint32 getInitializedImportedDeviceCount() const;
    void setInitializedImportedDeviceCount(const qint32 &initialized_imported_device_count);
    bool is_initialized_imported_device_count_Set() const;
    bool is_initialized_imported_device_count_Valid() const;

    qint32 getPendingImportedDeviceCount() const;
    void setPendingImportedDeviceCount(const qint32 &pending_imported_device_count);
    bool is_pending_imported_device_count_Set() const;
    bool is_pending_imported_device_count_Valid() const;

    qint32 getOnboardedImportedDeviceCount() const;
    void setOnboardedImportedDeviceCount(const qint32 &onboarded_imported_device_count);
    bool is_onboarded_imported_device_count_Set() const;
    bool is_onboarded_imported_device_count_Valid() const;

    qint32 getFailedImportedDeviceCount() const;
    void setFailedImportedDeviceCount(const qint32 &failed_imported_device_count);
    bool is_failed_imported_device_count_Set() const;
    bool is_failed_imported_device_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_destination_name;
    bool m_destination_name_isSet;
    bool m_destination_name_isValid;

    OAIGetWirelessDeviceImportTaskResponse_Sidewalk m_sidewalk;
    bool m_sidewalk_isSet;
    bool m_sidewalk_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    OAIImportTaskStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    qint32 m_initialized_imported_device_count;
    bool m_initialized_imported_device_count_isSet;
    bool m_initialized_imported_device_count_isValid;

    qint32 m_pending_imported_device_count;
    bool m_pending_imported_device_count_isSet;
    bool m_pending_imported_device_count_isValid;

    qint32 m_onboarded_imported_device_count;
    bool m_onboarded_imported_device_count_isSet;
    bool m_onboarded_imported_device_count_isValid;

    qint32 m_failed_imported_device_count;
    bool m_failed_imported_device_count_isSet;
    bool m_failed_imported_device_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetWirelessDeviceImportTaskResponse)

#endif // OAIGetWirelessDeviceImportTaskResponse_H
