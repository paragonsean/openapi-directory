/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartMulticastGroupSession_request_LoRaWAN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartMulticastGroupSession_request_LoRaWAN::OAIStartMulticastGroupSession_request_LoRaWAN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartMulticastGroupSession_request_LoRaWAN::OAIStartMulticastGroupSession_request_LoRaWAN() {
    this->initializeModel();
}

OAIStartMulticastGroupSession_request_LoRaWAN::~OAIStartMulticastGroupSession_request_LoRaWAN() {}

void OAIStartMulticastGroupSession_request_LoRaWAN::initializeModel() {

    m_dl_dr_isSet = false;
    m_dl_dr_isValid = false;

    m_dl_freq_isSet = false;
    m_dl_freq_isValid = false;

    m_session_start_time_isSet = false;
    m_session_start_time_isValid = false;

    m_session_timeout_isSet = false;
    m_session_timeout_isValid = false;

    m_ping_slot_period_isSet = false;
    m_ping_slot_period_isValid = false;
}

void OAIStartMulticastGroupSession_request_LoRaWAN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartMulticastGroupSession_request_LoRaWAN::fromJsonObject(QJsonObject json) {

    m_dl_dr_isValid = ::OpenAPI::fromJsonValue(m_dl_dr, json[QString("DlDr")]);
    m_dl_dr_isSet = !json[QString("DlDr")].isNull() && m_dl_dr_isValid;

    m_dl_freq_isValid = ::OpenAPI::fromJsonValue(m_dl_freq, json[QString("DlFreq")]);
    m_dl_freq_isSet = !json[QString("DlFreq")].isNull() && m_dl_freq_isValid;

    m_session_start_time_isValid = ::OpenAPI::fromJsonValue(m_session_start_time, json[QString("SessionStartTime")]);
    m_session_start_time_isSet = !json[QString("SessionStartTime")].isNull() && m_session_start_time_isValid;

    m_session_timeout_isValid = ::OpenAPI::fromJsonValue(m_session_timeout, json[QString("SessionTimeout")]);
    m_session_timeout_isSet = !json[QString("SessionTimeout")].isNull() && m_session_timeout_isValid;

    m_ping_slot_period_isValid = ::OpenAPI::fromJsonValue(m_ping_slot_period, json[QString("PingSlotPeriod")]);
    m_ping_slot_period_isSet = !json[QString("PingSlotPeriod")].isNull() && m_ping_slot_period_isValid;
}

QString OAIStartMulticastGroupSession_request_LoRaWAN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartMulticastGroupSession_request_LoRaWAN::asJsonObject() const {
    QJsonObject obj;
    if (m_dl_dr_isSet) {
        obj.insert(QString("DlDr"), ::OpenAPI::toJsonValue(m_dl_dr));
    }
    if (m_dl_freq_isSet) {
        obj.insert(QString("DlFreq"), ::OpenAPI::toJsonValue(m_dl_freq));
    }
    if (m_session_start_time_isSet) {
        obj.insert(QString("SessionStartTime"), ::OpenAPI::toJsonValue(m_session_start_time));
    }
    if (m_session_timeout_isSet) {
        obj.insert(QString("SessionTimeout"), ::OpenAPI::toJsonValue(m_session_timeout));
    }
    if (m_ping_slot_period_isSet) {
        obj.insert(QString("PingSlotPeriod"), ::OpenAPI::toJsonValue(m_ping_slot_period));
    }
    return obj;
}

qint32 OAIStartMulticastGroupSession_request_LoRaWAN::getDlDr() const {
    return m_dl_dr;
}
void OAIStartMulticastGroupSession_request_LoRaWAN::setDlDr(const qint32 &dl_dr) {
    m_dl_dr = dl_dr;
    m_dl_dr_isSet = true;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_dl_dr_Set() const{
    return m_dl_dr_isSet;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_dl_dr_Valid() const{
    return m_dl_dr_isValid;
}

qint32 OAIStartMulticastGroupSession_request_LoRaWAN::getDlFreq() const {
    return m_dl_freq;
}
void OAIStartMulticastGroupSession_request_LoRaWAN::setDlFreq(const qint32 &dl_freq) {
    m_dl_freq = dl_freq;
    m_dl_freq_isSet = true;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_dl_freq_Set() const{
    return m_dl_freq_isSet;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_dl_freq_Valid() const{
    return m_dl_freq_isValid;
}

QDateTime OAIStartMulticastGroupSession_request_LoRaWAN::getSessionStartTime() const {
    return m_session_start_time;
}
void OAIStartMulticastGroupSession_request_LoRaWAN::setSessionStartTime(const QDateTime &session_start_time) {
    m_session_start_time = session_start_time;
    m_session_start_time_isSet = true;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_session_start_time_Set() const{
    return m_session_start_time_isSet;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_session_start_time_Valid() const{
    return m_session_start_time_isValid;
}

qint32 OAIStartMulticastGroupSession_request_LoRaWAN::getSessionTimeout() const {
    return m_session_timeout;
}
void OAIStartMulticastGroupSession_request_LoRaWAN::setSessionTimeout(const qint32 &session_timeout) {
    m_session_timeout = session_timeout;
    m_session_timeout_isSet = true;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_session_timeout_Set() const{
    return m_session_timeout_isSet;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_session_timeout_Valid() const{
    return m_session_timeout_isValid;
}

qint32 OAIStartMulticastGroupSession_request_LoRaWAN::getPingSlotPeriod() const {
    return m_ping_slot_period;
}
void OAIStartMulticastGroupSession_request_LoRaWAN::setPingSlotPeriod(const qint32 &ping_slot_period) {
    m_ping_slot_period = ping_slot_period;
    m_ping_slot_period_isSet = true;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_ping_slot_period_Set() const{
    return m_ping_slot_period_isSet;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::is_ping_slot_period_Valid() const{
    return m_ping_slot_period_isValid;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dl_dr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_freq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ping_slot_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartMulticastGroupSession_request_LoRaWAN::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
