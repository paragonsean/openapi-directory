/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetWirelessDeviceStatisticsResponse_LoRaWAN.h
 *
 * 
 */

#ifndef OAIGetWirelessDeviceStatisticsResponse_LoRaWAN_H
#define OAIGetWirelessDeviceStatisticsResponse_LoRaWAN_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetWirelessDeviceStatisticsResponse_LoRaWAN : public OAIObject {
public:
    OAIGetWirelessDeviceStatisticsResponse_LoRaWAN();
    OAIGetWirelessDeviceStatisticsResponse_LoRaWAN(QString json);
    ~OAIGetWirelessDeviceStatisticsResponse_LoRaWAN() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDevEui() const;
    void setDevEui(const QString &dev_eui);
    bool is_dev_eui_Set() const;
    bool is_dev_eui_Valid() const;

    qint32 getFPort() const;
    void setFPort(const qint32 &f_port);
    bool is_f_port_Set() const;
    bool is_f_port_Valid() const;

    qint32 getDataRate() const;
    void setDataRate(const qint32 &data_rate);
    bool is_data_rate_Set() const;
    bool is_data_rate_Valid() const;

    qint32 getFrequency() const;
    void setFrequency(const qint32 &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QList getGateways() const;
    void setGateways(const QList &gateways);
    bool is_gateways_Set() const;
    bool is_gateways_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dev_eui;
    bool m_dev_eui_isSet;
    bool m_dev_eui_isValid;

    qint32 m_f_port;
    bool m_f_port_isSet;
    bool m_f_port_isValid;

    qint32 m_data_rate;
    bool m_data_rate_isSet;
    bool m_data_rate_isValid;

    qint32 m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QList m_gateways;
    bool m_gateways_isSet;
    bool m_gateways_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetWirelessDeviceStatisticsResponse_LoRaWAN)

#endif // OAIGetWirelessDeviceStatisticsResponse_LoRaWAN_H
