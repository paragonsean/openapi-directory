/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFuotaTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFuotaTaskResponse::OAIGetFuotaTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFuotaTaskResponse::OAIGetFuotaTaskResponse() {
    this->initializeModel();
}

OAIGetFuotaTaskResponse::~OAIGetFuotaTaskResponse() {}

void OAIGetFuotaTaskResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_firmware_update_image_isSet = false;
    m_firmware_update_image_isValid = false;

    m_firmware_update_role_isSet = false;
    m_firmware_update_role_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_redundancy_percent_isSet = false;
    m_redundancy_percent_isValid = false;

    m_fragment_size_bytes_isSet = false;
    m_fragment_size_bytes_isValid = false;

    m_fragment_interval_ms_isSet = false;
    m_fragment_interval_ms_isValid = false;
}

void OAIGetFuotaTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFuotaTaskResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_firmware_update_image_isValid = ::OpenAPI::fromJsonValue(m_firmware_update_image, json[QString("FirmwareUpdateImage")]);
    m_firmware_update_image_isSet = !json[QString("FirmwareUpdateImage")].isNull() && m_firmware_update_image_isValid;

    m_firmware_update_role_isValid = ::OpenAPI::fromJsonValue(m_firmware_update_role, json[QString("FirmwareUpdateRole")]);
    m_firmware_update_role_isSet = !json[QString("FirmwareUpdateRole")].isNull() && m_firmware_update_role_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_redundancy_percent_isValid = ::OpenAPI::fromJsonValue(m_redundancy_percent, json[QString("RedundancyPercent")]);
    m_redundancy_percent_isSet = !json[QString("RedundancyPercent")].isNull() && m_redundancy_percent_isValid;

    m_fragment_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_fragment_size_bytes, json[QString("FragmentSizeBytes")]);
    m_fragment_size_bytes_isSet = !json[QString("FragmentSizeBytes")].isNull() && m_fragment_size_bytes_isValid;

    m_fragment_interval_ms_isValid = ::OpenAPI::fromJsonValue(m_fragment_interval_ms, json[QString("FragmentIntervalMS")]);
    m_fragment_interval_ms_isSet = !json[QString("FragmentIntervalMS")].isNull() && m_fragment_interval_ms_isValid;
}

QString OAIGetFuotaTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFuotaTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_firmware_update_image_isSet) {
        obj.insert(QString("FirmwareUpdateImage"), ::OpenAPI::toJsonValue(m_firmware_update_image));
    }
    if (m_firmware_update_role_isSet) {
        obj.insert(QString("FirmwareUpdateRole"), ::OpenAPI::toJsonValue(m_firmware_update_role));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_redundancy_percent_isSet) {
        obj.insert(QString("RedundancyPercent"), ::OpenAPI::toJsonValue(m_redundancy_percent));
    }
    if (m_fragment_size_bytes_isSet) {
        obj.insert(QString("FragmentSizeBytes"), ::OpenAPI::toJsonValue(m_fragment_size_bytes));
    }
    if (m_fragment_interval_ms_isSet) {
        obj.insert(QString("FragmentIntervalMS"), ::OpenAPI::toJsonValue(m_fragment_interval_ms));
    }
    return obj;
}

QString OAIGetFuotaTaskResponse::getArn() const {
    return m_arn;
}
void OAIGetFuotaTaskResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetFuotaTaskResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetFuotaTaskResponse::getId() const {
    return m_id;
}
void OAIGetFuotaTaskResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetFuotaTaskResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIFuotaTaskStatus OAIGetFuotaTaskResponse::getStatus() const {
    return m_status;
}
void OAIGetFuotaTaskResponse::setStatus(const OAIFuotaTaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetFuotaTaskResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetFuotaTaskResponse::getName() const {
    return m_name;
}
void OAIGetFuotaTaskResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetFuotaTaskResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetFuotaTaskResponse::getDescription() const {
    return m_description;
}
void OAIGetFuotaTaskResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetFuotaTaskResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAILoRaWANFuotaTaskGetInfo OAIGetFuotaTaskResponse::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIGetFuotaTaskResponse::setLoRaWan(const OAILoRaWANFuotaTaskGetInfo &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIGetFuotaTaskResponse::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

QString OAIGetFuotaTaskResponse::getFirmwareUpdateImage() const {
    return m_firmware_update_image;
}
void OAIGetFuotaTaskResponse::setFirmwareUpdateImage(const QString &firmware_update_image) {
    m_firmware_update_image = firmware_update_image;
    m_firmware_update_image_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_firmware_update_image_Set() const{
    return m_firmware_update_image_isSet;
}

bool OAIGetFuotaTaskResponse::is_firmware_update_image_Valid() const{
    return m_firmware_update_image_isValid;
}

QString OAIGetFuotaTaskResponse::getFirmwareUpdateRole() const {
    return m_firmware_update_role;
}
void OAIGetFuotaTaskResponse::setFirmwareUpdateRole(const QString &firmware_update_role) {
    m_firmware_update_role = firmware_update_role;
    m_firmware_update_role_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_firmware_update_role_Set() const{
    return m_firmware_update_role_isSet;
}

bool OAIGetFuotaTaskResponse::is_firmware_update_role_Valid() const{
    return m_firmware_update_role_isValid;
}

QDateTime OAIGetFuotaTaskResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIGetFuotaTaskResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGetFuotaTaskResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIGetFuotaTaskResponse::getRedundancyPercent() const {
    return m_redundancy_percent;
}
void OAIGetFuotaTaskResponse::setRedundancyPercent(const qint32 &redundancy_percent) {
    m_redundancy_percent = redundancy_percent;
    m_redundancy_percent_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_redundancy_percent_Set() const{
    return m_redundancy_percent_isSet;
}

bool OAIGetFuotaTaskResponse::is_redundancy_percent_Valid() const{
    return m_redundancy_percent_isValid;
}

qint32 OAIGetFuotaTaskResponse::getFragmentSizeBytes() const {
    return m_fragment_size_bytes;
}
void OAIGetFuotaTaskResponse::setFragmentSizeBytes(const qint32 &fragment_size_bytes) {
    m_fragment_size_bytes = fragment_size_bytes;
    m_fragment_size_bytes_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_fragment_size_bytes_Set() const{
    return m_fragment_size_bytes_isSet;
}

bool OAIGetFuotaTaskResponse::is_fragment_size_bytes_Valid() const{
    return m_fragment_size_bytes_isValid;
}

qint32 OAIGetFuotaTaskResponse::getFragmentIntervalMs() const {
    return m_fragment_interval_ms;
}
void OAIGetFuotaTaskResponse::setFragmentIntervalMs(const qint32 &fragment_interval_ms) {
    m_fragment_interval_ms = fragment_interval_ms;
    m_fragment_interval_ms_isSet = true;
}

bool OAIGetFuotaTaskResponse::is_fragment_interval_ms_Set() const{
    return m_fragment_interval_ms_isSet;
}

bool OAIGetFuotaTaskResponse::is_fragment_interval_ms_Valid() const{
    return m_fragment_interval_ms_isValid;
}

bool OAIGetFuotaTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_update_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_update_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redundancy_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_interval_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFuotaTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
