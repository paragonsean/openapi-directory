/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetServiceEndpointResponse.h
 *
 * 
 */

#ifndef OAIGetServiceEndpointResponse_H
#define OAIGetServiceEndpointResponse_H

#include <QJsonObject>

#include "OAIWirelessGatewayServiceType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetServiceEndpointResponse : public OAIObject {
public:
    OAIGetServiceEndpointResponse();
    OAIGetServiceEndpointResponse(QString json);
    ~OAIGetServiceEndpointResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIWirelessGatewayServiceType getServiceType() const;
    void setServiceType(const OAIWirelessGatewayServiceType &service_type);
    bool is_service_type_Set() const;
    bool is_service_type_Valid() const;

    QString getServiceEndpoint() const;
    void setServiceEndpoint(const QString &service_endpoint);
    bool is_service_endpoint_Set() const;
    bool is_service_endpoint_Valid() const;

    QString getServerTrust() const;
    void setServerTrust(const QString &server_trust);
    bool is_server_trust_Set() const;
    bool is_server_trust_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIWirelessGatewayServiceType m_service_type;
    bool m_service_type_isSet;
    bool m_service_type_isValid;

    QString m_service_endpoint;
    bool m_service_endpoint_isSet;
    bool m_service_endpoint_isValid;

    QString m_server_trust;
    bool m_server_trust_isSet;
    bool m_server_trust_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetServiceEndpointResponse)

#endif // OAIGetServiceEndpointResponse_H
