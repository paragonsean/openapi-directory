/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServiceEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServiceEndpointResponse::OAIGetServiceEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServiceEndpointResponse::OAIGetServiceEndpointResponse() {
    this->initializeModel();
}

OAIGetServiceEndpointResponse::~OAIGetServiceEndpointResponse() {}

void OAIGetServiceEndpointResponse::initializeModel() {

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_service_endpoint_isSet = false;
    m_service_endpoint_isValid = false;

    m_server_trust_isSet = false;
    m_server_trust_isValid = false;
}

void OAIGetServiceEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServiceEndpointResponse::fromJsonObject(QJsonObject json) {

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("ServiceType")]);
    m_service_type_isSet = !json[QString("ServiceType")].isNull() && m_service_type_isValid;

    m_service_endpoint_isValid = ::OpenAPI::fromJsonValue(m_service_endpoint, json[QString("ServiceEndpoint")]);
    m_service_endpoint_isSet = !json[QString("ServiceEndpoint")].isNull() && m_service_endpoint_isValid;

    m_server_trust_isValid = ::OpenAPI::fromJsonValue(m_server_trust, json[QString("ServerTrust")]);
    m_server_trust_isSet = !json[QString("ServerTrust")].isNull() && m_server_trust_isValid;
}

QString OAIGetServiceEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServiceEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_service_type.isSet()) {
        obj.insert(QString("ServiceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_service_endpoint_isSet) {
        obj.insert(QString("ServiceEndpoint"), ::OpenAPI::toJsonValue(m_service_endpoint));
    }
    if (m_server_trust_isSet) {
        obj.insert(QString("ServerTrust"), ::OpenAPI::toJsonValue(m_server_trust));
    }
    return obj;
}

OAIWirelessGatewayServiceType OAIGetServiceEndpointResponse::getServiceType() const {
    return m_service_type;
}
void OAIGetServiceEndpointResponse::setServiceType(const OAIWirelessGatewayServiceType &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAIGetServiceEndpointResponse::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAIGetServiceEndpointResponse::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QString OAIGetServiceEndpointResponse::getServiceEndpoint() const {
    return m_service_endpoint;
}
void OAIGetServiceEndpointResponse::setServiceEndpoint(const QString &service_endpoint) {
    m_service_endpoint = service_endpoint;
    m_service_endpoint_isSet = true;
}

bool OAIGetServiceEndpointResponse::is_service_endpoint_Set() const{
    return m_service_endpoint_isSet;
}

bool OAIGetServiceEndpointResponse::is_service_endpoint_Valid() const{
    return m_service_endpoint_isValid;
}

QString OAIGetServiceEndpointResponse::getServerTrust() const {
    return m_server_trust;
}
void OAIGetServiceEndpointResponse::setServerTrust(const QString &server_trust) {
    m_server_trust = server_trust;
    m_server_trust_isSet = true;
}

bool OAIGetServiceEndpointResponse::is_server_trust_Set() const{
    return m_server_trust_isSet;
}

bool OAIGetServiceEndpointResponse::is_server_trust_Valid() const{
    return m_server_trust_isValid;
}

bool OAIGetServiceEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_trust_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServiceEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
