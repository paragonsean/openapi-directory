/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISidewalkSendDataToDevice.h
 *
 * Information about a Sidewalk router.
 */

#ifndef OAISidewalkSendDataToDevice_H
#define OAISidewalkSendDataToDevice_H

#include <QJsonObject>

#include "OAIMessageType.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISidewalkSendDataToDevice : public OAIObject {
public:
    OAISidewalkSendDataToDevice();
    OAISidewalkSendDataToDevice(QString json);
    ~OAISidewalkSendDataToDevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getSeq() const;
    void setSeq(const qint32 &seq);
    bool is_seq_Set() const;
    bool is_seq_Valid() const;

    OAIMessageType getMessageType() const;
    void setMessageType(const OAIMessageType &message_type);
    bool is_message_type_Set() const;
    bool is_message_type_Valid() const;

    qint32 getAckModeRetryDurationSecs() const;
    void setAckModeRetryDurationSecs(const qint32 &ack_mode_retry_duration_secs);
    bool is_ack_mode_retry_duration_secs_Set() const;
    bool is_ack_mode_retry_duration_secs_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_seq;
    bool m_seq_isSet;
    bool m_seq_isValid;

    OAIMessageType m_message_type;
    bool m_message_type_isSet;
    bool m_message_type_isValid;

    qint32 m_ack_mode_retry_duration_secs;
    bool m_ack_mode_retry_duration_secs_isSet;
    bool m_ack_mode_retry_duration_secs_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISidewalkSendDataToDevice)

#endif // OAISidewalkSendDataToDevice_H
