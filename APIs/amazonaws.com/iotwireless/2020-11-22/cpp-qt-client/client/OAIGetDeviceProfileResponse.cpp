/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDeviceProfileResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDeviceProfileResponse::OAIGetDeviceProfileResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDeviceProfileResponse::OAIGetDeviceProfileResponse() {
    this->initializeModel();
}

OAIGetDeviceProfileResponse::~OAIGetDeviceProfileResponse() {}

void OAIGetDeviceProfileResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_sidewalk_isSet = false;
    m_sidewalk_isValid = false;
}

void OAIGetDeviceProfileResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDeviceProfileResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_sidewalk_isValid = ::OpenAPI::fromJsonValue(m_sidewalk, json[QString("Sidewalk")]);
    m_sidewalk_isSet = !json[QString("Sidewalk")].isNull() && m_sidewalk_isValid;
}

QString OAIGetDeviceProfileResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDeviceProfileResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_sidewalk.isSet()) {
        obj.insert(QString("Sidewalk"), ::OpenAPI::toJsonValue(m_sidewalk));
    }
    return obj;
}

QString OAIGetDeviceProfileResponse::getArn() const {
    return m_arn;
}
void OAIGetDeviceProfileResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetDeviceProfileResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetDeviceProfileResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetDeviceProfileResponse::getName() const {
    return m_name;
}
void OAIGetDeviceProfileResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetDeviceProfileResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetDeviceProfileResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetDeviceProfileResponse::getId() const {
    return m_id;
}
void OAIGetDeviceProfileResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetDeviceProfileResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetDeviceProfileResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIGetDeviceProfileResponse_LoRaWAN OAIGetDeviceProfileResponse::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIGetDeviceProfileResponse::setLoRaWan(const OAIGetDeviceProfileResponse_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIGetDeviceProfileResponse::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIGetDeviceProfileResponse::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

OAIGetDeviceProfileResponse_Sidewalk OAIGetDeviceProfileResponse::getSidewalk() const {
    return m_sidewalk;
}
void OAIGetDeviceProfileResponse::setSidewalk(const OAIGetDeviceProfileResponse_Sidewalk &sidewalk) {
    m_sidewalk = sidewalk;
    m_sidewalk_isSet = true;
}

bool OAIGetDeviceProfileResponse::is_sidewalk_Set() const{
    return m_sidewalk_isSet;
}

bool OAIGetDeviceProfileResponse::is_sidewalk_Valid() const{
    return m_sidewalk_isValid;
}

bool OAIGetDeviceProfileResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDeviceProfileResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
