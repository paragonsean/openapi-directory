/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWirelessDeviceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWirelessDeviceResponse::OAIGetWirelessDeviceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWirelessDeviceResponse::OAIGetWirelessDeviceResponse() {
    this->initializeModel();
}

OAIGetWirelessDeviceResponse::~OAIGetWirelessDeviceResponse() {}

void OAIGetWirelessDeviceResponse::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_thing_name_isSet = false;
    m_thing_name_isValid = false;

    m_thing_arn_isSet = false;
    m_thing_arn_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_sidewalk_isSet = false;
    m_sidewalk_isValid = false;

    m_positioning_isSet = false;
    m_positioning_isValid = false;
}

void OAIGetWirelessDeviceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWirelessDeviceResponse::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("DestinationName")]);
    m_destination_name_isSet = !json[QString("DestinationName")].isNull() && m_destination_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_thing_name_isValid = ::OpenAPI::fromJsonValue(m_thing_name, json[QString("ThingName")]);
    m_thing_name_isSet = !json[QString("ThingName")].isNull() && m_thing_name_isValid;

    m_thing_arn_isValid = ::OpenAPI::fromJsonValue(m_thing_arn, json[QString("ThingArn")]);
    m_thing_arn_isSet = !json[QString("ThingArn")].isNull() && m_thing_arn_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_sidewalk_isValid = ::OpenAPI::fromJsonValue(m_sidewalk, json[QString("Sidewalk")]);
    m_sidewalk_isSet = !json[QString("Sidewalk")].isNull() && m_sidewalk_isValid;

    m_positioning_isValid = ::OpenAPI::fromJsonValue(m_positioning, json[QString("Positioning")]);
    m_positioning_isSet = !json[QString("Positioning")].isNull() && m_positioning_isValid;
}

QString OAIGetWirelessDeviceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWirelessDeviceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("DestinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_thing_name_isSet) {
        obj.insert(QString("ThingName"), ::OpenAPI::toJsonValue(m_thing_name));
    }
    if (m_thing_arn_isSet) {
        obj.insert(QString("ThingArn"), ::OpenAPI::toJsonValue(m_thing_arn));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_sidewalk.isSet()) {
        obj.insert(QString("Sidewalk"), ::OpenAPI::toJsonValue(m_sidewalk));
    }
    if (m_positioning.isSet()) {
        obj.insert(QString("Positioning"), ::OpenAPI::toJsonValue(m_positioning));
    }
    return obj;
}

OAIWirelessDeviceType OAIGetWirelessDeviceResponse::getType() const {
    return m_type;
}
void OAIGetWirelessDeviceResponse::setType(const OAIWirelessDeviceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetWirelessDeviceResponse::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetWirelessDeviceResponse::getName() const {
    return m_name;
}
void OAIGetWirelessDeviceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetWirelessDeviceResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetWirelessDeviceResponse::getDescription() const {
    return m_description;
}
void OAIGetWirelessDeviceResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetWirelessDeviceResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetWirelessDeviceResponse::getDestinationName() const {
    return m_destination_name;
}
void OAIGetWirelessDeviceResponse::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIGetWirelessDeviceResponse::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIGetWirelessDeviceResponse::getId() const {
    return m_id;
}
void OAIGetWirelessDeviceResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetWirelessDeviceResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetWirelessDeviceResponse::getArn() const {
    return m_arn;
}
void OAIGetWirelessDeviceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetWirelessDeviceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetWirelessDeviceResponse::getThingName() const {
    return m_thing_name;
}
void OAIGetWirelessDeviceResponse::setThingName(const QString &thing_name) {
    m_thing_name = thing_name;
    m_thing_name_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_thing_name_Set() const{
    return m_thing_name_isSet;
}

bool OAIGetWirelessDeviceResponse::is_thing_name_Valid() const{
    return m_thing_name_isValid;
}

QString OAIGetWirelessDeviceResponse::getThingArn() const {
    return m_thing_arn;
}
void OAIGetWirelessDeviceResponse::setThingArn(const QString &thing_arn) {
    m_thing_arn = thing_arn;
    m_thing_arn_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_thing_arn_Set() const{
    return m_thing_arn_isSet;
}

bool OAIGetWirelessDeviceResponse::is_thing_arn_Valid() const{
    return m_thing_arn_isValid;
}

OAIGetWirelessDeviceResponse_LoRaWAN OAIGetWirelessDeviceResponse::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIGetWirelessDeviceResponse::setLoRaWan(const OAIGetWirelessDeviceResponse_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIGetWirelessDeviceResponse::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

OAIGetWirelessDeviceResponse_Sidewalk OAIGetWirelessDeviceResponse::getSidewalk() const {
    return m_sidewalk;
}
void OAIGetWirelessDeviceResponse::setSidewalk(const OAIGetWirelessDeviceResponse_Sidewalk &sidewalk) {
    m_sidewalk = sidewalk;
    m_sidewalk_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_sidewalk_Set() const{
    return m_sidewalk_isSet;
}

bool OAIGetWirelessDeviceResponse::is_sidewalk_Valid() const{
    return m_sidewalk_isValid;
}

OAIPositioningConfigStatus OAIGetWirelessDeviceResponse::getPositioning() const {
    return m_positioning;
}
void OAIGetWirelessDeviceResponse::setPositioning(const OAIPositioningConfigStatus &positioning) {
    m_positioning = positioning;
    m_positioning_isSet = true;
}

bool OAIGetWirelessDeviceResponse::is_positioning_Set() const{
    return m_positioning_isSet;
}

bool OAIGetWirelessDeviceResponse::is_positioning_Valid() const{
    return m_positioning_isValid;
}

bool OAIGetWirelessDeviceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thing_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thing_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positioning.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWirelessDeviceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
