/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoRaWANGetServiceProfileInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoRaWANGetServiceProfileInfo::OAILoRaWANGetServiceProfileInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoRaWANGetServiceProfileInfo::OAILoRaWANGetServiceProfileInfo() {
    this->initializeModel();
}

OAILoRaWANGetServiceProfileInfo::~OAILoRaWANGetServiceProfileInfo() {}

void OAILoRaWANGetServiceProfileInfo::initializeModel() {

    m_ul_rate_isSet = false;
    m_ul_rate_isValid = false;

    m_ul_bucket_size_isSet = false;
    m_ul_bucket_size_isValid = false;

    m_ul_rate_policy_isSet = false;
    m_ul_rate_policy_isValid = false;

    m_dl_rate_isSet = false;
    m_dl_rate_isValid = false;

    m_dl_bucket_size_isSet = false;
    m_dl_bucket_size_isValid = false;

    m_dl_rate_policy_isSet = false;
    m_dl_rate_policy_isValid = false;

    m_add_gw_metadata_isSet = false;
    m_add_gw_metadata_isValid = false;

    m_dev_status_req_freq_isSet = false;
    m_dev_status_req_freq_isValid = false;

    m_report_dev_status_battery_isSet = false;
    m_report_dev_status_battery_isValid = false;

    m_report_dev_status_margin_isSet = false;
    m_report_dev_status_margin_isValid = false;

    m_dr_min_isSet = false;
    m_dr_min_isValid = false;

    m_dr_max_isSet = false;
    m_dr_max_isValid = false;

    m_channel_mask_isSet = false;
    m_channel_mask_isValid = false;

    m_pr_allowed_isSet = false;
    m_pr_allowed_isValid = false;

    m_hr_allowed_isSet = false;
    m_hr_allowed_isValid = false;

    m_ra_allowed_isSet = false;
    m_ra_allowed_isValid = false;

    m_nwk_geo_loc_isSet = false;
    m_nwk_geo_loc_isValid = false;

    m_target_per_isSet = false;
    m_target_per_isValid = false;

    m_min_gw_diversity_isSet = false;
    m_min_gw_diversity_isValid = false;
}

void OAILoRaWANGetServiceProfileInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoRaWANGetServiceProfileInfo::fromJsonObject(QJsonObject json) {

    m_ul_rate_isValid = ::OpenAPI::fromJsonValue(m_ul_rate, json[QString("UlRate")]);
    m_ul_rate_isSet = !json[QString("UlRate")].isNull() && m_ul_rate_isValid;

    m_ul_bucket_size_isValid = ::OpenAPI::fromJsonValue(m_ul_bucket_size, json[QString("UlBucketSize")]);
    m_ul_bucket_size_isSet = !json[QString("UlBucketSize")].isNull() && m_ul_bucket_size_isValid;

    m_ul_rate_policy_isValid = ::OpenAPI::fromJsonValue(m_ul_rate_policy, json[QString("UlRatePolicy")]);
    m_ul_rate_policy_isSet = !json[QString("UlRatePolicy")].isNull() && m_ul_rate_policy_isValid;

    m_dl_rate_isValid = ::OpenAPI::fromJsonValue(m_dl_rate, json[QString("DlRate")]);
    m_dl_rate_isSet = !json[QString("DlRate")].isNull() && m_dl_rate_isValid;

    m_dl_bucket_size_isValid = ::OpenAPI::fromJsonValue(m_dl_bucket_size, json[QString("DlBucketSize")]);
    m_dl_bucket_size_isSet = !json[QString("DlBucketSize")].isNull() && m_dl_bucket_size_isValid;

    m_dl_rate_policy_isValid = ::OpenAPI::fromJsonValue(m_dl_rate_policy, json[QString("DlRatePolicy")]);
    m_dl_rate_policy_isSet = !json[QString("DlRatePolicy")].isNull() && m_dl_rate_policy_isValid;

    m_add_gw_metadata_isValid = ::OpenAPI::fromJsonValue(m_add_gw_metadata, json[QString("AddGwMetadata")]);
    m_add_gw_metadata_isSet = !json[QString("AddGwMetadata")].isNull() && m_add_gw_metadata_isValid;

    m_dev_status_req_freq_isValid = ::OpenAPI::fromJsonValue(m_dev_status_req_freq, json[QString("DevStatusReqFreq")]);
    m_dev_status_req_freq_isSet = !json[QString("DevStatusReqFreq")].isNull() && m_dev_status_req_freq_isValid;

    m_report_dev_status_battery_isValid = ::OpenAPI::fromJsonValue(m_report_dev_status_battery, json[QString("ReportDevStatusBattery")]);
    m_report_dev_status_battery_isSet = !json[QString("ReportDevStatusBattery")].isNull() && m_report_dev_status_battery_isValid;

    m_report_dev_status_margin_isValid = ::OpenAPI::fromJsonValue(m_report_dev_status_margin, json[QString("ReportDevStatusMargin")]);
    m_report_dev_status_margin_isSet = !json[QString("ReportDevStatusMargin")].isNull() && m_report_dev_status_margin_isValid;

    m_dr_min_isValid = ::OpenAPI::fromJsonValue(m_dr_min, json[QString("DrMin")]);
    m_dr_min_isSet = !json[QString("DrMin")].isNull() && m_dr_min_isValid;

    m_dr_max_isValid = ::OpenAPI::fromJsonValue(m_dr_max, json[QString("DrMax")]);
    m_dr_max_isSet = !json[QString("DrMax")].isNull() && m_dr_max_isValid;

    m_channel_mask_isValid = ::OpenAPI::fromJsonValue(m_channel_mask, json[QString("ChannelMask")]);
    m_channel_mask_isSet = !json[QString("ChannelMask")].isNull() && m_channel_mask_isValid;

    m_pr_allowed_isValid = ::OpenAPI::fromJsonValue(m_pr_allowed, json[QString("PrAllowed")]);
    m_pr_allowed_isSet = !json[QString("PrAllowed")].isNull() && m_pr_allowed_isValid;

    m_hr_allowed_isValid = ::OpenAPI::fromJsonValue(m_hr_allowed, json[QString("HrAllowed")]);
    m_hr_allowed_isSet = !json[QString("HrAllowed")].isNull() && m_hr_allowed_isValid;

    m_ra_allowed_isValid = ::OpenAPI::fromJsonValue(m_ra_allowed, json[QString("RaAllowed")]);
    m_ra_allowed_isSet = !json[QString("RaAllowed")].isNull() && m_ra_allowed_isValid;

    m_nwk_geo_loc_isValid = ::OpenAPI::fromJsonValue(m_nwk_geo_loc, json[QString("NwkGeoLoc")]);
    m_nwk_geo_loc_isSet = !json[QString("NwkGeoLoc")].isNull() && m_nwk_geo_loc_isValid;

    m_target_per_isValid = ::OpenAPI::fromJsonValue(m_target_per, json[QString("TargetPer")]);
    m_target_per_isSet = !json[QString("TargetPer")].isNull() && m_target_per_isValid;

    m_min_gw_diversity_isValid = ::OpenAPI::fromJsonValue(m_min_gw_diversity, json[QString("MinGwDiversity")]);
    m_min_gw_diversity_isSet = !json[QString("MinGwDiversity")].isNull() && m_min_gw_diversity_isValid;
}

QString OAILoRaWANGetServiceProfileInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoRaWANGetServiceProfileInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_ul_rate_isSet) {
        obj.insert(QString("UlRate"), ::OpenAPI::toJsonValue(m_ul_rate));
    }
    if (m_ul_bucket_size_isSet) {
        obj.insert(QString("UlBucketSize"), ::OpenAPI::toJsonValue(m_ul_bucket_size));
    }
    if (m_ul_rate_policy_isSet) {
        obj.insert(QString("UlRatePolicy"), ::OpenAPI::toJsonValue(m_ul_rate_policy));
    }
    if (m_dl_rate_isSet) {
        obj.insert(QString("DlRate"), ::OpenAPI::toJsonValue(m_dl_rate));
    }
    if (m_dl_bucket_size_isSet) {
        obj.insert(QString("DlBucketSize"), ::OpenAPI::toJsonValue(m_dl_bucket_size));
    }
    if (m_dl_rate_policy_isSet) {
        obj.insert(QString("DlRatePolicy"), ::OpenAPI::toJsonValue(m_dl_rate_policy));
    }
    if (m_add_gw_metadata_isSet) {
        obj.insert(QString("AddGwMetadata"), ::OpenAPI::toJsonValue(m_add_gw_metadata));
    }
    if (m_dev_status_req_freq_isSet) {
        obj.insert(QString("DevStatusReqFreq"), ::OpenAPI::toJsonValue(m_dev_status_req_freq));
    }
    if (m_report_dev_status_battery_isSet) {
        obj.insert(QString("ReportDevStatusBattery"), ::OpenAPI::toJsonValue(m_report_dev_status_battery));
    }
    if (m_report_dev_status_margin_isSet) {
        obj.insert(QString("ReportDevStatusMargin"), ::OpenAPI::toJsonValue(m_report_dev_status_margin));
    }
    if (m_dr_min_isSet) {
        obj.insert(QString("DrMin"), ::OpenAPI::toJsonValue(m_dr_min));
    }
    if (m_dr_max_isSet) {
        obj.insert(QString("DrMax"), ::OpenAPI::toJsonValue(m_dr_max));
    }
    if (m_channel_mask_isSet) {
        obj.insert(QString("ChannelMask"), ::OpenAPI::toJsonValue(m_channel_mask));
    }
    if (m_pr_allowed_isSet) {
        obj.insert(QString("PrAllowed"), ::OpenAPI::toJsonValue(m_pr_allowed));
    }
    if (m_hr_allowed_isSet) {
        obj.insert(QString("HrAllowed"), ::OpenAPI::toJsonValue(m_hr_allowed));
    }
    if (m_ra_allowed_isSet) {
        obj.insert(QString("RaAllowed"), ::OpenAPI::toJsonValue(m_ra_allowed));
    }
    if (m_nwk_geo_loc_isSet) {
        obj.insert(QString("NwkGeoLoc"), ::OpenAPI::toJsonValue(m_nwk_geo_loc));
    }
    if (m_target_per_isSet) {
        obj.insert(QString("TargetPer"), ::OpenAPI::toJsonValue(m_target_per));
    }
    if (m_min_gw_diversity_isSet) {
        obj.insert(QString("MinGwDiversity"), ::OpenAPI::toJsonValue(m_min_gw_diversity));
    }
    return obj;
}

qint32 OAILoRaWANGetServiceProfileInfo::getUlRate() const {
    return m_ul_rate;
}
void OAILoRaWANGetServiceProfileInfo::setUlRate(const qint32 &ul_rate) {
    m_ul_rate = ul_rate;
    m_ul_rate_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_ul_rate_Set() const{
    return m_ul_rate_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_ul_rate_Valid() const{
    return m_ul_rate_isValid;
}

qint32 OAILoRaWANGetServiceProfileInfo::getUlBucketSize() const {
    return m_ul_bucket_size;
}
void OAILoRaWANGetServiceProfileInfo::setUlBucketSize(const qint32 &ul_bucket_size) {
    m_ul_bucket_size = ul_bucket_size;
    m_ul_bucket_size_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_ul_bucket_size_Set() const{
    return m_ul_bucket_size_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_ul_bucket_size_Valid() const{
    return m_ul_bucket_size_isValid;
}

QString OAILoRaWANGetServiceProfileInfo::getUlRatePolicy() const {
    return m_ul_rate_policy;
}
void OAILoRaWANGetServiceProfileInfo::setUlRatePolicy(const QString &ul_rate_policy) {
    m_ul_rate_policy = ul_rate_policy;
    m_ul_rate_policy_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_ul_rate_policy_Set() const{
    return m_ul_rate_policy_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_ul_rate_policy_Valid() const{
    return m_ul_rate_policy_isValid;
}

qint32 OAILoRaWANGetServiceProfileInfo::getDlRate() const {
    return m_dl_rate;
}
void OAILoRaWANGetServiceProfileInfo::setDlRate(const qint32 &dl_rate) {
    m_dl_rate = dl_rate;
    m_dl_rate_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_dl_rate_Set() const{
    return m_dl_rate_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_dl_rate_Valid() const{
    return m_dl_rate_isValid;
}

qint32 OAILoRaWANGetServiceProfileInfo::getDlBucketSize() const {
    return m_dl_bucket_size;
}
void OAILoRaWANGetServiceProfileInfo::setDlBucketSize(const qint32 &dl_bucket_size) {
    m_dl_bucket_size = dl_bucket_size;
    m_dl_bucket_size_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_dl_bucket_size_Set() const{
    return m_dl_bucket_size_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_dl_bucket_size_Valid() const{
    return m_dl_bucket_size_isValid;
}

QString OAILoRaWANGetServiceProfileInfo::getDlRatePolicy() const {
    return m_dl_rate_policy;
}
void OAILoRaWANGetServiceProfileInfo::setDlRatePolicy(const QString &dl_rate_policy) {
    m_dl_rate_policy = dl_rate_policy;
    m_dl_rate_policy_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_dl_rate_policy_Set() const{
    return m_dl_rate_policy_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_dl_rate_policy_Valid() const{
    return m_dl_rate_policy_isValid;
}

bool OAILoRaWANGetServiceProfileInfo::getAddGwMetadata() const {
    return m_add_gw_metadata;
}
void OAILoRaWANGetServiceProfileInfo::setAddGwMetadata(const bool &add_gw_metadata) {
    m_add_gw_metadata = add_gw_metadata;
    m_add_gw_metadata_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_add_gw_metadata_Set() const{
    return m_add_gw_metadata_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_add_gw_metadata_Valid() const{
    return m_add_gw_metadata_isValid;
}

qint32 OAILoRaWANGetServiceProfileInfo::getDevStatusReqFreq() const {
    return m_dev_status_req_freq;
}
void OAILoRaWANGetServiceProfileInfo::setDevStatusReqFreq(const qint32 &dev_status_req_freq) {
    m_dev_status_req_freq = dev_status_req_freq;
    m_dev_status_req_freq_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_dev_status_req_freq_Set() const{
    return m_dev_status_req_freq_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_dev_status_req_freq_Valid() const{
    return m_dev_status_req_freq_isValid;
}

bool OAILoRaWANGetServiceProfileInfo::getReportDevStatusBattery() const {
    return m_report_dev_status_battery;
}
void OAILoRaWANGetServiceProfileInfo::setReportDevStatusBattery(const bool &report_dev_status_battery) {
    m_report_dev_status_battery = report_dev_status_battery;
    m_report_dev_status_battery_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_report_dev_status_battery_Set() const{
    return m_report_dev_status_battery_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_report_dev_status_battery_Valid() const{
    return m_report_dev_status_battery_isValid;
}

bool OAILoRaWANGetServiceProfileInfo::getReportDevStatusMargin() const {
    return m_report_dev_status_margin;
}
void OAILoRaWANGetServiceProfileInfo::setReportDevStatusMargin(const bool &report_dev_status_margin) {
    m_report_dev_status_margin = report_dev_status_margin;
    m_report_dev_status_margin_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_report_dev_status_margin_Set() const{
    return m_report_dev_status_margin_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_report_dev_status_margin_Valid() const{
    return m_report_dev_status_margin_isValid;
}

qint32 OAILoRaWANGetServiceProfileInfo::getDrMin() const {
    return m_dr_min;
}
void OAILoRaWANGetServiceProfileInfo::setDrMin(const qint32 &dr_min) {
    m_dr_min = dr_min;
    m_dr_min_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_dr_min_Set() const{
    return m_dr_min_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_dr_min_Valid() const{
    return m_dr_min_isValid;
}

qint32 OAILoRaWANGetServiceProfileInfo::getDrMax() const {
    return m_dr_max;
}
void OAILoRaWANGetServiceProfileInfo::setDrMax(const qint32 &dr_max) {
    m_dr_max = dr_max;
    m_dr_max_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_dr_max_Set() const{
    return m_dr_max_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_dr_max_Valid() const{
    return m_dr_max_isValid;
}

QString OAILoRaWANGetServiceProfileInfo::getChannelMask() const {
    return m_channel_mask;
}
void OAILoRaWANGetServiceProfileInfo::setChannelMask(const QString &channel_mask) {
    m_channel_mask = channel_mask;
    m_channel_mask_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_channel_mask_Set() const{
    return m_channel_mask_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_channel_mask_Valid() const{
    return m_channel_mask_isValid;
}

bool OAILoRaWANGetServiceProfileInfo::getPrAllowed() const {
    return m_pr_allowed;
}
void OAILoRaWANGetServiceProfileInfo::setPrAllowed(const bool &pr_allowed) {
    m_pr_allowed = pr_allowed;
    m_pr_allowed_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_pr_allowed_Set() const{
    return m_pr_allowed_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_pr_allowed_Valid() const{
    return m_pr_allowed_isValid;
}

bool OAILoRaWANGetServiceProfileInfo::getHrAllowed() const {
    return m_hr_allowed;
}
void OAILoRaWANGetServiceProfileInfo::setHrAllowed(const bool &hr_allowed) {
    m_hr_allowed = hr_allowed;
    m_hr_allowed_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_hr_allowed_Set() const{
    return m_hr_allowed_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_hr_allowed_Valid() const{
    return m_hr_allowed_isValid;
}

bool OAILoRaWANGetServiceProfileInfo::getRaAllowed() const {
    return m_ra_allowed;
}
void OAILoRaWANGetServiceProfileInfo::setRaAllowed(const bool &ra_allowed) {
    m_ra_allowed = ra_allowed;
    m_ra_allowed_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_ra_allowed_Set() const{
    return m_ra_allowed_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_ra_allowed_Valid() const{
    return m_ra_allowed_isValid;
}

bool OAILoRaWANGetServiceProfileInfo::getNwkGeoLoc() const {
    return m_nwk_geo_loc;
}
void OAILoRaWANGetServiceProfileInfo::setNwkGeoLoc(const bool &nwk_geo_loc) {
    m_nwk_geo_loc = nwk_geo_loc;
    m_nwk_geo_loc_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_nwk_geo_loc_Set() const{
    return m_nwk_geo_loc_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_nwk_geo_loc_Valid() const{
    return m_nwk_geo_loc_isValid;
}

qint32 OAILoRaWANGetServiceProfileInfo::getTargetPer() const {
    return m_target_per;
}
void OAILoRaWANGetServiceProfileInfo::setTargetPer(const qint32 &target_per) {
    m_target_per = target_per;
    m_target_per_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_target_per_Set() const{
    return m_target_per_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_target_per_Valid() const{
    return m_target_per_isValid;
}

qint32 OAILoRaWANGetServiceProfileInfo::getMinGwDiversity() const {
    return m_min_gw_diversity;
}
void OAILoRaWANGetServiceProfileInfo::setMinGwDiversity(const qint32 &min_gw_diversity) {
    m_min_gw_diversity = min_gw_diversity;
    m_min_gw_diversity_isSet = true;
}

bool OAILoRaWANGetServiceProfileInfo::is_min_gw_diversity_Set() const{
    return m_min_gw_diversity_isSet;
}

bool OAILoRaWANGetServiceProfileInfo::is_min_gw_diversity_Valid() const{
    return m_min_gw_diversity_isValid;
}

bool OAILoRaWANGetServiceProfileInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ul_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ul_bucket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ul_rate_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_bucket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_rate_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_gw_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dev_status_req_freq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_dev_status_battery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_dev_status_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dr_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dr_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pr_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hr_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ra_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nwk_geo_loc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_per_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_gw_diversity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoRaWANGetServiceProfileInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
