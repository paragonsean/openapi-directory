/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWirelessGatewayRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWirelessGatewayRequest::OAIUpdateWirelessGatewayRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWirelessGatewayRequest::OAIUpdateWirelessGatewayRequest() {
    this->initializeModel();
}

OAIUpdateWirelessGatewayRequest::~OAIUpdateWirelessGatewayRequest() {}

void OAIUpdateWirelessGatewayRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_join_eui_filters_isSet = false;
    m_join_eui_filters_isValid = false;

    m_net_id_filters_isSet = false;
    m_net_id_filters_isValid = false;

    m_max_eirp_isSet = false;
    m_max_eirp_isValid = false;
}

void OAIUpdateWirelessGatewayRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWirelessGatewayRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    if(json["JoinEuiFilters"].isArray()){
        auto arr = json["JoinEuiFilters"].toArray();
        m_join_eui_filters_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_join_eui_filters_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_join_eui_filters_isSet = !jval.isNull() && m_join_eui_filters_isValid;
                m_join_eui_filters.push_back(item);
            }
        }
    }

    m_net_id_filters_isValid = ::OpenAPI::fromJsonValue(m_net_id_filters, json[QString("NetIdFilters")]);
    m_net_id_filters_isSet = !json[QString("NetIdFilters")].isNull() && m_net_id_filters_isValid;

    m_max_eirp_isValid = ::OpenAPI::fromJsonValue(m_max_eirp, json[QString("MaxEirp")]);
    m_max_eirp_isSet = !json[QString("MaxEirp")].isNull() && m_max_eirp_isValid;
}

QString OAIUpdateWirelessGatewayRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWirelessGatewayRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_join_eui_filters.size() > 0) {
        
        obj.insert(QString("JoinEuiFilters"), toJsonValue(m_join_eui_filters));
    }
    if (m_net_id_filters.size() > 0) {
        obj.insert(QString("NetIdFilters"), ::OpenAPI::toJsonValue(m_net_id_filters));
    }
    if (m_max_eirp_isSet) {
        obj.insert(QString("MaxEirp"), ::OpenAPI::toJsonValue(m_max_eirp));
    }
    return obj;
}

QString OAIUpdateWirelessGatewayRequest::getName() const {
    return m_name;
}
void OAIUpdateWirelessGatewayRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateWirelessGatewayRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateWirelessGatewayRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateWirelessGatewayRequest::getDescription() const {
    return m_description;
}
void OAIUpdateWirelessGatewayRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateWirelessGatewayRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateWirelessGatewayRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList<QList> OAIUpdateWirelessGatewayRequest::getJoinEuiFilters() const {
    return m_join_eui_filters;
}
void OAIUpdateWirelessGatewayRequest::setJoinEuiFilters(const QList<QList> &join_eui_filters) {
    m_join_eui_filters = join_eui_filters;
    m_join_eui_filters_isSet = true;
}

bool OAIUpdateWirelessGatewayRequest::is_join_eui_filters_Set() const{
    return m_join_eui_filters_isSet;
}

bool OAIUpdateWirelessGatewayRequest::is_join_eui_filters_Valid() const{
    return m_join_eui_filters_isValid;
}

QList<QString> OAIUpdateWirelessGatewayRequest::getNetIdFilters() const {
    return m_net_id_filters;
}
void OAIUpdateWirelessGatewayRequest::setNetIdFilters(const QList<QString> &net_id_filters) {
    m_net_id_filters = net_id_filters;
    m_net_id_filters_isSet = true;
}

bool OAIUpdateWirelessGatewayRequest::is_net_id_filters_Set() const{
    return m_net_id_filters_isSet;
}

bool OAIUpdateWirelessGatewayRequest::is_net_id_filters_Valid() const{
    return m_net_id_filters_isValid;
}

float OAIUpdateWirelessGatewayRequest::getMaxEirp() const {
    return m_max_eirp;
}
void OAIUpdateWirelessGatewayRequest::setMaxEirp(const float &max_eirp) {
    m_max_eirp = max_eirp;
    m_max_eirp_isSet = true;
}

bool OAIUpdateWirelessGatewayRequest::is_max_eirp_Set() const{
    return m_max_eirp_isSet;
}

bool OAIUpdateWirelessGatewayRequest::is_max_eirp_Valid() const{
    return m_max_eirp_isValid;
}

bool OAIUpdateWirelessGatewayRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_eui_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_id_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_eirp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWirelessGatewayRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
