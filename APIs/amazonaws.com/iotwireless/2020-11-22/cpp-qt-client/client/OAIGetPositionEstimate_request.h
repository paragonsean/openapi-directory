/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetPositionEstimate_request.h
 *
 * 
 */

#ifndef OAIGetPositionEstimate_request_H
#define OAIGetPositionEstimate_request_H

#include <QJsonObject>

#include "OAIGetPositionEstimate_request_CellTowers.h"
#include "OAIGetPositionEstimate_request_Gnss.h"
#include "OAIGetPositionEstimate_request_Ip.h"
#include "OAIWiFiAccessPoint.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWiFiAccessPoint;
class OAIGetPositionEstimate_request_CellTowers;
class OAIGetPositionEstimate_request_Ip;
class OAIGetPositionEstimate_request_Gnss;

class OAIGetPositionEstimate_request : public OAIObject {
public:
    OAIGetPositionEstimate_request();
    OAIGetPositionEstimate_request(QString json);
    ~OAIGetPositionEstimate_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIWiFiAccessPoint> getWiFiAccessPoints() const;
    void setWiFiAccessPoints(const QList<OAIWiFiAccessPoint> &wi_fi_access_points);
    bool is_wi_fi_access_points_Set() const;
    bool is_wi_fi_access_points_Valid() const;

    OAIGetPositionEstimate_request_CellTowers getCellTowers() const;
    void setCellTowers(const OAIGetPositionEstimate_request_CellTowers &cell_towers);
    bool is_cell_towers_Set() const;
    bool is_cell_towers_Valid() const;

    OAIGetPositionEstimate_request_Ip getIp() const;
    void setIp(const OAIGetPositionEstimate_request_Ip &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    OAIGetPositionEstimate_request_Gnss getGnss() const;
    void setGnss(const OAIGetPositionEstimate_request_Gnss &gnss);
    bool is_gnss_Set() const;
    bool is_gnss_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIWiFiAccessPoint> m_wi_fi_access_points;
    bool m_wi_fi_access_points_isSet;
    bool m_wi_fi_access_points_isValid;

    OAIGetPositionEstimate_request_CellTowers m_cell_towers;
    bool m_cell_towers_isSet;
    bool m_cell_towers_isValid;

    OAIGetPositionEstimate_request_Ip m_ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    OAIGetPositionEstimate_request_Gnss m_gnss;
    bool m_gnss_isSet;
    bool m_gnss_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetPositionEstimate_request)

#endif // OAIGetPositionEstimate_request_H
