/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWirelessGatewayStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWirelessGatewayStatistics::OAIWirelessGatewayStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWirelessGatewayStatistics::OAIWirelessGatewayStatistics() {
    this->initializeModel();
}

OAIWirelessGatewayStatistics::~OAIWirelessGatewayStatistics() {}

void OAIWirelessGatewayStatistics::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_last_uplink_received_at_isSet = false;
    m_last_uplink_received_at_isValid = false;
}

void OAIWirelessGatewayStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWirelessGatewayStatistics::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_last_uplink_received_at_isValid = ::OpenAPI::fromJsonValue(m_last_uplink_received_at, json[QString("LastUplinkReceivedAt")]);
    m_last_uplink_received_at_isSet = !json[QString("LastUplinkReceivedAt")].isNull() && m_last_uplink_received_at_isValid;
}

QString OAIWirelessGatewayStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWirelessGatewayStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_last_uplink_received_at_isSet) {
        obj.insert(QString("LastUplinkReceivedAt"), ::OpenAPI::toJsonValue(m_last_uplink_received_at));
    }
    return obj;
}

QString OAIWirelessGatewayStatistics::getArn() const {
    return m_arn;
}
void OAIWirelessGatewayStatistics::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIWirelessGatewayStatistics::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIWirelessGatewayStatistics::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIWirelessGatewayStatistics::getId() const {
    return m_id;
}
void OAIWirelessGatewayStatistics::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWirelessGatewayStatistics::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWirelessGatewayStatistics::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWirelessGatewayStatistics::getName() const {
    return m_name;
}
void OAIWirelessGatewayStatistics::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWirelessGatewayStatistics::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWirelessGatewayStatistics::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWirelessGatewayStatistics::getDescription() const {
    return m_description;
}
void OAIWirelessGatewayStatistics::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWirelessGatewayStatistics::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWirelessGatewayStatistics::is_description_Valid() const{
    return m_description_isValid;
}

OAIWirelessGatewayStatistics_LoRaWAN OAIWirelessGatewayStatistics::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIWirelessGatewayStatistics::setLoRaWan(const OAIWirelessGatewayStatistics_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIWirelessGatewayStatistics::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIWirelessGatewayStatistics::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

QString OAIWirelessGatewayStatistics::getLastUplinkReceivedAt() const {
    return m_last_uplink_received_at;
}
void OAIWirelessGatewayStatistics::setLastUplinkReceivedAt(const QString &last_uplink_received_at) {
    m_last_uplink_received_at = last_uplink_received_at;
    m_last_uplink_received_at_isSet = true;
}

bool OAIWirelessGatewayStatistics::is_last_uplink_received_at_Set() const{
    return m_last_uplink_received_at_isSet;
}

bool OAIWirelessGatewayStatistics::is_last_uplink_received_at_Valid() const{
    return m_last_uplink_received_at_isValid;
}

bool OAIWirelessGatewayStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_uplink_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWirelessGatewayStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
