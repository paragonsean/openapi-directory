/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDakCertificateMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDakCertificateMetadata::OAIDakCertificateMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDakCertificateMetadata::OAIDakCertificateMetadata() {
    this->initializeModel();
}

OAIDakCertificateMetadata::~OAIDakCertificateMetadata() {}

void OAIDakCertificateMetadata::initializeModel() {

    m_certificate_id_isSet = false;
    m_certificate_id_isValid = false;

    m_max_allowed_signature_isSet = false;
    m_max_allowed_signature_isValid = false;

    m_factory_support_isSet = false;
    m_factory_support_isValid = false;

    m_ap_id_isSet = false;
    m_ap_id_isValid = false;

    m_device_type_id_isSet = false;
    m_device_type_id_isValid = false;
}

void OAIDakCertificateMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDakCertificateMetadata::fromJsonObject(QJsonObject json) {

    m_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_id, json[QString("CertificateId")]);
    m_certificate_id_isSet = !json[QString("CertificateId")].isNull() && m_certificate_id_isValid;

    m_max_allowed_signature_isValid = ::OpenAPI::fromJsonValue(m_max_allowed_signature, json[QString("MaxAllowedSignature")]);
    m_max_allowed_signature_isSet = !json[QString("MaxAllowedSignature")].isNull() && m_max_allowed_signature_isValid;

    m_factory_support_isValid = ::OpenAPI::fromJsonValue(m_factory_support, json[QString("FactorySupport")]);
    m_factory_support_isSet = !json[QString("FactorySupport")].isNull() && m_factory_support_isValid;

    m_ap_id_isValid = ::OpenAPI::fromJsonValue(m_ap_id, json[QString("ApId")]);
    m_ap_id_isSet = !json[QString("ApId")].isNull() && m_ap_id_isValid;

    m_device_type_id_isValid = ::OpenAPI::fromJsonValue(m_device_type_id, json[QString("DeviceTypeId")]);
    m_device_type_id_isSet = !json[QString("DeviceTypeId")].isNull() && m_device_type_id_isValid;
}

QString OAIDakCertificateMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDakCertificateMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_id_isSet) {
        obj.insert(QString("CertificateId"), ::OpenAPI::toJsonValue(m_certificate_id));
    }
    if (m_max_allowed_signature_isSet) {
        obj.insert(QString("MaxAllowedSignature"), ::OpenAPI::toJsonValue(m_max_allowed_signature));
    }
    if (m_factory_support_isSet) {
        obj.insert(QString("FactorySupport"), ::OpenAPI::toJsonValue(m_factory_support));
    }
    if (m_ap_id_isSet) {
        obj.insert(QString("ApId"), ::OpenAPI::toJsonValue(m_ap_id));
    }
    if (m_device_type_id_isSet) {
        obj.insert(QString("DeviceTypeId"), ::OpenAPI::toJsonValue(m_device_type_id));
    }
    return obj;
}

QString OAIDakCertificateMetadata::getCertificateId() const {
    return m_certificate_id;
}
void OAIDakCertificateMetadata::setCertificateId(const QString &certificate_id) {
    m_certificate_id = certificate_id;
    m_certificate_id_isSet = true;
}

bool OAIDakCertificateMetadata::is_certificate_id_Set() const{
    return m_certificate_id_isSet;
}

bool OAIDakCertificateMetadata::is_certificate_id_Valid() const{
    return m_certificate_id_isValid;
}

qint32 OAIDakCertificateMetadata::getMaxAllowedSignature() const {
    return m_max_allowed_signature;
}
void OAIDakCertificateMetadata::setMaxAllowedSignature(const qint32 &max_allowed_signature) {
    m_max_allowed_signature = max_allowed_signature;
    m_max_allowed_signature_isSet = true;
}

bool OAIDakCertificateMetadata::is_max_allowed_signature_Set() const{
    return m_max_allowed_signature_isSet;
}

bool OAIDakCertificateMetadata::is_max_allowed_signature_Valid() const{
    return m_max_allowed_signature_isValid;
}

bool OAIDakCertificateMetadata::getFactorySupport() const {
    return m_factory_support;
}
void OAIDakCertificateMetadata::setFactorySupport(const bool &factory_support) {
    m_factory_support = factory_support;
    m_factory_support_isSet = true;
}

bool OAIDakCertificateMetadata::is_factory_support_Set() const{
    return m_factory_support_isSet;
}

bool OAIDakCertificateMetadata::is_factory_support_Valid() const{
    return m_factory_support_isValid;
}

QString OAIDakCertificateMetadata::getApId() const {
    return m_ap_id;
}
void OAIDakCertificateMetadata::setApId(const QString &ap_id) {
    m_ap_id = ap_id;
    m_ap_id_isSet = true;
}

bool OAIDakCertificateMetadata::is_ap_id_Set() const{
    return m_ap_id_isSet;
}

bool OAIDakCertificateMetadata::is_ap_id_Valid() const{
    return m_ap_id_isValid;
}

QString OAIDakCertificateMetadata::getDeviceTypeId() const {
    return m_device_type_id;
}
void OAIDakCertificateMetadata::setDeviceTypeId(const QString &device_type_id) {
    m_device_type_id = device_type_id;
    m_device_type_id_isSet = true;
}

bool OAIDakCertificateMetadata::is_device_type_id_Set() const{
    return m_device_type_id_isSet;
}

bool OAIDakCertificateMetadata::is_device_type_id_Valid() const{
    return m_device_type_id_isValid;
}

bool OAIDakCertificateMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_allowed_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_factory_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ap_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDakCertificateMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_id_isValid && true;
}

} // namespace OpenAPI
