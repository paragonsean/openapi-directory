/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILteObj.h
 *
 * LTE object.
 */

#ifndef OAILteObj_H
#define OAILteObj_H

#include <QJsonObject>

#include "OAILteObj_LteLocalId.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILteObj_LteLocalId;

class OAILteObj : public OAIObject {
public:
    OAILteObj();
    OAILteObj(QString json);
    ~OAILteObj() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMcc() const;
    void setMcc(const qint32 &mcc);
    bool is_mcc_Set() const;
    bool is_mcc_Valid() const;

    qint32 getMnc() const;
    void setMnc(const qint32 &mnc);
    bool is_mnc_Set() const;
    bool is_mnc_Valid() const;

    qint32 getEutranCid() const;
    void setEutranCid(const qint32 &eutran_cid);
    bool is_eutran_cid_Set() const;
    bool is_eutran_cid_Valid() const;

    qint32 getTac() const;
    void setTac(const qint32 &tac);
    bool is_tac_Set() const;
    bool is_tac_Valid() const;

    OAILteObj_LteLocalId getLteLocalId() const;
    void setLteLocalId(const OAILteObj_LteLocalId &lte_local_id);
    bool is_lte_local_id_Set() const;
    bool is_lte_local_id_Valid() const;

    qint32 getLteTimingAdvance() const;
    void setLteTimingAdvance(const qint32 &lte_timing_advance);
    bool is_lte_timing_advance_Set() const;
    bool is_lte_timing_advance_Valid() const;

    qint32 getRsrp() const;
    void setRsrp(const qint32 &rsrp);
    bool is_rsrp_Set() const;
    bool is_rsrp_Valid() const;

    float getRsrq() const;
    void setRsrq(const float &rsrq);
    bool is_rsrq_Set() const;
    bool is_rsrq_Valid() const;

    bool getNrCapable() const;
    void setNrCapable(const bool &nr_capable);
    bool is_nr_capable_Set() const;
    bool is_nr_capable_Valid() const;

    QList getLteNmr() const;
    void setLteNmr(const QList &lte_nmr);
    bool is_lte_nmr_Set() const;
    bool is_lte_nmr_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_mcc;
    bool m_mcc_isSet;
    bool m_mcc_isValid;

    qint32 m_mnc;
    bool m_mnc_isSet;
    bool m_mnc_isValid;

    qint32 m_eutran_cid;
    bool m_eutran_cid_isSet;
    bool m_eutran_cid_isValid;

    qint32 m_tac;
    bool m_tac_isSet;
    bool m_tac_isValid;

    OAILteObj_LteLocalId m_lte_local_id;
    bool m_lte_local_id_isSet;
    bool m_lte_local_id_isValid;

    qint32 m_lte_timing_advance;
    bool m_lte_timing_advance_isSet;
    bool m_lte_timing_advance_isValid;

    qint32 m_rsrp;
    bool m_rsrp_isSet;
    bool m_rsrp_isValid;

    float m_rsrq;
    bool m_rsrq_isSet;
    bool m_rsrq_isValid;

    bool m_nr_capable;
    bool m_nr_capable_isSet;
    bool m_nr_capable_isValid;

    QList m_lte_nmr;
    bool m_lte_nmr_isSet;
    bool m_lte_nmr_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILteObj)

#endif // OAILteObj_H
