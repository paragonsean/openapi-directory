/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWcdmaNmrObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWcdmaNmrObj::OAIWcdmaNmrObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWcdmaNmrObj::OAIWcdmaNmrObj() {
    this->initializeModel();
}

OAIWcdmaNmrObj::~OAIWcdmaNmrObj() {}

void OAIWcdmaNmrObj::initializeModel() {

    m_uarfcndl_isSet = false;
    m_uarfcndl_isValid = false;

    m_psc_isSet = false;
    m_psc_isValid = false;

    m_utran_cid_isSet = false;
    m_utran_cid_isValid = false;

    m_rscp_isSet = false;
    m_rscp_isValid = false;

    m_path_loss_isSet = false;
    m_path_loss_isValid = false;
}

void OAIWcdmaNmrObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWcdmaNmrObj::fromJsonObject(QJsonObject json) {

    m_uarfcndl_isValid = ::OpenAPI::fromJsonValue(m_uarfcndl, json[QString("Uarfcndl")]);
    m_uarfcndl_isSet = !json[QString("Uarfcndl")].isNull() && m_uarfcndl_isValid;

    m_psc_isValid = ::OpenAPI::fromJsonValue(m_psc, json[QString("Psc")]);
    m_psc_isSet = !json[QString("Psc")].isNull() && m_psc_isValid;

    m_utran_cid_isValid = ::OpenAPI::fromJsonValue(m_utran_cid, json[QString("UtranCid")]);
    m_utran_cid_isSet = !json[QString("UtranCid")].isNull() && m_utran_cid_isValid;

    m_rscp_isValid = ::OpenAPI::fromJsonValue(m_rscp, json[QString("Rscp")]);
    m_rscp_isSet = !json[QString("Rscp")].isNull() && m_rscp_isValid;

    m_path_loss_isValid = ::OpenAPI::fromJsonValue(m_path_loss, json[QString("PathLoss")]);
    m_path_loss_isSet = !json[QString("PathLoss")].isNull() && m_path_loss_isValid;
}

QString OAIWcdmaNmrObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWcdmaNmrObj::asJsonObject() const {
    QJsonObject obj;
    if (m_uarfcndl_isSet) {
        obj.insert(QString("Uarfcndl"), ::OpenAPI::toJsonValue(m_uarfcndl));
    }
    if (m_psc_isSet) {
        obj.insert(QString("Psc"), ::OpenAPI::toJsonValue(m_psc));
    }
    if (m_utran_cid_isSet) {
        obj.insert(QString("UtranCid"), ::OpenAPI::toJsonValue(m_utran_cid));
    }
    if (m_rscp_isSet) {
        obj.insert(QString("Rscp"), ::OpenAPI::toJsonValue(m_rscp));
    }
    if (m_path_loss_isSet) {
        obj.insert(QString("PathLoss"), ::OpenAPI::toJsonValue(m_path_loss));
    }
    return obj;
}

qint32 OAIWcdmaNmrObj::getUarfcndl() const {
    return m_uarfcndl;
}
void OAIWcdmaNmrObj::setUarfcndl(const qint32 &uarfcndl) {
    m_uarfcndl = uarfcndl;
    m_uarfcndl_isSet = true;
}

bool OAIWcdmaNmrObj::is_uarfcndl_Set() const{
    return m_uarfcndl_isSet;
}

bool OAIWcdmaNmrObj::is_uarfcndl_Valid() const{
    return m_uarfcndl_isValid;
}

qint32 OAIWcdmaNmrObj::getPsc() const {
    return m_psc;
}
void OAIWcdmaNmrObj::setPsc(const qint32 &psc) {
    m_psc = psc;
    m_psc_isSet = true;
}

bool OAIWcdmaNmrObj::is_psc_Set() const{
    return m_psc_isSet;
}

bool OAIWcdmaNmrObj::is_psc_Valid() const{
    return m_psc_isValid;
}

qint32 OAIWcdmaNmrObj::getUtranCid() const {
    return m_utran_cid;
}
void OAIWcdmaNmrObj::setUtranCid(const qint32 &utran_cid) {
    m_utran_cid = utran_cid;
    m_utran_cid_isSet = true;
}

bool OAIWcdmaNmrObj::is_utran_cid_Set() const{
    return m_utran_cid_isSet;
}

bool OAIWcdmaNmrObj::is_utran_cid_Valid() const{
    return m_utran_cid_isValid;
}

qint32 OAIWcdmaNmrObj::getRscp() const {
    return m_rscp;
}
void OAIWcdmaNmrObj::setRscp(const qint32 &rscp) {
    m_rscp = rscp;
    m_rscp_isSet = true;
}

bool OAIWcdmaNmrObj::is_rscp_Set() const{
    return m_rscp_isSet;
}

bool OAIWcdmaNmrObj::is_rscp_Valid() const{
    return m_rscp_isValid;
}

qint32 OAIWcdmaNmrObj::getPathLoss() const {
    return m_path_loss;
}
void OAIWcdmaNmrObj::setPathLoss(const qint32 &path_loss) {
    m_path_loss = path_loss;
    m_path_loss_isSet = true;
}

bool OAIWcdmaNmrObj::is_path_loss_Set() const{
    return m_path_loss_isSet;
}

bool OAIWcdmaNmrObj::is_path_loss_Valid() const{
    return m_path_loss_isValid;
}

bool OAIWcdmaNmrObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uarfcndl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utran_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rscp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_loss_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWcdmaNmrObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uarfcndl_isValid && m_psc_isValid && m_utran_cid_isValid && true;
}

} // namespace OpenAPI
