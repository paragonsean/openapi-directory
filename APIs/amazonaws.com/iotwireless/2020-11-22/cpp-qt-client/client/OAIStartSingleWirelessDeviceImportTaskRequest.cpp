/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartSingleWirelessDeviceImportTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartSingleWirelessDeviceImportTaskRequest::OAIStartSingleWirelessDeviceImportTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartSingleWirelessDeviceImportTaskRequest::OAIStartSingleWirelessDeviceImportTaskRequest() {
    this->initializeModel();
}

OAIStartSingleWirelessDeviceImportTaskRequest::~OAIStartSingleWirelessDeviceImportTaskRequest() {}

void OAIStartSingleWirelessDeviceImportTaskRequest::initializeModel() {

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_sidewalk_isSet = false;
    m_sidewalk_isValid = false;
}

void OAIStartSingleWirelessDeviceImportTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartSingleWirelessDeviceImportTaskRequest::fromJsonObject(QJsonObject json) {

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("DestinationName")]);
    m_destination_name_isSet = !json[QString("DestinationName")].isNull() && m_destination_name_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_sidewalk_isValid = ::OpenAPI::fromJsonValue(m_sidewalk, json[QString("Sidewalk")]);
    m_sidewalk_isSet = !json[QString("Sidewalk")].isNull() && m_sidewalk_isValid;
}

QString OAIStartSingleWirelessDeviceImportTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartSingleWirelessDeviceImportTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_name_isSet) {
        obj.insert(QString("DestinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_sidewalk.isSet()) {
        obj.insert(QString("Sidewalk"), ::OpenAPI::toJsonValue(m_sidewalk));
    }
    return obj;
}

QString OAIStartSingleWirelessDeviceImportTaskRequest::getDestinationName() const {
    return m_destination_name;
}
void OAIStartSingleWirelessDeviceImportTaskRequest::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIStartSingleWirelessDeviceImportTaskRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIStartSingleWirelessDeviceImportTaskRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIStartSingleWirelessDeviceImportTaskRequest::getDeviceName() const {
    return m_device_name;
}
void OAIStartSingleWirelessDeviceImportTaskRequest::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QList<OAITag> OAIStartSingleWirelessDeviceImportTaskRequest::getTags() const {
    return m_tags;
}
void OAIStartSingleWirelessDeviceImportTaskRequest::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIStartSingleWirelessDeviceImportTaskRequest_Sidewalk OAIStartSingleWirelessDeviceImportTaskRequest::getSidewalk() const {
    return m_sidewalk;
}
void OAIStartSingleWirelessDeviceImportTaskRequest::setSidewalk(const OAIStartSingleWirelessDeviceImportTaskRequest_Sidewalk &sidewalk) {
    m_sidewalk = sidewalk;
    m_sidewalk_isSet = true;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_sidewalk_Set() const{
    return m_sidewalk_isSet;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::is_sidewalk_Valid() const{
    return m_sidewalk_isValid;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartSingleWirelessDeviceImportTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_name_isValid && m_sidewalk_isValid && true;
}

} // namespace OpenAPI
