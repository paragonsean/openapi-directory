/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateWirelessGatewayRequest.h
 *
 * 
 */

#ifndef OAIUpdateWirelessGatewayRequest_H
#define OAIUpdateWirelessGatewayRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateWirelessGatewayRequest : public OAIObject {
public:
    OAIUpdateWirelessGatewayRequest();
    OAIUpdateWirelessGatewayRequest(QString json);
    ~OAIUpdateWirelessGatewayRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QList> getJoinEuiFilters() const;
    void setJoinEuiFilters(const QList<QList> &join_eui_filters);
    bool is_join_eui_filters_Set() const;
    bool is_join_eui_filters_Valid() const;

    QList<QString> getNetIdFilters() const;
    void setNetIdFilters(const QList<QString> &net_id_filters);
    bool is_net_id_filters_Set() const;
    bool is_net_id_filters_Valid() const;

    float getMaxEirp() const;
    void setMaxEirp(const float &max_eirp);
    bool is_max_eirp_Set() const;
    bool is_max_eirp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QList> m_join_eui_filters;
    bool m_join_eui_filters_isSet;
    bool m_join_eui_filters_isValid;

    QList<QString> m_net_id_filters;
    bool m_net_id_filters_isSet;
    bool m_net_id_filters_isValid;

    float m_max_eirp;
    bool m_max_eirp_isSet;
    bool m_max_eirp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateWirelessGatewayRequest)

#endif // OAIUpdateWirelessGatewayRequest_H
