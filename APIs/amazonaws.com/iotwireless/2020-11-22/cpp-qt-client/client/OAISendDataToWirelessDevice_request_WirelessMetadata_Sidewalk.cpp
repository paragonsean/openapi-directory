/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk() {
    this->initializeModel();
}

OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::~OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk() {}

void OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::initializeModel() {

    m_seq_isSet = false;
    m_seq_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_ack_mode_retry_duration_secs_isSet = false;
    m_ack_mode_retry_duration_secs_isValid = false;
}

void OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::fromJsonObject(QJsonObject json) {

    m_seq_isValid = ::OpenAPI::fromJsonValue(m_seq, json[QString("Seq")]);
    m_seq_isSet = !json[QString("Seq")].isNull() && m_seq_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;

    m_ack_mode_retry_duration_secs_isValid = ::OpenAPI::fromJsonValue(m_ack_mode_retry_duration_secs, json[QString("AckModeRetryDurationSecs")]);
    m_ack_mode_retry_duration_secs_isSet = !json[QString("AckModeRetryDurationSecs")].isNull() && m_ack_mode_retry_duration_secs_isValid;
}

QString OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::asJsonObject() const {
    QJsonObject obj;
    if (m_seq_isSet) {
        obj.insert(QString("Seq"), ::OpenAPI::toJsonValue(m_seq));
    }
    if (m_message_type.isSet()) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_ack_mode_retry_duration_secs_isSet) {
        obj.insert(QString("AckModeRetryDurationSecs"), ::OpenAPI::toJsonValue(m_ack_mode_retry_duration_secs));
    }
    return obj;
}

qint32 OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::getSeq() const {
    return m_seq;
}
void OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::setSeq(const qint32 &seq) {
    m_seq = seq;
    m_seq_isSet = true;
}

bool OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::is_seq_Set() const{
    return m_seq_isSet;
}

bool OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::is_seq_Valid() const{
    return m_seq_isValid;
}

OAIMessageType OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::getMessageType() const {
    return m_message_type;
}
void OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::setMessageType(const OAIMessageType &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::is_message_type_Valid() const{
    return m_message_type_isValid;
}

qint32 OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::getAckModeRetryDurationSecs() const {
    return m_ack_mode_retry_duration_secs;
}
void OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::setAckModeRetryDurationSecs(const qint32 &ack_mode_retry_duration_secs) {
    m_ack_mode_retry_duration_secs = ack_mode_retry_duration_secs;
    m_ack_mode_retry_duration_secs_isSet = true;
}

bool OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::is_ack_mode_retry_duration_secs_Set() const{
    return m_ack_mode_retry_duration_secs_isSet;
}

bool OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::is_ack_mode_retry_duration_secs_Valid() const{
    return m_ack_mode_retry_duration_secs_isValid;
}

bool OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_seq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ack_mode_retry_duration_secs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendDataToWirelessDevice_request_WirelessMetadata_Sidewalk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
