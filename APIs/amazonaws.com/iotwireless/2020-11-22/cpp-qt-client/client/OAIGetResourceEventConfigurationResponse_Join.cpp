/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetResourceEventConfigurationResponse_Join.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetResourceEventConfigurationResponse_Join::OAIGetResourceEventConfigurationResponse_Join(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetResourceEventConfigurationResponse_Join::OAIGetResourceEventConfigurationResponse_Join() {
    this->initializeModel();
}

OAIGetResourceEventConfigurationResponse_Join::~OAIGetResourceEventConfigurationResponse_Join() {}

void OAIGetResourceEventConfigurationResponse_Join::initializeModel() {

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_wireless_device_id_event_topic_isSet = false;
    m_wireless_device_id_event_topic_isValid = false;
}

void OAIGetResourceEventConfigurationResponse_Join::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetResourceEventConfigurationResponse_Join::fromJsonObject(QJsonObject json) {

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_wireless_device_id_event_topic_isValid = ::OpenAPI::fromJsonValue(m_wireless_device_id_event_topic, json[QString("WirelessDeviceIdEventTopic")]);
    m_wireless_device_id_event_topic_isSet = !json[QString("WirelessDeviceIdEventTopic")].isNull() && m_wireless_device_id_event_topic_isValid;
}

QString OAIGetResourceEventConfigurationResponse_Join::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetResourceEventConfigurationResponse_Join::asJsonObject() const {
    QJsonObject obj;
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_wireless_device_id_event_topic.isSet()) {
        obj.insert(QString("WirelessDeviceIdEventTopic"), ::OpenAPI::toJsonValue(m_wireless_device_id_event_topic));
    }
    return obj;
}

OAIUpdateResourceEventConfiguration_request_Join_LoRaWAN OAIGetResourceEventConfigurationResponse_Join::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIGetResourceEventConfigurationResponse_Join::setLoRaWan(const OAIUpdateResourceEventConfiguration_request_Join_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIGetResourceEventConfigurationResponse_Join::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIGetResourceEventConfigurationResponse_Join::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

OAIEventNotificationTopicStatus OAIGetResourceEventConfigurationResponse_Join::getWirelessDeviceIdEventTopic() const {
    return m_wireless_device_id_event_topic;
}
void OAIGetResourceEventConfigurationResponse_Join::setWirelessDeviceIdEventTopic(const OAIEventNotificationTopicStatus &wireless_device_id_event_topic) {
    m_wireless_device_id_event_topic = wireless_device_id_event_topic;
    m_wireless_device_id_event_topic_isSet = true;
}

bool OAIGetResourceEventConfigurationResponse_Join::is_wireless_device_id_event_topic_Set() const{
    return m_wireless_device_id_event_topic_isSet;
}

bool OAIGetResourceEventConfigurationResponse_Join::is_wireless_device_id_event_topic_Valid() const{
    return m_wireless_device_id_event_topic_isValid;
}

bool OAIGetResourceEventConfigurationResponse_Join::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_device_id_event_topic.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetResourceEventConfigurationResponse_Join::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
