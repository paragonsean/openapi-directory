/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeviceProfileRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeviceProfileRequest::OAICreateDeviceProfileRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeviceProfileRequest::OAICreateDeviceProfileRequest() {
    this->initializeModel();
}

OAICreateDeviceProfileRequest::~OAICreateDeviceProfileRequest() {}

void OAICreateDeviceProfileRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_sidewalk_isSet = false;
    m_sidewalk_isValid = false;
}

void OAICreateDeviceProfileRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeviceProfileRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_sidewalk_isValid = ::OpenAPI::fromJsonValue(m_sidewalk, json[QString("Sidewalk")]);
    m_sidewalk_isSet = !json[QString("Sidewalk")].isNull() && m_sidewalk_isValid;
}

QString OAICreateDeviceProfileRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeviceProfileRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_sidewalk.isSet()) {
        obj.insert(QString("Sidewalk"), ::OpenAPI::toJsonValue(m_sidewalk));
    }
    return obj;
}

QString OAICreateDeviceProfileRequest::getName() const {
    return m_name;
}
void OAICreateDeviceProfileRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDeviceProfileRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDeviceProfileRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateDeviceProfileRequest_LoRaWAN OAICreateDeviceProfileRequest::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAICreateDeviceProfileRequest::setLoRaWan(const OAICreateDeviceProfileRequest_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAICreateDeviceProfileRequest::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAICreateDeviceProfileRequest::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

QList OAICreateDeviceProfileRequest::getTags() const {
    return m_tags;
}
void OAICreateDeviceProfileRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDeviceProfileRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDeviceProfileRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDeviceProfileRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateDeviceProfileRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateDeviceProfileRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateDeviceProfileRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

OAIObject OAICreateDeviceProfileRequest::getSidewalk() const {
    return m_sidewalk;
}
void OAICreateDeviceProfileRequest::setSidewalk(const OAIObject &sidewalk) {
    m_sidewalk = sidewalk;
    m_sidewalk_isSet = true;
}

bool OAICreateDeviceProfileRequest::is_sidewalk_Set() const{
    return m_sidewalk_isSet;
}

bool OAICreateDeviceProfileRequest::is_sidewalk_Valid() const{
    return m_sidewalk_isValid;
}

bool OAICreateDeviceProfileRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeviceProfileRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
