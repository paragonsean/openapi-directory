/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWirelessGatewayTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWirelessGatewayTaskResponse::OAIGetWirelessGatewayTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWirelessGatewayTaskResponse::OAIGetWirelessGatewayTaskResponse() {
    this->initializeModel();
}

OAIGetWirelessGatewayTaskResponse::~OAIGetWirelessGatewayTaskResponse() {}

void OAIGetWirelessGatewayTaskResponse::initializeModel() {

    m_wireless_gateway_id_isSet = false;
    m_wireless_gateway_id_isValid = false;

    m_wireless_gateway_task_definition_id_isSet = false;
    m_wireless_gateway_task_definition_id_isValid = false;

    m_last_uplink_received_at_isSet = false;
    m_last_uplink_received_at_isValid = false;

    m_task_created_at_isSet = false;
    m_task_created_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetWirelessGatewayTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWirelessGatewayTaskResponse::fromJsonObject(QJsonObject json) {

    m_wireless_gateway_id_isValid = ::OpenAPI::fromJsonValue(m_wireless_gateway_id, json[QString("WirelessGatewayId")]);
    m_wireless_gateway_id_isSet = !json[QString("WirelessGatewayId")].isNull() && m_wireless_gateway_id_isValid;

    m_wireless_gateway_task_definition_id_isValid = ::OpenAPI::fromJsonValue(m_wireless_gateway_task_definition_id, json[QString("WirelessGatewayTaskDefinitionId")]);
    m_wireless_gateway_task_definition_id_isSet = !json[QString("WirelessGatewayTaskDefinitionId")].isNull() && m_wireless_gateway_task_definition_id_isValid;

    m_last_uplink_received_at_isValid = ::OpenAPI::fromJsonValue(m_last_uplink_received_at, json[QString("LastUplinkReceivedAt")]);
    m_last_uplink_received_at_isSet = !json[QString("LastUplinkReceivedAt")].isNull() && m_last_uplink_received_at_isValid;

    m_task_created_at_isValid = ::OpenAPI::fromJsonValue(m_task_created_at, json[QString("TaskCreatedAt")]);
    m_task_created_at_isSet = !json[QString("TaskCreatedAt")].isNull() && m_task_created_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIGetWirelessGatewayTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWirelessGatewayTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_wireless_gateway_id_isSet) {
        obj.insert(QString("WirelessGatewayId"), ::OpenAPI::toJsonValue(m_wireless_gateway_id));
    }
    if (m_wireless_gateway_task_definition_id_isSet) {
        obj.insert(QString("WirelessGatewayTaskDefinitionId"), ::OpenAPI::toJsonValue(m_wireless_gateway_task_definition_id));
    }
    if (m_last_uplink_received_at_isSet) {
        obj.insert(QString("LastUplinkReceivedAt"), ::OpenAPI::toJsonValue(m_last_uplink_received_at));
    }
    if (m_task_created_at_isSet) {
        obj.insert(QString("TaskCreatedAt"), ::OpenAPI::toJsonValue(m_task_created_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGetWirelessGatewayTaskResponse::getWirelessGatewayId() const {
    return m_wireless_gateway_id;
}
void OAIGetWirelessGatewayTaskResponse::setWirelessGatewayId(const QString &wireless_gateway_id) {
    m_wireless_gateway_id = wireless_gateway_id;
    m_wireless_gateway_id_isSet = true;
}

bool OAIGetWirelessGatewayTaskResponse::is_wireless_gateway_id_Set() const{
    return m_wireless_gateway_id_isSet;
}

bool OAIGetWirelessGatewayTaskResponse::is_wireless_gateway_id_Valid() const{
    return m_wireless_gateway_id_isValid;
}

QString OAIGetWirelessGatewayTaskResponse::getWirelessGatewayTaskDefinitionId() const {
    return m_wireless_gateway_task_definition_id;
}
void OAIGetWirelessGatewayTaskResponse::setWirelessGatewayTaskDefinitionId(const QString &wireless_gateway_task_definition_id) {
    m_wireless_gateway_task_definition_id = wireless_gateway_task_definition_id;
    m_wireless_gateway_task_definition_id_isSet = true;
}

bool OAIGetWirelessGatewayTaskResponse::is_wireless_gateway_task_definition_id_Set() const{
    return m_wireless_gateway_task_definition_id_isSet;
}

bool OAIGetWirelessGatewayTaskResponse::is_wireless_gateway_task_definition_id_Valid() const{
    return m_wireless_gateway_task_definition_id_isValid;
}

QString OAIGetWirelessGatewayTaskResponse::getLastUplinkReceivedAt() const {
    return m_last_uplink_received_at;
}
void OAIGetWirelessGatewayTaskResponse::setLastUplinkReceivedAt(const QString &last_uplink_received_at) {
    m_last_uplink_received_at = last_uplink_received_at;
    m_last_uplink_received_at_isSet = true;
}

bool OAIGetWirelessGatewayTaskResponse::is_last_uplink_received_at_Set() const{
    return m_last_uplink_received_at_isSet;
}

bool OAIGetWirelessGatewayTaskResponse::is_last_uplink_received_at_Valid() const{
    return m_last_uplink_received_at_isValid;
}

QString OAIGetWirelessGatewayTaskResponse::getTaskCreatedAt() const {
    return m_task_created_at;
}
void OAIGetWirelessGatewayTaskResponse::setTaskCreatedAt(const QString &task_created_at) {
    m_task_created_at = task_created_at;
    m_task_created_at_isSet = true;
}

bool OAIGetWirelessGatewayTaskResponse::is_task_created_at_Set() const{
    return m_task_created_at_isSet;
}

bool OAIGetWirelessGatewayTaskResponse::is_task_created_at_Valid() const{
    return m_task_created_at_isValid;
}

OAIWirelessGatewayTaskStatus OAIGetWirelessGatewayTaskResponse::getStatus() const {
    return m_status;
}
void OAIGetWirelessGatewayTaskResponse::setStatus(const OAIWirelessGatewayTaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetWirelessGatewayTaskResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetWirelessGatewayTaskResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetWirelessGatewayTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_wireless_gateway_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_gateway_task_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_uplink_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWirelessGatewayTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
