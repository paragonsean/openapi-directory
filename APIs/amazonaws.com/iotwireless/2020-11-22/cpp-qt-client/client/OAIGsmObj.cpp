/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGsmObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGsmObj::OAIGsmObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGsmObj::OAIGsmObj() {
    this->initializeModel();
}

OAIGsmObj::~OAIGsmObj() {}

void OAIGsmObj::initializeModel() {

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_mnc_isSet = false;
    m_mnc_isValid = false;

    m_lac_isSet = false;
    m_lac_isValid = false;

    m_geran_cid_isSet = false;
    m_geran_cid_isValid = false;

    m_gsm_local_id_isSet = false;
    m_gsm_local_id_isValid = false;

    m_gsm_timing_advance_isSet = false;
    m_gsm_timing_advance_isValid = false;

    m_rx_level_isSet = false;
    m_rx_level_isValid = false;

    m_gsm_nmr_isSet = false;
    m_gsm_nmr_isValid = false;
}

void OAIGsmObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGsmObj::fromJsonObject(QJsonObject json) {

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("Mcc")]);
    m_mcc_isSet = !json[QString("Mcc")].isNull() && m_mcc_isValid;

    m_mnc_isValid = ::OpenAPI::fromJsonValue(m_mnc, json[QString("Mnc")]);
    m_mnc_isSet = !json[QString("Mnc")].isNull() && m_mnc_isValid;

    m_lac_isValid = ::OpenAPI::fromJsonValue(m_lac, json[QString("Lac")]);
    m_lac_isSet = !json[QString("Lac")].isNull() && m_lac_isValid;

    m_geran_cid_isValid = ::OpenAPI::fromJsonValue(m_geran_cid, json[QString("GeranCid")]);
    m_geran_cid_isSet = !json[QString("GeranCid")].isNull() && m_geran_cid_isValid;

    m_gsm_local_id_isValid = ::OpenAPI::fromJsonValue(m_gsm_local_id, json[QString("GsmLocalId")]);
    m_gsm_local_id_isSet = !json[QString("GsmLocalId")].isNull() && m_gsm_local_id_isValid;

    m_gsm_timing_advance_isValid = ::OpenAPI::fromJsonValue(m_gsm_timing_advance, json[QString("GsmTimingAdvance")]);
    m_gsm_timing_advance_isSet = !json[QString("GsmTimingAdvance")].isNull() && m_gsm_timing_advance_isValid;

    m_rx_level_isValid = ::OpenAPI::fromJsonValue(m_rx_level, json[QString("RxLevel")]);
    m_rx_level_isSet = !json[QString("RxLevel")].isNull() && m_rx_level_isValid;

    m_gsm_nmr_isValid = ::OpenAPI::fromJsonValue(m_gsm_nmr, json[QString("GsmNmr")]);
    m_gsm_nmr_isSet = !json[QString("GsmNmr")].isNull() && m_gsm_nmr_isValid;
}

QString OAIGsmObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGsmObj::asJsonObject() const {
    QJsonObject obj;
    if (m_mcc_isSet) {
        obj.insert(QString("Mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_mnc_isSet) {
        obj.insert(QString("Mnc"), ::OpenAPI::toJsonValue(m_mnc));
    }
    if (m_lac_isSet) {
        obj.insert(QString("Lac"), ::OpenAPI::toJsonValue(m_lac));
    }
    if (m_geran_cid_isSet) {
        obj.insert(QString("GeranCid"), ::OpenAPI::toJsonValue(m_geran_cid));
    }
    if (m_gsm_local_id.isSet()) {
        obj.insert(QString("GsmLocalId"), ::OpenAPI::toJsonValue(m_gsm_local_id));
    }
    if (m_gsm_timing_advance_isSet) {
        obj.insert(QString("GsmTimingAdvance"), ::OpenAPI::toJsonValue(m_gsm_timing_advance));
    }
    if (m_rx_level_isSet) {
        obj.insert(QString("RxLevel"), ::OpenAPI::toJsonValue(m_rx_level));
    }
    if (m_gsm_nmr.isSet()) {
        obj.insert(QString("GsmNmr"), ::OpenAPI::toJsonValue(m_gsm_nmr));
    }
    return obj;
}

qint32 OAIGsmObj::getMcc() const {
    return m_mcc;
}
void OAIGsmObj::setMcc(const qint32 &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIGsmObj::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIGsmObj::is_mcc_Valid() const{
    return m_mcc_isValid;
}

qint32 OAIGsmObj::getMnc() const {
    return m_mnc;
}
void OAIGsmObj::setMnc(const qint32 &mnc) {
    m_mnc = mnc;
    m_mnc_isSet = true;
}

bool OAIGsmObj::is_mnc_Set() const{
    return m_mnc_isSet;
}

bool OAIGsmObj::is_mnc_Valid() const{
    return m_mnc_isValid;
}

qint32 OAIGsmObj::getLac() const {
    return m_lac;
}
void OAIGsmObj::setLac(const qint32 &lac) {
    m_lac = lac;
    m_lac_isSet = true;
}

bool OAIGsmObj::is_lac_Set() const{
    return m_lac_isSet;
}

bool OAIGsmObj::is_lac_Valid() const{
    return m_lac_isValid;
}

qint32 OAIGsmObj::getGeranCid() const {
    return m_geran_cid;
}
void OAIGsmObj::setGeranCid(const qint32 &geran_cid) {
    m_geran_cid = geran_cid;
    m_geran_cid_isSet = true;
}

bool OAIGsmObj::is_geran_cid_Set() const{
    return m_geran_cid_isSet;
}

bool OAIGsmObj::is_geran_cid_Valid() const{
    return m_geran_cid_isValid;
}

OAIGsmObj_GsmLocalId OAIGsmObj::getGsmLocalId() const {
    return m_gsm_local_id;
}
void OAIGsmObj::setGsmLocalId(const OAIGsmObj_GsmLocalId &gsm_local_id) {
    m_gsm_local_id = gsm_local_id;
    m_gsm_local_id_isSet = true;
}

bool OAIGsmObj::is_gsm_local_id_Set() const{
    return m_gsm_local_id_isSet;
}

bool OAIGsmObj::is_gsm_local_id_Valid() const{
    return m_gsm_local_id_isValid;
}

qint32 OAIGsmObj::getGsmTimingAdvance() const {
    return m_gsm_timing_advance;
}
void OAIGsmObj::setGsmTimingAdvance(const qint32 &gsm_timing_advance) {
    m_gsm_timing_advance = gsm_timing_advance;
    m_gsm_timing_advance_isSet = true;
}

bool OAIGsmObj::is_gsm_timing_advance_Set() const{
    return m_gsm_timing_advance_isSet;
}

bool OAIGsmObj::is_gsm_timing_advance_Valid() const{
    return m_gsm_timing_advance_isValid;
}

qint32 OAIGsmObj::getRxLevel() const {
    return m_rx_level;
}
void OAIGsmObj::setRxLevel(const qint32 &rx_level) {
    m_rx_level = rx_level;
    m_rx_level_isSet = true;
}

bool OAIGsmObj::is_rx_level_Set() const{
    return m_rx_level_isSet;
}

bool OAIGsmObj::is_rx_level_Valid() const{
    return m_rx_level_isValid;
}

QList OAIGsmObj::getGsmNmr() const {
    return m_gsm_nmr;
}
void OAIGsmObj::setGsmNmr(const QList &gsm_nmr) {
    m_gsm_nmr = gsm_nmr;
    m_gsm_nmr_isSet = true;
}

bool OAIGsmObj::is_gsm_nmr_Set() const{
    return m_gsm_nmr_isSet;
}

bool OAIGsmObj::is_gsm_nmr_Valid() const{
    return m_gsm_nmr_isValid;
}

bool OAIGsmObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geran_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gsm_local_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gsm_timing_advance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gsm_nmr.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGsmObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mcc_isValid && m_mnc_isValid && m_lac_isValid && m_geran_cid_isValid && true;
}

} // namespace OpenAPI
