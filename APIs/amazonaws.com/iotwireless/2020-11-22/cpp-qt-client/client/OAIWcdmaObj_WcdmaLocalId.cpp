/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWcdmaObj_WcdmaLocalId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWcdmaObj_WcdmaLocalId::OAIWcdmaObj_WcdmaLocalId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWcdmaObj_WcdmaLocalId::OAIWcdmaObj_WcdmaLocalId() {
    this->initializeModel();
}

OAIWcdmaObj_WcdmaLocalId::~OAIWcdmaObj_WcdmaLocalId() {}

void OAIWcdmaObj_WcdmaLocalId::initializeModel() {

    m_uarfcndl_isSet = false;
    m_uarfcndl_isValid = false;

    m_psc_isSet = false;
    m_psc_isValid = false;
}

void OAIWcdmaObj_WcdmaLocalId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWcdmaObj_WcdmaLocalId::fromJsonObject(QJsonObject json) {

    m_uarfcndl_isValid = ::OpenAPI::fromJsonValue(m_uarfcndl, json[QString("Uarfcndl")]);
    m_uarfcndl_isSet = !json[QString("Uarfcndl")].isNull() && m_uarfcndl_isValid;

    m_psc_isValid = ::OpenAPI::fromJsonValue(m_psc, json[QString("Psc")]);
    m_psc_isSet = !json[QString("Psc")].isNull() && m_psc_isValid;
}

QString OAIWcdmaObj_WcdmaLocalId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWcdmaObj_WcdmaLocalId::asJsonObject() const {
    QJsonObject obj;
    if (m_uarfcndl_isSet) {
        obj.insert(QString("Uarfcndl"), ::OpenAPI::toJsonValue(m_uarfcndl));
    }
    if (m_psc_isSet) {
        obj.insert(QString("Psc"), ::OpenAPI::toJsonValue(m_psc));
    }
    return obj;
}

qint32 OAIWcdmaObj_WcdmaLocalId::getUarfcndl() const {
    return m_uarfcndl;
}
void OAIWcdmaObj_WcdmaLocalId::setUarfcndl(const qint32 &uarfcndl) {
    m_uarfcndl = uarfcndl;
    m_uarfcndl_isSet = true;
}

bool OAIWcdmaObj_WcdmaLocalId::is_uarfcndl_Set() const{
    return m_uarfcndl_isSet;
}

bool OAIWcdmaObj_WcdmaLocalId::is_uarfcndl_Valid() const{
    return m_uarfcndl_isValid;
}

qint32 OAIWcdmaObj_WcdmaLocalId::getPsc() const {
    return m_psc;
}
void OAIWcdmaObj_WcdmaLocalId::setPsc(const qint32 &psc) {
    m_psc = psc;
    m_psc_isSet = true;
}

bool OAIWcdmaObj_WcdmaLocalId::is_psc_Set() const{
    return m_psc_isSet;
}

bool OAIWcdmaObj_WcdmaLocalId::is_psc_Valid() const{
    return m_psc_isValid;
}

bool OAIWcdmaObj_WcdmaLocalId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uarfcndl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWcdmaObj_WcdmaLocalId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uarfcndl_isValid && m_psc_isValid && true;
}

} // namespace OpenAPI
