/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationConfig.h
 *
 * LoRaWAN application configuration, which can be used to perform geolocation.
 */

#ifndef OAIApplicationConfig_H
#define OAIApplicationConfig_H

#include <QJsonObject>

#include "OAIApplicationConfigType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApplicationConfig : public OAIObject {
public:
    OAIApplicationConfig();
    OAIApplicationConfig(QString json);
    ~OAIApplicationConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFPort() const;
    void setFPort(const qint32 &f_port);
    bool is_f_port_Set() const;
    bool is_f_port_Valid() const;

    OAIApplicationConfigType getType() const;
    void setType(const OAIApplicationConfigType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getDestinationName() const;
    void setDestinationName(const QString &destination_name);
    bool is_destination_name_Set() const;
    bool is_destination_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_f_port;
    bool m_f_port_isSet;
    bool m_f_port_isValid;

    OAIApplicationConfigType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_destination_name;
    bool m_destination_name_isSet;
    bool m_destination_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationConfig)

#endif // OAIApplicationConfig_H
