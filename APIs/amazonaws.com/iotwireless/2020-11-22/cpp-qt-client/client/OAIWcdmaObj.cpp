/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWcdmaObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWcdmaObj::OAIWcdmaObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWcdmaObj::OAIWcdmaObj() {
    this->initializeModel();
}

OAIWcdmaObj::~OAIWcdmaObj() {}

void OAIWcdmaObj::initializeModel() {

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_mnc_isSet = false;
    m_mnc_isValid = false;

    m_lac_isSet = false;
    m_lac_isValid = false;

    m_utran_cid_isSet = false;
    m_utran_cid_isValid = false;

    m_wcdma_local_id_isSet = false;
    m_wcdma_local_id_isValid = false;

    m_rscp_isSet = false;
    m_rscp_isValid = false;

    m_path_loss_isSet = false;
    m_path_loss_isValid = false;

    m_wcdma_nmr_isSet = false;
    m_wcdma_nmr_isValid = false;
}

void OAIWcdmaObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWcdmaObj::fromJsonObject(QJsonObject json) {

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("Mcc")]);
    m_mcc_isSet = !json[QString("Mcc")].isNull() && m_mcc_isValid;

    m_mnc_isValid = ::OpenAPI::fromJsonValue(m_mnc, json[QString("Mnc")]);
    m_mnc_isSet = !json[QString("Mnc")].isNull() && m_mnc_isValid;

    m_lac_isValid = ::OpenAPI::fromJsonValue(m_lac, json[QString("Lac")]);
    m_lac_isSet = !json[QString("Lac")].isNull() && m_lac_isValid;

    m_utran_cid_isValid = ::OpenAPI::fromJsonValue(m_utran_cid, json[QString("UtranCid")]);
    m_utran_cid_isSet = !json[QString("UtranCid")].isNull() && m_utran_cid_isValid;

    m_wcdma_local_id_isValid = ::OpenAPI::fromJsonValue(m_wcdma_local_id, json[QString("WcdmaLocalId")]);
    m_wcdma_local_id_isSet = !json[QString("WcdmaLocalId")].isNull() && m_wcdma_local_id_isValid;

    m_rscp_isValid = ::OpenAPI::fromJsonValue(m_rscp, json[QString("Rscp")]);
    m_rscp_isSet = !json[QString("Rscp")].isNull() && m_rscp_isValid;

    m_path_loss_isValid = ::OpenAPI::fromJsonValue(m_path_loss, json[QString("PathLoss")]);
    m_path_loss_isSet = !json[QString("PathLoss")].isNull() && m_path_loss_isValid;

    m_wcdma_nmr_isValid = ::OpenAPI::fromJsonValue(m_wcdma_nmr, json[QString("WcdmaNmr")]);
    m_wcdma_nmr_isSet = !json[QString("WcdmaNmr")].isNull() && m_wcdma_nmr_isValid;
}

QString OAIWcdmaObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWcdmaObj::asJsonObject() const {
    QJsonObject obj;
    if (m_mcc_isSet) {
        obj.insert(QString("Mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_mnc_isSet) {
        obj.insert(QString("Mnc"), ::OpenAPI::toJsonValue(m_mnc));
    }
    if (m_lac_isSet) {
        obj.insert(QString("Lac"), ::OpenAPI::toJsonValue(m_lac));
    }
    if (m_utran_cid_isSet) {
        obj.insert(QString("UtranCid"), ::OpenAPI::toJsonValue(m_utran_cid));
    }
    if (m_wcdma_local_id.isSet()) {
        obj.insert(QString("WcdmaLocalId"), ::OpenAPI::toJsonValue(m_wcdma_local_id));
    }
    if (m_rscp_isSet) {
        obj.insert(QString("Rscp"), ::OpenAPI::toJsonValue(m_rscp));
    }
    if (m_path_loss_isSet) {
        obj.insert(QString("PathLoss"), ::OpenAPI::toJsonValue(m_path_loss));
    }
    if (m_wcdma_nmr.isSet()) {
        obj.insert(QString("WcdmaNmr"), ::OpenAPI::toJsonValue(m_wcdma_nmr));
    }
    return obj;
}

qint32 OAIWcdmaObj::getMcc() const {
    return m_mcc;
}
void OAIWcdmaObj::setMcc(const qint32 &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIWcdmaObj::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIWcdmaObj::is_mcc_Valid() const{
    return m_mcc_isValid;
}

qint32 OAIWcdmaObj::getMnc() const {
    return m_mnc;
}
void OAIWcdmaObj::setMnc(const qint32 &mnc) {
    m_mnc = mnc;
    m_mnc_isSet = true;
}

bool OAIWcdmaObj::is_mnc_Set() const{
    return m_mnc_isSet;
}

bool OAIWcdmaObj::is_mnc_Valid() const{
    return m_mnc_isValid;
}

qint32 OAIWcdmaObj::getLac() const {
    return m_lac;
}
void OAIWcdmaObj::setLac(const qint32 &lac) {
    m_lac = lac;
    m_lac_isSet = true;
}

bool OAIWcdmaObj::is_lac_Set() const{
    return m_lac_isSet;
}

bool OAIWcdmaObj::is_lac_Valid() const{
    return m_lac_isValid;
}

qint32 OAIWcdmaObj::getUtranCid() const {
    return m_utran_cid;
}
void OAIWcdmaObj::setUtranCid(const qint32 &utran_cid) {
    m_utran_cid = utran_cid;
    m_utran_cid_isSet = true;
}

bool OAIWcdmaObj::is_utran_cid_Set() const{
    return m_utran_cid_isSet;
}

bool OAIWcdmaObj::is_utran_cid_Valid() const{
    return m_utran_cid_isValid;
}

OAIWcdmaObj_WcdmaLocalId OAIWcdmaObj::getWcdmaLocalId() const {
    return m_wcdma_local_id;
}
void OAIWcdmaObj::setWcdmaLocalId(const OAIWcdmaObj_WcdmaLocalId &wcdma_local_id) {
    m_wcdma_local_id = wcdma_local_id;
    m_wcdma_local_id_isSet = true;
}

bool OAIWcdmaObj::is_wcdma_local_id_Set() const{
    return m_wcdma_local_id_isSet;
}

bool OAIWcdmaObj::is_wcdma_local_id_Valid() const{
    return m_wcdma_local_id_isValid;
}

qint32 OAIWcdmaObj::getRscp() const {
    return m_rscp;
}
void OAIWcdmaObj::setRscp(const qint32 &rscp) {
    m_rscp = rscp;
    m_rscp_isSet = true;
}

bool OAIWcdmaObj::is_rscp_Set() const{
    return m_rscp_isSet;
}

bool OAIWcdmaObj::is_rscp_Valid() const{
    return m_rscp_isValid;
}

qint32 OAIWcdmaObj::getPathLoss() const {
    return m_path_loss;
}
void OAIWcdmaObj::setPathLoss(const qint32 &path_loss) {
    m_path_loss = path_loss;
    m_path_loss_isSet = true;
}

bool OAIWcdmaObj::is_path_loss_Set() const{
    return m_path_loss_isSet;
}

bool OAIWcdmaObj::is_path_loss_Valid() const{
    return m_path_loss_isValid;
}

QList OAIWcdmaObj::getWcdmaNmr() const {
    return m_wcdma_nmr;
}
void OAIWcdmaObj::setWcdmaNmr(const QList &wcdma_nmr) {
    m_wcdma_nmr = wcdma_nmr;
    m_wcdma_nmr_isSet = true;
}

bool OAIWcdmaObj::is_wcdma_nmr_Set() const{
    return m_wcdma_nmr_isSet;
}

bool OAIWcdmaObj::is_wcdma_nmr_Valid() const{
    return m_wcdma_nmr_isValid;
}

bool OAIWcdmaObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utran_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wcdma_local_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rscp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wcdma_nmr.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWcdmaObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mcc_isValid && m_mnc_isValid && m_utran_cid_isValid && true;
}

} // namespace OpenAPI
