/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartMulticastGroupSession_request_LoRaWAN.h
 *
 * The LoRaWAN information used with the multicast session.
 */

#ifndef OAIStartMulticastGroupSession_request_LoRaWAN_H
#define OAIStartMulticastGroupSession_request_LoRaWAN_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStartMulticastGroupSession_request_LoRaWAN : public OAIObject {
public:
    OAIStartMulticastGroupSession_request_LoRaWAN();
    OAIStartMulticastGroupSession_request_LoRaWAN(QString json);
    ~OAIStartMulticastGroupSession_request_LoRaWAN() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDlDr() const;
    void setDlDr(const qint32 &dl_dr);
    bool is_dl_dr_Set() const;
    bool is_dl_dr_Valid() const;

    qint32 getDlFreq() const;
    void setDlFreq(const qint32 &dl_freq);
    bool is_dl_freq_Set() const;
    bool is_dl_freq_Valid() const;

    QDateTime getSessionStartTime() const;
    void setSessionStartTime(const QDateTime &session_start_time);
    bool is_session_start_time_Set() const;
    bool is_session_start_time_Valid() const;

    qint32 getSessionTimeout() const;
    void setSessionTimeout(const qint32 &session_timeout);
    bool is_session_timeout_Set() const;
    bool is_session_timeout_Valid() const;

    qint32 getPingSlotPeriod() const;
    void setPingSlotPeriod(const qint32 &ping_slot_period);
    bool is_ping_slot_period_Set() const;
    bool is_ping_slot_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_dl_dr;
    bool m_dl_dr_isSet;
    bool m_dl_dr_isValid;

    qint32 m_dl_freq;
    bool m_dl_freq_isSet;
    bool m_dl_freq_isValid;

    QDateTime m_session_start_time;
    bool m_session_start_time_isSet;
    bool m_session_start_time_isValid;

    qint32 m_session_timeout;
    bool m_session_timeout_isSet;
    bool m_session_timeout_isValid;

    qint32 m_ping_slot_period;
    bool m_ping_slot_period_isSet;
    bool m_ping_slot_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartMulticastGroupSession_request_LoRaWAN)

#endif // OAIStartMulticastGroupSession_request_LoRaWAN_H
