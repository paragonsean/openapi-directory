/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNetworkAnalyzerConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNetworkAnalyzerConfigurationResponse::OAIGetNetworkAnalyzerConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNetworkAnalyzerConfigurationResponse::OAIGetNetworkAnalyzerConfigurationResponse() {
    this->initializeModel();
}

OAIGetNetworkAnalyzerConfigurationResponse::~OAIGetNetworkAnalyzerConfigurationResponse() {}

void OAIGetNetworkAnalyzerConfigurationResponse::initializeModel() {

    m_trace_content_isSet = false;
    m_trace_content_isValid = false;

    m_wireless_devices_isSet = false;
    m_wireless_devices_isValid = false;

    m_wireless_gateways_isSet = false;
    m_wireless_gateways_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_multicast_groups_isSet = false;
    m_multicast_groups_isValid = false;
}

void OAIGetNetworkAnalyzerConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNetworkAnalyzerConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_trace_content_isValid = ::OpenAPI::fromJsonValue(m_trace_content, json[QString("TraceContent")]);
    m_trace_content_isSet = !json[QString("TraceContent")].isNull() && m_trace_content_isValid;

    m_wireless_devices_isValid = ::OpenAPI::fromJsonValue(m_wireless_devices, json[QString("WirelessDevices")]);
    m_wireless_devices_isSet = !json[QString("WirelessDevices")].isNull() && m_wireless_devices_isValid;

    m_wireless_gateways_isValid = ::OpenAPI::fromJsonValue(m_wireless_gateways, json[QString("WirelessGateways")]);
    m_wireless_gateways_isSet = !json[QString("WirelessGateways")].isNull() && m_wireless_gateways_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_multicast_groups_isValid = ::OpenAPI::fromJsonValue(m_multicast_groups, json[QString("MulticastGroups")]);
    m_multicast_groups_isSet = !json[QString("MulticastGroups")].isNull() && m_multicast_groups_isValid;
}

QString OAIGetNetworkAnalyzerConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNetworkAnalyzerConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_trace_content.isSet()) {
        obj.insert(QString("TraceContent"), ::OpenAPI::toJsonValue(m_trace_content));
    }
    if (m_wireless_devices.isSet()) {
        obj.insert(QString("WirelessDevices"), ::OpenAPI::toJsonValue(m_wireless_devices));
    }
    if (m_wireless_gateways.isSet()) {
        obj.insert(QString("WirelessGateways"), ::OpenAPI::toJsonValue(m_wireless_gateways));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_multicast_groups.isSet()) {
        obj.insert(QString("MulticastGroups"), ::OpenAPI::toJsonValue(m_multicast_groups));
    }
    return obj;
}

OAITraceContent OAIGetNetworkAnalyzerConfigurationResponse::getTraceContent() const {
    return m_trace_content;
}
void OAIGetNetworkAnalyzerConfigurationResponse::setTraceContent(const OAITraceContent &trace_content) {
    m_trace_content = trace_content;
    m_trace_content_isSet = true;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_trace_content_Set() const{
    return m_trace_content_isSet;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_trace_content_Valid() const{
    return m_trace_content_isValid;
}

QList OAIGetNetworkAnalyzerConfigurationResponse::getWirelessDevices() const {
    return m_wireless_devices;
}
void OAIGetNetworkAnalyzerConfigurationResponse::setWirelessDevices(const QList &wireless_devices) {
    m_wireless_devices = wireless_devices;
    m_wireless_devices_isSet = true;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_wireless_devices_Set() const{
    return m_wireless_devices_isSet;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_wireless_devices_Valid() const{
    return m_wireless_devices_isValid;
}

QList OAIGetNetworkAnalyzerConfigurationResponse::getWirelessGateways() const {
    return m_wireless_gateways;
}
void OAIGetNetworkAnalyzerConfigurationResponse::setWirelessGateways(const QList &wireless_gateways) {
    m_wireless_gateways = wireless_gateways;
    m_wireless_gateways_isSet = true;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_wireless_gateways_Set() const{
    return m_wireless_gateways_isSet;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_wireless_gateways_Valid() const{
    return m_wireless_gateways_isValid;
}

QString OAIGetNetworkAnalyzerConfigurationResponse::getDescription() const {
    return m_description;
}
void OAIGetNetworkAnalyzerConfigurationResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetNetworkAnalyzerConfigurationResponse::getArn() const {
    return m_arn;
}
void OAIGetNetworkAnalyzerConfigurationResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetNetworkAnalyzerConfigurationResponse::getName() const {
    return m_name;
}
void OAIGetNetworkAnalyzerConfigurationResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIGetNetworkAnalyzerConfigurationResponse::getMulticastGroups() const {
    return m_multicast_groups;
}
void OAIGetNetworkAnalyzerConfigurationResponse::setMulticastGroups(const QList &multicast_groups) {
    m_multicast_groups = multicast_groups;
    m_multicast_groups_isSet = true;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_multicast_groups_Set() const{
    return m_multicast_groups_isSet;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::is_multicast_groups_Valid() const{
    return m_multicast_groups_isValid;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trace_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_gateways.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNetworkAnalyzerConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
