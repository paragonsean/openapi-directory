/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPositionConfigurationItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPositionConfigurationItem::OAIPositionConfigurationItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPositionConfigurationItem::OAIPositionConfigurationItem() {
    this->initializeModel();
}

OAIPositionConfigurationItem::~OAIPositionConfigurationItem() {}

void OAIPositionConfigurationItem::initializeModel() {

    m_resource_identifier_isSet = false;
    m_resource_identifier_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_solvers_isSet = false;
    m_solvers_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;
}

void OAIPositionConfigurationItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPositionConfigurationItem::fromJsonObject(QJsonObject json) {

    m_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_resource_identifier, json[QString("ResourceIdentifier")]);
    m_resource_identifier_isSet = !json[QString("ResourceIdentifier")].isNull() && m_resource_identifier_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_solvers_isValid = ::OpenAPI::fromJsonValue(m_solvers, json[QString("Solvers")]);
    m_solvers_isSet = !json[QString("Solvers")].isNull() && m_solvers_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;
}

QString OAIPositionConfigurationItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPositionConfigurationItem::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_identifier_isSet) {
        obj.insert(QString("ResourceIdentifier"), ::OpenAPI::toJsonValue(m_resource_identifier));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_solvers.isSet()) {
        obj.insert(QString("Solvers"), ::OpenAPI::toJsonValue(m_solvers));
    }
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    return obj;
}

QString OAIPositionConfigurationItem::getResourceIdentifier() const {
    return m_resource_identifier;
}
void OAIPositionConfigurationItem::setResourceIdentifier(const QString &resource_identifier) {
    m_resource_identifier = resource_identifier;
    m_resource_identifier_isSet = true;
}

bool OAIPositionConfigurationItem::is_resource_identifier_Set() const{
    return m_resource_identifier_isSet;
}

bool OAIPositionConfigurationItem::is_resource_identifier_Valid() const{
    return m_resource_identifier_isValid;
}

OAIPositionResourceType OAIPositionConfigurationItem::getResourceType() const {
    return m_resource_type;
}
void OAIPositionConfigurationItem::setResourceType(const OAIPositionResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIPositionConfigurationItem::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIPositionConfigurationItem::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIPositionConfigurationItem_Solvers OAIPositionConfigurationItem::getSolvers() const {
    return m_solvers;
}
void OAIPositionConfigurationItem::setSolvers(const OAIPositionConfigurationItem_Solvers &solvers) {
    m_solvers = solvers;
    m_solvers_isSet = true;
}

bool OAIPositionConfigurationItem::is_solvers_Set() const{
    return m_solvers_isSet;
}

bool OAIPositionConfigurationItem::is_solvers_Valid() const{
    return m_solvers_isValid;
}

QString OAIPositionConfigurationItem::getDestination() const {
    return m_destination;
}
void OAIPositionConfigurationItem::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIPositionConfigurationItem::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIPositionConfigurationItem::is_destination_Valid() const{
    return m_destination_isValid;
}

bool OAIPositionConfigurationItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_solvers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPositionConfigurationItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
