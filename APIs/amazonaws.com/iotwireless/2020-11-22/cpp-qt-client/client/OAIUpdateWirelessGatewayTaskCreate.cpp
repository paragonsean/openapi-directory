/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWirelessGatewayTaskCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWirelessGatewayTaskCreate::OAIUpdateWirelessGatewayTaskCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWirelessGatewayTaskCreate::OAIUpdateWirelessGatewayTaskCreate() {
    this->initializeModel();
}

OAIUpdateWirelessGatewayTaskCreate::~OAIUpdateWirelessGatewayTaskCreate() {}

void OAIUpdateWirelessGatewayTaskCreate::initializeModel() {

    m_update_data_source_isSet = false;
    m_update_data_source_isValid = false;

    m_update_data_role_isSet = false;
    m_update_data_role_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;
}

void OAIUpdateWirelessGatewayTaskCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWirelessGatewayTaskCreate::fromJsonObject(QJsonObject json) {

    m_update_data_source_isValid = ::OpenAPI::fromJsonValue(m_update_data_source, json[QString("UpdateDataSource")]);
    m_update_data_source_isSet = !json[QString("UpdateDataSource")].isNull() && m_update_data_source_isValid;

    m_update_data_role_isValid = ::OpenAPI::fromJsonValue(m_update_data_role, json[QString("UpdateDataRole")]);
    m_update_data_role_isSet = !json[QString("UpdateDataRole")].isNull() && m_update_data_role_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;
}

QString OAIUpdateWirelessGatewayTaskCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWirelessGatewayTaskCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_update_data_source_isSet) {
        obj.insert(QString("UpdateDataSource"), ::OpenAPI::toJsonValue(m_update_data_source));
    }
    if (m_update_data_role_isSet) {
        obj.insert(QString("UpdateDataRole"), ::OpenAPI::toJsonValue(m_update_data_role));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    return obj;
}

QString OAIUpdateWirelessGatewayTaskCreate::getUpdateDataSource() const {
    return m_update_data_source;
}
void OAIUpdateWirelessGatewayTaskCreate::setUpdateDataSource(const QString &update_data_source) {
    m_update_data_source = update_data_source;
    m_update_data_source_isSet = true;
}

bool OAIUpdateWirelessGatewayTaskCreate::is_update_data_source_Set() const{
    return m_update_data_source_isSet;
}

bool OAIUpdateWirelessGatewayTaskCreate::is_update_data_source_Valid() const{
    return m_update_data_source_isValid;
}

QString OAIUpdateWirelessGatewayTaskCreate::getUpdateDataRole() const {
    return m_update_data_role;
}
void OAIUpdateWirelessGatewayTaskCreate::setUpdateDataRole(const QString &update_data_role) {
    m_update_data_role = update_data_role;
    m_update_data_role_isSet = true;
}

bool OAIUpdateWirelessGatewayTaskCreate::is_update_data_role_Set() const{
    return m_update_data_role_isSet;
}

bool OAIUpdateWirelessGatewayTaskCreate::is_update_data_role_Valid() const{
    return m_update_data_role_isValid;
}

OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN OAIUpdateWirelessGatewayTaskCreate::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIUpdateWirelessGatewayTaskCreate::setLoRaWan(const OAICreateWirelessGatewayTaskDefinition_request_Update_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIUpdateWirelessGatewayTaskCreate::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIUpdateWirelessGatewayTaskCreate::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

bool OAIUpdateWirelessGatewayTaskCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_data_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWirelessGatewayTaskCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
