/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendDataToMulticastGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendDataToMulticastGroupRequest::OAISendDataToMulticastGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendDataToMulticastGroupRequest::OAISendDataToMulticastGroupRequest() {
    this->initializeModel();
}

OAISendDataToMulticastGroupRequest::~OAISendDataToMulticastGroupRequest() {}

void OAISendDataToMulticastGroupRequest::initializeModel() {

    m_payload_data_isSet = false;
    m_payload_data_isValid = false;

    m_wireless_metadata_isSet = false;
    m_wireless_metadata_isValid = false;
}

void OAISendDataToMulticastGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendDataToMulticastGroupRequest::fromJsonObject(QJsonObject json) {

    m_payload_data_isValid = ::OpenAPI::fromJsonValue(m_payload_data, json[QString("PayloadData")]);
    m_payload_data_isSet = !json[QString("PayloadData")].isNull() && m_payload_data_isValid;

    m_wireless_metadata_isValid = ::OpenAPI::fromJsonValue(m_wireless_metadata, json[QString("WirelessMetadata")]);
    m_wireless_metadata_isSet = !json[QString("WirelessMetadata")].isNull() && m_wireless_metadata_isValid;
}

QString OAISendDataToMulticastGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendDataToMulticastGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_payload_data_isSet) {
        obj.insert(QString("PayloadData"), ::OpenAPI::toJsonValue(m_payload_data));
    }
    if (m_wireless_metadata.isSet()) {
        obj.insert(QString("WirelessMetadata"), ::OpenAPI::toJsonValue(m_wireless_metadata));
    }
    return obj;
}

QString OAISendDataToMulticastGroupRequest::getPayloadData() const {
    return m_payload_data;
}
void OAISendDataToMulticastGroupRequest::setPayloadData(const QString &payload_data) {
    m_payload_data = payload_data;
    m_payload_data_isSet = true;
}

bool OAISendDataToMulticastGroupRequest::is_payload_data_Set() const{
    return m_payload_data_isSet;
}

bool OAISendDataToMulticastGroupRequest::is_payload_data_Valid() const{
    return m_payload_data_isValid;
}

OAIMulticastWirelessMetadata OAISendDataToMulticastGroupRequest::getWirelessMetadata() const {
    return m_wireless_metadata;
}
void OAISendDataToMulticastGroupRequest::setWirelessMetadata(const OAIMulticastWirelessMetadata &wireless_metadata) {
    m_wireless_metadata = wireless_metadata;
    m_wireless_metadata_isSet = true;
}

bool OAISendDataToMulticastGroupRequest::is_wireless_metadata_Set() const{
    return m_wireless_metadata_isSet;
}

bool OAISendDataToMulticastGroupRequest::is_wireless_metadata_Valid() const{
    return m_wireless_metadata_isValid;
}

bool OAISendDataToMulticastGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payload_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendDataToMulticastGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payload_data_isValid && m_wireless_metadata_isValid && true;
}

} // namespace OpenAPI
