/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPositionResponse_Accuracy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPositionResponse_Accuracy::OAIGetPositionResponse_Accuracy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPositionResponse_Accuracy::OAIGetPositionResponse_Accuracy() {
    this->initializeModel();
}

OAIGetPositionResponse_Accuracy::~OAIGetPositionResponse_Accuracy() {}

void OAIGetPositionResponse_Accuracy::initializeModel() {

    m_horizontal_accuracy_isSet = false;
    m_horizontal_accuracy_isValid = false;

    m_vertical_accuracy_isSet = false;
    m_vertical_accuracy_isValid = false;
}

void OAIGetPositionResponse_Accuracy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPositionResponse_Accuracy::fromJsonObject(QJsonObject json) {

    m_horizontal_accuracy_isValid = ::OpenAPI::fromJsonValue(m_horizontal_accuracy, json[QString("HorizontalAccuracy")]);
    m_horizontal_accuracy_isSet = !json[QString("HorizontalAccuracy")].isNull() && m_horizontal_accuracy_isValid;

    m_vertical_accuracy_isValid = ::OpenAPI::fromJsonValue(m_vertical_accuracy, json[QString("VerticalAccuracy")]);
    m_vertical_accuracy_isSet = !json[QString("VerticalAccuracy")].isNull() && m_vertical_accuracy_isValid;
}

QString OAIGetPositionResponse_Accuracy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPositionResponse_Accuracy::asJsonObject() const {
    QJsonObject obj;
    if (m_horizontal_accuracy_isSet) {
        obj.insert(QString("HorizontalAccuracy"), ::OpenAPI::toJsonValue(m_horizontal_accuracy));
    }
    if (m_vertical_accuracy_isSet) {
        obj.insert(QString("VerticalAccuracy"), ::OpenAPI::toJsonValue(m_vertical_accuracy));
    }
    return obj;
}

float OAIGetPositionResponse_Accuracy::getHorizontalAccuracy() const {
    return m_horizontal_accuracy;
}
void OAIGetPositionResponse_Accuracy::setHorizontalAccuracy(const float &horizontal_accuracy) {
    m_horizontal_accuracy = horizontal_accuracy;
    m_horizontal_accuracy_isSet = true;
}

bool OAIGetPositionResponse_Accuracy::is_horizontal_accuracy_Set() const{
    return m_horizontal_accuracy_isSet;
}

bool OAIGetPositionResponse_Accuracy::is_horizontal_accuracy_Valid() const{
    return m_horizontal_accuracy_isValid;
}

float OAIGetPositionResponse_Accuracy::getVerticalAccuracy() const {
    return m_vertical_accuracy;
}
void OAIGetPositionResponse_Accuracy::setVerticalAccuracy(const float &vertical_accuracy) {
    m_vertical_accuracy = vertical_accuracy;
    m_vertical_accuracy_isSet = true;
}

bool OAIGetPositionResponse_Accuracy::is_vertical_accuracy_Set() const{
    return m_vertical_accuracy_isSet;
}

bool OAIGetPositionResponse_Accuracy::is_vertical_accuracy_Valid() const{
    return m_vertical_accuracy_isValid;
}

bool OAIGetPositionResponse_Accuracy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_horizontal_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPositionResponse_Accuracy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
