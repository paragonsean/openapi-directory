/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEventConfigurationByResourceTypesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEventConfigurationByResourceTypesResponse::OAIGetEventConfigurationByResourceTypesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEventConfigurationByResourceTypesResponse::OAIGetEventConfigurationByResourceTypesResponse() {
    this->initializeModel();
}

OAIGetEventConfigurationByResourceTypesResponse::~OAIGetEventConfigurationByResourceTypesResponse() {}

void OAIGetEventConfigurationByResourceTypesResponse::initializeModel() {

    m_device_registration_state_isSet = false;
    m_device_registration_state_isValid = false;

    m_proximity_isSet = false;
    m_proximity_isValid = false;

    m_join_isSet = false;
    m_join_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_message_delivery_status_isSet = false;
    m_message_delivery_status_isValid = false;
}

void OAIGetEventConfigurationByResourceTypesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEventConfigurationByResourceTypesResponse::fromJsonObject(QJsonObject json) {

    m_device_registration_state_isValid = ::OpenAPI::fromJsonValue(m_device_registration_state, json[QString("DeviceRegistrationState")]);
    m_device_registration_state_isSet = !json[QString("DeviceRegistrationState")].isNull() && m_device_registration_state_isValid;

    m_proximity_isValid = ::OpenAPI::fromJsonValue(m_proximity, json[QString("Proximity")]);
    m_proximity_isSet = !json[QString("Proximity")].isNull() && m_proximity_isValid;

    m_join_isValid = ::OpenAPI::fromJsonValue(m_join, json[QString("Join")]);
    m_join_isSet = !json[QString("Join")].isNull() && m_join_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("ConnectionStatus")]);
    m_connection_status_isSet = !json[QString("ConnectionStatus")].isNull() && m_connection_status_isValid;

    m_message_delivery_status_isValid = ::OpenAPI::fromJsonValue(m_message_delivery_status, json[QString("MessageDeliveryStatus")]);
    m_message_delivery_status_isSet = !json[QString("MessageDeliveryStatus")].isNull() && m_message_delivery_status_isValid;
}

QString OAIGetEventConfigurationByResourceTypesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEventConfigurationByResourceTypesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_device_registration_state.isSet()) {
        obj.insert(QString("DeviceRegistrationState"), ::OpenAPI::toJsonValue(m_device_registration_state));
    }
    if (m_proximity.isSet()) {
        obj.insert(QString("Proximity"), ::OpenAPI::toJsonValue(m_proximity));
    }
    if (m_join.isSet()) {
        obj.insert(QString("Join"), ::OpenAPI::toJsonValue(m_join));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("ConnectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_message_delivery_status.isSet()) {
        obj.insert(QString("MessageDeliveryStatus"), ::OpenAPI::toJsonValue(m_message_delivery_status));
    }
    return obj;
}

OAIGetEventConfigurationByResourceTypesResponse_DeviceRegistrationState OAIGetEventConfigurationByResourceTypesResponse::getDeviceRegistrationState() const {
    return m_device_registration_state;
}
void OAIGetEventConfigurationByResourceTypesResponse::setDeviceRegistrationState(const OAIGetEventConfigurationByResourceTypesResponse_DeviceRegistrationState &device_registration_state) {
    m_device_registration_state = device_registration_state;
    m_device_registration_state_isSet = true;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_device_registration_state_Set() const{
    return m_device_registration_state_isSet;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_device_registration_state_Valid() const{
    return m_device_registration_state_isValid;
}

OAIGetEventConfigurationByResourceTypesResponse_Proximity OAIGetEventConfigurationByResourceTypesResponse::getProximity() const {
    return m_proximity;
}
void OAIGetEventConfigurationByResourceTypesResponse::setProximity(const OAIGetEventConfigurationByResourceTypesResponse_Proximity &proximity) {
    m_proximity = proximity;
    m_proximity_isSet = true;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_proximity_Set() const{
    return m_proximity_isSet;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_proximity_Valid() const{
    return m_proximity_isValid;
}

OAIGetEventConfigurationByResourceTypesResponse_Join OAIGetEventConfigurationByResourceTypesResponse::getJoin() const {
    return m_join;
}
void OAIGetEventConfigurationByResourceTypesResponse::setJoin(const OAIGetEventConfigurationByResourceTypesResponse_Join &join) {
    m_join = join;
    m_join_isSet = true;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_join_Set() const{
    return m_join_isSet;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_join_Valid() const{
    return m_join_isValid;
}

OAIGetEventConfigurationByResourceTypesResponse_ConnectionStatus OAIGetEventConfigurationByResourceTypesResponse::getConnectionStatus() const {
    return m_connection_status;
}
void OAIGetEventConfigurationByResourceTypesResponse::setConnectionStatus(const OAIGetEventConfigurationByResourceTypesResponse_ConnectionStatus &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

OAIGetEventConfigurationByResourceTypesResponse_MessageDeliveryStatus OAIGetEventConfigurationByResourceTypesResponse::getMessageDeliveryStatus() const {
    return m_message_delivery_status;
}
void OAIGetEventConfigurationByResourceTypesResponse::setMessageDeliveryStatus(const OAIGetEventConfigurationByResourceTypesResponse_MessageDeliveryStatus &message_delivery_status) {
    m_message_delivery_status = message_delivery_status;
    m_message_delivery_status_isSet = true;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_message_delivery_status_Set() const{
    return m_message_delivery_status_isSet;
}

bool OAIGetEventConfigurationByResourceTypesResponse::is_message_delivery_status_Valid() const{
    return m_message_delivery_status_isValid;
}

bool OAIGetEventConfigurationByResourceTypesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_registration_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_join.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_delivery_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEventConfigurationByResourceTypesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
