/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICdmaObj.h
 *
 * CDMA (Code-division multiple access) object.
 */

#ifndef OAICdmaObj_H
#define OAICdmaObj_H

#include <QJsonObject>

#include "OAICdmaObj_CdmaLocalId.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICdmaObj_CdmaLocalId;

class OAICdmaObj : public OAIObject {
public:
    OAICdmaObj();
    OAICdmaObj(QString json);
    ~OAICdmaObj() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getSystemId() const;
    void setSystemId(const qint32 &system_id);
    bool is_system_id_Set() const;
    bool is_system_id_Valid() const;

    qint32 getNetworkId() const;
    void setNetworkId(const qint32 &network_id);
    bool is_network_id_Set() const;
    bool is_network_id_Valid() const;

    qint32 getBaseStationId() const;
    void setBaseStationId(const qint32 &base_station_id);
    bool is_base_station_id_Set() const;
    bool is_base_station_id_Valid() const;

    qint32 getRegistrationZone() const;
    void setRegistrationZone(const qint32 &registration_zone);
    bool is_registration_zone_Set() const;
    bool is_registration_zone_Valid() const;

    OAICdmaObj_CdmaLocalId getCdmaLocalId() const;
    void setCdmaLocalId(const OAICdmaObj_CdmaLocalId &cdma_local_id);
    bool is_cdma_local_id_Set() const;
    bool is_cdma_local_id_Valid() const;

    qint32 getPilotPower() const;
    void setPilotPower(const qint32 &pilot_power);
    bool is_pilot_power_Set() const;
    bool is_pilot_power_Valid() const;

    float getBaseLat() const;
    void setBaseLat(const float &base_lat);
    bool is_base_lat_Set() const;
    bool is_base_lat_Valid() const;

    float getBaseLng() const;
    void setBaseLng(const float &base_lng);
    bool is_base_lng_Set() const;
    bool is_base_lng_Valid() const;

    QList getCdmaNmr() const;
    void setCdmaNmr(const QList &cdma_nmr);
    bool is_cdma_nmr_Set() const;
    bool is_cdma_nmr_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_system_id;
    bool m_system_id_isSet;
    bool m_system_id_isValid;

    qint32 m_network_id;
    bool m_network_id_isSet;
    bool m_network_id_isValid;

    qint32 m_base_station_id;
    bool m_base_station_id_isSet;
    bool m_base_station_id_isValid;

    qint32 m_registration_zone;
    bool m_registration_zone_isSet;
    bool m_registration_zone_isValid;

    OAICdmaObj_CdmaLocalId m_cdma_local_id;
    bool m_cdma_local_id_isSet;
    bool m_cdma_local_id_isValid;

    qint32 m_pilot_power;
    bool m_pilot_power_isSet;
    bool m_pilot_power_isValid;

    float m_base_lat;
    bool m_base_lat_isSet;
    bool m_base_lat_isValid;

    float m_base_lng;
    bool m_base_lng_isSet;
    bool m_base_lng_isValid;

    QList m_cdma_nmr;
    bool m_cdma_nmr_isSet;
    bool m_cdma_nmr_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICdmaObj)

#endif // OAICdmaObj_H
