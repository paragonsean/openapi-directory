/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILoRaWANGetServiceProfileInfo.h
 *
 * LoRaWANGetServiceProfileInfo object.
 */

#ifndef OAILoRaWANGetServiceProfileInfo_H
#define OAILoRaWANGetServiceProfileInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILoRaWANGetServiceProfileInfo : public OAIObject {
public:
    OAILoRaWANGetServiceProfileInfo();
    OAILoRaWANGetServiceProfileInfo(QString json);
    ~OAILoRaWANGetServiceProfileInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getUlRate() const;
    void setUlRate(const qint32 &ul_rate);
    bool is_ul_rate_Set() const;
    bool is_ul_rate_Valid() const;

    qint32 getUlBucketSize() const;
    void setUlBucketSize(const qint32 &ul_bucket_size);
    bool is_ul_bucket_size_Set() const;
    bool is_ul_bucket_size_Valid() const;

    QString getUlRatePolicy() const;
    void setUlRatePolicy(const QString &ul_rate_policy);
    bool is_ul_rate_policy_Set() const;
    bool is_ul_rate_policy_Valid() const;

    qint32 getDlRate() const;
    void setDlRate(const qint32 &dl_rate);
    bool is_dl_rate_Set() const;
    bool is_dl_rate_Valid() const;

    qint32 getDlBucketSize() const;
    void setDlBucketSize(const qint32 &dl_bucket_size);
    bool is_dl_bucket_size_Set() const;
    bool is_dl_bucket_size_Valid() const;

    QString getDlRatePolicy() const;
    void setDlRatePolicy(const QString &dl_rate_policy);
    bool is_dl_rate_policy_Set() const;
    bool is_dl_rate_policy_Valid() const;

    bool getAddGwMetadata() const;
    void setAddGwMetadata(const bool &add_gw_metadata);
    bool is_add_gw_metadata_Set() const;
    bool is_add_gw_metadata_Valid() const;

    qint32 getDevStatusReqFreq() const;
    void setDevStatusReqFreq(const qint32 &dev_status_req_freq);
    bool is_dev_status_req_freq_Set() const;
    bool is_dev_status_req_freq_Valid() const;

    bool getReportDevStatusBattery() const;
    void setReportDevStatusBattery(const bool &report_dev_status_battery);
    bool is_report_dev_status_battery_Set() const;
    bool is_report_dev_status_battery_Valid() const;

    bool getReportDevStatusMargin() const;
    void setReportDevStatusMargin(const bool &report_dev_status_margin);
    bool is_report_dev_status_margin_Set() const;
    bool is_report_dev_status_margin_Valid() const;

    qint32 getDrMin() const;
    void setDrMin(const qint32 &dr_min);
    bool is_dr_min_Set() const;
    bool is_dr_min_Valid() const;

    qint32 getDrMax() const;
    void setDrMax(const qint32 &dr_max);
    bool is_dr_max_Set() const;
    bool is_dr_max_Valid() const;

    QString getChannelMask() const;
    void setChannelMask(const QString &channel_mask);
    bool is_channel_mask_Set() const;
    bool is_channel_mask_Valid() const;

    bool getPrAllowed() const;
    void setPrAllowed(const bool &pr_allowed);
    bool is_pr_allowed_Set() const;
    bool is_pr_allowed_Valid() const;

    bool getHrAllowed() const;
    void setHrAllowed(const bool &hr_allowed);
    bool is_hr_allowed_Set() const;
    bool is_hr_allowed_Valid() const;

    bool getRaAllowed() const;
    void setRaAllowed(const bool &ra_allowed);
    bool is_ra_allowed_Set() const;
    bool is_ra_allowed_Valid() const;

    bool getNwkGeoLoc() const;
    void setNwkGeoLoc(const bool &nwk_geo_loc);
    bool is_nwk_geo_loc_Set() const;
    bool is_nwk_geo_loc_Valid() const;

    qint32 getTargetPer() const;
    void setTargetPer(const qint32 &target_per);
    bool is_target_per_Set() const;
    bool is_target_per_Valid() const;

    qint32 getMinGwDiversity() const;
    void setMinGwDiversity(const qint32 &min_gw_diversity);
    bool is_min_gw_diversity_Set() const;
    bool is_min_gw_diversity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_ul_rate;
    bool m_ul_rate_isSet;
    bool m_ul_rate_isValid;

    qint32 m_ul_bucket_size;
    bool m_ul_bucket_size_isSet;
    bool m_ul_bucket_size_isValid;

    QString m_ul_rate_policy;
    bool m_ul_rate_policy_isSet;
    bool m_ul_rate_policy_isValid;

    qint32 m_dl_rate;
    bool m_dl_rate_isSet;
    bool m_dl_rate_isValid;

    qint32 m_dl_bucket_size;
    bool m_dl_bucket_size_isSet;
    bool m_dl_bucket_size_isValid;

    QString m_dl_rate_policy;
    bool m_dl_rate_policy_isSet;
    bool m_dl_rate_policy_isValid;

    bool m_add_gw_metadata;
    bool m_add_gw_metadata_isSet;
    bool m_add_gw_metadata_isValid;

    qint32 m_dev_status_req_freq;
    bool m_dev_status_req_freq_isSet;
    bool m_dev_status_req_freq_isValid;

    bool m_report_dev_status_battery;
    bool m_report_dev_status_battery_isSet;
    bool m_report_dev_status_battery_isValid;

    bool m_report_dev_status_margin;
    bool m_report_dev_status_margin_isSet;
    bool m_report_dev_status_margin_isValid;

    qint32 m_dr_min;
    bool m_dr_min_isSet;
    bool m_dr_min_isValid;

    qint32 m_dr_max;
    bool m_dr_max_isSet;
    bool m_dr_max_isValid;

    QString m_channel_mask;
    bool m_channel_mask_isSet;
    bool m_channel_mask_isValid;

    bool m_pr_allowed;
    bool m_pr_allowed_isSet;
    bool m_pr_allowed_isValid;

    bool m_hr_allowed;
    bool m_hr_allowed_isSet;
    bool m_hr_allowed_isValid;

    bool m_ra_allowed;
    bool m_ra_allowed_isSet;
    bool m_ra_allowed_isValid;

    bool m_nwk_geo_loc;
    bool m_nwk_geo_loc_isSet;
    bool m_nwk_geo_loc_isValid;

    qint32 m_target_per;
    bool m_target_per_isSet;
    bool m_target_per_isValid;

    qint32 m_min_gw_diversity;
    bool m_min_gw_diversity_isSet;
    bool m_min_gw_diversity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILoRaWANGetServiceProfileInfo)

#endif // OAILoRaWANGetServiceProfileInfo_H
