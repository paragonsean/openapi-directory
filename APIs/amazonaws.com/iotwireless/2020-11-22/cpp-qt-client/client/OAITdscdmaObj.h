/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITdscdmaObj.h
 *
 * TD-SCDMA object.
 */

#ifndef OAITdscdmaObj_H
#define OAITdscdmaObj_H

#include <QJsonObject>

#include "OAITdscdmaObj_TdscdmaLocalId.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITdscdmaObj_TdscdmaLocalId;

class OAITdscdmaObj : public OAIObject {
public:
    OAITdscdmaObj();
    OAITdscdmaObj(QString json);
    ~OAITdscdmaObj() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMcc() const;
    void setMcc(const qint32 &mcc);
    bool is_mcc_Set() const;
    bool is_mcc_Valid() const;

    qint32 getMnc() const;
    void setMnc(const qint32 &mnc);
    bool is_mnc_Set() const;
    bool is_mnc_Valid() const;

    qint32 getLac() const;
    void setLac(const qint32 &lac);
    bool is_lac_Set() const;
    bool is_lac_Valid() const;

    qint32 getUtranCid() const;
    void setUtranCid(const qint32 &utran_cid);
    bool is_utran_cid_Set() const;
    bool is_utran_cid_Valid() const;

    OAITdscdmaObj_TdscdmaLocalId getTdscdmaLocalId() const;
    void setTdscdmaLocalId(const OAITdscdmaObj_TdscdmaLocalId &tdscdma_local_id);
    bool is_tdscdma_local_id_Set() const;
    bool is_tdscdma_local_id_Valid() const;

    qint32 getTdscdmaTimingAdvance() const;
    void setTdscdmaTimingAdvance(const qint32 &tdscdma_timing_advance);
    bool is_tdscdma_timing_advance_Set() const;
    bool is_tdscdma_timing_advance_Valid() const;

    qint32 getRscp() const;
    void setRscp(const qint32 &rscp);
    bool is_rscp_Set() const;
    bool is_rscp_Valid() const;

    qint32 getPathLoss() const;
    void setPathLoss(const qint32 &path_loss);
    bool is_path_loss_Set() const;
    bool is_path_loss_Valid() const;

    QList getTdscdmaNmr() const;
    void setTdscdmaNmr(const QList &tdscdma_nmr);
    bool is_tdscdma_nmr_Set() const;
    bool is_tdscdma_nmr_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_mcc;
    bool m_mcc_isSet;
    bool m_mcc_isValid;

    qint32 m_mnc;
    bool m_mnc_isSet;
    bool m_mnc_isValid;

    qint32 m_lac;
    bool m_lac_isSet;
    bool m_lac_isValid;

    qint32 m_utran_cid;
    bool m_utran_cid_isSet;
    bool m_utran_cid_isValid;

    OAITdscdmaObj_TdscdmaLocalId m_tdscdma_local_id;
    bool m_tdscdma_local_id_isSet;
    bool m_tdscdma_local_id_isValid;

    qint32 m_tdscdma_timing_advance;
    bool m_tdscdma_timing_advance_isSet;
    bool m_tdscdma_timing_advance_isValid;

    qint32 m_rscp;
    bool m_rscp_isSet;
    bool m_rscp_isValid;

    qint32 m_path_loss;
    bool m_path_loss_isSet;
    bool m_path_loss_isValid;

    QList m_tdscdma_nmr;
    bool m_tdscdma_nmr_isSet;
    bool m_tdscdma_nmr_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITdscdmaObj)

#endif // OAITdscdmaObj_H
