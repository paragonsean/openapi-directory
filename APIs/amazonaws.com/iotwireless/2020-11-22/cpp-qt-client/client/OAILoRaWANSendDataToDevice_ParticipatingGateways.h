/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILoRaWANSendDataToDevice_ParticipatingGateways.h
 *
 * 
 */

#ifndef OAILoRaWANSendDataToDevice_ParticipatingGateways_H
#define OAILoRaWANSendDataToDevice_ParticipatingGateways_H

#include <QJsonObject>

#include "OAIDownlinkMode.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILoRaWANSendDataToDevice_ParticipatingGateways : public OAIObject {
public:
    OAILoRaWANSendDataToDevice_ParticipatingGateways();
    OAILoRaWANSendDataToDevice_ParticipatingGateways(QString json);
    ~OAILoRaWANSendDataToDevice_ParticipatingGateways() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDownlinkMode getDownlinkMode() const;
    void setDownlinkMode(const OAIDownlinkMode &downlink_mode);
    bool is_downlink_mode_Set() const;
    bool is_downlink_mode_Valid() const;

    QList getGatewayList() const;
    void setGatewayList(const QList &gateway_list);
    bool is_gateway_list_Set() const;
    bool is_gateway_list_Valid() const;

    qint32 getTransmissionInterval() const;
    void setTransmissionInterval(const qint32 &transmission_interval);
    bool is_transmission_interval_Set() const;
    bool is_transmission_interval_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDownlinkMode m_downlink_mode;
    bool m_downlink_mode_isSet;
    bool m_downlink_mode_isValid;

    QList m_gateway_list;
    bool m_gateway_list_isSet;
    bool m_gateway_list_isValid;

    qint32 m_transmission_interval;
    bool m_transmission_interval_isSet;
    bool m_transmission_interval_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILoRaWANSendDataToDevice_ParticipatingGateways)

#endif // OAILoRaWANSendDataToDevice_ParticipatingGateways_H
