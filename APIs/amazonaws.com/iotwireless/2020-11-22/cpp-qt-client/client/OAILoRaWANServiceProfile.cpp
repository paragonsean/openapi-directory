/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoRaWANServiceProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoRaWANServiceProfile::OAILoRaWANServiceProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoRaWANServiceProfile::OAILoRaWANServiceProfile() {
    this->initializeModel();
}

OAILoRaWANServiceProfile::~OAILoRaWANServiceProfile() {}

void OAILoRaWANServiceProfile::initializeModel() {

    m_add_gw_metadata_isSet = false;
    m_add_gw_metadata_isValid = false;

    m_dr_min_isSet = false;
    m_dr_min_isValid = false;

    m_dr_max_isSet = false;
    m_dr_max_isValid = false;

    m_pr_allowed_isSet = false;
    m_pr_allowed_isValid = false;

    m_ra_allowed_isSet = false;
    m_ra_allowed_isValid = false;
}

void OAILoRaWANServiceProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoRaWANServiceProfile::fromJsonObject(QJsonObject json) {

    m_add_gw_metadata_isValid = ::OpenAPI::fromJsonValue(m_add_gw_metadata, json[QString("AddGwMetadata")]);
    m_add_gw_metadata_isSet = !json[QString("AddGwMetadata")].isNull() && m_add_gw_metadata_isValid;

    m_dr_min_isValid = ::OpenAPI::fromJsonValue(m_dr_min, json[QString("DrMin")]);
    m_dr_min_isSet = !json[QString("DrMin")].isNull() && m_dr_min_isValid;

    m_dr_max_isValid = ::OpenAPI::fromJsonValue(m_dr_max, json[QString("DrMax")]);
    m_dr_max_isSet = !json[QString("DrMax")].isNull() && m_dr_max_isValid;

    m_pr_allowed_isValid = ::OpenAPI::fromJsonValue(m_pr_allowed, json[QString("PrAllowed")]);
    m_pr_allowed_isSet = !json[QString("PrAllowed")].isNull() && m_pr_allowed_isValid;

    m_ra_allowed_isValid = ::OpenAPI::fromJsonValue(m_ra_allowed, json[QString("RaAllowed")]);
    m_ra_allowed_isSet = !json[QString("RaAllowed")].isNull() && m_ra_allowed_isValid;
}

QString OAILoRaWANServiceProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoRaWANServiceProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_add_gw_metadata_isSet) {
        obj.insert(QString("AddGwMetadata"), ::OpenAPI::toJsonValue(m_add_gw_metadata));
    }
    if (m_dr_min_isSet) {
        obj.insert(QString("DrMin"), ::OpenAPI::toJsonValue(m_dr_min));
    }
    if (m_dr_max_isSet) {
        obj.insert(QString("DrMax"), ::OpenAPI::toJsonValue(m_dr_max));
    }
    if (m_pr_allowed_isSet) {
        obj.insert(QString("PrAllowed"), ::OpenAPI::toJsonValue(m_pr_allowed));
    }
    if (m_ra_allowed_isSet) {
        obj.insert(QString("RaAllowed"), ::OpenAPI::toJsonValue(m_ra_allowed));
    }
    return obj;
}

bool OAILoRaWANServiceProfile::getAddGwMetadata() const {
    return m_add_gw_metadata;
}
void OAILoRaWANServiceProfile::setAddGwMetadata(const bool &add_gw_metadata) {
    m_add_gw_metadata = add_gw_metadata;
    m_add_gw_metadata_isSet = true;
}

bool OAILoRaWANServiceProfile::is_add_gw_metadata_Set() const{
    return m_add_gw_metadata_isSet;
}

bool OAILoRaWANServiceProfile::is_add_gw_metadata_Valid() const{
    return m_add_gw_metadata_isValid;
}

qint32 OAILoRaWANServiceProfile::getDrMin() const {
    return m_dr_min;
}
void OAILoRaWANServiceProfile::setDrMin(const qint32 &dr_min) {
    m_dr_min = dr_min;
    m_dr_min_isSet = true;
}

bool OAILoRaWANServiceProfile::is_dr_min_Set() const{
    return m_dr_min_isSet;
}

bool OAILoRaWANServiceProfile::is_dr_min_Valid() const{
    return m_dr_min_isValid;
}

qint32 OAILoRaWANServiceProfile::getDrMax() const {
    return m_dr_max;
}
void OAILoRaWANServiceProfile::setDrMax(const qint32 &dr_max) {
    m_dr_max = dr_max;
    m_dr_max_isSet = true;
}

bool OAILoRaWANServiceProfile::is_dr_max_Set() const{
    return m_dr_max_isSet;
}

bool OAILoRaWANServiceProfile::is_dr_max_Valid() const{
    return m_dr_max_isValid;
}

bool OAILoRaWANServiceProfile::getPrAllowed() const {
    return m_pr_allowed;
}
void OAILoRaWANServiceProfile::setPrAllowed(const bool &pr_allowed) {
    m_pr_allowed = pr_allowed;
    m_pr_allowed_isSet = true;
}

bool OAILoRaWANServiceProfile::is_pr_allowed_Set() const{
    return m_pr_allowed_isSet;
}

bool OAILoRaWANServiceProfile::is_pr_allowed_Valid() const{
    return m_pr_allowed_isValid;
}

bool OAILoRaWANServiceProfile::getRaAllowed() const {
    return m_ra_allowed;
}
void OAILoRaWANServiceProfile::setRaAllowed(const bool &ra_allowed) {
    m_ra_allowed = ra_allowed;
    m_ra_allowed_isSet = true;
}

bool OAILoRaWANServiceProfile::is_ra_allowed_Set() const{
    return m_ra_allowed_isSet;
}

bool OAILoRaWANServiceProfile::is_ra_allowed_Valid() const{
    return m_ra_allowed_isValid;
}

bool OAILoRaWANServiceProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_gw_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dr_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dr_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pr_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ra_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoRaWANServiceProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
