/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWirelessGatewayTaskDefinitionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWirelessGatewayTaskDefinitionRequest::OAICreateWirelessGatewayTaskDefinitionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWirelessGatewayTaskDefinitionRequest::OAICreateWirelessGatewayTaskDefinitionRequest() {
    this->initializeModel();
}

OAICreateWirelessGatewayTaskDefinitionRequest::~OAICreateWirelessGatewayTaskDefinitionRequest() {}

void OAICreateWirelessGatewayTaskDefinitionRequest::initializeModel() {

    m_auto_create_tasks_isSet = false;
    m_auto_create_tasks_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateWirelessGatewayTaskDefinitionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWirelessGatewayTaskDefinitionRequest::fromJsonObject(QJsonObject json) {

    m_auto_create_tasks_isValid = ::OpenAPI::fromJsonValue(m_auto_create_tasks, json[QString("AutoCreateTasks")]);
    m_auto_create_tasks_isSet = !json[QString("AutoCreateTasks")].isNull() && m_auto_create_tasks_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("Update")]);
    m_update_isSet = !json[QString("Update")].isNull() && m_update_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateWirelessGatewayTaskDefinitionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWirelessGatewayTaskDefinitionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_create_tasks_isSet) {
        obj.insert(QString("AutoCreateTasks"), ::OpenAPI::toJsonValue(m_auto_create_tasks));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update.isSet()) {
        obj.insert(QString("Update"), ::OpenAPI::toJsonValue(m_update));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::getAutoCreateTasks() const {
    return m_auto_create_tasks;
}
void OAICreateWirelessGatewayTaskDefinitionRequest::setAutoCreateTasks(const bool &auto_create_tasks) {
    m_auto_create_tasks = auto_create_tasks;
    m_auto_create_tasks_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_auto_create_tasks_Set() const{
    return m_auto_create_tasks_isSet;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_auto_create_tasks_Valid() const{
    return m_auto_create_tasks_isValid;
}

QString OAICreateWirelessGatewayTaskDefinitionRequest::getName() const {
    return m_name;
}
void OAICreateWirelessGatewayTaskDefinitionRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIGetWirelessGatewayTaskDefinitionResponse_Update OAICreateWirelessGatewayTaskDefinitionRequest::getUpdate() const {
    return m_update;
}
void OAICreateWirelessGatewayTaskDefinitionRequest::setUpdate(const OAIGetWirelessGatewayTaskDefinitionResponse_Update &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_update_Set() const{
    return m_update_isSet;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_update_Valid() const{
    return m_update_isValid;
}

QString OAICreateWirelessGatewayTaskDefinitionRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateWirelessGatewayTaskDefinitionRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList OAICreateWirelessGatewayTaskDefinitionRequest::getTags() const {
    return m_tags;
}
void OAICreateWirelessGatewayTaskDefinitionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_create_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWirelessGatewayTaskDefinitionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_create_tasks_isValid && true;
}

} // namespace OpenAPI
