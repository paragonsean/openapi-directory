/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWirelessGatewayRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWirelessGatewayRequest::OAICreateWirelessGatewayRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWirelessGatewayRequest::OAICreateWirelessGatewayRequest() {
    this->initializeModel();
}

OAICreateWirelessGatewayRequest::~OAICreateWirelessGatewayRequest() {}

void OAICreateWirelessGatewayRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAICreateWirelessGatewayRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWirelessGatewayRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAICreateWirelessGatewayRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWirelessGatewayRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QString OAICreateWirelessGatewayRequest::getName() const {
    return m_name;
}
void OAICreateWirelessGatewayRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWirelessGatewayRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWirelessGatewayRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateWirelessGatewayRequest::getDescription() const {
    return m_description;
}
void OAICreateWirelessGatewayRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateWirelessGatewayRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateWirelessGatewayRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateWirelessGatewayRequest_LoRaWAN OAICreateWirelessGatewayRequest::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAICreateWirelessGatewayRequest::setLoRaWan(const OAICreateWirelessGatewayRequest_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAICreateWirelessGatewayRequest::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAICreateWirelessGatewayRequest::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

QList OAICreateWirelessGatewayRequest::getTags() const {
    return m_tags;
}
void OAICreateWirelessGatewayRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWirelessGatewayRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWirelessGatewayRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateWirelessGatewayRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateWirelessGatewayRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateWirelessGatewayRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateWirelessGatewayRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAICreateWirelessGatewayRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWirelessGatewayRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lo_ra_wan_isValid && true;
}

} // namespace OpenAPI
