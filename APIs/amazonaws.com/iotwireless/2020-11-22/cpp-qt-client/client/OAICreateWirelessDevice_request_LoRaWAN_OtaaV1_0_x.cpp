/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x() {
    this->initializeModel();
}

OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::~OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x() {}

void OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::initializeModel() {

    m_app_key_isSet = false;
    m_app_key_isValid = false;

    m_app_eui_isSet = false;
    m_app_eui_isValid = false;

    m_gen_app_key_isSet = false;
    m_gen_app_key_isValid = false;
}

void OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::fromJsonObject(QJsonObject json) {

    m_app_key_isValid = ::OpenAPI::fromJsonValue(m_app_key, json[QString("AppKey")]);
    m_app_key_isSet = !json[QString("AppKey")].isNull() && m_app_key_isValid;

    m_app_eui_isValid = ::OpenAPI::fromJsonValue(m_app_eui, json[QString("AppEui")]);
    m_app_eui_isSet = !json[QString("AppEui")].isNull() && m_app_eui_isValid;

    m_gen_app_key_isValid = ::OpenAPI::fromJsonValue(m_gen_app_key, json[QString("GenAppKey")]);
    m_gen_app_key_isSet = !json[QString("GenAppKey")].isNull() && m_gen_app_key_isValid;
}

QString OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::asJsonObject() const {
    QJsonObject obj;
    if (m_app_key_isSet) {
        obj.insert(QString("AppKey"), ::OpenAPI::toJsonValue(m_app_key));
    }
    if (m_app_eui_isSet) {
        obj.insert(QString("AppEui"), ::OpenAPI::toJsonValue(m_app_eui));
    }
    if (m_gen_app_key_isSet) {
        obj.insert(QString("GenAppKey"), ::OpenAPI::toJsonValue(m_gen_app_key));
    }
    return obj;
}

QString OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::getAppKey() const {
    return m_app_key;
}
void OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::setAppKey(const QString &app_key) {
    m_app_key = app_key;
    m_app_key_isSet = true;
}

bool OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::is_app_key_Set() const{
    return m_app_key_isSet;
}

bool OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::is_app_key_Valid() const{
    return m_app_key_isValid;
}

QString OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::getAppEui() const {
    return m_app_eui;
}
void OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::setAppEui(const QString &app_eui) {
    m_app_eui = app_eui;
    m_app_eui_isSet = true;
}

bool OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::is_app_eui_Set() const{
    return m_app_eui_isSet;
}

bool OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::is_app_eui_Valid() const{
    return m_app_eui_isValid;
}

QString OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::getGenAppKey() const {
    return m_gen_app_key;
}
void OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::setGenAppKey(const QString &gen_app_key) {
    m_gen_app_key = gen_app_key;
    m_gen_app_key_isSet = true;
}

bool OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::is_gen_app_key_Set() const{
    return m_gen_app_key_isSet;
}

bool OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::is_gen_app_key_Valid() const{
    return m_gen_app_key_isValid;
}

bool OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_eui_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gen_app_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWirelessDevice_request_LoRaWAN_OtaaV1_0_x::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
