/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateNetworkAnalyzerConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateNetworkAnalyzerConfigurationRequest::OAIUpdateNetworkAnalyzerConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateNetworkAnalyzerConfigurationRequest::OAIUpdateNetworkAnalyzerConfigurationRequest() {
    this->initializeModel();
}

OAIUpdateNetworkAnalyzerConfigurationRequest::~OAIUpdateNetworkAnalyzerConfigurationRequest() {}

void OAIUpdateNetworkAnalyzerConfigurationRequest::initializeModel() {

    m_trace_content_isSet = false;
    m_trace_content_isValid = false;

    m_wireless_devices_to_add_isSet = false;
    m_wireless_devices_to_add_isValid = false;

    m_wireless_devices_to_remove_isSet = false;
    m_wireless_devices_to_remove_isValid = false;

    m_wireless_gateways_to_add_isSet = false;
    m_wireless_gateways_to_add_isValid = false;

    m_wireless_gateways_to_remove_isSet = false;
    m_wireless_gateways_to_remove_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_multicast_groups_to_add_isSet = false;
    m_multicast_groups_to_add_isValid = false;

    m_multicast_groups_to_remove_isSet = false;
    m_multicast_groups_to_remove_isValid = false;
}

void OAIUpdateNetworkAnalyzerConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateNetworkAnalyzerConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_trace_content_isValid = ::OpenAPI::fromJsonValue(m_trace_content, json[QString("TraceContent")]);
    m_trace_content_isSet = !json[QString("TraceContent")].isNull() && m_trace_content_isValid;

    m_wireless_devices_to_add_isValid = ::OpenAPI::fromJsonValue(m_wireless_devices_to_add, json[QString("WirelessDevicesToAdd")]);
    m_wireless_devices_to_add_isSet = !json[QString("WirelessDevicesToAdd")].isNull() && m_wireless_devices_to_add_isValid;

    m_wireless_devices_to_remove_isValid = ::OpenAPI::fromJsonValue(m_wireless_devices_to_remove, json[QString("WirelessDevicesToRemove")]);
    m_wireless_devices_to_remove_isSet = !json[QString("WirelessDevicesToRemove")].isNull() && m_wireless_devices_to_remove_isValid;

    m_wireless_gateways_to_add_isValid = ::OpenAPI::fromJsonValue(m_wireless_gateways_to_add, json[QString("WirelessGatewaysToAdd")]);
    m_wireless_gateways_to_add_isSet = !json[QString("WirelessGatewaysToAdd")].isNull() && m_wireless_gateways_to_add_isValid;

    m_wireless_gateways_to_remove_isValid = ::OpenAPI::fromJsonValue(m_wireless_gateways_to_remove, json[QString("WirelessGatewaysToRemove")]);
    m_wireless_gateways_to_remove_isSet = !json[QString("WirelessGatewaysToRemove")].isNull() && m_wireless_gateways_to_remove_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_multicast_groups_to_add_isValid = ::OpenAPI::fromJsonValue(m_multicast_groups_to_add, json[QString("MulticastGroupsToAdd")]);
    m_multicast_groups_to_add_isSet = !json[QString("MulticastGroupsToAdd")].isNull() && m_multicast_groups_to_add_isValid;

    m_multicast_groups_to_remove_isValid = ::OpenAPI::fromJsonValue(m_multicast_groups_to_remove, json[QString("MulticastGroupsToRemove")]);
    m_multicast_groups_to_remove_isSet = !json[QString("MulticastGroupsToRemove")].isNull() && m_multicast_groups_to_remove_isValid;
}

QString OAIUpdateNetworkAnalyzerConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateNetworkAnalyzerConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_trace_content.isSet()) {
        obj.insert(QString("TraceContent"), ::OpenAPI::toJsonValue(m_trace_content));
    }
    if (m_wireless_devices_to_add.isSet()) {
        obj.insert(QString("WirelessDevicesToAdd"), ::OpenAPI::toJsonValue(m_wireless_devices_to_add));
    }
    if (m_wireless_devices_to_remove.isSet()) {
        obj.insert(QString("WirelessDevicesToRemove"), ::OpenAPI::toJsonValue(m_wireless_devices_to_remove));
    }
    if (m_wireless_gateways_to_add.isSet()) {
        obj.insert(QString("WirelessGatewaysToAdd"), ::OpenAPI::toJsonValue(m_wireless_gateways_to_add));
    }
    if (m_wireless_gateways_to_remove.isSet()) {
        obj.insert(QString("WirelessGatewaysToRemove"), ::OpenAPI::toJsonValue(m_wireless_gateways_to_remove));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_multicast_groups_to_add.isSet()) {
        obj.insert(QString("MulticastGroupsToAdd"), ::OpenAPI::toJsonValue(m_multicast_groups_to_add));
    }
    if (m_multicast_groups_to_remove.isSet()) {
        obj.insert(QString("MulticastGroupsToRemove"), ::OpenAPI::toJsonValue(m_multicast_groups_to_remove));
    }
    return obj;
}

OAITraceContent OAIUpdateNetworkAnalyzerConfigurationRequest::getTraceContent() const {
    return m_trace_content;
}
void OAIUpdateNetworkAnalyzerConfigurationRequest::setTraceContent(const OAITraceContent &trace_content) {
    m_trace_content = trace_content;
    m_trace_content_isSet = true;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_trace_content_Set() const{
    return m_trace_content_isSet;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_trace_content_Valid() const{
    return m_trace_content_isValid;
}

QList OAIUpdateNetworkAnalyzerConfigurationRequest::getWirelessDevicesToAdd() const {
    return m_wireless_devices_to_add;
}
void OAIUpdateNetworkAnalyzerConfigurationRequest::setWirelessDevicesToAdd(const QList &wireless_devices_to_add) {
    m_wireless_devices_to_add = wireless_devices_to_add;
    m_wireless_devices_to_add_isSet = true;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_wireless_devices_to_add_Set() const{
    return m_wireless_devices_to_add_isSet;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_wireless_devices_to_add_Valid() const{
    return m_wireless_devices_to_add_isValid;
}

QList OAIUpdateNetworkAnalyzerConfigurationRequest::getWirelessDevicesToRemove() const {
    return m_wireless_devices_to_remove;
}
void OAIUpdateNetworkAnalyzerConfigurationRequest::setWirelessDevicesToRemove(const QList &wireless_devices_to_remove) {
    m_wireless_devices_to_remove = wireless_devices_to_remove;
    m_wireless_devices_to_remove_isSet = true;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_wireless_devices_to_remove_Set() const{
    return m_wireless_devices_to_remove_isSet;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_wireless_devices_to_remove_Valid() const{
    return m_wireless_devices_to_remove_isValid;
}

QList OAIUpdateNetworkAnalyzerConfigurationRequest::getWirelessGatewaysToAdd() const {
    return m_wireless_gateways_to_add;
}
void OAIUpdateNetworkAnalyzerConfigurationRequest::setWirelessGatewaysToAdd(const QList &wireless_gateways_to_add) {
    m_wireless_gateways_to_add = wireless_gateways_to_add;
    m_wireless_gateways_to_add_isSet = true;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_wireless_gateways_to_add_Set() const{
    return m_wireless_gateways_to_add_isSet;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_wireless_gateways_to_add_Valid() const{
    return m_wireless_gateways_to_add_isValid;
}

QList OAIUpdateNetworkAnalyzerConfigurationRequest::getWirelessGatewaysToRemove() const {
    return m_wireless_gateways_to_remove;
}
void OAIUpdateNetworkAnalyzerConfigurationRequest::setWirelessGatewaysToRemove(const QList &wireless_gateways_to_remove) {
    m_wireless_gateways_to_remove = wireless_gateways_to_remove;
    m_wireless_gateways_to_remove_isSet = true;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_wireless_gateways_to_remove_Set() const{
    return m_wireless_gateways_to_remove_isSet;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_wireless_gateways_to_remove_Valid() const{
    return m_wireless_gateways_to_remove_isValid;
}

QString OAIUpdateNetworkAnalyzerConfigurationRequest::getDescription() const {
    return m_description;
}
void OAIUpdateNetworkAnalyzerConfigurationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateNetworkAnalyzerConfigurationRequest::getMulticastGroupsToAdd() const {
    return m_multicast_groups_to_add;
}
void OAIUpdateNetworkAnalyzerConfigurationRequest::setMulticastGroupsToAdd(const QList &multicast_groups_to_add) {
    m_multicast_groups_to_add = multicast_groups_to_add;
    m_multicast_groups_to_add_isSet = true;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_multicast_groups_to_add_Set() const{
    return m_multicast_groups_to_add_isSet;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_multicast_groups_to_add_Valid() const{
    return m_multicast_groups_to_add_isValid;
}

QList OAIUpdateNetworkAnalyzerConfigurationRequest::getMulticastGroupsToRemove() const {
    return m_multicast_groups_to_remove;
}
void OAIUpdateNetworkAnalyzerConfigurationRequest::setMulticastGroupsToRemove(const QList &multicast_groups_to_remove) {
    m_multicast_groups_to_remove = multicast_groups_to_remove;
    m_multicast_groups_to_remove_isSet = true;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_multicast_groups_to_remove_Set() const{
    return m_multicast_groups_to_remove_isSet;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::is_multicast_groups_to_remove_Valid() const{
    return m_multicast_groups_to_remove_isValid;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trace_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_devices_to_add.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_devices_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_gateways_to_add.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_gateways_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_groups_to_add.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_groups_to_remove.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateNetworkAnalyzerConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
