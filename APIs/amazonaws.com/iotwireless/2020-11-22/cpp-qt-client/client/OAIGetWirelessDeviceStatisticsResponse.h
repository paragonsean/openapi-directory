/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetWirelessDeviceStatisticsResponse.h
 *
 * 
 */

#ifndef OAIGetWirelessDeviceStatisticsResponse_H
#define OAIGetWirelessDeviceStatisticsResponse_H

#include <QJsonObject>

#include "OAIGetWirelessDeviceStatisticsResponse_LoRaWAN.h"
#include "OAIGetWirelessDeviceStatisticsResponse_Sidewalk.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetWirelessDeviceStatisticsResponse_LoRaWAN;
class OAIGetWirelessDeviceStatisticsResponse_Sidewalk;

class OAIGetWirelessDeviceStatisticsResponse : public OAIObject {
public:
    OAIGetWirelessDeviceStatisticsResponse();
    OAIGetWirelessDeviceStatisticsResponse(QString json);
    ~OAIGetWirelessDeviceStatisticsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWirelessDeviceId() const;
    void setWirelessDeviceId(const QString &wireless_device_id);
    bool is_wireless_device_id_Set() const;
    bool is_wireless_device_id_Valid() const;

    QString getLastUplinkReceivedAt() const;
    void setLastUplinkReceivedAt(const QString &last_uplink_received_at);
    bool is_last_uplink_received_at_Set() const;
    bool is_last_uplink_received_at_Valid() const;

    OAIGetWirelessDeviceStatisticsResponse_LoRaWAN getLoRaWan() const;
    void setLoRaWan(const OAIGetWirelessDeviceStatisticsResponse_LoRaWAN &lo_ra_wan);
    bool is_lo_ra_wan_Set() const;
    bool is_lo_ra_wan_Valid() const;

    OAIGetWirelessDeviceStatisticsResponse_Sidewalk getSidewalk() const;
    void setSidewalk(const OAIGetWirelessDeviceStatisticsResponse_Sidewalk &sidewalk);
    bool is_sidewalk_Set() const;
    bool is_sidewalk_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_wireless_device_id;
    bool m_wireless_device_id_isSet;
    bool m_wireless_device_id_isValid;

    QString m_last_uplink_received_at;
    bool m_last_uplink_received_at_isSet;
    bool m_last_uplink_received_at_isValid;

    OAIGetWirelessDeviceStatisticsResponse_LoRaWAN m_lo_ra_wan;
    bool m_lo_ra_wan_isSet;
    bool m_lo_ra_wan_isValid;

    OAIGetWirelessDeviceStatisticsResponse_Sidewalk m_sidewalk;
    bool m_sidewalk_isSet;
    bool m_sidewalk_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetWirelessDeviceStatisticsResponse)

#endif // OAIGetWirelessDeviceStatisticsResponse_H
