/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITdscdmaNmrObj.h
 *
 * TD-SCDMA object for network measurement reports.
 */

#ifndef OAITdscdmaNmrObj_H
#define OAITdscdmaNmrObj_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITdscdmaNmrObj : public OAIObject {
public:
    OAITdscdmaNmrObj();
    OAITdscdmaNmrObj(QString json);
    ~OAITdscdmaNmrObj() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getUarfcn() const;
    void setUarfcn(const qint32 &uarfcn);
    bool is_uarfcn_Set() const;
    bool is_uarfcn_Valid() const;

    qint32 getCellParams() const;
    void setCellParams(const qint32 &cell_params);
    bool is_cell_params_Set() const;
    bool is_cell_params_Valid() const;

    qint32 getUtranCid() const;
    void setUtranCid(const qint32 &utran_cid);
    bool is_utran_cid_Set() const;
    bool is_utran_cid_Valid() const;

    qint32 getRscp() const;
    void setRscp(const qint32 &rscp);
    bool is_rscp_Set() const;
    bool is_rscp_Valid() const;

    qint32 getPathLoss() const;
    void setPathLoss(const qint32 &path_loss);
    bool is_path_loss_Set() const;
    bool is_path_loss_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_uarfcn;
    bool m_uarfcn_isSet;
    bool m_uarfcn_isValid;

    qint32 m_cell_params;
    bool m_cell_params_isSet;
    bool m_cell_params_isValid;

    qint32 m_utran_cid;
    bool m_utran_cid_isSet;
    bool m_utran_cid_isValid;

    qint32 m_rscp;
    bool m_rscp_isSet;
    bool m_rscp_isValid;

    qint32 m_path_loss;
    bool m_path_loss_isSet;
    bool m_path_loss_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITdscdmaNmrObj)

#endif // OAITdscdmaNmrObj_H
