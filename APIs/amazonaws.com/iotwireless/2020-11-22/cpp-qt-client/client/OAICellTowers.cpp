/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICellTowers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICellTowers::OAICellTowers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICellTowers::OAICellTowers() {
    this->initializeModel();
}

OAICellTowers::~OAICellTowers() {}

void OAICellTowers::initializeModel() {

    m_gsm_isSet = false;
    m_gsm_isValid = false;

    m_wcdma_isSet = false;
    m_wcdma_isValid = false;

    m_tdscdma_isSet = false;
    m_tdscdma_isValid = false;

    m_lte_isSet = false;
    m_lte_isValid = false;

    m_cdma_isSet = false;
    m_cdma_isValid = false;
}

void OAICellTowers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICellTowers::fromJsonObject(QJsonObject json) {

    m_gsm_isValid = ::OpenAPI::fromJsonValue(m_gsm, json[QString("Gsm")]);
    m_gsm_isSet = !json[QString("Gsm")].isNull() && m_gsm_isValid;

    m_wcdma_isValid = ::OpenAPI::fromJsonValue(m_wcdma, json[QString("Wcdma")]);
    m_wcdma_isSet = !json[QString("Wcdma")].isNull() && m_wcdma_isValid;

    m_tdscdma_isValid = ::OpenAPI::fromJsonValue(m_tdscdma, json[QString("Tdscdma")]);
    m_tdscdma_isSet = !json[QString("Tdscdma")].isNull() && m_tdscdma_isValid;

    m_lte_isValid = ::OpenAPI::fromJsonValue(m_lte, json[QString("Lte")]);
    m_lte_isSet = !json[QString("Lte")].isNull() && m_lte_isValid;

    m_cdma_isValid = ::OpenAPI::fromJsonValue(m_cdma, json[QString("Cdma")]);
    m_cdma_isSet = !json[QString("Cdma")].isNull() && m_cdma_isValid;
}

QString OAICellTowers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICellTowers::asJsonObject() const {
    QJsonObject obj;
    if (m_gsm.isSet()) {
        obj.insert(QString("Gsm"), ::OpenAPI::toJsonValue(m_gsm));
    }
    if (m_wcdma.isSet()) {
        obj.insert(QString("Wcdma"), ::OpenAPI::toJsonValue(m_wcdma));
    }
    if (m_tdscdma.isSet()) {
        obj.insert(QString("Tdscdma"), ::OpenAPI::toJsonValue(m_tdscdma));
    }
    if (m_lte.isSet()) {
        obj.insert(QString("Lte"), ::OpenAPI::toJsonValue(m_lte));
    }
    if (m_cdma.isSet()) {
        obj.insert(QString("Cdma"), ::OpenAPI::toJsonValue(m_cdma));
    }
    return obj;
}

QList OAICellTowers::getGsm() const {
    return m_gsm;
}
void OAICellTowers::setGsm(const QList &gsm) {
    m_gsm = gsm;
    m_gsm_isSet = true;
}

bool OAICellTowers::is_gsm_Set() const{
    return m_gsm_isSet;
}

bool OAICellTowers::is_gsm_Valid() const{
    return m_gsm_isValid;
}

QList OAICellTowers::getWcdma() const {
    return m_wcdma;
}
void OAICellTowers::setWcdma(const QList &wcdma) {
    m_wcdma = wcdma;
    m_wcdma_isSet = true;
}

bool OAICellTowers::is_wcdma_Set() const{
    return m_wcdma_isSet;
}

bool OAICellTowers::is_wcdma_Valid() const{
    return m_wcdma_isValid;
}

QList OAICellTowers::getTdscdma() const {
    return m_tdscdma;
}
void OAICellTowers::setTdscdma(const QList &tdscdma) {
    m_tdscdma = tdscdma;
    m_tdscdma_isSet = true;
}

bool OAICellTowers::is_tdscdma_Set() const{
    return m_tdscdma_isSet;
}

bool OAICellTowers::is_tdscdma_Valid() const{
    return m_tdscdma_isValid;
}

QList OAICellTowers::getLte() const {
    return m_lte;
}
void OAICellTowers::setLte(const QList &lte) {
    m_lte = lte;
    m_lte_isSet = true;
}

bool OAICellTowers::is_lte_Set() const{
    return m_lte_isSet;
}

bool OAICellTowers::is_lte_Valid() const{
    return m_lte_isValid;
}

QList OAICellTowers::getCdma() const {
    return m_cdma;
}
void OAICellTowers::setCdma(const QList &cdma) {
    m_cdma = cdma;
    m_cdma_isSet = true;
}

bool OAICellTowers::is_cdma_Set() const{
    return m_cdma_isSet;
}

bool OAICellTowers::is_cdma_Valid() const{
    return m_cdma_isValid;
}

bool OAICellTowers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gsm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wcdma.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tdscdma.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdma.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICellTowers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
