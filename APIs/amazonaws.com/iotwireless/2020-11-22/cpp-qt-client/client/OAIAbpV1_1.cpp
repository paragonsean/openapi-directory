/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbpV1_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbpV1_1::OAIAbpV1_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbpV1_1::OAIAbpV1_1() {
    this->initializeModel();
}

OAIAbpV1_1::~OAIAbpV1_1() {}

void OAIAbpV1_1::initializeModel() {

    m_dev_addr_isSet = false;
    m_dev_addr_isValid = false;

    m_session_keys_isSet = false;
    m_session_keys_isValid = false;

    m_f_cnt_start_isSet = false;
    m_f_cnt_start_isValid = false;
}

void OAIAbpV1_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbpV1_1::fromJsonObject(QJsonObject json) {

    m_dev_addr_isValid = ::OpenAPI::fromJsonValue(m_dev_addr, json[QString("DevAddr")]);
    m_dev_addr_isSet = !json[QString("DevAddr")].isNull() && m_dev_addr_isValid;

    m_session_keys_isValid = ::OpenAPI::fromJsonValue(m_session_keys, json[QString("SessionKeys")]);
    m_session_keys_isSet = !json[QString("SessionKeys")].isNull() && m_session_keys_isValid;

    m_f_cnt_start_isValid = ::OpenAPI::fromJsonValue(m_f_cnt_start, json[QString("FCntStart")]);
    m_f_cnt_start_isSet = !json[QString("FCntStart")].isNull() && m_f_cnt_start_isValid;
}

QString OAIAbpV1_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbpV1_1::asJsonObject() const {
    QJsonObject obj;
    if (m_dev_addr_isSet) {
        obj.insert(QString("DevAddr"), ::OpenAPI::toJsonValue(m_dev_addr));
    }
    if (m_session_keys.isSet()) {
        obj.insert(QString("SessionKeys"), ::OpenAPI::toJsonValue(m_session_keys));
    }
    if (m_f_cnt_start_isSet) {
        obj.insert(QString("FCntStart"), ::OpenAPI::toJsonValue(m_f_cnt_start));
    }
    return obj;
}

QString OAIAbpV1_1::getDevAddr() const {
    return m_dev_addr;
}
void OAIAbpV1_1::setDevAddr(const QString &dev_addr) {
    m_dev_addr = dev_addr;
    m_dev_addr_isSet = true;
}

bool OAIAbpV1_1::is_dev_addr_Set() const{
    return m_dev_addr_isSet;
}

bool OAIAbpV1_1::is_dev_addr_Valid() const{
    return m_dev_addr_isValid;
}

OAIAbpV1_1_SessionKeys OAIAbpV1_1::getSessionKeys() const {
    return m_session_keys;
}
void OAIAbpV1_1::setSessionKeys(const OAIAbpV1_1_SessionKeys &session_keys) {
    m_session_keys = session_keys;
    m_session_keys_isSet = true;
}

bool OAIAbpV1_1::is_session_keys_Set() const{
    return m_session_keys_isSet;
}

bool OAIAbpV1_1::is_session_keys_Valid() const{
    return m_session_keys_isValid;
}

qint32 OAIAbpV1_1::getFCntStart() const {
    return m_f_cnt_start;
}
void OAIAbpV1_1::setFCntStart(const qint32 &f_cnt_start) {
    m_f_cnt_start = f_cnt_start;
    m_f_cnt_start_isSet = true;
}

bool OAIAbpV1_1::is_f_cnt_start_Set() const{
    return m_f_cnt_start_isSet;
}

bool OAIAbpV1_1::is_f_cnt_start_Valid() const{
    return m_f_cnt_start_isValid;
}

bool OAIAbpV1_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dev_addr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_f_cnt_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbpV1_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
