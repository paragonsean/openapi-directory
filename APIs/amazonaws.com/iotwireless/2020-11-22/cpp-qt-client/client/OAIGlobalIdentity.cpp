/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalIdentity::OAIGlobalIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalIdentity::OAIGlobalIdentity() {
    this->initializeModel();
}

OAIGlobalIdentity::~OAIGlobalIdentity() {}

void OAIGlobalIdentity::initializeModel() {

    m_lac_isSet = false;
    m_lac_isValid = false;

    m_geran_cid_isSet = false;
    m_geran_cid_isValid = false;
}

void OAIGlobalIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalIdentity::fromJsonObject(QJsonObject json) {

    m_lac_isValid = ::OpenAPI::fromJsonValue(m_lac, json[QString("Lac")]);
    m_lac_isSet = !json[QString("Lac")].isNull() && m_lac_isValid;

    m_geran_cid_isValid = ::OpenAPI::fromJsonValue(m_geran_cid, json[QString("GeranCid")]);
    m_geran_cid_isSet = !json[QString("GeranCid")].isNull() && m_geran_cid_isValid;
}

QString OAIGlobalIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_lac_isSet) {
        obj.insert(QString("Lac"), ::OpenAPI::toJsonValue(m_lac));
    }
    if (m_geran_cid_isSet) {
        obj.insert(QString("GeranCid"), ::OpenAPI::toJsonValue(m_geran_cid));
    }
    return obj;
}

qint32 OAIGlobalIdentity::getLac() const {
    return m_lac;
}
void OAIGlobalIdentity::setLac(const qint32 &lac) {
    m_lac = lac;
    m_lac_isSet = true;
}

bool OAIGlobalIdentity::is_lac_Set() const{
    return m_lac_isSet;
}

bool OAIGlobalIdentity::is_lac_Valid() const{
    return m_lac_isValid;
}

qint32 OAIGlobalIdentity::getGeranCid() const {
    return m_geran_cid;
}
void OAIGlobalIdentity::setGeranCid(const qint32 &geran_cid) {
    m_geran_cid = geran_cid;
    m_geran_cid_isSet = true;
}

bool OAIGlobalIdentity::is_geran_cid_Set() const{
    return m_geran_cid_isSet;
}

bool OAIGlobalIdentity::is_geran_cid_Valid() const{
    return m_geran_cid_isValid;
}

bool OAIGlobalIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geran_cid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lac_isValid && m_geran_cid_isValid && true;
}

} // namespace OpenAPI
