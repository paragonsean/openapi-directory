/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWirelessGatewayServiceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWirelessGatewayServiceType::OAIWirelessGatewayServiceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWirelessGatewayServiceType::OAIWirelessGatewayServiceType() {
    this->initializeModel();
}

OAIWirelessGatewayServiceType::~OAIWirelessGatewayServiceType() {}

void OAIWirelessGatewayServiceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIWirelessGatewayServiceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIWirelessGatewayServiceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CUPS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWirelessGatewayServiceType::CUPS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LNS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWirelessGatewayServiceType::LNS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIWirelessGatewayServiceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIWirelessGatewayServiceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIWirelessGatewayServiceType::CUPS:
            val = "CUPS";
            break;
        case eOAIWirelessGatewayServiceType::LNS:
            val = "LNS";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIWirelessGatewayServiceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIWirelessGatewayServiceType::eOAIWirelessGatewayServiceType OAIWirelessGatewayServiceType::getValue() const {
    return m_value;
}

void OAIWirelessGatewayServiceType::setValue(const OAIWirelessGatewayServiceType::eOAIWirelessGatewayServiceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIWirelessGatewayServiceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIWirelessGatewayServiceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
