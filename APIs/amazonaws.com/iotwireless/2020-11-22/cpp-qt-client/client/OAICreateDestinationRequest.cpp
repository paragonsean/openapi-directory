/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDestinationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDestinationRequest::OAICreateDestinationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDestinationRequest::OAICreateDestinationRequest() {
    this->initializeModel();
}

OAICreateDestinationRequest::~OAICreateDestinationRequest() {}

void OAICreateDestinationRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_expression_type_isSet = false;
    m_expression_type_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAICreateDestinationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDestinationRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_expression_type_isValid = ::OpenAPI::fromJsonValue(m_expression_type, json[QString("ExpressionType")]);
    m_expression_type_isSet = !json[QString("ExpressionType")].isNull() && m_expression_type_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAICreateDestinationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDestinationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_expression_type.isSet()) {
        obj.insert(QString("ExpressionType"), ::OpenAPI::toJsonValue(m_expression_type));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QString OAICreateDestinationRequest::getName() const {
    return m_name;
}
void OAICreateDestinationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDestinationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDestinationRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIExpressionType OAICreateDestinationRequest::getExpressionType() const {
    return m_expression_type;
}
void OAICreateDestinationRequest::setExpressionType(const OAIExpressionType &expression_type) {
    m_expression_type = expression_type;
    m_expression_type_isSet = true;
}

bool OAICreateDestinationRequest::is_expression_type_Set() const{
    return m_expression_type_isSet;
}

bool OAICreateDestinationRequest::is_expression_type_Valid() const{
    return m_expression_type_isValid;
}

QString OAICreateDestinationRequest::getExpression() const {
    return m_expression;
}
void OAICreateDestinationRequest::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAICreateDestinationRequest::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAICreateDestinationRequest::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAICreateDestinationRequest::getDescription() const {
    return m_description;
}
void OAICreateDestinationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateDestinationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateDestinationRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateDestinationRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateDestinationRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateDestinationRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateDestinationRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAICreateDestinationRequest::getTags() const {
    return m_tags;
}
void OAICreateDestinationRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDestinationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDestinationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDestinationRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateDestinationRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateDestinationRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateDestinationRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAICreateDestinationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDestinationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_expression_type_isValid && m_expression_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
