/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionKeysAbpV1_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionKeysAbpV1_1::OAISessionKeysAbpV1_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionKeysAbpV1_1::OAISessionKeysAbpV1_1() {
    this->initializeModel();
}

OAISessionKeysAbpV1_1::~OAISessionKeysAbpV1_1() {}

void OAISessionKeysAbpV1_1::initializeModel() {

    m_f_nwk_s_int_key_isSet = false;
    m_f_nwk_s_int_key_isValid = false;

    m_s_nwk_s_int_key_isSet = false;
    m_s_nwk_s_int_key_isValid = false;

    m_nwk_s_enc_key_isSet = false;
    m_nwk_s_enc_key_isValid = false;

    m_app_s_key_isSet = false;
    m_app_s_key_isValid = false;
}

void OAISessionKeysAbpV1_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionKeysAbpV1_1::fromJsonObject(QJsonObject json) {

    m_f_nwk_s_int_key_isValid = ::OpenAPI::fromJsonValue(m_f_nwk_s_int_key, json[QString("FNwkSIntKey")]);
    m_f_nwk_s_int_key_isSet = !json[QString("FNwkSIntKey")].isNull() && m_f_nwk_s_int_key_isValid;

    m_s_nwk_s_int_key_isValid = ::OpenAPI::fromJsonValue(m_s_nwk_s_int_key, json[QString("SNwkSIntKey")]);
    m_s_nwk_s_int_key_isSet = !json[QString("SNwkSIntKey")].isNull() && m_s_nwk_s_int_key_isValid;

    m_nwk_s_enc_key_isValid = ::OpenAPI::fromJsonValue(m_nwk_s_enc_key, json[QString("NwkSEncKey")]);
    m_nwk_s_enc_key_isSet = !json[QString("NwkSEncKey")].isNull() && m_nwk_s_enc_key_isValid;

    m_app_s_key_isValid = ::OpenAPI::fromJsonValue(m_app_s_key, json[QString("AppSKey")]);
    m_app_s_key_isSet = !json[QString("AppSKey")].isNull() && m_app_s_key_isValid;
}

QString OAISessionKeysAbpV1_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionKeysAbpV1_1::asJsonObject() const {
    QJsonObject obj;
    if (m_f_nwk_s_int_key_isSet) {
        obj.insert(QString("FNwkSIntKey"), ::OpenAPI::toJsonValue(m_f_nwk_s_int_key));
    }
    if (m_s_nwk_s_int_key_isSet) {
        obj.insert(QString("SNwkSIntKey"), ::OpenAPI::toJsonValue(m_s_nwk_s_int_key));
    }
    if (m_nwk_s_enc_key_isSet) {
        obj.insert(QString("NwkSEncKey"), ::OpenAPI::toJsonValue(m_nwk_s_enc_key));
    }
    if (m_app_s_key_isSet) {
        obj.insert(QString("AppSKey"), ::OpenAPI::toJsonValue(m_app_s_key));
    }
    return obj;
}

QString OAISessionKeysAbpV1_1::getFNwkSIntKey() const {
    return m_f_nwk_s_int_key;
}
void OAISessionKeysAbpV1_1::setFNwkSIntKey(const QString &f_nwk_s_int_key) {
    m_f_nwk_s_int_key = f_nwk_s_int_key;
    m_f_nwk_s_int_key_isSet = true;
}

bool OAISessionKeysAbpV1_1::is_f_nwk_s_int_key_Set() const{
    return m_f_nwk_s_int_key_isSet;
}

bool OAISessionKeysAbpV1_1::is_f_nwk_s_int_key_Valid() const{
    return m_f_nwk_s_int_key_isValid;
}

QString OAISessionKeysAbpV1_1::getSNwkSIntKey() const {
    return m_s_nwk_s_int_key;
}
void OAISessionKeysAbpV1_1::setSNwkSIntKey(const QString &s_nwk_s_int_key) {
    m_s_nwk_s_int_key = s_nwk_s_int_key;
    m_s_nwk_s_int_key_isSet = true;
}

bool OAISessionKeysAbpV1_1::is_s_nwk_s_int_key_Set() const{
    return m_s_nwk_s_int_key_isSet;
}

bool OAISessionKeysAbpV1_1::is_s_nwk_s_int_key_Valid() const{
    return m_s_nwk_s_int_key_isValid;
}

QString OAISessionKeysAbpV1_1::getNwkSEncKey() const {
    return m_nwk_s_enc_key;
}
void OAISessionKeysAbpV1_1::setNwkSEncKey(const QString &nwk_s_enc_key) {
    m_nwk_s_enc_key = nwk_s_enc_key;
    m_nwk_s_enc_key_isSet = true;
}

bool OAISessionKeysAbpV1_1::is_nwk_s_enc_key_Set() const{
    return m_nwk_s_enc_key_isSet;
}

bool OAISessionKeysAbpV1_1::is_nwk_s_enc_key_Valid() const{
    return m_nwk_s_enc_key_isValid;
}

QString OAISessionKeysAbpV1_1::getAppSKey() const {
    return m_app_s_key;
}
void OAISessionKeysAbpV1_1::setAppSKey(const QString &app_s_key) {
    m_app_s_key = app_s_key;
    m_app_s_key_isSet = true;
}

bool OAISessionKeysAbpV1_1::is_app_s_key_Set() const{
    return m_app_s_key_isSet;
}

bool OAISessionKeysAbpV1_1::is_app_s_key_Valid() const{
    return m_app_s_key_isValid;
}

bool OAISessionKeysAbpV1_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_f_nwk_s_int_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_nwk_s_int_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nwk_s_enc_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_s_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionKeysAbpV1_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
