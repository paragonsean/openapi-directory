/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportedWirelessDevice_Sidewalk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportedWirelessDevice_Sidewalk::OAIImportedWirelessDevice_Sidewalk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportedWirelessDevice_Sidewalk::OAIImportedWirelessDevice_Sidewalk() {
    this->initializeModel();
}

OAIImportedWirelessDevice_Sidewalk::~OAIImportedWirelessDevice_Sidewalk() {}

void OAIImportedWirelessDevice_Sidewalk::initializeModel() {

    m_sidewalk_manufacturing_sn_isSet = false;
    m_sidewalk_manufacturing_sn_isValid = false;

    m_onboarding_status_isSet = false;
    m_onboarding_status_isValid = false;

    m_onboarding_status_reason_isSet = false;
    m_onboarding_status_reason_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;
}

void OAIImportedWirelessDevice_Sidewalk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportedWirelessDevice_Sidewalk::fromJsonObject(QJsonObject json) {

    m_sidewalk_manufacturing_sn_isValid = ::OpenAPI::fromJsonValue(m_sidewalk_manufacturing_sn, json[QString("SidewalkManufacturingSn")]);
    m_sidewalk_manufacturing_sn_isSet = !json[QString("SidewalkManufacturingSn")].isNull() && m_sidewalk_manufacturing_sn_isValid;

    m_onboarding_status_isValid = ::OpenAPI::fromJsonValue(m_onboarding_status, json[QString("OnboardingStatus")]);
    m_onboarding_status_isSet = !json[QString("OnboardingStatus")].isNull() && m_onboarding_status_isValid;

    m_onboarding_status_reason_isValid = ::OpenAPI::fromJsonValue(m_onboarding_status_reason, json[QString("OnboardingStatusReason")]);
    m_onboarding_status_reason_isSet = !json[QString("OnboardingStatusReason")].isNull() && m_onboarding_status_reason_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("LastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("LastUpdateTime")].isNull() && m_last_update_time_isValid;
}

QString OAIImportedWirelessDevice_Sidewalk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportedWirelessDevice_Sidewalk::asJsonObject() const {
    QJsonObject obj;
    if (m_sidewalk_manufacturing_sn_isSet) {
        obj.insert(QString("SidewalkManufacturingSn"), ::OpenAPI::toJsonValue(m_sidewalk_manufacturing_sn));
    }
    if (m_onboarding_status.isSet()) {
        obj.insert(QString("OnboardingStatus"), ::OpenAPI::toJsonValue(m_onboarding_status));
    }
    if (m_onboarding_status_reason_isSet) {
        obj.insert(QString("OnboardingStatusReason"), ::OpenAPI::toJsonValue(m_onboarding_status_reason));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("LastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    return obj;
}

QString OAIImportedWirelessDevice_Sidewalk::getSidewalkManufacturingSn() const {
    return m_sidewalk_manufacturing_sn;
}
void OAIImportedWirelessDevice_Sidewalk::setSidewalkManufacturingSn(const QString &sidewalk_manufacturing_sn) {
    m_sidewalk_manufacturing_sn = sidewalk_manufacturing_sn;
    m_sidewalk_manufacturing_sn_isSet = true;
}

bool OAIImportedWirelessDevice_Sidewalk::is_sidewalk_manufacturing_sn_Set() const{
    return m_sidewalk_manufacturing_sn_isSet;
}

bool OAIImportedWirelessDevice_Sidewalk::is_sidewalk_manufacturing_sn_Valid() const{
    return m_sidewalk_manufacturing_sn_isValid;
}

OAIOnboardStatus OAIImportedWirelessDevice_Sidewalk::getOnboardingStatus() const {
    return m_onboarding_status;
}
void OAIImportedWirelessDevice_Sidewalk::setOnboardingStatus(const OAIOnboardStatus &onboarding_status) {
    m_onboarding_status = onboarding_status;
    m_onboarding_status_isSet = true;
}

bool OAIImportedWirelessDevice_Sidewalk::is_onboarding_status_Set() const{
    return m_onboarding_status_isSet;
}

bool OAIImportedWirelessDevice_Sidewalk::is_onboarding_status_Valid() const{
    return m_onboarding_status_isValid;
}

QString OAIImportedWirelessDevice_Sidewalk::getOnboardingStatusReason() const {
    return m_onboarding_status_reason;
}
void OAIImportedWirelessDevice_Sidewalk::setOnboardingStatusReason(const QString &onboarding_status_reason) {
    m_onboarding_status_reason = onboarding_status_reason;
    m_onboarding_status_reason_isSet = true;
}

bool OAIImportedWirelessDevice_Sidewalk::is_onboarding_status_reason_Set() const{
    return m_onboarding_status_reason_isSet;
}

bool OAIImportedWirelessDevice_Sidewalk::is_onboarding_status_reason_Valid() const{
    return m_onboarding_status_reason_isValid;
}

QDateTime OAIImportedWirelessDevice_Sidewalk::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIImportedWirelessDevice_Sidewalk::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIImportedWirelessDevice_Sidewalk::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIImportedWirelessDevice_Sidewalk::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

bool OAIImportedWirelessDevice_Sidewalk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sidewalk_manufacturing_sn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportedWirelessDevice_Sidewalk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
