/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFPorts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFPorts::OAIFPorts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFPorts::OAIFPorts() {
    this->initializeModel();
}

OAIFPorts::~OAIFPorts() {}

void OAIFPorts::initializeModel() {

    m_fuota_isSet = false;
    m_fuota_isValid = false;

    m_multicast_isSet = false;
    m_multicast_isValid = false;

    m_clock_sync_isSet = false;
    m_clock_sync_isValid = false;

    m_positioning_isSet = false;
    m_positioning_isValid = false;

    m_applications_isSet = false;
    m_applications_isValid = false;
}

void OAIFPorts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFPorts::fromJsonObject(QJsonObject json) {

    m_fuota_isValid = ::OpenAPI::fromJsonValue(m_fuota, json[QString("Fuota")]);
    m_fuota_isSet = !json[QString("Fuota")].isNull() && m_fuota_isValid;

    m_multicast_isValid = ::OpenAPI::fromJsonValue(m_multicast, json[QString("Multicast")]);
    m_multicast_isSet = !json[QString("Multicast")].isNull() && m_multicast_isValid;

    m_clock_sync_isValid = ::OpenAPI::fromJsonValue(m_clock_sync, json[QString("ClockSync")]);
    m_clock_sync_isSet = !json[QString("ClockSync")].isNull() && m_clock_sync_isValid;

    m_positioning_isValid = ::OpenAPI::fromJsonValue(m_positioning, json[QString("Positioning")]);
    m_positioning_isSet = !json[QString("Positioning")].isNull() && m_positioning_isValid;

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("Applications")]);
    m_applications_isSet = !json[QString("Applications")].isNull() && m_applications_isValid;
}

QString OAIFPorts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFPorts::asJsonObject() const {
    QJsonObject obj;
    if (m_fuota_isSet) {
        obj.insert(QString("Fuota"), ::OpenAPI::toJsonValue(m_fuota));
    }
    if (m_multicast_isSet) {
        obj.insert(QString("Multicast"), ::OpenAPI::toJsonValue(m_multicast));
    }
    if (m_clock_sync_isSet) {
        obj.insert(QString("ClockSync"), ::OpenAPI::toJsonValue(m_clock_sync));
    }
    if (m_positioning.isSet()) {
        obj.insert(QString("Positioning"), ::OpenAPI::toJsonValue(m_positioning));
    }
    if (m_applications.isSet()) {
        obj.insert(QString("Applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    return obj;
}

qint32 OAIFPorts::getFuota() const {
    return m_fuota;
}
void OAIFPorts::setFuota(const qint32 &fuota) {
    m_fuota = fuota;
    m_fuota_isSet = true;
}

bool OAIFPorts::is_fuota_Set() const{
    return m_fuota_isSet;
}

bool OAIFPorts::is_fuota_Valid() const{
    return m_fuota_isValid;
}

qint32 OAIFPorts::getMulticast() const {
    return m_multicast;
}
void OAIFPorts::setMulticast(const qint32 &multicast) {
    m_multicast = multicast;
    m_multicast_isSet = true;
}

bool OAIFPorts::is_multicast_Set() const{
    return m_multicast_isSet;
}

bool OAIFPorts::is_multicast_Valid() const{
    return m_multicast_isValid;
}

qint32 OAIFPorts::getClockSync() const {
    return m_clock_sync;
}
void OAIFPorts::setClockSync(const qint32 &clock_sync) {
    m_clock_sync = clock_sync;
    m_clock_sync_isSet = true;
}

bool OAIFPorts::is_clock_sync_Set() const{
    return m_clock_sync_isSet;
}

bool OAIFPorts::is_clock_sync_Valid() const{
    return m_clock_sync_isValid;
}

OAIFPorts_Positioning OAIFPorts::getPositioning() const {
    return m_positioning;
}
void OAIFPorts::setPositioning(const OAIFPorts_Positioning &positioning) {
    m_positioning = positioning;
    m_positioning_isSet = true;
}

bool OAIFPorts::is_positioning_Set() const{
    return m_positioning_isSet;
}

bool OAIFPorts::is_positioning_Valid() const{
    return m_positioning_isValid;
}

QList OAIFPorts::getApplications() const {
    return m_applications;
}
void OAIFPorts::setApplications(const QList &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAIFPorts::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAIFPorts::is_applications_Valid() const{
    return m_applications_isValid;
}

bool OAIFPorts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fuota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFPorts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
