/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFPorts.h
 *
 * List of FPort assigned for different LoRaWAN application packages to use
 */

#ifndef OAIFPorts_H
#define OAIFPorts_H

#include <QJsonObject>

#include "OAIFPorts_Positioning.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFPorts_Positioning;

class OAIFPorts : public OAIObject {
public:
    OAIFPorts();
    OAIFPorts(QString json);
    ~OAIFPorts() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFuota() const;
    void setFuota(const qint32 &fuota);
    bool is_fuota_Set() const;
    bool is_fuota_Valid() const;

    qint32 getMulticast() const;
    void setMulticast(const qint32 &multicast);
    bool is_multicast_Set() const;
    bool is_multicast_Valid() const;

    qint32 getClockSync() const;
    void setClockSync(const qint32 &clock_sync);
    bool is_clock_sync_Set() const;
    bool is_clock_sync_Valid() const;

    OAIFPorts_Positioning getPositioning() const;
    void setPositioning(const OAIFPorts_Positioning &positioning);
    bool is_positioning_Set() const;
    bool is_positioning_Valid() const;

    QList getApplications() const;
    void setApplications(const QList &applications);
    bool is_applications_Set() const;
    bool is_applications_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_fuota;
    bool m_fuota_isSet;
    bool m_fuota_isValid;

    qint32 m_multicast;
    bool m_multicast_isSet;
    bool m_multicast_isValid;

    qint32 m_clock_sync;
    bool m_clock_sync_isSet;
    bool m_clock_sync_isValid;

    OAIFPorts_Positioning m_positioning;
    bool m_positioning_isSet;
    bool m_positioning_isValid;

    QList m_applications;
    bool m_applications_isSet;
    bool m_applications_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFPorts)

#endif // OAIFPorts_H
