/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoRaWANMulticastGet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoRaWANMulticastGet::OAILoRaWANMulticastGet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoRaWANMulticastGet::OAILoRaWANMulticastGet() {
    this->initializeModel();
}

OAILoRaWANMulticastGet::~OAILoRaWANMulticastGet() {}

void OAILoRaWANMulticastGet::initializeModel() {

    m_rf_region_isSet = false;
    m_rf_region_isValid = false;

    m_dl_class_isSet = false;
    m_dl_class_isValid = false;

    m_number_of_devices_requested_isSet = false;
    m_number_of_devices_requested_isValid = false;

    m_number_of_devices_in_group_isSet = false;
    m_number_of_devices_in_group_isValid = false;
}

void OAILoRaWANMulticastGet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoRaWANMulticastGet::fromJsonObject(QJsonObject json) {

    m_rf_region_isValid = ::OpenAPI::fromJsonValue(m_rf_region, json[QString("RfRegion")]);
    m_rf_region_isSet = !json[QString("RfRegion")].isNull() && m_rf_region_isValid;

    m_dl_class_isValid = ::OpenAPI::fromJsonValue(m_dl_class, json[QString("DlClass")]);
    m_dl_class_isSet = !json[QString("DlClass")].isNull() && m_dl_class_isValid;

    m_number_of_devices_requested_isValid = ::OpenAPI::fromJsonValue(m_number_of_devices_requested, json[QString("NumberOfDevicesRequested")]);
    m_number_of_devices_requested_isSet = !json[QString("NumberOfDevicesRequested")].isNull() && m_number_of_devices_requested_isValid;

    m_number_of_devices_in_group_isValid = ::OpenAPI::fromJsonValue(m_number_of_devices_in_group, json[QString("NumberOfDevicesInGroup")]);
    m_number_of_devices_in_group_isSet = !json[QString("NumberOfDevicesInGroup")].isNull() && m_number_of_devices_in_group_isValid;
}

QString OAILoRaWANMulticastGet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoRaWANMulticastGet::asJsonObject() const {
    QJsonObject obj;
    if (m_rf_region.isSet()) {
        obj.insert(QString("RfRegion"), ::OpenAPI::toJsonValue(m_rf_region));
    }
    if (m_dl_class.isSet()) {
        obj.insert(QString("DlClass"), ::OpenAPI::toJsonValue(m_dl_class));
    }
    if (m_number_of_devices_requested_isSet) {
        obj.insert(QString("NumberOfDevicesRequested"), ::OpenAPI::toJsonValue(m_number_of_devices_requested));
    }
    if (m_number_of_devices_in_group_isSet) {
        obj.insert(QString("NumberOfDevicesInGroup"), ::OpenAPI::toJsonValue(m_number_of_devices_in_group));
    }
    return obj;
}

OAISupportedRfRegion OAILoRaWANMulticastGet::getRfRegion() const {
    return m_rf_region;
}
void OAILoRaWANMulticastGet::setRfRegion(const OAISupportedRfRegion &rf_region) {
    m_rf_region = rf_region;
    m_rf_region_isSet = true;
}

bool OAILoRaWANMulticastGet::is_rf_region_Set() const{
    return m_rf_region_isSet;
}

bool OAILoRaWANMulticastGet::is_rf_region_Valid() const{
    return m_rf_region_isValid;
}

OAIDlClass OAILoRaWANMulticastGet::getDlClass() const {
    return m_dl_class;
}
void OAILoRaWANMulticastGet::setDlClass(const OAIDlClass &dl_class) {
    m_dl_class = dl_class;
    m_dl_class_isSet = true;
}

bool OAILoRaWANMulticastGet::is_dl_class_Set() const{
    return m_dl_class_isSet;
}

bool OAILoRaWANMulticastGet::is_dl_class_Valid() const{
    return m_dl_class_isValid;
}

qint32 OAILoRaWANMulticastGet::getNumberOfDevicesRequested() const {
    return m_number_of_devices_requested;
}
void OAILoRaWANMulticastGet::setNumberOfDevicesRequested(const qint32 &number_of_devices_requested) {
    m_number_of_devices_requested = number_of_devices_requested;
    m_number_of_devices_requested_isSet = true;
}

bool OAILoRaWANMulticastGet::is_number_of_devices_requested_Set() const{
    return m_number_of_devices_requested_isSet;
}

bool OAILoRaWANMulticastGet::is_number_of_devices_requested_Valid() const{
    return m_number_of_devices_requested_isValid;
}

qint32 OAILoRaWANMulticastGet::getNumberOfDevicesInGroup() const {
    return m_number_of_devices_in_group;
}
void OAILoRaWANMulticastGet::setNumberOfDevicesInGroup(const qint32 &number_of_devices_in_group) {
    m_number_of_devices_in_group = number_of_devices_in_group;
    m_number_of_devices_in_group_isSet = true;
}

bool OAILoRaWANMulticastGet::is_number_of_devices_in_group_Set() const{
    return m_number_of_devices_in_group_isSet;
}

bool OAILoRaWANMulticastGet::is_number_of_devices_in_group_Valid() const{
    return m_number_of_devices_in_group_isValid;
}

bool OAILoRaWANMulticastGet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rf_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dl_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_devices_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_devices_in_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoRaWANMulticastGet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
