/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICellTowers.h
 *
 * The cell towers that were used to perform the measurements.
 */

#ifndef OAICellTowers_H
#define OAICellTowers_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICellTowers : public OAIObject {
public:
    OAICellTowers();
    OAICellTowers(QString json);
    ~OAICellTowers() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getGsm() const;
    void setGsm(const QList &gsm);
    bool is_gsm_Set() const;
    bool is_gsm_Valid() const;

    QList getWcdma() const;
    void setWcdma(const QList &wcdma);
    bool is_wcdma_Set() const;
    bool is_wcdma_Valid() const;

    QList getTdscdma() const;
    void setTdscdma(const QList &tdscdma);
    bool is_tdscdma_Set() const;
    bool is_tdscdma_Valid() const;

    QList getLte() const;
    void setLte(const QList &lte);
    bool is_lte_Set() const;
    bool is_lte_Valid() const;

    QList getCdma() const;
    void setCdma(const QList &cdma);
    bool is_cdma_Set() const;
    bool is_cdma_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_gsm;
    bool m_gsm_isSet;
    bool m_gsm_isValid;

    QList m_wcdma;
    bool m_wcdma_isSet;
    bool m_wcdma_isValid;

    QList m_tdscdma;
    bool m_tdscdma_isSet;
    bool m_tdscdma_isValid;

    QList m_lte;
    bool m_lte_isSet;
    bool m_lte_isValid;

    QList m_cdma;
    bool m_cdma_isSet;
    bool m_cdma_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICellTowers)

#endif // OAICellTowers_H
