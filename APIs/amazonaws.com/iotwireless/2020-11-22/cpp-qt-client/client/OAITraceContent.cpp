/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraceContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraceContent::OAITraceContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraceContent::OAITraceContent() {
    this->initializeModel();
}

OAITraceContent::~OAITraceContent() {}

void OAITraceContent::initializeModel() {

    m_wireless_device_frame_info_isSet = false;
    m_wireless_device_frame_info_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_multicast_frame_info_isSet = false;
    m_multicast_frame_info_isValid = false;
}

void OAITraceContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraceContent::fromJsonObject(QJsonObject json) {

    m_wireless_device_frame_info_isValid = ::OpenAPI::fromJsonValue(m_wireless_device_frame_info, json[QString("WirelessDeviceFrameInfo")]);
    m_wireless_device_frame_info_isSet = !json[QString("WirelessDeviceFrameInfo")].isNull() && m_wireless_device_frame_info_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;

    m_multicast_frame_info_isValid = ::OpenAPI::fromJsonValue(m_multicast_frame_info, json[QString("MulticastFrameInfo")]);
    m_multicast_frame_info_isSet = !json[QString("MulticastFrameInfo")].isNull() && m_multicast_frame_info_isValid;
}

QString OAITraceContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraceContent::asJsonObject() const {
    QJsonObject obj;
    if (m_wireless_device_frame_info.isSet()) {
        obj.insert(QString("WirelessDeviceFrameInfo"), ::OpenAPI::toJsonValue(m_wireless_device_frame_info));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_multicast_frame_info.isSet()) {
        obj.insert(QString("MulticastFrameInfo"), ::OpenAPI::toJsonValue(m_multicast_frame_info));
    }
    return obj;
}

OAIWirelessDeviceFrameInfo OAITraceContent::getWirelessDeviceFrameInfo() const {
    return m_wireless_device_frame_info;
}
void OAITraceContent::setWirelessDeviceFrameInfo(const OAIWirelessDeviceFrameInfo &wireless_device_frame_info) {
    m_wireless_device_frame_info = wireless_device_frame_info;
    m_wireless_device_frame_info_isSet = true;
}

bool OAITraceContent::is_wireless_device_frame_info_Set() const{
    return m_wireless_device_frame_info_isSet;
}

bool OAITraceContent::is_wireless_device_frame_info_Valid() const{
    return m_wireless_device_frame_info_isValid;
}

OAILogLevel OAITraceContent::getLogLevel() const {
    return m_log_level;
}
void OAITraceContent::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAITraceContent::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAITraceContent::is_log_level_Valid() const{
    return m_log_level_isValid;
}

OAIMulticastFrameInfo OAITraceContent::getMulticastFrameInfo() const {
    return m_multicast_frame_info;
}
void OAITraceContent::setMulticastFrameInfo(const OAIMulticastFrameInfo &multicast_frame_info) {
    m_multicast_frame_info = multicast_frame_info;
    m_multicast_frame_info_isSet = true;
}

bool OAITraceContent::is_multicast_frame_info_Set() const{
    return m_multicast_frame_info_isSet;
}

bool OAITraceContent::is_multicast_frame_info_Valid() const{
    return m_multicast_frame_info_isValid;
}

bool OAITraceContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_wireless_device_frame_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_frame_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraceContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
