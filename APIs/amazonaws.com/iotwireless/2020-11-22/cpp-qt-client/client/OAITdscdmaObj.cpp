/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITdscdmaObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITdscdmaObj::OAITdscdmaObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITdscdmaObj::OAITdscdmaObj() {
    this->initializeModel();
}

OAITdscdmaObj::~OAITdscdmaObj() {}

void OAITdscdmaObj::initializeModel() {

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_mnc_isSet = false;
    m_mnc_isValid = false;

    m_lac_isSet = false;
    m_lac_isValid = false;

    m_utran_cid_isSet = false;
    m_utran_cid_isValid = false;

    m_tdscdma_local_id_isSet = false;
    m_tdscdma_local_id_isValid = false;

    m_tdscdma_timing_advance_isSet = false;
    m_tdscdma_timing_advance_isValid = false;

    m_rscp_isSet = false;
    m_rscp_isValid = false;

    m_path_loss_isSet = false;
    m_path_loss_isValid = false;

    m_tdscdma_nmr_isSet = false;
    m_tdscdma_nmr_isValid = false;
}

void OAITdscdmaObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITdscdmaObj::fromJsonObject(QJsonObject json) {

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("Mcc")]);
    m_mcc_isSet = !json[QString("Mcc")].isNull() && m_mcc_isValid;

    m_mnc_isValid = ::OpenAPI::fromJsonValue(m_mnc, json[QString("Mnc")]);
    m_mnc_isSet = !json[QString("Mnc")].isNull() && m_mnc_isValid;

    m_lac_isValid = ::OpenAPI::fromJsonValue(m_lac, json[QString("Lac")]);
    m_lac_isSet = !json[QString("Lac")].isNull() && m_lac_isValid;

    m_utran_cid_isValid = ::OpenAPI::fromJsonValue(m_utran_cid, json[QString("UtranCid")]);
    m_utran_cid_isSet = !json[QString("UtranCid")].isNull() && m_utran_cid_isValid;

    m_tdscdma_local_id_isValid = ::OpenAPI::fromJsonValue(m_tdscdma_local_id, json[QString("TdscdmaLocalId")]);
    m_tdscdma_local_id_isSet = !json[QString("TdscdmaLocalId")].isNull() && m_tdscdma_local_id_isValid;

    m_tdscdma_timing_advance_isValid = ::OpenAPI::fromJsonValue(m_tdscdma_timing_advance, json[QString("TdscdmaTimingAdvance")]);
    m_tdscdma_timing_advance_isSet = !json[QString("TdscdmaTimingAdvance")].isNull() && m_tdscdma_timing_advance_isValid;

    m_rscp_isValid = ::OpenAPI::fromJsonValue(m_rscp, json[QString("Rscp")]);
    m_rscp_isSet = !json[QString("Rscp")].isNull() && m_rscp_isValid;

    m_path_loss_isValid = ::OpenAPI::fromJsonValue(m_path_loss, json[QString("PathLoss")]);
    m_path_loss_isSet = !json[QString("PathLoss")].isNull() && m_path_loss_isValid;

    m_tdscdma_nmr_isValid = ::OpenAPI::fromJsonValue(m_tdscdma_nmr, json[QString("TdscdmaNmr")]);
    m_tdscdma_nmr_isSet = !json[QString("TdscdmaNmr")].isNull() && m_tdscdma_nmr_isValid;
}

QString OAITdscdmaObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITdscdmaObj::asJsonObject() const {
    QJsonObject obj;
    if (m_mcc_isSet) {
        obj.insert(QString("Mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_mnc_isSet) {
        obj.insert(QString("Mnc"), ::OpenAPI::toJsonValue(m_mnc));
    }
    if (m_lac_isSet) {
        obj.insert(QString("Lac"), ::OpenAPI::toJsonValue(m_lac));
    }
    if (m_utran_cid_isSet) {
        obj.insert(QString("UtranCid"), ::OpenAPI::toJsonValue(m_utran_cid));
    }
    if (m_tdscdma_local_id.isSet()) {
        obj.insert(QString("TdscdmaLocalId"), ::OpenAPI::toJsonValue(m_tdscdma_local_id));
    }
    if (m_tdscdma_timing_advance_isSet) {
        obj.insert(QString("TdscdmaTimingAdvance"), ::OpenAPI::toJsonValue(m_tdscdma_timing_advance));
    }
    if (m_rscp_isSet) {
        obj.insert(QString("Rscp"), ::OpenAPI::toJsonValue(m_rscp));
    }
    if (m_path_loss_isSet) {
        obj.insert(QString("PathLoss"), ::OpenAPI::toJsonValue(m_path_loss));
    }
    if (m_tdscdma_nmr.isSet()) {
        obj.insert(QString("TdscdmaNmr"), ::OpenAPI::toJsonValue(m_tdscdma_nmr));
    }
    return obj;
}

qint32 OAITdscdmaObj::getMcc() const {
    return m_mcc;
}
void OAITdscdmaObj::setMcc(const qint32 &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAITdscdmaObj::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAITdscdmaObj::is_mcc_Valid() const{
    return m_mcc_isValid;
}

qint32 OAITdscdmaObj::getMnc() const {
    return m_mnc;
}
void OAITdscdmaObj::setMnc(const qint32 &mnc) {
    m_mnc = mnc;
    m_mnc_isSet = true;
}

bool OAITdscdmaObj::is_mnc_Set() const{
    return m_mnc_isSet;
}

bool OAITdscdmaObj::is_mnc_Valid() const{
    return m_mnc_isValid;
}

qint32 OAITdscdmaObj::getLac() const {
    return m_lac;
}
void OAITdscdmaObj::setLac(const qint32 &lac) {
    m_lac = lac;
    m_lac_isSet = true;
}

bool OAITdscdmaObj::is_lac_Set() const{
    return m_lac_isSet;
}

bool OAITdscdmaObj::is_lac_Valid() const{
    return m_lac_isValid;
}

qint32 OAITdscdmaObj::getUtranCid() const {
    return m_utran_cid;
}
void OAITdscdmaObj::setUtranCid(const qint32 &utran_cid) {
    m_utran_cid = utran_cid;
    m_utran_cid_isSet = true;
}

bool OAITdscdmaObj::is_utran_cid_Set() const{
    return m_utran_cid_isSet;
}

bool OAITdscdmaObj::is_utran_cid_Valid() const{
    return m_utran_cid_isValid;
}

OAITdscdmaObj_TdscdmaLocalId OAITdscdmaObj::getTdscdmaLocalId() const {
    return m_tdscdma_local_id;
}
void OAITdscdmaObj::setTdscdmaLocalId(const OAITdscdmaObj_TdscdmaLocalId &tdscdma_local_id) {
    m_tdscdma_local_id = tdscdma_local_id;
    m_tdscdma_local_id_isSet = true;
}

bool OAITdscdmaObj::is_tdscdma_local_id_Set() const{
    return m_tdscdma_local_id_isSet;
}

bool OAITdscdmaObj::is_tdscdma_local_id_Valid() const{
    return m_tdscdma_local_id_isValid;
}

qint32 OAITdscdmaObj::getTdscdmaTimingAdvance() const {
    return m_tdscdma_timing_advance;
}
void OAITdscdmaObj::setTdscdmaTimingAdvance(const qint32 &tdscdma_timing_advance) {
    m_tdscdma_timing_advance = tdscdma_timing_advance;
    m_tdscdma_timing_advance_isSet = true;
}

bool OAITdscdmaObj::is_tdscdma_timing_advance_Set() const{
    return m_tdscdma_timing_advance_isSet;
}

bool OAITdscdmaObj::is_tdscdma_timing_advance_Valid() const{
    return m_tdscdma_timing_advance_isValid;
}

qint32 OAITdscdmaObj::getRscp() const {
    return m_rscp;
}
void OAITdscdmaObj::setRscp(const qint32 &rscp) {
    m_rscp = rscp;
    m_rscp_isSet = true;
}

bool OAITdscdmaObj::is_rscp_Set() const{
    return m_rscp_isSet;
}

bool OAITdscdmaObj::is_rscp_Valid() const{
    return m_rscp_isValid;
}

qint32 OAITdscdmaObj::getPathLoss() const {
    return m_path_loss;
}
void OAITdscdmaObj::setPathLoss(const qint32 &path_loss) {
    m_path_loss = path_loss;
    m_path_loss_isSet = true;
}

bool OAITdscdmaObj::is_path_loss_Set() const{
    return m_path_loss_isSet;
}

bool OAITdscdmaObj::is_path_loss_Valid() const{
    return m_path_loss_isValid;
}

QList OAITdscdmaObj::getTdscdmaNmr() const {
    return m_tdscdma_nmr;
}
void OAITdscdmaObj::setTdscdmaNmr(const QList &tdscdma_nmr) {
    m_tdscdma_nmr = tdscdma_nmr;
    m_tdscdma_nmr_isSet = true;
}

bool OAITdscdmaObj::is_tdscdma_nmr_Set() const{
    return m_tdscdma_nmr_isSet;
}

bool OAITdscdmaObj::is_tdscdma_nmr_Valid() const{
    return m_tdscdma_nmr_isValid;
}

bool OAITdscdmaObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utran_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tdscdma_local_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tdscdma_timing_advance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rscp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_loss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tdscdma_nmr.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITdscdmaObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mcc_isValid && m_mnc_isValid && m_utran_cid_isValid && true;
}

} // namespace OpenAPI
