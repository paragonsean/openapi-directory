/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWirelessDeviceImportTaskResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWirelessDeviceImportTaskResponse::OAIGetWirelessDeviceImportTaskResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWirelessDeviceImportTaskResponse::OAIGetWirelessDeviceImportTaskResponse() {
    this->initializeModel();
}

OAIGetWirelessDeviceImportTaskResponse::~OAIGetWirelessDeviceImportTaskResponse() {}

void OAIGetWirelessDeviceImportTaskResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_sidewalk_isSet = false;
    m_sidewalk_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_initialized_imported_device_count_isSet = false;
    m_initialized_imported_device_count_isValid = false;

    m_pending_imported_device_count_isSet = false;
    m_pending_imported_device_count_isValid = false;

    m_onboarded_imported_device_count_isSet = false;
    m_onboarded_imported_device_count_isValid = false;

    m_failed_imported_device_count_isSet = false;
    m_failed_imported_device_count_isValid = false;
}

void OAIGetWirelessDeviceImportTaskResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWirelessDeviceImportTaskResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("DestinationName")]);
    m_destination_name_isSet = !json[QString("DestinationName")].isNull() && m_destination_name_isValid;

    m_sidewalk_isValid = ::OpenAPI::fromJsonValue(m_sidewalk, json[QString("Sidewalk")]);
    m_sidewalk_isSet = !json[QString("Sidewalk")].isNull() && m_sidewalk_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_initialized_imported_device_count_isValid = ::OpenAPI::fromJsonValue(m_initialized_imported_device_count, json[QString("InitializedImportedDeviceCount")]);
    m_initialized_imported_device_count_isSet = !json[QString("InitializedImportedDeviceCount")].isNull() && m_initialized_imported_device_count_isValid;

    m_pending_imported_device_count_isValid = ::OpenAPI::fromJsonValue(m_pending_imported_device_count, json[QString("PendingImportedDeviceCount")]);
    m_pending_imported_device_count_isSet = !json[QString("PendingImportedDeviceCount")].isNull() && m_pending_imported_device_count_isValid;

    m_onboarded_imported_device_count_isValid = ::OpenAPI::fromJsonValue(m_onboarded_imported_device_count, json[QString("OnboardedImportedDeviceCount")]);
    m_onboarded_imported_device_count_isSet = !json[QString("OnboardedImportedDeviceCount")].isNull() && m_onboarded_imported_device_count_isValid;

    m_failed_imported_device_count_isValid = ::OpenAPI::fromJsonValue(m_failed_imported_device_count, json[QString("FailedImportedDeviceCount")]);
    m_failed_imported_device_count_isSet = !json[QString("FailedImportedDeviceCount")].isNull() && m_failed_imported_device_count_isValid;
}

QString OAIGetWirelessDeviceImportTaskResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWirelessDeviceImportTaskResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("DestinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_sidewalk.isSet()) {
        obj.insert(QString("Sidewalk"), ::OpenAPI::toJsonValue(m_sidewalk));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_initialized_imported_device_count_isSet) {
        obj.insert(QString("InitializedImportedDeviceCount"), ::OpenAPI::toJsonValue(m_initialized_imported_device_count));
    }
    if (m_pending_imported_device_count_isSet) {
        obj.insert(QString("PendingImportedDeviceCount"), ::OpenAPI::toJsonValue(m_pending_imported_device_count));
    }
    if (m_onboarded_imported_device_count_isSet) {
        obj.insert(QString("OnboardedImportedDeviceCount"), ::OpenAPI::toJsonValue(m_onboarded_imported_device_count));
    }
    if (m_failed_imported_device_count_isSet) {
        obj.insert(QString("FailedImportedDeviceCount"), ::OpenAPI::toJsonValue(m_failed_imported_device_count));
    }
    return obj;
}

QString OAIGetWirelessDeviceImportTaskResponse::getId() const {
    return m_id;
}
void OAIGetWirelessDeviceImportTaskResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetWirelessDeviceImportTaskResponse::getArn() const {
    return m_arn;
}
void OAIGetWirelessDeviceImportTaskResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIGetWirelessDeviceImportTaskResponse::getDestinationName() const {
    return m_destination_name;
}
void OAIGetWirelessDeviceImportTaskResponse::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

OAIGetWirelessDeviceImportTaskResponse_Sidewalk OAIGetWirelessDeviceImportTaskResponse::getSidewalk() const {
    return m_sidewalk;
}
void OAIGetWirelessDeviceImportTaskResponse::setSidewalk(const OAIGetWirelessDeviceImportTaskResponse_Sidewalk &sidewalk) {
    m_sidewalk = sidewalk;
    m_sidewalk_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_sidewalk_Set() const{
    return m_sidewalk_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_sidewalk_Valid() const{
    return m_sidewalk_isValid;
}

QDateTime OAIGetWirelessDeviceImportTaskResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIGetWirelessDeviceImportTaskResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIImportTaskStatus OAIGetWirelessDeviceImportTaskResponse::getStatus() const {
    return m_status;
}
void OAIGetWirelessDeviceImportTaskResponse::setStatus(const OAIImportTaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetWirelessDeviceImportTaskResponse::getStatusReason() const {
    return m_status_reason;
}
void OAIGetWirelessDeviceImportTaskResponse::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

qint32 OAIGetWirelessDeviceImportTaskResponse::getInitializedImportedDeviceCount() const {
    return m_initialized_imported_device_count;
}
void OAIGetWirelessDeviceImportTaskResponse::setInitializedImportedDeviceCount(const qint32 &initialized_imported_device_count) {
    m_initialized_imported_device_count = initialized_imported_device_count;
    m_initialized_imported_device_count_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_initialized_imported_device_count_Set() const{
    return m_initialized_imported_device_count_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_initialized_imported_device_count_Valid() const{
    return m_initialized_imported_device_count_isValid;
}

qint32 OAIGetWirelessDeviceImportTaskResponse::getPendingImportedDeviceCount() const {
    return m_pending_imported_device_count;
}
void OAIGetWirelessDeviceImportTaskResponse::setPendingImportedDeviceCount(const qint32 &pending_imported_device_count) {
    m_pending_imported_device_count = pending_imported_device_count;
    m_pending_imported_device_count_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_pending_imported_device_count_Set() const{
    return m_pending_imported_device_count_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_pending_imported_device_count_Valid() const{
    return m_pending_imported_device_count_isValid;
}

qint32 OAIGetWirelessDeviceImportTaskResponse::getOnboardedImportedDeviceCount() const {
    return m_onboarded_imported_device_count;
}
void OAIGetWirelessDeviceImportTaskResponse::setOnboardedImportedDeviceCount(const qint32 &onboarded_imported_device_count) {
    m_onboarded_imported_device_count = onboarded_imported_device_count;
    m_onboarded_imported_device_count_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_onboarded_imported_device_count_Set() const{
    return m_onboarded_imported_device_count_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_onboarded_imported_device_count_Valid() const{
    return m_onboarded_imported_device_count_isValid;
}

qint32 OAIGetWirelessDeviceImportTaskResponse::getFailedImportedDeviceCount() const {
    return m_failed_imported_device_count;
}
void OAIGetWirelessDeviceImportTaskResponse::setFailedImportedDeviceCount(const qint32 &failed_imported_device_count) {
    m_failed_imported_device_count = failed_imported_device_count;
    m_failed_imported_device_count_isSet = true;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_failed_imported_device_count_Set() const{
    return m_failed_imported_device_count_isSet;
}

bool OAIGetWirelessDeviceImportTaskResponse::is_failed_imported_device_count_Valid() const{
    return m_failed_imported_device_count_isValid;
}

bool OAIGetWirelessDeviceImportTaskResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initialized_imported_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_imported_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarded_imported_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_imported_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWirelessDeviceImportTaskResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
