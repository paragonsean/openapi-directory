/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWirelessDeviceStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWirelessDeviceStatistics::OAIWirelessDeviceStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWirelessDeviceStatistics::OAIWirelessDeviceStatistics() {
    this->initializeModel();
}

OAIWirelessDeviceStatistics::~OAIWirelessDeviceStatistics() {}

void OAIWirelessDeviceStatistics::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_last_uplink_received_at_isSet = false;
    m_last_uplink_received_at_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_sidewalk_isSet = false;
    m_sidewalk_isValid = false;

    m_fuota_device_status_isSet = false;
    m_fuota_device_status_isValid = false;

    m_multicast_device_status_isSet = false;
    m_multicast_device_status_isValid = false;

    m_mc_group_id_isSet = false;
    m_mc_group_id_isValid = false;
}

void OAIWirelessDeviceStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWirelessDeviceStatistics::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("DestinationName")]);
    m_destination_name_isSet = !json[QString("DestinationName")].isNull() && m_destination_name_isValid;

    m_last_uplink_received_at_isValid = ::OpenAPI::fromJsonValue(m_last_uplink_received_at, json[QString("LastUplinkReceivedAt")]);
    m_last_uplink_received_at_isSet = !json[QString("LastUplinkReceivedAt")].isNull() && m_last_uplink_received_at_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_sidewalk_isValid = ::OpenAPI::fromJsonValue(m_sidewalk, json[QString("Sidewalk")]);
    m_sidewalk_isSet = !json[QString("Sidewalk")].isNull() && m_sidewalk_isValid;

    m_fuota_device_status_isValid = ::OpenAPI::fromJsonValue(m_fuota_device_status, json[QString("FuotaDeviceStatus")]);
    m_fuota_device_status_isSet = !json[QString("FuotaDeviceStatus")].isNull() && m_fuota_device_status_isValid;

    m_multicast_device_status_isValid = ::OpenAPI::fromJsonValue(m_multicast_device_status, json[QString("MulticastDeviceStatus")]);
    m_multicast_device_status_isSet = !json[QString("MulticastDeviceStatus")].isNull() && m_multicast_device_status_isValid;

    m_mc_group_id_isValid = ::OpenAPI::fromJsonValue(m_mc_group_id, json[QString("McGroupId")]);
    m_mc_group_id_isSet = !json[QString("McGroupId")].isNull() && m_mc_group_id_isValid;
}

QString OAIWirelessDeviceStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWirelessDeviceStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("DestinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_last_uplink_received_at_isSet) {
        obj.insert(QString("LastUplinkReceivedAt"), ::OpenAPI::toJsonValue(m_last_uplink_received_at));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_sidewalk.isSet()) {
        obj.insert(QString("Sidewalk"), ::OpenAPI::toJsonValue(m_sidewalk));
    }
    if (m_fuota_device_status.isSet()) {
        obj.insert(QString("FuotaDeviceStatus"), ::OpenAPI::toJsonValue(m_fuota_device_status));
    }
    if (m_multicast_device_status_isSet) {
        obj.insert(QString("MulticastDeviceStatus"), ::OpenAPI::toJsonValue(m_multicast_device_status));
    }
    if (m_mc_group_id_isSet) {
        obj.insert(QString("McGroupId"), ::OpenAPI::toJsonValue(m_mc_group_id));
    }
    return obj;
}

QString OAIWirelessDeviceStatistics::getArn() const {
    return m_arn;
}
void OAIWirelessDeviceStatistics::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIWirelessDeviceStatistics::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIWirelessDeviceStatistics::getId() const {
    return m_id;
}
void OAIWirelessDeviceStatistics::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWirelessDeviceStatistics::is_id_Valid() const{
    return m_id_isValid;
}

OAIWirelessDeviceType OAIWirelessDeviceStatistics::getType() const {
    return m_type;
}
void OAIWirelessDeviceStatistics::setType(const OAIWirelessDeviceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWirelessDeviceStatistics::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIWirelessDeviceStatistics::getName() const {
    return m_name;
}
void OAIWirelessDeviceStatistics::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWirelessDeviceStatistics::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWirelessDeviceStatistics::getDestinationName() const {
    return m_destination_name;
}
void OAIWirelessDeviceStatistics::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIWirelessDeviceStatistics::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIWirelessDeviceStatistics::getLastUplinkReceivedAt() const {
    return m_last_uplink_received_at;
}
void OAIWirelessDeviceStatistics::setLastUplinkReceivedAt(const QString &last_uplink_received_at) {
    m_last_uplink_received_at = last_uplink_received_at;
    m_last_uplink_received_at_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_last_uplink_received_at_Set() const{
    return m_last_uplink_received_at_isSet;
}

bool OAIWirelessDeviceStatistics::is_last_uplink_received_at_Valid() const{
    return m_last_uplink_received_at_isValid;
}

OAIWirelessDeviceStatistics_LoRaWAN OAIWirelessDeviceStatistics::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIWirelessDeviceStatistics::setLoRaWan(const OAIWirelessDeviceStatistics_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIWirelessDeviceStatistics::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

OAIWirelessDeviceStatistics_Sidewalk OAIWirelessDeviceStatistics::getSidewalk() const {
    return m_sidewalk;
}
void OAIWirelessDeviceStatistics::setSidewalk(const OAIWirelessDeviceStatistics_Sidewalk &sidewalk) {
    m_sidewalk = sidewalk;
    m_sidewalk_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_sidewalk_Set() const{
    return m_sidewalk_isSet;
}

bool OAIWirelessDeviceStatistics::is_sidewalk_Valid() const{
    return m_sidewalk_isValid;
}

OAIFuotaDeviceStatus OAIWirelessDeviceStatistics::getFuotaDeviceStatus() const {
    return m_fuota_device_status;
}
void OAIWirelessDeviceStatistics::setFuotaDeviceStatus(const OAIFuotaDeviceStatus &fuota_device_status) {
    m_fuota_device_status = fuota_device_status;
    m_fuota_device_status_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_fuota_device_status_Set() const{
    return m_fuota_device_status_isSet;
}

bool OAIWirelessDeviceStatistics::is_fuota_device_status_Valid() const{
    return m_fuota_device_status_isValid;
}

QString OAIWirelessDeviceStatistics::getMulticastDeviceStatus() const {
    return m_multicast_device_status;
}
void OAIWirelessDeviceStatistics::setMulticastDeviceStatus(const QString &multicast_device_status) {
    m_multicast_device_status = multicast_device_status;
    m_multicast_device_status_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_multicast_device_status_Set() const{
    return m_multicast_device_status_isSet;
}

bool OAIWirelessDeviceStatistics::is_multicast_device_status_Valid() const{
    return m_multicast_device_status_isValid;
}

qint32 OAIWirelessDeviceStatistics::getMcGroupId() const {
    return m_mc_group_id;
}
void OAIWirelessDeviceStatistics::setMcGroupId(const qint32 &mc_group_id) {
    m_mc_group_id = mc_group_id;
    m_mc_group_id_isSet = true;
}

bool OAIWirelessDeviceStatistics::is_mc_group_id_Set() const{
    return m_mc_group_id_isSet;
}

bool OAIWirelessDeviceStatistics::is_mc_group_id_Valid() const{
    return m_mc_group_id_isValid;
}

bool OAIWirelessDeviceStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_uplink_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuota_device_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_device_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mc_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWirelessDeviceStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
