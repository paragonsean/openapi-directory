/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICdmaObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICdmaObj::OAICdmaObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICdmaObj::OAICdmaObj() {
    this->initializeModel();
}

OAICdmaObj::~OAICdmaObj() {}

void OAICdmaObj::initializeModel() {

    m_system_id_isSet = false;
    m_system_id_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_base_station_id_isSet = false;
    m_base_station_id_isValid = false;

    m_registration_zone_isSet = false;
    m_registration_zone_isValid = false;

    m_cdma_local_id_isSet = false;
    m_cdma_local_id_isValid = false;

    m_pilot_power_isSet = false;
    m_pilot_power_isValid = false;

    m_base_lat_isSet = false;
    m_base_lat_isValid = false;

    m_base_lng_isSet = false;
    m_base_lng_isValid = false;

    m_cdma_nmr_isSet = false;
    m_cdma_nmr_isValid = false;
}

void OAICdmaObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICdmaObj::fromJsonObject(QJsonObject json) {

    m_system_id_isValid = ::OpenAPI::fromJsonValue(m_system_id, json[QString("SystemId")]);
    m_system_id_isSet = !json[QString("SystemId")].isNull() && m_system_id_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("NetworkId")]);
    m_network_id_isSet = !json[QString("NetworkId")].isNull() && m_network_id_isValid;

    m_base_station_id_isValid = ::OpenAPI::fromJsonValue(m_base_station_id, json[QString("BaseStationId")]);
    m_base_station_id_isSet = !json[QString("BaseStationId")].isNull() && m_base_station_id_isValid;

    m_registration_zone_isValid = ::OpenAPI::fromJsonValue(m_registration_zone, json[QString("RegistrationZone")]);
    m_registration_zone_isSet = !json[QString("RegistrationZone")].isNull() && m_registration_zone_isValid;

    m_cdma_local_id_isValid = ::OpenAPI::fromJsonValue(m_cdma_local_id, json[QString("CdmaLocalId")]);
    m_cdma_local_id_isSet = !json[QString("CdmaLocalId")].isNull() && m_cdma_local_id_isValid;

    m_pilot_power_isValid = ::OpenAPI::fromJsonValue(m_pilot_power, json[QString("PilotPower")]);
    m_pilot_power_isSet = !json[QString("PilotPower")].isNull() && m_pilot_power_isValid;

    m_base_lat_isValid = ::OpenAPI::fromJsonValue(m_base_lat, json[QString("BaseLat")]);
    m_base_lat_isSet = !json[QString("BaseLat")].isNull() && m_base_lat_isValid;

    m_base_lng_isValid = ::OpenAPI::fromJsonValue(m_base_lng, json[QString("BaseLng")]);
    m_base_lng_isSet = !json[QString("BaseLng")].isNull() && m_base_lng_isValid;

    m_cdma_nmr_isValid = ::OpenAPI::fromJsonValue(m_cdma_nmr, json[QString("CdmaNmr")]);
    m_cdma_nmr_isSet = !json[QString("CdmaNmr")].isNull() && m_cdma_nmr_isValid;
}

QString OAICdmaObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICdmaObj::asJsonObject() const {
    QJsonObject obj;
    if (m_system_id_isSet) {
        obj.insert(QString("SystemId"), ::OpenAPI::toJsonValue(m_system_id));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("NetworkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_base_station_id_isSet) {
        obj.insert(QString("BaseStationId"), ::OpenAPI::toJsonValue(m_base_station_id));
    }
    if (m_registration_zone_isSet) {
        obj.insert(QString("RegistrationZone"), ::OpenAPI::toJsonValue(m_registration_zone));
    }
    if (m_cdma_local_id.isSet()) {
        obj.insert(QString("CdmaLocalId"), ::OpenAPI::toJsonValue(m_cdma_local_id));
    }
    if (m_pilot_power_isSet) {
        obj.insert(QString("PilotPower"), ::OpenAPI::toJsonValue(m_pilot_power));
    }
    if (m_base_lat_isSet) {
        obj.insert(QString("BaseLat"), ::OpenAPI::toJsonValue(m_base_lat));
    }
    if (m_base_lng_isSet) {
        obj.insert(QString("BaseLng"), ::OpenAPI::toJsonValue(m_base_lng));
    }
    if (m_cdma_nmr.isSet()) {
        obj.insert(QString("CdmaNmr"), ::OpenAPI::toJsonValue(m_cdma_nmr));
    }
    return obj;
}

qint32 OAICdmaObj::getSystemId() const {
    return m_system_id;
}
void OAICdmaObj::setSystemId(const qint32 &system_id) {
    m_system_id = system_id;
    m_system_id_isSet = true;
}

bool OAICdmaObj::is_system_id_Set() const{
    return m_system_id_isSet;
}

bool OAICdmaObj::is_system_id_Valid() const{
    return m_system_id_isValid;
}

qint32 OAICdmaObj::getNetworkId() const {
    return m_network_id;
}
void OAICdmaObj::setNetworkId(const qint32 &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAICdmaObj::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAICdmaObj::is_network_id_Valid() const{
    return m_network_id_isValid;
}

qint32 OAICdmaObj::getBaseStationId() const {
    return m_base_station_id;
}
void OAICdmaObj::setBaseStationId(const qint32 &base_station_id) {
    m_base_station_id = base_station_id;
    m_base_station_id_isSet = true;
}

bool OAICdmaObj::is_base_station_id_Set() const{
    return m_base_station_id_isSet;
}

bool OAICdmaObj::is_base_station_id_Valid() const{
    return m_base_station_id_isValid;
}

qint32 OAICdmaObj::getRegistrationZone() const {
    return m_registration_zone;
}
void OAICdmaObj::setRegistrationZone(const qint32 &registration_zone) {
    m_registration_zone = registration_zone;
    m_registration_zone_isSet = true;
}

bool OAICdmaObj::is_registration_zone_Set() const{
    return m_registration_zone_isSet;
}

bool OAICdmaObj::is_registration_zone_Valid() const{
    return m_registration_zone_isValid;
}

OAICdmaObj_CdmaLocalId OAICdmaObj::getCdmaLocalId() const {
    return m_cdma_local_id;
}
void OAICdmaObj::setCdmaLocalId(const OAICdmaObj_CdmaLocalId &cdma_local_id) {
    m_cdma_local_id = cdma_local_id;
    m_cdma_local_id_isSet = true;
}

bool OAICdmaObj::is_cdma_local_id_Set() const{
    return m_cdma_local_id_isSet;
}

bool OAICdmaObj::is_cdma_local_id_Valid() const{
    return m_cdma_local_id_isValid;
}

qint32 OAICdmaObj::getPilotPower() const {
    return m_pilot_power;
}
void OAICdmaObj::setPilotPower(const qint32 &pilot_power) {
    m_pilot_power = pilot_power;
    m_pilot_power_isSet = true;
}

bool OAICdmaObj::is_pilot_power_Set() const{
    return m_pilot_power_isSet;
}

bool OAICdmaObj::is_pilot_power_Valid() const{
    return m_pilot_power_isValid;
}

float OAICdmaObj::getBaseLat() const {
    return m_base_lat;
}
void OAICdmaObj::setBaseLat(const float &base_lat) {
    m_base_lat = base_lat;
    m_base_lat_isSet = true;
}

bool OAICdmaObj::is_base_lat_Set() const{
    return m_base_lat_isSet;
}

bool OAICdmaObj::is_base_lat_Valid() const{
    return m_base_lat_isValid;
}

float OAICdmaObj::getBaseLng() const {
    return m_base_lng;
}
void OAICdmaObj::setBaseLng(const float &base_lng) {
    m_base_lng = base_lng;
    m_base_lng_isSet = true;
}

bool OAICdmaObj::is_base_lng_Set() const{
    return m_base_lng_isSet;
}

bool OAICdmaObj::is_base_lng_Valid() const{
    return m_base_lng_isValid;
}

QList OAICdmaObj::getCdmaNmr() const {
    return m_cdma_nmr;
}
void OAICdmaObj::setCdmaNmr(const QList &cdma_nmr) {
    m_cdma_nmr = cdma_nmr;
    m_cdma_nmr_isSet = true;
}

bool OAICdmaObj::is_cdma_nmr_Set() const{
    return m_cdma_nmr_isSet;
}

bool OAICdmaObj::is_cdma_nmr_Valid() const{
    return m_cdma_nmr_isValid;
}

bool OAICdmaObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_station_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdma_local_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pilot_power_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdma_nmr.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICdmaObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_system_id_isValid && m_network_id_isValid && m_base_station_id_isValid && true;
}

} // namespace OpenAPI
