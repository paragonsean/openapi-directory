/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWirelessGateway_request_LoRaWAN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWirelessGateway_request_LoRaWAN::OAICreateWirelessGateway_request_LoRaWAN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWirelessGateway_request_LoRaWAN::OAICreateWirelessGateway_request_LoRaWAN() {
    this->initializeModel();
}

OAICreateWirelessGateway_request_LoRaWAN::~OAICreateWirelessGateway_request_LoRaWAN() {}

void OAICreateWirelessGateway_request_LoRaWAN::initializeModel() {

    m_gateway_eui_isSet = false;
    m_gateway_eui_isValid = false;

    m_rf_region_isSet = false;
    m_rf_region_isValid = false;

    m_join_eui_filters_isSet = false;
    m_join_eui_filters_isValid = false;

    m_net_id_filters_isSet = false;
    m_net_id_filters_isValid = false;

    m_sub_bands_isSet = false;
    m_sub_bands_isValid = false;

    m_beaconing_isSet = false;
    m_beaconing_isValid = false;

    m_max_eirp_isSet = false;
    m_max_eirp_isValid = false;
}

void OAICreateWirelessGateway_request_LoRaWAN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWirelessGateway_request_LoRaWAN::fromJsonObject(QJsonObject json) {

    m_gateway_eui_isValid = ::OpenAPI::fromJsonValue(m_gateway_eui, json[QString("GatewayEui")]);
    m_gateway_eui_isSet = !json[QString("GatewayEui")].isNull() && m_gateway_eui_isValid;

    m_rf_region_isValid = ::OpenAPI::fromJsonValue(m_rf_region, json[QString("RfRegion")]);
    m_rf_region_isSet = !json[QString("RfRegion")].isNull() && m_rf_region_isValid;

    if(json["JoinEuiFilters"].isArray()){
        auto arr = json["JoinEuiFilters"].toArray();
        m_join_eui_filters_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_join_eui_filters_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_join_eui_filters_isSet = !jval.isNull() && m_join_eui_filters_isValid;
                m_join_eui_filters.push_back(item);
            }
        }
    }

    m_net_id_filters_isValid = ::OpenAPI::fromJsonValue(m_net_id_filters, json[QString("NetIdFilters")]);
    m_net_id_filters_isSet = !json[QString("NetIdFilters")].isNull() && m_net_id_filters_isValid;

    m_sub_bands_isValid = ::OpenAPI::fromJsonValue(m_sub_bands, json[QString("SubBands")]);
    m_sub_bands_isSet = !json[QString("SubBands")].isNull() && m_sub_bands_isValid;

    m_beaconing_isValid = ::OpenAPI::fromJsonValue(m_beaconing, json[QString("Beaconing")]);
    m_beaconing_isSet = !json[QString("Beaconing")].isNull() && m_beaconing_isValid;

    m_max_eirp_isValid = ::OpenAPI::fromJsonValue(m_max_eirp, json[QString("MaxEirp")]);
    m_max_eirp_isSet = !json[QString("MaxEirp")].isNull() && m_max_eirp_isValid;
}

QString OAICreateWirelessGateway_request_LoRaWAN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWirelessGateway_request_LoRaWAN::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_eui_isSet) {
        obj.insert(QString("GatewayEui"), ::OpenAPI::toJsonValue(m_gateway_eui));
    }
    if (m_rf_region_isSet) {
        obj.insert(QString("RfRegion"), ::OpenAPI::toJsonValue(m_rf_region));
    }
    if (m_join_eui_filters.size() > 0) {
        
        obj.insert(QString("JoinEuiFilters"), toJsonValue(m_join_eui_filters));
    }
    if (m_net_id_filters.size() > 0) {
        obj.insert(QString("NetIdFilters"), ::OpenAPI::toJsonValue(m_net_id_filters));
    }
    if (m_sub_bands.size() > 0) {
        obj.insert(QString("SubBands"), ::OpenAPI::toJsonValue(m_sub_bands));
    }
    if (m_beaconing.isSet()) {
        obj.insert(QString("Beaconing"), ::OpenAPI::toJsonValue(m_beaconing));
    }
    if (m_max_eirp_isSet) {
        obj.insert(QString("MaxEirp"), ::OpenAPI::toJsonValue(m_max_eirp));
    }
    return obj;
}

QString OAICreateWirelessGateway_request_LoRaWAN::getGatewayEui() const {
    return m_gateway_eui;
}
void OAICreateWirelessGateway_request_LoRaWAN::setGatewayEui(const QString &gateway_eui) {
    m_gateway_eui = gateway_eui;
    m_gateway_eui_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_gateway_eui_Set() const{
    return m_gateway_eui_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_gateway_eui_Valid() const{
    return m_gateway_eui_isValid;
}

QString OAICreateWirelessGateway_request_LoRaWAN::getRfRegion() const {
    return m_rf_region;
}
void OAICreateWirelessGateway_request_LoRaWAN::setRfRegion(const QString &rf_region) {
    m_rf_region = rf_region;
    m_rf_region_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_rf_region_Set() const{
    return m_rf_region_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_rf_region_Valid() const{
    return m_rf_region_isValid;
}

QList<QList> OAICreateWirelessGateway_request_LoRaWAN::getJoinEuiFilters() const {
    return m_join_eui_filters;
}
void OAICreateWirelessGateway_request_LoRaWAN::setJoinEuiFilters(const QList<QList> &join_eui_filters) {
    m_join_eui_filters = join_eui_filters;
    m_join_eui_filters_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_join_eui_filters_Set() const{
    return m_join_eui_filters_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_join_eui_filters_Valid() const{
    return m_join_eui_filters_isValid;
}

QList<QString> OAICreateWirelessGateway_request_LoRaWAN::getNetIdFilters() const {
    return m_net_id_filters;
}
void OAICreateWirelessGateway_request_LoRaWAN::setNetIdFilters(const QList<QString> &net_id_filters) {
    m_net_id_filters = net_id_filters;
    m_net_id_filters_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_net_id_filters_Set() const{
    return m_net_id_filters_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_net_id_filters_Valid() const{
    return m_net_id_filters_isValid;
}

QList<qint32> OAICreateWirelessGateway_request_LoRaWAN::getSubBands() const {
    return m_sub_bands;
}
void OAICreateWirelessGateway_request_LoRaWAN::setSubBands(const QList<qint32> &sub_bands) {
    m_sub_bands = sub_bands;
    m_sub_bands_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_sub_bands_Set() const{
    return m_sub_bands_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_sub_bands_Valid() const{
    return m_sub_bands_isValid;
}

OAICreateWirelessGateway_request_LoRaWAN_Beaconing OAICreateWirelessGateway_request_LoRaWAN::getBeaconing() const {
    return m_beaconing;
}
void OAICreateWirelessGateway_request_LoRaWAN::setBeaconing(const OAICreateWirelessGateway_request_LoRaWAN_Beaconing &beaconing) {
    m_beaconing = beaconing;
    m_beaconing_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_beaconing_Set() const{
    return m_beaconing_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_beaconing_Valid() const{
    return m_beaconing_isValid;
}

float OAICreateWirelessGateway_request_LoRaWAN::getMaxEirp() const {
    return m_max_eirp;
}
void OAICreateWirelessGateway_request_LoRaWAN::setMaxEirp(const float &max_eirp) {
    m_max_eirp = max_eirp;
    m_max_eirp_isSet = true;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_max_eirp_Set() const{
    return m_max_eirp_isSet;
}

bool OAICreateWirelessGateway_request_LoRaWAN::is_max_eirp_Valid() const{
    return m_max_eirp_isValid;
}

bool OAICreateWirelessGateway_request_LoRaWAN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_eui_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rf_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_eui_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_id_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_bands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_beaconing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_eirp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWirelessGateway_request_LoRaWAN::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
