/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateServiceProfileRequest_LoRaWAN.h
 *
 * 
 */

#ifndef OAICreateServiceProfileRequest_LoRaWAN_H
#define OAICreateServiceProfileRequest_LoRaWAN_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateServiceProfileRequest_LoRaWAN : public OAIObject {
public:
    OAICreateServiceProfileRequest_LoRaWAN();
    OAICreateServiceProfileRequest_LoRaWAN(QString json);
    ~OAICreateServiceProfileRequest_LoRaWAN() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getAddGwMetadata() const;
    void setAddGwMetadata(const bool &add_gw_metadata);
    bool is_add_gw_metadata_Set() const;
    bool is_add_gw_metadata_Valid() const;

    qint32 getDrMin() const;
    void setDrMin(const qint32 &dr_min);
    bool is_dr_min_Set() const;
    bool is_dr_min_Valid() const;

    qint32 getDrMax() const;
    void setDrMax(const qint32 &dr_max);
    bool is_dr_max_Set() const;
    bool is_dr_max_Valid() const;

    bool getPrAllowed() const;
    void setPrAllowed(const bool &pr_allowed);
    bool is_pr_allowed_Set() const;
    bool is_pr_allowed_Valid() const;

    bool getRaAllowed() const;
    void setRaAllowed(const bool &ra_allowed);
    bool is_ra_allowed_Set() const;
    bool is_ra_allowed_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_add_gw_metadata;
    bool m_add_gw_metadata_isSet;
    bool m_add_gw_metadata_isValid;

    qint32 m_dr_min;
    bool m_dr_min_isSet;
    bool m_dr_min_isValid;

    qint32 m_dr_max;
    bool m_dr_max_isSet;
    bool m_dr_max_isValid;

    bool m_pr_allowed;
    bool m_pr_allowed_isSet;
    bool m_pr_allowed_isValid;

    bool m_ra_allowed;
    bool m_ra_allowed_isSet;
    bool m_ra_allowed_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateServiceProfileRequest_LoRaWAN)

#endif // OAICreateServiceProfileRequest_LoRaWAN_H
