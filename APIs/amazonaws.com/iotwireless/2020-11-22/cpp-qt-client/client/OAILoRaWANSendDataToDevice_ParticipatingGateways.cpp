/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoRaWANSendDataToDevice_ParticipatingGateways.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoRaWANSendDataToDevice_ParticipatingGateways::OAILoRaWANSendDataToDevice_ParticipatingGateways(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoRaWANSendDataToDevice_ParticipatingGateways::OAILoRaWANSendDataToDevice_ParticipatingGateways() {
    this->initializeModel();
}

OAILoRaWANSendDataToDevice_ParticipatingGateways::~OAILoRaWANSendDataToDevice_ParticipatingGateways() {}

void OAILoRaWANSendDataToDevice_ParticipatingGateways::initializeModel() {

    m_downlink_mode_isSet = false;
    m_downlink_mode_isValid = false;

    m_gateway_list_isSet = false;
    m_gateway_list_isValid = false;

    m_transmission_interval_isSet = false;
    m_transmission_interval_isValid = false;
}

void OAILoRaWANSendDataToDevice_ParticipatingGateways::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoRaWANSendDataToDevice_ParticipatingGateways::fromJsonObject(QJsonObject json) {

    m_downlink_mode_isValid = ::OpenAPI::fromJsonValue(m_downlink_mode, json[QString("DownlinkMode")]);
    m_downlink_mode_isSet = !json[QString("DownlinkMode")].isNull() && m_downlink_mode_isValid;

    m_gateway_list_isValid = ::OpenAPI::fromJsonValue(m_gateway_list, json[QString("GatewayList")]);
    m_gateway_list_isSet = !json[QString("GatewayList")].isNull() && m_gateway_list_isValid;

    m_transmission_interval_isValid = ::OpenAPI::fromJsonValue(m_transmission_interval, json[QString("TransmissionInterval")]);
    m_transmission_interval_isSet = !json[QString("TransmissionInterval")].isNull() && m_transmission_interval_isValid;
}

QString OAILoRaWANSendDataToDevice_ParticipatingGateways::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoRaWANSendDataToDevice_ParticipatingGateways::asJsonObject() const {
    QJsonObject obj;
    if (m_downlink_mode.isSet()) {
        obj.insert(QString("DownlinkMode"), ::OpenAPI::toJsonValue(m_downlink_mode));
    }
    if (m_gateway_list.isSet()) {
        obj.insert(QString("GatewayList"), ::OpenAPI::toJsonValue(m_gateway_list));
    }
    if (m_transmission_interval_isSet) {
        obj.insert(QString("TransmissionInterval"), ::OpenAPI::toJsonValue(m_transmission_interval));
    }
    return obj;
}

OAIDownlinkMode OAILoRaWANSendDataToDevice_ParticipatingGateways::getDownlinkMode() const {
    return m_downlink_mode;
}
void OAILoRaWANSendDataToDevice_ParticipatingGateways::setDownlinkMode(const OAIDownlinkMode &downlink_mode) {
    m_downlink_mode = downlink_mode;
    m_downlink_mode_isSet = true;
}

bool OAILoRaWANSendDataToDevice_ParticipatingGateways::is_downlink_mode_Set() const{
    return m_downlink_mode_isSet;
}

bool OAILoRaWANSendDataToDevice_ParticipatingGateways::is_downlink_mode_Valid() const{
    return m_downlink_mode_isValid;
}

QList OAILoRaWANSendDataToDevice_ParticipatingGateways::getGatewayList() const {
    return m_gateway_list;
}
void OAILoRaWANSendDataToDevice_ParticipatingGateways::setGatewayList(const QList &gateway_list) {
    m_gateway_list = gateway_list;
    m_gateway_list_isSet = true;
}

bool OAILoRaWANSendDataToDevice_ParticipatingGateways::is_gateway_list_Set() const{
    return m_gateway_list_isSet;
}

bool OAILoRaWANSendDataToDevice_ParticipatingGateways::is_gateway_list_Valid() const{
    return m_gateway_list_isValid;
}

qint32 OAILoRaWANSendDataToDevice_ParticipatingGateways::getTransmissionInterval() const {
    return m_transmission_interval;
}
void OAILoRaWANSendDataToDevice_ParticipatingGateways::setTransmissionInterval(const qint32 &transmission_interval) {
    m_transmission_interval = transmission_interval;
    m_transmission_interval_isSet = true;
}

bool OAILoRaWANSendDataToDevice_ParticipatingGateways::is_transmission_interval_Set() const{
    return m_transmission_interval_isSet;
}

bool OAILoRaWANSendDataToDevice_ParticipatingGateways::is_transmission_interval_Valid() const{
    return m_transmission_interval_isValid;
}

bool OAILoRaWANSendDataToDevice_ParticipatingGateways::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_downlink_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmission_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoRaWANSendDataToDevice_ParticipatingGateways::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_downlink_mode_isValid && m_gateway_list_isValid && m_transmission_interval_isValid && true;
}

} // namespace OpenAPI
