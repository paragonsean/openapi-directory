/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPositionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPositionResponse::OAIGetPositionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPositionResponse::OAIGetPositionResponse() {
    this->initializeModel();
}

OAIGetPositionResponse::~OAIGetPositionResponse() {}

void OAIGetPositionResponse::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_accuracy_isSet = false;
    m_accuracy_isValid = false;

    m_solver_type_isSet = false;
    m_solver_type_isValid = false;

    m_solver_provider_isSet = false;
    m_solver_provider_isValid = false;

    m_solver_version_isSet = false;
    m_solver_version_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIGetPositionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPositionResponse::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_accuracy_isValid = ::OpenAPI::fromJsonValue(m_accuracy, json[QString("Accuracy")]);
    m_accuracy_isSet = !json[QString("Accuracy")].isNull() && m_accuracy_isValid;

    m_solver_type_isValid = ::OpenAPI::fromJsonValue(m_solver_type, json[QString("SolverType")]);
    m_solver_type_isSet = !json[QString("SolverType")].isNull() && m_solver_type_isValid;

    m_solver_provider_isValid = ::OpenAPI::fromJsonValue(m_solver_provider, json[QString("SolverProvider")]);
    m_solver_provider_isSet = !json[QString("SolverProvider")].isNull() && m_solver_provider_isValid;

    m_solver_version_isValid = ::OpenAPI::fromJsonValue(m_solver_version, json[QString("SolverVersion")]);
    m_solver_version_isSet = !json[QString("SolverVersion")].isNull() && m_solver_version_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIGetPositionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPositionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_position.isSet()) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_accuracy.isSet()) {
        obj.insert(QString("Accuracy"), ::OpenAPI::toJsonValue(m_accuracy));
    }
    if (m_solver_type.isSet()) {
        obj.insert(QString("SolverType"), ::OpenAPI::toJsonValue(m_solver_type));
    }
    if (m_solver_provider.isSet()) {
        obj.insert(QString("SolverProvider"), ::OpenAPI::toJsonValue(m_solver_provider));
    }
    if (m_solver_version_isSet) {
        obj.insert(QString("SolverVersion"), ::OpenAPI::toJsonValue(m_solver_version));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QList OAIGetPositionResponse::getPosition() const {
    return m_position;
}
void OAIGetPositionResponse::setPosition(const QList &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIGetPositionResponse::is_position_Set() const{
    return m_position_isSet;
}

bool OAIGetPositionResponse::is_position_Valid() const{
    return m_position_isValid;
}

OAIGetPositionResponse_Accuracy OAIGetPositionResponse::getAccuracy() const {
    return m_accuracy;
}
void OAIGetPositionResponse::setAccuracy(const OAIGetPositionResponse_Accuracy &accuracy) {
    m_accuracy = accuracy;
    m_accuracy_isSet = true;
}

bool OAIGetPositionResponse::is_accuracy_Set() const{
    return m_accuracy_isSet;
}

bool OAIGetPositionResponse::is_accuracy_Valid() const{
    return m_accuracy_isValid;
}

OAIPositionSolverType OAIGetPositionResponse::getSolverType() const {
    return m_solver_type;
}
void OAIGetPositionResponse::setSolverType(const OAIPositionSolverType &solver_type) {
    m_solver_type = solver_type;
    m_solver_type_isSet = true;
}

bool OAIGetPositionResponse::is_solver_type_Set() const{
    return m_solver_type_isSet;
}

bool OAIGetPositionResponse::is_solver_type_Valid() const{
    return m_solver_type_isValid;
}

OAIPositionSolverProvider OAIGetPositionResponse::getSolverProvider() const {
    return m_solver_provider;
}
void OAIGetPositionResponse::setSolverProvider(const OAIPositionSolverProvider &solver_provider) {
    m_solver_provider = solver_provider;
    m_solver_provider_isSet = true;
}

bool OAIGetPositionResponse::is_solver_provider_Set() const{
    return m_solver_provider_isSet;
}

bool OAIGetPositionResponse::is_solver_provider_Valid() const{
    return m_solver_provider_isValid;
}

QString OAIGetPositionResponse::getSolverVersion() const {
    return m_solver_version;
}
void OAIGetPositionResponse::setSolverVersion(const QString &solver_version) {
    m_solver_version = solver_version;
    m_solver_version_isSet = true;
}

bool OAIGetPositionResponse::is_solver_version_Set() const{
    return m_solver_version_isSet;
}

bool OAIGetPositionResponse::is_solver_version_Valid() const{
    return m_solver_version_isValid;
}

QString OAIGetPositionResponse::getTimestamp() const {
    return m_timestamp;
}
void OAIGetPositionResponse::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIGetPositionResponse::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIGetPositionResponse::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIGetPositionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accuracy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_solver_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_solver_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_solver_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPositionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
