/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGsmNmrObj.h
 *
 * GSM object for network measurement reports.
 */

#ifndef OAIGsmNmrObj_H
#define OAIGsmNmrObj_H

#include <QJsonObject>

#include "OAIGsmNmrObj_GlobalIdentity.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGsmNmrObj_GlobalIdentity;

class OAIGsmNmrObj : public OAIObject {
public:
    OAIGsmNmrObj();
    OAIGsmNmrObj(QString json);
    ~OAIGsmNmrObj() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBsic() const;
    void setBsic(const qint32 &bsic);
    bool is_bsic_Set() const;
    bool is_bsic_Valid() const;

    qint32 getBcch() const;
    void setBcch(const qint32 &bcch);
    bool is_bcch_Set() const;
    bool is_bcch_Valid() const;

    qint32 getRxLevel() const;
    void setRxLevel(const qint32 &rx_level);
    bool is_rx_level_Set() const;
    bool is_rx_level_Valid() const;

    OAIGsmNmrObj_GlobalIdentity getGlobalIdentity() const;
    void setGlobalIdentity(const OAIGsmNmrObj_GlobalIdentity &global_identity);
    bool is_global_identity_Set() const;
    bool is_global_identity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bsic;
    bool m_bsic_isSet;
    bool m_bsic_isValid;

    qint32 m_bcch;
    bool m_bcch_isSet;
    bool m_bcch_isValid;

    qint32 m_rx_level;
    bool m_rx_level_isSet;
    bool m_rx_level_isValid;

    OAIGsmNmrObj_GlobalIdentity m_global_identity;
    bool m_global_identity_isSet;
    bool m_global_identity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGsmNmrObj)

#endif // OAIGsmNmrObj_H
