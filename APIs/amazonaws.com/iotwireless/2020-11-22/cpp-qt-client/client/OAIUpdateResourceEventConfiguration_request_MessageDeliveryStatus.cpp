/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus() {
    this->initializeModel();
}

OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::~OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus() {}

void OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::initializeModel() {

    m_sidewalk_isSet = false;
    m_sidewalk_isValid = false;

    m_wireless_device_id_event_topic_isSet = false;
    m_wireless_device_id_event_topic_isValid = false;
}

void OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::fromJsonObject(QJsonObject json) {

    m_sidewalk_isValid = ::OpenAPI::fromJsonValue(m_sidewalk, json[QString("Sidewalk")]);
    m_sidewalk_isSet = !json[QString("Sidewalk")].isNull() && m_sidewalk_isValid;

    m_wireless_device_id_event_topic_isValid = ::OpenAPI::fromJsonValue(m_wireless_device_id_event_topic, json[QString("WirelessDeviceIdEventTopic")]);
    m_wireless_device_id_event_topic_isSet = !json[QString("WirelessDeviceIdEventTopic")].isNull() && m_wireless_device_id_event_topic_isValid;
}

QString OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_sidewalk.isSet()) {
        obj.insert(QString("Sidewalk"), ::OpenAPI::toJsonValue(m_sidewalk));
    }
    if (m_wireless_device_id_event_topic.isSet()) {
        obj.insert(QString("WirelessDeviceIdEventTopic"), ::OpenAPI::toJsonValue(m_wireless_device_id_event_topic));
    }
    return obj;
}

OAISidewalkEventNotificationConfigurations OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::getSidewalk() const {
    return m_sidewalk;
}
void OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::setSidewalk(const OAISidewalkEventNotificationConfigurations &sidewalk) {
    m_sidewalk = sidewalk;
    m_sidewalk_isSet = true;
}

bool OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::is_sidewalk_Set() const{
    return m_sidewalk_isSet;
}

bool OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::is_sidewalk_Valid() const{
    return m_sidewalk_isValid;
}

OAIEventNotificationTopicStatus OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::getWirelessDeviceIdEventTopic() const {
    return m_wireless_device_id_event_topic;
}
void OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::setWirelessDeviceIdEventTopic(const OAIEventNotificationTopicStatus &wireless_device_id_event_topic) {
    m_wireless_device_id_event_topic = wireless_device_id_event_topic;
    m_wireless_device_id_event_topic_isSet = true;
}

bool OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::is_wireless_device_id_event_topic_Set() const{
    return m_wireless_device_id_event_topic_isSet;
}

bool OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::is_wireless_device_id_event_topic_Valid() const{
    return m_wireless_device_id_event_topic_isValid;
}

bool OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sidewalk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_device_id_event_topic.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateResourceEventConfiguration_request_MessageDeliveryStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
