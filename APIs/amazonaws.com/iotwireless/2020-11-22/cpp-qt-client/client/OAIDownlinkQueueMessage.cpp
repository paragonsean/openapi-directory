/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownlinkQueueMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownlinkQueueMessage::OAIDownlinkQueueMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownlinkQueueMessage::OAIDownlinkQueueMessage() {
    this->initializeModel();
}

OAIDownlinkQueueMessage::~OAIDownlinkQueueMessage() {}

void OAIDownlinkQueueMessage::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_transmit_mode_isSet = false;
    m_transmit_mode_isValid = false;

    m_received_at_isSet = false;
    m_received_at_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;
}

void OAIDownlinkQueueMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownlinkQueueMessage::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("MessageId")]);
    m_message_id_isSet = !json[QString("MessageId")].isNull() && m_message_id_isValid;

    m_transmit_mode_isValid = ::OpenAPI::fromJsonValue(m_transmit_mode, json[QString("TransmitMode")]);
    m_transmit_mode_isSet = !json[QString("TransmitMode")].isNull() && m_transmit_mode_isValid;

    m_received_at_isValid = ::OpenAPI::fromJsonValue(m_received_at, json[QString("ReceivedAt")]);
    m_received_at_isSet = !json[QString("ReceivedAt")].isNull() && m_received_at_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;
}

QString OAIDownlinkQueueMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownlinkQueueMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("MessageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_transmit_mode_isSet) {
        obj.insert(QString("TransmitMode"), ::OpenAPI::toJsonValue(m_transmit_mode));
    }
    if (m_received_at_isSet) {
        obj.insert(QString("ReceivedAt"), ::OpenAPI::toJsonValue(m_received_at));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    return obj;
}

QString OAIDownlinkQueueMessage::getMessageId() const {
    return m_message_id;
}
void OAIDownlinkQueueMessage::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIDownlinkQueueMessage::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIDownlinkQueueMessage::is_message_id_Valid() const{
    return m_message_id_isValid;
}

qint32 OAIDownlinkQueueMessage::getTransmitMode() const {
    return m_transmit_mode;
}
void OAIDownlinkQueueMessage::setTransmitMode(const qint32 &transmit_mode) {
    m_transmit_mode = transmit_mode;
    m_transmit_mode_isSet = true;
}

bool OAIDownlinkQueueMessage::is_transmit_mode_Set() const{
    return m_transmit_mode_isSet;
}

bool OAIDownlinkQueueMessage::is_transmit_mode_Valid() const{
    return m_transmit_mode_isValid;
}

QString OAIDownlinkQueueMessage::getReceivedAt() const {
    return m_received_at;
}
void OAIDownlinkQueueMessage::setReceivedAt(const QString &received_at) {
    m_received_at = received_at;
    m_received_at_isSet = true;
}

bool OAIDownlinkQueueMessage::is_received_at_Set() const{
    return m_received_at_isSet;
}

bool OAIDownlinkQueueMessage::is_received_at_Valid() const{
    return m_received_at_isValid;
}

OAILoRaWANSendDataToDevice OAIDownlinkQueueMessage::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIDownlinkQueueMessage::setLoRaWan(const OAILoRaWANSendDataToDevice &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIDownlinkQueueMessage::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIDownlinkQueueMessage::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

bool OAIDownlinkQueueMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transmit_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownlinkQueueMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
