/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWirelessDeviceLogOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWirelessDeviceLogOption::OAIWirelessDeviceLogOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWirelessDeviceLogOption::OAIWirelessDeviceLogOption() {
    this->initializeModel();
}

OAIWirelessDeviceLogOption::~OAIWirelessDeviceLogOption() {}

void OAIWirelessDeviceLogOption::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;
}

void OAIWirelessDeviceLogOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWirelessDeviceLogOption::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("LogLevel")]);
    m_log_level_isSet = !json[QString("LogLevel")].isNull() && m_log_level_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("Events")]);
    m_events_isSet = !json[QString("Events")].isNull() && m_events_isValid;
}

QString OAIWirelessDeviceLogOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWirelessDeviceLogOption::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_log_level.isSet()) {
        obj.insert(QString("LogLevel"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("Events"), ::OpenAPI::toJsonValue(m_events));
    }
    return obj;
}

OAIWirelessDeviceType OAIWirelessDeviceLogOption::getType() const {
    return m_type;
}
void OAIWirelessDeviceLogOption::setType(const OAIWirelessDeviceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWirelessDeviceLogOption::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWirelessDeviceLogOption::is_type_Valid() const{
    return m_type_isValid;
}

OAILogLevel OAIWirelessDeviceLogOption::getLogLevel() const {
    return m_log_level;
}
void OAIWirelessDeviceLogOption::setLogLevel(const OAILogLevel &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAIWirelessDeviceLogOption::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAIWirelessDeviceLogOption::is_log_level_Valid() const{
    return m_log_level_isValid;
}

QList<OAIWirelessDeviceEventLogOption> OAIWirelessDeviceLogOption::getEvents() const {
    return m_events;
}
void OAIWirelessDeviceLogOption::setEvents(const QList<OAIWirelessDeviceEventLogOption> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIWirelessDeviceLogOption::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWirelessDeviceLogOption::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIWirelessDeviceLogOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWirelessDeviceLogOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_log_level_isValid && true;
}

} // namespace OpenAPI
