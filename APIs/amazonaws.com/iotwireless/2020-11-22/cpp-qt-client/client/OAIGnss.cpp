/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGnss.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGnss::OAIGnss(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGnss::OAIGnss() {
    this->initializeModel();
}

OAIGnss::~OAIGnss() {}

void OAIGnss::initializeModel() {

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_capture_time_isSet = false;
    m_capture_time_isValid = false;

    m_capture_time_accuracy_isSet = false;
    m_capture_time_accuracy_isValid = false;

    m_assist_position_isSet = false;
    m_assist_position_isValid = false;

    m_assist_altitude_isSet = false;
    m_assist_altitude_isValid = false;

    m_use2_d_solver_isSet = false;
    m_use2_d_solver_isValid = false;
}

void OAIGnss::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGnss::fromJsonObject(QJsonObject json) {

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("Payload")]);
    m_payload_isSet = !json[QString("Payload")].isNull() && m_payload_isValid;

    m_capture_time_isValid = ::OpenAPI::fromJsonValue(m_capture_time, json[QString("CaptureTime")]);
    m_capture_time_isSet = !json[QString("CaptureTime")].isNull() && m_capture_time_isValid;

    m_capture_time_accuracy_isValid = ::OpenAPI::fromJsonValue(m_capture_time_accuracy, json[QString("CaptureTimeAccuracy")]);
    m_capture_time_accuracy_isSet = !json[QString("CaptureTimeAccuracy")].isNull() && m_capture_time_accuracy_isValid;

    m_assist_position_isValid = ::OpenAPI::fromJsonValue(m_assist_position, json[QString("AssistPosition")]);
    m_assist_position_isSet = !json[QString("AssistPosition")].isNull() && m_assist_position_isValid;

    m_assist_altitude_isValid = ::OpenAPI::fromJsonValue(m_assist_altitude, json[QString("AssistAltitude")]);
    m_assist_altitude_isSet = !json[QString("AssistAltitude")].isNull() && m_assist_altitude_isValid;

    m_use2_d_solver_isValid = ::OpenAPI::fromJsonValue(m_use2_d_solver, json[QString("Use2DSolver")]);
    m_use2_d_solver_isSet = !json[QString("Use2DSolver")].isNull() && m_use2_d_solver_isValid;
}

QString OAIGnss::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGnss::asJsonObject() const {
    QJsonObject obj;
    if (m_payload_isSet) {
        obj.insert(QString("Payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_capture_time_isSet) {
        obj.insert(QString("CaptureTime"), ::OpenAPI::toJsonValue(m_capture_time));
    }
    if (m_capture_time_accuracy_isSet) {
        obj.insert(QString("CaptureTimeAccuracy"), ::OpenAPI::toJsonValue(m_capture_time_accuracy));
    }
    if (m_assist_position.isSet()) {
        obj.insert(QString("AssistPosition"), ::OpenAPI::toJsonValue(m_assist_position));
    }
    if (m_assist_altitude_isSet) {
        obj.insert(QString("AssistAltitude"), ::OpenAPI::toJsonValue(m_assist_altitude));
    }
    if (m_use2_d_solver_isSet) {
        obj.insert(QString("Use2DSolver"), ::OpenAPI::toJsonValue(m_use2_d_solver));
    }
    return obj;
}

QString OAIGnss::getPayload() const {
    return m_payload;
}
void OAIGnss::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIGnss::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIGnss::is_payload_Valid() const{
    return m_payload_isValid;
}

float OAIGnss::getCaptureTime() const {
    return m_capture_time;
}
void OAIGnss::setCaptureTime(const float &capture_time) {
    m_capture_time = capture_time;
    m_capture_time_isSet = true;
}

bool OAIGnss::is_capture_time_Set() const{
    return m_capture_time_isSet;
}

bool OAIGnss::is_capture_time_Valid() const{
    return m_capture_time_isValid;
}

float OAIGnss::getCaptureTimeAccuracy() const {
    return m_capture_time_accuracy;
}
void OAIGnss::setCaptureTimeAccuracy(const float &capture_time_accuracy) {
    m_capture_time_accuracy = capture_time_accuracy;
    m_capture_time_accuracy_isSet = true;
}

bool OAIGnss::is_capture_time_accuracy_Set() const{
    return m_capture_time_accuracy_isSet;
}

bool OAIGnss::is_capture_time_accuracy_Valid() const{
    return m_capture_time_accuracy_isValid;
}

QList OAIGnss::getAssistPosition() const {
    return m_assist_position;
}
void OAIGnss::setAssistPosition(const QList &assist_position) {
    m_assist_position = assist_position;
    m_assist_position_isSet = true;
}

bool OAIGnss::is_assist_position_Set() const{
    return m_assist_position_isSet;
}

bool OAIGnss::is_assist_position_Valid() const{
    return m_assist_position_isValid;
}

float OAIGnss::getAssistAltitude() const {
    return m_assist_altitude;
}
void OAIGnss::setAssistAltitude(const float &assist_altitude) {
    m_assist_altitude = assist_altitude;
    m_assist_altitude_isSet = true;
}

bool OAIGnss::is_assist_altitude_Set() const{
    return m_assist_altitude_isSet;
}

bool OAIGnss::is_assist_altitude_Valid() const{
    return m_assist_altitude_isValid;
}

bool OAIGnss::getUse2DSolver() const {
    return m_use2_d_solver;
}
void OAIGnss::setUse2DSolver(const bool &use2_d_solver) {
    m_use2_d_solver = use2_d_solver;
    m_use2_d_solver_isSet = true;
}

bool OAIGnss::is_use2_d_solver_Set() const{
    return m_use2_d_solver_isSet;
}

bool OAIGnss::is_use2_d_solver_Valid() const{
    return m_use2_d_solver_isValid;
}

bool OAIGnss::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_time_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assist_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assist_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use2_d_solver_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGnss::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payload_isValid && true;
}

} // namespace OpenAPI
