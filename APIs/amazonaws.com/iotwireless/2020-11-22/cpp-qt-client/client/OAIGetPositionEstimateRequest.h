/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetPositionEstimateRequest.h
 *
 * 
 */

#ifndef OAIGetPositionEstimateRequest_H
#define OAIGetPositionEstimateRequest_H

#include <QJsonObject>

#include "OAIGetPositionEstimateRequest_CellTowers.h"
#include "OAIGetPositionEstimateRequest_Gnss.h"
#include "OAIGetPositionEstimateRequest_Ip.h"
#include <QDateTime>
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetPositionEstimateRequest_CellTowers;
class OAIGetPositionEstimateRequest_Ip;
class OAIGetPositionEstimateRequest_Gnss;

class OAIGetPositionEstimateRequest : public OAIObject {
public:
    OAIGetPositionEstimateRequest();
    OAIGetPositionEstimateRequest(QString json);
    ~OAIGetPositionEstimateRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getWiFiAccessPoints() const;
    void setWiFiAccessPoints(const QList &wi_fi_access_points);
    bool is_wi_fi_access_points_Set() const;
    bool is_wi_fi_access_points_Valid() const;

    OAIGetPositionEstimateRequest_CellTowers getCellTowers() const;
    void setCellTowers(const OAIGetPositionEstimateRequest_CellTowers &cell_towers);
    bool is_cell_towers_Set() const;
    bool is_cell_towers_Valid() const;

    OAIGetPositionEstimateRequest_Ip getIp() const;
    void setIp(const OAIGetPositionEstimateRequest_Ip &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    OAIGetPositionEstimateRequest_Gnss getGnss() const;
    void setGnss(const OAIGetPositionEstimateRequest_Gnss &gnss);
    bool is_gnss_Set() const;
    bool is_gnss_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_wi_fi_access_points;
    bool m_wi_fi_access_points_isSet;
    bool m_wi_fi_access_points_isValid;

    OAIGetPositionEstimateRequest_CellTowers m_cell_towers;
    bool m_cell_towers_isSet;
    bool m_cell_towers_isValid;

    OAIGetPositionEstimateRequest_Ip m_ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    OAIGetPositionEstimateRequest_Gnss m_gnss;
    bool m_gnss_isSet;
    bool m_gnss_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetPositionEstimateRequest)

#endif // OAIGetPositionEstimateRequest_H
