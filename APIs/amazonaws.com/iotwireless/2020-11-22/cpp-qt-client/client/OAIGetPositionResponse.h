/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetPositionResponse.h
 *
 * This operation is no longer supported.
 */

#ifndef OAIGetPositionResponse_H
#define OAIGetPositionResponse_H

#include <QJsonObject>

#include "OAIGetPositionResponse_Accuracy.h"
#include "OAIPositionSolverProvider.h"
#include "OAIPositionSolverType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetPositionResponse_Accuracy;

class OAIGetPositionResponse : public OAIObject {
public:
    OAIGetPositionResponse();
    OAIGetPositionResponse(QString json);
    ~OAIGetPositionResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getPosition() const;
    void setPosition(const QList &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    OAIGetPositionResponse_Accuracy getAccuracy() const;
    void setAccuracy(const OAIGetPositionResponse_Accuracy &accuracy);
    bool is_accuracy_Set() const;
    bool is_accuracy_Valid() const;

    OAIPositionSolverType getSolverType() const;
    void setSolverType(const OAIPositionSolverType &solver_type);
    bool is_solver_type_Set() const;
    bool is_solver_type_Valid() const;

    OAIPositionSolverProvider getSolverProvider() const;
    void setSolverProvider(const OAIPositionSolverProvider &solver_provider);
    bool is_solver_provider_Set() const;
    bool is_solver_provider_Valid() const;

    QString getSolverVersion() const;
    void setSolverVersion(const QString &solver_version);
    bool is_solver_version_Set() const;
    bool is_solver_version_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    OAIGetPositionResponse_Accuracy m_accuracy;
    bool m_accuracy_isSet;
    bool m_accuracy_isValid;

    OAIPositionSolverType m_solver_type;
    bool m_solver_type_isSet;
    bool m_solver_type_isValid;

    OAIPositionSolverProvider m_solver_provider;
    bool m_solver_provider_isSet;
    bool m_solver_provider_isValid;

    QString m_solver_version;
    bool m_solver_version_isSet;
    bool m_solver_version_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetPositionResponse)

#endif // OAIGetPositionResponse_H
