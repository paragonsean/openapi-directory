/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWirelessDevice_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWirelessDevice_request::OAIUpdateWirelessDevice_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWirelessDevice_request::OAIUpdateWirelessDevice_request() {
    this->initializeModel();
}

OAIUpdateWirelessDevice_request::~OAIUpdateWirelessDevice_request() {}

void OAIUpdateWirelessDevice_request::initializeModel() {

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_lo_ra_wan_isSet = false;
    m_lo_ra_wan_isValid = false;

    m_positioning_isSet = false;
    m_positioning_isValid = false;
}

void OAIUpdateWirelessDevice_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWirelessDevice_request::fromJsonObject(QJsonObject json) {

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("DestinationName")]);
    m_destination_name_isSet = !json[QString("DestinationName")].isNull() && m_destination_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_lo_ra_wan_isValid = ::OpenAPI::fromJsonValue(m_lo_ra_wan, json[QString("LoRaWAN")]);
    m_lo_ra_wan_isSet = !json[QString("LoRaWAN")].isNull() && m_lo_ra_wan_isValid;

    m_positioning_isValid = ::OpenAPI::fromJsonValue(m_positioning, json[QString("Positioning")]);
    m_positioning_isSet = !json[QString("Positioning")].isNull() && m_positioning_isValid;
}

QString OAIUpdateWirelessDevice_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWirelessDevice_request::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_name_isSet) {
        obj.insert(QString("DestinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_lo_ra_wan.isSet()) {
        obj.insert(QString("LoRaWAN"), ::OpenAPI::toJsonValue(m_lo_ra_wan));
    }
    if (m_positioning_isSet) {
        obj.insert(QString("Positioning"), ::OpenAPI::toJsonValue(m_positioning));
    }
    return obj;
}

QString OAIUpdateWirelessDevice_request::getDestinationName() const {
    return m_destination_name;
}
void OAIUpdateWirelessDevice_request::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIUpdateWirelessDevice_request::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIUpdateWirelessDevice_request::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIUpdateWirelessDevice_request::getName() const {
    return m_name;
}
void OAIUpdateWirelessDevice_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateWirelessDevice_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateWirelessDevice_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateWirelessDevice_request::getDescription() const {
    return m_description;
}
void OAIUpdateWirelessDevice_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateWirelessDevice_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateWirelessDevice_request::is_description_Valid() const{
    return m_description_isValid;
}

OAIUpdateWirelessDevice_request_LoRaWAN OAIUpdateWirelessDevice_request::getLoRaWan() const {
    return m_lo_ra_wan;
}
void OAIUpdateWirelessDevice_request::setLoRaWan(const OAIUpdateWirelessDevice_request_LoRaWAN &lo_ra_wan) {
    m_lo_ra_wan = lo_ra_wan;
    m_lo_ra_wan_isSet = true;
}

bool OAIUpdateWirelessDevice_request::is_lo_ra_wan_Set() const{
    return m_lo_ra_wan_isSet;
}

bool OAIUpdateWirelessDevice_request::is_lo_ra_wan_Valid() const{
    return m_lo_ra_wan_isValid;
}

QString OAIUpdateWirelessDevice_request::getPositioning() const {
    return m_positioning;
}
void OAIUpdateWirelessDevice_request::setPositioning(const QString &positioning) {
    m_positioning = positioning;
    m_positioning_isSet = true;
}

bool OAIUpdateWirelessDevice_request::is_positioning_Set() const{
    return m_positioning_isSet;
}

bool OAIUpdateWirelessDevice_request::is_positioning_Valid() const{
    return m_positioning_isValid;
}

bool OAIUpdateWirelessDevice_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_ra_wan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_positioning_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWirelessDevice_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
