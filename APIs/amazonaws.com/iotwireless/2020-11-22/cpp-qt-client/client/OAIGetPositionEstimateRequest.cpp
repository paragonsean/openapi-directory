/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPositionEstimateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPositionEstimateRequest::OAIGetPositionEstimateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPositionEstimateRequest::OAIGetPositionEstimateRequest() {
    this->initializeModel();
}

OAIGetPositionEstimateRequest::~OAIGetPositionEstimateRequest() {}

void OAIGetPositionEstimateRequest::initializeModel() {

    m_wi_fi_access_points_isSet = false;
    m_wi_fi_access_points_isValid = false;

    m_cell_towers_isSet = false;
    m_cell_towers_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_gnss_isSet = false;
    m_gnss_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIGetPositionEstimateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPositionEstimateRequest::fromJsonObject(QJsonObject json) {

    m_wi_fi_access_points_isValid = ::OpenAPI::fromJsonValue(m_wi_fi_access_points, json[QString("WiFiAccessPoints")]);
    m_wi_fi_access_points_isSet = !json[QString("WiFiAccessPoints")].isNull() && m_wi_fi_access_points_isValid;

    m_cell_towers_isValid = ::OpenAPI::fromJsonValue(m_cell_towers, json[QString("CellTowers")]);
    m_cell_towers_isSet = !json[QString("CellTowers")].isNull() && m_cell_towers_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("Ip")]);
    m_ip_isSet = !json[QString("Ip")].isNull() && m_ip_isValid;

    m_gnss_isValid = ::OpenAPI::fromJsonValue(m_gnss, json[QString("Gnss")]);
    m_gnss_isSet = !json[QString("Gnss")].isNull() && m_gnss_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIGetPositionEstimateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPositionEstimateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_wi_fi_access_points.isSet()) {
        obj.insert(QString("WiFiAccessPoints"), ::OpenAPI::toJsonValue(m_wi_fi_access_points));
    }
    if (m_cell_towers.isSet()) {
        obj.insert(QString("CellTowers"), ::OpenAPI::toJsonValue(m_cell_towers));
    }
    if (m_ip.isSet()) {
        obj.insert(QString("Ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_gnss.isSet()) {
        obj.insert(QString("Gnss"), ::OpenAPI::toJsonValue(m_gnss));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QList OAIGetPositionEstimateRequest::getWiFiAccessPoints() const {
    return m_wi_fi_access_points;
}
void OAIGetPositionEstimateRequest::setWiFiAccessPoints(const QList &wi_fi_access_points) {
    m_wi_fi_access_points = wi_fi_access_points;
    m_wi_fi_access_points_isSet = true;
}

bool OAIGetPositionEstimateRequest::is_wi_fi_access_points_Set() const{
    return m_wi_fi_access_points_isSet;
}

bool OAIGetPositionEstimateRequest::is_wi_fi_access_points_Valid() const{
    return m_wi_fi_access_points_isValid;
}

OAIGetPositionEstimateRequest_CellTowers OAIGetPositionEstimateRequest::getCellTowers() const {
    return m_cell_towers;
}
void OAIGetPositionEstimateRequest::setCellTowers(const OAIGetPositionEstimateRequest_CellTowers &cell_towers) {
    m_cell_towers = cell_towers;
    m_cell_towers_isSet = true;
}

bool OAIGetPositionEstimateRequest::is_cell_towers_Set() const{
    return m_cell_towers_isSet;
}

bool OAIGetPositionEstimateRequest::is_cell_towers_Valid() const{
    return m_cell_towers_isValid;
}

OAIGetPositionEstimateRequest_Ip OAIGetPositionEstimateRequest::getIp() const {
    return m_ip;
}
void OAIGetPositionEstimateRequest::setIp(const OAIGetPositionEstimateRequest_Ip &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIGetPositionEstimateRequest::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIGetPositionEstimateRequest::is_ip_Valid() const{
    return m_ip_isValid;
}

OAIGetPositionEstimateRequest_Gnss OAIGetPositionEstimateRequest::getGnss() const {
    return m_gnss;
}
void OAIGetPositionEstimateRequest::setGnss(const OAIGetPositionEstimateRequest_Gnss &gnss) {
    m_gnss = gnss;
    m_gnss_isSet = true;
}

bool OAIGetPositionEstimateRequest::is_gnss_Set() const{
    return m_gnss_isSet;
}

bool OAIGetPositionEstimateRequest::is_gnss_Valid() const{
    return m_gnss_isValid;
}

QDateTime OAIGetPositionEstimateRequest::getTimestamp() const {
    return m_timestamp;
}
void OAIGetPositionEstimateRequest::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIGetPositionEstimateRequest::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIGetPositionEstimateRequest::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIGetPositionEstimateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_wi_fi_access_points.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_towers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gnss.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPositionEstimateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
