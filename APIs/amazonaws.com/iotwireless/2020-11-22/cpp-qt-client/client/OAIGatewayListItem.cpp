/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayListItem::OAIGatewayListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayListItem::OAIGatewayListItem() {
    this->initializeModel();
}

OAIGatewayListItem::~OAIGatewayListItem() {}

void OAIGatewayListItem::initializeModel() {

    m_gateway_id_isSet = false;
    m_gateway_id_isValid = false;

    m_downlink_frequency_isSet = false;
    m_downlink_frequency_isValid = false;
}

void OAIGatewayListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewayListItem::fromJsonObject(QJsonObject json) {

    m_gateway_id_isValid = ::OpenAPI::fromJsonValue(m_gateway_id, json[QString("GatewayId")]);
    m_gateway_id_isSet = !json[QString("GatewayId")].isNull() && m_gateway_id_isValid;

    m_downlink_frequency_isValid = ::OpenAPI::fromJsonValue(m_downlink_frequency, json[QString("DownlinkFrequency")]);
    m_downlink_frequency_isSet = !json[QString("DownlinkFrequency")].isNull() && m_downlink_frequency_isValid;
}

QString OAIGatewayListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewayListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_id_isSet) {
        obj.insert(QString("GatewayId"), ::OpenAPI::toJsonValue(m_gateway_id));
    }
    if (m_downlink_frequency_isSet) {
        obj.insert(QString("DownlinkFrequency"), ::OpenAPI::toJsonValue(m_downlink_frequency));
    }
    return obj;
}

QString OAIGatewayListItem::getGatewayId() const {
    return m_gateway_id;
}
void OAIGatewayListItem::setGatewayId(const QString &gateway_id) {
    m_gateway_id = gateway_id;
    m_gateway_id_isSet = true;
}

bool OAIGatewayListItem::is_gateway_id_Set() const{
    return m_gateway_id_isSet;
}

bool OAIGatewayListItem::is_gateway_id_Valid() const{
    return m_gateway_id_isValid;
}

qint32 OAIGatewayListItem::getDownlinkFrequency() const {
    return m_downlink_frequency;
}
void OAIGatewayListItem::setDownlinkFrequency(const qint32 &downlink_frequency) {
    m_downlink_frequency = downlink_frequency;
    m_downlink_frequency_isSet = true;
}

bool OAIGatewayListItem::is_downlink_frequency_Set() const{
    return m_downlink_frequency_isSet;
}

bool OAIGatewayListItem::is_downlink_frequency_Valid() const{
    return m_downlink_frequency_isValid;
}

bool OAIGatewayListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downlink_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewayListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gateway_id_isValid && m_downlink_frequency_isValid && true;
}

} // namespace OpenAPI
