/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICdmaObj_CdmaLocalId.h
 *
 * 
 */

#ifndef OAICdmaObj_CdmaLocalId_H
#define OAICdmaObj_CdmaLocalId_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICdmaObj_CdmaLocalId : public OAIObject {
public:
    OAICdmaObj_CdmaLocalId();
    OAICdmaObj_CdmaLocalId(QString json);
    ~OAICdmaObj_CdmaLocalId() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getPnOffset() const;
    void setPnOffset(const qint32 &pn_offset);
    bool is_pn_offset_Set() const;
    bool is_pn_offset_Valid() const;

    qint32 getCdmaChannel() const;
    void setCdmaChannel(const qint32 &cdma_channel);
    bool is_cdma_channel_Set() const;
    bool is_cdma_channel_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_pn_offset;
    bool m_pn_offset_isSet;
    bool m_pn_offset_isValid;

    qint32 m_cdma_channel;
    bool m_cdma_channel_isSet;
    bool m_cdma_channel_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICdmaObj_CdmaLocalId)

#endif // OAICdmaObj_CdmaLocalId_H
