/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationConfig::OAIApplicationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationConfig::OAIApplicationConfig() {
    this->initializeModel();
}

OAIApplicationConfig::~OAIApplicationConfig() {}

void OAIApplicationConfig::initializeModel() {

    m_f_port_isSet = false;
    m_f_port_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;
}

void OAIApplicationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationConfig::fromJsonObject(QJsonObject json) {

    m_f_port_isValid = ::OpenAPI::fromJsonValue(m_f_port, json[QString("FPort")]);
    m_f_port_isSet = !json[QString("FPort")].isNull() && m_f_port_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("DestinationName")]);
    m_destination_name_isSet = !json[QString("DestinationName")].isNull() && m_destination_name_isValid;
}

QString OAIApplicationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_f_port_isSet) {
        obj.insert(QString("FPort"), ::OpenAPI::toJsonValue(m_f_port));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("DestinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    return obj;
}

qint32 OAIApplicationConfig::getFPort() const {
    return m_f_port;
}
void OAIApplicationConfig::setFPort(const qint32 &f_port) {
    m_f_port = f_port;
    m_f_port_isSet = true;
}

bool OAIApplicationConfig::is_f_port_Set() const{
    return m_f_port_isSet;
}

bool OAIApplicationConfig::is_f_port_Valid() const{
    return m_f_port_isValid;
}

OAIApplicationConfigType OAIApplicationConfig::getType() const {
    return m_type;
}
void OAIApplicationConfig::setType(const OAIApplicationConfigType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApplicationConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApplicationConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIApplicationConfig::getDestinationName() const {
    return m_destination_name;
}
void OAIApplicationConfig::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIApplicationConfig::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIApplicationConfig::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

bool OAIApplicationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_f_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
