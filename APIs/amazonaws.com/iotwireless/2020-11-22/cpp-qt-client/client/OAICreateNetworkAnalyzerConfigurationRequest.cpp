/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetworkAnalyzerConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetworkAnalyzerConfigurationRequest::OAICreateNetworkAnalyzerConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetworkAnalyzerConfigurationRequest::OAICreateNetworkAnalyzerConfigurationRequest() {
    this->initializeModel();
}

OAICreateNetworkAnalyzerConfigurationRequest::~OAICreateNetworkAnalyzerConfigurationRequest() {}

void OAICreateNetworkAnalyzerConfigurationRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_trace_content_isSet = false;
    m_trace_content_isValid = false;

    m_wireless_devices_isSet = false;
    m_wireless_devices_isValid = false;

    m_wireless_gateways_isSet = false;
    m_wireless_gateways_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_multicast_groups_isSet = false;
    m_multicast_groups_isValid = false;
}

void OAICreateNetworkAnalyzerConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetworkAnalyzerConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_trace_content_isValid = ::OpenAPI::fromJsonValue(m_trace_content, json[QString("TraceContent")]);
    m_trace_content_isSet = !json[QString("TraceContent")].isNull() && m_trace_content_isValid;

    m_wireless_devices_isValid = ::OpenAPI::fromJsonValue(m_wireless_devices, json[QString("WirelessDevices")]);
    m_wireless_devices_isSet = !json[QString("WirelessDevices")].isNull() && m_wireless_devices_isValid;

    m_wireless_gateways_isValid = ::OpenAPI::fromJsonValue(m_wireless_gateways, json[QString("WirelessGateways")]);
    m_wireless_gateways_isSet = !json[QString("WirelessGateways")].isNull() && m_wireless_gateways_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_multicast_groups_isValid = ::OpenAPI::fromJsonValue(m_multicast_groups, json[QString("MulticastGroups")]);
    m_multicast_groups_isSet = !json[QString("MulticastGroups")].isNull() && m_multicast_groups_isValid;
}

QString OAICreateNetworkAnalyzerConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetworkAnalyzerConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_trace_content.isSet()) {
        obj.insert(QString("TraceContent"), ::OpenAPI::toJsonValue(m_trace_content));
    }
    if (m_wireless_devices.isSet()) {
        obj.insert(QString("WirelessDevices"), ::OpenAPI::toJsonValue(m_wireless_devices));
    }
    if (m_wireless_gateways.isSet()) {
        obj.insert(QString("WirelessGateways"), ::OpenAPI::toJsonValue(m_wireless_gateways));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_multicast_groups.isSet()) {
        obj.insert(QString("MulticastGroups"), ::OpenAPI::toJsonValue(m_multicast_groups));
    }
    return obj;
}

QString OAICreateNetworkAnalyzerConfigurationRequest::getName() const {
    return m_name;
}
void OAICreateNetworkAnalyzerConfigurationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAITraceContent OAICreateNetworkAnalyzerConfigurationRequest::getTraceContent() const {
    return m_trace_content;
}
void OAICreateNetworkAnalyzerConfigurationRequest::setTraceContent(const OAITraceContent &trace_content) {
    m_trace_content = trace_content;
    m_trace_content_isSet = true;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_trace_content_Set() const{
    return m_trace_content_isSet;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_trace_content_Valid() const{
    return m_trace_content_isValid;
}

QList OAICreateNetworkAnalyzerConfigurationRequest::getWirelessDevices() const {
    return m_wireless_devices;
}
void OAICreateNetworkAnalyzerConfigurationRequest::setWirelessDevices(const QList &wireless_devices) {
    m_wireless_devices = wireless_devices;
    m_wireless_devices_isSet = true;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_wireless_devices_Set() const{
    return m_wireless_devices_isSet;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_wireless_devices_Valid() const{
    return m_wireless_devices_isValid;
}

QList OAICreateNetworkAnalyzerConfigurationRequest::getWirelessGateways() const {
    return m_wireless_gateways;
}
void OAICreateNetworkAnalyzerConfigurationRequest::setWirelessGateways(const QList &wireless_gateways) {
    m_wireless_gateways = wireless_gateways;
    m_wireless_gateways_isSet = true;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_wireless_gateways_Set() const{
    return m_wireless_gateways_isSet;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_wireless_gateways_Valid() const{
    return m_wireless_gateways_isValid;
}

QString OAICreateNetworkAnalyzerConfigurationRequest::getDescription() const {
    return m_description;
}
void OAICreateNetworkAnalyzerConfigurationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAITag> OAICreateNetworkAnalyzerConfigurationRequest::getTags() const {
    return m_tags;
}
void OAICreateNetworkAnalyzerConfigurationRequest::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateNetworkAnalyzerConfigurationRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateNetworkAnalyzerConfigurationRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList OAICreateNetworkAnalyzerConfigurationRequest::getMulticastGroups() const {
    return m_multicast_groups;
}
void OAICreateNetworkAnalyzerConfigurationRequest::setMulticastGroups(const QList &multicast_groups) {
    m_multicast_groups = multicast_groups;
    m_multicast_groups_isSet = true;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_multicast_groups_Set() const{
    return m_multicast_groups_isSet;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::is_multicast_groups_Valid() const{
    return m_multicast_groups_isValid;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_devices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wireless_gateways.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multicast_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetworkAnalyzerConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
