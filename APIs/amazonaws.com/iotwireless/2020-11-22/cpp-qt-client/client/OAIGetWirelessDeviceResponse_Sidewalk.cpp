/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetWirelessDeviceResponse_Sidewalk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetWirelessDeviceResponse_Sidewalk::OAIGetWirelessDeviceResponse_Sidewalk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetWirelessDeviceResponse_Sidewalk::OAIGetWirelessDeviceResponse_Sidewalk() {
    this->initializeModel();
}

OAIGetWirelessDeviceResponse_Sidewalk::~OAIGetWirelessDeviceResponse_Sidewalk() {}

void OAIGetWirelessDeviceResponse_Sidewalk::initializeModel() {

    m_amazon_id_isSet = false;
    m_amazon_id_isValid = false;

    m_sidewalk_id_isSet = false;
    m_sidewalk_id_isValid = false;

    m_sidewalk_manufacturing_sn_isSet = false;
    m_sidewalk_manufacturing_sn_isValid = false;

    m_device_certificates_isSet = false;
    m_device_certificates_isValid = false;

    m_private_keys_isSet = false;
    m_private_keys_isValid = false;

    m_device_profile_id_isSet = false;
    m_device_profile_id_isValid = false;

    m_certificate_id_isSet = false;
    m_certificate_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIGetWirelessDeviceResponse_Sidewalk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetWirelessDeviceResponse_Sidewalk::fromJsonObject(QJsonObject json) {

    m_amazon_id_isValid = ::OpenAPI::fromJsonValue(m_amazon_id, json[QString("AmazonId")]);
    m_amazon_id_isSet = !json[QString("AmazonId")].isNull() && m_amazon_id_isValid;

    m_sidewalk_id_isValid = ::OpenAPI::fromJsonValue(m_sidewalk_id, json[QString("SidewalkId")]);
    m_sidewalk_id_isSet = !json[QString("SidewalkId")].isNull() && m_sidewalk_id_isValid;

    m_sidewalk_manufacturing_sn_isValid = ::OpenAPI::fromJsonValue(m_sidewalk_manufacturing_sn, json[QString("SidewalkManufacturingSn")]);
    m_sidewalk_manufacturing_sn_isSet = !json[QString("SidewalkManufacturingSn")].isNull() && m_sidewalk_manufacturing_sn_isValid;

    m_device_certificates_isValid = ::OpenAPI::fromJsonValue(m_device_certificates, json[QString("DeviceCertificates")]);
    m_device_certificates_isSet = !json[QString("DeviceCertificates")].isNull() && m_device_certificates_isValid;

    m_private_keys_isValid = ::OpenAPI::fromJsonValue(m_private_keys, json[QString("PrivateKeys")]);
    m_private_keys_isSet = !json[QString("PrivateKeys")].isNull() && m_private_keys_isValid;

    m_device_profile_id_isValid = ::OpenAPI::fromJsonValue(m_device_profile_id, json[QString("DeviceProfileId")]);
    m_device_profile_id_isSet = !json[QString("DeviceProfileId")].isNull() && m_device_profile_id_isValid;

    m_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_id, json[QString("CertificateId")]);
    m_certificate_id_isSet = !json[QString("CertificateId")].isNull() && m_certificate_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIGetWirelessDeviceResponse_Sidewalk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetWirelessDeviceResponse_Sidewalk::asJsonObject() const {
    QJsonObject obj;
    if (m_amazon_id_isSet) {
        obj.insert(QString("AmazonId"), ::OpenAPI::toJsonValue(m_amazon_id));
    }
    if (m_sidewalk_id_isSet) {
        obj.insert(QString("SidewalkId"), ::OpenAPI::toJsonValue(m_sidewalk_id));
    }
    if (m_sidewalk_manufacturing_sn_isSet) {
        obj.insert(QString("SidewalkManufacturingSn"), ::OpenAPI::toJsonValue(m_sidewalk_manufacturing_sn));
    }
    if (m_device_certificates.isSet()) {
        obj.insert(QString("DeviceCertificates"), ::OpenAPI::toJsonValue(m_device_certificates));
    }
    if (m_private_keys.isSet()) {
        obj.insert(QString("PrivateKeys"), ::OpenAPI::toJsonValue(m_private_keys));
    }
    if (m_device_profile_id_isSet) {
        obj.insert(QString("DeviceProfileId"), ::OpenAPI::toJsonValue(m_device_profile_id));
    }
    if (m_certificate_id_isSet) {
        obj.insert(QString("CertificateId"), ::OpenAPI::toJsonValue(m_certificate_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIGetWirelessDeviceResponse_Sidewalk::getAmazonId() const {
    return m_amazon_id;
}
void OAIGetWirelessDeviceResponse_Sidewalk::setAmazonId(const QString &amazon_id) {
    m_amazon_id = amazon_id;
    m_amazon_id_isSet = true;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_amazon_id_Set() const{
    return m_amazon_id_isSet;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_amazon_id_Valid() const{
    return m_amazon_id_isValid;
}

QString OAIGetWirelessDeviceResponse_Sidewalk::getSidewalkId() const {
    return m_sidewalk_id;
}
void OAIGetWirelessDeviceResponse_Sidewalk::setSidewalkId(const QString &sidewalk_id) {
    m_sidewalk_id = sidewalk_id;
    m_sidewalk_id_isSet = true;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_sidewalk_id_Set() const{
    return m_sidewalk_id_isSet;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_sidewalk_id_Valid() const{
    return m_sidewalk_id_isValid;
}

QString OAIGetWirelessDeviceResponse_Sidewalk::getSidewalkManufacturingSn() const {
    return m_sidewalk_manufacturing_sn;
}
void OAIGetWirelessDeviceResponse_Sidewalk::setSidewalkManufacturingSn(const QString &sidewalk_manufacturing_sn) {
    m_sidewalk_manufacturing_sn = sidewalk_manufacturing_sn;
    m_sidewalk_manufacturing_sn_isSet = true;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_sidewalk_manufacturing_sn_Set() const{
    return m_sidewalk_manufacturing_sn_isSet;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_sidewalk_manufacturing_sn_Valid() const{
    return m_sidewalk_manufacturing_sn_isValid;
}

QList OAIGetWirelessDeviceResponse_Sidewalk::getDeviceCertificates() const {
    return m_device_certificates;
}
void OAIGetWirelessDeviceResponse_Sidewalk::setDeviceCertificates(const QList &device_certificates) {
    m_device_certificates = device_certificates;
    m_device_certificates_isSet = true;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_device_certificates_Set() const{
    return m_device_certificates_isSet;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_device_certificates_Valid() const{
    return m_device_certificates_isValid;
}

QList OAIGetWirelessDeviceResponse_Sidewalk::getPrivateKeys() const {
    return m_private_keys;
}
void OAIGetWirelessDeviceResponse_Sidewalk::setPrivateKeys(const QList &private_keys) {
    m_private_keys = private_keys;
    m_private_keys_isSet = true;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_private_keys_Set() const{
    return m_private_keys_isSet;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_private_keys_Valid() const{
    return m_private_keys_isValid;
}

QString OAIGetWirelessDeviceResponse_Sidewalk::getDeviceProfileId() const {
    return m_device_profile_id;
}
void OAIGetWirelessDeviceResponse_Sidewalk::setDeviceProfileId(const QString &device_profile_id) {
    m_device_profile_id = device_profile_id;
    m_device_profile_id_isSet = true;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_device_profile_id_Set() const{
    return m_device_profile_id_isSet;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_device_profile_id_Valid() const{
    return m_device_profile_id_isValid;
}

QString OAIGetWirelessDeviceResponse_Sidewalk::getCertificateId() const {
    return m_certificate_id;
}
void OAIGetWirelessDeviceResponse_Sidewalk::setCertificateId(const QString &certificate_id) {
    m_certificate_id = certificate_id;
    m_certificate_id_isSet = true;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_certificate_id_Set() const{
    return m_certificate_id_isSet;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_certificate_id_Valid() const{
    return m_certificate_id_isValid;
}

OAIWirelessDeviceSidewalkStatus OAIGetWirelessDeviceResponse_Sidewalk::getStatus() const {
    return m_status;
}
void OAIGetWirelessDeviceResponse_Sidewalk::setStatus(const OAIWirelessDeviceSidewalkStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amazon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sidewalk_manufacturing_sn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_certificates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetWirelessDeviceResponse_Sidewalk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
