/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWirelessGatewayTaskDefinition_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWirelessGatewayTaskDefinition_request::OAICreateWirelessGatewayTaskDefinition_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWirelessGatewayTaskDefinition_request::OAICreateWirelessGatewayTaskDefinition_request() {
    this->initializeModel();
}

OAICreateWirelessGatewayTaskDefinition_request::~OAICreateWirelessGatewayTaskDefinition_request() {}

void OAICreateWirelessGatewayTaskDefinition_request::initializeModel() {

    m_auto_create_tasks_isSet = false;
    m_auto_create_tasks_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateWirelessGatewayTaskDefinition_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWirelessGatewayTaskDefinition_request::fromJsonObject(QJsonObject json) {

    m_auto_create_tasks_isValid = ::OpenAPI::fromJsonValue(m_auto_create_tasks, json[QString("AutoCreateTasks")]);
    m_auto_create_tasks_isSet = !json[QString("AutoCreateTasks")].isNull() && m_auto_create_tasks_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("Update")]);
    m_update_isSet = !json[QString("Update")].isNull() && m_update_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateWirelessGatewayTaskDefinition_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWirelessGatewayTaskDefinition_request::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_create_tasks_isSet) {
        obj.insert(QString("AutoCreateTasks"), ::OpenAPI::toJsonValue(m_auto_create_tasks));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update.isSet()) {
        obj.insert(QString("Update"), ::OpenAPI::toJsonValue(m_update));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAICreateWirelessGatewayTaskDefinition_request::isAutoCreateTasks() const {
    return m_auto_create_tasks;
}
void OAICreateWirelessGatewayTaskDefinition_request::setAutoCreateTasks(const bool &auto_create_tasks) {
    m_auto_create_tasks = auto_create_tasks;
    m_auto_create_tasks_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_auto_create_tasks_Set() const{
    return m_auto_create_tasks_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_auto_create_tasks_Valid() const{
    return m_auto_create_tasks_isValid;
}

QString OAICreateWirelessGatewayTaskDefinition_request::getName() const {
    return m_name;
}
void OAICreateWirelessGatewayTaskDefinition_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateWirelessGatewayTaskDefinition_request_Update OAICreateWirelessGatewayTaskDefinition_request::getUpdate() const {
    return m_update;
}
void OAICreateWirelessGatewayTaskDefinition_request::setUpdate(const OAICreateWirelessGatewayTaskDefinition_request_Update &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_update_Set() const{
    return m_update_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_update_Valid() const{
    return m_update_isValid;
}

QString OAICreateWirelessGatewayTaskDefinition_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateWirelessGatewayTaskDefinition_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList<OAITag> OAICreateWirelessGatewayTaskDefinition_request::getTags() const {
    return m_tags;
}
void OAICreateWirelessGatewayTaskDefinition_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWirelessGatewayTaskDefinition_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateWirelessGatewayTaskDefinition_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_create_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWirelessGatewayTaskDefinition_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_create_tasks_isValid && true;
}

} // namespace OpenAPI
