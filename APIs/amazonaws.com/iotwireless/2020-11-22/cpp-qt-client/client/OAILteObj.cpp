/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILteObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILteObj::OAILteObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILteObj::OAILteObj() {
    this->initializeModel();
}

OAILteObj::~OAILteObj() {}

void OAILteObj::initializeModel() {

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_mnc_isSet = false;
    m_mnc_isValid = false;

    m_eutran_cid_isSet = false;
    m_eutran_cid_isValid = false;

    m_tac_isSet = false;
    m_tac_isValid = false;

    m_lte_local_id_isSet = false;
    m_lte_local_id_isValid = false;

    m_lte_timing_advance_isSet = false;
    m_lte_timing_advance_isValid = false;

    m_rsrp_isSet = false;
    m_rsrp_isValid = false;

    m_rsrq_isSet = false;
    m_rsrq_isValid = false;

    m_nr_capable_isSet = false;
    m_nr_capable_isValid = false;

    m_lte_nmr_isSet = false;
    m_lte_nmr_isValid = false;
}

void OAILteObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILteObj::fromJsonObject(QJsonObject json) {

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("Mcc")]);
    m_mcc_isSet = !json[QString("Mcc")].isNull() && m_mcc_isValid;

    m_mnc_isValid = ::OpenAPI::fromJsonValue(m_mnc, json[QString("Mnc")]);
    m_mnc_isSet = !json[QString("Mnc")].isNull() && m_mnc_isValid;

    m_eutran_cid_isValid = ::OpenAPI::fromJsonValue(m_eutran_cid, json[QString("EutranCid")]);
    m_eutran_cid_isSet = !json[QString("EutranCid")].isNull() && m_eutran_cid_isValid;

    m_tac_isValid = ::OpenAPI::fromJsonValue(m_tac, json[QString("Tac")]);
    m_tac_isSet = !json[QString("Tac")].isNull() && m_tac_isValid;

    m_lte_local_id_isValid = ::OpenAPI::fromJsonValue(m_lte_local_id, json[QString("LteLocalId")]);
    m_lte_local_id_isSet = !json[QString("LteLocalId")].isNull() && m_lte_local_id_isValid;

    m_lte_timing_advance_isValid = ::OpenAPI::fromJsonValue(m_lte_timing_advance, json[QString("LteTimingAdvance")]);
    m_lte_timing_advance_isSet = !json[QString("LteTimingAdvance")].isNull() && m_lte_timing_advance_isValid;

    m_rsrp_isValid = ::OpenAPI::fromJsonValue(m_rsrp, json[QString("Rsrp")]);
    m_rsrp_isSet = !json[QString("Rsrp")].isNull() && m_rsrp_isValid;

    m_rsrq_isValid = ::OpenAPI::fromJsonValue(m_rsrq, json[QString("Rsrq")]);
    m_rsrq_isSet = !json[QString("Rsrq")].isNull() && m_rsrq_isValid;

    m_nr_capable_isValid = ::OpenAPI::fromJsonValue(m_nr_capable, json[QString("NrCapable")]);
    m_nr_capable_isSet = !json[QString("NrCapable")].isNull() && m_nr_capable_isValid;

    m_lte_nmr_isValid = ::OpenAPI::fromJsonValue(m_lte_nmr, json[QString("LteNmr")]);
    m_lte_nmr_isSet = !json[QString("LteNmr")].isNull() && m_lte_nmr_isValid;
}

QString OAILteObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILteObj::asJsonObject() const {
    QJsonObject obj;
    if (m_mcc_isSet) {
        obj.insert(QString("Mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_mnc_isSet) {
        obj.insert(QString("Mnc"), ::OpenAPI::toJsonValue(m_mnc));
    }
    if (m_eutran_cid_isSet) {
        obj.insert(QString("EutranCid"), ::OpenAPI::toJsonValue(m_eutran_cid));
    }
    if (m_tac_isSet) {
        obj.insert(QString("Tac"), ::OpenAPI::toJsonValue(m_tac));
    }
    if (m_lte_local_id.isSet()) {
        obj.insert(QString("LteLocalId"), ::OpenAPI::toJsonValue(m_lte_local_id));
    }
    if (m_lte_timing_advance_isSet) {
        obj.insert(QString("LteTimingAdvance"), ::OpenAPI::toJsonValue(m_lte_timing_advance));
    }
    if (m_rsrp_isSet) {
        obj.insert(QString("Rsrp"), ::OpenAPI::toJsonValue(m_rsrp));
    }
    if (m_rsrq_isSet) {
        obj.insert(QString("Rsrq"), ::OpenAPI::toJsonValue(m_rsrq));
    }
    if (m_nr_capable_isSet) {
        obj.insert(QString("NrCapable"), ::OpenAPI::toJsonValue(m_nr_capable));
    }
    if (m_lte_nmr.isSet()) {
        obj.insert(QString("LteNmr"), ::OpenAPI::toJsonValue(m_lte_nmr));
    }
    return obj;
}

qint32 OAILteObj::getMcc() const {
    return m_mcc;
}
void OAILteObj::setMcc(const qint32 &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAILteObj::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAILteObj::is_mcc_Valid() const{
    return m_mcc_isValid;
}

qint32 OAILteObj::getMnc() const {
    return m_mnc;
}
void OAILteObj::setMnc(const qint32 &mnc) {
    m_mnc = mnc;
    m_mnc_isSet = true;
}

bool OAILteObj::is_mnc_Set() const{
    return m_mnc_isSet;
}

bool OAILteObj::is_mnc_Valid() const{
    return m_mnc_isValid;
}

qint32 OAILteObj::getEutranCid() const {
    return m_eutran_cid;
}
void OAILteObj::setEutranCid(const qint32 &eutran_cid) {
    m_eutran_cid = eutran_cid;
    m_eutran_cid_isSet = true;
}

bool OAILteObj::is_eutran_cid_Set() const{
    return m_eutran_cid_isSet;
}

bool OAILteObj::is_eutran_cid_Valid() const{
    return m_eutran_cid_isValid;
}

qint32 OAILteObj::getTac() const {
    return m_tac;
}
void OAILteObj::setTac(const qint32 &tac) {
    m_tac = tac;
    m_tac_isSet = true;
}

bool OAILteObj::is_tac_Set() const{
    return m_tac_isSet;
}

bool OAILteObj::is_tac_Valid() const{
    return m_tac_isValid;
}

OAILteObj_LteLocalId OAILteObj::getLteLocalId() const {
    return m_lte_local_id;
}
void OAILteObj::setLteLocalId(const OAILteObj_LteLocalId &lte_local_id) {
    m_lte_local_id = lte_local_id;
    m_lte_local_id_isSet = true;
}

bool OAILteObj::is_lte_local_id_Set() const{
    return m_lte_local_id_isSet;
}

bool OAILteObj::is_lte_local_id_Valid() const{
    return m_lte_local_id_isValid;
}

qint32 OAILteObj::getLteTimingAdvance() const {
    return m_lte_timing_advance;
}
void OAILteObj::setLteTimingAdvance(const qint32 &lte_timing_advance) {
    m_lte_timing_advance = lte_timing_advance;
    m_lte_timing_advance_isSet = true;
}

bool OAILteObj::is_lte_timing_advance_Set() const{
    return m_lte_timing_advance_isSet;
}

bool OAILteObj::is_lte_timing_advance_Valid() const{
    return m_lte_timing_advance_isValid;
}

qint32 OAILteObj::getRsrp() const {
    return m_rsrp;
}
void OAILteObj::setRsrp(const qint32 &rsrp) {
    m_rsrp = rsrp;
    m_rsrp_isSet = true;
}

bool OAILteObj::is_rsrp_Set() const{
    return m_rsrp_isSet;
}

bool OAILteObj::is_rsrp_Valid() const{
    return m_rsrp_isValid;
}

float OAILteObj::getRsrq() const {
    return m_rsrq;
}
void OAILteObj::setRsrq(const float &rsrq) {
    m_rsrq = rsrq;
    m_rsrq_isSet = true;
}

bool OAILteObj::is_rsrq_Set() const{
    return m_rsrq_isSet;
}

bool OAILteObj::is_rsrq_Valid() const{
    return m_rsrq_isValid;
}

bool OAILteObj::getNrCapable() const {
    return m_nr_capable;
}
void OAILteObj::setNrCapable(const bool &nr_capable) {
    m_nr_capable = nr_capable;
    m_nr_capable_isSet = true;
}

bool OAILteObj::is_nr_capable_Set() const{
    return m_nr_capable_isSet;
}

bool OAILteObj::is_nr_capable_Valid() const{
    return m_nr_capable_isValid;
}

QList OAILteObj::getLteNmr() const {
    return m_lte_nmr;
}
void OAILteObj::setLteNmr(const QList &lte_nmr) {
    m_lte_nmr = lte_nmr;
    m_lte_nmr_isSet = true;
}

bool OAILteObj::is_lte_nmr_Set() const{
    return m_lte_nmr_isSet;
}

bool OAILteObj::is_lte_nmr_Valid() const{
    return m_lte_nmr_isValid;
}

bool OAILteObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mnc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eutran_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte_local_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte_timing_advance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsrq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nr_capable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lte_nmr.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILteObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mcc_isValid && m_mnc_isValid && m_eutran_cid_isValid && true;
}

} // namespace OpenAPI
