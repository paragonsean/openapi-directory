/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDestinationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDestinationsResponse::OAIListDestinationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDestinationsResponse::OAIListDestinationsResponse() {
    this->initializeModel();
}

OAIListDestinationsResponse::~OAIListDestinationsResponse() {}

void OAIListDestinationsResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_destination_list_isSet = false;
    m_destination_list_isValid = false;
}

void OAIListDestinationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDestinationsResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_destination_list_isValid = ::OpenAPI::fromJsonValue(m_destination_list, json[QString("DestinationList")]);
    m_destination_list_isSet = !json[QString("DestinationList")].isNull() && m_destination_list_isValid;
}

QString OAIListDestinationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDestinationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_destination_list.isSet()) {
        obj.insert(QString("DestinationList"), ::OpenAPI::toJsonValue(m_destination_list));
    }
    return obj;
}

QString OAIListDestinationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDestinationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDestinationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDestinationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListDestinationsResponse::getDestinationList() const {
    return m_destination_list;
}
void OAIListDestinationsResponse::setDestinationList(const QList &destination_list) {
    m_destination_list = destination_list;
    m_destination_list_isSet = true;
}

bool OAIListDestinationsResponse::is_destination_list_Set() const{
    return m_destination_list_isSet;
}

bool OAIListDestinationsResponse::is_destination_list_Valid() const{
    return m_destination_list_isValid;
}

bool OAIListDestinationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDestinationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
