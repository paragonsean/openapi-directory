/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetLogLevelsByResourceTypesResponse.h
 *
 * 
 */

#ifndef OAIGetLogLevelsByResourceTypesResponse_H
#define OAIGetLogLevelsByResourceTypesResponse_H

#include <QJsonObject>

#include "OAILogLevel.h"
#include "OAIWirelessDeviceLogOption.h"
#include "OAIWirelessGatewayLogOption.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWirelessGatewayLogOption;
class OAIWirelessDeviceLogOption;

class OAIGetLogLevelsByResourceTypesResponse : public OAIObject {
public:
    OAIGetLogLevelsByResourceTypesResponse();
    OAIGetLogLevelsByResourceTypesResponse(QString json);
    ~OAIGetLogLevelsByResourceTypesResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILogLevel getDefaultLogLevel() const;
    void setDefaultLogLevel(const OAILogLevel &default_log_level);
    bool is_default_log_level_Set() const;
    bool is_default_log_level_Valid() const;

    QList<OAIWirelessGatewayLogOption> getWirelessGatewayLogOptions() const;
    void setWirelessGatewayLogOptions(const QList<OAIWirelessGatewayLogOption> &wireless_gateway_log_options);
    bool is_wireless_gateway_log_options_Set() const;
    bool is_wireless_gateway_log_options_Valid() const;

    QList<OAIWirelessDeviceLogOption> getWirelessDeviceLogOptions() const;
    void setWirelessDeviceLogOptions(const QList<OAIWirelessDeviceLogOption> &wireless_device_log_options);
    bool is_wireless_device_log_options_Set() const;
    bool is_wireless_device_log_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILogLevel m_default_log_level;
    bool m_default_log_level_isSet;
    bool m_default_log_level_isValid;

    QList<OAIWirelessGatewayLogOption> m_wireless_gateway_log_options;
    bool m_wireless_gateway_log_options_isSet;
    bool m_wireless_gateway_log_options_isValid;

    QList<OAIWirelessDeviceLogOption> m_wireless_device_log_options;
    bool m_wireless_device_log_options_isSet;
    bool m_wireless_device_log_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetLogLevelsByResourceTypesResponse)

#endif // OAIGetLogLevelsByResourceTypesResponse_H
