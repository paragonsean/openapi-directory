/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILteNmrObj.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILteNmrObj::OAILteNmrObj(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILteNmrObj::OAILteNmrObj() {
    this->initializeModel();
}

OAILteNmrObj::~OAILteNmrObj() {}

void OAILteNmrObj::initializeModel() {

    m_pci_isSet = false;
    m_pci_isValid = false;

    m_earfcn_isSet = false;
    m_earfcn_isValid = false;

    m_eutran_cid_isSet = false;
    m_eutran_cid_isValid = false;

    m_rsrp_isSet = false;
    m_rsrp_isValid = false;

    m_rsrq_isSet = false;
    m_rsrq_isValid = false;
}

void OAILteNmrObj::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILteNmrObj::fromJsonObject(QJsonObject json) {

    m_pci_isValid = ::OpenAPI::fromJsonValue(m_pci, json[QString("Pci")]);
    m_pci_isSet = !json[QString("Pci")].isNull() && m_pci_isValid;

    m_earfcn_isValid = ::OpenAPI::fromJsonValue(m_earfcn, json[QString("Earfcn")]);
    m_earfcn_isSet = !json[QString("Earfcn")].isNull() && m_earfcn_isValid;

    m_eutran_cid_isValid = ::OpenAPI::fromJsonValue(m_eutran_cid, json[QString("EutranCid")]);
    m_eutran_cid_isSet = !json[QString("EutranCid")].isNull() && m_eutran_cid_isValid;

    m_rsrp_isValid = ::OpenAPI::fromJsonValue(m_rsrp, json[QString("Rsrp")]);
    m_rsrp_isSet = !json[QString("Rsrp")].isNull() && m_rsrp_isValid;

    m_rsrq_isValid = ::OpenAPI::fromJsonValue(m_rsrq, json[QString("Rsrq")]);
    m_rsrq_isSet = !json[QString("Rsrq")].isNull() && m_rsrq_isValid;
}

QString OAILteNmrObj::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILteNmrObj::asJsonObject() const {
    QJsonObject obj;
    if (m_pci_isSet) {
        obj.insert(QString("Pci"), ::OpenAPI::toJsonValue(m_pci));
    }
    if (m_earfcn_isSet) {
        obj.insert(QString("Earfcn"), ::OpenAPI::toJsonValue(m_earfcn));
    }
    if (m_eutran_cid_isSet) {
        obj.insert(QString("EutranCid"), ::OpenAPI::toJsonValue(m_eutran_cid));
    }
    if (m_rsrp_isSet) {
        obj.insert(QString("Rsrp"), ::OpenAPI::toJsonValue(m_rsrp));
    }
    if (m_rsrq_isSet) {
        obj.insert(QString("Rsrq"), ::OpenAPI::toJsonValue(m_rsrq));
    }
    return obj;
}

qint32 OAILteNmrObj::getPci() const {
    return m_pci;
}
void OAILteNmrObj::setPci(const qint32 &pci) {
    m_pci = pci;
    m_pci_isSet = true;
}

bool OAILteNmrObj::is_pci_Set() const{
    return m_pci_isSet;
}

bool OAILteNmrObj::is_pci_Valid() const{
    return m_pci_isValid;
}

qint32 OAILteNmrObj::getEarfcn() const {
    return m_earfcn;
}
void OAILteNmrObj::setEarfcn(const qint32 &earfcn) {
    m_earfcn = earfcn;
    m_earfcn_isSet = true;
}

bool OAILteNmrObj::is_earfcn_Set() const{
    return m_earfcn_isSet;
}

bool OAILteNmrObj::is_earfcn_Valid() const{
    return m_earfcn_isValid;
}

qint32 OAILteNmrObj::getEutranCid() const {
    return m_eutran_cid;
}
void OAILteNmrObj::setEutranCid(const qint32 &eutran_cid) {
    m_eutran_cid = eutran_cid;
    m_eutran_cid_isSet = true;
}

bool OAILteNmrObj::is_eutran_cid_Set() const{
    return m_eutran_cid_isSet;
}

bool OAILteNmrObj::is_eutran_cid_Valid() const{
    return m_eutran_cid_isValid;
}

qint32 OAILteNmrObj::getRsrp() const {
    return m_rsrp;
}
void OAILteNmrObj::setRsrp(const qint32 &rsrp) {
    m_rsrp = rsrp;
    m_rsrp_isSet = true;
}

bool OAILteNmrObj::is_rsrp_Set() const{
    return m_rsrp_isSet;
}

bool OAILteNmrObj::is_rsrp_Valid() const{
    return m_rsrp_isValid;
}

float OAILteNmrObj::getRsrq() const {
    return m_rsrq;
}
void OAILteNmrObj::setRsrq(const float &rsrq) {
    m_rsrq = rsrq;
    m_rsrq_isSet = true;
}

bool OAILteNmrObj::is_rsrq_Set() const{
    return m_rsrq_isSet;
}

bool OAILteNmrObj::is_rsrq_Valid() const{
    return m_rsrq_isValid;
}

bool OAILteNmrObj::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earfcn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eutran_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsrp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsrq_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILteNmrObj::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pci_isValid && m_earfcn_isValid && m_eutran_cid_isValid && true;
}

} // namespace OpenAPI
