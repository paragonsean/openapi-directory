/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDeviceProfileRequest_LoRaWAN.h
 *
 * 
 */

#ifndef OAICreateDeviceProfileRequest_LoRaWAN_H
#define OAICreateDeviceProfileRequest_LoRaWAN_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateDeviceProfileRequest_LoRaWAN : public OAIObject {
public:
    OAICreateDeviceProfileRequest_LoRaWAN();
    OAICreateDeviceProfileRequest_LoRaWAN(QString json);
    ~OAICreateDeviceProfileRequest_LoRaWAN() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getSupportsClassB() const;
    void setSupportsClassB(const bool &supports_class_b);
    bool is_supports_class_b_Set() const;
    bool is_supports_class_b_Valid() const;

    qint32 getClassBTimeout() const;
    void setClassBTimeout(const qint32 &class_b_timeout);
    bool is_class_b_timeout_Set() const;
    bool is_class_b_timeout_Valid() const;

    qint32 getPingSlotPeriod() const;
    void setPingSlotPeriod(const qint32 &ping_slot_period);
    bool is_ping_slot_period_Set() const;
    bool is_ping_slot_period_Valid() const;

    qint32 getPingSlotDr() const;
    void setPingSlotDr(const qint32 &ping_slot_dr);
    bool is_ping_slot_dr_Set() const;
    bool is_ping_slot_dr_Valid() const;

    qint32 getPingSlotFreq() const;
    void setPingSlotFreq(const qint32 &ping_slot_freq);
    bool is_ping_slot_freq_Set() const;
    bool is_ping_slot_freq_Valid() const;

    bool getSupportsClassC() const;
    void setSupportsClassC(const bool &supports_class_c);
    bool is_supports_class_c_Set() const;
    bool is_supports_class_c_Valid() const;

    qint32 getClassCTimeout() const;
    void setClassCTimeout(const qint32 &class_c_timeout);
    bool is_class_c_timeout_Set() const;
    bool is_class_c_timeout_Valid() const;

    QString getMacVersion() const;
    void setMacVersion(const QString &mac_version);
    bool is_mac_version_Set() const;
    bool is_mac_version_Valid() const;

    QString getRegParamsRevision() const;
    void setRegParamsRevision(const QString &reg_params_revision);
    bool is_reg_params_revision_Set() const;
    bool is_reg_params_revision_Valid() const;

    qint32 getRxDelay1() const;
    void setRxDelay1(const qint32 &rx_delay1);
    bool is_rx_delay1_Set() const;
    bool is_rx_delay1_Valid() const;

    qint32 getRxDrOffset1() const;
    void setRxDrOffset1(const qint32 &rx_dr_offset1);
    bool is_rx_dr_offset1_Set() const;
    bool is_rx_dr_offset1_Valid() const;

    qint32 getRxDataRate2() const;
    void setRxDataRate2(const qint32 &rx_data_rate2);
    bool is_rx_data_rate2_Set() const;
    bool is_rx_data_rate2_Valid() const;

    qint32 getRxFreq2() const;
    void setRxFreq2(const qint32 &rx_freq2);
    bool is_rx_freq2_Set() const;
    bool is_rx_freq2_Valid() const;

    QList getFactoryPresetFreqsList() const;
    void setFactoryPresetFreqsList(const QList &factory_preset_freqs_list);
    bool is_factory_preset_freqs_list_Set() const;
    bool is_factory_preset_freqs_list_Valid() const;

    qint32 getMaxEirp() const;
    void setMaxEirp(const qint32 &max_eirp);
    bool is_max_eirp_Set() const;
    bool is_max_eirp_Valid() const;

    qint32 getMaxDutyCycle() const;
    void setMaxDutyCycle(const qint32 &max_duty_cycle);
    bool is_max_duty_cycle_Set() const;
    bool is_max_duty_cycle_Valid() const;

    QString getRfRegion() const;
    void setRfRegion(const QString &rf_region);
    bool is_rf_region_Set() const;
    bool is_rf_region_Valid() const;

    bool getSupportsJoin() const;
    void setSupportsJoin(const bool &supports_join);
    bool is_supports_join_Set() const;
    bool is_supports_join_Valid() const;

    bool getSupports32BitFCnt() const;
    void setSupports32BitFCnt(const bool &supports32_bit_f_cnt);
    bool is_supports32_bit_f_cnt_Set() const;
    bool is_supports32_bit_f_cnt_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_supports_class_b;
    bool m_supports_class_b_isSet;
    bool m_supports_class_b_isValid;

    qint32 m_class_b_timeout;
    bool m_class_b_timeout_isSet;
    bool m_class_b_timeout_isValid;

    qint32 m_ping_slot_period;
    bool m_ping_slot_period_isSet;
    bool m_ping_slot_period_isValid;

    qint32 m_ping_slot_dr;
    bool m_ping_slot_dr_isSet;
    bool m_ping_slot_dr_isValid;

    qint32 m_ping_slot_freq;
    bool m_ping_slot_freq_isSet;
    bool m_ping_slot_freq_isValid;

    bool m_supports_class_c;
    bool m_supports_class_c_isSet;
    bool m_supports_class_c_isValid;

    qint32 m_class_c_timeout;
    bool m_class_c_timeout_isSet;
    bool m_class_c_timeout_isValid;

    QString m_mac_version;
    bool m_mac_version_isSet;
    bool m_mac_version_isValid;

    QString m_reg_params_revision;
    bool m_reg_params_revision_isSet;
    bool m_reg_params_revision_isValid;

    qint32 m_rx_delay1;
    bool m_rx_delay1_isSet;
    bool m_rx_delay1_isValid;

    qint32 m_rx_dr_offset1;
    bool m_rx_dr_offset1_isSet;
    bool m_rx_dr_offset1_isValid;

    qint32 m_rx_data_rate2;
    bool m_rx_data_rate2_isSet;
    bool m_rx_data_rate2_isValid;

    qint32 m_rx_freq2;
    bool m_rx_freq2_isSet;
    bool m_rx_freq2_isValid;

    QList m_factory_preset_freqs_list;
    bool m_factory_preset_freqs_list_isSet;
    bool m_factory_preset_freqs_list_isValid;

    qint32 m_max_eirp;
    bool m_max_eirp_isSet;
    bool m_max_eirp_isValid;

    qint32 m_max_duty_cycle;
    bool m_max_duty_cycle_isSet;
    bool m_max_duty_cycle_isValid;

    QString m_rf_region;
    bool m_rf_region_isSet;
    bool m_rf_region_isValid;

    bool m_supports_join;
    bool m_supports_join_isSet;
    bool m_supports_join_isValid;

    bool m_supports32_bit_f_cnt;
    bool m_supports32_bit_f_cnt_isSet;
    bool m_supports32_bit_f_cnt_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDeviceProfileRequest_LoRaWAN)

#endif // OAICreateDeviceProfileRequest_LoRaWAN_H
