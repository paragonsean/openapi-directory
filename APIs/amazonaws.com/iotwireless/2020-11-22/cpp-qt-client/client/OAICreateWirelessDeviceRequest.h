/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateWirelessDeviceRequest.h
 *
 * 
 */

#ifndef OAICreateWirelessDeviceRequest_H
#define OAICreateWirelessDeviceRequest_H

#include <QJsonObject>

#include "OAICreateWirelessDeviceRequest_LoRaWAN.h"
#include "OAICreateWirelessDeviceRequest_Sidewalk.h"
#include "OAIPositioningConfigStatus.h"
#include "OAIWirelessDeviceType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateWirelessDeviceRequest_LoRaWAN;
class OAICreateWirelessDeviceRequest_Sidewalk;

class OAICreateWirelessDeviceRequest : public OAIObject {
public:
    OAICreateWirelessDeviceRequest();
    OAICreateWirelessDeviceRequest(QString json);
    ~OAICreateWirelessDeviceRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIWirelessDeviceType getType() const;
    void setType(const OAIWirelessDeviceType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDestinationName() const;
    void setDestinationName(const QString &destination_name);
    bool is_destination_name_Set() const;
    bool is_destination_name_Valid() const;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    OAICreateWirelessDeviceRequest_LoRaWAN getLoRaWan() const;
    void setLoRaWan(const OAICreateWirelessDeviceRequest_LoRaWAN &lo_ra_wan);
    bool is_lo_ra_wan_Set() const;
    bool is_lo_ra_wan_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIPositioningConfigStatus getPositioning() const;
    void setPositioning(const OAIPositioningConfigStatus &positioning);
    bool is_positioning_Set() const;
    bool is_positioning_Valid() const;

    OAICreateWirelessDeviceRequest_Sidewalk getSidewalk() const;
    void setSidewalk(const OAICreateWirelessDeviceRequest_Sidewalk &sidewalk);
    bool is_sidewalk_Set() const;
    bool is_sidewalk_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIWirelessDeviceType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_destination_name;
    bool m_destination_name_isSet;
    bool m_destination_name_isValid;

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;

    OAICreateWirelessDeviceRequest_LoRaWAN m_lo_ra_wan;
    bool m_lo_ra_wan_isSet;
    bool m_lo_ra_wan_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIPositioningConfigStatus m_positioning;
    bool m_positioning_isSet;
    bool m_positioning_isValid;

    OAICreateWirelessDeviceRequest_Sidewalk m_sidewalk;
    bool m_sidewalk_isSet;
    bool m_sidewalk_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateWirelessDeviceRequest)

#endif // OAICreateWirelessDeviceRequest_H
