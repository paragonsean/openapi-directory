/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPositioning.h
 *
 * The FPorts for the position information.
 */

#ifndef OAIPositioning_H
#define OAIPositioning_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPositioning : public OAIObject {
public:
    OAIPositioning();
    OAIPositioning(QString json);
    ~OAIPositioning() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getClockSync() const;
    void setClockSync(const qint32 &clock_sync);
    bool is_clock_sync_Set() const;
    bool is_clock_sync_Valid() const;

    qint32 getStream() const;
    void setStream(const qint32 &stream);
    bool is_stream_Set() const;
    bool is_stream_Valid() const;

    qint32 getGnss() const;
    void setGnss(const qint32 &gnss);
    bool is_gnss_Set() const;
    bool is_gnss_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_clock_sync;
    bool m_clock_sync_isSet;
    bool m_clock_sync_isValid;

    qint32 m_stream;
    bool m_stream_isSet;
    bool m_stream_isValid;

    qint32 m_gnss;
    bool m_gnss_isSet;
    bool m_gnss_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPositioning)

#endif // OAIPositioning_H
