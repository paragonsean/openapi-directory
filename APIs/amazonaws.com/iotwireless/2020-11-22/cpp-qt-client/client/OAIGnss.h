/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGnss.h
 *
 * Global navigation satellite system (GNSS) object used for positioning.
 */

#ifndef OAIGnss_H
#define OAIGnss_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGnss : public OAIObject {
public:
    OAIGnss();
    OAIGnss(QString json);
    ~OAIGnss() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPayload() const;
    void setPayload(const QString &payload);
    bool is_payload_Set() const;
    bool is_payload_Valid() const;

    float getCaptureTime() const;
    void setCaptureTime(const float &capture_time);
    bool is_capture_time_Set() const;
    bool is_capture_time_Valid() const;

    float getCaptureTimeAccuracy() const;
    void setCaptureTimeAccuracy(const float &capture_time_accuracy);
    bool is_capture_time_accuracy_Set() const;
    bool is_capture_time_accuracy_Valid() const;

    QList getAssistPosition() const;
    void setAssistPosition(const QList &assist_position);
    bool is_assist_position_Set() const;
    bool is_assist_position_Valid() const;

    float getAssistAltitude() const;
    void setAssistAltitude(const float &assist_altitude);
    bool is_assist_altitude_Set() const;
    bool is_assist_altitude_Valid() const;

    bool getUse2DSolver() const;
    void setUse2DSolver(const bool &use2_d_solver);
    bool is_use2_d_solver_Set() const;
    bool is_use2_d_solver_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_payload;
    bool m_payload_isSet;
    bool m_payload_isValid;

    float m_capture_time;
    bool m_capture_time_isSet;
    bool m_capture_time_isValid;

    float m_capture_time_accuracy;
    bool m_capture_time_accuracy_isSet;
    bool m_capture_time_accuracy_isValid;

    QList m_assist_position;
    bool m_assist_position_isSet;
    bool m_assist_position_isValid;

    float m_assist_altitude;
    bool m_assist_altitude_isSet;
    bool m_assist_altitude_isValid;

    bool m_use2_d_solver;
    bool m_use2_d_solver_isSet;
    bool m_use2_d_solver_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGnss)

#endif // OAIGnss_H
