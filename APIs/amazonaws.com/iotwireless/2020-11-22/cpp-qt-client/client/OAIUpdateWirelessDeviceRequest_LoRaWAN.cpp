/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWirelessDeviceRequest_LoRaWAN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWirelessDeviceRequest_LoRaWAN::OAIUpdateWirelessDeviceRequest_LoRaWAN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWirelessDeviceRequest_LoRaWAN::OAIUpdateWirelessDeviceRequest_LoRaWAN() {
    this->initializeModel();
}

OAIUpdateWirelessDeviceRequest_LoRaWAN::~OAIUpdateWirelessDeviceRequest_LoRaWAN() {}

void OAIUpdateWirelessDeviceRequest_LoRaWAN::initializeModel() {

    m_device_profile_id_isSet = false;
    m_device_profile_id_isValid = false;

    m_service_profile_id_isSet = false;
    m_service_profile_id_isValid = false;

    m_abp_v1_1_isSet = false;
    m_abp_v1_1_isValid = false;

    m_abp_v1_0_x_isSet = false;
    m_abp_v1_0_x_isValid = false;

    m_f_ports_isSet = false;
    m_f_ports_isValid = false;
}

void OAIUpdateWirelessDeviceRequest_LoRaWAN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWirelessDeviceRequest_LoRaWAN::fromJsonObject(QJsonObject json) {

    m_device_profile_id_isValid = ::OpenAPI::fromJsonValue(m_device_profile_id, json[QString("DeviceProfileId")]);
    m_device_profile_id_isSet = !json[QString("DeviceProfileId")].isNull() && m_device_profile_id_isValid;

    m_service_profile_id_isValid = ::OpenAPI::fromJsonValue(m_service_profile_id, json[QString("ServiceProfileId")]);
    m_service_profile_id_isSet = !json[QString("ServiceProfileId")].isNull() && m_service_profile_id_isValid;

    m_abp_v1_1_isValid = ::OpenAPI::fromJsonValue(m_abp_v1_1, json[QString("AbpV1_1")]);
    m_abp_v1_1_isSet = !json[QString("AbpV1_1")].isNull() && m_abp_v1_1_isValid;

    m_abp_v1_0_x_isValid = ::OpenAPI::fromJsonValue(m_abp_v1_0_x, json[QString("AbpV1_0_x")]);
    m_abp_v1_0_x_isSet = !json[QString("AbpV1_0_x")].isNull() && m_abp_v1_0_x_isValid;

    m_f_ports_isValid = ::OpenAPI::fromJsonValue(m_f_ports, json[QString("FPorts")]);
    m_f_ports_isSet = !json[QString("FPorts")].isNull() && m_f_ports_isValid;
}

QString OAIUpdateWirelessDeviceRequest_LoRaWAN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWirelessDeviceRequest_LoRaWAN::asJsonObject() const {
    QJsonObject obj;
    if (m_device_profile_id_isSet) {
        obj.insert(QString("DeviceProfileId"), ::OpenAPI::toJsonValue(m_device_profile_id));
    }
    if (m_service_profile_id_isSet) {
        obj.insert(QString("ServiceProfileId"), ::OpenAPI::toJsonValue(m_service_profile_id));
    }
    if (m_abp_v1_1.isSet()) {
        obj.insert(QString("AbpV1_1"), ::OpenAPI::toJsonValue(m_abp_v1_1));
    }
    if (m_abp_v1_0_x.isSet()) {
        obj.insert(QString("AbpV1_0_x"), ::OpenAPI::toJsonValue(m_abp_v1_0_x));
    }
    if (m_f_ports.isSet()) {
        obj.insert(QString("FPorts"), ::OpenAPI::toJsonValue(m_f_ports));
    }
    return obj;
}

QString OAIUpdateWirelessDeviceRequest_LoRaWAN::getDeviceProfileId() const {
    return m_device_profile_id;
}
void OAIUpdateWirelessDeviceRequest_LoRaWAN::setDeviceProfileId(const QString &device_profile_id) {
    m_device_profile_id = device_profile_id;
    m_device_profile_id_isSet = true;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_device_profile_id_Set() const{
    return m_device_profile_id_isSet;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_device_profile_id_Valid() const{
    return m_device_profile_id_isValid;
}

QString OAIUpdateWirelessDeviceRequest_LoRaWAN::getServiceProfileId() const {
    return m_service_profile_id;
}
void OAIUpdateWirelessDeviceRequest_LoRaWAN::setServiceProfileId(const QString &service_profile_id) {
    m_service_profile_id = service_profile_id;
    m_service_profile_id_isSet = true;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_service_profile_id_Set() const{
    return m_service_profile_id_isSet;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_service_profile_id_Valid() const{
    return m_service_profile_id_isValid;
}

OAIUpdateWirelessDevice_request_LoRaWAN_AbpV1_1 OAIUpdateWirelessDeviceRequest_LoRaWAN::getAbpV11() const {
    return m_abp_v1_1;
}
void OAIUpdateWirelessDeviceRequest_LoRaWAN::setAbpV11(const OAIUpdateWirelessDevice_request_LoRaWAN_AbpV1_1 &abp_v1_1) {
    m_abp_v1_1 = abp_v1_1;
    m_abp_v1_1_isSet = true;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_abp_v1_1_Set() const{
    return m_abp_v1_1_isSet;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_abp_v1_1_Valid() const{
    return m_abp_v1_1_isValid;
}

OAIUpdateWirelessDevice_request_LoRaWAN_AbpV1_0_x OAIUpdateWirelessDeviceRequest_LoRaWAN::getAbpV10X() const {
    return m_abp_v1_0_x;
}
void OAIUpdateWirelessDeviceRequest_LoRaWAN::setAbpV10X(const OAIUpdateWirelessDevice_request_LoRaWAN_AbpV1_0_x &abp_v1_0_x) {
    m_abp_v1_0_x = abp_v1_0_x;
    m_abp_v1_0_x_isSet = true;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_abp_v1_0_x_Set() const{
    return m_abp_v1_0_x_isSet;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_abp_v1_0_x_Valid() const{
    return m_abp_v1_0_x_isValid;
}

OAIUpdateWirelessDevice_request_LoRaWAN_FPorts OAIUpdateWirelessDeviceRequest_LoRaWAN::getFPorts() const {
    return m_f_ports;
}
void OAIUpdateWirelessDeviceRequest_LoRaWAN::setFPorts(const OAIUpdateWirelessDevice_request_LoRaWAN_FPorts &f_ports) {
    m_f_ports = f_ports;
    m_f_ports_isSet = true;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_f_ports_Set() const{
    return m_f_ports_isSet;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::is_f_ports_Valid() const{
    return m_f_ports_isValid;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_abp_v1_1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_abp_v1_0_x.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_f_ports.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWirelessDeviceRequest_LoRaWAN::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
