/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDeviceProfileResponse_Sidewalk.h
 *
 * 
 */

#ifndef OAIGetDeviceProfileResponse_Sidewalk_H
#define OAIGetDeviceProfileResponse_Sidewalk_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetDeviceProfileResponse_Sidewalk : public OAIObject {
public:
    OAIGetDeviceProfileResponse_Sidewalk();
    OAIGetDeviceProfileResponse_Sidewalk(QString json);
    ~OAIGetDeviceProfileResponse_Sidewalk() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationServerPublicKey() const;
    void setApplicationServerPublicKey(const QString &application_server_public_key);
    bool is_application_server_public_key_Set() const;
    bool is_application_server_public_key_Valid() const;

    bool getQualificationStatus() const;
    void setQualificationStatus(const bool &qualification_status);
    bool is_qualification_status_Set() const;
    bool is_qualification_status_Valid() const;

    QList getDakCertificateMetadata() const;
    void setDakCertificateMetadata(const QList &dak_certificate_metadata);
    bool is_dak_certificate_metadata_Set() const;
    bool is_dak_certificate_metadata_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_server_public_key;
    bool m_application_server_public_key_isSet;
    bool m_application_server_public_key_isValid;

    bool m_qualification_status;
    bool m_qualification_status_isSet;
    bool m_qualification_status_isValid;

    QList m_dak_certificate_metadata;
    bool m_dak_certificate_metadata_isSet;
    bool m_dak_certificate_metadata_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDeviceProfileResponse_Sidewalk)

#endif // OAIGetDeviceProfileResponse_Sidewalk_H
