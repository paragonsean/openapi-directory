/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILoRaWANMulticastGet.h
 *
 * The LoRaWAN information that is to be returned from getting multicast group information.
 */

#ifndef OAILoRaWANMulticastGet_H
#define OAILoRaWANMulticastGet_H

#include <QJsonObject>

#include "OAIDlClass.h"
#include "OAISupportedRfRegion.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILoRaWANMulticastGet : public OAIObject {
public:
    OAILoRaWANMulticastGet();
    OAILoRaWANMulticastGet(QString json);
    ~OAILoRaWANMulticastGet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISupportedRfRegion getRfRegion() const;
    void setRfRegion(const OAISupportedRfRegion &rf_region);
    bool is_rf_region_Set() const;
    bool is_rf_region_Valid() const;

    OAIDlClass getDlClass() const;
    void setDlClass(const OAIDlClass &dl_class);
    bool is_dl_class_Set() const;
    bool is_dl_class_Valid() const;

    qint32 getNumberOfDevicesRequested() const;
    void setNumberOfDevicesRequested(const qint32 &number_of_devices_requested);
    bool is_number_of_devices_requested_Set() const;
    bool is_number_of_devices_requested_Valid() const;

    qint32 getNumberOfDevicesInGroup() const;
    void setNumberOfDevicesInGroup(const qint32 &number_of_devices_in_group);
    bool is_number_of_devices_in_group_Set() const;
    bool is_number_of_devices_in_group_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISupportedRfRegion m_rf_region;
    bool m_rf_region_isSet;
    bool m_rf_region_isValid;

    OAIDlClass m_dl_class;
    bool m_dl_class_isSet;
    bool m_dl_class_isValid;

    qint32 m_number_of_devices_requested;
    bool m_number_of_devices_requested_isSet;
    bool m_number_of_devices_requested_isValid;

    qint32 m_number_of_devices_in_group;
    bool m_number_of_devices_in_group_isSet;
    bool m_number_of_devices_in_group_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILoRaWANMulticastGet)

#endif // OAILoRaWANMulticastGet_H
