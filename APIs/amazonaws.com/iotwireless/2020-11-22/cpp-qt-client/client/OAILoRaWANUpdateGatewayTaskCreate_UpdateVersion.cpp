/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion() {
    this->initializeModel();
}

OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::~OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion() {}

void OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::initializeModel() {

    m_package_version_isSet = false;
    m_package_version_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_station_isSet = false;
    m_station_isValid = false;
}

void OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::fromJsonObject(QJsonObject json) {

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("PackageVersion")]);
    m_package_version_isSet = !json[QString("PackageVersion")].isNull() && m_package_version_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("Model")]);
    m_model_isSet = !json[QString("Model")].isNull() && m_model_isValid;

    m_station_isValid = ::OpenAPI::fromJsonValue(m_station, json[QString("Station")]);
    m_station_isSet = !json[QString("Station")].isNull() && m_station_isValid;
}

QString OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_package_version_isSet) {
        obj.insert(QString("PackageVersion"), ::OpenAPI::toJsonValue(m_package_version));
    }
    if (m_model_isSet) {
        obj.insert(QString("Model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_station_isSet) {
        obj.insert(QString("Station"), ::OpenAPI::toJsonValue(m_station));
    }
    return obj;
}

QString OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::getPackageVersion() const {
    return m_package_version;
}
void OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::setPackageVersion(const QString &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::is_package_version_Valid() const{
    return m_package_version_isValid;
}

QString OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::getModel() const {
    return m_model;
}
void OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::is_model_Set() const{
    return m_model_isSet;
}

bool OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::is_model_Valid() const{
    return m_model_isValid;
}

QString OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::getStation() const {
    return m_station;
}
void OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::setStation(const QString &station) {
    m_station = station;
    m_station_isSet = true;
}

bool OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::is_station_Set() const{
    return m_station_isSet;
}

bool OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::is_station_Valid() const{
    return m_station_isValid;
}

bool OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoRaWANUpdateGatewayTaskCreate_UpdateVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
