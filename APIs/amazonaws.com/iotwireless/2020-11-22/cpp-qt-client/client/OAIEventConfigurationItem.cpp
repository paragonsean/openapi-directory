/**
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventConfigurationItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventConfigurationItem::OAIEventConfigurationItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventConfigurationItem::OAIEventConfigurationItem() {
    this->initializeModel();
}

OAIEventConfigurationItem::~OAIEventConfigurationItem() {}

void OAIEventConfigurationItem::initializeModel() {

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_identifier_type_isSet = false;
    m_identifier_type_isValid = false;

    m_partner_type_isSet = false;
    m_partner_type_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;
}

void OAIEventConfigurationItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventConfigurationItem::fromJsonObject(QJsonObject json) {

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_identifier_type_isValid = ::OpenAPI::fromJsonValue(m_identifier_type, json[QString("IdentifierType")]);
    m_identifier_type_isSet = !json[QString("IdentifierType")].isNull() && m_identifier_type_isValid;

    m_partner_type_isValid = ::OpenAPI::fromJsonValue(m_partner_type, json[QString("PartnerType")]);
    m_partner_type_isSet = !json[QString("PartnerType")].isNull() && m_partner_type_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("Events")]);
    m_events_isSet = !json[QString("Events")].isNull() && m_events_isValid;
}

QString OAIEventConfigurationItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventConfigurationItem::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_identifier_type.isSet()) {
        obj.insert(QString("IdentifierType"), ::OpenAPI::toJsonValue(m_identifier_type));
    }
    if (m_partner_type.isSet()) {
        obj.insert(QString("PartnerType"), ::OpenAPI::toJsonValue(m_partner_type));
    }
    if (m_events.isSet()) {
        obj.insert(QString("Events"), ::OpenAPI::toJsonValue(m_events));
    }
    return obj;
}

QString OAIEventConfigurationItem::getIdentifier() const {
    return m_identifier;
}
void OAIEventConfigurationItem::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIEventConfigurationItem::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIEventConfigurationItem::is_identifier_Valid() const{
    return m_identifier_isValid;
}

OAIIdentifierType OAIEventConfigurationItem::getIdentifierType() const {
    return m_identifier_type;
}
void OAIEventConfigurationItem::setIdentifierType(const OAIIdentifierType &identifier_type) {
    m_identifier_type = identifier_type;
    m_identifier_type_isSet = true;
}

bool OAIEventConfigurationItem::is_identifier_type_Set() const{
    return m_identifier_type_isSet;
}

bool OAIEventConfigurationItem::is_identifier_type_Valid() const{
    return m_identifier_type_isValid;
}

OAIEventNotificationPartnerType OAIEventConfigurationItem::getPartnerType() const {
    return m_partner_type;
}
void OAIEventConfigurationItem::setPartnerType(const OAIEventNotificationPartnerType &partner_type) {
    m_partner_type = partner_type;
    m_partner_type_isSet = true;
}

bool OAIEventConfigurationItem::is_partner_type_Set() const{
    return m_partner_type_isSet;
}

bool OAIEventConfigurationItem::is_partner_type_Valid() const{
    return m_partner_type_isValid;
}

OAIEventNotificationItemConfigurations OAIEventConfigurationItem::getEvents() const {
    return m_events;
}
void OAIEventConfigurationItem::setEvents(const OAIEventNotificationItemConfigurations &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIEventConfigurationItem::is_events_Set() const{
    return m_events_isSet;
}

bool OAIEventConfigurationItem::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIEventConfigurationItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventConfigurationItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
