# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.f_ports_positioning import FPortsPositioning
from openapi_server import util


class FPorts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fuota: int=None, multicast: int=None, clock_sync: int=None, positioning: FPortsPositioning=None, applications: List=None):
        """FPorts - a model defined in OpenAPI

        :param fuota: The fuota of this FPorts.
        :param multicast: The multicast of this FPorts.
        :param clock_sync: The clock_sync of this FPorts.
        :param positioning: The positioning of this FPorts.
        :param applications: The applications of this FPorts.
        """
        self.openapi_types = {
            'fuota': int,
            'multicast': int,
            'clock_sync': int,
            'positioning': FPortsPositioning,
            'applications': List
        }

        self.attribute_map = {
            'fuota': 'Fuota',
            'multicast': 'Multicast',
            'clock_sync': 'ClockSync',
            'positioning': 'Positioning',
            'applications': 'Applications'
        }

        self._fuota = fuota
        self._multicast = multicast
        self._clock_sync = clock_sync
        self._positioning = positioning
        self._applications = applications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FPorts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FPorts of this FPorts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fuota(self):
        """Gets the fuota of this FPorts.

        The Fport value.

        :return: The fuota of this FPorts.
        :rtype: int
        """
        return self._fuota

    @fuota.setter
    def fuota(self, fuota):
        """Sets the fuota of this FPorts.

        The Fport value.

        :param fuota: The fuota of this FPorts.
        :type fuota: int
        """
        if fuota is not None and fuota > 223:
            raise ValueError("Invalid value for `fuota`, must be a value less than or equal to `223`")
        if fuota is not None and fuota < 1:
            raise ValueError("Invalid value for `fuota`, must be a value greater than or equal to `1`")

        self._fuota = fuota

    @property
    def multicast(self):
        """Gets the multicast of this FPorts.

        The Fport value.

        :return: The multicast of this FPorts.
        :rtype: int
        """
        return self._multicast

    @multicast.setter
    def multicast(self, multicast):
        """Sets the multicast of this FPorts.

        The Fport value.

        :param multicast: The multicast of this FPorts.
        :type multicast: int
        """
        if multicast is not None and multicast > 223:
            raise ValueError("Invalid value for `multicast`, must be a value less than or equal to `223`")
        if multicast is not None and multicast < 1:
            raise ValueError("Invalid value for `multicast`, must be a value greater than or equal to `1`")

        self._multicast = multicast

    @property
    def clock_sync(self):
        """Gets the clock_sync of this FPorts.

        The Fport value.

        :return: The clock_sync of this FPorts.
        :rtype: int
        """
        return self._clock_sync

    @clock_sync.setter
    def clock_sync(self, clock_sync):
        """Sets the clock_sync of this FPorts.

        The Fport value.

        :param clock_sync: The clock_sync of this FPorts.
        :type clock_sync: int
        """
        if clock_sync is not None and clock_sync > 223:
            raise ValueError("Invalid value for `clock_sync`, must be a value less than or equal to `223`")
        if clock_sync is not None and clock_sync < 1:
            raise ValueError("Invalid value for `clock_sync`, must be a value greater than or equal to `1`")

        self._clock_sync = clock_sync

    @property
    def positioning(self):
        """Gets the positioning of this FPorts.


        :return: The positioning of this FPorts.
        :rtype: FPortsPositioning
        """
        return self._positioning

    @positioning.setter
    def positioning(self, positioning):
        """Sets the positioning of this FPorts.


        :param positioning: The positioning of this FPorts.
        :type positioning: FPortsPositioning
        """

        self._positioning = positioning

    @property
    def applications(self):
        """Gets the applications of this FPorts.


        :return: The applications of this FPorts.
        :rtype: List
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this FPorts.


        :param applications: The applications of this FPorts.
        :type applications: List
        """

        self._applications = applications
