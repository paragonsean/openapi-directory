# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LteNmrObj(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pci: int=None, earfcn: int=None, eutran_cid: int=None, rsrp: int=None, rsrq: float=None):
        """LteNmrObj - a model defined in OpenAPI

        :param pci: The pci of this LteNmrObj.
        :param earfcn: The earfcn of this LteNmrObj.
        :param eutran_cid: The eutran_cid of this LteNmrObj.
        :param rsrp: The rsrp of this LteNmrObj.
        :param rsrq: The rsrq of this LteNmrObj.
        """
        self.openapi_types = {
            'pci': int,
            'earfcn': int,
            'eutran_cid': int,
            'rsrp': int,
            'rsrq': float
        }

        self.attribute_map = {
            'pci': 'Pci',
            'earfcn': 'Earfcn',
            'eutran_cid': 'EutranCid',
            'rsrp': 'Rsrp',
            'rsrq': 'Rsrq'
        }

        self._pci = pci
        self._earfcn = earfcn
        self._eutran_cid = eutran_cid
        self._rsrp = rsrp
        self._rsrq = rsrq

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LteNmrObj':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LteNmrObj of this LteNmrObj.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pci(self):
        """Gets the pci of this LteNmrObj.


        :return: The pci of this LteNmrObj.
        :rtype: int
        """
        return self._pci

    @pci.setter
    def pci(self, pci):
        """Sets the pci of this LteNmrObj.


        :param pci: The pci of this LteNmrObj.
        :type pci: int
        """
        if pci is None:
            raise ValueError("Invalid value for `pci`, must not be `None`")

        self._pci = pci

    @property
    def earfcn(self):
        """Gets the earfcn of this LteNmrObj.


        :return: The earfcn of this LteNmrObj.
        :rtype: int
        """
        return self._earfcn

    @earfcn.setter
    def earfcn(self, earfcn):
        """Sets the earfcn of this LteNmrObj.


        :param earfcn: The earfcn of this LteNmrObj.
        :type earfcn: int
        """
        if earfcn is None:
            raise ValueError("Invalid value for `earfcn`, must not be `None`")

        self._earfcn = earfcn

    @property
    def eutran_cid(self):
        """Gets the eutran_cid of this LteNmrObj.


        :return: The eutran_cid of this LteNmrObj.
        :rtype: int
        """
        return self._eutran_cid

    @eutran_cid.setter
    def eutran_cid(self, eutran_cid):
        """Sets the eutran_cid of this LteNmrObj.


        :param eutran_cid: The eutran_cid of this LteNmrObj.
        :type eutran_cid: int
        """
        if eutran_cid is None:
            raise ValueError("Invalid value for `eutran_cid`, must not be `None`")

        self._eutran_cid = eutran_cid

    @property
    def rsrp(self):
        """Gets the rsrp of this LteNmrObj.


        :return: The rsrp of this LteNmrObj.
        :rtype: int
        """
        return self._rsrp

    @rsrp.setter
    def rsrp(self, rsrp):
        """Sets the rsrp of this LteNmrObj.


        :param rsrp: The rsrp of this LteNmrObj.
        :type rsrp: int
        """

        self._rsrp = rsrp

    @property
    def rsrq(self):
        """Gets the rsrq of this LteNmrObj.


        :return: The rsrq of this LteNmrObj.
        :rtype: float
        """
        return self._rsrq

    @rsrq.setter
    def rsrq(self, rsrq):
        """Sets the rsrq of this LteNmrObj.


        :param rsrq: The rsrq of this LteNmrObj.
        :type rsrq: float
        """

        self._rsrq = rsrq
