# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.signing_alg import SigningAlg
from openapi_server import util


class CertificateList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, signing_alg: SigningAlg=None, value: str=None):
        """CertificateList - a model defined in OpenAPI

        :param signing_alg: The signing_alg of this CertificateList.
        :param value: The value of this CertificateList.
        """
        self.openapi_types = {
            'signing_alg': SigningAlg,
            'value': str
        }

        self.attribute_map = {
            'signing_alg': 'SigningAlg',
            'value': 'Value'
        }

        self._signing_alg = signing_alg
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateList of this CertificateList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def signing_alg(self):
        """Gets the signing_alg of this CertificateList.


        :return: The signing_alg of this CertificateList.
        :rtype: SigningAlg
        """
        return self._signing_alg

    @signing_alg.setter
    def signing_alg(self, signing_alg):
        """Sets the signing_alg of this CertificateList.


        :param signing_alg: The signing_alg of this CertificateList.
        :type signing_alg: SigningAlg
        """
        if signing_alg is None:
            raise ValueError("Invalid value for `signing_alg`, must not be `None`")

        self._signing_alg = signing_alg

    @property
    def value(self):
        """Gets the value of this CertificateList.


        :return: The value of this CertificateList.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CertificateList.


        :param value: The value of this CertificateList.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
