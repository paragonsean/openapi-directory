# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WiFiAccessPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mac_address: str=None, rss: int=None):
        """WiFiAccessPoint - a model defined in OpenAPI

        :param mac_address: The mac_address of this WiFiAccessPoint.
        :param rss: The rss of this WiFiAccessPoint.
        """
        self.openapi_types = {
            'mac_address': str,
            'rss': int
        }

        self.attribute_map = {
            'mac_address': 'MacAddress',
            'rss': 'Rss'
        }

        self._mac_address = mac_address
        self._rss = rss

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WiFiAccessPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WiFiAccessPoint of this WiFiAccessPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mac_address(self):
        """Gets the mac_address of this WiFiAccessPoint.


        :return: The mac_address of this WiFiAccessPoint.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this WiFiAccessPoint.


        :param mac_address: The mac_address of this WiFiAccessPoint.
        :type mac_address: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")

        self._mac_address = mac_address

    @property
    def rss(self):
        """Gets the rss of this WiFiAccessPoint.


        :return: The rss of this WiFiAccessPoint.
        :rtype: int
        """
        return self._rss

    @rss.setter
    def rss(self, rss):
        """Sets the rss of this WiFiAccessPoint.


        :param rss: The rss of this WiFiAccessPoint.
        :type rss: int
        """
        if rss is None:
            raise ValueError("Invalid value for `rss`, must not be `None`")

        self._rss = rss
