# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateMulticastGroupWithFuotaTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multicast_group_id: str=None):
        """AssociateMulticastGroupWithFuotaTaskRequest - a model defined in OpenAPI

        :param multicast_group_id: The multicast_group_id of this AssociateMulticastGroupWithFuotaTaskRequest.
        """
        self.openapi_types = {
            'multicast_group_id': str
        }

        self.attribute_map = {
            'multicast_group_id': 'MulticastGroupId'
        }

        self._multicast_group_id = multicast_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateMulticastGroupWithFuotaTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateMulticastGroupWithFuotaTask_request of this AssociateMulticastGroupWithFuotaTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multicast_group_id(self):
        """Gets the multicast_group_id of this AssociateMulticastGroupWithFuotaTaskRequest.

        The ID of the multicast group.

        :return: The multicast_group_id of this AssociateMulticastGroupWithFuotaTaskRequest.
        :rtype: str
        """
        return self._multicast_group_id

    @multicast_group_id.setter
    def multicast_group_id(self, multicast_group_id):
        """Sets the multicast_group_id of this AssociateMulticastGroupWithFuotaTaskRequest.

        The ID of the multicast group.

        :param multicast_group_id: The multicast_group_id of this AssociateMulticastGroupWithFuotaTaskRequest.
        :type multicast_group_id: str
        """
        if multicast_group_id is None:
            raise ValueError("Invalid value for `multicast_group_id`, must not be `None`")
        if multicast_group_id is not None and len(multicast_group_id) > 256:
            raise ValueError("Invalid value for `multicast_group_id`, length must be less than or equal to `256`")

        self._multicast_group_id = multicast_group_id
