# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.position_configuration_fec import PositionConfigurationFec
from openapi_server.models.position_configuration_status import PositionConfigurationStatus
from openapi_server import util


class PutPositionConfigurationRequestSolversSemtechGnss(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: PositionConfigurationStatus=None, fec: PositionConfigurationFec=None):
        """PutPositionConfigurationRequestSolversSemtechGnss - a model defined in OpenAPI

        :param status: The status of this PutPositionConfigurationRequestSolversSemtechGnss.
        :param fec: The fec of this PutPositionConfigurationRequestSolversSemtechGnss.
        """
        self.openapi_types = {
            'status': PositionConfigurationStatus,
            'fec': PositionConfigurationFec
        }

        self.attribute_map = {
            'status': 'Status',
            'fec': 'Fec'
        }

        self._status = status
        self._fec = fec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutPositionConfigurationRequestSolversSemtechGnss':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutPositionConfiguration_request_Solvers_SemtechGnss of this PutPositionConfigurationRequestSolversSemtechGnss.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this PutPositionConfigurationRequestSolversSemtechGnss.


        :return: The status of this PutPositionConfigurationRequestSolversSemtechGnss.
        :rtype: PositionConfigurationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PutPositionConfigurationRequestSolversSemtechGnss.


        :param status: The status of this PutPositionConfigurationRequestSolversSemtechGnss.
        :type status: PositionConfigurationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def fec(self):
        """Gets the fec of this PutPositionConfigurationRequestSolversSemtechGnss.


        :return: The fec of this PutPositionConfigurationRequestSolversSemtechGnss.
        :rtype: PositionConfigurationFec
        """
        return self._fec

    @fec.setter
    def fec(self, fec):
        """Sets the fec of this PutPositionConfigurationRequestSolversSemtechGnss.


        :param fec: The fec of this PutPositionConfigurationRequestSolversSemtechGnss.
        :type fec: PositionConfigurationFec
        """
        if fec is None:
            raise ValueError("Invalid value for `fec`, must not be `None`")

        self._fec = fec
