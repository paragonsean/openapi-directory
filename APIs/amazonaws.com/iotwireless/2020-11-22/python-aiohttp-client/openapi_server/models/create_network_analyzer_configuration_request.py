# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_analyzer_configuration_request_trace_content import CreateNetworkAnalyzerConfigurationRequestTraceContent
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateNetworkAnalyzerConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, trace_content: CreateNetworkAnalyzerConfigurationRequestTraceContent=None, wireless_devices: List[str]=None, wireless_gateways: List[str]=None, description: str=None, tags: List[Tag]=None, client_request_token: str=None, multicast_groups: List[str]=None):
        """CreateNetworkAnalyzerConfigurationRequest - a model defined in OpenAPI

        :param name: The name of this CreateNetworkAnalyzerConfigurationRequest.
        :param trace_content: The trace_content of this CreateNetworkAnalyzerConfigurationRequest.
        :param wireless_devices: The wireless_devices of this CreateNetworkAnalyzerConfigurationRequest.
        :param wireless_gateways: The wireless_gateways of this CreateNetworkAnalyzerConfigurationRequest.
        :param description: The description of this CreateNetworkAnalyzerConfigurationRequest.
        :param tags: The tags of this CreateNetworkAnalyzerConfigurationRequest.
        :param client_request_token: The client_request_token of this CreateNetworkAnalyzerConfigurationRequest.
        :param multicast_groups: The multicast_groups of this CreateNetworkAnalyzerConfigurationRequest.
        """
        self.openapi_types = {
            'name': str,
            'trace_content': CreateNetworkAnalyzerConfigurationRequestTraceContent,
            'wireless_devices': List[str],
            'wireless_gateways': List[str],
            'description': str,
            'tags': List[Tag],
            'client_request_token': str,
            'multicast_groups': List[str]
        }

        self.attribute_map = {
            'name': 'Name',
            'trace_content': 'TraceContent',
            'wireless_devices': 'WirelessDevices',
            'wireless_gateways': 'WirelessGateways',
            'description': 'Description',
            'tags': 'Tags',
            'client_request_token': 'ClientRequestToken',
            'multicast_groups': 'MulticastGroups'
        }

        self._name = name
        self._trace_content = trace_content
        self._wireless_devices = wireless_devices
        self._wireless_gateways = wireless_gateways
        self._description = description
        self._tags = tags
        self._client_request_token = client_request_token
        self._multicast_groups = multicast_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkAnalyzerConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateNetworkAnalyzerConfiguration_request of this CreateNetworkAnalyzerConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateNetworkAnalyzerConfigurationRequest.

        Name of the network analyzer configuration.

        :return: The name of this CreateNetworkAnalyzerConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkAnalyzerConfigurationRequest.

        Name of the network analyzer configuration.

        :param name: The name of this CreateNetworkAnalyzerConfigurationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 1024:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[a-zA-Z0-9-_]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9-_]+/`")

        self._name = name

    @property
    def trace_content(self):
        """Gets the trace_content of this CreateNetworkAnalyzerConfigurationRequest.


        :return: The trace_content of this CreateNetworkAnalyzerConfigurationRequest.
        :rtype: CreateNetworkAnalyzerConfigurationRequestTraceContent
        """
        return self._trace_content

    @trace_content.setter
    def trace_content(self, trace_content):
        """Sets the trace_content of this CreateNetworkAnalyzerConfigurationRequest.


        :param trace_content: The trace_content of this CreateNetworkAnalyzerConfigurationRequest.
        :type trace_content: CreateNetworkAnalyzerConfigurationRequestTraceContent
        """

        self._trace_content = trace_content

    @property
    def wireless_devices(self):
        """Gets the wireless_devices of this CreateNetworkAnalyzerConfigurationRequest.

        Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.

        :return: The wireless_devices of this CreateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._wireless_devices

    @wireless_devices.setter
    def wireless_devices(self, wireless_devices):
        """Sets the wireless_devices of this CreateNetworkAnalyzerConfigurationRequest.

        Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.

        :param wireless_devices: The wireless_devices of this CreateNetworkAnalyzerConfigurationRequest.
        :type wireless_devices: List[str]
        """
        if wireless_devices is not None and len(wireless_devices) > 250:
            raise ValueError("Invalid value for `wireless_devices`, number of items must be less than or equal to `250`")
        if wireless_devices is not None and len(wireless_devices) < 0:
            raise ValueError("Invalid value for `wireless_devices`, number of items must be greater than or equal to `0`")

        self._wireless_devices = wireless_devices

    @property
    def wireless_gateways(self):
        """Gets the wireless_gateways of this CreateNetworkAnalyzerConfigurationRequest.

        Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.

        :return: The wireless_gateways of this CreateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._wireless_gateways

    @wireless_gateways.setter
    def wireless_gateways(self, wireless_gateways):
        """Sets the wireless_gateways of this CreateNetworkAnalyzerConfigurationRequest.

        Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.

        :param wireless_gateways: The wireless_gateways of this CreateNetworkAnalyzerConfigurationRequest.
        :type wireless_gateways: List[str]
        """

        self._wireless_gateways = wireless_gateways

    @property
    def description(self):
        """Gets the description of this CreateNetworkAnalyzerConfigurationRequest.

        The description of the new resource.

        :return: The description of this CreateNetworkAnalyzerConfigurationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateNetworkAnalyzerConfigurationRequest.

        The description of the new resource.

        :param description: The description of this CreateNetworkAnalyzerConfigurationRequest.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateNetworkAnalyzerConfigurationRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :return: The tags of this CreateNetworkAnalyzerConfigurationRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateNetworkAnalyzerConfigurationRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :param tags: The tags of this CreateNetworkAnalyzerConfigurationRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateNetworkAnalyzerConfigurationRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :return: The client_request_token of this CreateNetworkAnalyzerConfigurationRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateNetworkAnalyzerConfigurationRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :param client_request_token: The client_request_token of this CreateNetworkAnalyzerConfigurationRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[a-zA-Z0-9-_]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]+$/`")

        self._client_request_token = client_request_token

    @property
    def multicast_groups(self):
        """Gets the multicast_groups of this CreateNetworkAnalyzerConfigurationRequest.

        Multicast Group resources to add to the network analyzer configruation. Provide the <code>MulticastGroupId</code> of the resource to add in the input array.

        :return: The multicast_groups of this CreateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._multicast_groups

    @multicast_groups.setter
    def multicast_groups(self, multicast_groups):
        """Sets the multicast_groups of this CreateNetworkAnalyzerConfigurationRequest.

        Multicast Group resources to add to the network analyzer configruation. Provide the <code>MulticastGroupId</code> of the resource to add in the input array.

        :param multicast_groups: The multicast_groups of this CreateNetworkAnalyzerConfigurationRequest.
        :type multicast_groups: List[str]
        """
        if multicast_groups is not None and len(multicast_groups) > 10:
            raise ValueError("Invalid value for `multicast_groups`, number of items must be less than or equal to `10`")
        if multicast_groups is not None and len(multicast_groups) < 0:
            raise ValueError("Invalid value for `multicast_groups`, number of items must be greater than or equal to `0`")

        self._multicast_groups = multicast_groups
