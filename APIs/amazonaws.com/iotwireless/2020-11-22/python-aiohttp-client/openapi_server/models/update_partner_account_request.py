# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_partner_account_request_sidewalk import UpdatePartnerAccountRequestSidewalk
from openapi_server import util


class UpdatePartnerAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sidewalk: UpdatePartnerAccountRequestSidewalk=None):
        """UpdatePartnerAccountRequest - a model defined in OpenAPI

        :param sidewalk: The sidewalk of this UpdatePartnerAccountRequest.
        """
        self.openapi_types = {
            'sidewalk': UpdatePartnerAccountRequestSidewalk
        }

        self.attribute_map = {
            'sidewalk': 'Sidewalk'
        }

        self._sidewalk = sidewalk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePartnerAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePartnerAccount_request of this UpdatePartnerAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sidewalk(self):
        """Gets the sidewalk of this UpdatePartnerAccountRequest.


        :return: The sidewalk of this UpdatePartnerAccountRequest.
        :rtype: UpdatePartnerAccountRequestSidewalk
        """
        return self._sidewalk

    @sidewalk.setter
    def sidewalk(self, sidewalk):
        """Sets the sidewalk of this UpdatePartnerAccountRequest.


        :param sidewalk: The sidewalk of this UpdatePartnerAccountRequest.
        :type sidewalk: UpdatePartnerAccountRequestSidewalk
        """
        if sidewalk is None:
            raise ValueError("Invalid value for `sidewalk`, must not be `None`")

        self._sidewalk = sidewalk
