# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.send_data_to_wireless_device_request_wireless_metadata_lo_ra_wan import SendDataToWirelessDeviceRequestWirelessMetadataLoRaWAN
from openapi_server.models.send_data_to_wireless_device_request_wireless_metadata_sidewalk import SendDataToWirelessDeviceRequestWirelessMetadataSidewalk
from openapi_server import util


class WirelessMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lo_ra_wan: SendDataToWirelessDeviceRequestWirelessMetadataLoRaWAN=None, sidewalk: SendDataToWirelessDeviceRequestWirelessMetadataSidewalk=None):
        """WirelessMetadata - a model defined in OpenAPI

        :param lo_ra_wan: The lo_ra_wan of this WirelessMetadata.
        :param sidewalk: The sidewalk of this WirelessMetadata.
        """
        self.openapi_types = {
            'lo_ra_wan': SendDataToWirelessDeviceRequestWirelessMetadataLoRaWAN,
            'sidewalk': SendDataToWirelessDeviceRequestWirelessMetadataSidewalk
        }

        self.attribute_map = {
            'lo_ra_wan': 'LoRaWAN',
            'sidewalk': 'Sidewalk'
        }

        self._lo_ra_wan = lo_ra_wan
        self._sidewalk = sidewalk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WirelessMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WirelessMetadata of this WirelessMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lo_ra_wan(self):
        """Gets the lo_ra_wan of this WirelessMetadata.


        :return: The lo_ra_wan of this WirelessMetadata.
        :rtype: SendDataToWirelessDeviceRequestWirelessMetadataLoRaWAN
        """
        return self._lo_ra_wan

    @lo_ra_wan.setter
    def lo_ra_wan(self, lo_ra_wan):
        """Sets the lo_ra_wan of this WirelessMetadata.


        :param lo_ra_wan: The lo_ra_wan of this WirelessMetadata.
        :type lo_ra_wan: SendDataToWirelessDeviceRequestWirelessMetadataLoRaWAN
        """

        self._lo_ra_wan = lo_ra_wan

    @property
    def sidewalk(self):
        """Gets the sidewalk of this WirelessMetadata.


        :return: The sidewalk of this WirelessMetadata.
        :rtype: SendDataToWirelessDeviceRequestWirelessMetadataSidewalk
        """
        return self._sidewalk

    @sidewalk.setter
    def sidewalk(self, sidewalk):
        """Sets the sidewalk of this WirelessMetadata.


        :param sidewalk: The sidewalk of this WirelessMetadata.
        :type sidewalk: SendDataToWirelessDeviceRequestWirelessMetadataSidewalk
        """

        self._sidewalk = sidewalk
