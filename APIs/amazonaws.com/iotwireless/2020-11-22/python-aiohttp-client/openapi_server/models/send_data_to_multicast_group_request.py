# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.send_data_to_multicast_group_request_wireless_metadata import SendDataToMulticastGroupRequestWirelessMetadata
import re
from openapi_server import util


class SendDataToMulticastGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payload_data: str=None, wireless_metadata: SendDataToMulticastGroupRequestWirelessMetadata=None):
        """SendDataToMulticastGroupRequest - a model defined in OpenAPI

        :param payload_data: The payload_data of this SendDataToMulticastGroupRequest.
        :param wireless_metadata: The wireless_metadata of this SendDataToMulticastGroupRequest.
        """
        self.openapi_types = {
            'payload_data': str,
            'wireless_metadata': SendDataToMulticastGroupRequestWirelessMetadata
        }

        self.attribute_map = {
            'payload_data': 'PayloadData',
            'wireless_metadata': 'WirelessMetadata'
        }

        self._payload_data = payload_data
        self._wireless_metadata = wireless_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendDataToMulticastGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendDataToMulticastGroup_request of this SendDataToMulticastGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload_data(self):
        """Gets the payload_data of this SendDataToMulticastGroupRequest.

        The binary to be sent to the end device, encoded in base64.

        :return: The payload_data of this SendDataToMulticastGroupRequest.
        :rtype: str
        """
        return self._payload_data

    @payload_data.setter
    def payload_data(self, payload_data):
        """Sets the payload_data of this SendDataToMulticastGroupRequest.

        The binary to be sent to the end device, encoded in base64.

        :param payload_data: The payload_data of this SendDataToMulticastGroupRequest.
        :type payload_data: str
        """
        if payload_data is None:
            raise ValueError("Invalid value for `payload_data`, must not be `None`")
        if payload_data is not None and len(payload_data) > 2048:
            raise ValueError("Invalid value for `payload_data`, length must be less than or equal to `2048`")
        if payload_data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', payload_data):
            raise ValueError("Invalid value for `payload_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._payload_data = payload_data

    @property
    def wireless_metadata(self):
        """Gets the wireless_metadata of this SendDataToMulticastGroupRequest.


        :return: The wireless_metadata of this SendDataToMulticastGroupRequest.
        :rtype: SendDataToMulticastGroupRequestWirelessMetadata
        """
        return self._wireless_metadata

    @wireless_metadata.setter
    def wireless_metadata(self, wireless_metadata):
        """Sets the wireless_metadata of this SendDataToMulticastGroupRequest.


        :param wireless_metadata: The wireless_metadata of this SendDataToMulticastGroupRequest.
        :type wireless_metadata: SendDataToMulticastGroupRequestWirelessMetadata
        """
        if wireless_metadata is None:
            raise ValueError("Invalid value for `wireless_metadata`, must not be `None`")

        self._wireless_metadata = wireless_metadata
