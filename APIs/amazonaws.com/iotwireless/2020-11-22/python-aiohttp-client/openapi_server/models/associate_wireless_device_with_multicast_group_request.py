# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateWirelessDeviceWithMulticastGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, wireless_device_id: str=None):
        """AssociateWirelessDeviceWithMulticastGroupRequest - a model defined in OpenAPI

        :param wireless_device_id: The wireless_device_id of this AssociateWirelessDeviceWithMulticastGroupRequest.
        """
        self.openapi_types = {
            'wireless_device_id': str
        }

        self.attribute_map = {
            'wireless_device_id': 'WirelessDeviceId'
        }

        self._wireless_device_id = wireless_device_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateWirelessDeviceWithMulticastGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateWirelessDeviceWithMulticastGroupRequest of this AssociateWirelessDeviceWithMulticastGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wireless_device_id(self):
        """Gets the wireless_device_id of this AssociateWirelessDeviceWithMulticastGroupRequest.

        The ID of the wireless device.

        :return: The wireless_device_id of this AssociateWirelessDeviceWithMulticastGroupRequest.
        :rtype: str
        """
        return self._wireless_device_id

    @wireless_device_id.setter
    def wireless_device_id(self, wireless_device_id):
        """Sets the wireless_device_id of this AssociateWirelessDeviceWithMulticastGroupRequest.

        The ID of the wireless device.

        :param wireless_device_id: The wireless_device_id of this AssociateWirelessDeviceWithMulticastGroupRequest.
        :type wireless_device_id: str
        """
        if wireless_device_id is None:
            raise ValueError("Invalid value for `wireless_device_id`, must not be `None`")
        if wireless_device_id is not None and len(wireless_device_id) > 256:
            raise ValueError("Invalid value for `wireless_device_id`, length must be less than or equal to `256`")

        self._wireless_device_id = wireless_device_id
