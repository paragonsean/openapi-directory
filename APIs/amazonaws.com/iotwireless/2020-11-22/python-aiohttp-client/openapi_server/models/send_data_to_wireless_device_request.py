# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.send_data_to_wireless_device_request_wireless_metadata import SendDataToWirelessDeviceRequestWirelessMetadata
import re
from openapi_server import util


class SendDataToWirelessDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transmit_mode: int=None, payload_data: str=None, wireless_metadata: SendDataToWirelessDeviceRequestWirelessMetadata=None):
        """SendDataToWirelessDeviceRequest - a model defined in OpenAPI

        :param transmit_mode: The transmit_mode of this SendDataToWirelessDeviceRequest.
        :param payload_data: The payload_data of this SendDataToWirelessDeviceRequest.
        :param wireless_metadata: The wireless_metadata of this SendDataToWirelessDeviceRequest.
        """
        self.openapi_types = {
            'transmit_mode': int,
            'payload_data': str,
            'wireless_metadata': SendDataToWirelessDeviceRequestWirelessMetadata
        }

        self.attribute_map = {
            'transmit_mode': 'TransmitMode',
            'payload_data': 'PayloadData',
            'wireless_metadata': 'WirelessMetadata'
        }

        self._transmit_mode = transmit_mode
        self._payload_data = payload_data
        self._wireless_metadata = wireless_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendDataToWirelessDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendDataToWirelessDevice_request of this SendDataToWirelessDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transmit_mode(self):
        """Gets the transmit_mode of this SendDataToWirelessDeviceRequest.

        The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).

        :return: The transmit_mode of this SendDataToWirelessDeviceRequest.
        :rtype: int
        """
        return self._transmit_mode

    @transmit_mode.setter
    def transmit_mode(self, transmit_mode):
        """Sets the transmit_mode of this SendDataToWirelessDeviceRequest.

        The transmit mode to use to send data to the wireless device. Can be: <code>0</code> for UM (unacknowledge mode) or <code>1</code> for AM (acknowledge mode).

        :param transmit_mode: The transmit_mode of this SendDataToWirelessDeviceRequest.
        :type transmit_mode: int
        """
        if transmit_mode is None:
            raise ValueError("Invalid value for `transmit_mode`, must not be `None`")
        if transmit_mode is not None and transmit_mode > 1:
            raise ValueError("Invalid value for `transmit_mode`, must be a value less than or equal to `1`")
        if transmit_mode is not None and transmit_mode < 0:
            raise ValueError("Invalid value for `transmit_mode`, must be a value greater than or equal to `0`")

        self._transmit_mode = transmit_mode

    @property
    def payload_data(self):
        """Gets the payload_data of this SendDataToWirelessDeviceRequest.

        The binary to be sent to the end device, encoded in base64.

        :return: The payload_data of this SendDataToWirelessDeviceRequest.
        :rtype: str
        """
        return self._payload_data

    @payload_data.setter
    def payload_data(self, payload_data):
        """Sets the payload_data of this SendDataToWirelessDeviceRequest.

        The binary to be sent to the end device, encoded in base64.

        :param payload_data: The payload_data of this SendDataToWirelessDeviceRequest.
        :type payload_data: str
        """
        if payload_data is None:
            raise ValueError("Invalid value for `payload_data`, must not be `None`")
        if payload_data is not None and len(payload_data) > 2048:
            raise ValueError("Invalid value for `payload_data`, length must be less than or equal to `2048`")
        if payload_data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', payload_data):
            raise ValueError("Invalid value for `payload_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._payload_data = payload_data

    @property
    def wireless_metadata(self):
        """Gets the wireless_metadata of this SendDataToWirelessDeviceRequest.


        :return: The wireless_metadata of this SendDataToWirelessDeviceRequest.
        :rtype: SendDataToWirelessDeviceRequestWirelessMetadata
        """
        return self._wireless_metadata

    @wireless_metadata.setter
    def wireless_metadata(self, wireless_metadata):
        """Sets the wireless_metadata of this SendDataToWirelessDeviceRequest.


        :param wireless_metadata: The wireless_metadata of this SendDataToWirelessDeviceRequest.
        :type wireless_metadata: SendDataToWirelessDeviceRequestWirelessMetadata
        """

        self._wireless_metadata = wireless_metadata
