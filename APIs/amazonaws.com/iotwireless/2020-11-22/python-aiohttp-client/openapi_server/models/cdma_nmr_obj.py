# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CdmaNmrObj(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pn_offset: int=None, cdma_channel: int=None, pilot_power: int=None, base_station_id: int=None):
        """CdmaNmrObj - a model defined in OpenAPI

        :param pn_offset: The pn_offset of this CdmaNmrObj.
        :param cdma_channel: The cdma_channel of this CdmaNmrObj.
        :param pilot_power: The pilot_power of this CdmaNmrObj.
        :param base_station_id: The base_station_id of this CdmaNmrObj.
        """
        self.openapi_types = {
            'pn_offset': int,
            'cdma_channel': int,
            'pilot_power': int,
            'base_station_id': int
        }

        self.attribute_map = {
            'pn_offset': 'PnOffset',
            'cdma_channel': 'CdmaChannel',
            'pilot_power': 'PilotPower',
            'base_station_id': 'BaseStationId'
        }

        self._pn_offset = pn_offset
        self._cdma_channel = cdma_channel
        self._pilot_power = pilot_power
        self._base_station_id = base_station_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CdmaNmrObj':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CdmaNmrObj of this CdmaNmrObj.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pn_offset(self):
        """Gets the pn_offset of this CdmaNmrObj.


        :return: The pn_offset of this CdmaNmrObj.
        :rtype: int
        """
        return self._pn_offset

    @pn_offset.setter
    def pn_offset(self, pn_offset):
        """Sets the pn_offset of this CdmaNmrObj.


        :param pn_offset: The pn_offset of this CdmaNmrObj.
        :type pn_offset: int
        """
        if pn_offset is None:
            raise ValueError("Invalid value for `pn_offset`, must not be `None`")

        self._pn_offset = pn_offset

    @property
    def cdma_channel(self):
        """Gets the cdma_channel of this CdmaNmrObj.


        :return: The cdma_channel of this CdmaNmrObj.
        :rtype: int
        """
        return self._cdma_channel

    @cdma_channel.setter
    def cdma_channel(self, cdma_channel):
        """Sets the cdma_channel of this CdmaNmrObj.


        :param cdma_channel: The cdma_channel of this CdmaNmrObj.
        :type cdma_channel: int
        """
        if cdma_channel is None:
            raise ValueError("Invalid value for `cdma_channel`, must not be `None`")

        self._cdma_channel = cdma_channel

    @property
    def pilot_power(self):
        """Gets the pilot_power of this CdmaNmrObj.


        :return: The pilot_power of this CdmaNmrObj.
        :rtype: int
        """
        return self._pilot_power

    @pilot_power.setter
    def pilot_power(self, pilot_power):
        """Sets the pilot_power of this CdmaNmrObj.


        :param pilot_power: The pilot_power of this CdmaNmrObj.
        :type pilot_power: int
        """

        self._pilot_power = pilot_power

    @property
    def base_station_id(self):
        """Gets the base_station_id of this CdmaNmrObj.


        :return: The base_station_id of this CdmaNmrObj.
        :rtype: int
        """
        return self._base_station_id

    @base_station_id.setter
    def base_station_id(self, base_station_id):
        """Sets the base_station_id of this CdmaNmrObj.


        :param base_station_id: The base_station_id of this CdmaNmrObj.
        :type base_station_id: int
        """

        self._base_station_id = base_station_id
