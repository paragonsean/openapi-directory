# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetPositionEstimateRequestGnss(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payload: str=None, capture_time: float=None, capture_time_accuracy: float=None, assist_position: List=None, assist_altitude: float=None, use2_d_solver: bool=None):
        """GetPositionEstimateRequestGnss - a model defined in OpenAPI

        :param payload: The payload of this GetPositionEstimateRequestGnss.
        :param capture_time: The capture_time of this GetPositionEstimateRequestGnss.
        :param capture_time_accuracy: The capture_time_accuracy of this GetPositionEstimateRequestGnss.
        :param assist_position: The assist_position of this GetPositionEstimateRequestGnss.
        :param assist_altitude: The assist_altitude of this GetPositionEstimateRequestGnss.
        :param use2_d_solver: The use2_d_solver of this GetPositionEstimateRequestGnss.
        """
        self.openapi_types = {
            'payload': str,
            'capture_time': float,
            'capture_time_accuracy': float,
            'assist_position': List,
            'assist_altitude': float,
            'use2_d_solver': bool
        }

        self.attribute_map = {
            'payload': 'Payload',
            'capture_time': 'CaptureTime',
            'capture_time_accuracy': 'CaptureTimeAccuracy',
            'assist_position': 'AssistPosition',
            'assist_altitude': 'AssistAltitude',
            'use2_d_solver': 'Use2DSolver'
        }

        self._payload = payload
        self._capture_time = capture_time
        self._capture_time_accuracy = capture_time_accuracy
        self._assist_position = assist_position
        self._assist_altitude = assist_altitude
        self._use2_d_solver = use2_d_solver

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPositionEstimateRequestGnss':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPositionEstimateRequest_Gnss of this GetPositionEstimateRequestGnss.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload(self):
        """Gets the payload of this GetPositionEstimateRequestGnss.


        :return: The payload of this GetPositionEstimateRequestGnss.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this GetPositionEstimateRequestGnss.


        :param payload: The payload of this GetPositionEstimateRequestGnss.
        :type payload: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def capture_time(self):
        """Gets the capture_time of this GetPositionEstimateRequestGnss.


        :return: The capture_time of this GetPositionEstimateRequestGnss.
        :rtype: float
        """
        return self._capture_time

    @capture_time.setter
    def capture_time(self, capture_time):
        """Sets the capture_time of this GetPositionEstimateRequestGnss.


        :param capture_time: The capture_time of this GetPositionEstimateRequestGnss.
        :type capture_time: float
        """

        self._capture_time = capture_time

    @property
    def capture_time_accuracy(self):
        """Gets the capture_time_accuracy of this GetPositionEstimateRequestGnss.


        :return: The capture_time_accuracy of this GetPositionEstimateRequestGnss.
        :rtype: float
        """
        return self._capture_time_accuracy

    @capture_time_accuracy.setter
    def capture_time_accuracy(self, capture_time_accuracy):
        """Sets the capture_time_accuracy of this GetPositionEstimateRequestGnss.


        :param capture_time_accuracy: The capture_time_accuracy of this GetPositionEstimateRequestGnss.
        :type capture_time_accuracy: float
        """

        self._capture_time_accuracy = capture_time_accuracy

    @property
    def assist_position(self):
        """Gets the assist_position of this GetPositionEstimateRequestGnss.


        :return: The assist_position of this GetPositionEstimateRequestGnss.
        :rtype: List
        """
        return self._assist_position

    @assist_position.setter
    def assist_position(self, assist_position):
        """Sets the assist_position of this GetPositionEstimateRequestGnss.


        :param assist_position: The assist_position of this GetPositionEstimateRequestGnss.
        :type assist_position: List
        """

        self._assist_position = assist_position

    @property
    def assist_altitude(self):
        """Gets the assist_altitude of this GetPositionEstimateRequestGnss.


        :return: The assist_altitude of this GetPositionEstimateRequestGnss.
        :rtype: float
        """
        return self._assist_altitude

    @assist_altitude.setter
    def assist_altitude(self, assist_altitude):
        """Sets the assist_altitude of this GetPositionEstimateRequestGnss.


        :param assist_altitude: The assist_altitude of this GetPositionEstimateRequestGnss.
        :type assist_altitude: float
        """

        self._assist_altitude = assist_altitude

    @property
    def use2_d_solver(self):
        """Gets the use2_d_solver of this GetPositionEstimateRequestGnss.


        :return: The use2_d_solver of this GetPositionEstimateRequestGnss.
        :rtype: bool
        """
        return self._use2_d_solver

    @use2_d_solver.setter
    def use2_d_solver(self, use2_d_solver):
        """Sets the use2_d_solver of this GetPositionEstimateRequestGnss.


        :param use2_d_solver: The use2_d_solver of this GetPositionEstimateRequestGnss.
        :type use2_d_solver: bool
        """

        self._use2_d_solver = use2_d_solver
