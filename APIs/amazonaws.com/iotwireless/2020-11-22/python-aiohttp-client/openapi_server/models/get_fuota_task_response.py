# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fuota_task_status import FuotaTaskStatus
from openapi_server.models.lo_ra_wan_fuota_task_get_info import LoRaWANFuotaTaskGetInfo
from openapi_server import util


class GetFuotaTaskResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, status: FuotaTaskStatus=None, name: str=None, description: str=None, lo_ra_wan: LoRaWANFuotaTaskGetInfo=None, firmware_update_image: str=None, firmware_update_role: str=None, created_at: datetime=None, redundancy_percent: int=None, fragment_size_bytes: int=None, fragment_interval_ms: int=None):
        """GetFuotaTaskResponse - a model defined in OpenAPI

        :param arn: The arn of this GetFuotaTaskResponse.
        :param id: The id of this GetFuotaTaskResponse.
        :param status: The status of this GetFuotaTaskResponse.
        :param name: The name of this GetFuotaTaskResponse.
        :param description: The description of this GetFuotaTaskResponse.
        :param lo_ra_wan: The lo_ra_wan of this GetFuotaTaskResponse.
        :param firmware_update_image: The firmware_update_image of this GetFuotaTaskResponse.
        :param firmware_update_role: The firmware_update_role of this GetFuotaTaskResponse.
        :param created_at: The created_at of this GetFuotaTaskResponse.
        :param redundancy_percent: The redundancy_percent of this GetFuotaTaskResponse.
        :param fragment_size_bytes: The fragment_size_bytes of this GetFuotaTaskResponse.
        :param fragment_interval_ms: The fragment_interval_ms of this GetFuotaTaskResponse.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'status': FuotaTaskStatus,
            'name': str,
            'description': str,
            'lo_ra_wan': LoRaWANFuotaTaskGetInfo,
            'firmware_update_image': str,
            'firmware_update_role': str,
            'created_at': datetime,
            'redundancy_percent': int,
            'fragment_size_bytes': int,
            'fragment_interval_ms': int
        }

        self.attribute_map = {
            'arn': 'Arn',
            'id': 'Id',
            'status': 'Status',
            'name': 'Name',
            'description': 'Description',
            'lo_ra_wan': 'LoRaWAN',
            'firmware_update_image': 'FirmwareUpdateImage',
            'firmware_update_role': 'FirmwareUpdateRole',
            'created_at': 'CreatedAt',
            'redundancy_percent': 'RedundancyPercent',
            'fragment_size_bytes': 'FragmentSizeBytes',
            'fragment_interval_ms': 'FragmentIntervalMS'
        }

        self._arn = arn
        self._id = id
        self._status = status
        self._name = name
        self._description = description
        self._lo_ra_wan = lo_ra_wan
        self._firmware_update_image = firmware_update_image
        self._firmware_update_role = firmware_update_role
        self._created_at = created_at
        self._redundancy_percent = redundancy_percent
        self._fragment_size_bytes = fragment_size_bytes
        self._fragment_interval_ms = fragment_interval_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFuotaTaskResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFuotaTaskResponse of this GetFuotaTaskResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this GetFuotaTaskResponse.

        The arn of a FUOTA task.

        :return: The arn of this GetFuotaTaskResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this GetFuotaTaskResponse.

        The arn of a FUOTA task.

        :param arn: The arn of this GetFuotaTaskResponse.
        :type arn: str
        """
        if arn is not None and len(arn) > 128:
            raise ValueError("Invalid value for `arn`, length must be less than or equal to `128`")

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this GetFuotaTaskResponse.

        The ID of a FUOTA task.

        :return: The id of this GetFuotaTaskResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetFuotaTaskResponse.

        The ID of a FUOTA task.

        :param id: The id of this GetFuotaTaskResponse.
        :type id: str
        """
        if id is not None and len(id) > 256:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `256`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this GetFuotaTaskResponse.


        :return: The status of this GetFuotaTaskResponse.
        :rtype: FuotaTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetFuotaTaskResponse.


        :param status: The status of this GetFuotaTaskResponse.
        :type status: FuotaTaskStatus
        """

        self._status = status

    @property
    def name(self):
        """Gets the name of this GetFuotaTaskResponse.

        The name of a FUOTA task.

        :return: The name of this GetFuotaTaskResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetFuotaTaskResponse.

        The name of a FUOTA task.

        :param name: The name of this GetFuotaTaskResponse.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetFuotaTaskResponse.

        The description of the new resource.

        :return: The description of this GetFuotaTaskResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetFuotaTaskResponse.

        The description of the new resource.

        :param description: The description of this GetFuotaTaskResponse.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")

        self._description = description

    @property
    def lo_ra_wan(self):
        """Gets the lo_ra_wan of this GetFuotaTaskResponse.


        :return: The lo_ra_wan of this GetFuotaTaskResponse.
        :rtype: LoRaWANFuotaTaskGetInfo
        """
        return self._lo_ra_wan

    @lo_ra_wan.setter
    def lo_ra_wan(self, lo_ra_wan):
        """Sets the lo_ra_wan of this GetFuotaTaskResponse.


        :param lo_ra_wan: The lo_ra_wan of this GetFuotaTaskResponse.
        :type lo_ra_wan: LoRaWANFuotaTaskGetInfo
        """

        self._lo_ra_wan = lo_ra_wan

    @property
    def firmware_update_image(self):
        """Gets the firmware_update_image of this GetFuotaTaskResponse.

        The S3 URI points to a firmware update image that is to be used with a FUOTA task.

        :return: The firmware_update_image of this GetFuotaTaskResponse.
        :rtype: str
        """
        return self._firmware_update_image

    @firmware_update_image.setter
    def firmware_update_image(self, firmware_update_image):
        """Sets the firmware_update_image of this GetFuotaTaskResponse.

        The S3 URI points to a firmware update image that is to be used with a FUOTA task.

        :param firmware_update_image: The firmware_update_image of this GetFuotaTaskResponse.
        :type firmware_update_image: str
        """
        if firmware_update_image is not None and len(firmware_update_image) > 4096:
            raise ValueError("Invalid value for `firmware_update_image`, length must be less than or equal to `4096`")
        if firmware_update_image is not None and len(firmware_update_image) < 1:
            raise ValueError("Invalid value for `firmware_update_image`, length must be greater than or equal to `1`")

        self._firmware_update_image = firmware_update_image

    @property
    def firmware_update_role(self):
        """Gets the firmware_update_role of this GetFuotaTaskResponse.

        The firmware update role that is to be used with a FUOTA task.

        :return: The firmware_update_role of this GetFuotaTaskResponse.
        :rtype: str
        """
        return self._firmware_update_role

    @firmware_update_role.setter
    def firmware_update_role(self, firmware_update_role):
        """Sets the firmware_update_role of this GetFuotaTaskResponse.

        The firmware update role that is to be used with a FUOTA task.

        :param firmware_update_role: The firmware_update_role of this GetFuotaTaskResponse.
        :type firmware_update_role: str
        """
        if firmware_update_role is not None and len(firmware_update_role) > 2048:
            raise ValueError("Invalid value for `firmware_update_role`, length must be less than or equal to `2048`")
        if firmware_update_role is not None and len(firmware_update_role) < 1:
            raise ValueError("Invalid value for `firmware_update_role`, length must be greater than or equal to `1`")

        self._firmware_update_role = firmware_update_role

    @property
    def created_at(self):
        """Gets the created_at of this GetFuotaTaskResponse.

        Created at timestamp for the resource.

        :return: The created_at of this GetFuotaTaskResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetFuotaTaskResponse.

        Created at timestamp for the resource.

        :param created_at: The created_at of this GetFuotaTaskResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def redundancy_percent(self):
        """Gets the redundancy_percent of this GetFuotaTaskResponse.

        The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.

        :return: The redundancy_percent of this GetFuotaTaskResponse.
        :rtype: int
        """
        return self._redundancy_percent

    @redundancy_percent.setter
    def redundancy_percent(self, redundancy_percent):
        """Sets the redundancy_percent of this GetFuotaTaskResponse.

        The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.

        :param redundancy_percent: The redundancy_percent of this GetFuotaTaskResponse.
        :type redundancy_percent: int
        """
        if redundancy_percent is not None and redundancy_percent > 100:
            raise ValueError("Invalid value for `redundancy_percent`, must be a value less than or equal to `100`")
        if redundancy_percent is not None and redundancy_percent < 0:
            raise ValueError("Invalid value for `redundancy_percent`, must be a value greater than or equal to `0`")

        self._redundancy_percent = redundancy_percent

    @property
    def fragment_size_bytes(self):
        """Gets the fragment_size_bytes of this GetFuotaTaskResponse.

        The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.

        :return: The fragment_size_bytes of this GetFuotaTaskResponse.
        :rtype: int
        """
        return self._fragment_size_bytes

    @fragment_size_bytes.setter
    def fragment_size_bytes(self, fragment_size_bytes):
        """Sets the fragment_size_bytes of this GetFuotaTaskResponse.

        The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.

        :param fragment_size_bytes: The fragment_size_bytes of this GetFuotaTaskResponse.
        :type fragment_size_bytes: int
        """
        if fragment_size_bytes is not None and fragment_size_bytes < 1:
            raise ValueError("Invalid value for `fragment_size_bytes`, must be a value greater than or equal to `1`")

        self._fragment_size_bytes = fragment_size_bytes

    @property
    def fragment_interval_ms(self):
        """Gets the fragment_interval_ms of this GetFuotaTaskResponse.

        <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>

        :return: The fragment_interval_ms of this GetFuotaTaskResponse.
        :rtype: int
        """
        return self._fragment_interval_ms

    @fragment_interval_ms.setter
    def fragment_interval_ms(self, fragment_interval_ms):
        """Sets the fragment_interval_ms of this GetFuotaTaskResponse.

        <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>

        :param fragment_interval_ms: The fragment_interval_ms of this GetFuotaTaskResponse.
        :type fragment_interval_ms: int
        """
        if fragment_interval_ms is not None and fragment_interval_ms < 1:
            raise ValueError("Invalid value for `fragment_interval_ms`, must be a value greater than or equal to `1`")

        self._fragment_interval_ms = fragment_interval_ms
