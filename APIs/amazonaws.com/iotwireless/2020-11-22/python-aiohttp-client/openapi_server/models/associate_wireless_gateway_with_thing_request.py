# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateWirelessGatewayWithThingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, thing_arn: str=None):
        """AssociateWirelessGatewayWithThingRequest - a model defined in OpenAPI

        :param thing_arn: The thing_arn of this AssociateWirelessGatewayWithThingRequest.
        """
        self.openapi_types = {
            'thing_arn': str
        }

        self.attribute_map = {
            'thing_arn': 'ThingArn'
        }

        self._thing_arn = thing_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateWirelessGatewayWithThingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateWirelessGatewayWithThing_request of this AssociateWirelessGatewayWithThingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def thing_arn(self):
        """Gets the thing_arn of this AssociateWirelessGatewayWithThingRequest.

        The ARN of the thing to associate with the wireless gateway.

        :return: The thing_arn of this AssociateWirelessGatewayWithThingRequest.
        :rtype: str
        """
        return self._thing_arn

    @thing_arn.setter
    def thing_arn(self, thing_arn):
        """Sets the thing_arn of this AssociateWirelessGatewayWithThingRequest.

        The ARN of the thing to associate with the wireless gateway.

        :param thing_arn: The thing_arn of this AssociateWirelessGatewayWithThingRequest.
        :type thing_arn: str
        """
        if thing_arn is None:
            raise ValueError("Invalid value for `thing_arn`, must not be `None`")

        self._thing_arn = thing_arn
