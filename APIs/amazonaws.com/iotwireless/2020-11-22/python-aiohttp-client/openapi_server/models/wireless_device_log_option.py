# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_level import LogLevel
from openapi_server.models.wireless_device_event_log_option import WirelessDeviceEventLogOption
from openapi_server.models.wireless_device_type import WirelessDeviceType
from openapi_server import util


class WirelessDeviceLogOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: WirelessDeviceType=None, log_level: LogLevel=None, events: List[WirelessDeviceEventLogOption]=None):
        """WirelessDeviceLogOption - a model defined in OpenAPI

        :param type: The type of this WirelessDeviceLogOption.
        :param log_level: The log_level of this WirelessDeviceLogOption.
        :param events: The events of this WirelessDeviceLogOption.
        """
        self.openapi_types = {
            'type': WirelessDeviceType,
            'log_level': LogLevel,
            'events': List[WirelessDeviceEventLogOption]
        }

        self.attribute_map = {
            'type': 'Type',
            'log_level': 'LogLevel',
            'events': 'Events'
        }

        self._type = type
        self._log_level = log_level
        self._events = events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WirelessDeviceLogOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WirelessDeviceLogOption of this WirelessDeviceLogOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this WirelessDeviceLogOption.


        :return: The type of this WirelessDeviceLogOption.
        :rtype: WirelessDeviceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WirelessDeviceLogOption.


        :param type: The type of this WirelessDeviceLogOption.
        :type type: WirelessDeviceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def log_level(self):
        """Gets the log_level of this WirelessDeviceLogOption.


        :return: The log_level of this WirelessDeviceLogOption.
        :rtype: LogLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this WirelessDeviceLogOption.


        :param log_level: The log_level of this WirelessDeviceLogOption.
        :type log_level: LogLevel
        """
        if log_level is None:
            raise ValueError("Invalid value for `log_level`, must not be `None`")

        self._log_level = log_level

    @property
    def events(self):
        """Gets the events of this WirelessDeviceLogOption.

        The list of wireless device event log options.

        :return: The events of this WirelessDeviceLogOption.
        :rtype: List[WirelessDeviceEventLogOption]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WirelessDeviceLogOption.

        The list of wireless device event log options.

        :param events: The events of this WirelessDeviceLogOption.
        :type events: List[WirelessDeviceEventLogOption]
        """

        self._events = events
