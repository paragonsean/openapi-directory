# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutResourceLogLevelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_level: str=None):
        """PutResourceLogLevelRequest - a model defined in OpenAPI

        :param log_level: The log_level of this PutResourceLogLevelRequest.
        """
        self.openapi_types = {
            'log_level': str
        }

        self.attribute_map = {
            'log_level': 'LogLevel'
        }

        self._log_level = log_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutResourceLogLevelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutResourceLogLevel_request of this PutResourceLogLevelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_level(self):
        """Gets the log_level of this PutResourceLogLevelRequest.

        The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.

        :return: The log_level of this PutResourceLogLevelRequest.
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this PutResourceLogLevelRequest.

        The log level for a log message. The log levels can be disabled, or set to <code>ERROR</code> to display less verbose logs containing only error information, or to <code>INFO</code> for more detailed logs.

        :param log_level: The log_level of this PutResourceLogLevelRequest.
        :type log_level: str
        """
        allowed_values = ["INFO", "ERROR", "DISABLED"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"
                .format(log_level, allowed_values)
            )

        self._log_level = log_level
