# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_position_estimate_request_cell_towers import GetPositionEstimateRequestCellTowers
from openapi_server.models.get_position_estimate_request_gnss import GetPositionEstimateRequestGnss
from openapi_server.models.get_position_estimate_request_ip import GetPositionEstimateRequestIp
from openapi_server.models.wi_fi_access_point import WiFiAccessPoint
from openapi_server import util


class GetPositionEstimateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, wi_fi_access_points: List[WiFiAccessPoint]=None, cell_towers: GetPositionEstimateRequestCellTowers=None, ip: GetPositionEstimateRequestIp=None, gnss: GetPositionEstimateRequestGnss=None, timestamp: datetime=None):
        """GetPositionEstimateRequest - a model defined in OpenAPI

        :param wi_fi_access_points: The wi_fi_access_points of this GetPositionEstimateRequest.
        :param cell_towers: The cell_towers of this GetPositionEstimateRequest.
        :param ip: The ip of this GetPositionEstimateRequest.
        :param gnss: The gnss of this GetPositionEstimateRequest.
        :param timestamp: The timestamp of this GetPositionEstimateRequest.
        """
        self.openapi_types = {
            'wi_fi_access_points': List[WiFiAccessPoint],
            'cell_towers': GetPositionEstimateRequestCellTowers,
            'ip': GetPositionEstimateRequestIp,
            'gnss': GetPositionEstimateRequestGnss,
            'timestamp': datetime
        }

        self.attribute_map = {
            'wi_fi_access_points': 'WiFiAccessPoints',
            'cell_towers': 'CellTowers',
            'ip': 'Ip',
            'gnss': 'Gnss',
            'timestamp': 'Timestamp'
        }

        self._wi_fi_access_points = wi_fi_access_points
        self._cell_towers = cell_towers
        self._ip = ip
        self._gnss = gnss
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPositionEstimateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPositionEstimate_request of this GetPositionEstimateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wi_fi_access_points(self):
        """Gets the wi_fi_access_points of this GetPositionEstimateRequest.

        Retrieves an estimated device position by resolving WLAN measurement data. The position is resolved using HERE's Wi-Fi based solver.

        :return: The wi_fi_access_points of this GetPositionEstimateRequest.
        :rtype: List[WiFiAccessPoint]
        """
        return self._wi_fi_access_points

    @wi_fi_access_points.setter
    def wi_fi_access_points(self, wi_fi_access_points):
        """Sets the wi_fi_access_points of this GetPositionEstimateRequest.

        Retrieves an estimated device position by resolving WLAN measurement data. The position is resolved using HERE's Wi-Fi based solver.

        :param wi_fi_access_points: The wi_fi_access_points of this GetPositionEstimateRequest.
        :type wi_fi_access_points: List[WiFiAccessPoint]
        """

        self._wi_fi_access_points = wi_fi_access_points

    @property
    def cell_towers(self):
        """Gets the cell_towers of this GetPositionEstimateRequest.


        :return: The cell_towers of this GetPositionEstimateRequest.
        :rtype: GetPositionEstimateRequestCellTowers
        """
        return self._cell_towers

    @cell_towers.setter
    def cell_towers(self, cell_towers):
        """Sets the cell_towers of this GetPositionEstimateRequest.


        :param cell_towers: The cell_towers of this GetPositionEstimateRequest.
        :type cell_towers: GetPositionEstimateRequestCellTowers
        """

        self._cell_towers = cell_towers

    @property
    def ip(self):
        """Gets the ip of this GetPositionEstimateRequest.


        :return: The ip of this GetPositionEstimateRequest.
        :rtype: GetPositionEstimateRequestIp
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this GetPositionEstimateRequest.


        :param ip: The ip of this GetPositionEstimateRequest.
        :type ip: GetPositionEstimateRequestIp
        """

        self._ip = ip

    @property
    def gnss(self):
        """Gets the gnss of this GetPositionEstimateRequest.


        :return: The gnss of this GetPositionEstimateRequest.
        :rtype: GetPositionEstimateRequestGnss
        """
        return self._gnss

    @gnss.setter
    def gnss(self, gnss):
        """Sets the gnss of this GetPositionEstimateRequest.


        :param gnss: The gnss of this GetPositionEstimateRequest.
        :type gnss: GetPositionEstimateRequestGnss
        """

        self._gnss = gnss

    @property
    def timestamp(self):
        """Gets the timestamp of this GetPositionEstimateRequest.

        Optional information that specifies the time when the position information will be resolved. It uses the Unix timestamp format. If not specified, the time at which the request was received will be used.

        :return: The timestamp of this GetPositionEstimateRequest.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GetPositionEstimateRequest.

        Optional information that specifies the time when the position information will be resolved. It uses the Unix timestamp format. If not specified, the time at which the request was received will be used.

        :param timestamp: The timestamp of this GetPositionEstimateRequest.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
