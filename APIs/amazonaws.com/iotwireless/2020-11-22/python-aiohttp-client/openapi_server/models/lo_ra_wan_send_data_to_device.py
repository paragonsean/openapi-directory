# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lo_ra_wan_send_data_to_device_participating_gateways import LoRaWANSendDataToDeviceParticipatingGateways
from openapi_server import util


class LoRaWANSendDataToDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, f_port: int=None, participating_gateways: LoRaWANSendDataToDeviceParticipatingGateways=None):
        """LoRaWANSendDataToDevice - a model defined in OpenAPI

        :param f_port: The f_port of this LoRaWANSendDataToDevice.
        :param participating_gateways: The participating_gateways of this LoRaWANSendDataToDevice.
        """
        self.openapi_types = {
            'f_port': int,
            'participating_gateways': LoRaWANSendDataToDeviceParticipatingGateways
        }

        self.attribute_map = {
            'f_port': 'FPort',
            'participating_gateways': 'ParticipatingGateways'
        }

        self._f_port = f_port
        self._participating_gateways = participating_gateways

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoRaWANSendDataToDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoRaWANSendDataToDevice of this LoRaWANSendDataToDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def f_port(self):
        """Gets the f_port of this LoRaWANSendDataToDevice.

        The Fport value.

        :return: The f_port of this LoRaWANSendDataToDevice.
        :rtype: int
        """
        return self._f_port

    @f_port.setter
    def f_port(self, f_port):
        """Sets the f_port of this LoRaWANSendDataToDevice.

        The Fport value.

        :param f_port: The f_port of this LoRaWANSendDataToDevice.
        :type f_port: int
        """
        if f_port is not None and f_port > 223:
            raise ValueError("Invalid value for `f_port`, must be a value less than or equal to `223`")
        if f_port is not None and f_port < 1:
            raise ValueError("Invalid value for `f_port`, must be a value greater than or equal to `1`")

        self._f_port = f_port

    @property
    def participating_gateways(self):
        """Gets the participating_gateways of this LoRaWANSendDataToDevice.


        :return: The participating_gateways of this LoRaWANSendDataToDevice.
        :rtype: LoRaWANSendDataToDeviceParticipatingGateways
        """
        return self._participating_gateways

    @participating_gateways.setter
    def participating_gateways(self, participating_gateways):
        """Sets the participating_gateways of this LoRaWANSendDataToDevice.


        :param participating_gateways: The participating_gateways of this LoRaWANSendDataToDevice.
        :type participating_gateways: LoRaWANSendDataToDeviceParticipatingGateways
        """

        self._participating_gateways = participating_gateways
