# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_wireless_gateway_task_definition_request_update import CreateWirelessGatewayTaskDefinitionRequestUpdate
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateWirelessGatewayTaskDefinitionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_create_tasks: bool=None, name: str=None, update: CreateWirelessGatewayTaskDefinitionRequestUpdate=None, client_request_token: str=None, tags: List[Tag]=None):
        """CreateWirelessGatewayTaskDefinitionRequest - a model defined in OpenAPI

        :param auto_create_tasks: The auto_create_tasks of this CreateWirelessGatewayTaskDefinitionRequest.
        :param name: The name of this CreateWirelessGatewayTaskDefinitionRequest.
        :param update: The update of this CreateWirelessGatewayTaskDefinitionRequest.
        :param client_request_token: The client_request_token of this CreateWirelessGatewayTaskDefinitionRequest.
        :param tags: The tags of this CreateWirelessGatewayTaskDefinitionRequest.
        """
        self.openapi_types = {
            'auto_create_tasks': bool,
            'name': str,
            'update': CreateWirelessGatewayTaskDefinitionRequestUpdate,
            'client_request_token': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'auto_create_tasks': 'AutoCreateTasks',
            'name': 'Name',
            'update': 'Update',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags'
        }

        self._auto_create_tasks = auto_create_tasks
        self._name = name
        self._update = update
        self._client_request_token = client_request_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWirelessGatewayTaskDefinitionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWirelessGatewayTaskDefinition_request of this CreateWirelessGatewayTaskDefinitionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_create_tasks(self):
        """Gets the auto_create_tasks of this CreateWirelessGatewayTaskDefinitionRequest.

        Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.

        :return: The auto_create_tasks of this CreateWirelessGatewayTaskDefinitionRequest.
        :rtype: bool
        """
        return self._auto_create_tasks

    @auto_create_tasks.setter
    def auto_create_tasks(self, auto_create_tasks):
        """Sets the auto_create_tasks of this CreateWirelessGatewayTaskDefinitionRequest.

        Whether to automatically create tasks using this task definition for all gateways with the specified current version. If <code>false</code>, the task must me created by calling <code>CreateWirelessGatewayTask</code>.

        :param auto_create_tasks: The auto_create_tasks of this CreateWirelessGatewayTaskDefinitionRequest.
        :type auto_create_tasks: bool
        """
        if auto_create_tasks is None:
            raise ValueError("Invalid value for `auto_create_tasks`, must not be `None`")

        self._auto_create_tasks = auto_create_tasks

    @property
    def name(self):
        """Gets the name of this CreateWirelessGatewayTaskDefinitionRequest.

        The name of the new resource.

        :return: The name of this CreateWirelessGatewayTaskDefinitionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWirelessGatewayTaskDefinitionRequest.

        The name of the new resource.

        :param name: The name of this CreateWirelessGatewayTaskDefinitionRequest.
        :type name: str
        """
        if name is not None and len(name) > 2048:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `2048`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def update(self):
        """Gets the update of this CreateWirelessGatewayTaskDefinitionRequest.


        :return: The update of this CreateWirelessGatewayTaskDefinitionRequest.
        :rtype: CreateWirelessGatewayTaskDefinitionRequestUpdate
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this CreateWirelessGatewayTaskDefinitionRequest.


        :param update: The update of this CreateWirelessGatewayTaskDefinitionRequest.
        :type update: CreateWirelessGatewayTaskDefinitionRequestUpdate
        """

        self._update = update

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateWirelessGatewayTaskDefinitionRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :return: The client_request_token of this CreateWirelessGatewayTaskDefinitionRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateWirelessGatewayTaskDefinitionRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :param client_request_token: The client_request_token of this CreateWirelessGatewayTaskDefinitionRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[a-zA-Z0-9-_]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]+$/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateWirelessGatewayTaskDefinitionRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :return: The tags of this CreateWirelessGatewayTaskDefinitionRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWirelessGatewayTaskDefinitionRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :param tags: The tags of this CreateWirelessGatewayTaskDefinitionRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
