# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_service_profile_request_lo_ra_wan import CreateServiceProfileRequestLoRaWAN
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateServiceProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, lo_ra_wan: CreateServiceProfileRequestLoRaWAN=None, tags: List[Tag]=None, client_request_token: str=None):
        """CreateServiceProfileRequest - a model defined in OpenAPI

        :param name: The name of this CreateServiceProfileRequest.
        :param lo_ra_wan: The lo_ra_wan of this CreateServiceProfileRequest.
        :param tags: The tags of this CreateServiceProfileRequest.
        :param client_request_token: The client_request_token of this CreateServiceProfileRequest.
        """
        self.openapi_types = {
            'name': str,
            'lo_ra_wan': CreateServiceProfileRequestLoRaWAN,
            'tags': List[Tag],
            'client_request_token': str
        }

        self.attribute_map = {
            'name': 'Name',
            'lo_ra_wan': 'LoRaWAN',
            'tags': 'Tags',
            'client_request_token': 'ClientRequestToken'
        }

        self._name = name
        self._lo_ra_wan = lo_ra_wan
        self._tags = tags
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServiceProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServiceProfile_request of this CreateServiceProfileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateServiceProfileRequest.

        The name of the new resource.

        :return: The name of this CreateServiceProfileRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateServiceProfileRequest.

        The name of the new resource.

        :param name: The name of this CreateServiceProfileRequest.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def lo_ra_wan(self):
        """Gets the lo_ra_wan of this CreateServiceProfileRequest.


        :return: The lo_ra_wan of this CreateServiceProfileRequest.
        :rtype: CreateServiceProfileRequestLoRaWAN
        """
        return self._lo_ra_wan

    @lo_ra_wan.setter
    def lo_ra_wan(self, lo_ra_wan):
        """Sets the lo_ra_wan of this CreateServiceProfileRequest.


        :param lo_ra_wan: The lo_ra_wan of this CreateServiceProfileRequest.
        :type lo_ra_wan: CreateServiceProfileRequestLoRaWAN
        """

        self._lo_ra_wan = lo_ra_wan

    @property
    def tags(self):
        """Gets the tags of this CreateServiceProfileRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :return: The tags of this CreateServiceProfileRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateServiceProfileRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :param tags: The tags of this CreateServiceProfileRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateServiceProfileRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :return: The client_request_token of this CreateServiceProfileRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateServiceProfileRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :param client_request_token: The client_request_token of this CreateServiceProfileRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[a-zA-Z0-9-_]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]+$/`")

        self._client_request_token = client_request_token
