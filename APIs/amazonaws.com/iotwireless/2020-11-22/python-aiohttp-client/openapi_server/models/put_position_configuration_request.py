# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_position_configuration_request_solvers import PutPositionConfigurationRequestSolvers
import re
from openapi_server import util


class PutPositionConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, solvers: PutPositionConfigurationRequestSolvers=None, destination: str=None):
        """PutPositionConfigurationRequest - a model defined in OpenAPI

        :param solvers: The solvers of this PutPositionConfigurationRequest.
        :param destination: The destination of this PutPositionConfigurationRequest.
        """
        self.openapi_types = {
            'solvers': PutPositionConfigurationRequestSolvers,
            'destination': str
        }

        self.attribute_map = {
            'solvers': 'Solvers',
            'destination': 'Destination'
        }

        self._solvers = solvers
        self._destination = destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutPositionConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutPositionConfiguration_request of this PutPositionConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def solvers(self):
        """Gets the solvers of this PutPositionConfigurationRequest.


        :return: The solvers of this PutPositionConfigurationRequest.
        :rtype: PutPositionConfigurationRequestSolvers
        """
        return self._solvers

    @solvers.setter
    def solvers(self, solvers):
        """Sets the solvers of this PutPositionConfigurationRequest.


        :param solvers: The solvers of this PutPositionConfigurationRequest.
        :type solvers: PutPositionConfigurationRequestSolvers
        """

        self._solvers = solvers

    @property
    def destination(self):
        """Gets the destination of this PutPositionConfigurationRequest.

        The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.

        :return: The destination of this PutPositionConfigurationRequest.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this PutPositionConfigurationRequest.

        The position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.

        :param destination: The destination of this PutPositionConfigurationRequest.
        :type destination: str
        """
        if destination is not None and len(destination) > 128:
            raise ValueError("Invalid value for `destination`, length must be less than or equal to `128`")
        if destination is not None and not re.search(r'[a-zA-Z0-9-_]+', destination):
            raise ValueError("Invalid value for `destination`, must be a follow pattern or equal to `/[a-zA-Z0-9-_]+/`")

        self._destination = destination
