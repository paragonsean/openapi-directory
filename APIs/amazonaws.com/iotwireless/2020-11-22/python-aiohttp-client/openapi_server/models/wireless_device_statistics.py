# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fuota_device_status import FuotaDeviceStatus
from openapi_server.models.wireless_device_statistics_lo_ra_wan import WirelessDeviceStatisticsLoRaWAN
from openapi_server.models.wireless_device_statistics_sidewalk import WirelessDeviceStatisticsSidewalk
from openapi_server.models.wireless_device_type import WirelessDeviceType
from openapi_server import util


class WirelessDeviceStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, id: str=None, type: WirelessDeviceType=None, name: str=None, destination_name: str=None, last_uplink_received_at: str=None, lo_ra_wan: WirelessDeviceStatisticsLoRaWAN=None, sidewalk: WirelessDeviceStatisticsSidewalk=None, fuota_device_status: FuotaDeviceStatus=None, multicast_device_status: str=None, mc_group_id: int=None):
        """WirelessDeviceStatistics - a model defined in OpenAPI

        :param arn: The arn of this WirelessDeviceStatistics.
        :param id: The id of this WirelessDeviceStatistics.
        :param type: The type of this WirelessDeviceStatistics.
        :param name: The name of this WirelessDeviceStatistics.
        :param destination_name: The destination_name of this WirelessDeviceStatistics.
        :param last_uplink_received_at: The last_uplink_received_at of this WirelessDeviceStatistics.
        :param lo_ra_wan: The lo_ra_wan of this WirelessDeviceStatistics.
        :param sidewalk: The sidewalk of this WirelessDeviceStatistics.
        :param fuota_device_status: The fuota_device_status of this WirelessDeviceStatistics.
        :param multicast_device_status: The multicast_device_status of this WirelessDeviceStatistics.
        :param mc_group_id: The mc_group_id of this WirelessDeviceStatistics.
        """
        self.openapi_types = {
            'arn': str,
            'id': str,
            'type': WirelessDeviceType,
            'name': str,
            'destination_name': str,
            'last_uplink_received_at': str,
            'lo_ra_wan': WirelessDeviceStatisticsLoRaWAN,
            'sidewalk': WirelessDeviceStatisticsSidewalk,
            'fuota_device_status': FuotaDeviceStatus,
            'multicast_device_status': str,
            'mc_group_id': int
        }

        self.attribute_map = {
            'arn': 'Arn',
            'id': 'Id',
            'type': 'Type',
            'name': 'Name',
            'destination_name': 'DestinationName',
            'last_uplink_received_at': 'LastUplinkReceivedAt',
            'lo_ra_wan': 'LoRaWAN',
            'sidewalk': 'Sidewalk',
            'fuota_device_status': 'FuotaDeviceStatus',
            'multicast_device_status': 'MulticastDeviceStatus',
            'mc_group_id': 'McGroupId'
        }

        self._arn = arn
        self._id = id
        self._type = type
        self._name = name
        self._destination_name = destination_name
        self._last_uplink_received_at = last_uplink_received_at
        self._lo_ra_wan = lo_ra_wan
        self._sidewalk = sidewalk
        self._fuota_device_status = fuota_device_status
        self._multicast_device_status = multicast_device_status
        self._mc_group_id = mc_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WirelessDeviceStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WirelessDeviceStatistics of this WirelessDeviceStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this WirelessDeviceStatistics.


        :return: The arn of this WirelessDeviceStatistics.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this WirelessDeviceStatistics.


        :param arn: The arn of this WirelessDeviceStatistics.
        :type arn: str
        """

        self._arn = arn

    @property
    def id(self):
        """Gets the id of this WirelessDeviceStatistics.


        :return: The id of this WirelessDeviceStatistics.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WirelessDeviceStatistics.


        :param id: The id of this WirelessDeviceStatistics.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this WirelessDeviceStatistics.


        :return: The type of this WirelessDeviceStatistics.
        :rtype: WirelessDeviceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WirelessDeviceStatistics.


        :param type: The type of this WirelessDeviceStatistics.
        :type type: WirelessDeviceType
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this WirelessDeviceStatistics.


        :return: The name of this WirelessDeviceStatistics.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WirelessDeviceStatistics.


        :param name: The name of this WirelessDeviceStatistics.
        :type name: str
        """

        self._name = name

    @property
    def destination_name(self):
        """Gets the destination_name of this WirelessDeviceStatistics.


        :return: The destination_name of this WirelessDeviceStatistics.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this WirelessDeviceStatistics.


        :param destination_name: The destination_name of this WirelessDeviceStatistics.
        :type destination_name: str
        """

        self._destination_name = destination_name

    @property
    def last_uplink_received_at(self):
        """Gets the last_uplink_received_at of this WirelessDeviceStatistics.


        :return: The last_uplink_received_at of this WirelessDeviceStatistics.
        :rtype: str
        """
        return self._last_uplink_received_at

    @last_uplink_received_at.setter
    def last_uplink_received_at(self, last_uplink_received_at):
        """Sets the last_uplink_received_at of this WirelessDeviceStatistics.


        :param last_uplink_received_at: The last_uplink_received_at of this WirelessDeviceStatistics.
        :type last_uplink_received_at: str
        """

        self._last_uplink_received_at = last_uplink_received_at

    @property
    def lo_ra_wan(self):
        """Gets the lo_ra_wan of this WirelessDeviceStatistics.


        :return: The lo_ra_wan of this WirelessDeviceStatistics.
        :rtype: WirelessDeviceStatisticsLoRaWAN
        """
        return self._lo_ra_wan

    @lo_ra_wan.setter
    def lo_ra_wan(self, lo_ra_wan):
        """Sets the lo_ra_wan of this WirelessDeviceStatistics.


        :param lo_ra_wan: The lo_ra_wan of this WirelessDeviceStatistics.
        :type lo_ra_wan: WirelessDeviceStatisticsLoRaWAN
        """

        self._lo_ra_wan = lo_ra_wan

    @property
    def sidewalk(self):
        """Gets the sidewalk of this WirelessDeviceStatistics.


        :return: The sidewalk of this WirelessDeviceStatistics.
        :rtype: WirelessDeviceStatisticsSidewalk
        """
        return self._sidewalk

    @sidewalk.setter
    def sidewalk(self, sidewalk):
        """Sets the sidewalk of this WirelessDeviceStatistics.


        :param sidewalk: The sidewalk of this WirelessDeviceStatistics.
        :type sidewalk: WirelessDeviceStatisticsSidewalk
        """

        self._sidewalk = sidewalk

    @property
    def fuota_device_status(self):
        """Gets the fuota_device_status of this WirelessDeviceStatistics.


        :return: The fuota_device_status of this WirelessDeviceStatistics.
        :rtype: FuotaDeviceStatus
        """
        return self._fuota_device_status

    @fuota_device_status.setter
    def fuota_device_status(self, fuota_device_status):
        """Sets the fuota_device_status of this WirelessDeviceStatistics.


        :param fuota_device_status: The fuota_device_status of this WirelessDeviceStatistics.
        :type fuota_device_status: FuotaDeviceStatus
        """

        self._fuota_device_status = fuota_device_status

    @property
    def multicast_device_status(self):
        """Gets the multicast_device_status of this WirelessDeviceStatistics.


        :return: The multicast_device_status of this WirelessDeviceStatistics.
        :rtype: str
        """
        return self._multicast_device_status

    @multicast_device_status.setter
    def multicast_device_status(self, multicast_device_status):
        """Sets the multicast_device_status of this WirelessDeviceStatistics.


        :param multicast_device_status: The multicast_device_status of this WirelessDeviceStatistics.
        :type multicast_device_status: str
        """

        self._multicast_device_status = multicast_device_status

    @property
    def mc_group_id(self):
        """Gets the mc_group_id of this WirelessDeviceStatistics.

        Id of the multicast group.

        :return: The mc_group_id of this WirelessDeviceStatistics.
        :rtype: int
        """
        return self._mc_group_id

    @mc_group_id.setter
    def mc_group_id(self, mc_group_id):
        """Sets the mc_group_id of this WirelessDeviceStatistics.

        Id of the multicast group.

        :param mc_group_id: The mc_group_id of this WirelessDeviceStatistics.
        :type mc_group_id: int
        """
        if mc_group_id is not None and mc_group_id > 256:
            raise ValueError("Invalid value for `mc_group_id`, must be a value less than or equal to `256`")
        if mc_group_id is not None and mc_group_id < 1:
            raise ValueError("Invalid value for `mc_group_id`, must be a value greater than or equal to `1`")

        self._mc_group_id = mc_group_id
