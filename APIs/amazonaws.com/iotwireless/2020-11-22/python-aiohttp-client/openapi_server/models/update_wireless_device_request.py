# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_wireless_device_request_lo_ra_wan import UpdateWirelessDeviceRequestLoRaWAN
import re
from openapi_server import util


class UpdateWirelessDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_name: str=None, name: str=None, description: str=None, lo_ra_wan: UpdateWirelessDeviceRequestLoRaWAN=None, positioning: str=None):
        """UpdateWirelessDeviceRequest - a model defined in OpenAPI

        :param destination_name: The destination_name of this UpdateWirelessDeviceRequest.
        :param name: The name of this UpdateWirelessDeviceRequest.
        :param description: The description of this UpdateWirelessDeviceRequest.
        :param lo_ra_wan: The lo_ra_wan of this UpdateWirelessDeviceRequest.
        :param positioning: The positioning of this UpdateWirelessDeviceRequest.
        """
        self.openapi_types = {
            'destination_name': str,
            'name': str,
            'description': str,
            'lo_ra_wan': UpdateWirelessDeviceRequestLoRaWAN,
            'positioning': str
        }

        self.attribute_map = {
            'destination_name': 'DestinationName',
            'name': 'Name',
            'description': 'Description',
            'lo_ra_wan': 'LoRaWAN',
            'positioning': 'Positioning'
        }

        self._destination_name = destination_name
        self._name = name
        self._description = description
        self._lo_ra_wan = lo_ra_wan
        self._positioning = positioning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWirelessDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWirelessDevice_request of this UpdateWirelessDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_name(self):
        """Gets the destination_name of this UpdateWirelessDeviceRequest.

        The name of the new destination for the device.

        :return: The destination_name of this UpdateWirelessDeviceRequest.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this UpdateWirelessDeviceRequest.

        The name of the new destination for the device.

        :param destination_name: The destination_name of this UpdateWirelessDeviceRequest.
        :type destination_name: str
        """
        if destination_name is not None and len(destination_name) > 128:
            raise ValueError("Invalid value for `destination_name`, length must be less than or equal to `128`")
        if destination_name is not None and not re.search(r'[a-zA-Z0-9-_]+', destination_name):
            raise ValueError("Invalid value for `destination_name`, must be a follow pattern or equal to `/[a-zA-Z0-9-_]+/`")

        self._destination_name = destination_name

    @property
    def name(self):
        """Gets the name of this UpdateWirelessDeviceRequest.

        The new name of the resource.

        :return: The name of this UpdateWirelessDeviceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateWirelessDeviceRequest.

        The new name of the resource.

        :param name: The name of this UpdateWirelessDeviceRequest.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdateWirelessDeviceRequest.

        The description of the new resource.

        :return: The description of this UpdateWirelessDeviceRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateWirelessDeviceRequest.

        The description of the new resource.

        :param description: The description of this UpdateWirelessDeviceRequest.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")

        self._description = description

    @property
    def lo_ra_wan(self):
        """Gets the lo_ra_wan of this UpdateWirelessDeviceRequest.


        :return: The lo_ra_wan of this UpdateWirelessDeviceRequest.
        :rtype: UpdateWirelessDeviceRequestLoRaWAN
        """
        return self._lo_ra_wan

    @lo_ra_wan.setter
    def lo_ra_wan(self, lo_ra_wan):
        """Sets the lo_ra_wan of this UpdateWirelessDeviceRequest.


        :param lo_ra_wan: The lo_ra_wan of this UpdateWirelessDeviceRequest.
        :type lo_ra_wan: UpdateWirelessDeviceRequestLoRaWAN
        """

        self._lo_ra_wan = lo_ra_wan

    @property
    def positioning(self):
        """Gets the positioning of this UpdateWirelessDeviceRequest.

        FPort values for the GNSS, stream, and ClockSync functions of the positioning information.

        :return: The positioning of this UpdateWirelessDeviceRequest.
        :rtype: str
        """
        return self._positioning

    @positioning.setter
    def positioning(self, positioning):
        """Sets the positioning of this UpdateWirelessDeviceRequest.

        FPort values for the GNSS, stream, and ClockSync functions of the positioning information.

        :param positioning: The positioning of this UpdateWirelessDeviceRequest.
        :type positioning: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if positioning not in allowed_values:
            raise ValueError(
                "Invalid value for `positioning` ({0}), must be one of {1}"
                .format(positioning, allowed_values)
            )

        self._positioning = positioning
