# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.downlink_mode import DownlinkMode
from openapi_server import util


class ParticipatingGateways(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, downlink_mode: DownlinkMode=None, gateway_list: List=None, transmission_interval: int=None):
        """ParticipatingGateways - a model defined in OpenAPI

        :param downlink_mode: The downlink_mode of this ParticipatingGateways.
        :param gateway_list: The gateway_list of this ParticipatingGateways.
        :param transmission_interval: The transmission_interval of this ParticipatingGateways.
        """
        self.openapi_types = {
            'downlink_mode': DownlinkMode,
            'gateway_list': List,
            'transmission_interval': int
        }

        self.attribute_map = {
            'downlink_mode': 'DownlinkMode',
            'gateway_list': 'GatewayList',
            'transmission_interval': 'TransmissionInterval'
        }

        self._downlink_mode = downlink_mode
        self._gateway_list = gateway_list
        self._transmission_interval = transmission_interval

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParticipatingGateways':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParticipatingGateways of this ParticipatingGateways.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def downlink_mode(self):
        """Gets the downlink_mode of this ParticipatingGateways.


        :return: The downlink_mode of this ParticipatingGateways.
        :rtype: DownlinkMode
        """
        return self._downlink_mode

    @downlink_mode.setter
    def downlink_mode(self, downlink_mode):
        """Sets the downlink_mode of this ParticipatingGateways.


        :param downlink_mode: The downlink_mode of this ParticipatingGateways.
        :type downlink_mode: DownlinkMode
        """
        if downlink_mode is None:
            raise ValueError("Invalid value for `downlink_mode`, must not be `None`")

        self._downlink_mode = downlink_mode

    @property
    def gateway_list(self):
        """Gets the gateway_list of this ParticipatingGateways.


        :return: The gateway_list of this ParticipatingGateways.
        :rtype: List
        """
        return self._gateway_list

    @gateway_list.setter
    def gateway_list(self, gateway_list):
        """Sets the gateway_list of this ParticipatingGateways.


        :param gateway_list: The gateway_list of this ParticipatingGateways.
        :type gateway_list: List
        """
        if gateway_list is None:
            raise ValueError("Invalid value for `gateway_list`, must not be `None`")

        self._gateway_list = gateway_list

    @property
    def transmission_interval(self):
        """Gets the transmission_interval of this ParticipatingGateways.


        :return: The transmission_interval of this ParticipatingGateways.
        :rtype: int
        """
        return self._transmission_interval

    @transmission_interval.setter
    def transmission_interval(self, transmission_interval):
        """Sets the transmission_interval of this ParticipatingGateways.


        :param transmission_interval: The transmission_interval of this ParticipatingGateways.
        :type transmission_interval: int
        """
        if transmission_interval is None:
            raise ValueError("Invalid value for `transmission_interval`, must not be `None`")

        self._transmission_interval = transmission_interval
