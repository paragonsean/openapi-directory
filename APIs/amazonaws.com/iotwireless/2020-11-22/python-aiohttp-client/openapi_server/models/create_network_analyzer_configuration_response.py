# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateNetworkAnalyzerConfigurationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None):
        """CreateNetworkAnalyzerConfigurationResponse - a model defined in OpenAPI

        :param arn: The arn of this CreateNetworkAnalyzerConfigurationResponse.
        :param name: The name of this CreateNetworkAnalyzerConfigurationResponse.
        """
        self.openapi_types = {
            'arn': str,
            'name': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'name': 'Name'
        }

        self._arn = arn
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkAnalyzerConfigurationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateNetworkAnalyzerConfigurationResponse of this CreateNetworkAnalyzerConfigurationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CreateNetworkAnalyzerConfigurationResponse.


        :return: The arn of this CreateNetworkAnalyzerConfigurationResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateNetworkAnalyzerConfigurationResponse.


        :param arn: The arn of this CreateNetworkAnalyzerConfigurationResponse.
        :type arn: str
        """

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this CreateNetworkAnalyzerConfigurationResponse.

        Name of the network analyzer configuration.

        :return: The name of this CreateNetworkAnalyzerConfigurationResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkAnalyzerConfigurationResponse.

        Name of the network analyzer configuration.

        :param name: The name of this CreateNetworkAnalyzerConfigurationResponse.
        :type name: str
        """
        if name is not None and len(name) > 1024:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[a-zA-Z0-9-_]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9-_]+/`")

        self._name = name
