# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_notification_item_configurations import EventNotificationItemConfigurations
from openapi_server.models.event_notification_partner_type import EventNotificationPartnerType
from openapi_server.models.identifier_type import IdentifierType
from openapi_server import util


class EventConfigurationItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, identifier_type: IdentifierType=None, partner_type: EventNotificationPartnerType=None, events: EventNotificationItemConfigurations=None):
        """EventConfigurationItem - a model defined in OpenAPI

        :param identifier: The identifier of this EventConfigurationItem.
        :param identifier_type: The identifier_type of this EventConfigurationItem.
        :param partner_type: The partner_type of this EventConfigurationItem.
        :param events: The events of this EventConfigurationItem.
        """
        self.openapi_types = {
            'identifier': str,
            'identifier_type': IdentifierType,
            'partner_type': EventNotificationPartnerType,
            'events': EventNotificationItemConfigurations
        }

        self.attribute_map = {
            'identifier': 'Identifier',
            'identifier_type': 'IdentifierType',
            'partner_type': 'PartnerType',
            'events': 'Events'
        }

        self._identifier = identifier
        self._identifier_type = identifier_type
        self._partner_type = partner_type
        self._events = events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventConfigurationItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventConfigurationItem of this EventConfigurationItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this EventConfigurationItem.


        :return: The identifier of this EventConfigurationItem.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this EventConfigurationItem.


        :param identifier: The identifier of this EventConfigurationItem.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def identifier_type(self):
        """Gets the identifier_type of this EventConfigurationItem.


        :return: The identifier_type of this EventConfigurationItem.
        :rtype: IdentifierType
        """
        return self._identifier_type

    @identifier_type.setter
    def identifier_type(self, identifier_type):
        """Sets the identifier_type of this EventConfigurationItem.


        :param identifier_type: The identifier_type of this EventConfigurationItem.
        :type identifier_type: IdentifierType
        """

        self._identifier_type = identifier_type

    @property
    def partner_type(self):
        """Gets the partner_type of this EventConfigurationItem.


        :return: The partner_type of this EventConfigurationItem.
        :rtype: EventNotificationPartnerType
        """
        return self._partner_type

    @partner_type.setter
    def partner_type(self, partner_type):
        """Sets the partner_type of this EventConfigurationItem.


        :param partner_type: The partner_type of this EventConfigurationItem.
        :type partner_type: EventNotificationPartnerType
        """

        self._partner_type = partner_type

    @property
    def events(self):
        """Gets the events of this EventConfigurationItem.


        :return: The events of this EventConfigurationItem.
        :rtype: EventNotificationItemConfigurations
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this EventConfigurationItem.


        :param events: The events of this EventConfigurationItem.
        :type events: EventNotificationItemConfigurations
        """

        self._events = events
