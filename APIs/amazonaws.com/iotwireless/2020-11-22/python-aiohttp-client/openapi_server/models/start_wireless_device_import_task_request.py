# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_wireless_device_import_task_request_sidewalk import StartWirelessDeviceImportTaskRequestSidewalk
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class StartWirelessDeviceImportTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_name: str=None, client_request_token: str=None, tags: List[Tag]=None, sidewalk: StartWirelessDeviceImportTaskRequestSidewalk=None):
        """StartWirelessDeviceImportTaskRequest - a model defined in OpenAPI

        :param destination_name: The destination_name of this StartWirelessDeviceImportTaskRequest.
        :param client_request_token: The client_request_token of this StartWirelessDeviceImportTaskRequest.
        :param tags: The tags of this StartWirelessDeviceImportTaskRequest.
        :param sidewalk: The sidewalk of this StartWirelessDeviceImportTaskRequest.
        """
        self.openapi_types = {
            'destination_name': str,
            'client_request_token': str,
            'tags': List[Tag],
            'sidewalk': StartWirelessDeviceImportTaskRequestSidewalk
        }

        self.attribute_map = {
            'destination_name': 'DestinationName',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags',
            'sidewalk': 'Sidewalk'
        }

        self._destination_name = destination_name
        self._client_request_token = client_request_token
        self._tags = tags
        self._sidewalk = sidewalk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartWirelessDeviceImportTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartWirelessDeviceImportTask_request of this StartWirelessDeviceImportTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_name(self):
        """Gets the destination_name of this StartWirelessDeviceImportTaskRequest.

        The name of the Sidewalk destination that describes the IoT rule to route messages from the devices in the import task that are onboarded to AWS IoT Wireless.

        :return: The destination_name of this StartWirelessDeviceImportTaskRequest.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this StartWirelessDeviceImportTaskRequest.

        The name of the Sidewalk destination that describes the IoT rule to route messages from the devices in the import task that are onboarded to AWS IoT Wireless.

        :param destination_name: The destination_name of this StartWirelessDeviceImportTaskRequest.
        :type destination_name: str
        """
        if destination_name is None:
            raise ValueError("Invalid value for `destination_name`, must not be `None`")
        if destination_name is not None and len(destination_name) > 128:
            raise ValueError("Invalid value for `destination_name`, length must be less than or equal to `128`")
        if destination_name is not None and not re.search(r'[a-zA-Z0-9-_]+', destination_name):
            raise ValueError("Invalid value for `destination_name`, must be a follow pattern or equal to `/[a-zA-Z0-9-_]+/`")

        self._destination_name = destination_name

    @property
    def client_request_token(self):
        """Gets the client_request_token of this StartWirelessDeviceImportTaskRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :return: The client_request_token of this StartWirelessDeviceImportTaskRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this StartWirelessDeviceImportTaskRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :param client_request_token: The client_request_token of this StartWirelessDeviceImportTaskRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[a-zA-Z0-9-_]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]+$/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this StartWirelessDeviceImportTaskRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :return: The tags of this StartWirelessDeviceImportTaskRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartWirelessDeviceImportTaskRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :param tags: The tags of this StartWirelessDeviceImportTaskRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def sidewalk(self):
        """Gets the sidewalk of this StartWirelessDeviceImportTaskRequest.


        :return: The sidewalk of this StartWirelessDeviceImportTaskRequest.
        :rtype: StartWirelessDeviceImportTaskRequestSidewalk
        """
        return self._sidewalk

    @sidewalk.setter
    def sidewalk(self, sidewalk):
        """Sets the sidewalk of this StartWirelessDeviceImportTaskRequest.


        :param sidewalk: The sidewalk of this StartWirelessDeviceImportTaskRequest.
        :type sidewalk: StartWirelessDeviceImportTaskRequestSidewalk
        """
        if sidewalk is None:
            raise ValueError("Invalid value for `sidewalk`, must not be `None`")

        self._sidewalk = sidewalk
