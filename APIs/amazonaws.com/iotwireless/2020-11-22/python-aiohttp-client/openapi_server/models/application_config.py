# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_config_type import ApplicationConfigType
from openapi_server import util


class ApplicationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, f_port: int=None, type: ApplicationConfigType=None, destination_name: str=None):
        """ApplicationConfig - a model defined in OpenAPI

        :param f_port: The f_port of this ApplicationConfig.
        :param type: The type of this ApplicationConfig.
        :param destination_name: The destination_name of this ApplicationConfig.
        """
        self.openapi_types = {
            'f_port': int,
            'type': ApplicationConfigType,
            'destination_name': str
        }

        self.attribute_map = {
            'f_port': 'FPort',
            'type': 'Type',
            'destination_name': 'DestinationName'
        }

        self._f_port = f_port
        self._type = type
        self._destination_name = destination_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationConfig of this ApplicationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def f_port(self):
        """Gets the f_port of this ApplicationConfig.

        The Fport value.

        :return: The f_port of this ApplicationConfig.
        :rtype: int
        """
        return self._f_port

    @f_port.setter
    def f_port(self, f_port):
        """Sets the f_port of this ApplicationConfig.

        The Fport value.

        :param f_port: The f_port of this ApplicationConfig.
        :type f_port: int
        """
        if f_port is not None and f_port > 223:
            raise ValueError("Invalid value for `f_port`, must be a value less than or equal to `223`")
        if f_port is not None and f_port < 1:
            raise ValueError("Invalid value for `f_port`, must be a value greater than or equal to `1`")

        self._f_port = f_port

    @property
    def type(self):
        """Gets the type of this ApplicationConfig.


        :return: The type of this ApplicationConfig.
        :rtype: ApplicationConfigType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplicationConfig.


        :param type: The type of this ApplicationConfig.
        :type type: ApplicationConfigType
        """

        self._type = type

    @property
    def destination_name(self):
        """Gets the destination_name of this ApplicationConfig.


        :return: The destination_name of this ApplicationConfig.
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this ApplicationConfig.


        :param destination_name: The destination_name of this ApplicationConfig.
        :type destination_name: str
        """

        self._destination_name = destination_name
