# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_analyzer_configuration_request_trace_content import CreateNetworkAnalyzerConfigurationRequestTraceContent
from openapi_server import util


class UpdateNetworkAnalyzerConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, trace_content: CreateNetworkAnalyzerConfigurationRequestTraceContent=None, wireless_devices_to_add: List[str]=None, wireless_devices_to_remove: List[str]=None, wireless_gateways_to_add: List[str]=None, wireless_gateways_to_remove: List[str]=None, description: str=None, multicast_groups_to_add: List[str]=None, multicast_groups_to_remove: List[str]=None):
        """UpdateNetworkAnalyzerConfigurationRequest - a model defined in OpenAPI

        :param trace_content: The trace_content of this UpdateNetworkAnalyzerConfigurationRequest.
        :param wireless_devices_to_add: The wireless_devices_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :param wireless_devices_to_remove: The wireless_devices_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        :param wireless_gateways_to_add: The wireless_gateways_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :param wireless_gateways_to_remove: The wireless_gateways_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        :param description: The description of this UpdateNetworkAnalyzerConfigurationRequest.
        :param multicast_groups_to_add: The multicast_groups_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :param multicast_groups_to_remove: The multicast_groups_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        """
        self.openapi_types = {
            'trace_content': CreateNetworkAnalyzerConfigurationRequestTraceContent,
            'wireless_devices_to_add': List[str],
            'wireless_devices_to_remove': List[str],
            'wireless_gateways_to_add': List[str],
            'wireless_gateways_to_remove': List[str],
            'description': str,
            'multicast_groups_to_add': List[str],
            'multicast_groups_to_remove': List[str]
        }

        self.attribute_map = {
            'trace_content': 'TraceContent',
            'wireless_devices_to_add': 'WirelessDevicesToAdd',
            'wireless_devices_to_remove': 'WirelessDevicesToRemove',
            'wireless_gateways_to_add': 'WirelessGatewaysToAdd',
            'wireless_gateways_to_remove': 'WirelessGatewaysToRemove',
            'description': 'Description',
            'multicast_groups_to_add': 'MulticastGroupsToAdd',
            'multicast_groups_to_remove': 'MulticastGroupsToRemove'
        }

        self._trace_content = trace_content
        self._wireless_devices_to_add = wireless_devices_to_add
        self._wireless_devices_to_remove = wireless_devices_to_remove
        self._wireless_gateways_to_add = wireless_gateways_to_add
        self._wireless_gateways_to_remove = wireless_gateways_to_remove
        self._description = description
        self._multicast_groups_to_add = multicast_groups_to_add
        self._multicast_groups_to_remove = multicast_groups_to_remove

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateNetworkAnalyzerConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateNetworkAnalyzerConfiguration_request of this UpdateNetworkAnalyzerConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trace_content(self):
        """Gets the trace_content of this UpdateNetworkAnalyzerConfigurationRequest.


        :return: The trace_content of this UpdateNetworkAnalyzerConfigurationRequest.
        :rtype: CreateNetworkAnalyzerConfigurationRequestTraceContent
        """
        return self._trace_content

    @trace_content.setter
    def trace_content(self, trace_content):
        """Sets the trace_content of this UpdateNetworkAnalyzerConfigurationRequest.


        :param trace_content: The trace_content of this UpdateNetworkAnalyzerConfigurationRequest.
        :type trace_content: CreateNetworkAnalyzerConfigurationRequestTraceContent
        """

        self._trace_content = trace_content

    @property
    def wireless_devices_to_add(self):
        """Gets the wireless_devices_to_add of this UpdateNetworkAnalyzerConfigurationRequest.

        Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.

        :return: The wireless_devices_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._wireless_devices_to_add

    @wireless_devices_to_add.setter
    def wireless_devices_to_add(self, wireless_devices_to_add):
        """Sets the wireless_devices_to_add of this UpdateNetworkAnalyzerConfigurationRequest.

        Wireless device resources to add to the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resource to add in the input array.

        :param wireless_devices_to_add: The wireless_devices_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :type wireless_devices_to_add: List[str]
        """
        if wireless_devices_to_add is not None and len(wireless_devices_to_add) > 250:
            raise ValueError("Invalid value for `wireless_devices_to_add`, number of items must be less than or equal to `250`")
        if wireless_devices_to_add is not None and len(wireless_devices_to_add) < 0:
            raise ValueError("Invalid value for `wireless_devices_to_add`, number of items must be greater than or equal to `0`")

        self._wireless_devices_to_add = wireless_devices_to_add

    @property
    def wireless_devices_to_remove(self):
        """Gets the wireless_devices_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.

        Wireless device resources to remove from the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resources to remove in the input array.

        :return: The wireless_devices_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._wireless_devices_to_remove

    @wireless_devices_to_remove.setter
    def wireless_devices_to_remove(self, wireless_devices_to_remove):
        """Sets the wireless_devices_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.

        Wireless device resources to remove from the network analyzer configuration. Provide the <code>WirelessDeviceId</code> of the resources to remove in the input array.

        :param wireless_devices_to_remove: The wireless_devices_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        :type wireless_devices_to_remove: List[str]
        """
        if wireless_devices_to_remove is not None and len(wireless_devices_to_remove) > 250:
            raise ValueError("Invalid value for `wireless_devices_to_remove`, number of items must be less than or equal to `250`")
        if wireless_devices_to_remove is not None and len(wireless_devices_to_remove) < 0:
            raise ValueError("Invalid value for `wireless_devices_to_remove`, number of items must be greater than or equal to `0`")

        self._wireless_devices_to_remove = wireless_devices_to_remove

    @property
    def wireless_gateways_to_add(self):
        """Gets the wireless_gateways_to_add of this UpdateNetworkAnalyzerConfigurationRequest.

        Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.

        :return: The wireless_gateways_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._wireless_gateways_to_add

    @wireless_gateways_to_add.setter
    def wireless_gateways_to_add(self, wireless_gateways_to_add):
        """Sets the wireless_gateways_to_add of this UpdateNetworkAnalyzerConfigurationRequest.

        Wireless gateway resources to add to the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resource to add in the input array.

        :param wireless_gateways_to_add: The wireless_gateways_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :type wireless_gateways_to_add: List[str]
        """

        self._wireless_gateways_to_add = wireless_gateways_to_add

    @property
    def wireless_gateways_to_remove(self):
        """Gets the wireless_gateways_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.

        Wireless gateway resources to remove from the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resources to remove in the input array.

        :return: The wireless_gateways_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._wireless_gateways_to_remove

    @wireless_gateways_to_remove.setter
    def wireless_gateways_to_remove(self, wireless_gateways_to_remove):
        """Sets the wireless_gateways_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.

        Wireless gateway resources to remove from the network analyzer configuration. Provide the <code>WirelessGatewayId</code> of the resources to remove in the input array.

        :param wireless_gateways_to_remove: The wireless_gateways_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        :type wireless_gateways_to_remove: List[str]
        """

        self._wireless_gateways_to_remove = wireless_gateways_to_remove

    @property
    def description(self):
        """Gets the description of this UpdateNetworkAnalyzerConfigurationRequest.

        The description of the new resource.

        :return: The description of this UpdateNetworkAnalyzerConfigurationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateNetworkAnalyzerConfigurationRequest.

        The description of the new resource.

        :param description: The description of this UpdateNetworkAnalyzerConfigurationRequest.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")

        self._description = description

    @property
    def multicast_groups_to_add(self):
        """Gets the multicast_groups_to_add of this UpdateNetworkAnalyzerConfigurationRequest.

        Multicast group resources to add to the network analyzer configuration. Provide the <code>MulticastGroupId</code> of the resource to add in the input array.

        :return: The multicast_groups_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._multicast_groups_to_add

    @multicast_groups_to_add.setter
    def multicast_groups_to_add(self, multicast_groups_to_add):
        """Sets the multicast_groups_to_add of this UpdateNetworkAnalyzerConfigurationRequest.

        Multicast group resources to add to the network analyzer configuration. Provide the <code>MulticastGroupId</code> of the resource to add in the input array.

        :param multicast_groups_to_add: The multicast_groups_to_add of this UpdateNetworkAnalyzerConfigurationRequest.
        :type multicast_groups_to_add: List[str]
        """
        if multicast_groups_to_add is not None and len(multicast_groups_to_add) > 10:
            raise ValueError("Invalid value for `multicast_groups_to_add`, number of items must be less than or equal to `10`")
        if multicast_groups_to_add is not None and len(multicast_groups_to_add) < 0:
            raise ValueError("Invalid value for `multicast_groups_to_add`, number of items must be greater than or equal to `0`")

        self._multicast_groups_to_add = multicast_groups_to_add

    @property
    def multicast_groups_to_remove(self):
        """Gets the multicast_groups_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.

        Multicast group resources to remove from the network analyzer configuration. Provide the <code>MulticastGroupId</code> of the resource to remove in the input array.

        :return: The multicast_groups_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        :rtype: List[str]
        """
        return self._multicast_groups_to_remove

    @multicast_groups_to_remove.setter
    def multicast_groups_to_remove(self, multicast_groups_to_remove):
        """Sets the multicast_groups_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.

        Multicast group resources to remove from the network analyzer configuration. Provide the <code>MulticastGroupId</code> of the resource to remove in the input array.

        :param multicast_groups_to_remove: The multicast_groups_to_remove of this UpdateNetworkAnalyzerConfigurationRequest.
        :type multicast_groups_to_remove: List[str]
        """
        if multicast_groups_to_remove is not None and len(multicast_groups_to_remove) > 10:
            raise ValueError("Invalid value for `multicast_groups_to_remove`, number of items must be less than or equal to `10`")
        if multicast_groups_to_remove is not None and len(multicast_groups_to_remove) < 0:
            raise ValueError("Invalid value for `multicast_groups_to_remove`, number of items must be greater than or equal to `0`")

        self._multicast_groups_to_remove = multicast_groups_to_remove
