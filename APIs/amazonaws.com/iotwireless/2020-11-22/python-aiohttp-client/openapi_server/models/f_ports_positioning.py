# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FPortsPositioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clock_sync: int=None, stream: int=None, gnss: int=None):
        """FPortsPositioning - a model defined in OpenAPI

        :param clock_sync: The clock_sync of this FPortsPositioning.
        :param stream: The stream of this FPortsPositioning.
        :param gnss: The gnss of this FPortsPositioning.
        """
        self.openapi_types = {
            'clock_sync': int,
            'stream': int,
            'gnss': int
        }

        self.attribute_map = {
            'clock_sync': 'ClockSync',
            'stream': 'Stream',
            'gnss': 'Gnss'
        }

        self._clock_sync = clock_sync
        self._stream = stream
        self._gnss = gnss

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FPortsPositioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FPorts_Positioning of this FPortsPositioning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clock_sync(self):
        """Gets the clock_sync of this FPortsPositioning.

        The Fport value.

        :return: The clock_sync of this FPortsPositioning.
        :rtype: int
        """
        return self._clock_sync

    @clock_sync.setter
    def clock_sync(self, clock_sync):
        """Sets the clock_sync of this FPortsPositioning.

        The Fport value.

        :param clock_sync: The clock_sync of this FPortsPositioning.
        :type clock_sync: int
        """
        if clock_sync is not None and clock_sync > 223:
            raise ValueError("Invalid value for `clock_sync`, must be a value less than or equal to `223`")
        if clock_sync is not None and clock_sync < 1:
            raise ValueError("Invalid value for `clock_sync`, must be a value greater than or equal to `1`")

        self._clock_sync = clock_sync

    @property
    def stream(self):
        """Gets the stream of this FPortsPositioning.

        The Fport value.

        :return: The stream of this FPortsPositioning.
        :rtype: int
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this FPortsPositioning.

        The Fport value.

        :param stream: The stream of this FPortsPositioning.
        :type stream: int
        """
        if stream is not None and stream > 223:
            raise ValueError("Invalid value for `stream`, must be a value less than or equal to `223`")
        if stream is not None and stream < 1:
            raise ValueError("Invalid value for `stream`, must be a value greater than or equal to `1`")

        self._stream = stream

    @property
    def gnss(self):
        """Gets the gnss of this FPortsPositioning.

        The Fport value.

        :return: The gnss of this FPortsPositioning.
        :rtype: int
        """
        return self._gnss

    @gnss.setter
    def gnss(self, gnss):
        """Sets the gnss of this FPortsPositioning.

        The Fport value.

        :param gnss: The gnss of this FPortsPositioning.
        :type gnss: int
        """
        if gnss is not None and gnss > 223:
            raise ValueError("Invalid value for `gnss`, must be a value less than or equal to `223`")
        if gnss is not None and gnss < 1:
            raise ValueError("Invalid value for `gnss`, must be a value greater than or equal to `1`")

        self._gnss = gnss
