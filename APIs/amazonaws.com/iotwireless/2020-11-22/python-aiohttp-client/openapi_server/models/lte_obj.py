# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lte_obj_lte_local_id import LteObjLteLocalId
from openapi_server import util


class LteObj(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mcc: int=None, mnc: int=None, eutran_cid: int=None, tac: int=None, lte_local_id: LteObjLteLocalId=None, lte_timing_advance: int=None, rsrp: int=None, rsrq: float=None, nr_capable: bool=None, lte_nmr: List=None):
        """LteObj - a model defined in OpenAPI

        :param mcc: The mcc of this LteObj.
        :param mnc: The mnc of this LteObj.
        :param eutran_cid: The eutran_cid of this LteObj.
        :param tac: The tac of this LteObj.
        :param lte_local_id: The lte_local_id of this LteObj.
        :param lte_timing_advance: The lte_timing_advance of this LteObj.
        :param rsrp: The rsrp of this LteObj.
        :param rsrq: The rsrq of this LteObj.
        :param nr_capable: The nr_capable of this LteObj.
        :param lte_nmr: The lte_nmr of this LteObj.
        """
        self.openapi_types = {
            'mcc': int,
            'mnc': int,
            'eutran_cid': int,
            'tac': int,
            'lte_local_id': LteObjLteLocalId,
            'lte_timing_advance': int,
            'rsrp': int,
            'rsrq': float,
            'nr_capable': bool,
            'lte_nmr': List
        }

        self.attribute_map = {
            'mcc': 'Mcc',
            'mnc': 'Mnc',
            'eutran_cid': 'EutranCid',
            'tac': 'Tac',
            'lte_local_id': 'LteLocalId',
            'lte_timing_advance': 'LteTimingAdvance',
            'rsrp': 'Rsrp',
            'rsrq': 'Rsrq',
            'nr_capable': 'NrCapable',
            'lte_nmr': 'LteNmr'
        }

        self._mcc = mcc
        self._mnc = mnc
        self._eutran_cid = eutran_cid
        self._tac = tac
        self._lte_local_id = lte_local_id
        self._lte_timing_advance = lte_timing_advance
        self._rsrp = rsrp
        self._rsrq = rsrq
        self._nr_capable = nr_capable
        self._lte_nmr = lte_nmr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LteObj':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LteObj of this LteObj.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mcc(self):
        """Gets the mcc of this LteObj.


        :return: The mcc of this LteObj.
        :rtype: int
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this LteObj.


        :param mcc: The mcc of this LteObj.
        :type mcc: int
        """
        if mcc is None:
            raise ValueError("Invalid value for `mcc`, must not be `None`")

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this LteObj.


        :return: The mnc of this LteObj.
        :rtype: int
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this LteObj.


        :param mnc: The mnc of this LteObj.
        :type mnc: int
        """
        if mnc is None:
            raise ValueError("Invalid value for `mnc`, must not be `None`")

        self._mnc = mnc

    @property
    def eutran_cid(self):
        """Gets the eutran_cid of this LteObj.


        :return: The eutran_cid of this LteObj.
        :rtype: int
        """
        return self._eutran_cid

    @eutran_cid.setter
    def eutran_cid(self, eutran_cid):
        """Sets the eutran_cid of this LteObj.


        :param eutran_cid: The eutran_cid of this LteObj.
        :type eutran_cid: int
        """
        if eutran_cid is None:
            raise ValueError("Invalid value for `eutran_cid`, must not be `None`")

        self._eutran_cid = eutran_cid

    @property
    def tac(self):
        """Gets the tac of this LteObj.


        :return: The tac of this LteObj.
        :rtype: int
        """
        return self._tac

    @tac.setter
    def tac(self, tac):
        """Sets the tac of this LteObj.


        :param tac: The tac of this LteObj.
        :type tac: int
        """

        self._tac = tac

    @property
    def lte_local_id(self):
        """Gets the lte_local_id of this LteObj.


        :return: The lte_local_id of this LteObj.
        :rtype: LteObjLteLocalId
        """
        return self._lte_local_id

    @lte_local_id.setter
    def lte_local_id(self, lte_local_id):
        """Sets the lte_local_id of this LteObj.


        :param lte_local_id: The lte_local_id of this LteObj.
        :type lte_local_id: LteObjLteLocalId
        """

        self._lte_local_id = lte_local_id

    @property
    def lte_timing_advance(self):
        """Gets the lte_timing_advance of this LteObj.


        :return: The lte_timing_advance of this LteObj.
        :rtype: int
        """
        return self._lte_timing_advance

    @lte_timing_advance.setter
    def lte_timing_advance(self, lte_timing_advance):
        """Sets the lte_timing_advance of this LteObj.


        :param lte_timing_advance: The lte_timing_advance of this LteObj.
        :type lte_timing_advance: int
        """

        self._lte_timing_advance = lte_timing_advance

    @property
    def rsrp(self):
        """Gets the rsrp of this LteObj.


        :return: The rsrp of this LteObj.
        :rtype: int
        """
        return self._rsrp

    @rsrp.setter
    def rsrp(self, rsrp):
        """Sets the rsrp of this LteObj.


        :param rsrp: The rsrp of this LteObj.
        :type rsrp: int
        """

        self._rsrp = rsrp

    @property
    def rsrq(self):
        """Gets the rsrq of this LteObj.


        :return: The rsrq of this LteObj.
        :rtype: float
        """
        return self._rsrq

    @rsrq.setter
    def rsrq(self, rsrq):
        """Sets the rsrq of this LteObj.


        :param rsrq: The rsrq of this LteObj.
        :type rsrq: float
        """

        self._rsrq = rsrq

    @property
    def nr_capable(self):
        """Gets the nr_capable of this LteObj.


        :return: The nr_capable of this LteObj.
        :rtype: bool
        """
        return self._nr_capable

    @nr_capable.setter
    def nr_capable(self, nr_capable):
        """Sets the nr_capable of this LteObj.


        :param nr_capable: The nr_capable of this LteObj.
        :type nr_capable: bool
        """

        self._nr_capable = nr_capable

    @property
    def lte_nmr(self):
        """Gets the lte_nmr of this LteObj.


        :return: The lte_nmr of this LteObj.
        :rtype: List
        """
        return self._lte_nmr

    @lte_nmr.setter
    def lte_nmr(self, lte_nmr):
        """Sets the lte_nmr of this LteObj.


        :param lte_nmr: The lte_nmr of this LteObj.
        :type lte_nmr: List
        """

        self._lte_nmr = lte_nmr
