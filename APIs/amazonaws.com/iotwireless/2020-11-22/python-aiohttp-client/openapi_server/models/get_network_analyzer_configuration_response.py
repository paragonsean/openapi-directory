# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trace_content import TraceContent
import re
from openapi_server import util


class GetNetworkAnalyzerConfigurationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, trace_content: TraceContent=None, wireless_devices: List=None, wireless_gateways: List=None, description: str=None, arn: str=None, name: str=None, multicast_groups: List=None):
        """GetNetworkAnalyzerConfigurationResponse - a model defined in OpenAPI

        :param trace_content: The trace_content of this GetNetworkAnalyzerConfigurationResponse.
        :param wireless_devices: The wireless_devices of this GetNetworkAnalyzerConfigurationResponse.
        :param wireless_gateways: The wireless_gateways of this GetNetworkAnalyzerConfigurationResponse.
        :param description: The description of this GetNetworkAnalyzerConfigurationResponse.
        :param arn: The arn of this GetNetworkAnalyzerConfigurationResponse.
        :param name: The name of this GetNetworkAnalyzerConfigurationResponse.
        :param multicast_groups: The multicast_groups of this GetNetworkAnalyzerConfigurationResponse.
        """
        self.openapi_types = {
            'trace_content': TraceContent,
            'wireless_devices': List,
            'wireless_gateways': List,
            'description': str,
            'arn': str,
            'name': str,
            'multicast_groups': List
        }

        self.attribute_map = {
            'trace_content': 'TraceContent',
            'wireless_devices': 'WirelessDevices',
            'wireless_gateways': 'WirelessGateways',
            'description': 'Description',
            'arn': 'Arn',
            'name': 'Name',
            'multicast_groups': 'MulticastGroups'
        }

        self._trace_content = trace_content
        self._wireless_devices = wireless_devices
        self._wireless_gateways = wireless_gateways
        self._description = description
        self._arn = arn
        self._name = name
        self._multicast_groups = multicast_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetNetworkAnalyzerConfigurationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetNetworkAnalyzerConfigurationResponse of this GetNetworkAnalyzerConfigurationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trace_content(self):
        """Gets the trace_content of this GetNetworkAnalyzerConfigurationResponse.


        :return: The trace_content of this GetNetworkAnalyzerConfigurationResponse.
        :rtype: TraceContent
        """
        return self._trace_content

    @trace_content.setter
    def trace_content(self, trace_content):
        """Sets the trace_content of this GetNetworkAnalyzerConfigurationResponse.


        :param trace_content: The trace_content of this GetNetworkAnalyzerConfigurationResponse.
        :type trace_content: TraceContent
        """

        self._trace_content = trace_content

    @property
    def wireless_devices(self):
        """Gets the wireless_devices of this GetNetworkAnalyzerConfigurationResponse.


        :return: The wireless_devices of this GetNetworkAnalyzerConfigurationResponse.
        :rtype: List
        """
        return self._wireless_devices

    @wireless_devices.setter
    def wireless_devices(self, wireless_devices):
        """Sets the wireless_devices of this GetNetworkAnalyzerConfigurationResponse.


        :param wireless_devices: The wireless_devices of this GetNetworkAnalyzerConfigurationResponse.
        :type wireless_devices: List
        """

        self._wireless_devices = wireless_devices

    @property
    def wireless_gateways(self):
        """Gets the wireless_gateways of this GetNetworkAnalyzerConfigurationResponse.


        :return: The wireless_gateways of this GetNetworkAnalyzerConfigurationResponse.
        :rtype: List
        """
        return self._wireless_gateways

    @wireless_gateways.setter
    def wireless_gateways(self, wireless_gateways):
        """Sets the wireless_gateways of this GetNetworkAnalyzerConfigurationResponse.


        :param wireless_gateways: The wireless_gateways of this GetNetworkAnalyzerConfigurationResponse.
        :type wireless_gateways: List
        """

        self._wireless_gateways = wireless_gateways

    @property
    def description(self):
        """Gets the description of this GetNetworkAnalyzerConfigurationResponse.

        The description of the new resource.

        :return: The description of this GetNetworkAnalyzerConfigurationResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetNetworkAnalyzerConfigurationResponse.

        The description of the new resource.

        :param description: The description of this GetNetworkAnalyzerConfigurationResponse.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")

        self._description = description

    @property
    def arn(self):
        """Gets the arn of this GetNetworkAnalyzerConfigurationResponse.


        :return: The arn of this GetNetworkAnalyzerConfigurationResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this GetNetworkAnalyzerConfigurationResponse.


        :param arn: The arn of this GetNetworkAnalyzerConfigurationResponse.
        :type arn: str
        """

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this GetNetworkAnalyzerConfigurationResponse.

        Name of the network analyzer configuration.

        :return: The name of this GetNetworkAnalyzerConfigurationResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetNetworkAnalyzerConfigurationResponse.

        Name of the network analyzer configuration.

        :param name: The name of this GetNetworkAnalyzerConfigurationResponse.
        :type name: str
        """
        if name is not None and len(name) > 1024:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[a-zA-Z0-9-_]+', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9-_]+/`")

        self._name = name

    @property
    def multicast_groups(self):
        """Gets the multicast_groups of this GetNetworkAnalyzerConfigurationResponse.


        :return: The multicast_groups of this GetNetworkAnalyzerConfigurationResponse.
        :rtype: List
        """
        return self._multicast_groups

    @multicast_groups.setter
    def multicast_groups(self, multicast_groups):
        """Sets the multicast_groups of this GetNetworkAnalyzerConfigurationResponse.


        :param multicast_groups: The multicast_groups of this GetNetworkAnalyzerConfigurationResponse.
        :type multicast_groups: List
        """

        self._multicast_groups = multicast_groups
