# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateWirelessGatewayWithCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iot_certificate_id: str=None):
        """AssociateWirelessGatewayWithCertificateRequest - a model defined in OpenAPI

        :param iot_certificate_id: The iot_certificate_id of this AssociateWirelessGatewayWithCertificateRequest.
        """
        self.openapi_types = {
            'iot_certificate_id': str
        }

        self.attribute_map = {
            'iot_certificate_id': 'IotCertificateId'
        }

        self._iot_certificate_id = iot_certificate_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateWirelessGatewayWithCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateWirelessGatewayWithCertificate_request of this AssociateWirelessGatewayWithCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iot_certificate_id(self):
        """Gets the iot_certificate_id of this AssociateWirelessGatewayWithCertificateRequest.

        The ID of the certificate to associate with the wireless gateway.

        :return: The iot_certificate_id of this AssociateWirelessGatewayWithCertificateRequest.
        :rtype: str
        """
        return self._iot_certificate_id

    @iot_certificate_id.setter
    def iot_certificate_id(self, iot_certificate_id):
        """Sets the iot_certificate_id of this AssociateWirelessGatewayWithCertificateRequest.

        The ID of the certificate to associate with the wireless gateway.

        :param iot_certificate_id: The iot_certificate_id of this AssociateWirelessGatewayWithCertificateRequest.
        :type iot_certificate_id: str
        """
        if iot_certificate_id is None:
            raise ValueError("Invalid value for `iot_certificate_id`, must not be `None`")
        if iot_certificate_id is not None and len(iot_certificate_id) > 4096:
            raise ValueError("Invalid value for `iot_certificate_id`, length must be less than or equal to `4096`")
        if iot_certificate_id is not None and len(iot_certificate_id) < 1:
            raise ValueError("Invalid value for `iot_certificate_id`, length must be greater than or equal to `1`")

        self._iot_certificate_id = iot_certificate_id
