# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GsmLocalId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bsic: int=None, bcch: int=None):
        """GsmLocalId - a model defined in OpenAPI

        :param bsic: The bsic of this GsmLocalId.
        :param bcch: The bcch of this GsmLocalId.
        """
        self.openapi_types = {
            'bsic': int,
            'bcch': int
        }

        self.attribute_map = {
            'bsic': 'Bsic',
            'bcch': 'Bcch'
        }

        self._bsic = bsic
        self._bcch = bcch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GsmLocalId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GsmLocalId of this GsmLocalId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bsic(self):
        """Gets the bsic of this GsmLocalId.


        :return: The bsic of this GsmLocalId.
        :rtype: int
        """
        return self._bsic

    @bsic.setter
    def bsic(self, bsic):
        """Sets the bsic of this GsmLocalId.


        :param bsic: The bsic of this GsmLocalId.
        :type bsic: int
        """
        if bsic is None:
            raise ValueError("Invalid value for `bsic`, must not be `None`")

        self._bsic = bsic

    @property
    def bcch(self):
        """Gets the bcch of this GsmLocalId.


        :return: The bcch of this GsmLocalId.
        :rtype: int
        """
        return self._bcch

    @bcch.setter
    def bcch(self, bcch):
        """Sets the bcch of this GsmLocalId.


        :param bcch: The bcch of this GsmLocalId.
        :type bcch: int
        """
        if bcch is None:
            raise ValueError("Invalid value for `bcch`, must not be `None`")

        self._bcch = bcch
