# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_fuota_task_request_lo_ra_wan import CreateFuotaTaskRequestLoRaWAN
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateFuotaTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, client_request_token: str=None, lo_ra_wan: CreateFuotaTaskRequestLoRaWAN=None, firmware_update_image: str=None, firmware_update_role: str=None, tags: List[Tag]=None, redundancy_percent: int=None, fragment_size_bytes: int=None, fragment_interval_ms: int=None):
        """CreateFuotaTaskRequest - a model defined in OpenAPI

        :param name: The name of this CreateFuotaTaskRequest.
        :param description: The description of this CreateFuotaTaskRequest.
        :param client_request_token: The client_request_token of this CreateFuotaTaskRequest.
        :param lo_ra_wan: The lo_ra_wan of this CreateFuotaTaskRequest.
        :param firmware_update_image: The firmware_update_image of this CreateFuotaTaskRequest.
        :param firmware_update_role: The firmware_update_role of this CreateFuotaTaskRequest.
        :param tags: The tags of this CreateFuotaTaskRequest.
        :param redundancy_percent: The redundancy_percent of this CreateFuotaTaskRequest.
        :param fragment_size_bytes: The fragment_size_bytes of this CreateFuotaTaskRequest.
        :param fragment_interval_ms: The fragment_interval_ms of this CreateFuotaTaskRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'client_request_token': str,
            'lo_ra_wan': CreateFuotaTaskRequestLoRaWAN,
            'firmware_update_image': str,
            'firmware_update_role': str,
            'tags': List[Tag],
            'redundancy_percent': int,
            'fragment_size_bytes': int,
            'fragment_interval_ms': int
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'client_request_token': 'ClientRequestToken',
            'lo_ra_wan': 'LoRaWAN',
            'firmware_update_image': 'FirmwareUpdateImage',
            'firmware_update_role': 'FirmwareUpdateRole',
            'tags': 'Tags',
            'redundancy_percent': 'RedundancyPercent',
            'fragment_size_bytes': 'FragmentSizeBytes',
            'fragment_interval_ms': 'FragmentIntervalMS'
        }

        self._name = name
        self._description = description
        self._client_request_token = client_request_token
        self._lo_ra_wan = lo_ra_wan
        self._firmware_update_image = firmware_update_image
        self._firmware_update_role = firmware_update_role
        self._tags = tags
        self._redundancy_percent = redundancy_percent
        self._fragment_size_bytes = fragment_size_bytes
        self._fragment_interval_ms = fragment_interval_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFuotaTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFuotaTask_request of this CreateFuotaTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateFuotaTaskRequest.

        The name of a FUOTA task.

        :return: The name of this CreateFuotaTaskRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFuotaTaskRequest.

        The name of a FUOTA task.

        :param name: The name of this CreateFuotaTaskRequest.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateFuotaTaskRequest.

        The description of the new resource.

        :return: The description of this CreateFuotaTaskRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFuotaTaskRequest.

        The description of the new resource.

        :param description: The description of this CreateFuotaTaskRequest.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")

        self._description = description

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateFuotaTaskRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :return: The client_request_token of this CreateFuotaTaskRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateFuotaTaskRequest.

        Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.

        :param client_request_token: The client_request_token of this CreateFuotaTaskRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[a-zA-Z0-9-_]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]+$/`")

        self._client_request_token = client_request_token

    @property
    def lo_ra_wan(self):
        """Gets the lo_ra_wan of this CreateFuotaTaskRequest.


        :return: The lo_ra_wan of this CreateFuotaTaskRequest.
        :rtype: CreateFuotaTaskRequestLoRaWAN
        """
        return self._lo_ra_wan

    @lo_ra_wan.setter
    def lo_ra_wan(self, lo_ra_wan):
        """Sets the lo_ra_wan of this CreateFuotaTaskRequest.


        :param lo_ra_wan: The lo_ra_wan of this CreateFuotaTaskRequest.
        :type lo_ra_wan: CreateFuotaTaskRequestLoRaWAN
        """

        self._lo_ra_wan = lo_ra_wan

    @property
    def firmware_update_image(self):
        """Gets the firmware_update_image of this CreateFuotaTaskRequest.

        The S3 URI points to a firmware update image that is to be used with a FUOTA task.

        :return: The firmware_update_image of this CreateFuotaTaskRequest.
        :rtype: str
        """
        return self._firmware_update_image

    @firmware_update_image.setter
    def firmware_update_image(self, firmware_update_image):
        """Sets the firmware_update_image of this CreateFuotaTaskRequest.

        The S3 URI points to a firmware update image that is to be used with a FUOTA task.

        :param firmware_update_image: The firmware_update_image of this CreateFuotaTaskRequest.
        :type firmware_update_image: str
        """
        if firmware_update_image is None:
            raise ValueError("Invalid value for `firmware_update_image`, must not be `None`")
        if firmware_update_image is not None and len(firmware_update_image) > 4096:
            raise ValueError("Invalid value for `firmware_update_image`, length must be less than or equal to `4096`")
        if firmware_update_image is not None and len(firmware_update_image) < 1:
            raise ValueError("Invalid value for `firmware_update_image`, length must be greater than or equal to `1`")

        self._firmware_update_image = firmware_update_image

    @property
    def firmware_update_role(self):
        """Gets the firmware_update_role of this CreateFuotaTaskRequest.

        The firmware update role that is to be used with a FUOTA task.

        :return: The firmware_update_role of this CreateFuotaTaskRequest.
        :rtype: str
        """
        return self._firmware_update_role

    @firmware_update_role.setter
    def firmware_update_role(self, firmware_update_role):
        """Sets the firmware_update_role of this CreateFuotaTaskRequest.

        The firmware update role that is to be used with a FUOTA task.

        :param firmware_update_role: The firmware_update_role of this CreateFuotaTaskRequest.
        :type firmware_update_role: str
        """
        if firmware_update_role is None:
            raise ValueError("Invalid value for `firmware_update_role`, must not be `None`")
        if firmware_update_role is not None and len(firmware_update_role) > 2048:
            raise ValueError("Invalid value for `firmware_update_role`, length must be less than or equal to `2048`")
        if firmware_update_role is not None and len(firmware_update_role) < 1:
            raise ValueError("Invalid value for `firmware_update_role`, length must be greater than or equal to `1`")

        self._firmware_update_role = firmware_update_role

    @property
    def tags(self):
        """Gets the tags of this CreateFuotaTaskRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :return: The tags of this CreateFuotaTaskRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFuotaTaskRequest.

        The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.

        :param tags: The tags of this CreateFuotaTaskRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def redundancy_percent(self):
        """Gets the redundancy_percent of this CreateFuotaTaskRequest.

        The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.

        :return: The redundancy_percent of this CreateFuotaTaskRequest.
        :rtype: int
        """
        return self._redundancy_percent

    @redundancy_percent.setter
    def redundancy_percent(self, redundancy_percent):
        """Sets the redundancy_percent of this CreateFuotaTaskRequest.

        The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.

        :param redundancy_percent: The redundancy_percent of this CreateFuotaTaskRequest.
        :type redundancy_percent: int
        """
        if redundancy_percent is not None and redundancy_percent > 100:
            raise ValueError("Invalid value for `redundancy_percent`, must be a value less than or equal to `100`")
        if redundancy_percent is not None and redundancy_percent < 0:
            raise ValueError("Invalid value for `redundancy_percent`, must be a value greater than or equal to `0`")

        self._redundancy_percent = redundancy_percent

    @property
    def fragment_size_bytes(self):
        """Gets the fragment_size_bytes of this CreateFuotaTaskRequest.

        The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.

        :return: The fragment_size_bytes of this CreateFuotaTaskRequest.
        :rtype: int
        """
        return self._fragment_size_bytes

    @fragment_size_bytes.setter
    def fragment_size_bytes(self, fragment_size_bytes):
        """Sets the fragment_size_bytes of this CreateFuotaTaskRequest.

        The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.

        :param fragment_size_bytes: The fragment_size_bytes of this CreateFuotaTaskRequest.
        :type fragment_size_bytes: int
        """
        if fragment_size_bytes is not None and fragment_size_bytes < 1:
            raise ValueError("Invalid value for `fragment_size_bytes`, must be a value greater than or equal to `1`")

        self._fragment_size_bytes = fragment_size_bytes

    @property
    def fragment_interval_ms(self):
        """Gets the fragment_interval_ms of this CreateFuotaTaskRequest.

        <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>

        :return: The fragment_interval_ms of this CreateFuotaTaskRequest.
        :rtype: int
        """
        return self._fragment_interval_ms

    @fragment_interval_ms.setter
    def fragment_interval_ms(self, fragment_interval_ms):
        """Sets the fragment_interval_ms of this CreateFuotaTaskRequest.

        <p>The interval for sending fragments in milliseconds, rounded to the nearest second.</p> <note> <p>This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device's class and the communication delay with the cloud.</p> </note>

        :param fragment_interval_ms: The fragment_interval_ms of this CreateFuotaTaskRequest.
        :type fragment_interval_ms: int
        """
        if fragment_interval_ms is not None and fragment_interval_ms < 1:
            raise ValueError("Invalid value for `fragment_interval_ms`, must be a value greater than or equal to `1`")

        self._fragment_interval_ms = fragment_interval_ms
