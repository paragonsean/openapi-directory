# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_level import LogLevel
from openapi_server.models.multicast_frame_info import MulticastFrameInfo
from openapi_server.models.wireless_device_frame_info import WirelessDeviceFrameInfo
from openapi_server import util


class TraceContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, wireless_device_frame_info: WirelessDeviceFrameInfo=None, log_level: LogLevel=None, multicast_frame_info: MulticastFrameInfo=None):
        """TraceContent - a model defined in OpenAPI

        :param wireless_device_frame_info: The wireless_device_frame_info of this TraceContent.
        :param log_level: The log_level of this TraceContent.
        :param multicast_frame_info: The multicast_frame_info of this TraceContent.
        """
        self.openapi_types = {
            'wireless_device_frame_info': WirelessDeviceFrameInfo,
            'log_level': LogLevel,
            'multicast_frame_info': MulticastFrameInfo
        }

        self.attribute_map = {
            'wireless_device_frame_info': 'WirelessDeviceFrameInfo',
            'log_level': 'LogLevel',
            'multicast_frame_info': 'MulticastFrameInfo'
        }

        self._wireless_device_frame_info = wireless_device_frame_info
        self._log_level = log_level
        self._multicast_frame_info = multicast_frame_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TraceContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TraceContent of this TraceContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wireless_device_frame_info(self):
        """Gets the wireless_device_frame_info of this TraceContent.


        :return: The wireless_device_frame_info of this TraceContent.
        :rtype: WirelessDeviceFrameInfo
        """
        return self._wireless_device_frame_info

    @wireless_device_frame_info.setter
    def wireless_device_frame_info(self, wireless_device_frame_info):
        """Sets the wireless_device_frame_info of this TraceContent.


        :param wireless_device_frame_info: The wireless_device_frame_info of this TraceContent.
        :type wireless_device_frame_info: WirelessDeviceFrameInfo
        """

        self._wireless_device_frame_info = wireless_device_frame_info

    @property
    def log_level(self):
        """Gets the log_level of this TraceContent.


        :return: The log_level of this TraceContent.
        :rtype: LogLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this TraceContent.


        :param log_level: The log_level of this TraceContent.
        :type log_level: LogLevel
        """

        self._log_level = log_level

    @property
    def multicast_frame_info(self):
        """Gets the multicast_frame_info of this TraceContent.


        :return: The multicast_frame_info of this TraceContent.
        :rtype: MulticastFrameInfo
        """
        return self._multicast_frame_info

    @multicast_frame_info.setter
    def multicast_frame_info(self, multicast_frame_info):
        """Sets the multicast_frame_info of this TraceContent.


        :param multicast_frame_info: The multicast_frame_info of this TraceContent.
        :type multicast_frame_info: MulticastFrameInfo
        """

        self._multicast_frame_info = multicast_frame_info
