# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDestinationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression_type: str=None, expression: str=None, description: str=None, role_arn: str=None):
        """UpdateDestinationRequest - a model defined in OpenAPI

        :param expression_type: The expression_type of this UpdateDestinationRequest.
        :param expression: The expression of this UpdateDestinationRequest.
        :param description: The description of this UpdateDestinationRequest.
        :param role_arn: The role_arn of this UpdateDestinationRequest.
        """
        self.openapi_types = {
            'expression_type': str,
            'expression': str,
            'description': str,
            'role_arn': str
        }

        self.attribute_map = {
            'expression_type': 'ExpressionType',
            'expression': 'Expression',
            'description': 'Description',
            'role_arn': 'RoleArn'
        }

        self._expression_type = expression_type
        self._expression = expression
        self._description = description
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDestinationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDestination_request of this UpdateDestinationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression_type(self):
        """Gets the expression_type of this UpdateDestinationRequest.

        The type of value in <code>Expression</code>.

        :return: The expression_type of this UpdateDestinationRequest.
        :rtype: str
        """
        return self._expression_type

    @expression_type.setter
    def expression_type(self, expression_type):
        """Sets the expression_type of this UpdateDestinationRequest.

        The type of value in <code>Expression</code>.

        :param expression_type: The expression_type of this UpdateDestinationRequest.
        :type expression_type: str
        """
        allowed_values = ["RuleName", "MqttTopic"]  # noqa: E501
        if expression_type not in allowed_values:
            raise ValueError(
                "Invalid value for `expression_type` ({0}), must be one of {1}"
                .format(expression_type, allowed_values)
            )

        self._expression_type = expression_type

    @property
    def expression(self):
        """Gets the expression of this UpdateDestinationRequest.

        The new rule name or topic rule to send messages to.

        :return: The expression of this UpdateDestinationRequest.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this UpdateDestinationRequest.

        The new rule name or topic rule to send messages to.

        :param expression: The expression of this UpdateDestinationRequest.
        :type expression: str
        """
        if expression is not None and len(expression) > 2048:
            raise ValueError("Invalid value for `expression`, length must be less than or equal to `2048`")

        self._expression = expression

    @property
    def description(self):
        """Gets the description of this UpdateDestinationRequest.

        The description of the new resource.

        :return: The description of this UpdateDestinationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateDestinationRequest.

        The description of the new resource.

        :param description: The description of this UpdateDestinationRequest.
        :type description: str
        """
        if description is not None and len(description) > 2048:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2048`")

        self._description = description

    @property
    def role_arn(self):
        """Gets the role_arn of this UpdateDestinationRequest.

        The ARN of the IAM Role that authorizes the destination.

        :return: The role_arn of this UpdateDestinationRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this UpdateDestinationRequest.

        The ARN of the IAM Role that authorizes the destination.

        :param role_arn: The role_arn of this UpdateDestinationRequest.
        :type role_arn: str
        """
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 20:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `20`")

        self._role_arn = role_arn
