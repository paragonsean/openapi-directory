# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cdma_obj_cdma_local_id import CdmaObjCdmaLocalId
from openapi_server import util


class CdmaObj(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, system_id: int=None, network_id: int=None, base_station_id: int=None, registration_zone: int=None, cdma_local_id: CdmaObjCdmaLocalId=None, pilot_power: int=None, base_lat: float=None, base_lng: float=None, cdma_nmr: List=None):
        """CdmaObj - a model defined in OpenAPI

        :param system_id: The system_id of this CdmaObj.
        :param network_id: The network_id of this CdmaObj.
        :param base_station_id: The base_station_id of this CdmaObj.
        :param registration_zone: The registration_zone of this CdmaObj.
        :param cdma_local_id: The cdma_local_id of this CdmaObj.
        :param pilot_power: The pilot_power of this CdmaObj.
        :param base_lat: The base_lat of this CdmaObj.
        :param base_lng: The base_lng of this CdmaObj.
        :param cdma_nmr: The cdma_nmr of this CdmaObj.
        """
        self.openapi_types = {
            'system_id': int,
            'network_id': int,
            'base_station_id': int,
            'registration_zone': int,
            'cdma_local_id': CdmaObjCdmaLocalId,
            'pilot_power': int,
            'base_lat': float,
            'base_lng': float,
            'cdma_nmr': List
        }

        self.attribute_map = {
            'system_id': 'SystemId',
            'network_id': 'NetworkId',
            'base_station_id': 'BaseStationId',
            'registration_zone': 'RegistrationZone',
            'cdma_local_id': 'CdmaLocalId',
            'pilot_power': 'PilotPower',
            'base_lat': 'BaseLat',
            'base_lng': 'BaseLng',
            'cdma_nmr': 'CdmaNmr'
        }

        self._system_id = system_id
        self._network_id = network_id
        self._base_station_id = base_station_id
        self._registration_zone = registration_zone
        self._cdma_local_id = cdma_local_id
        self._pilot_power = pilot_power
        self._base_lat = base_lat
        self._base_lng = base_lng
        self._cdma_nmr = cdma_nmr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CdmaObj':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CdmaObj of this CdmaObj.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def system_id(self):
        """Gets the system_id of this CdmaObj.


        :return: The system_id of this CdmaObj.
        :rtype: int
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this CdmaObj.


        :param system_id: The system_id of this CdmaObj.
        :type system_id: int
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")

        self._system_id = system_id

    @property
    def network_id(self):
        """Gets the network_id of this CdmaObj.


        :return: The network_id of this CdmaObj.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this CdmaObj.


        :param network_id: The network_id of this CdmaObj.
        :type network_id: int
        """
        if network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")

        self._network_id = network_id

    @property
    def base_station_id(self):
        """Gets the base_station_id of this CdmaObj.


        :return: The base_station_id of this CdmaObj.
        :rtype: int
        """
        return self._base_station_id

    @base_station_id.setter
    def base_station_id(self, base_station_id):
        """Sets the base_station_id of this CdmaObj.


        :param base_station_id: The base_station_id of this CdmaObj.
        :type base_station_id: int
        """
        if base_station_id is None:
            raise ValueError("Invalid value for `base_station_id`, must not be `None`")

        self._base_station_id = base_station_id

    @property
    def registration_zone(self):
        """Gets the registration_zone of this CdmaObj.


        :return: The registration_zone of this CdmaObj.
        :rtype: int
        """
        return self._registration_zone

    @registration_zone.setter
    def registration_zone(self, registration_zone):
        """Sets the registration_zone of this CdmaObj.


        :param registration_zone: The registration_zone of this CdmaObj.
        :type registration_zone: int
        """

        self._registration_zone = registration_zone

    @property
    def cdma_local_id(self):
        """Gets the cdma_local_id of this CdmaObj.


        :return: The cdma_local_id of this CdmaObj.
        :rtype: CdmaObjCdmaLocalId
        """
        return self._cdma_local_id

    @cdma_local_id.setter
    def cdma_local_id(self, cdma_local_id):
        """Sets the cdma_local_id of this CdmaObj.


        :param cdma_local_id: The cdma_local_id of this CdmaObj.
        :type cdma_local_id: CdmaObjCdmaLocalId
        """

        self._cdma_local_id = cdma_local_id

    @property
    def pilot_power(self):
        """Gets the pilot_power of this CdmaObj.


        :return: The pilot_power of this CdmaObj.
        :rtype: int
        """
        return self._pilot_power

    @pilot_power.setter
    def pilot_power(self, pilot_power):
        """Sets the pilot_power of this CdmaObj.


        :param pilot_power: The pilot_power of this CdmaObj.
        :type pilot_power: int
        """

        self._pilot_power = pilot_power

    @property
    def base_lat(self):
        """Gets the base_lat of this CdmaObj.


        :return: The base_lat of this CdmaObj.
        :rtype: float
        """
        return self._base_lat

    @base_lat.setter
    def base_lat(self, base_lat):
        """Sets the base_lat of this CdmaObj.


        :param base_lat: The base_lat of this CdmaObj.
        :type base_lat: float
        """

        self._base_lat = base_lat

    @property
    def base_lng(self):
        """Gets the base_lng of this CdmaObj.


        :return: The base_lng of this CdmaObj.
        :rtype: float
        """
        return self._base_lng

    @base_lng.setter
    def base_lng(self, base_lng):
        """Sets the base_lng of this CdmaObj.


        :param base_lng: The base_lng of this CdmaObj.
        :type base_lng: float
        """

        self._base_lng = base_lng

    @property
    def cdma_nmr(self):
        """Gets the cdma_nmr of this CdmaObj.


        :return: The cdma_nmr of this CdmaObj.
        :rtype: List
        """
        return self._cdma_nmr

    @cdma_nmr.setter
    def cdma_nmr(self, cdma_nmr):
        """Sets the cdma_nmr of this CdmaObj.


        :param cdma_nmr: The cdma_nmr of this CdmaObj.
        :type cdma_nmr: List
        """

        self._cdma_nmr = cdma_nmr
