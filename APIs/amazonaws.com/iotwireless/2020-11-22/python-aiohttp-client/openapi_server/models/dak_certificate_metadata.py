# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DakCertificateMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_id: str=None, max_allowed_signature: int=None, factory_support: bool=None, ap_id: str=None, device_type_id: str=None):
        """DakCertificateMetadata - a model defined in OpenAPI

        :param certificate_id: The certificate_id of this DakCertificateMetadata.
        :param max_allowed_signature: The max_allowed_signature of this DakCertificateMetadata.
        :param factory_support: The factory_support of this DakCertificateMetadata.
        :param ap_id: The ap_id of this DakCertificateMetadata.
        :param device_type_id: The device_type_id of this DakCertificateMetadata.
        """
        self.openapi_types = {
            'certificate_id': str,
            'max_allowed_signature': int,
            'factory_support': bool,
            'ap_id': str,
            'device_type_id': str
        }

        self.attribute_map = {
            'certificate_id': 'CertificateId',
            'max_allowed_signature': 'MaxAllowedSignature',
            'factory_support': 'FactorySupport',
            'ap_id': 'ApId',
            'device_type_id': 'DeviceTypeId'
        }

        self._certificate_id = certificate_id
        self._max_allowed_signature = max_allowed_signature
        self._factory_support = factory_support
        self._ap_id = ap_id
        self._device_type_id = device_type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DakCertificateMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DakCertificateMetadata of this DakCertificateMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_id(self):
        """Gets the certificate_id of this DakCertificateMetadata.


        :return: The certificate_id of this DakCertificateMetadata.
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this DakCertificateMetadata.


        :param certificate_id: The certificate_id of this DakCertificateMetadata.
        :type certificate_id: str
        """
        if certificate_id is None:
            raise ValueError("Invalid value for `certificate_id`, must not be `None`")

        self._certificate_id = certificate_id

    @property
    def max_allowed_signature(self):
        """Gets the max_allowed_signature of this DakCertificateMetadata.


        :return: The max_allowed_signature of this DakCertificateMetadata.
        :rtype: int
        """
        return self._max_allowed_signature

    @max_allowed_signature.setter
    def max_allowed_signature(self, max_allowed_signature):
        """Sets the max_allowed_signature of this DakCertificateMetadata.


        :param max_allowed_signature: The max_allowed_signature of this DakCertificateMetadata.
        :type max_allowed_signature: int
        """

        self._max_allowed_signature = max_allowed_signature

    @property
    def factory_support(self):
        """Gets the factory_support of this DakCertificateMetadata.


        :return: The factory_support of this DakCertificateMetadata.
        :rtype: bool
        """
        return self._factory_support

    @factory_support.setter
    def factory_support(self, factory_support):
        """Sets the factory_support of this DakCertificateMetadata.


        :param factory_support: The factory_support of this DakCertificateMetadata.
        :type factory_support: bool
        """

        self._factory_support = factory_support

    @property
    def ap_id(self):
        """Gets the ap_id of this DakCertificateMetadata.


        :return: The ap_id of this DakCertificateMetadata.
        :rtype: str
        """
        return self._ap_id

    @ap_id.setter
    def ap_id(self, ap_id):
        """Sets the ap_id of this DakCertificateMetadata.


        :param ap_id: The ap_id of this DakCertificateMetadata.
        :type ap_id: str
        """

        self._ap_id = ap_id

    @property
    def device_type_id(self):
        """Gets the device_type_id of this DakCertificateMetadata.


        :return: The device_type_id of this DakCertificateMetadata.
        :rtype: str
        """
        return self._device_type_id

    @device_type_id.setter
    def device_type_id(self, device_type_id):
        """Sets the device_type_id of this DakCertificateMetadata.


        :param device_type_id: The device_type_id of this DakCertificateMetadata.
        :type device_type_id: str
        """

        self._device_type_id = device_type_id
