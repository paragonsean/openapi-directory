# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoRaWANMulticastSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dl_dr: int=None, dl_freq: int=None, session_start_time: datetime=None, session_timeout: int=None, ping_slot_period: int=None):
        """LoRaWANMulticastSession - a model defined in OpenAPI

        :param dl_dr: The dl_dr of this LoRaWANMulticastSession.
        :param dl_freq: The dl_freq of this LoRaWANMulticastSession.
        :param session_start_time: The session_start_time of this LoRaWANMulticastSession.
        :param session_timeout: The session_timeout of this LoRaWANMulticastSession.
        :param ping_slot_period: The ping_slot_period of this LoRaWANMulticastSession.
        """
        self.openapi_types = {
            'dl_dr': int,
            'dl_freq': int,
            'session_start_time': datetime,
            'session_timeout': int,
            'ping_slot_period': int
        }

        self.attribute_map = {
            'dl_dr': 'DlDr',
            'dl_freq': 'DlFreq',
            'session_start_time': 'SessionStartTime',
            'session_timeout': 'SessionTimeout',
            'ping_slot_period': 'PingSlotPeriod'
        }

        self._dl_dr = dl_dr
        self._dl_freq = dl_freq
        self._session_start_time = session_start_time
        self._session_timeout = session_timeout
        self._ping_slot_period = ping_slot_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoRaWANMulticastSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoRaWANMulticastSession of this LoRaWANMulticastSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dl_dr(self):
        """Gets the dl_dr of this LoRaWANMulticastSession.

        Downlink data rate.

        :return: The dl_dr of this LoRaWANMulticastSession.
        :rtype: int
        """
        return self._dl_dr

    @dl_dr.setter
    def dl_dr(self, dl_dr):
        """Sets the dl_dr of this LoRaWANMulticastSession.

        Downlink data rate.

        :param dl_dr: The dl_dr of this LoRaWANMulticastSession.
        :type dl_dr: int
        """
        if dl_dr is not None and dl_dr > 15:
            raise ValueError("Invalid value for `dl_dr`, must be a value less than or equal to `15`")
        if dl_dr is not None and dl_dr < 0:
            raise ValueError("Invalid value for `dl_dr`, must be a value greater than or equal to `0`")

        self._dl_dr = dl_dr

    @property
    def dl_freq(self):
        """Gets the dl_freq of this LoRaWANMulticastSession.

        Downlink frequency.

        :return: The dl_freq of this LoRaWANMulticastSession.
        :rtype: int
        """
        return self._dl_freq

    @dl_freq.setter
    def dl_freq(self, dl_freq):
        """Sets the dl_freq of this LoRaWANMulticastSession.

        Downlink frequency.

        :param dl_freq: The dl_freq of this LoRaWANMulticastSession.
        :type dl_freq: int
        """
        if dl_freq is not None and dl_freq > 1000000000:
            raise ValueError("Invalid value for `dl_freq`, must be a value less than or equal to `1000000000`")
        if dl_freq is not None and dl_freq < 100000000:
            raise ValueError("Invalid value for `dl_freq`, must be a value greater than or equal to `100000000`")

        self._dl_freq = dl_freq

    @property
    def session_start_time(self):
        """Gets the session_start_time of this LoRaWANMulticastSession.

        Timestamp of when the multicast group session is to start.

        :return: The session_start_time of this LoRaWANMulticastSession.
        :rtype: datetime
        """
        return self._session_start_time

    @session_start_time.setter
    def session_start_time(self, session_start_time):
        """Sets the session_start_time of this LoRaWANMulticastSession.

        Timestamp of when the multicast group session is to start.

        :param session_start_time: The session_start_time of this LoRaWANMulticastSession.
        :type session_start_time: datetime
        """

        self._session_start_time = session_start_time

    @property
    def session_timeout(self):
        """Gets the session_timeout of this LoRaWANMulticastSession.

        How long before a multicast group session is to timeout.

        :return: The session_timeout of this LoRaWANMulticastSession.
        :rtype: int
        """
        return self._session_timeout

    @session_timeout.setter
    def session_timeout(self, session_timeout):
        """Sets the session_timeout of this LoRaWANMulticastSession.

        How long before a multicast group session is to timeout.

        :param session_timeout: The session_timeout of this LoRaWANMulticastSession.
        :type session_timeout: int
        """
        if session_timeout is not None and session_timeout > 172800:
            raise ValueError("Invalid value for `session_timeout`, must be a value less than or equal to `172800`")
        if session_timeout is not None and session_timeout < 60:
            raise ValueError("Invalid value for `session_timeout`, must be a value greater than or equal to `60`")

        self._session_timeout = session_timeout

    @property
    def ping_slot_period(self):
        """Gets the ping_slot_period of this LoRaWANMulticastSession.


        :return: The ping_slot_period of this LoRaWANMulticastSession.
        :rtype: int
        """
        return self._ping_slot_period

    @ping_slot_period.setter
    def ping_slot_period(self, ping_slot_period):
        """Sets the ping_slot_period of this LoRaWANMulticastSession.


        :param ping_slot_period: The ping_slot_period of this LoRaWANMulticastSession.
        :type ping_slot_period: int
        """

        self._ping_slot_period = ping_slot_period
