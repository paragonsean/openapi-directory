/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetPositionEstimateRequestCellTowers;
import org.openapitools.client.model.GetPositionEstimateRequestGnss;
import org.openapitools.client.model.GetPositionEstimateRequestIp;
import org.openapitools.client.model.WiFiAccessPoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPositionEstimateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPositionEstimateRequest {
  public static final String SERIALIZED_NAME_WI_FI_ACCESS_POINTS = "WiFiAccessPoints";
  @SerializedName(SERIALIZED_NAME_WI_FI_ACCESS_POINTS)
  private List<WiFiAccessPoint> wiFiAccessPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CELL_TOWERS = "CellTowers";
  @SerializedName(SERIALIZED_NAME_CELL_TOWERS)
  private GetPositionEstimateRequestCellTowers cellTowers;

  public static final String SERIALIZED_NAME_IP = "Ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private GetPositionEstimateRequestIp ip;

  public static final String SERIALIZED_NAME_GNSS = "Gnss";
  @SerializedName(SERIALIZED_NAME_GNSS)
  private GetPositionEstimateRequestGnss gnss;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public GetPositionEstimateRequest() {
  }

  public GetPositionEstimateRequest wiFiAccessPoints(List<WiFiAccessPoint> wiFiAccessPoints) {
    this.wiFiAccessPoints = wiFiAccessPoints;
    return this;
  }

  public GetPositionEstimateRequest addWiFiAccessPointsItem(WiFiAccessPoint wiFiAccessPointsItem) {
    if (this.wiFiAccessPoints == null) {
      this.wiFiAccessPoints = new ArrayList<>();
    }
    this.wiFiAccessPoints.add(wiFiAccessPointsItem);
    return this;
  }

  /**
   * Retrieves an estimated device position by resolving WLAN measurement data. The position is resolved using HERE&#39;s Wi-Fi based solver.
   * @return wiFiAccessPoints
   */
  @javax.annotation.Nullable
  public List<WiFiAccessPoint> getWiFiAccessPoints() {
    return wiFiAccessPoints;
  }

  public void setWiFiAccessPoints(List<WiFiAccessPoint> wiFiAccessPoints) {
    this.wiFiAccessPoints = wiFiAccessPoints;
  }


  public GetPositionEstimateRequest cellTowers(GetPositionEstimateRequestCellTowers cellTowers) {
    this.cellTowers = cellTowers;
    return this;
  }

  /**
   * Get cellTowers
   * @return cellTowers
   */
  @javax.annotation.Nullable
  public GetPositionEstimateRequestCellTowers getCellTowers() {
    return cellTowers;
  }

  public void setCellTowers(GetPositionEstimateRequestCellTowers cellTowers) {
    this.cellTowers = cellTowers;
  }


  public GetPositionEstimateRequest ip(GetPositionEstimateRequestIp ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nullable
  public GetPositionEstimateRequestIp getIp() {
    return ip;
  }

  public void setIp(GetPositionEstimateRequestIp ip) {
    this.ip = ip;
  }


  public GetPositionEstimateRequest gnss(GetPositionEstimateRequestGnss gnss) {
    this.gnss = gnss;
    return this;
  }

  /**
   * Get gnss
   * @return gnss
   */
  @javax.annotation.Nullable
  public GetPositionEstimateRequestGnss getGnss() {
    return gnss;
  }

  public void setGnss(GetPositionEstimateRequestGnss gnss) {
    this.gnss = gnss;
  }


  public GetPositionEstimateRequest timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Optional information that specifies the time when the position information will be resolved. It uses the Unix timestamp format. If not specified, the time at which the request was received will be used.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPositionEstimateRequest getPositionEstimateRequest = (GetPositionEstimateRequest) o;
    return Objects.equals(this.wiFiAccessPoints, getPositionEstimateRequest.wiFiAccessPoints) &&
        Objects.equals(this.cellTowers, getPositionEstimateRequest.cellTowers) &&
        Objects.equals(this.ip, getPositionEstimateRequest.ip) &&
        Objects.equals(this.gnss, getPositionEstimateRequest.gnss) &&
        Objects.equals(this.timestamp, getPositionEstimateRequest.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(wiFiAccessPoints, cellTowers, ip, gnss, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPositionEstimateRequest {\n");
    sb.append("    wiFiAccessPoints: ").append(toIndentedString(wiFiAccessPoints)).append("\n");
    sb.append("    cellTowers: ").append(toIndentedString(cellTowers)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    gnss: ").append(toIndentedString(gnss)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WiFiAccessPoints");
    openapiFields.add("CellTowers");
    openapiFields.add("Ip");
    openapiFields.add("Gnss");
    openapiFields.add("Timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPositionEstimateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPositionEstimateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPositionEstimateRequest is not found in the empty JSON string", GetPositionEstimateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPositionEstimateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPositionEstimateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("WiFiAccessPoints") != null && !jsonObj.get("WiFiAccessPoints").isJsonNull()) {
        JsonArray jsonArraywiFiAccessPoints = jsonObj.getAsJsonArray("WiFiAccessPoints");
        if (jsonArraywiFiAccessPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("WiFiAccessPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `WiFiAccessPoints` to be an array in the JSON string but got `%s`", jsonObj.get("WiFiAccessPoints").toString()));
          }

          // validate the optional field `WiFiAccessPoints` (array)
          for (int i = 0; i < jsonArraywiFiAccessPoints.size(); i++) {
            WiFiAccessPoint.validateJsonElement(jsonArraywiFiAccessPoints.get(i));
          };
        }
      }
      // validate the optional field `CellTowers`
      if (jsonObj.get("CellTowers") != null && !jsonObj.get("CellTowers").isJsonNull()) {
        GetPositionEstimateRequestCellTowers.validateJsonElement(jsonObj.get("CellTowers"));
      }
      // validate the optional field `Ip`
      if (jsonObj.get("Ip") != null && !jsonObj.get("Ip").isJsonNull()) {
        GetPositionEstimateRequestIp.validateJsonElement(jsonObj.get("Ip"));
      }
      // validate the optional field `Gnss`
      if (jsonObj.get("Gnss") != null && !jsonObj.get("Gnss").isJsonNull()) {
        GetPositionEstimateRequestGnss.validateJsonElement(jsonObj.get("Gnss"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPositionEstimateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPositionEstimateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPositionEstimateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPositionEstimateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPositionEstimateRequest>() {
           @Override
           public void write(JsonWriter out, GetPositionEstimateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPositionEstimateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPositionEstimateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPositionEstimateRequest
   * @throws IOException if the JSON string is invalid with respect to GetPositionEstimateRequest
   */
  public static GetPositionEstimateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPositionEstimateRequest.class);
  }

  /**
   * Convert an instance of GetPositionEstimateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

