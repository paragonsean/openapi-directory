/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateFuotaTaskRequestLoRaWAN;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFuotaTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFuotaTaskRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LO_RA_W_A_N = "LoRaWAN";
  @SerializedName(SERIALIZED_NAME_LO_RA_W_A_N)
  private CreateFuotaTaskRequestLoRaWAN loRaWAN;

  public static final String SERIALIZED_NAME_FIRMWARE_UPDATE_IMAGE = "FirmwareUpdateImage";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_UPDATE_IMAGE)
  private String firmwareUpdateImage;

  public static final String SERIALIZED_NAME_FIRMWARE_UPDATE_ROLE = "FirmwareUpdateRole";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_UPDATE_ROLE)
  private String firmwareUpdateRole;

  public static final String SERIALIZED_NAME_REDUNDANCY_PERCENT = "RedundancyPercent";
  @SerializedName(SERIALIZED_NAME_REDUNDANCY_PERCENT)
  private Integer redundancyPercent;

  public static final String SERIALIZED_NAME_FRAGMENT_SIZE_BYTES = "FragmentSizeBytes";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_SIZE_BYTES)
  private Integer fragmentSizeBytes;

  public static final String SERIALIZED_NAME_FRAGMENT_INTERVAL_M_S = "FragmentIntervalMS";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_INTERVAL_M_S)
  private Integer fragmentIntervalMS;

  public UpdateFuotaTaskRequest() {
  }

  public UpdateFuotaTaskRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of a FUOTA task.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateFuotaTaskRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the new resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateFuotaTaskRequest loRaWAN(CreateFuotaTaskRequestLoRaWAN loRaWAN) {
    this.loRaWAN = loRaWAN;
    return this;
  }

  /**
   * Get loRaWAN
   * @return loRaWAN
   */
  @javax.annotation.Nullable
  public CreateFuotaTaskRequestLoRaWAN getLoRaWAN() {
    return loRaWAN;
  }

  public void setLoRaWAN(CreateFuotaTaskRequestLoRaWAN loRaWAN) {
    this.loRaWAN = loRaWAN;
  }


  public UpdateFuotaTaskRequest firmwareUpdateImage(String firmwareUpdateImage) {
    this.firmwareUpdateImage = firmwareUpdateImage;
    return this;
  }

  /**
   * The S3 URI points to a firmware update image that is to be used with a FUOTA task.
   * @return firmwareUpdateImage
   */
  @javax.annotation.Nullable
  public String getFirmwareUpdateImage() {
    return firmwareUpdateImage;
  }

  public void setFirmwareUpdateImage(String firmwareUpdateImage) {
    this.firmwareUpdateImage = firmwareUpdateImage;
  }


  public UpdateFuotaTaskRequest firmwareUpdateRole(String firmwareUpdateRole) {
    this.firmwareUpdateRole = firmwareUpdateRole;
    return this;
  }

  /**
   * The firmware update role that is to be used with a FUOTA task.
   * @return firmwareUpdateRole
   */
  @javax.annotation.Nullable
  public String getFirmwareUpdateRole() {
    return firmwareUpdateRole;
  }

  public void setFirmwareUpdateRole(String firmwareUpdateRole) {
    this.firmwareUpdateRole = firmwareUpdateRole;
  }


  public UpdateFuotaTaskRequest redundancyPercent(Integer redundancyPercent) {
    this.redundancyPercent = redundancyPercent;
    return this;
  }

  /**
   * The percentage of the added fragments that are redundant. For example, if the size of the firmware image file is 100 bytes and the fragment size is 10 bytes, with &lt;code&gt;RedundancyPercent&lt;/code&gt; set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) &#x3D; 15.
   * minimum: 0
   * maximum: 100
   * @return redundancyPercent
   */
  @javax.annotation.Nullable
  public Integer getRedundancyPercent() {
    return redundancyPercent;
  }

  public void setRedundancyPercent(Integer redundancyPercent) {
    this.redundancyPercent = redundancyPercent;
  }


  public UpdateFuotaTaskRequest fragmentSizeBytes(Integer fragmentSizeBytes) {
    this.fragmentSizeBytes = fragmentSizeBytes;
    return this;
  }

  /**
   * The size of each fragment in bytes. This parameter is supported only for FUOTA tasks with multicast groups.
   * minimum: 1
   * @return fragmentSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getFragmentSizeBytes() {
    return fragmentSizeBytes;
  }

  public void setFragmentSizeBytes(Integer fragmentSizeBytes) {
    this.fragmentSizeBytes = fragmentSizeBytes;
  }


  public UpdateFuotaTaskRequest fragmentIntervalMS(Integer fragmentIntervalMS) {
    this.fragmentIntervalMS = fragmentIntervalMS;
    return this;
  }

  /**
   * &lt;p&gt;The interval for sending fragments in milliseconds, rounded to the nearest second.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This interval only determines the timing for when the Cloud sends down the fragments to yor device. There can be a delay for when your device will receive these fragments. This delay depends on the device&#39;s class and the communication delay with the cloud.&lt;/p&gt; &lt;/note&gt;
   * minimum: 1
   * @return fragmentIntervalMS
   */
  @javax.annotation.Nullable
  public Integer getFragmentIntervalMS() {
    return fragmentIntervalMS;
  }

  public void setFragmentIntervalMS(Integer fragmentIntervalMS) {
    this.fragmentIntervalMS = fragmentIntervalMS;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFuotaTaskRequest updateFuotaTaskRequest = (UpdateFuotaTaskRequest) o;
    return Objects.equals(this.name, updateFuotaTaskRequest.name) &&
        Objects.equals(this.description, updateFuotaTaskRequest.description) &&
        Objects.equals(this.loRaWAN, updateFuotaTaskRequest.loRaWAN) &&
        Objects.equals(this.firmwareUpdateImage, updateFuotaTaskRequest.firmwareUpdateImage) &&
        Objects.equals(this.firmwareUpdateRole, updateFuotaTaskRequest.firmwareUpdateRole) &&
        Objects.equals(this.redundancyPercent, updateFuotaTaskRequest.redundancyPercent) &&
        Objects.equals(this.fragmentSizeBytes, updateFuotaTaskRequest.fragmentSizeBytes) &&
        Objects.equals(this.fragmentIntervalMS, updateFuotaTaskRequest.fragmentIntervalMS);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, loRaWAN, firmwareUpdateImage, firmwareUpdateRole, redundancyPercent, fragmentSizeBytes, fragmentIntervalMS);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFuotaTaskRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    loRaWAN: ").append(toIndentedString(loRaWAN)).append("\n");
    sb.append("    firmwareUpdateImage: ").append(toIndentedString(firmwareUpdateImage)).append("\n");
    sb.append("    firmwareUpdateRole: ").append(toIndentedString(firmwareUpdateRole)).append("\n");
    sb.append("    redundancyPercent: ").append(toIndentedString(redundancyPercent)).append("\n");
    sb.append("    fragmentSizeBytes: ").append(toIndentedString(fragmentSizeBytes)).append("\n");
    sb.append("    fragmentIntervalMS: ").append(toIndentedString(fragmentIntervalMS)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("LoRaWAN");
    openapiFields.add("FirmwareUpdateImage");
    openapiFields.add("FirmwareUpdateRole");
    openapiFields.add("RedundancyPercent");
    openapiFields.add("FragmentSizeBytes");
    openapiFields.add("FragmentIntervalMS");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFuotaTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFuotaTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFuotaTaskRequest is not found in the empty JSON string", UpdateFuotaTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFuotaTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFuotaTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `LoRaWAN`
      if (jsonObj.get("LoRaWAN") != null && !jsonObj.get("LoRaWAN").isJsonNull()) {
        CreateFuotaTaskRequestLoRaWAN.validateJsonElement(jsonObj.get("LoRaWAN"));
      }
      if ((jsonObj.get("FirmwareUpdateImage") != null && !jsonObj.get("FirmwareUpdateImage").isJsonNull()) && !jsonObj.get("FirmwareUpdateImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirmwareUpdateImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirmwareUpdateImage").toString()));
      }
      if ((jsonObj.get("FirmwareUpdateRole") != null && !jsonObj.get("FirmwareUpdateRole").isJsonNull()) && !jsonObj.get("FirmwareUpdateRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirmwareUpdateRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirmwareUpdateRole").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFuotaTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFuotaTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFuotaTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFuotaTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFuotaTaskRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFuotaTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFuotaTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFuotaTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFuotaTaskRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFuotaTaskRequest
   */
  public static UpdateFuotaTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFuotaTaskRequest.class);
  }

  /**
   * Convert an instance of UpdateFuotaTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

