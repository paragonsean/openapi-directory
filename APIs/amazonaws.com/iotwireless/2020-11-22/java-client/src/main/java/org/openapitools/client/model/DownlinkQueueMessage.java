/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LoRaWANSendDataToDevice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The message in the downlink queue.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DownlinkQueueMessage {
  public static final String SERIALIZED_NAME_MESSAGE_ID = "MessageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_TRANSMIT_MODE = "TransmitMode";
  @SerializedName(SERIALIZED_NAME_TRANSMIT_MODE)
  private Integer transmitMode;

  public static final String SERIALIZED_NAME_RECEIVED_AT = "ReceivedAt";
  @SerializedName(SERIALIZED_NAME_RECEIVED_AT)
  private String receivedAt;

  public static final String SERIALIZED_NAME_LO_RA_W_A_N = "LoRaWAN";
  @SerializedName(SERIALIZED_NAME_LO_RA_W_A_N)
  private LoRaWANSendDataToDevice loRaWAN;

  public DownlinkQueueMessage() {
  }

  public DownlinkQueueMessage messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public DownlinkQueueMessage transmitMode(Integer transmitMode) {
    this.transmitMode = transmitMode;
    return this;
  }

  /**
   * Get transmitMode
   * @return transmitMode
   */
  @javax.annotation.Nullable
  public Integer getTransmitMode() {
    return transmitMode;
  }

  public void setTransmitMode(Integer transmitMode) {
    this.transmitMode = transmitMode;
  }


  public DownlinkQueueMessage receivedAt(String receivedAt) {
    this.receivedAt = receivedAt;
    return this;
  }

  /**
   * Get receivedAt
   * @return receivedAt
   */
  @javax.annotation.Nullable
  public String getReceivedAt() {
    return receivedAt;
  }

  public void setReceivedAt(String receivedAt) {
    this.receivedAt = receivedAt;
  }


  public DownlinkQueueMessage loRaWAN(LoRaWANSendDataToDevice loRaWAN) {
    this.loRaWAN = loRaWAN;
    return this;
  }

  /**
   * Get loRaWAN
   * @return loRaWAN
   */
  @javax.annotation.Nullable
  public LoRaWANSendDataToDevice getLoRaWAN() {
    return loRaWAN;
  }

  public void setLoRaWAN(LoRaWANSendDataToDevice loRaWAN) {
    this.loRaWAN = loRaWAN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DownlinkQueueMessage downlinkQueueMessage = (DownlinkQueueMessage) o;
    return Objects.equals(this.messageId, downlinkQueueMessage.messageId) &&
        Objects.equals(this.transmitMode, downlinkQueueMessage.transmitMode) &&
        Objects.equals(this.receivedAt, downlinkQueueMessage.receivedAt) &&
        Objects.equals(this.loRaWAN, downlinkQueueMessage.loRaWAN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, transmitMode, receivedAt, loRaWAN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DownlinkQueueMessage {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    transmitMode: ").append(toIndentedString(transmitMode)).append("\n");
    sb.append("    receivedAt: ").append(toIndentedString(receivedAt)).append("\n");
    sb.append("    loRaWAN: ").append(toIndentedString(loRaWAN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MessageId");
    openapiFields.add("TransmitMode");
    openapiFields.add("ReceivedAt");
    openapiFields.add("LoRaWAN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DownlinkQueueMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DownlinkQueueMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DownlinkQueueMessage is not found in the empty JSON string", DownlinkQueueMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DownlinkQueueMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DownlinkQueueMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MessageId`
      if (jsonObj.get("MessageId") != null && !jsonObj.get("MessageId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MessageId"));
      }
      // validate the optional field `TransmitMode`
      if (jsonObj.get("TransmitMode") != null && !jsonObj.get("TransmitMode").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TransmitMode"));
      }
      // validate the optional field `ReceivedAt`
      if (jsonObj.get("ReceivedAt") != null && !jsonObj.get("ReceivedAt").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReceivedAt"));
      }
      // validate the optional field `LoRaWAN`
      if (jsonObj.get("LoRaWAN") != null && !jsonObj.get("LoRaWAN").isJsonNull()) {
        LoRaWANSendDataToDevice.validateJsonElement(jsonObj.get("LoRaWAN"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DownlinkQueueMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DownlinkQueueMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DownlinkQueueMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DownlinkQueueMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DownlinkQueueMessage>() {
           @Override
           public void write(JsonWriter out, DownlinkQueueMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DownlinkQueueMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DownlinkQueueMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DownlinkQueueMessage
   * @throws IOException if the JSON string is invalid with respect to DownlinkQueueMessage
   */
  public static DownlinkQueueMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DownlinkQueueMessage.class);
  }

  /**
   * Convert an instance of DownlinkQueueMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

