/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AbpV11SessionKeys
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AbpV11SessionKeys {
  public static final String SERIALIZED_NAME_FNWK_S_INT_KEY = "FNwkSIntKey";
  @SerializedName(SERIALIZED_NAME_FNWK_S_INT_KEY)
  private String fnwkSIntKey;

  public static final String SERIALIZED_NAME_SNWK_S_INT_KEY = "SNwkSIntKey";
  @SerializedName(SERIALIZED_NAME_SNWK_S_INT_KEY)
  private String snwkSIntKey;

  public static final String SERIALIZED_NAME_NWK_S_ENC_KEY = "NwkSEncKey";
  @SerializedName(SERIALIZED_NAME_NWK_S_ENC_KEY)
  private String nwkSEncKey;

  public static final String SERIALIZED_NAME_APP_S_KEY = "AppSKey";
  @SerializedName(SERIALIZED_NAME_APP_S_KEY)
  private String appSKey;

  public AbpV11SessionKeys() {
  }

  public AbpV11SessionKeys fnwkSIntKey(String fnwkSIntKey) {
    this.fnwkSIntKey = fnwkSIntKey;
    return this;
  }

  /**
   * Get fnwkSIntKey
   * @return fnwkSIntKey
   */
  @javax.annotation.Nullable
  public String getFnwkSIntKey() {
    return fnwkSIntKey;
  }

  public void setFnwkSIntKey(String fnwkSIntKey) {
    this.fnwkSIntKey = fnwkSIntKey;
  }


  public AbpV11SessionKeys snwkSIntKey(String snwkSIntKey) {
    this.snwkSIntKey = snwkSIntKey;
    return this;
  }

  /**
   * Get snwkSIntKey
   * @return snwkSIntKey
   */
  @javax.annotation.Nullable
  public String getSnwkSIntKey() {
    return snwkSIntKey;
  }

  public void setSnwkSIntKey(String snwkSIntKey) {
    this.snwkSIntKey = snwkSIntKey;
  }


  public AbpV11SessionKeys nwkSEncKey(String nwkSEncKey) {
    this.nwkSEncKey = nwkSEncKey;
    return this;
  }

  /**
   * Get nwkSEncKey
   * @return nwkSEncKey
   */
  @javax.annotation.Nullable
  public String getNwkSEncKey() {
    return nwkSEncKey;
  }

  public void setNwkSEncKey(String nwkSEncKey) {
    this.nwkSEncKey = nwkSEncKey;
  }


  public AbpV11SessionKeys appSKey(String appSKey) {
    this.appSKey = appSKey;
    return this;
  }

  /**
   * Get appSKey
   * @return appSKey
   */
  @javax.annotation.Nullable
  public String getAppSKey() {
    return appSKey;
  }

  public void setAppSKey(String appSKey) {
    this.appSKey = appSKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbpV11SessionKeys abpV11SessionKeys = (AbpV11SessionKeys) o;
    return Objects.equals(this.fnwkSIntKey, abpV11SessionKeys.fnwkSIntKey) &&
        Objects.equals(this.snwkSIntKey, abpV11SessionKeys.snwkSIntKey) &&
        Objects.equals(this.nwkSEncKey, abpV11SessionKeys.nwkSEncKey) &&
        Objects.equals(this.appSKey, abpV11SessionKeys.appSKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fnwkSIntKey, snwkSIntKey, nwkSEncKey, appSKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbpV11SessionKeys {\n");
    sb.append("    fnwkSIntKey: ").append(toIndentedString(fnwkSIntKey)).append("\n");
    sb.append("    snwkSIntKey: ").append(toIndentedString(snwkSIntKey)).append("\n");
    sb.append("    nwkSEncKey: ").append(toIndentedString(nwkSEncKey)).append("\n");
    sb.append("    appSKey: ").append(toIndentedString(appSKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FNwkSIntKey");
    openapiFields.add("SNwkSIntKey");
    openapiFields.add("NwkSEncKey");
    openapiFields.add("AppSKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbpV11SessionKeys
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbpV11SessionKeys.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbpV11SessionKeys is not found in the empty JSON string", AbpV11SessionKeys.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbpV11SessionKeys.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbpV11SessionKeys` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FNwkSIntKey`
      if (jsonObj.get("FNwkSIntKey") != null && !jsonObj.get("FNwkSIntKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FNwkSIntKey"));
      }
      // validate the optional field `SNwkSIntKey`
      if (jsonObj.get("SNwkSIntKey") != null && !jsonObj.get("SNwkSIntKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SNwkSIntKey"));
      }
      // validate the optional field `NwkSEncKey`
      if (jsonObj.get("NwkSEncKey") != null && !jsonObj.get("NwkSEncKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NwkSEncKey"));
      }
      // validate the optional field `AppSKey`
      if (jsonObj.get("AppSKey") != null && !jsonObj.get("AppSKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppSKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbpV11SessionKeys.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbpV11SessionKeys' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbpV11SessionKeys> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbpV11SessionKeys.class));

       return (TypeAdapter<T>) new TypeAdapter<AbpV11SessionKeys>() {
           @Override
           public void write(JsonWriter out, AbpV11SessionKeys value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbpV11SessionKeys read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbpV11SessionKeys given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbpV11SessionKeys
   * @throws IOException if the JSON string is invalid with respect to AbpV11SessionKeys
   */
  public static AbpV11SessionKeys fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbpV11SessionKeys.class);
  }

  /**
   * Convert an instance of AbpV11SessionKeys to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

