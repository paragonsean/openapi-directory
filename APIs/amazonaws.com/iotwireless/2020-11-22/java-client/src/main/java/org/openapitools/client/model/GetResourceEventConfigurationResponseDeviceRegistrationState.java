/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EventNotificationTopicStatus;
import org.openapitools.client.model.UpdateResourceEventConfigurationRequestDeviceRegistrationStateSidewalk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetResourceEventConfigurationResponseDeviceRegistrationState
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetResourceEventConfigurationResponseDeviceRegistrationState {
  public static final String SERIALIZED_NAME_SIDEWALK = "Sidewalk";
  @SerializedName(SERIALIZED_NAME_SIDEWALK)
  private UpdateResourceEventConfigurationRequestDeviceRegistrationStateSidewalk sidewalk;

  public static final String SERIALIZED_NAME_WIRELESS_DEVICE_ID_EVENT_TOPIC = "WirelessDeviceIdEventTopic";
  @SerializedName(SERIALIZED_NAME_WIRELESS_DEVICE_ID_EVENT_TOPIC)
  private EventNotificationTopicStatus wirelessDeviceIdEventTopic;

  public GetResourceEventConfigurationResponseDeviceRegistrationState() {
  }

  public GetResourceEventConfigurationResponseDeviceRegistrationState sidewalk(UpdateResourceEventConfigurationRequestDeviceRegistrationStateSidewalk sidewalk) {
    this.sidewalk = sidewalk;
    return this;
  }

  /**
   * Get sidewalk
   * @return sidewalk
   */
  @javax.annotation.Nullable
  public UpdateResourceEventConfigurationRequestDeviceRegistrationStateSidewalk getSidewalk() {
    return sidewalk;
  }

  public void setSidewalk(UpdateResourceEventConfigurationRequestDeviceRegistrationStateSidewalk sidewalk) {
    this.sidewalk = sidewalk;
  }


  public GetResourceEventConfigurationResponseDeviceRegistrationState wirelessDeviceIdEventTopic(EventNotificationTopicStatus wirelessDeviceIdEventTopic) {
    this.wirelessDeviceIdEventTopic = wirelessDeviceIdEventTopic;
    return this;
  }

  /**
   * Get wirelessDeviceIdEventTopic
   * @return wirelessDeviceIdEventTopic
   */
  @javax.annotation.Nullable
  public EventNotificationTopicStatus getWirelessDeviceIdEventTopic() {
    return wirelessDeviceIdEventTopic;
  }

  public void setWirelessDeviceIdEventTopic(EventNotificationTopicStatus wirelessDeviceIdEventTopic) {
    this.wirelessDeviceIdEventTopic = wirelessDeviceIdEventTopic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetResourceEventConfigurationResponseDeviceRegistrationState getResourceEventConfigurationResponseDeviceRegistrationState = (GetResourceEventConfigurationResponseDeviceRegistrationState) o;
    return Objects.equals(this.sidewalk, getResourceEventConfigurationResponseDeviceRegistrationState.sidewalk) &&
        Objects.equals(this.wirelessDeviceIdEventTopic, getResourceEventConfigurationResponseDeviceRegistrationState.wirelessDeviceIdEventTopic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sidewalk, wirelessDeviceIdEventTopic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetResourceEventConfigurationResponseDeviceRegistrationState {\n");
    sb.append("    sidewalk: ").append(toIndentedString(sidewalk)).append("\n");
    sb.append("    wirelessDeviceIdEventTopic: ").append(toIndentedString(wirelessDeviceIdEventTopic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Sidewalk");
    openapiFields.add("WirelessDeviceIdEventTopic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetResourceEventConfigurationResponseDeviceRegistrationState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetResourceEventConfigurationResponseDeviceRegistrationState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetResourceEventConfigurationResponseDeviceRegistrationState is not found in the empty JSON string", GetResourceEventConfigurationResponseDeviceRegistrationState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetResourceEventConfigurationResponseDeviceRegistrationState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetResourceEventConfigurationResponseDeviceRegistrationState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Sidewalk`
      if (jsonObj.get("Sidewalk") != null && !jsonObj.get("Sidewalk").isJsonNull()) {
        UpdateResourceEventConfigurationRequestDeviceRegistrationStateSidewalk.validateJsonElement(jsonObj.get("Sidewalk"));
      }
      // validate the optional field `WirelessDeviceIdEventTopic`
      if (jsonObj.get("WirelessDeviceIdEventTopic") != null && !jsonObj.get("WirelessDeviceIdEventTopic").isJsonNull()) {
        EventNotificationTopicStatus.validateJsonElement(jsonObj.get("WirelessDeviceIdEventTopic"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetResourceEventConfigurationResponseDeviceRegistrationState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetResourceEventConfigurationResponseDeviceRegistrationState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetResourceEventConfigurationResponseDeviceRegistrationState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetResourceEventConfigurationResponseDeviceRegistrationState.class));

       return (TypeAdapter<T>) new TypeAdapter<GetResourceEventConfigurationResponseDeviceRegistrationState>() {
           @Override
           public void write(JsonWriter out, GetResourceEventConfigurationResponseDeviceRegistrationState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetResourceEventConfigurationResponseDeviceRegistrationState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetResourceEventConfigurationResponseDeviceRegistrationState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetResourceEventConfigurationResponseDeviceRegistrationState
   * @throws IOException if the JSON string is invalid with respect to GetResourceEventConfigurationResponseDeviceRegistrationState
   */
  public static GetResourceEventConfigurationResponseDeviceRegistrationState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetResourceEventConfigurationResponseDeviceRegistrationState.class);
  }

  /**
   * Convert an instance of GetResourceEventConfigurationResponseDeviceRegistrationState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

