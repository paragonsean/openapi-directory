/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetWirelessDeviceResponseLoRaWAN;
import org.openapitools.client.model.GetWirelessDeviceResponseSidewalk;
import org.openapitools.client.model.PositioningConfigStatus;
import org.openapitools.client.model.WirelessDeviceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetWirelessDeviceResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetWirelessDeviceResponse {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private WirelessDeviceType type;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "DestinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_THING_NAME = "ThingName";
  @SerializedName(SERIALIZED_NAME_THING_NAME)
  private String thingName;

  public static final String SERIALIZED_NAME_THING_ARN = "ThingArn";
  @SerializedName(SERIALIZED_NAME_THING_ARN)
  private String thingArn;

  public static final String SERIALIZED_NAME_LO_RA_W_A_N = "LoRaWAN";
  @SerializedName(SERIALIZED_NAME_LO_RA_W_A_N)
  private GetWirelessDeviceResponseLoRaWAN loRaWAN;

  public static final String SERIALIZED_NAME_SIDEWALK = "Sidewalk";
  @SerializedName(SERIALIZED_NAME_SIDEWALK)
  private GetWirelessDeviceResponseSidewalk sidewalk;

  public static final String SERIALIZED_NAME_POSITIONING = "Positioning";
  @SerializedName(SERIALIZED_NAME_POSITIONING)
  private PositioningConfigStatus positioning;

  public GetWirelessDeviceResponse() {
  }

  public GetWirelessDeviceResponse type(WirelessDeviceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public WirelessDeviceType getType() {
    return type;
  }

  public void setType(WirelessDeviceType type) {
    this.type = type;
  }


  public GetWirelessDeviceResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetWirelessDeviceResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetWirelessDeviceResponse destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Get destinationName
   * @return destinationName
   */
  @javax.annotation.Nullable
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public GetWirelessDeviceResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetWirelessDeviceResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetWirelessDeviceResponse thingName(String thingName) {
    this.thingName = thingName;
    return this;
  }

  /**
   * Get thingName
   * @return thingName
   */
  @javax.annotation.Nullable
  public String getThingName() {
    return thingName;
  }

  public void setThingName(String thingName) {
    this.thingName = thingName;
  }


  public GetWirelessDeviceResponse thingArn(String thingArn) {
    this.thingArn = thingArn;
    return this;
  }

  /**
   * Get thingArn
   * @return thingArn
   */
  @javax.annotation.Nullable
  public String getThingArn() {
    return thingArn;
  }

  public void setThingArn(String thingArn) {
    this.thingArn = thingArn;
  }


  public GetWirelessDeviceResponse loRaWAN(GetWirelessDeviceResponseLoRaWAN loRaWAN) {
    this.loRaWAN = loRaWAN;
    return this;
  }

  /**
   * Get loRaWAN
   * @return loRaWAN
   */
  @javax.annotation.Nullable
  public GetWirelessDeviceResponseLoRaWAN getLoRaWAN() {
    return loRaWAN;
  }

  public void setLoRaWAN(GetWirelessDeviceResponseLoRaWAN loRaWAN) {
    this.loRaWAN = loRaWAN;
  }


  public GetWirelessDeviceResponse sidewalk(GetWirelessDeviceResponseSidewalk sidewalk) {
    this.sidewalk = sidewalk;
    return this;
  }

  /**
   * Get sidewalk
   * @return sidewalk
   */
  @javax.annotation.Nullable
  public GetWirelessDeviceResponseSidewalk getSidewalk() {
    return sidewalk;
  }

  public void setSidewalk(GetWirelessDeviceResponseSidewalk sidewalk) {
    this.sidewalk = sidewalk;
  }


  public GetWirelessDeviceResponse positioning(PositioningConfigStatus positioning) {
    this.positioning = positioning;
    return this;
  }

  /**
   * Get positioning
   * @return positioning
   */
  @javax.annotation.Nullable
  public PositioningConfigStatus getPositioning() {
    return positioning;
  }

  public void setPositioning(PositioningConfigStatus positioning) {
    this.positioning = positioning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWirelessDeviceResponse getWirelessDeviceResponse = (GetWirelessDeviceResponse) o;
    return Objects.equals(this.type, getWirelessDeviceResponse.type) &&
        Objects.equals(this.name, getWirelessDeviceResponse.name) &&
        Objects.equals(this.description, getWirelessDeviceResponse.description) &&
        Objects.equals(this.destinationName, getWirelessDeviceResponse.destinationName) &&
        Objects.equals(this.id, getWirelessDeviceResponse.id) &&
        Objects.equals(this.arn, getWirelessDeviceResponse.arn) &&
        Objects.equals(this.thingName, getWirelessDeviceResponse.thingName) &&
        Objects.equals(this.thingArn, getWirelessDeviceResponse.thingArn) &&
        Objects.equals(this.loRaWAN, getWirelessDeviceResponse.loRaWAN) &&
        Objects.equals(this.sidewalk, getWirelessDeviceResponse.sidewalk) &&
        Objects.equals(this.positioning, getWirelessDeviceResponse.positioning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, name, description, destinationName, id, arn, thingName, thingArn, loRaWAN, sidewalk, positioning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWirelessDeviceResponse {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    thingName: ").append(toIndentedString(thingName)).append("\n");
    sb.append("    thingArn: ").append(toIndentedString(thingArn)).append("\n");
    sb.append("    loRaWAN: ").append(toIndentedString(loRaWAN)).append("\n");
    sb.append("    sidewalk: ").append(toIndentedString(sidewalk)).append("\n");
    sb.append("    positioning: ").append(toIndentedString(positioning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("DestinationName");
    openapiFields.add("Id");
    openapiFields.add("Arn");
    openapiFields.add("ThingName");
    openapiFields.add("ThingArn");
    openapiFields.add("LoRaWAN");
    openapiFields.add("Sidewalk");
    openapiFields.add("Positioning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetWirelessDeviceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWirelessDeviceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWirelessDeviceResponse is not found in the empty JSON string", GetWirelessDeviceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWirelessDeviceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWirelessDeviceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        WirelessDeviceType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DestinationName`
      if (jsonObj.get("DestinationName") != null && !jsonObj.get("DestinationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DestinationName"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `ThingName`
      if (jsonObj.get("ThingName") != null && !jsonObj.get("ThingName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ThingName"));
      }
      // validate the optional field `ThingArn`
      if (jsonObj.get("ThingArn") != null && !jsonObj.get("ThingArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ThingArn"));
      }
      // validate the optional field `LoRaWAN`
      if (jsonObj.get("LoRaWAN") != null && !jsonObj.get("LoRaWAN").isJsonNull()) {
        GetWirelessDeviceResponseLoRaWAN.validateJsonElement(jsonObj.get("LoRaWAN"));
      }
      // validate the optional field `Sidewalk`
      if (jsonObj.get("Sidewalk") != null && !jsonObj.get("Sidewalk").isJsonNull()) {
        GetWirelessDeviceResponseSidewalk.validateJsonElement(jsonObj.get("Sidewalk"));
      }
      // validate the optional field `Positioning`
      if (jsonObj.get("Positioning") != null && !jsonObj.get("Positioning").isJsonNull()) {
        PositioningConfigStatus.validateJsonElement(jsonObj.get("Positioning"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWirelessDeviceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWirelessDeviceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWirelessDeviceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWirelessDeviceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWirelessDeviceResponse>() {
           @Override
           public void write(JsonWriter out, GetWirelessDeviceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWirelessDeviceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetWirelessDeviceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetWirelessDeviceResponse
   * @throws IOException if the JSON string is invalid with respect to GetWirelessDeviceResponse
   */
  public static GetWirelessDeviceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWirelessDeviceResponse.class);
  }

  /**
   * Convert an instance of GetWirelessDeviceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

