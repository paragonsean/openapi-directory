/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The cell towers that were used to perform the measurements.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CellTowers {
  public static final String SERIALIZED_NAME_GSM = "Gsm";
  @SerializedName(SERIALIZED_NAME_GSM)
  private List gsm;

  public static final String SERIALIZED_NAME_WCDMA = "Wcdma";
  @SerializedName(SERIALIZED_NAME_WCDMA)
  private List wcdma;

  public static final String SERIALIZED_NAME_TDSCDMA = "Tdscdma";
  @SerializedName(SERIALIZED_NAME_TDSCDMA)
  private List tdscdma;

  public static final String SERIALIZED_NAME_LTE = "Lte";
  @SerializedName(SERIALIZED_NAME_LTE)
  private List lte;

  public static final String SERIALIZED_NAME_CDMA = "Cdma";
  @SerializedName(SERIALIZED_NAME_CDMA)
  private List cdma;

  public CellTowers() {
  }

  public CellTowers gsm(List gsm) {
    this.gsm = gsm;
    return this;
  }

  /**
   * Get gsm
   * @return gsm
   */
  @javax.annotation.Nullable
  public List getGsm() {
    return gsm;
  }

  public void setGsm(List gsm) {
    this.gsm = gsm;
  }


  public CellTowers wcdma(List wcdma) {
    this.wcdma = wcdma;
    return this;
  }

  /**
   * Get wcdma
   * @return wcdma
   */
  @javax.annotation.Nullable
  public List getWcdma() {
    return wcdma;
  }

  public void setWcdma(List wcdma) {
    this.wcdma = wcdma;
  }


  public CellTowers tdscdma(List tdscdma) {
    this.tdscdma = tdscdma;
    return this;
  }

  /**
   * Get tdscdma
   * @return tdscdma
   */
  @javax.annotation.Nullable
  public List getTdscdma() {
    return tdscdma;
  }

  public void setTdscdma(List tdscdma) {
    this.tdscdma = tdscdma;
  }


  public CellTowers lte(List lte) {
    this.lte = lte;
    return this;
  }

  /**
   * Get lte
   * @return lte
   */
  @javax.annotation.Nullable
  public List getLte() {
    return lte;
  }

  public void setLte(List lte) {
    this.lte = lte;
  }


  public CellTowers cdma(List cdma) {
    this.cdma = cdma;
    return this;
  }

  /**
   * Get cdma
   * @return cdma
   */
  @javax.annotation.Nullable
  public List getCdma() {
    return cdma;
  }

  public void setCdma(List cdma) {
    this.cdma = cdma;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CellTowers cellTowers = (CellTowers) o;
    return Objects.equals(this.gsm, cellTowers.gsm) &&
        Objects.equals(this.wcdma, cellTowers.wcdma) &&
        Objects.equals(this.tdscdma, cellTowers.tdscdma) &&
        Objects.equals(this.lte, cellTowers.lte) &&
        Objects.equals(this.cdma, cellTowers.cdma);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gsm, wcdma, tdscdma, lte, cdma);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CellTowers {\n");
    sb.append("    gsm: ").append(toIndentedString(gsm)).append("\n");
    sb.append("    wcdma: ").append(toIndentedString(wcdma)).append("\n");
    sb.append("    tdscdma: ").append(toIndentedString(tdscdma)).append("\n");
    sb.append("    lte: ").append(toIndentedString(lte)).append("\n");
    sb.append("    cdma: ").append(toIndentedString(cdma)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Gsm");
    openapiFields.add("Wcdma");
    openapiFields.add("Tdscdma");
    openapiFields.add("Lte");
    openapiFields.add("Cdma");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CellTowers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CellTowers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CellTowers is not found in the empty JSON string", CellTowers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CellTowers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CellTowers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Gsm`
      if (jsonObj.get("Gsm") != null && !jsonObj.get("Gsm").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Gsm"));
      }
      // validate the optional field `Wcdma`
      if (jsonObj.get("Wcdma") != null && !jsonObj.get("Wcdma").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Wcdma"));
      }
      // validate the optional field `Tdscdma`
      if (jsonObj.get("Tdscdma") != null && !jsonObj.get("Tdscdma").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tdscdma"));
      }
      // validate the optional field `Lte`
      if (jsonObj.get("Lte") != null && !jsonObj.get("Lte").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Lte"));
      }
      // validate the optional field `Cdma`
      if (jsonObj.get("Cdma") != null && !jsonObj.get("Cdma").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Cdma"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CellTowers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CellTowers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CellTowers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CellTowers.class));

       return (TypeAdapter<T>) new TypeAdapter<CellTowers>() {
           @Override
           public void write(JsonWriter out, CellTowers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CellTowers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CellTowers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CellTowers
   * @throws IOException if the JSON string is invalid with respect to CellTowers
   */
  public static CellTowers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CellTowers.class);
  }

  /**
   * Convert an instance of CellTowers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

