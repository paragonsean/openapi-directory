/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Global navigation satellite system (GNSS) object used for positioning.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Gnss {
  public static final String SERIALIZED_NAME_PAYLOAD = "Payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  public static final String SERIALIZED_NAME_CAPTURE_TIME = "CaptureTime";
  @SerializedName(SERIALIZED_NAME_CAPTURE_TIME)
  private Float captureTime;

  public static final String SERIALIZED_NAME_CAPTURE_TIME_ACCURACY = "CaptureTimeAccuracy";
  @SerializedName(SERIALIZED_NAME_CAPTURE_TIME_ACCURACY)
  private Float captureTimeAccuracy;

  public static final String SERIALIZED_NAME_ASSIST_POSITION = "AssistPosition";
  @SerializedName(SERIALIZED_NAME_ASSIST_POSITION)
  private List assistPosition;

  public static final String SERIALIZED_NAME_ASSIST_ALTITUDE = "AssistAltitude";
  @SerializedName(SERIALIZED_NAME_ASSIST_ALTITUDE)
  private Float assistAltitude;

  public static final String SERIALIZED_NAME_USE2_D_SOLVER = "Use2DSolver";
  @SerializedName(SERIALIZED_NAME_USE2_D_SOLVER)
  private Boolean use2DSolver;

  public Gnss() {
  }

  public Gnss payload(String payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Get payload
   * @return payload
   */
  @javax.annotation.Nonnull
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }


  public Gnss captureTime(Float captureTime) {
    this.captureTime = captureTime;
    return this;
  }

  /**
   * Get captureTime
   * @return captureTime
   */
  @javax.annotation.Nullable
  public Float getCaptureTime() {
    return captureTime;
  }

  public void setCaptureTime(Float captureTime) {
    this.captureTime = captureTime;
  }


  public Gnss captureTimeAccuracy(Float captureTimeAccuracy) {
    this.captureTimeAccuracy = captureTimeAccuracy;
    return this;
  }

  /**
   * Get captureTimeAccuracy
   * @return captureTimeAccuracy
   */
  @javax.annotation.Nullable
  public Float getCaptureTimeAccuracy() {
    return captureTimeAccuracy;
  }

  public void setCaptureTimeAccuracy(Float captureTimeAccuracy) {
    this.captureTimeAccuracy = captureTimeAccuracy;
  }


  public Gnss assistPosition(List assistPosition) {
    this.assistPosition = assistPosition;
    return this;
  }

  /**
   * Get assistPosition
   * @return assistPosition
   */
  @javax.annotation.Nullable
  public List getAssistPosition() {
    return assistPosition;
  }

  public void setAssistPosition(List assistPosition) {
    this.assistPosition = assistPosition;
  }


  public Gnss assistAltitude(Float assistAltitude) {
    this.assistAltitude = assistAltitude;
    return this;
  }

  /**
   * Get assistAltitude
   * @return assistAltitude
   */
  @javax.annotation.Nullable
  public Float getAssistAltitude() {
    return assistAltitude;
  }

  public void setAssistAltitude(Float assistAltitude) {
    this.assistAltitude = assistAltitude;
  }


  public Gnss use2DSolver(Boolean use2DSolver) {
    this.use2DSolver = use2DSolver;
    return this;
  }

  /**
   * Get use2DSolver
   * @return use2DSolver
   */
  @javax.annotation.Nullable
  public Boolean getUse2DSolver() {
    return use2DSolver;
  }

  public void setUse2DSolver(Boolean use2DSolver) {
    this.use2DSolver = use2DSolver;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gnss gnss = (Gnss) o;
    return Objects.equals(this.payload, gnss.payload) &&
        Objects.equals(this.captureTime, gnss.captureTime) &&
        Objects.equals(this.captureTimeAccuracy, gnss.captureTimeAccuracy) &&
        Objects.equals(this.assistPosition, gnss.assistPosition) &&
        Objects.equals(this.assistAltitude, gnss.assistAltitude) &&
        Objects.equals(this.use2DSolver, gnss.use2DSolver);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payload, captureTime, captureTimeAccuracy, assistPosition, assistAltitude, use2DSolver);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gnss {\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    captureTime: ").append(toIndentedString(captureTime)).append("\n");
    sb.append("    captureTimeAccuracy: ").append(toIndentedString(captureTimeAccuracy)).append("\n");
    sb.append("    assistPosition: ").append(toIndentedString(assistPosition)).append("\n");
    sb.append("    assistAltitude: ").append(toIndentedString(assistAltitude)).append("\n");
    sb.append("    use2DSolver: ").append(toIndentedString(use2DSolver)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Payload");
    openapiFields.add("CaptureTime");
    openapiFields.add("CaptureTimeAccuracy");
    openapiFields.add("AssistPosition");
    openapiFields.add("AssistAltitude");
    openapiFields.add("Use2DSolver");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Payload");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Gnss
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Gnss.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Gnss is not found in the empty JSON string", Gnss.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Gnss.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Gnss` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Gnss.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Payload`
      String.validateJsonElement(jsonObj.get("Payload"));
      // validate the optional field `CaptureTime`
      if (jsonObj.get("CaptureTime") != null && !jsonObj.get("CaptureTime").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("CaptureTime"));
      }
      // validate the optional field `CaptureTimeAccuracy`
      if (jsonObj.get("CaptureTimeAccuracy") != null && !jsonObj.get("CaptureTimeAccuracy").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("CaptureTimeAccuracy"));
      }
      // validate the optional field `AssistPosition`
      if (jsonObj.get("AssistPosition") != null && !jsonObj.get("AssistPosition").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AssistPosition"));
      }
      // validate the optional field `AssistAltitude`
      if (jsonObj.get("AssistAltitude") != null && !jsonObj.get("AssistAltitude").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("AssistAltitude"));
      }
      // validate the optional field `Use2DSolver`
      if (jsonObj.get("Use2DSolver") != null && !jsonObj.get("Use2DSolver").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Use2DSolver"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Gnss.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Gnss' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Gnss> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Gnss.class));

       return (TypeAdapter<T>) new TypeAdapter<Gnss>() {
           @Override
           public void write(JsonWriter out, Gnss value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Gnss read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Gnss given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Gnss
   * @throws IOException if the JSON string is invalid with respect to Gnss
   */
  public static Gnss fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Gnss.class);
  }

  /**
   * Convert an instance of Gnss to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

