/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PositionConfigurationItemSolvers;
import org.openapitools.client.model.PositionResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The wrapper for a position configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PositionConfigurationItem {
  public static final String SERIALIZED_NAME_RESOURCE_IDENTIFIER = "ResourceIdentifier";
  @SerializedName(SERIALIZED_NAME_RESOURCE_IDENTIFIER)
  private String resourceIdentifier;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private PositionResourceType resourceType;

  public static final String SERIALIZED_NAME_SOLVERS = "Solvers";
  @SerializedName(SERIALIZED_NAME_SOLVERS)
  private PositionConfigurationItemSolvers solvers;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public PositionConfigurationItem() {
  }

  public PositionConfigurationItem resourceIdentifier(String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
    return this;
  }

  /**
   * Get resourceIdentifier
   * @return resourceIdentifier
   */
  @javax.annotation.Nullable
  public String getResourceIdentifier() {
    return resourceIdentifier;
  }

  public void setResourceIdentifier(String resourceIdentifier) {
    this.resourceIdentifier = resourceIdentifier;
  }


  public PositionConfigurationItem resourceType(PositionResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public PositionResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(PositionResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public PositionConfigurationItem solvers(PositionConfigurationItemSolvers solvers) {
    this.solvers = solvers;
    return this;
  }

  /**
   * Get solvers
   * @return solvers
   */
  @javax.annotation.Nullable
  public PositionConfigurationItemSolvers getSolvers() {
    return solvers;
  }

  public void setSolvers(PositionConfigurationItemSolvers solvers) {
    this.solvers = solvers;
  }


  public PositionConfigurationItem destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PositionConfigurationItem positionConfigurationItem = (PositionConfigurationItem) o;
    return Objects.equals(this.resourceIdentifier, positionConfigurationItem.resourceIdentifier) &&
        Objects.equals(this.resourceType, positionConfigurationItem.resourceType) &&
        Objects.equals(this.solvers, positionConfigurationItem.solvers) &&
        Objects.equals(this.destination, positionConfigurationItem.destination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceIdentifier, resourceType, solvers, destination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PositionConfigurationItem {\n");
    sb.append("    resourceIdentifier: ").append(toIndentedString(resourceIdentifier)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    solvers: ").append(toIndentedString(solvers)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceIdentifier");
    openapiFields.add("ResourceType");
    openapiFields.add("Solvers");
    openapiFields.add("Destination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PositionConfigurationItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PositionConfigurationItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PositionConfigurationItem is not found in the empty JSON string", PositionConfigurationItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PositionConfigurationItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PositionConfigurationItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceIdentifier`
      if (jsonObj.get("ResourceIdentifier") != null && !jsonObj.get("ResourceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceIdentifier"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        PositionResourceType.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the optional field `Solvers`
      if (jsonObj.get("Solvers") != null && !jsonObj.get("Solvers").isJsonNull()) {
        PositionConfigurationItemSolvers.validateJsonElement(jsonObj.get("Solvers"));
      }
      // validate the optional field `Destination`
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Destination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PositionConfigurationItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PositionConfigurationItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PositionConfigurationItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PositionConfigurationItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PositionConfigurationItem>() {
           @Override
           public void write(JsonWriter out, PositionConfigurationItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PositionConfigurationItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PositionConfigurationItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PositionConfigurationItem
   * @throws IOException if the JSON string is invalid with respect to PositionConfigurationItem
   */
  public static PositionConfigurationItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PositionConfigurationItem.class);
  }

  /**
   * Convert an instance of PositionConfigurationItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

