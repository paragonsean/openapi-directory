/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImportTaskStatus;
import org.openapitools.client.model.WirelessDeviceImportTaskSidewalk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an import task for wireless devices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WirelessDeviceImportTask {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "DestinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_SIDEWALK = "Sidewalk";
  @SerializedName(SERIALIZED_NAME_SIDEWALK)
  private WirelessDeviceImportTaskSidewalk sidewalk;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ImportTaskStatus status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "StatusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private String statusReason;

  public static final String SERIALIZED_NAME_INITIALIZED_IMPORTED_DEVICE_COUNT = "InitializedImportedDeviceCount";
  @SerializedName(SERIALIZED_NAME_INITIALIZED_IMPORTED_DEVICE_COUNT)
  private Integer initializedImportedDeviceCount;

  public static final String SERIALIZED_NAME_PENDING_IMPORTED_DEVICE_COUNT = "PendingImportedDeviceCount";
  @SerializedName(SERIALIZED_NAME_PENDING_IMPORTED_DEVICE_COUNT)
  private Integer pendingImportedDeviceCount;

  public static final String SERIALIZED_NAME_ONBOARDED_IMPORTED_DEVICE_COUNT = "OnboardedImportedDeviceCount";
  @SerializedName(SERIALIZED_NAME_ONBOARDED_IMPORTED_DEVICE_COUNT)
  private Integer onboardedImportedDeviceCount;

  public static final String SERIALIZED_NAME_FAILED_IMPORTED_DEVICE_COUNT = "FailedImportedDeviceCount";
  @SerializedName(SERIALIZED_NAME_FAILED_IMPORTED_DEVICE_COUNT)
  private Integer failedImportedDeviceCount;

  public WirelessDeviceImportTask() {
  }

  public WirelessDeviceImportTask id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WirelessDeviceImportTask arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public WirelessDeviceImportTask destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Get destinationName
   * @return destinationName
   */
  @javax.annotation.Nullable
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public WirelessDeviceImportTask sidewalk(WirelessDeviceImportTaskSidewalk sidewalk) {
    this.sidewalk = sidewalk;
    return this;
  }

  /**
   * Get sidewalk
   * @return sidewalk
   */
  @javax.annotation.Nullable
  public WirelessDeviceImportTaskSidewalk getSidewalk() {
    return sidewalk;
  }

  public void setSidewalk(WirelessDeviceImportTaskSidewalk sidewalk) {
    this.sidewalk = sidewalk;
  }


  public WirelessDeviceImportTask creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public WirelessDeviceImportTask status(ImportTaskStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ImportTaskStatus getStatus() {
    return status;
  }

  public void setStatus(ImportTaskStatus status) {
    this.status = status;
  }


  public WirelessDeviceImportTask statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }


  public WirelessDeviceImportTask initializedImportedDeviceCount(Integer initializedImportedDeviceCount) {
    this.initializedImportedDeviceCount = initializedImportedDeviceCount;
    return this;
  }

  /**
   * Get initializedImportedDeviceCount
   * @return initializedImportedDeviceCount
   */
  @javax.annotation.Nullable
  public Integer getInitializedImportedDeviceCount() {
    return initializedImportedDeviceCount;
  }

  public void setInitializedImportedDeviceCount(Integer initializedImportedDeviceCount) {
    this.initializedImportedDeviceCount = initializedImportedDeviceCount;
  }


  public WirelessDeviceImportTask pendingImportedDeviceCount(Integer pendingImportedDeviceCount) {
    this.pendingImportedDeviceCount = pendingImportedDeviceCount;
    return this;
  }

  /**
   * Get pendingImportedDeviceCount
   * @return pendingImportedDeviceCount
   */
  @javax.annotation.Nullable
  public Integer getPendingImportedDeviceCount() {
    return pendingImportedDeviceCount;
  }

  public void setPendingImportedDeviceCount(Integer pendingImportedDeviceCount) {
    this.pendingImportedDeviceCount = pendingImportedDeviceCount;
  }


  public WirelessDeviceImportTask onboardedImportedDeviceCount(Integer onboardedImportedDeviceCount) {
    this.onboardedImportedDeviceCount = onboardedImportedDeviceCount;
    return this;
  }

  /**
   * Get onboardedImportedDeviceCount
   * @return onboardedImportedDeviceCount
   */
  @javax.annotation.Nullable
  public Integer getOnboardedImportedDeviceCount() {
    return onboardedImportedDeviceCount;
  }

  public void setOnboardedImportedDeviceCount(Integer onboardedImportedDeviceCount) {
    this.onboardedImportedDeviceCount = onboardedImportedDeviceCount;
  }


  public WirelessDeviceImportTask failedImportedDeviceCount(Integer failedImportedDeviceCount) {
    this.failedImportedDeviceCount = failedImportedDeviceCount;
    return this;
  }

  /**
   * Get failedImportedDeviceCount
   * @return failedImportedDeviceCount
   */
  @javax.annotation.Nullable
  public Integer getFailedImportedDeviceCount() {
    return failedImportedDeviceCount;
  }

  public void setFailedImportedDeviceCount(Integer failedImportedDeviceCount) {
    this.failedImportedDeviceCount = failedImportedDeviceCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WirelessDeviceImportTask wirelessDeviceImportTask = (WirelessDeviceImportTask) o;
    return Objects.equals(this.id, wirelessDeviceImportTask.id) &&
        Objects.equals(this.arn, wirelessDeviceImportTask.arn) &&
        Objects.equals(this.destinationName, wirelessDeviceImportTask.destinationName) &&
        Objects.equals(this.sidewalk, wirelessDeviceImportTask.sidewalk) &&
        Objects.equals(this.creationTime, wirelessDeviceImportTask.creationTime) &&
        Objects.equals(this.status, wirelessDeviceImportTask.status) &&
        Objects.equals(this.statusReason, wirelessDeviceImportTask.statusReason) &&
        Objects.equals(this.initializedImportedDeviceCount, wirelessDeviceImportTask.initializedImportedDeviceCount) &&
        Objects.equals(this.pendingImportedDeviceCount, wirelessDeviceImportTask.pendingImportedDeviceCount) &&
        Objects.equals(this.onboardedImportedDeviceCount, wirelessDeviceImportTask.onboardedImportedDeviceCount) &&
        Objects.equals(this.failedImportedDeviceCount, wirelessDeviceImportTask.failedImportedDeviceCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, destinationName, sidewalk, creationTime, status, statusReason, initializedImportedDeviceCount, pendingImportedDeviceCount, onboardedImportedDeviceCount, failedImportedDeviceCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WirelessDeviceImportTask {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    sidewalk: ").append(toIndentedString(sidewalk)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    initializedImportedDeviceCount: ").append(toIndentedString(initializedImportedDeviceCount)).append("\n");
    sb.append("    pendingImportedDeviceCount: ").append(toIndentedString(pendingImportedDeviceCount)).append("\n");
    sb.append("    onboardedImportedDeviceCount: ").append(toIndentedString(onboardedImportedDeviceCount)).append("\n");
    sb.append("    failedImportedDeviceCount: ").append(toIndentedString(failedImportedDeviceCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Arn");
    openapiFields.add("DestinationName");
    openapiFields.add("Sidewalk");
    openapiFields.add("CreationTime");
    openapiFields.add("Status");
    openapiFields.add("StatusReason");
    openapiFields.add("InitializedImportedDeviceCount");
    openapiFields.add("PendingImportedDeviceCount");
    openapiFields.add("OnboardedImportedDeviceCount");
    openapiFields.add("FailedImportedDeviceCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WirelessDeviceImportTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WirelessDeviceImportTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WirelessDeviceImportTask is not found in the empty JSON string", WirelessDeviceImportTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WirelessDeviceImportTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WirelessDeviceImportTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `DestinationName`
      if (jsonObj.get("DestinationName") != null && !jsonObj.get("DestinationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DestinationName"));
      }
      // validate the optional field `Sidewalk`
      if (jsonObj.get("Sidewalk") != null && !jsonObj.get("Sidewalk").isJsonNull()) {
        WirelessDeviceImportTaskSidewalk.validateJsonElement(jsonObj.get("Sidewalk"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ImportTaskStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusReason`
      if (jsonObj.get("StatusReason") != null && !jsonObj.get("StatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusReason"));
      }
      // validate the optional field `InitializedImportedDeviceCount`
      if (jsonObj.get("InitializedImportedDeviceCount") != null && !jsonObj.get("InitializedImportedDeviceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InitializedImportedDeviceCount"));
      }
      // validate the optional field `PendingImportedDeviceCount`
      if (jsonObj.get("PendingImportedDeviceCount") != null && !jsonObj.get("PendingImportedDeviceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PendingImportedDeviceCount"));
      }
      // validate the optional field `OnboardedImportedDeviceCount`
      if (jsonObj.get("OnboardedImportedDeviceCount") != null && !jsonObj.get("OnboardedImportedDeviceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("OnboardedImportedDeviceCount"));
      }
      // validate the optional field `FailedImportedDeviceCount`
      if (jsonObj.get("FailedImportedDeviceCount") != null && !jsonObj.get("FailedImportedDeviceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedImportedDeviceCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WirelessDeviceImportTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WirelessDeviceImportTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WirelessDeviceImportTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WirelessDeviceImportTask.class));

       return (TypeAdapter<T>) new TypeAdapter<WirelessDeviceImportTask>() {
           @Override
           public void write(JsonWriter out, WirelessDeviceImportTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WirelessDeviceImportTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WirelessDeviceImportTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WirelessDeviceImportTask
   * @throws IOException if the JSON string is invalid with respect to WirelessDeviceImportTask
   */
  public static WirelessDeviceImportTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WirelessDeviceImportTask.class);
  }

  /**
   * Convert an instance of WirelessDeviceImportTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

