/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WirelessDeviceLogOption;
import org.openapitools.client.model.WirelessGatewayLogOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLogLevelsByResourceTypesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLogLevelsByResourceTypesRequest {
  /**
   * The log level for a log message. The log levels can be disabled, or set to &lt;code&gt;ERROR&lt;/code&gt; to display less verbose logs containing only error information, or to &lt;code&gt;INFO&lt;/code&gt; for more detailed logs.
   */
  @JsonAdapter(DefaultLogLevelEnum.Adapter.class)
  public enum DefaultLogLevelEnum {
    INFO("INFO"),
    
    ERROR("ERROR"),
    
    DISABLED("DISABLED");

    private String value;

    DefaultLogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultLogLevelEnum fromValue(String value) {
      for (DefaultLogLevelEnum b : DefaultLogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultLogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultLogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultLogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultLogLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultLogLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_LOG_LEVEL = "DefaultLogLevel";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOG_LEVEL)
  private DefaultLogLevelEnum defaultLogLevel;

  public static final String SERIALIZED_NAME_WIRELESS_DEVICE_LOG_OPTIONS = "WirelessDeviceLogOptions";
  @SerializedName(SERIALIZED_NAME_WIRELESS_DEVICE_LOG_OPTIONS)
  private List<WirelessDeviceLogOption> wirelessDeviceLogOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIRELESS_GATEWAY_LOG_OPTIONS = "WirelessGatewayLogOptions";
  @SerializedName(SERIALIZED_NAME_WIRELESS_GATEWAY_LOG_OPTIONS)
  private List<WirelessGatewayLogOption> wirelessGatewayLogOptions = new ArrayList<>();

  public UpdateLogLevelsByResourceTypesRequest() {
  }

  public UpdateLogLevelsByResourceTypesRequest defaultLogLevel(DefaultLogLevelEnum defaultLogLevel) {
    this.defaultLogLevel = defaultLogLevel;
    return this;
  }

  /**
   * The log level for a log message. The log levels can be disabled, or set to &lt;code&gt;ERROR&lt;/code&gt; to display less verbose logs containing only error information, or to &lt;code&gt;INFO&lt;/code&gt; for more detailed logs.
   * @return defaultLogLevel
   */
  @javax.annotation.Nullable
  public DefaultLogLevelEnum getDefaultLogLevel() {
    return defaultLogLevel;
  }

  public void setDefaultLogLevel(DefaultLogLevelEnum defaultLogLevel) {
    this.defaultLogLevel = defaultLogLevel;
  }


  public UpdateLogLevelsByResourceTypesRequest wirelessDeviceLogOptions(List<WirelessDeviceLogOption> wirelessDeviceLogOptions) {
    this.wirelessDeviceLogOptions = wirelessDeviceLogOptions;
    return this;
  }

  public UpdateLogLevelsByResourceTypesRequest addWirelessDeviceLogOptionsItem(WirelessDeviceLogOption wirelessDeviceLogOptionsItem) {
    if (this.wirelessDeviceLogOptions == null) {
      this.wirelessDeviceLogOptions = new ArrayList<>();
    }
    this.wirelessDeviceLogOptions.add(wirelessDeviceLogOptionsItem);
    return this;
  }

  /**
   * The list of wireless device log options.
   * @return wirelessDeviceLogOptions
   */
  @javax.annotation.Nullable
  public List<WirelessDeviceLogOption> getWirelessDeviceLogOptions() {
    return wirelessDeviceLogOptions;
  }

  public void setWirelessDeviceLogOptions(List<WirelessDeviceLogOption> wirelessDeviceLogOptions) {
    this.wirelessDeviceLogOptions = wirelessDeviceLogOptions;
  }


  public UpdateLogLevelsByResourceTypesRequest wirelessGatewayLogOptions(List<WirelessGatewayLogOption> wirelessGatewayLogOptions) {
    this.wirelessGatewayLogOptions = wirelessGatewayLogOptions;
    return this;
  }

  public UpdateLogLevelsByResourceTypesRequest addWirelessGatewayLogOptionsItem(WirelessGatewayLogOption wirelessGatewayLogOptionsItem) {
    if (this.wirelessGatewayLogOptions == null) {
      this.wirelessGatewayLogOptions = new ArrayList<>();
    }
    this.wirelessGatewayLogOptions.add(wirelessGatewayLogOptionsItem);
    return this;
  }

  /**
   * The list of wireless gateway log options.
   * @return wirelessGatewayLogOptions
   */
  @javax.annotation.Nullable
  public List<WirelessGatewayLogOption> getWirelessGatewayLogOptions() {
    return wirelessGatewayLogOptions;
  }

  public void setWirelessGatewayLogOptions(List<WirelessGatewayLogOption> wirelessGatewayLogOptions) {
    this.wirelessGatewayLogOptions = wirelessGatewayLogOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLogLevelsByResourceTypesRequest updateLogLevelsByResourceTypesRequest = (UpdateLogLevelsByResourceTypesRequest) o;
    return Objects.equals(this.defaultLogLevel, updateLogLevelsByResourceTypesRequest.defaultLogLevel) &&
        Objects.equals(this.wirelessDeviceLogOptions, updateLogLevelsByResourceTypesRequest.wirelessDeviceLogOptions) &&
        Objects.equals(this.wirelessGatewayLogOptions, updateLogLevelsByResourceTypesRequest.wirelessGatewayLogOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultLogLevel, wirelessDeviceLogOptions, wirelessGatewayLogOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLogLevelsByResourceTypesRequest {\n");
    sb.append("    defaultLogLevel: ").append(toIndentedString(defaultLogLevel)).append("\n");
    sb.append("    wirelessDeviceLogOptions: ").append(toIndentedString(wirelessDeviceLogOptions)).append("\n");
    sb.append("    wirelessGatewayLogOptions: ").append(toIndentedString(wirelessGatewayLogOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefaultLogLevel");
    openapiFields.add("WirelessDeviceLogOptions");
    openapiFields.add("WirelessGatewayLogOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLogLevelsByResourceTypesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLogLevelsByResourceTypesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLogLevelsByResourceTypesRequest is not found in the empty JSON string", UpdateLogLevelsByResourceTypesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLogLevelsByResourceTypesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLogLevelsByResourceTypesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DefaultLogLevel") != null && !jsonObj.get("DefaultLogLevel").isJsonNull()) && !jsonObj.get("DefaultLogLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultLogLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultLogLevel").toString()));
      }
      // validate the optional field `DefaultLogLevel`
      if (jsonObj.get("DefaultLogLevel") != null && !jsonObj.get("DefaultLogLevel").isJsonNull()) {
        DefaultLogLevelEnum.validateJsonElement(jsonObj.get("DefaultLogLevel"));
      }
      if (jsonObj.get("WirelessDeviceLogOptions") != null && !jsonObj.get("WirelessDeviceLogOptions").isJsonNull()) {
        JsonArray jsonArraywirelessDeviceLogOptions = jsonObj.getAsJsonArray("WirelessDeviceLogOptions");
        if (jsonArraywirelessDeviceLogOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("WirelessDeviceLogOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `WirelessDeviceLogOptions` to be an array in the JSON string but got `%s`", jsonObj.get("WirelessDeviceLogOptions").toString()));
          }

          // validate the optional field `WirelessDeviceLogOptions` (array)
          for (int i = 0; i < jsonArraywirelessDeviceLogOptions.size(); i++) {
            WirelessDeviceLogOption.validateJsonElement(jsonArraywirelessDeviceLogOptions.get(i));
          };
        }
      }
      if (jsonObj.get("WirelessGatewayLogOptions") != null && !jsonObj.get("WirelessGatewayLogOptions").isJsonNull()) {
        JsonArray jsonArraywirelessGatewayLogOptions = jsonObj.getAsJsonArray("WirelessGatewayLogOptions");
        if (jsonArraywirelessGatewayLogOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("WirelessGatewayLogOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `WirelessGatewayLogOptions` to be an array in the JSON string but got `%s`", jsonObj.get("WirelessGatewayLogOptions").toString()));
          }

          // validate the optional field `WirelessGatewayLogOptions` (array)
          for (int i = 0; i < jsonArraywirelessGatewayLogOptions.size(); i++) {
            WirelessGatewayLogOption.validateJsonElement(jsonArraywirelessGatewayLogOptions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLogLevelsByResourceTypesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLogLevelsByResourceTypesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLogLevelsByResourceTypesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLogLevelsByResourceTypesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLogLevelsByResourceTypesRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLogLevelsByResourceTypesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLogLevelsByResourceTypesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLogLevelsByResourceTypesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLogLevelsByResourceTypesRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateLogLevelsByResourceTypesRequest
   */
  public static UpdateLogLevelsByResourceTypesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLogLevelsByResourceTypesRequest.class);
  }

  /**
   * Convert an instance of UpdateLogLevelsByResourceTypesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

