/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LteObjLteLocalId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LTE object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LteObj {
  public static final String SERIALIZED_NAME_MCC = "Mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private Integer mcc;

  public static final String SERIALIZED_NAME_MNC = "Mnc";
  @SerializedName(SERIALIZED_NAME_MNC)
  private Integer mnc;

  public static final String SERIALIZED_NAME_EUTRAN_CID = "EutranCid";
  @SerializedName(SERIALIZED_NAME_EUTRAN_CID)
  private Integer eutranCid;

  public static final String SERIALIZED_NAME_TAC = "Tac";
  @SerializedName(SERIALIZED_NAME_TAC)
  private Integer tac;

  public static final String SERIALIZED_NAME_LTE_LOCAL_ID = "LteLocalId";
  @SerializedName(SERIALIZED_NAME_LTE_LOCAL_ID)
  private LteObjLteLocalId lteLocalId;

  public static final String SERIALIZED_NAME_LTE_TIMING_ADVANCE = "LteTimingAdvance";
  @SerializedName(SERIALIZED_NAME_LTE_TIMING_ADVANCE)
  private Integer lteTimingAdvance;

  public static final String SERIALIZED_NAME_RSRP = "Rsrp";
  @SerializedName(SERIALIZED_NAME_RSRP)
  private Integer rsrp;

  public static final String SERIALIZED_NAME_RSRQ = "Rsrq";
  @SerializedName(SERIALIZED_NAME_RSRQ)
  private Float rsrq;

  public static final String SERIALIZED_NAME_NR_CAPABLE = "NrCapable";
  @SerializedName(SERIALIZED_NAME_NR_CAPABLE)
  private Boolean nrCapable;

  public static final String SERIALIZED_NAME_LTE_NMR = "LteNmr";
  @SerializedName(SERIALIZED_NAME_LTE_NMR)
  private List lteNmr;

  public LteObj() {
  }

  public LteObj mcc(Integer mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * Get mcc
   * @return mcc
   */
  @javax.annotation.Nonnull
  public Integer getMcc() {
    return mcc;
  }

  public void setMcc(Integer mcc) {
    this.mcc = mcc;
  }


  public LteObj mnc(Integer mnc) {
    this.mnc = mnc;
    return this;
  }

  /**
   * Get mnc
   * @return mnc
   */
  @javax.annotation.Nonnull
  public Integer getMnc() {
    return mnc;
  }

  public void setMnc(Integer mnc) {
    this.mnc = mnc;
  }


  public LteObj eutranCid(Integer eutranCid) {
    this.eutranCid = eutranCid;
    return this;
  }

  /**
   * Get eutranCid
   * @return eutranCid
   */
  @javax.annotation.Nonnull
  public Integer getEutranCid() {
    return eutranCid;
  }

  public void setEutranCid(Integer eutranCid) {
    this.eutranCid = eutranCid;
  }


  public LteObj tac(Integer tac) {
    this.tac = tac;
    return this;
  }

  /**
   * Get tac
   * @return tac
   */
  @javax.annotation.Nullable
  public Integer getTac() {
    return tac;
  }

  public void setTac(Integer tac) {
    this.tac = tac;
  }


  public LteObj lteLocalId(LteObjLteLocalId lteLocalId) {
    this.lteLocalId = lteLocalId;
    return this;
  }

  /**
   * Get lteLocalId
   * @return lteLocalId
   */
  @javax.annotation.Nullable
  public LteObjLteLocalId getLteLocalId() {
    return lteLocalId;
  }

  public void setLteLocalId(LteObjLteLocalId lteLocalId) {
    this.lteLocalId = lteLocalId;
  }


  public LteObj lteTimingAdvance(Integer lteTimingAdvance) {
    this.lteTimingAdvance = lteTimingAdvance;
    return this;
  }

  /**
   * Get lteTimingAdvance
   * @return lteTimingAdvance
   */
  @javax.annotation.Nullable
  public Integer getLteTimingAdvance() {
    return lteTimingAdvance;
  }

  public void setLteTimingAdvance(Integer lteTimingAdvance) {
    this.lteTimingAdvance = lteTimingAdvance;
  }


  public LteObj rsrp(Integer rsrp) {
    this.rsrp = rsrp;
    return this;
  }

  /**
   * Get rsrp
   * @return rsrp
   */
  @javax.annotation.Nullable
  public Integer getRsrp() {
    return rsrp;
  }

  public void setRsrp(Integer rsrp) {
    this.rsrp = rsrp;
  }


  public LteObj rsrq(Float rsrq) {
    this.rsrq = rsrq;
    return this;
  }

  /**
   * Get rsrq
   * @return rsrq
   */
  @javax.annotation.Nullable
  public Float getRsrq() {
    return rsrq;
  }

  public void setRsrq(Float rsrq) {
    this.rsrq = rsrq;
  }


  public LteObj nrCapable(Boolean nrCapable) {
    this.nrCapable = nrCapable;
    return this;
  }

  /**
   * Get nrCapable
   * @return nrCapable
   */
  @javax.annotation.Nullable
  public Boolean getNrCapable() {
    return nrCapable;
  }

  public void setNrCapable(Boolean nrCapable) {
    this.nrCapable = nrCapable;
  }


  public LteObj lteNmr(List lteNmr) {
    this.lteNmr = lteNmr;
    return this;
  }

  /**
   * Get lteNmr
   * @return lteNmr
   */
  @javax.annotation.Nullable
  public List getLteNmr() {
    return lteNmr;
  }

  public void setLteNmr(List lteNmr) {
    this.lteNmr = lteNmr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LteObj lteObj = (LteObj) o;
    return Objects.equals(this.mcc, lteObj.mcc) &&
        Objects.equals(this.mnc, lteObj.mnc) &&
        Objects.equals(this.eutranCid, lteObj.eutranCid) &&
        Objects.equals(this.tac, lteObj.tac) &&
        Objects.equals(this.lteLocalId, lteObj.lteLocalId) &&
        Objects.equals(this.lteTimingAdvance, lteObj.lteTimingAdvance) &&
        Objects.equals(this.rsrp, lteObj.rsrp) &&
        Objects.equals(this.rsrq, lteObj.rsrq) &&
        Objects.equals(this.nrCapable, lteObj.nrCapable) &&
        Objects.equals(this.lteNmr, lteObj.lteNmr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mcc, mnc, eutranCid, tac, lteLocalId, lteTimingAdvance, rsrp, rsrq, nrCapable, lteNmr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LteObj {\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    mnc: ").append(toIndentedString(mnc)).append("\n");
    sb.append("    eutranCid: ").append(toIndentedString(eutranCid)).append("\n");
    sb.append("    tac: ").append(toIndentedString(tac)).append("\n");
    sb.append("    lteLocalId: ").append(toIndentedString(lteLocalId)).append("\n");
    sb.append("    lteTimingAdvance: ").append(toIndentedString(lteTimingAdvance)).append("\n");
    sb.append("    rsrp: ").append(toIndentedString(rsrp)).append("\n");
    sb.append("    rsrq: ").append(toIndentedString(rsrq)).append("\n");
    sb.append("    nrCapable: ").append(toIndentedString(nrCapable)).append("\n");
    sb.append("    lteNmr: ").append(toIndentedString(lteNmr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Mcc");
    openapiFields.add("Mnc");
    openapiFields.add("EutranCid");
    openapiFields.add("Tac");
    openapiFields.add("LteLocalId");
    openapiFields.add("LteTimingAdvance");
    openapiFields.add("Rsrp");
    openapiFields.add("Rsrq");
    openapiFields.add("NrCapable");
    openapiFields.add("LteNmr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Mcc");
    openapiRequiredFields.add("Mnc");
    openapiRequiredFields.add("EutranCid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LteObj
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LteObj.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LteObj is not found in the empty JSON string", LteObj.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LteObj.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LteObj` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LteObj.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Mcc`
      Integer.validateJsonElement(jsonObj.get("Mcc"));
      // validate the required field `Mnc`
      Integer.validateJsonElement(jsonObj.get("Mnc"));
      // validate the required field `EutranCid`
      Integer.validateJsonElement(jsonObj.get("EutranCid"));
      // validate the optional field `Tac`
      if (jsonObj.get("Tac") != null && !jsonObj.get("Tac").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Tac"));
      }
      // validate the optional field `LteLocalId`
      if (jsonObj.get("LteLocalId") != null && !jsonObj.get("LteLocalId").isJsonNull()) {
        LteObjLteLocalId.validateJsonElement(jsonObj.get("LteLocalId"));
      }
      // validate the optional field `LteTimingAdvance`
      if (jsonObj.get("LteTimingAdvance") != null && !jsonObj.get("LteTimingAdvance").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LteTimingAdvance"));
      }
      // validate the optional field `Rsrp`
      if (jsonObj.get("Rsrp") != null && !jsonObj.get("Rsrp").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Rsrp"));
      }
      // validate the optional field `Rsrq`
      if (jsonObj.get("Rsrq") != null && !jsonObj.get("Rsrq").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("Rsrq"));
      }
      // validate the optional field `NrCapable`
      if (jsonObj.get("NrCapable") != null && !jsonObj.get("NrCapable").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("NrCapable"));
      }
      // validate the optional field `LteNmr`
      if (jsonObj.get("LteNmr") != null && !jsonObj.get("LteNmr").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LteNmr"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LteObj.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LteObj' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LteObj> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LteObj.class));

       return (TypeAdapter<T>) new TypeAdapter<LteObj>() {
           @Override
           public void write(JsonWriter out, LteObj value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LteObj read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LteObj given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LteObj
   * @throws IOException if the JSON string is invalid with respect to LteObj
   */
  public static LteObj fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LteObj.class);
  }

  /**
   * Convert an instance of LteObj to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

