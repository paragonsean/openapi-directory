/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets WirelessGatewayIdType
 */
@JsonAdapter(WirelessGatewayIdType.Adapter.class)
public enum WirelessGatewayIdType {
  
  GATEWAY_EUI("GatewayEui"),
  
  WIRELESS_GATEWAY_ID("WirelessGatewayId"),
  
  THING_NAME("ThingName");

  private String value;

  WirelessGatewayIdType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static WirelessGatewayIdType fromValue(String value) {
    for (WirelessGatewayIdType b : WirelessGatewayIdType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<WirelessGatewayIdType> {
    @Override
    public void write(final JsonWriter jsonWriter, final WirelessGatewayIdType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public WirelessGatewayIdType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return WirelessGatewayIdType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    WirelessGatewayIdType.fromValue(value);
  }
}

