/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDestinationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDestinationRequest {
  /**
   * The type of value in &lt;code&gt;Expression&lt;/code&gt;.
   */
  @JsonAdapter(ExpressionTypeEnum.Adapter.class)
  public enum ExpressionTypeEnum {
    RULE_NAME("RuleName"),
    
    MQTT_TOPIC("MqttTopic");

    private String value;

    ExpressionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpressionTypeEnum fromValue(String value) {
      for (ExpressionTypeEnum b : ExpressionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpressionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpressionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpressionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpressionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpressionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPRESSION_TYPE = "ExpressionType";
  @SerializedName(SERIALIZED_NAME_EXPRESSION_TYPE)
  private ExpressionTypeEnum expressionType;

  public static final String SERIALIZED_NAME_EXPRESSION = "Expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public UpdateDestinationRequest() {
  }

  public UpdateDestinationRequest expressionType(ExpressionTypeEnum expressionType) {
    this.expressionType = expressionType;
    return this;
  }

  /**
   * The type of value in &lt;code&gt;Expression&lt;/code&gt;.
   * @return expressionType
   */
  @javax.annotation.Nullable
  public ExpressionTypeEnum getExpressionType() {
    return expressionType;
  }

  public void setExpressionType(ExpressionTypeEnum expressionType) {
    this.expressionType = expressionType;
  }


  public UpdateDestinationRequest expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * The new rule name or topic rule to send messages to.
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public UpdateDestinationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the new resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateDestinationRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The ARN of the IAM Role that authorizes the destination.
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDestinationRequest updateDestinationRequest = (UpdateDestinationRequest) o;
    return Objects.equals(this.expressionType, updateDestinationRequest.expressionType) &&
        Objects.equals(this.expression, updateDestinationRequest.expression) &&
        Objects.equals(this.description, updateDestinationRequest.description) &&
        Objects.equals(this.roleArn, updateDestinationRequest.roleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expressionType, expression, description, roleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDestinationRequest {\n");
    sb.append("    expressionType: ").append(toIndentedString(expressionType)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExpressionType");
    openapiFields.add("Expression");
    openapiFields.add("Description");
    openapiFields.add("RoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDestinationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDestinationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDestinationRequest is not found in the empty JSON string", UpdateDestinationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDestinationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDestinationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ExpressionType") != null && !jsonObj.get("ExpressionType").isJsonNull()) && !jsonObj.get("ExpressionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpressionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpressionType").toString()));
      }
      // validate the optional field `ExpressionType`
      if (jsonObj.get("ExpressionType") != null && !jsonObj.get("ExpressionType").isJsonNull()) {
        ExpressionTypeEnum.validateJsonElement(jsonObj.get("ExpressionType"));
      }
      if ((jsonObj.get("Expression") != null && !jsonObj.get("Expression").isJsonNull()) && !jsonObj.get("Expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Expression").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) && !jsonObj.get("RoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDestinationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDestinationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDestinationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDestinationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDestinationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDestinationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDestinationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDestinationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDestinationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDestinationRequest
   */
  public static UpdateDestinationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDestinationRequest.class);
  }

  /**
   * Convert an instance of UpdateDestinationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

