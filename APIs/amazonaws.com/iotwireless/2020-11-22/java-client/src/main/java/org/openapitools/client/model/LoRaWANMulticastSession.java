/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The LoRaWAN information used with the multicast session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoRaWANMulticastSession {
  public static final String SERIALIZED_NAME_DL_DR = "DlDr";
  @SerializedName(SERIALIZED_NAME_DL_DR)
  private Integer dlDr;

  public static final String SERIALIZED_NAME_DL_FREQ = "DlFreq";
  @SerializedName(SERIALIZED_NAME_DL_FREQ)
  private Integer dlFreq;

  public static final String SERIALIZED_NAME_SESSION_START_TIME = "SessionStartTime";
  @SerializedName(SERIALIZED_NAME_SESSION_START_TIME)
  private OffsetDateTime sessionStartTime;

  public static final String SERIALIZED_NAME_SESSION_TIMEOUT = "SessionTimeout";
  @SerializedName(SERIALIZED_NAME_SESSION_TIMEOUT)
  private Integer sessionTimeout;

  public static final String SERIALIZED_NAME_PING_SLOT_PERIOD = "PingSlotPeriod";
  @SerializedName(SERIALIZED_NAME_PING_SLOT_PERIOD)
  private Integer pingSlotPeriod;

  public LoRaWANMulticastSession() {
  }

  public LoRaWANMulticastSession dlDr(Integer dlDr) {
    this.dlDr = dlDr;
    return this;
  }

  /**
   * Downlink data rate.
   * minimum: 0
   * maximum: 15
   * @return dlDr
   */
  @javax.annotation.Nullable
  public Integer getDlDr() {
    return dlDr;
  }

  public void setDlDr(Integer dlDr) {
    this.dlDr = dlDr;
  }


  public LoRaWANMulticastSession dlFreq(Integer dlFreq) {
    this.dlFreq = dlFreq;
    return this;
  }

  /**
   * Downlink frequency.
   * minimum: 100000000
   * maximum: 1000000000
   * @return dlFreq
   */
  @javax.annotation.Nullable
  public Integer getDlFreq() {
    return dlFreq;
  }

  public void setDlFreq(Integer dlFreq) {
    this.dlFreq = dlFreq;
  }


  public LoRaWANMulticastSession sessionStartTime(OffsetDateTime sessionStartTime) {
    this.sessionStartTime = sessionStartTime;
    return this;
  }

  /**
   * Timestamp of when the multicast group session is to start.
   * @return sessionStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSessionStartTime() {
    return sessionStartTime;
  }

  public void setSessionStartTime(OffsetDateTime sessionStartTime) {
    this.sessionStartTime = sessionStartTime;
  }


  public LoRaWANMulticastSession sessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
    return this;
  }

  /**
   * How long before a multicast group session is to timeout.
   * minimum: 60
   * maximum: 172800
   * @return sessionTimeout
   */
  @javax.annotation.Nullable
  public Integer getSessionTimeout() {
    return sessionTimeout;
  }

  public void setSessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
  }


  public LoRaWANMulticastSession pingSlotPeriod(Integer pingSlotPeriod) {
    this.pingSlotPeriod = pingSlotPeriod;
    return this;
  }

  /**
   * Get pingSlotPeriod
   * @return pingSlotPeriod
   */
  @javax.annotation.Nullable
  public Integer getPingSlotPeriod() {
    return pingSlotPeriod;
  }

  public void setPingSlotPeriod(Integer pingSlotPeriod) {
    this.pingSlotPeriod = pingSlotPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoRaWANMulticastSession loRaWANMulticastSession = (LoRaWANMulticastSession) o;
    return Objects.equals(this.dlDr, loRaWANMulticastSession.dlDr) &&
        Objects.equals(this.dlFreq, loRaWANMulticastSession.dlFreq) &&
        Objects.equals(this.sessionStartTime, loRaWANMulticastSession.sessionStartTime) &&
        Objects.equals(this.sessionTimeout, loRaWANMulticastSession.sessionTimeout) &&
        Objects.equals(this.pingSlotPeriod, loRaWANMulticastSession.pingSlotPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dlDr, dlFreq, sessionStartTime, sessionTimeout, pingSlotPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoRaWANMulticastSession {\n");
    sb.append("    dlDr: ").append(toIndentedString(dlDr)).append("\n");
    sb.append("    dlFreq: ").append(toIndentedString(dlFreq)).append("\n");
    sb.append("    sessionStartTime: ").append(toIndentedString(sessionStartTime)).append("\n");
    sb.append("    sessionTimeout: ").append(toIndentedString(sessionTimeout)).append("\n");
    sb.append("    pingSlotPeriod: ").append(toIndentedString(pingSlotPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DlDr");
    openapiFields.add("DlFreq");
    openapiFields.add("SessionStartTime");
    openapiFields.add("SessionTimeout");
    openapiFields.add("PingSlotPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoRaWANMulticastSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoRaWANMulticastSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoRaWANMulticastSession is not found in the empty JSON string", LoRaWANMulticastSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoRaWANMulticastSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoRaWANMulticastSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PingSlotPeriod`
      if (jsonObj.get("PingSlotPeriod") != null && !jsonObj.get("PingSlotPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PingSlotPeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoRaWANMulticastSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoRaWANMulticastSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoRaWANMulticastSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoRaWANMulticastSession.class));

       return (TypeAdapter<T>) new TypeAdapter<LoRaWANMulticastSession>() {
           @Override
           public void write(JsonWriter out, LoRaWANMulticastSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoRaWANMulticastSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoRaWANMulticastSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoRaWANMulticastSession
   * @throws IOException if the JSON string is invalid with respect to LoRaWANMulticastSession
   */
  public static LoRaWANMulticastSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoRaWANMulticastSession.class);
  }

  /**
   * Convert an instance of LoRaWANMulticastSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

