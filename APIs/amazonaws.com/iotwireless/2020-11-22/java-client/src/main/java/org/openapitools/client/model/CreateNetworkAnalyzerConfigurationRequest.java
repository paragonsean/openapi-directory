/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateNetworkAnalyzerConfigurationRequestTraceContent;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkAnalyzerConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNetworkAnalyzerConfigurationRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TRACE_CONTENT = "TraceContent";
  @SerializedName(SERIALIZED_NAME_TRACE_CONTENT)
  private CreateNetworkAnalyzerConfigurationRequestTraceContent traceContent;

  public static final String SERIALIZED_NAME_WIRELESS_DEVICES = "WirelessDevices";
  @SerializedName(SERIALIZED_NAME_WIRELESS_DEVICES)
  private List<String> wirelessDevices = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIRELESS_GATEWAYS = "WirelessGateways";
  @SerializedName(SERIALIZED_NAME_WIRELESS_GATEWAYS)
  private List<String> wirelessGateways = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_MULTICAST_GROUPS = "MulticastGroups";
  @SerializedName(SERIALIZED_NAME_MULTICAST_GROUPS)
  private List<String> multicastGroups = new ArrayList<>();

  public CreateNetworkAnalyzerConfigurationRequest() {
  }

  public CreateNetworkAnalyzerConfigurationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the network analyzer configuration.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateNetworkAnalyzerConfigurationRequest traceContent(CreateNetworkAnalyzerConfigurationRequestTraceContent traceContent) {
    this.traceContent = traceContent;
    return this;
  }

  /**
   * Get traceContent
   * @return traceContent
   */
  @javax.annotation.Nullable
  public CreateNetworkAnalyzerConfigurationRequestTraceContent getTraceContent() {
    return traceContent;
  }

  public void setTraceContent(CreateNetworkAnalyzerConfigurationRequestTraceContent traceContent) {
    this.traceContent = traceContent;
  }


  public CreateNetworkAnalyzerConfigurationRequest wirelessDevices(List<String> wirelessDevices) {
    this.wirelessDevices = wirelessDevices;
    return this;
  }

  public CreateNetworkAnalyzerConfigurationRequest addWirelessDevicesItem(String wirelessDevicesItem) {
    if (this.wirelessDevices == null) {
      this.wirelessDevices = new ArrayList<>();
    }
    this.wirelessDevices.add(wirelessDevicesItem);
    return this;
  }

  /**
   * Wireless device resources to add to the network analyzer configuration. Provide the &lt;code&gt;WirelessDeviceId&lt;/code&gt; of the resource to add in the input array.
   * @return wirelessDevices
   */
  @javax.annotation.Nullable
  public List<String> getWirelessDevices() {
    return wirelessDevices;
  }

  public void setWirelessDevices(List<String> wirelessDevices) {
    this.wirelessDevices = wirelessDevices;
  }


  public CreateNetworkAnalyzerConfigurationRequest wirelessGateways(List<String> wirelessGateways) {
    this.wirelessGateways = wirelessGateways;
    return this;
  }

  public CreateNetworkAnalyzerConfigurationRequest addWirelessGatewaysItem(String wirelessGatewaysItem) {
    if (this.wirelessGateways == null) {
      this.wirelessGateways = new ArrayList<>();
    }
    this.wirelessGateways.add(wirelessGatewaysItem);
    return this;
  }

  /**
   * Wireless gateway resources to add to the network analyzer configuration. Provide the &lt;code&gt;WirelessGatewayId&lt;/code&gt; of the resource to add in the input array.
   * @return wirelessGateways
   */
  @javax.annotation.Nullable
  public List<String> getWirelessGateways() {
    return wirelessGateways;
  }

  public void setWirelessGateways(List<String> wirelessGateways) {
    this.wirelessGateways = wirelessGateways;
  }


  public CreateNetworkAnalyzerConfigurationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the new resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateNetworkAnalyzerConfigurationRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateNetworkAnalyzerConfigurationRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateNetworkAnalyzerConfigurationRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateNetworkAnalyzerConfigurationRequest multicastGroups(List<String> multicastGroups) {
    this.multicastGroups = multicastGroups;
    return this;
  }

  public CreateNetworkAnalyzerConfigurationRequest addMulticastGroupsItem(String multicastGroupsItem) {
    if (this.multicastGroups == null) {
      this.multicastGroups = new ArrayList<>();
    }
    this.multicastGroups.add(multicastGroupsItem);
    return this;
  }

  /**
   * Multicast Group resources to add to the network analyzer configruation. Provide the &lt;code&gt;MulticastGroupId&lt;/code&gt; of the resource to add in the input array.
   * @return multicastGroups
   */
  @javax.annotation.Nullable
  public List<String> getMulticastGroups() {
    return multicastGroups;
  }

  public void setMulticastGroups(List<String> multicastGroups) {
    this.multicastGroups = multicastGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkAnalyzerConfigurationRequest createNetworkAnalyzerConfigurationRequest = (CreateNetworkAnalyzerConfigurationRequest) o;
    return Objects.equals(this.name, createNetworkAnalyzerConfigurationRequest.name) &&
        Objects.equals(this.traceContent, createNetworkAnalyzerConfigurationRequest.traceContent) &&
        Objects.equals(this.wirelessDevices, createNetworkAnalyzerConfigurationRequest.wirelessDevices) &&
        Objects.equals(this.wirelessGateways, createNetworkAnalyzerConfigurationRequest.wirelessGateways) &&
        Objects.equals(this.description, createNetworkAnalyzerConfigurationRequest.description) &&
        Objects.equals(this.tags, createNetworkAnalyzerConfigurationRequest.tags) &&
        Objects.equals(this.clientRequestToken, createNetworkAnalyzerConfigurationRequest.clientRequestToken) &&
        Objects.equals(this.multicastGroups, createNetworkAnalyzerConfigurationRequest.multicastGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, traceContent, wirelessDevices, wirelessGateways, description, tags, clientRequestToken, multicastGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkAnalyzerConfigurationRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    traceContent: ").append(toIndentedString(traceContent)).append("\n");
    sb.append("    wirelessDevices: ").append(toIndentedString(wirelessDevices)).append("\n");
    sb.append("    wirelessGateways: ").append(toIndentedString(wirelessGateways)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    multicastGroups: ").append(toIndentedString(multicastGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("TraceContent");
    openapiFields.add("WirelessDevices");
    openapiFields.add("WirelessGateways");
    openapiFields.add("Description");
    openapiFields.add("Tags");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("MulticastGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNetworkAnalyzerConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNetworkAnalyzerConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkAnalyzerConfigurationRequest is not found in the empty JSON string", CreateNetworkAnalyzerConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkAnalyzerConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkAnalyzerConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNetworkAnalyzerConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `TraceContent`
      if (jsonObj.get("TraceContent") != null && !jsonObj.get("TraceContent").isJsonNull()) {
        CreateNetworkAnalyzerConfigurationRequestTraceContent.validateJsonElement(jsonObj.get("TraceContent"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WirelessDevices") != null && !jsonObj.get("WirelessDevices").isJsonNull() && !jsonObj.get("WirelessDevices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WirelessDevices` to be an array in the JSON string but got `%s`", jsonObj.get("WirelessDevices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WirelessGateways") != null && !jsonObj.get("WirelessGateways").isJsonNull() && !jsonObj.get("WirelessGateways").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WirelessGateways` to be an array in the JSON string but got `%s`", jsonObj.get("WirelessGateways").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MulticastGroups") != null && !jsonObj.get("MulticastGroups").isJsonNull() && !jsonObj.get("MulticastGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MulticastGroups` to be an array in the JSON string but got `%s`", jsonObj.get("MulticastGroups").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkAnalyzerConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkAnalyzerConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkAnalyzerConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkAnalyzerConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkAnalyzerConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, CreateNetworkAnalyzerConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkAnalyzerConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNetworkAnalyzerConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNetworkAnalyzerConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateNetworkAnalyzerConfigurationRequest
   */
  public static CreateNetworkAnalyzerConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkAnalyzerConfigurationRequest.class);
  }

  /**
   * Convert an instance of CreateNetworkAnalyzerConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

