/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WirelessGatewayTaskStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetWirelessGatewayTaskResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetWirelessGatewayTaskResponse {
  public static final String SERIALIZED_NAME_WIRELESS_GATEWAY_ID = "WirelessGatewayId";
  @SerializedName(SERIALIZED_NAME_WIRELESS_GATEWAY_ID)
  private String wirelessGatewayId;

  public static final String SERIALIZED_NAME_WIRELESS_GATEWAY_TASK_DEFINITION_ID = "WirelessGatewayTaskDefinitionId";
  @SerializedName(SERIALIZED_NAME_WIRELESS_GATEWAY_TASK_DEFINITION_ID)
  private String wirelessGatewayTaskDefinitionId;

  public static final String SERIALIZED_NAME_LAST_UPLINK_RECEIVED_AT = "LastUplinkReceivedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPLINK_RECEIVED_AT)
  private String lastUplinkReceivedAt;

  public static final String SERIALIZED_NAME_TASK_CREATED_AT = "TaskCreatedAt";
  @SerializedName(SERIALIZED_NAME_TASK_CREATED_AT)
  private String taskCreatedAt;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WirelessGatewayTaskStatus status;

  public GetWirelessGatewayTaskResponse() {
  }

  public GetWirelessGatewayTaskResponse wirelessGatewayId(String wirelessGatewayId) {
    this.wirelessGatewayId = wirelessGatewayId;
    return this;
  }

  /**
   * Get wirelessGatewayId
   * @return wirelessGatewayId
   */
  @javax.annotation.Nullable
  public String getWirelessGatewayId() {
    return wirelessGatewayId;
  }

  public void setWirelessGatewayId(String wirelessGatewayId) {
    this.wirelessGatewayId = wirelessGatewayId;
  }


  public GetWirelessGatewayTaskResponse wirelessGatewayTaskDefinitionId(String wirelessGatewayTaskDefinitionId) {
    this.wirelessGatewayTaskDefinitionId = wirelessGatewayTaskDefinitionId;
    return this;
  }

  /**
   * Get wirelessGatewayTaskDefinitionId
   * @return wirelessGatewayTaskDefinitionId
   */
  @javax.annotation.Nullable
  public String getWirelessGatewayTaskDefinitionId() {
    return wirelessGatewayTaskDefinitionId;
  }

  public void setWirelessGatewayTaskDefinitionId(String wirelessGatewayTaskDefinitionId) {
    this.wirelessGatewayTaskDefinitionId = wirelessGatewayTaskDefinitionId;
  }


  public GetWirelessGatewayTaskResponse lastUplinkReceivedAt(String lastUplinkReceivedAt) {
    this.lastUplinkReceivedAt = lastUplinkReceivedAt;
    return this;
  }

  /**
   * Get lastUplinkReceivedAt
   * @return lastUplinkReceivedAt
   */
  @javax.annotation.Nullable
  public String getLastUplinkReceivedAt() {
    return lastUplinkReceivedAt;
  }

  public void setLastUplinkReceivedAt(String lastUplinkReceivedAt) {
    this.lastUplinkReceivedAt = lastUplinkReceivedAt;
  }


  public GetWirelessGatewayTaskResponse taskCreatedAt(String taskCreatedAt) {
    this.taskCreatedAt = taskCreatedAt;
    return this;
  }

  /**
   * Get taskCreatedAt
   * @return taskCreatedAt
   */
  @javax.annotation.Nullable
  public String getTaskCreatedAt() {
    return taskCreatedAt;
  }

  public void setTaskCreatedAt(String taskCreatedAt) {
    this.taskCreatedAt = taskCreatedAt;
  }


  public GetWirelessGatewayTaskResponse status(WirelessGatewayTaskStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public WirelessGatewayTaskStatus getStatus() {
    return status;
  }

  public void setStatus(WirelessGatewayTaskStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWirelessGatewayTaskResponse getWirelessGatewayTaskResponse = (GetWirelessGatewayTaskResponse) o;
    return Objects.equals(this.wirelessGatewayId, getWirelessGatewayTaskResponse.wirelessGatewayId) &&
        Objects.equals(this.wirelessGatewayTaskDefinitionId, getWirelessGatewayTaskResponse.wirelessGatewayTaskDefinitionId) &&
        Objects.equals(this.lastUplinkReceivedAt, getWirelessGatewayTaskResponse.lastUplinkReceivedAt) &&
        Objects.equals(this.taskCreatedAt, getWirelessGatewayTaskResponse.taskCreatedAt) &&
        Objects.equals(this.status, getWirelessGatewayTaskResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(wirelessGatewayId, wirelessGatewayTaskDefinitionId, lastUplinkReceivedAt, taskCreatedAt, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWirelessGatewayTaskResponse {\n");
    sb.append("    wirelessGatewayId: ").append(toIndentedString(wirelessGatewayId)).append("\n");
    sb.append("    wirelessGatewayTaskDefinitionId: ").append(toIndentedString(wirelessGatewayTaskDefinitionId)).append("\n");
    sb.append("    lastUplinkReceivedAt: ").append(toIndentedString(lastUplinkReceivedAt)).append("\n");
    sb.append("    taskCreatedAt: ").append(toIndentedString(taskCreatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WirelessGatewayId");
    openapiFields.add("WirelessGatewayTaskDefinitionId");
    openapiFields.add("LastUplinkReceivedAt");
    openapiFields.add("TaskCreatedAt");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetWirelessGatewayTaskResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWirelessGatewayTaskResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWirelessGatewayTaskResponse is not found in the empty JSON string", GetWirelessGatewayTaskResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWirelessGatewayTaskResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWirelessGatewayTaskResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `WirelessGatewayId`
      if (jsonObj.get("WirelessGatewayId") != null && !jsonObj.get("WirelessGatewayId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WirelessGatewayId"));
      }
      // validate the optional field `WirelessGatewayTaskDefinitionId`
      if (jsonObj.get("WirelessGatewayTaskDefinitionId") != null && !jsonObj.get("WirelessGatewayTaskDefinitionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WirelessGatewayTaskDefinitionId"));
      }
      // validate the optional field `LastUplinkReceivedAt`
      if (jsonObj.get("LastUplinkReceivedAt") != null && !jsonObj.get("LastUplinkReceivedAt").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastUplinkReceivedAt"));
      }
      // validate the optional field `TaskCreatedAt`
      if (jsonObj.get("TaskCreatedAt") != null && !jsonObj.get("TaskCreatedAt").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TaskCreatedAt"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        WirelessGatewayTaskStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWirelessGatewayTaskResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWirelessGatewayTaskResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWirelessGatewayTaskResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWirelessGatewayTaskResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWirelessGatewayTaskResponse>() {
           @Override
           public void write(JsonWriter out, GetWirelessGatewayTaskResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWirelessGatewayTaskResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetWirelessGatewayTaskResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetWirelessGatewayTaskResponse
   * @throws IOException if the JSON string is invalid with respect to GetWirelessGatewayTaskResponse
   */
  public static GetWirelessGatewayTaskResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWirelessGatewayTaskResponse.class);
  }

  /**
   * Convert an instance of GetWirelessGatewayTaskResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

