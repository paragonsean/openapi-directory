/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateNetworkAnalyzerConfigurationRequestTraceContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkAnalyzerConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkAnalyzerConfigurationRequest {
  public static final String SERIALIZED_NAME_TRACE_CONTENT = "TraceContent";
  @SerializedName(SERIALIZED_NAME_TRACE_CONTENT)
  private CreateNetworkAnalyzerConfigurationRequestTraceContent traceContent;

  public static final String SERIALIZED_NAME_WIRELESS_DEVICES_TO_ADD = "WirelessDevicesToAdd";
  @SerializedName(SERIALIZED_NAME_WIRELESS_DEVICES_TO_ADD)
  private List<String> wirelessDevicesToAdd = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIRELESS_DEVICES_TO_REMOVE = "WirelessDevicesToRemove";
  @SerializedName(SERIALIZED_NAME_WIRELESS_DEVICES_TO_REMOVE)
  private List<String> wirelessDevicesToRemove = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIRELESS_GATEWAYS_TO_ADD = "WirelessGatewaysToAdd";
  @SerializedName(SERIALIZED_NAME_WIRELESS_GATEWAYS_TO_ADD)
  private List<String> wirelessGatewaysToAdd = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIRELESS_GATEWAYS_TO_REMOVE = "WirelessGatewaysToRemove";
  @SerializedName(SERIALIZED_NAME_WIRELESS_GATEWAYS_TO_REMOVE)
  private List<String> wirelessGatewaysToRemove = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MULTICAST_GROUPS_TO_ADD = "MulticastGroupsToAdd";
  @SerializedName(SERIALIZED_NAME_MULTICAST_GROUPS_TO_ADD)
  private List<String> multicastGroupsToAdd = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTICAST_GROUPS_TO_REMOVE = "MulticastGroupsToRemove";
  @SerializedName(SERIALIZED_NAME_MULTICAST_GROUPS_TO_REMOVE)
  private List<String> multicastGroupsToRemove = new ArrayList<>();

  public UpdateNetworkAnalyzerConfigurationRequest() {
  }

  public UpdateNetworkAnalyzerConfigurationRequest traceContent(CreateNetworkAnalyzerConfigurationRequestTraceContent traceContent) {
    this.traceContent = traceContent;
    return this;
  }

  /**
   * Get traceContent
   * @return traceContent
   */
  @javax.annotation.Nullable
  public CreateNetworkAnalyzerConfigurationRequestTraceContent getTraceContent() {
    return traceContent;
  }

  public void setTraceContent(CreateNetworkAnalyzerConfigurationRequestTraceContent traceContent) {
    this.traceContent = traceContent;
  }


  public UpdateNetworkAnalyzerConfigurationRequest wirelessDevicesToAdd(List<String> wirelessDevicesToAdd) {
    this.wirelessDevicesToAdd = wirelessDevicesToAdd;
    return this;
  }

  public UpdateNetworkAnalyzerConfigurationRequest addWirelessDevicesToAddItem(String wirelessDevicesToAddItem) {
    if (this.wirelessDevicesToAdd == null) {
      this.wirelessDevicesToAdd = new ArrayList<>();
    }
    this.wirelessDevicesToAdd.add(wirelessDevicesToAddItem);
    return this;
  }

  /**
   * Wireless device resources to add to the network analyzer configuration. Provide the &lt;code&gt;WirelessDeviceId&lt;/code&gt; of the resource to add in the input array.
   * @return wirelessDevicesToAdd
   */
  @javax.annotation.Nullable
  public List<String> getWirelessDevicesToAdd() {
    return wirelessDevicesToAdd;
  }

  public void setWirelessDevicesToAdd(List<String> wirelessDevicesToAdd) {
    this.wirelessDevicesToAdd = wirelessDevicesToAdd;
  }


  public UpdateNetworkAnalyzerConfigurationRequest wirelessDevicesToRemove(List<String> wirelessDevicesToRemove) {
    this.wirelessDevicesToRemove = wirelessDevicesToRemove;
    return this;
  }

  public UpdateNetworkAnalyzerConfigurationRequest addWirelessDevicesToRemoveItem(String wirelessDevicesToRemoveItem) {
    if (this.wirelessDevicesToRemove == null) {
      this.wirelessDevicesToRemove = new ArrayList<>();
    }
    this.wirelessDevicesToRemove.add(wirelessDevicesToRemoveItem);
    return this;
  }

  /**
   * Wireless device resources to remove from the network analyzer configuration. Provide the &lt;code&gt;WirelessDeviceId&lt;/code&gt; of the resources to remove in the input array.
   * @return wirelessDevicesToRemove
   */
  @javax.annotation.Nullable
  public List<String> getWirelessDevicesToRemove() {
    return wirelessDevicesToRemove;
  }

  public void setWirelessDevicesToRemove(List<String> wirelessDevicesToRemove) {
    this.wirelessDevicesToRemove = wirelessDevicesToRemove;
  }


  public UpdateNetworkAnalyzerConfigurationRequest wirelessGatewaysToAdd(List<String> wirelessGatewaysToAdd) {
    this.wirelessGatewaysToAdd = wirelessGatewaysToAdd;
    return this;
  }

  public UpdateNetworkAnalyzerConfigurationRequest addWirelessGatewaysToAddItem(String wirelessGatewaysToAddItem) {
    if (this.wirelessGatewaysToAdd == null) {
      this.wirelessGatewaysToAdd = new ArrayList<>();
    }
    this.wirelessGatewaysToAdd.add(wirelessGatewaysToAddItem);
    return this;
  }

  /**
   * Wireless gateway resources to add to the network analyzer configuration. Provide the &lt;code&gt;WirelessGatewayId&lt;/code&gt; of the resource to add in the input array.
   * @return wirelessGatewaysToAdd
   */
  @javax.annotation.Nullable
  public List<String> getWirelessGatewaysToAdd() {
    return wirelessGatewaysToAdd;
  }

  public void setWirelessGatewaysToAdd(List<String> wirelessGatewaysToAdd) {
    this.wirelessGatewaysToAdd = wirelessGatewaysToAdd;
  }


  public UpdateNetworkAnalyzerConfigurationRequest wirelessGatewaysToRemove(List<String> wirelessGatewaysToRemove) {
    this.wirelessGatewaysToRemove = wirelessGatewaysToRemove;
    return this;
  }

  public UpdateNetworkAnalyzerConfigurationRequest addWirelessGatewaysToRemoveItem(String wirelessGatewaysToRemoveItem) {
    if (this.wirelessGatewaysToRemove == null) {
      this.wirelessGatewaysToRemove = new ArrayList<>();
    }
    this.wirelessGatewaysToRemove.add(wirelessGatewaysToRemoveItem);
    return this;
  }

  /**
   * Wireless gateway resources to remove from the network analyzer configuration. Provide the &lt;code&gt;WirelessGatewayId&lt;/code&gt; of the resources to remove in the input array.
   * @return wirelessGatewaysToRemove
   */
  @javax.annotation.Nullable
  public List<String> getWirelessGatewaysToRemove() {
    return wirelessGatewaysToRemove;
  }

  public void setWirelessGatewaysToRemove(List<String> wirelessGatewaysToRemove) {
    this.wirelessGatewaysToRemove = wirelessGatewaysToRemove;
  }


  public UpdateNetworkAnalyzerConfigurationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the new resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateNetworkAnalyzerConfigurationRequest multicastGroupsToAdd(List<String> multicastGroupsToAdd) {
    this.multicastGroupsToAdd = multicastGroupsToAdd;
    return this;
  }

  public UpdateNetworkAnalyzerConfigurationRequest addMulticastGroupsToAddItem(String multicastGroupsToAddItem) {
    if (this.multicastGroupsToAdd == null) {
      this.multicastGroupsToAdd = new ArrayList<>();
    }
    this.multicastGroupsToAdd.add(multicastGroupsToAddItem);
    return this;
  }

  /**
   * Multicast group resources to add to the network analyzer configuration. Provide the &lt;code&gt;MulticastGroupId&lt;/code&gt; of the resource to add in the input array.
   * @return multicastGroupsToAdd
   */
  @javax.annotation.Nullable
  public List<String> getMulticastGroupsToAdd() {
    return multicastGroupsToAdd;
  }

  public void setMulticastGroupsToAdd(List<String> multicastGroupsToAdd) {
    this.multicastGroupsToAdd = multicastGroupsToAdd;
  }


  public UpdateNetworkAnalyzerConfigurationRequest multicastGroupsToRemove(List<String> multicastGroupsToRemove) {
    this.multicastGroupsToRemove = multicastGroupsToRemove;
    return this;
  }

  public UpdateNetworkAnalyzerConfigurationRequest addMulticastGroupsToRemoveItem(String multicastGroupsToRemoveItem) {
    if (this.multicastGroupsToRemove == null) {
      this.multicastGroupsToRemove = new ArrayList<>();
    }
    this.multicastGroupsToRemove.add(multicastGroupsToRemoveItem);
    return this;
  }

  /**
   * Multicast group resources to remove from the network analyzer configuration. Provide the &lt;code&gt;MulticastGroupId&lt;/code&gt; of the resource to remove in the input array.
   * @return multicastGroupsToRemove
   */
  @javax.annotation.Nullable
  public List<String> getMulticastGroupsToRemove() {
    return multicastGroupsToRemove;
  }

  public void setMulticastGroupsToRemove(List<String> multicastGroupsToRemove) {
    this.multicastGroupsToRemove = multicastGroupsToRemove;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkAnalyzerConfigurationRequest updateNetworkAnalyzerConfigurationRequest = (UpdateNetworkAnalyzerConfigurationRequest) o;
    return Objects.equals(this.traceContent, updateNetworkAnalyzerConfigurationRequest.traceContent) &&
        Objects.equals(this.wirelessDevicesToAdd, updateNetworkAnalyzerConfigurationRequest.wirelessDevicesToAdd) &&
        Objects.equals(this.wirelessDevicesToRemove, updateNetworkAnalyzerConfigurationRequest.wirelessDevicesToRemove) &&
        Objects.equals(this.wirelessGatewaysToAdd, updateNetworkAnalyzerConfigurationRequest.wirelessGatewaysToAdd) &&
        Objects.equals(this.wirelessGatewaysToRemove, updateNetworkAnalyzerConfigurationRequest.wirelessGatewaysToRemove) &&
        Objects.equals(this.description, updateNetworkAnalyzerConfigurationRequest.description) &&
        Objects.equals(this.multicastGroupsToAdd, updateNetworkAnalyzerConfigurationRequest.multicastGroupsToAdd) &&
        Objects.equals(this.multicastGroupsToRemove, updateNetworkAnalyzerConfigurationRequest.multicastGroupsToRemove);
  }

  @Override
  public int hashCode() {
    return Objects.hash(traceContent, wirelessDevicesToAdd, wirelessDevicesToRemove, wirelessGatewaysToAdd, wirelessGatewaysToRemove, description, multicastGroupsToAdd, multicastGroupsToRemove);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkAnalyzerConfigurationRequest {\n");
    sb.append("    traceContent: ").append(toIndentedString(traceContent)).append("\n");
    sb.append("    wirelessDevicesToAdd: ").append(toIndentedString(wirelessDevicesToAdd)).append("\n");
    sb.append("    wirelessDevicesToRemove: ").append(toIndentedString(wirelessDevicesToRemove)).append("\n");
    sb.append("    wirelessGatewaysToAdd: ").append(toIndentedString(wirelessGatewaysToAdd)).append("\n");
    sb.append("    wirelessGatewaysToRemove: ").append(toIndentedString(wirelessGatewaysToRemove)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    multicastGroupsToAdd: ").append(toIndentedString(multicastGroupsToAdd)).append("\n");
    sb.append("    multicastGroupsToRemove: ").append(toIndentedString(multicastGroupsToRemove)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TraceContent");
    openapiFields.add("WirelessDevicesToAdd");
    openapiFields.add("WirelessDevicesToRemove");
    openapiFields.add("WirelessGatewaysToAdd");
    openapiFields.add("WirelessGatewaysToRemove");
    openapiFields.add("Description");
    openapiFields.add("MulticastGroupsToAdd");
    openapiFields.add("MulticastGroupsToRemove");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkAnalyzerConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkAnalyzerConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkAnalyzerConfigurationRequest is not found in the empty JSON string", UpdateNetworkAnalyzerConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkAnalyzerConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkAnalyzerConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TraceContent`
      if (jsonObj.get("TraceContent") != null && !jsonObj.get("TraceContent").isJsonNull()) {
        CreateNetworkAnalyzerConfigurationRequestTraceContent.validateJsonElement(jsonObj.get("TraceContent"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WirelessDevicesToAdd") != null && !jsonObj.get("WirelessDevicesToAdd").isJsonNull() && !jsonObj.get("WirelessDevicesToAdd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WirelessDevicesToAdd` to be an array in the JSON string but got `%s`", jsonObj.get("WirelessDevicesToAdd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WirelessDevicesToRemove") != null && !jsonObj.get("WirelessDevicesToRemove").isJsonNull() && !jsonObj.get("WirelessDevicesToRemove").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WirelessDevicesToRemove` to be an array in the JSON string but got `%s`", jsonObj.get("WirelessDevicesToRemove").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WirelessGatewaysToAdd") != null && !jsonObj.get("WirelessGatewaysToAdd").isJsonNull() && !jsonObj.get("WirelessGatewaysToAdd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WirelessGatewaysToAdd` to be an array in the JSON string but got `%s`", jsonObj.get("WirelessGatewaysToAdd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("WirelessGatewaysToRemove") != null && !jsonObj.get("WirelessGatewaysToRemove").isJsonNull() && !jsonObj.get("WirelessGatewaysToRemove").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `WirelessGatewaysToRemove` to be an array in the JSON string but got `%s`", jsonObj.get("WirelessGatewaysToRemove").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MulticastGroupsToAdd") != null && !jsonObj.get("MulticastGroupsToAdd").isJsonNull() && !jsonObj.get("MulticastGroupsToAdd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MulticastGroupsToAdd` to be an array in the JSON string but got `%s`", jsonObj.get("MulticastGroupsToAdd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MulticastGroupsToRemove") != null && !jsonObj.get("MulticastGroupsToRemove").isJsonNull() && !jsonObj.get("MulticastGroupsToRemove").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MulticastGroupsToRemove` to be an array in the JSON string but got `%s`", jsonObj.get("MulticastGroupsToRemove").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkAnalyzerConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkAnalyzerConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkAnalyzerConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkAnalyzerConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkAnalyzerConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkAnalyzerConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkAnalyzerConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkAnalyzerConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkAnalyzerConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkAnalyzerConfigurationRequest
   */
  public static UpdateNetworkAnalyzerConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkAnalyzerConfigurationRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkAnalyzerConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

