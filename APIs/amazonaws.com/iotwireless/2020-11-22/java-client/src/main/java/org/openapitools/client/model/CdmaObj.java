/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CdmaObjCdmaLocalId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CDMA (Code-division multiple access) object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CdmaObj {
  public static final String SERIALIZED_NAME_SYSTEM_ID = "SystemId";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ID)
  private Integer systemId;

  public static final String SERIALIZED_NAME_NETWORK_ID = "NetworkId";
  @SerializedName(SERIALIZED_NAME_NETWORK_ID)
  private Integer networkId;

  public static final String SERIALIZED_NAME_BASE_STATION_ID = "BaseStationId";
  @SerializedName(SERIALIZED_NAME_BASE_STATION_ID)
  private Integer baseStationId;

  public static final String SERIALIZED_NAME_REGISTRATION_ZONE = "RegistrationZone";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ZONE)
  private Integer registrationZone;

  public static final String SERIALIZED_NAME_CDMA_LOCAL_ID = "CdmaLocalId";
  @SerializedName(SERIALIZED_NAME_CDMA_LOCAL_ID)
  private CdmaObjCdmaLocalId cdmaLocalId;

  public static final String SERIALIZED_NAME_PILOT_POWER = "PilotPower";
  @SerializedName(SERIALIZED_NAME_PILOT_POWER)
  private Integer pilotPower;

  public static final String SERIALIZED_NAME_BASE_LAT = "BaseLat";
  @SerializedName(SERIALIZED_NAME_BASE_LAT)
  private Float baseLat;

  public static final String SERIALIZED_NAME_BASE_LNG = "BaseLng";
  @SerializedName(SERIALIZED_NAME_BASE_LNG)
  private Float baseLng;

  public static final String SERIALIZED_NAME_CDMA_NMR = "CdmaNmr";
  @SerializedName(SERIALIZED_NAME_CDMA_NMR)
  private List cdmaNmr;

  public CdmaObj() {
  }

  public CdmaObj systemId(Integer systemId) {
    this.systemId = systemId;
    return this;
  }

  /**
   * Get systemId
   * @return systemId
   */
  @javax.annotation.Nonnull
  public Integer getSystemId() {
    return systemId;
  }

  public void setSystemId(Integer systemId) {
    this.systemId = systemId;
  }


  public CdmaObj networkId(Integer networkId) {
    this.networkId = networkId;
    return this;
  }

  /**
   * Get networkId
   * @return networkId
   */
  @javax.annotation.Nonnull
  public Integer getNetworkId() {
    return networkId;
  }

  public void setNetworkId(Integer networkId) {
    this.networkId = networkId;
  }


  public CdmaObj baseStationId(Integer baseStationId) {
    this.baseStationId = baseStationId;
    return this;
  }

  /**
   * Get baseStationId
   * @return baseStationId
   */
  @javax.annotation.Nonnull
  public Integer getBaseStationId() {
    return baseStationId;
  }

  public void setBaseStationId(Integer baseStationId) {
    this.baseStationId = baseStationId;
  }


  public CdmaObj registrationZone(Integer registrationZone) {
    this.registrationZone = registrationZone;
    return this;
  }

  /**
   * Get registrationZone
   * @return registrationZone
   */
  @javax.annotation.Nullable
  public Integer getRegistrationZone() {
    return registrationZone;
  }

  public void setRegistrationZone(Integer registrationZone) {
    this.registrationZone = registrationZone;
  }


  public CdmaObj cdmaLocalId(CdmaObjCdmaLocalId cdmaLocalId) {
    this.cdmaLocalId = cdmaLocalId;
    return this;
  }

  /**
   * Get cdmaLocalId
   * @return cdmaLocalId
   */
  @javax.annotation.Nullable
  public CdmaObjCdmaLocalId getCdmaLocalId() {
    return cdmaLocalId;
  }

  public void setCdmaLocalId(CdmaObjCdmaLocalId cdmaLocalId) {
    this.cdmaLocalId = cdmaLocalId;
  }


  public CdmaObj pilotPower(Integer pilotPower) {
    this.pilotPower = pilotPower;
    return this;
  }

  /**
   * Get pilotPower
   * @return pilotPower
   */
  @javax.annotation.Nullable
  public Integer getPilotPower() {
    return pilotPower;
  }

  public void setPilotPower(Integer pilotPower) {
    this.pilotPower = pilotPower;
  }


  public CdmaObj baseLat(Float baseLat) {
    this.baseLat = baseLat;
    return this;
  }

  /**
   * Get baseLat
   * @return baseLat
   */
  @javax.annotation.Nullable
  public Float getBaseLat() {
    return baseLat;
  }

  public void setBaseLat(Float baseLat) {
    this.baseLat = baseLat;
  }


  public CdmaObj baseLng(Float baseLng) {
    this.baseLng = baseLng;
    return this;
  }

  /**
   * Get baseLng
   * @return baseLng
   */
  @javax.annotation.Nullable
  public Float getBaseLng() {
    return baseLng;
  }

  public void setBaseLng(Float baseLng) {
    this.baseLng = baseLng;
  }


  public CdmaObj cdmaNmr(List cdmaNmr) {
    this.cdmaNmr = cdmaNmr;
    return this;
  }

  /**
   * Get cdmaNmr
   * @return cdmaNmr
   */
  @javax.annotation.Nullable
  public List getCdmaNmr() {
    return cdmaNmr;
  }

  public void setCdmaNmr(List cdmaNmr) {
    this.cdmaNmr = cdmaNmr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CdmaObj cdmaObj = (CdmaObj) o;
    return Objects.equals(this.systemId, cdmaObj.systemId) &&
        Objects.equals(this.networkId, cdmaObj.networkId) &&
        Objects.equals(this.baseStationId, cdmaObj.baseStationId) &&
        Objects.equals(this.registrationZone, cdmaObj.registrationZone) &&
        Objects.equals(this.cdmaLocalId, cdmaObj.cdmaLocalId) &&
        Objects.equals(this.pilotPower, cdmaObj.pilotPower) &&
        Objects.equals(this.baseLat, cdmaObj.baseLat) &&
        Objects.equals(this.baseLng, cdmaObj.baseLng) &&
        Objects.equals(this.cdmaNmr, cdmaObj.cdmaNmr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(systemId, networkId, baseStationId, registrationZone, cdmaLocalId, pilotPower, baseLat, baseLng, cdmaNmr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CdmaObj {\n");
    sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
    sb.append("    networkId: ").append(toIndentedString(networkId)).append("\n");
    sb.append("    baseStationId: ").append(toIndentedString(baseStationId)).append("\n");
    sb.append("    registrationZone: ").append(toIndentedString(registrationZone)).append("\n");
    sb.append("    cdmaLocalId: ").append(toIndentedString(cdmaLocalId)).append("\n");
    sb.append("    pilotPower: ").append(toIndentedString(pilotPower)).append("\n");
    sb.append("    baseLat: ").append(toIndentedString(baseLat)).append("\n");
    sb.append("    baseLng: ").append(toIndentedString(baseLng)).append("\n");
    sb.append("    cdmaNmr: ").append(toIndentedString(cdmaNmr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SystemId");
    openapiFields.add("NetworkId");
    openapiFields.add("BaseStationId");
    openapiFields.add("RegistrationZone");
    openapiFields.add("CdmaLocalId");
    openapiFields.add("PilotPower");
    openapiFields.add("BaseLat");
    openapiFields.add("BaseLng");
    openapiFields.add("CdmaNmr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SystemId");
    openapiRequiredFields.add("NetworkId");
    openapiRequiredFields.add("BaseStationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CdmaObj
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CdmaObj.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CdmaObj is not found in the empty JSON string", CdmaObj.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CdmaObj.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CdmaObj` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CdmaObj.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SystemId`
      Integer.validateJsonElement(jsonObj.get("SystemId"));
      // validate the required field `NetworkId`
      Integer.validateJsonElement(jsonObj.get("NetworkId"));
      // validate the required field `BaseStationId`
      Integer.validateJsonElement(jsonObj.get("BaseStationId"));
      // validate the optional field `RegistrationZone`
      if (jsonObj.get("RegistrationZone") != null && !jsonObj.get("RegistrationZone").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RegistrationZone"));
      }
      // validate the optional field `CdmaLocalId`
      if (jsonObj.get("CdmaLocalId") != null && !jsonObj.get("CdmaLocalId").isJsonNull()) {
        CdmaObjCdmaLocalId.validateJsonElement(jsonObj.get("CdmaLocalId"));
      }
      // validate the optional field `PilotPower`
      if (jsonObj.get("PilotPower") != null && !jsonObj.get("PilotPower").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PilotPower"));
      }
      // validate the optional field `BaseLat`
      if (jsonObj.get("BaseLat") != null && !jsonObj.get("BaseLat").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("BaseLat"));
      }
      // validate the optional field `BaseLng`
      if (jsonObj.get("BaseLng") != null && !jsonObj.get("BaseLng").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("BaseLng"));
      }
      // validate the optional field `CdmaNmr`
      if (jsonObj.get("CdmaNmr") != null && !jsonObj.get("CdmaNmr").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CdmaNmr"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CdmaObj.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CdmaObj' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CdmaObj> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CdmaObj.class));

       return (TypeAdapter<T>) new TypeAdapter<CdmaObj>() {
           @Override
           public void write(JsonWriter out, CdmaObj value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CdmaObj read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CdmaObj given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CdmaObj
   * @throws IOException if the JSON string is invalid with respect to CdmaObj
   */
  public static CdmaObj fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CdmaObj.class);
  }

  /**
   * Convert an instance of CdmaObj to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

