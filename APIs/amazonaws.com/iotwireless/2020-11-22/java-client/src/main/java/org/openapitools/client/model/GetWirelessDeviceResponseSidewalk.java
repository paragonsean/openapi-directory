/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WirelessDeviceSidewalkStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetWirelessDeviceResponseSidewalk
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetWirelessDeviceResponseSidewalk {
  public static final String SERIALIZED_NAME_AMAZON_ID = "AmazonId";
  @SerializedName(SERIALIZED_NAME_AMAZON_ID)
  private String amazonId;

  public static final String SERIALIZED_NAME_SIDEWALK_ID = "SidewalkId";
  @SerializedName(SERIALIZED_NAME_SIDEWALK_ID)
  private String sidewalkId;

  public static final String SERIALIZED_NAME_SIDEWALK_MANUFACTURING_SN = "SidewalkManufacturingSn";
  @SerializedName(SERIALIZED_NAME_SIDEWALK_MANUFACTURING_SN)
  private String sidewalkManufacturingSn;

  public static final String SERIALIZED_NAME_DEVICE_CERTIFICATES = "DeviceCertificates";
  @SerializedName(SERIALIZED_NAME_DEVICE_CERTIFICATES)
  private List deviceCertificates;

  public static final String SERIALIZED_NAME_PRIVATE_KEYS = "PrivateKeys";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEYS)
  private List privateKeys;

  public static final String SERIALIZED_NAME_DEVICE_PROFILE_ID = "DeviceProfileId";
  @SerializedName(SERIALIZED_NAME_DEVICE_PROFILE_ID)
  private String deviceProfileId;

  public static final String SERIALIZED_NAME_CERTIFICATE_ID = "CertificateId";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ID)
  private String certificateId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WirelessDeviceSidewalkStatus status;

  public GetWirelessDeviceResponseSidewalk() {
  }

  public GetWirelessDeviceResponseSidewalk amazonId(String amazonId) {
    this.amazonId = amazonId;
    return this;
  }

  /**
   * The Sidewalk Amazon ID.
   * @return amazonId
   */
  @javax.annotation.Nullable
  public String getAmazonId() {
    return amazonId;
  }

  public void setAmazonId(String amazonId) {
    this.amazonId = amazonId;
  }


  public GetWirelessDeviceResponseSidewalk sidewalkId(String sidewalkId) {
    this.sidewalkId = sidewalkId;
    return this;
  }

  /**
   * Get sidewalkId
   * @return sidewalkId
   */
  @javax.annotation.Nullable
  public String getSidewalkId() {
    return sidewalkId;
  }

  public void setSidewalkId(String sidewalkId) {
    this.sidewalkId = sidewalkId;
  }


  public GetWirelessDeviceResponseSidewalk sidewalkManufacturingSn(String sidewalkManufacturingSn) {
    this.sidewalkManufacturingSn = sidewalkManufacturingSn;
    return this;
  }

  /**
   * Get sidewalkManufacturingSn
   * @return sidewalkManufacturingSn
   */
  @javax.annotation.Nullable
  public String getSidewalkManufacturingSn() {
    return sidewalkManufacturingSn;
  }

  public void setSidewalkManufacturingSn(String sidewalkManufacturingSn) {
    this.sidewalkManufacturingSn = sidewalkManufacturingSn;
  }


  public GetWirelessDeviceResponseSidewalk deviceCertificates(List deviceCertificates) {
    this.deviceCertificates = deviceCertificates;
    return this;
  }

  /**
   * Get deviceCertificates
   * @return deviceCertificates
   */
  @javax.annotation.Nullable
  public List getDeviceCertificates() {
    return deviceCertificates;
  }

  public void setDeviceCertificates(List deviceCertificates) {
    this.deviceCertificates = deviceCertificates;
  }


  public GetWirelessDeviceResponseSidewalk privateKeys(List privateKeys) {
    this.privateKeys = privateKeys;
    return this;
  }

  /**
   * Get privateKeys
   * @return privateKeys
   */
  @javax.annotation.Nullable
  public List getPrivateKeys() {
    return privateKeys;
  }

  public void setPrivateKeys(List privateKeys) {
    this.privateKeys = privateKeys;
  }


  public GetWirelessDeviceResponseSidewalk deviceProfileId(String deviceProfileId) {
    this.deviceProfileId = deviceProfileId;
    return this;
  }

  /**
   * Get deviceProfileId
   * @return deviceProfileId
   */
  @javax.annotation.Nullable
  public String getDeviceProfileId() {
    return deviceProfileId;
  }

  public void setDeviceProfileId(String deviceProfileId) {
    this.deviceProfileId = deviceProfileId;
  }


  public GetWirelessDeviceResponseSidewalk certificateId(String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

  /**
   * Get certificateId
   * @return certificateId
   */
  @javax.annotation.Nullable
  public String getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(String certificateId) {
    this.certificateId = certificateId;
  }


  public GetWirelessDeviceResponseSidewalk status(WirelessDeviceSidewalkStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public WirelessDeviceSidewalkStatus getStatus() {
    return status;
  }

  public void setStatus(WirelessDeviceSidewalkStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWirelessDeviceResponseSidewalk getWirelessDeviceResponseSidewalk = (GetWirelessDeviceResponseSidewalk) o;
    return Objects.equals(this.amazonId, getWirelessDeviceResponseSidewalk.amazonId) &&
        Objects.equals(this.sidewalkId, getWirelessDeviceResponseSidewalk.sidewalkId) &&
        Objects.equals(this.sidewalkManufacturingSn, getWirelessDeviceResponseSidewalk.sidewalkManufacturingSn) &&
        Objects.equals(this.deviceCertificates, getWirelessDeviceResponseSidewalk.deviceCertificates) &&
        Objects.equals(this.privateKeys, getWirelessDeviceResponseSidewalk.privateKeys) &&
        Objects.equals(this.deviceProfileId, getWirelessDeviceResponseSidewalk.deviceProfileId) &&
        Objects.equals(this.certificateId, getWirelessDeviceResponseSidewalk.certificateId) &&
        Objects.equals(this.status, getWirelessDeviceResponseSidewalk.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amazonId, sidewalkId, sidewalkManufacturingSn, deviceCertificates, privateKeys, deviceProfileId, certificateId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWirelessDeviceResponseSidewalk {\n");
    sb.append("    amazonId: ").append(toIndentedString(amazonId)).append("\n");
    sb.append("    sidewalkId: ").append(toIndentedString(sidewalkId)).append("\n");
    sb.append("    sidewalkManufacturingSn: ").append(toIndentedString(sidewalkManufacturingSn)).append("\n");
    sb.append("    deviceCertificates: ").append(toIndentedString(deviceCertificates)).append("\n");
    sb.append("    privateKeys: ").append(toIndentedString(privateKeys)).append("\n");
    sb.append("    deviceProfileId: ").append(toIndentedString(deviceProfileId)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmazonId");
    openapiFields.add("SidewalkId");
    openapiFields.add("SidewalkManufacturingSn");
    openapiFields.add("DeviceCertificates");
    openapiFields.add("PrivateKeys");
    openapiFields.add("DeviceProfileId");
    openapiFields.add("CertificateId");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetWirelessDeviceResponseSidewalk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetWirelessDeviceResponseSidewalk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetWirelessDeviceResponseSidewalk is not found in the empty JSON string", GetWirelessDeviceResponseSidewalk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetWirelessDeviceResponseSidewalk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetWirelessDeviceResponseSidewalk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AmazonId") != null && !jsonObj.get("AmazonId").isJsonNull()) && !jsonObj.get("AmazonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AmazonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AmazonId").toString()));
      }
      // validate the optional field `SidewalkId`
      if (jsonObj.get("SidewalkId") != null && !jsonObj.get("SidewalkId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SidewalkId"));
      }
      // validate the optional field `SidewalkManufacturingSn`
      if (jsonObj.get("SidewalkManufacturingSn") != null && !jsonObj.get("SidewalkManufacturingSn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SidewalkManufacturingSn"));
      }
      // validate the optional field `DeviceCertificates`
      if (jsonObj.get("DeviceCertificates") != null && !jsonObj.get("DeviceCertificates").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DeviceCertificates"));
      }
      // validate the optional field `PrivateKeys`
      if (jsonObj.get("PrivateKeys") != null && !jsonObj.get("PrivateKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PrivateKeys"));
      }
      // validate the optional field `DeviceProfileId`
      if (jsonObj.get("DeviceProfileId") != null && !jsonObj.get("DeviceProfileId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceProfileId"));
      }
      // validate the optional field `CertificateId`
      if (jsonObj.get("CertificateId") != null && !jsonObj.get("CertificateId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateId"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        WirelessDeviceSidewalkStatus.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetWirelessDeviceResponseSidewalk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetWirelessDeviceResponseSidewalk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetWirelessDeviceResponseSidewalk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetWirelessDeviceResponseSidewalk.class));

       return (TypeAdapter<T>) new TypeAdapter<GetWirelessDeviceResponseSidewalk>() {
           @Override
           public void write(JsonWriter out, GetWirelessDeviceResponseSidewalk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetWirelessDeviceResponseSidewalk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetWirelessDeviceResponseSidewalk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetWirelessDeviceResponseSidewalk
   * @throws IOException if the JSON string is invalid with respect to GetWirelessDeviceResponseSidewalk
   */
  public static GetWirelessDeviceResponseSidewalk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetWirelessDeviceResponseSidewalk.class);
  }

  /**
   * Convert an instance of GetWirelessDeviceResponseSidewalk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

