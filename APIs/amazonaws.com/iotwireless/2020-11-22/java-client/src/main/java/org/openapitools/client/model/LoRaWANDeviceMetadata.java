/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LoRaWAN device metatdata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoRaWANDeviceMetadata {
  public static final String SERIALIZED_NAME_DEV_EUI = "DevEui";
  @SerializedName(SERIALIZED_NAME_DEV_EUI)
  private String devEui;

  public static final String SERIALIZED_NAME_FPORT = "FPort";
  @SerializedName(SERIALIZED_NAME_FPORT)
  private Integer fport;

  public static final String SERIALIZED_NAME_DATA_RATE = "DataRate";
  @SerializedName(SERIALIZED_NAME_DATA_RATE)
  private Integer dataRate;

  public static final String SERIALIZED_NAME_FREQUENCY = "Frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Integer frequency;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_GATEWAYS = "Gateways";
  @SerializedName(SERIALIZED_NAME_GATEWAYS)
  private List gateways;

  public LoRaWANDeviceMetadata() {
  }

  public LoRaWANDeviceMetadata devEui(String devEui) {
    this.devEui = devEui;
    return this;
  }

  /**
   * Get devEui
   * @return devEui
   */
  @javax.annotation.Nullable
  public String getDevEui() {
    return devEui;
  }

  public void setDevEui(String devEui) {
    this.devEui = devEui;
  }


  public LoRaWANDeviceMetadata fport(Integer fport) {
    this.fport = fport;
    return this;
  }

  /**
   * Get fport
   * @return fport
   */
  @javax.annotation.Nullable
  public Integer getFport() {
    return fport;
  }

  public void setFport(Integer fport) {
    this.fport = fport;
  }


  public LoRaWANDeviceMetadata dataRate(Integer dataRate) {
    this.dataRate = dataRate;
    return this;
  }

  /**
   * Get dataRate
   * @return dataRate
   */
  @javax.annotation.Nullable
  public Integer getDataRate() {
    return dataRate;
  }

  public void setDataRate(Integer dataRate) {
    this.dataRate = dataRate;
  }


  public LoRaWANDeviceMetadata frequency(Integer frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public Integer getFrequency() {
    return frequency;
  }

  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }


  public LoRaWANDeviceMetadata timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public LoRaWANDeviceMetadata gateways(List gateways) {
    this.gateways = gateways;
    return this;
  }

  /**
   * Get gateways
   * @return gateways
   */
  @javax.annotation.Nullable
  public List getGateways() {
    return gateways;
  }

  public void setGateways(List gateways) {
    this.gateways = gateways;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoRaWANDeviceMetadata loRaWANDeviceMetadata = (LoRaWANDeviceMetadata) o;
    return Objects.equals(this.devEui, loRaWANDeviceMetadata.devEui) &&
        Objects.equals(this.fport, loRaWANDeviceMetadata.fport) &&
        Objects.equals(this.dataRate, loRaWANDeviceMetadata.dataRate) &&
        Objects.equals(this.frequency, loRaWANDeviceMetadata.frequency) &&
        Objects.equals(this.timestamp, loRaWANDeviceMetadata.timestamp) &&
        Objects.equals(this.gateways, loRaWANDeviceMetadata.gateways);
  }

  @Override
  public int hashCode() {
    return Objects.hash(devEui, fport, dataRate, frequency, timestamp, gateways);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoRaWANDeviceMetadata {\n");
    sb.append("    devEui: ").append(toIndentedString(devEui)).append("\n");
    sb.append("    fport: ").append(toIndentedString(fport)).append("\n");
    sb.append("    dataRate: ").append(toIndentedString(dataRate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    gateways: ").append(toIndentedString(gateways)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DevEui");
    openapiFields.add("FPort");
    openapiFields.add("DataRate");
    openapiFields.add("Frequency");
    openapiFields.add("Timestamp");
    openapiFields.add("Gateways");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoRaWANDeviceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoRaWANDeviceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoRaWANDeviceMetadata is not found in the empty JSON string", LoRaWANDeviceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoRaWANDeviceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoRaWANDeviceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DevEui`
      if (jsonObj.get("DevEui") != null && !jsonObj.get("DevEui").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DevEui"));
      }
      // validate the optional field `FPort`
      if (jsonObj.get("FPort") != null && !jsonObj.get("FPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FPort"));
      }
      // validate the optional field `DataRate`
      if (jsonObj.get("DataRate") != null && !jsonObj.get("DataRate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DataRate"));
      }
      // validate the optional field `Frequency`
      if (jsonObj.get("Frequency") != null && !jsonObj.get("Frequency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Frequency"));
      }
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Timestamp"));
      }
      // validate the optional field `Gateways`
      if (jsonObj.get("Gateways") != null && !jsonObj.get("Gateways").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Gateways"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoRaWANDeviceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoRaWANDeviceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoRaWANDeviceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoRaWANDeviceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<LoRaWANDeviceMetadata>() {
           @Override
           public void write(JsonWriter out, LoRaWANDeviceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoRaWANDeviceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoRaWANDeviceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoRaWANDeviceMetadata
   * @throws IOException if the JSON string is invalid with respect to LoRaWANDeviceMetadata
   */
  public static LoRaWANDeviceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoRaWANDeviceMetadata.class);
  }

  /**
   * Convert an instance of LoRaWANDeviceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

