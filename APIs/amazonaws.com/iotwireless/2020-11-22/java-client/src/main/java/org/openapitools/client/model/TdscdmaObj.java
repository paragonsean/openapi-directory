/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TdscdmaObjTdscdmaLocalId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TD-SCDMA object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TdscdmaObj {
  public static final String SERIALIZED_NAME_MCC = "Mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private Integer mcc;

  public static final String SERIALIZED_NAME_MNC = "Mnc";
  @SerializedName(SERIALIZED_NAME_MNC)
  private Integer mnc;

  public static final String SERIALIZED_NAME_LAC = "Lac";
  @SerializedName(SERIALIZED_NAME_LAC)
  private Integer lac;

  public static final String SERIALIZED_NAME_UTRAN_CID = "UtranCid";
  @SerializedName(SERIALIZED_NAME_UTRAN_CID)
  private Integer utranCid;

  public static final String SERIALIZED_NAME_TDSCDMA_LOCAL_ID = "TdscdmaLocalId";
  @SerializedName(SERIALIZED_NAME_TDSCDMA_LOCAL_ID)
  private TdscdmaObjTdscdmaLocalId tdscdmaLocalId;

  public static final String SERIALIZED_NAME_TDSCDMA_TIMING_ADVANCE = "TdscdmaTimingAdvance";
  @SerializedName(SERIALIZED_NAME_TDSCDMA_TIMING_ADVANCE)
  private Integer tdscdmaTimingAdvance;

  public static final String SERIALIZED_NAME_RSCP = "Rscp";
  @SerializedName(SERIALIZED_NAME_RSCP)
  private Integer rscp;

  public static final String SERIALIZED_NAME_PATH_LOSS = "PathLoss";
  @SerializedName(SERIALIZED_NAME_PATH_LOSS)
  private Integer pathLoss;

  public static final String SERIALIZED_NAME_TDSCDMA_NMR = "TdscdmaNmr";
  @SerializedName(SERIALIZED_NAME_TDSCDMA_NMR)
  private List tdscdmaNmr;

  public TdscdmaObj() {
  }

  public TdscdmaObj mcc(Integer mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * Get mcc
   * @return mcc
   */
  @javax.annotation.Nonnull
  public Integer getMcc() {
    return mcc;
  }

  public void setMcc(Integer mcc) {
    this.mcc = mcc;
  }


  public TdscdmaObj mnc(Integer mnc) {
    this.mnc = mnc;
    return this;
  }

  /**
   * Get mnc
   * @return mnc
   */
  @javax.annotation.Nonnull
  public Integer getMnc() {
    return mnc;
  }

  public void setMnc(Integer mnc) {
    this.mnc = mnc;
  }


  public TdscdmaObj lac(Integer lac) {
    this.lac = lac;
    return this;
  }

  /**
   * Get lac
   * @return lac
   */
  @javax.annotation.Nullable
  public Integer getLac() {
    return lac;
  }

  public void setLac(Integer lac) {
    this.lac = lac;
  }


  public TdscdmaObj utranCid(Integer utranCid) {
    this.utranCid = utranCid;
    return this;
  }

  /**
   * Get utranCid
   * @return utranCid
   */
  @javax.annotation.Nonnull
  public Integer getUtranCid() {
    return utranCid;
  }

  public void setUtranCid(Integer utranCid) {
    this.utranCid = utranCid;
  }


  public TdscdmaObj tdscdmaLocalId(TdscdmaObjTdscdmaLocalId tdscdmaLocalId) {
    this.tdscdmaLocalId = tdscdmaLocalId;
    return this;
  }

  /**
   * Get tdscdmaLocalId
   * @return tdscdmaLocalId
   */
  @javax.annotation.Nullable
  public TdscdmaObjTdscdmaLocalId getTdscdmaLocalId() {
    return tdscdmaLocalId;
  }

  public void setTdscdmaLocalId(TdscdmaObjTdscdmaLocalId tdscdmaLocalId) {
    this.tdscdmaLocalId = tdscdmaLocalId;
  }


  public TdscdmaObj tdscdmaTimingAdvance(Integer tdscdmaTimingAdvance) {
    this.tdscdmaTimingAdvance = tdscdmaTimingAdvance;
    return this;
  }

  /**
   * Get tdscdmaTimingAdvance
   * @return tdscdmaTimingAdvance
   */
  @javax.annotation.Nullable
  public Integer getTdscdmaTimingAdvance() {
    return tdscdmaTimingAdvance;
  }

  public void setTdscdmaTimingAdvance(Integer tdscdmaTimingAdvance) {
    this.tdscdmaTimingAdvance = tdscdmaTimingAdvance;
  }


  public TdscdmaObj rscp(Integer rscp) {
    this.rscp = rscp;
    return this;
  }

  /**
   * Get rscp
   * @return rscp
   */
  @javax.annotation.Nullable
  public Integer getRscp() {
    return rscp;
  }

  public void setRscp(Integer rscp) {
    this.rscp = rscp;
  }


  public TdscdmaObj pathLoss(Integer pathLoss) {
    this.pathLoss = pathLoss;
    return this;
  }

  /**
   * Get pathLoss
   * @return pathLoss
   */
  @javax.annotation.Nullable
  public Integer getPathLoss() {
    return pathLoss;
  }

  public void setPathLoss(Integer pathLoss) {
    this.pathLoss = pathLoss;
  }


  public TdscdmaObj tdscdmaNmr(List tdscdmaNmr) {
    this.tdscdmaNmr = tdscdmaNmr;
    return this;
  }

  /**
   * Get tdscdmaNmr
   * @return tdscdmaNmr
   */
  @javax.annotation.Nullable
  public List getTdscdmaNmr() {
    return tdscdmaNmr;
  }

  public void setTdscdmaNmr(List tdscdmaNmr) {
    this.tdscdmaNmr = tdscdmaNmr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TdscdmaObj tdscdmaObj = (TdscdmaObj) o;
    return Objects.equals(this.mcc, tdscdmaObj.mcc) &&
        Objects.equals(this.mnc, tdscdmaObj.mnc) &&
        Objects.equals(this.lac, tdscdmaObj.lac) &&
        Objects.equals(this.utranCid, tdscdmaObj.utranCid) &&
        Objects.equals(this.tdscdmaLocalId, tdscdmaObj.tdscdmaLocalId) &&
        Objects.equals(this.tdscdmaTimingAdvance, tdscdmaObj.tdscdmaTimingAdvance) &&
        Objects.equals(this.rscp, tdscdmaObj.rscp) &&
        Objects.equals(this.pathLoss, tdscdmaObj.pathLoss) &&
        Objects.equals(this.tdscdmaNmr, tdscdmaObj.tdscdmaNmr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mcc, mnc, lac, utranCid, tdscdmaLocalId, tdscdmaTimingAdvance, rscp, pathLoss, tdscdmaNmr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TdscdmaObj {\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    mnc: ").append(toIndentedString(mnc)).append("\n");
    sb.append("    lac: ").append(toIndentedString(lac)).append("\n");
    sb.append("    utranCid: ").append(toIndentedString(utranCid)).append("\n");
    sb.append("    tdscdmaLocalId: ").append(toIndentedString(tdscdmaLocalId)).append("\n");
    sb.append("    tdscdmaTimingAdvance: ").append(toIndentedString(tdscdmaTimingAdvance)).append("\n");
    sb.append("    rscp: ").append(toIndentedString(rscp)).append("\n");
    sb.append("    pathLoss: ").append(toIndentedString(pathLoss)).append("\n");
    sb.append("    tdscdmaNmr: ").append(toIndentedString(tdscdmaNmr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Mcc");
    openapiFields.add("Mnc");
    openapiFields.add("Lac");
    openapiFields.add("UtranCid");
    openapiFields.add("TdscdmaLocalId");
    openapiFields.add("TdscdmaTimingAdvance");
    openapiFields.add("Rscp");
    openapiFields.add("PathLoss");
    openapiFields.add("TdscdmaNmr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Mcc");
    openapiRequiredFields.add("Mnc");
    openapiRequiredFields.add("UtranCid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TdscdmaObj
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TdscdmaObj.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TdscdmaObj is not found in the empty JSON string", TdscdmaObj.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TdscdmaObj.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TdscdmaObj` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TdscdmaObj.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Mcc`
      Integer.validateJsonElement(jsonObj.get("Mcc"));
      // validate the required field `Mnc`
      Integer.validateJsonElement(jsonObj.get("Mnc"));
      // validate the optional field `Lac`
      if (jsonObj.get("Lac") != null && !jsonObj.get("Lac").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Lac"));
      }
      // validate the required field `UtranCid`
      Integer.validateJsonElement(jsonObj.get("UtranCid"));
      // validate the optional field `TdscdmaLocalId`
      if (jsonObj.get("TdscdmaLocalId") != null && !jsonObj.get("TdscdmaLocalId").isJsonNull()) {
        TdscdmaObjTdscdmaLocalId.validateJsonElement(jsonObj.get("TdscdmaLocalId"));
      }
      // validate the optional field `TdscdmaTimingAdvance`
      if (jsonObj.get("TdscdmaTimingAdvance") != null && !jsonObj.get("TdscdmaTimingAdvance").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TdscdmaTimingAdvance"));
      }
      // validate the optional field `Rscp`
      if (jsonObj.get("Rscp") != null && !jsonObj.get("Rscp").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Rscp"));
      }
      // validate the optional field `PathLoss`
      if (jsonObj.get("PathLoss") != null && !jsonObj.get("PathLoss").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PathLoss"));
      }
      // validate the optional field `TdscdmaNmr`
      if (jsonObj.get("TdscdmaNmr") != null && !jsonObj.get("TdscdmaNmr").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TdscdmaNmr"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TdscdmaObj.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TdscdmaObj' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TdscdmaObj> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TdscdmaObj.class));

       return (TypeAdapter<T>) new TypeAdapter<TdscdmaObj>() {
           @Override
           public void write(JsonWriter out, TdscdmaObj value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TdscdmaObj read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TdscdmaObj given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TdscdmaObj
   * @throws IOException if the JSON string is invalid with respect to TdscdmaObj
   */
  public static TdscdmaObj fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TdscdmaObj.class);
  }

  /**
   * Convert an instance of TdscdmaObj to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

