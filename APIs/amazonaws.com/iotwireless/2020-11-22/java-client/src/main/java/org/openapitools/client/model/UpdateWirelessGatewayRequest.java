/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateWirelessGatewayRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateWirelessGatewayRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_JOIN_EUI_FILTERS = "JoinEuiFilters";
  @SerializedName(SERIALIZED_NAME_JOIN_EUI_FILTERS)
  private List<List<String>> joinEuiFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_NET_ID_FILTERS = "NetIdFilters";
  @SerializedName(SERIALIZED_NAME_NET_ID_FILTERS)
  private List<String> netIdFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_EIRP = "MaxEirp";
  @SerializedName(SERIALIZED_NAME_MAX_EIRP)
  private Float maxEirp;

  public UpdateWirelessGatewayRequest() {
  }

  public UpdateWirelessGatewayRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The new name of the resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateWirelessGatewayRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the new resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateWirelessGatewayRequest joinEuiFilters(List<List<String>> joinEuiFilters) {
    this.joinEuiFilters = joinEuiFilters;
    return this;
  }

  public UpdateWirelessGatewayRequest addJoinEuiFiltersItem(List<String> joinEuiFiltersItem) {
    if (this.joinEuiFilters == null) {
      this.joinEuiFilters = new ArrayList<>();
    }
    this.joinEuiFilters.add(joinEuiFiltersItem);
    return this;
  }

  /**
   * A list of JoinEuiRange used by LoRa gateways to filter LoRa frames.
   * @return joinEuiFilters
   */
  @javax.annotation.Nullable
  public List<List<String>> getJoinEuiFilters() {
    return joinEuiFilters;
  }

  public void setJoinEuiFilters(List<List<String>> joinEuiFilters) {
    this.joinEuiFilters = joinEuiFilters;
  }


  public UpdateWirelessGatewayRequest netIdFilters(List<String> netIdFilters) {
    this.netIdFilters = netIdFilters;
    return this;
  }

  public UpdateWirelessGatewayRequest addNetIdFiltersItem(String netIdFiltersItem) {
    if (this.netIdFilters == null) {
      this.netIdFilters = new ArrayList<>();
    }
    this.netIdFilters.add(netIdFiltersItem);
    return this;
  }

  /**
   * A list of NetId values that are used by LoRa gateways to filter the uplink frames.
   * @return netIdFilters
   */
  @javax.annotation.Nullable
  public List<String> getNetIdFilters() {
    return netIdFilters;
  }

  public void setNetIdFilters(List<String> netIdFilters) {
    this.netIdFilters = netIdFilters;
  }


  public UpdateWirelessGatewayRequest maxEirp(Float maxEirp) {
    this.maxEirp = maxEirp;
    return this;
  }

  /**
   * The MaxEIRP value.
   * minimum: 0
   * maximum: 30
   * @return maxEirp
   */
  @javax.annotation.Nullable
  public Float getMaxEirp() {
    return maxEirp;
  }

  public void setMaxEirp(Float maxEirp) {
    this.maxEirp = maxEirp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateWirelessGatewayRequest updateWirelessGatewayRequest = (UpdateWirelessGatewayRequest) o;
    return Objects.equals(this.name, updateWirelessGatewayRequest.name) &&
        Objects.equals(this.description, updateWirelessGatewayRequest.description) &&
        Objects.equals(this.joinEuiFilters, updateWirelessGatewayRequest.joinEuiFilters) &&
        Objects.equals(this.netIdFilters, updateWirelessGatewayRequest.netIdFilters) &&
        Objects.equals(this.maxEirp, updateWirelessGatewayRequest.maxEirp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, joinEuiFilters, netIdFilters, maxEirp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateWirelessGatewayRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    joinEuiFilters: ").append(toIndentedString(joinEuiFilters)).append("\n");
    sb.append("    netIdFilters: ").append(toIndentedString(netIdFilters)).append("\n");
    sb.append("    maxEirp: ").append(toIndentedString(maxEirp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("JoinEuiFilters");
    openapiFields.add("NetIdFilters");
    openapiFields.add("MaxEirp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateWirelessGatewayRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateWirelessGatewayRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateWirelessGatewayRequest is not found in the empty JSON string", UpdateWirelessGatewayRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateWirelessGatewayRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateWirelessGatewayRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("JoinEuiFilters") != null && !jsonObj.get("JoinEuiFilters").isJsonNull() && !jsonObj.get("JoinEuiFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `JoinEuiFilters` to be an array in the JSON string but got `%s`", jsonObj.get("JoinEuiFilters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("NetIdFilters") != null && !jsonObj.get("NetIdFilters").isJsonNull() && !jsonObj.get("NetIdFilters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NetIdFilters` to be an array in the JSON string but got `%s`", jsonObj.get("NetIdFilters").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateWirelessGatewayRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateWirelessGatewayRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateWirelessGatewayRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateWirelessGatewayRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateWirelessGatewayRequest>() {
           @Override
           public void write(JsonWriter out, UpdateWirelessGatewayRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateWirelessGatewayRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateWirelessGatewayRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateWirelessGatewayRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateWirelessGatewayRequest
   */
  public static UpdateWirelessGatewayRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateWirelessGatewayRequest.class);
  }

  /**
   * Convert an instance of UpdateWirelessGatewayRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

