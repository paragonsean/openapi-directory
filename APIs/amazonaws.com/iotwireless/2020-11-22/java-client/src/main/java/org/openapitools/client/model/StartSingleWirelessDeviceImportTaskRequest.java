/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StartSingleWirelessDeviceImportTaskRequestSidewalk;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartSingleWirelessDeviceImportTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartSingleWirelessDeviceImportTaskRequest {
  public static final String SERIALIZED_NAME_DESTINATION_NAME = "DestinationName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  private String destinationName;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIDEWALK = "Sidewalk";
  @SerializedName(SERIALIZED_NAME_SIDEWALK)
  private StartSingleWirelessDeviceImportTaskRequestSidewalk sidewalk;

  public StartSingleWirelessDeviceImportTaskRequest() {
  }

  public StartSingleWirelessDeviceImportTaskRequest destinationName(String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * The name of the Sidewalk destination that describes the IoT rule to route messages from the device in the import task that will be onboarded to AWS IoT Wireless.
   * @return destinationName
   */
  @javax.annotation.Nonnull
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }


  public StartSingleWirelessDeviceImportTaskRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public StartSingleWirelessDeviceImportTaskRequest deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * The name of the wireless device for which an import task is being started.
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public StartSingleWirelessDeviceImportTaskRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public StartSingleWirelessDeviceImportTaskRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public StartSingleWirelessDeviceImportTaskRequest sidewalk(StartSingleWirelessDeviceImportTaskRequestSidewalk sidewalk) {
    this.sidewalk = sidewalk;
    return this;
  }

  /**
   * Get sidewalk
   * @return sidewalk
   */
  @javax.annotation.Nonnull
  public StartSingleWirelessDeviceImportTaskRequestSidewalk getSidewalk() {
    return sidewalk;
  }

  public void setSidewalk(StartSingleWirelessDeviceImportTaskRequestSidewalk sidewalk) {
    this.sidewalk = sidewalk;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSingleWirelessDeviceImportTaskRequest startSingleWirelessDeviceImportTaskRequest = (StartSingleWirelessDeviceImportTaskRequest) o;
    return Objects.equals(this.destinationName, startSingleWirelessDeviceImportTaskRequest.destinationName) &&
        Objects.equals(this.clientRequestToken, startSingleWirelessDeviceImportTaskRequest.clientRequestToken) &&
        Objects.equals(this.deviceName, startSingleWirelessDeviceImportTaskRequest.deviceName) &&
        Objects.equals(this.tags, startSingleWirelessDeviceImportTaskRequest.tags) &&
        Objects.equals(this.sidewalk, startSingleWirelessDeviceImportTaskRequest.sidewalk);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationName, clientRequestToken, deviceName, tags, sidewalk);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSingleWirelessDeviceImportTaskRequest {\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    sidewalk: ").append(toIndentedString(sidewalk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DestinationName");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("DeviceName");
    openapiFields.add("Tags");
    openapiFields.add("Sidewalk");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DestinationName");
    openapiRequiredFields.add("Sidewalk");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSingleWirelessDeviceImportTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSingleWirelessDeviceImportTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSingleWirelessDeviceImportTaskRequest is not found in the empty JSON string", StartSingleWirelessDeviceImportTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSingleWirelessDeviceImportTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSingleWirelessDeviceImportTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartSingleWirelessDeviceImportTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DestinationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DestinationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DestinationName").toString()));
      }
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      if ((jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) && !jsonObj.get("DeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceName").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the required field `Sidewalk`
      StartSingleWirelessDeviceImportTaskRequestSidewalk.validateJsonElement(jsonObj.get("Sidewalk"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSingleWirelessDeviceImportTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSingleWirelessDeviceImportTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSingleWirelessDeviceImportTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSingleWirelessDeviceImportTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSingleWirelessDeviceImportTaskRequest>() {
           @Override
           public void write(JsonWriter out, StartSingleWirelessDeviceImportTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSingleWirelessDeviceImportTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSingleWirelessDeviceImportTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSingleWirelessDeviceImportTaskRequest
   * @throws IOException if the JSON string is invalid with respect to StartSingleWirelessDeviceImportTaskRequest
   */
  public static StartSingleWirelessDeviceImportTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSingleWirelessDeviceImportTaskRequest.class);
  }

  /**
   * Convert an instance of StartSingleWirelessDeviceImportTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

