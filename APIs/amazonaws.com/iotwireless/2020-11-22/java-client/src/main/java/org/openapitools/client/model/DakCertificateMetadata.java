/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The device attestation key (DAK) information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:29.819634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DakCertificateMetadata {
  public static final String SERIALIZED_NAME_CERTIFICATE_ID = "CertificateId";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ID)
  private String certificateId;

  public static final String SERIALIZED_NAME_MAX_ALLOWED_SIGNATURE = "MaxAllowedSignature";
  @SerializedName(SERIALIZED_NAME_MAX_ALLOWED_SIGNATURE)
  private Integer maxAllowedSignature;

  public static final String SERIALIZED_NAME_FACTORY_SUPPORT = "FactorySupport";
  @SerializedName(SERIALIZED_NAME_FACTORY_SUPPORT)
  private Boolean factorySupport;

  public static final String SERIALIZED_NAME_AP_ID = "ApId";
  @SerializedName(SERIALIZED_NAME_AP_ID)
  private String apId;

  public static final String SERIALIZED_NAME_DEVICE_TYPE_ID = "DeviceTypeId";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE_ID)
  private String deviceTypeId;

  public DakCertificateMetadata() {
  }

  public DakCertificateMetadata certificateId(String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

  /**
   * Get certificateId
   * @return certificateId
   */
  @javax.annotation.Nonnull
  public String getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(String certificateId) {
    this.certificateId = certificateId;
  }


  public DakCertificateMetadata maxAllowedSignature(Integer maxAllowedSignature) {
    this.maxAllowedSignature = maxAllowedSignature;
    return this;
  }

  /**
   * Get maxAllowedSignature
   * @return maxAllowedSignature
   */
  @javax.annotation.Nullable
  public Integer getMaxAllowedSignature() {
    return maxAllowedSignature;
  }

  public void setMaxAllowedSignature(Integer maxAllowedSignature) {
    this.maxAllowedSignature = maxAllowedSignature;
  }


  public DakCertificateMetadata factorySupport(Boolean factorySupport) {
    this.factorySupport = factorySupport;
    return this;
  }

  /**
   * Get factorySupport
   * @return factorySupport
   */
  @javax.annotation.Nullable
  public Boolean getFactorySupport() {
    return factorySupport;
  }

  public void setFactorySupport(Boolean factorySupport) {
    this.factorySupport = factorySupport;
  }


  public DakCertificateMetadata apId(String apId) {
    this.apId = apId;
    return this;
  }

  /**
   * Get apId
   * @return apId
   */
  @javax.annotation.Nullable
  public String getApId() {
    return apId;
  }

  public void setApId(String apId) {
    this.apId = apId;
  }


  public DakCertificateMetadata deviceTypeId(String deviceTypeId) {
    this.deviceTypeId = deviceTypeId;
    return this;
  }

  /**
   * Get deviceTypeId
   * @return deviceTypeId
   */
  @javax.annotation.Nullable
  public String getDeviceTypeId() {
    return deviceTypeId;
  }

  public void setDeviceTypeId(String deviceTypeId) {
    this.deviceTypeId = deviceTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DakCertificateMetadata dakCertificateMetadata = (DakCertificateMetadata) o;
    return Objects.equals(this.certificateId, dakCertificateMetadata.certificateId) &&
        Objects.equals(this.maxAllowedSignature, dakCertificateMetadata.maxAllowedSignature) &&
        Objects.equals(this.factorySupport, dakCertificateMetadata.factorySupport) &&
        Objects.equals(this.apId, dakCertificateMetadata.apId) &&
        Objects.equals(this.deviceTypeId, dakCertificateMetadata.deviceTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateId, maxAllowedSignature, factorySupport, apId, deviceTypeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DakCertificateMetadata {\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    maxAllowedSignature: ").append(toIndentedString(maxAllowedSignature)).append("\n");
    sb.append("    factorySupport: ").append(toIndentedString(factorySupport)).append("\n");
    sb.append("    apId: ").append(toIndentedString(apId)).append("\n");
    sb.append("    deviceTypeId: ").append(toIndentedString(deviceTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertificateId");
    openapiFields.add("MaxAllowedSignature");
    openapiFields.add("FactorySupport");
    openapiFields.add("ApId");
    openapiFields.add("DeviceTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CertificateId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DakCertificateMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DakCertificateMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DakCertificateMetadata is not found in the empty JSON string", DakCertificateMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DakCertificateMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DakCertificateMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DakCertificateMetadata.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CertificateId`
      String.validateJsonElement(jsonObj.get("CertificateId"));
      // validate the optional field `MaxAllowedSignature`
      if (jsonObj.get("MaxAllowedSignature") != null && !jsonObj.get("MaxAllowedSignature").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxAllowedSignature"));
      }
      // validate the optional field `FactorySupport`
      if (jsonObj.get("FactorySupport") != null && !jsonObj.get("FactorySupport").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("FactorySupport"));
      }
      // validate the optional field `ApId`
      if (jsonObj.get("ApId") != null && !jsonObj.get("ApId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApId"));
      }
      // validate the optional field `DeviceTypeId`
      if (jsonObj.get("DeviceTypeId") != null && !jsonObj.get("DeviceTypeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceTypeId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DakCertificateMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DakCertificateMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DakCertificateMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DakCertificateMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<DakCertificateMetadata>() {
           @Override
           public void write(JsonWriter out, DakCertificateMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DakCertificateMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DakCertificateMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DakCertificateMetadata
   * @throws IOException if the JSON string is invalid with respect to DakCertificateMetadata
   */
  public static DakCertificateMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DakCertificateMetadata.class);
  }

  /**
   * Convert an instance of DakCertificateMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

