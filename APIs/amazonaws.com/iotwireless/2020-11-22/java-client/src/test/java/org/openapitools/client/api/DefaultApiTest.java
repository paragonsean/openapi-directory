/*
 * AWS IoT Wireless
 * <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>
 *
 * The version of the OpenAPI document: 2020-11-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateAwsAccountWithPartnerAccountRequest;
import org.openapitools.client.model.AssociateAwsAccountWithPartnerAccountResponse;
import org.openapitools.client.model.AssociateMulticastGroupWithFuotaTaskRequest;
import org.openapitools.client.model.AssociateWirelessDeviceWithFuotaTaskRequest;
import org.openapitools.client.model.AssociateWirelessDeviceWithThingRequest;
import org.openapitools.client.model.AssociateWirelessGatewayWithCertificateRequest;
import org.openapitools.client.model.AssociateWirelessGatewayWithCertificateResponse;
import org.openapitools.client.model.AssociateWirelessGatewayWithThingRequest;
import org.openapitools.client.model.CreateDestinationRequest;
import org.openapitools.client.model.CreateDestinationResponse;
import org.openapitools.client.model.CreateDeviceProfileRequest;
import org.openapitools.client.model.CreateDeviceProfileResponse;
import org.openapitools.client.model.CreateFuotaTaskRequest;
import org.openapitools.client.model.CreateFuotaTaskResponse;
import org.openapitools.client.model.CreateMulticastGroupRequest;
import org.openapitools.client.model.CreateMulticastGroupResponse;
import org.openapitools.client.model.CreateNetworkAnalyzerConfigurationRequest;
import org.openapitools.client.model.CreateNetworkAnalyzerConfigurationResponse;
import org.openapitools.client.model.CreateServiceProfileRequest;
import org.openapitools.client.model.CreateServiceProfileResponse;
import org.openapitools.client.model.CreateWirelessDeviceRequest;
import org.openapitools.client.model.CreateWirelessDeviceResponse;
import org.openapitools.client.model.CreateWirelessGatewayRequest;
import org.openapitools.client.model.CreateWirelessGatewayResponse;
import org.openapitools.client.model.CreateWirelessGatewayTaskDefinitionRequest;
import org.openapitools.client.model.CreateWirelessGatewayTaskDefinitionResponse;
import org.openapitools.client.model.CreateWirelessGatewayTaskRequest;
import org.openapitools.client.model.CreateWirelessGatewayTaskResponse;
import org.openapitools.client.model.GetDestinationResponse;
import org.openapitools.client.model.GetDeviceProfileResponse;
import org.openapitools.client.model.GetEventConfigurationByResourceTypesResponse;
import org.openapitools.client.model.GetFuotaTaskResponse;
import org.openapitools.client.model.GetLogLevelsByResourceTypesResponse;
import org.openapitools.client.model.GetMulticastGroupResponse;
import org.openapitools.client.model.GetMulticastGroupSessionResponse;
import org.openapitools.client.model.GetNetworkAnalyzerConfigurationResponse;
import org.openapitools.client.model.GetPartnerAccountResponse;
import org.openapitools.client.model.GetPositionConfigurationResponse;
import org.openapitools.client.model.GetPositionEstimateRequest;
import org.openapitools.client.model.GetPositionEstimateResponse;
import org.openapitools.client.model.GetPositionResponse;
import org.openapitools.client.model.GetResourceEventConfigurationResponse;
import org.openapitools.client.model.GetResourceLogLevelResponse;
import org.openapitools.client.model.GetResourcePositionResponse;
import org.openapitools.client.model.GetServiceEndpointResponse;
import org.openapitools.client.model.GetServiceProfileResponse;
import org.openapitools.client.model.GetWirelessDeviceImportTaskResponse;
import org.openapitools.client.model.GetWirelessDeviceResponse;
import org.openapitools.client.model.GetWirelessDeviceStatisticsResponse;
import org.openapitools.client.model.GetWirelessGatewayCertificateResponse;
import org.openapitools.client.model.GetWirelessGatewayFirmwareInformationResponse;
import org.openapitools.client.model.GetWirelessGatewayResponse;
import org.openapitools.client.model.GetWirelessGatewayStatisticsResponse;
import org.openapitools.client.model.GetWirelessGatewayTaskDefinitionResponse;
import org.openapitools.client.model.GetWirelessGatewayTaskResponse;
import org.openapitools.client.model.ListDestinationsResponse;
import org.openapitools.client.model.ListDeviceProfilesResponse;
import org.openapitools.client.model.ListDevicesForWirelessDeviceImportTaskResponse;
import org.openapitools.client.model.ListEventConfigurationsResponse;
import org.openapitools.client.model.ListFuotaTasksResponse;
import org.openapitools.client.model.ListMulticastGroupsByFuotaTaskResponse;
import org.openapitools.client.model.ListMulticastGroupsResponse;
import org.openapitools.client.model.ListNetworkAnalyzerConfigurationsResponse;
import org.openapitools.client.model.ListPartnerAccountsResponse;
import org.openapitools.client.model.ListPositionConfigurationsResponse;
import org.openapitools.client.model.ListQueuedMessagesResponse;
import org.openapitools.client.model.ListServiceProfilesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListWirelessDeviceImportTasksResponse;
import org.openapitools.client.model.ListWirelessDevicesResponse;
import org.openapitools.client.model.ListWirelessGatewayTaskDefinitionsResponse;
import org.openapitools.client.model.ListWirelessGatewaysResponse;
import org.openapitools.client.model.PutPositionConfigurationRequest;
import org.openapitools.client.model.PutResourceLogLevelRequest;
import org.openapitools.client.model.SendDataToMulticastGroupRequest;
import org.openapitools.client.model.SendDataToMulticastGroupResponse;
import org.openapitools.client.model.SendDataToWirelessDeviceRequest;
import org.openapitools.client.model.SendDataToWirelessDeviceResponse;
import org.openapitools.client.model.StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest;
import org.openapitools.client.model.StartFuotaTaskRequest;
import org.openapitools.client.model.StartMulticastGroupSessionRequest;
import org.openapitools.client.model.StartSingleWirelessDeviceImportTaskRequest;
import org.openapitools.client.model.StartSingleWirelessDeviceImportTaskResponse;
import org.openapitools.client.model.StartWirelessDeviceImportTaskRequest;
import org.openapitools.client.model.StartWirelessDeviceImportTaskResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TestWirelessDeviceResponse;
import org.openapitools.client.model.UpdateDestinationRequest;
import org.openapitools.client.model.UpdateEventConfigurationByResourceTypesRequest;
import org.openapitools.client.model.UpdateFuotaTaskRequest;
import org.openapitools.client.model.UpdateLogLevelsByResourceTypesRequest;
import org.openapitools.client.model.UpdateMulticastGroupRequest;
import org.openapitools.client.model.UpdateNetworkAnalyzerConfigurationRequest;
import org.openapitools.client.model.UpdatePartnerAccountRequest;
import org.openapitools.client.model.UpdatePositionRequest;
import org.openapitools.client.model.UpdateResourceEventConfigurationRequest;
import org.openapitools.client.model.UpdateResourcePositionRequest;
import org.openapitools.client.model.UpdateWirelessDeviceImportTaskRequest;
import org.openapitools.client.model.UpdateWirelessDeviceRequest;
import org.openapitools.client.model.UpdateWirelessGatewayRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates a partner account with your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateAwsAccountWithPartnerAccountTest() throws ApiException {
        AssociateAwsAccountWithPartnerAccountRequest associateAwsAccountWithPartnerAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateAwsAccountWithPartnerAccountResponse response = api.associateAwsAccountWithPartnerAccount(associateAwsAccountWithPartnerAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associate a multicast group with a FUOTA task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateMulticastGroupWithFuotaTaskTest() throws ApiException {
        String id = null;
        AssociateMulticastGroupWithFuotaTaskRequest associateMulticastGroupWithFuotaTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateMulticastGroupWithFuotaTask(id, associateMulticastGroupWithFuotaTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associate a wireless device with a FUOTA task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateWirelessDeviceWithFuotaTaskTest() throws ApiException {
        String id = null;
        AssociateWirelessDeviceWithFuotaTaskRequest associateWirelessDeviceWithFuotaTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateWirelessDeviceWithFuotaTask(id, associateWirelessDeviceWithFuotaTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a wireless device with a multicast group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateWirelessDeviceWithMulticastGroupTest() throws ApiException {
        String id = null;
        AssociateWirelessDeviceWithFuotaTaskRequest associateWirelessDeviceWithFuotaTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateWirelessDeviceWithMulticastGroup(id, associateWirelessDeviceWithFuotaTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a wireless device with a thing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateWirelessDeviceWithThingTest() throws ApiException {
        String id = null;
        AssociateWirelessDeviceWithThingRequest associateWirelessDeviceWithThingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateWirelessDeviceWithThing(id, associateWirelessDeviceWithThingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a wireless gateway with a certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateWirelessGatewayWithCertificateTest() throws ApiException {
        String id = null;
        AssociateWirelessGatewayWithCertificateRequest associateWirelessGatewayWithCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateWirelessGatewayWithCertificateResponse response = api.associateWirelessGatewayWithCertificate(id, associateWirelessGatewayWithCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates a wireless gateway with a thing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateWirelessGatewayWithThingTest() throws ApiException {
        String id = null;
        AssociateWirelessGatewayWithThingRequest associateWirelessGatewayWithThingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateWirelessGatewayWithThing(id, associateWirelessGatewayWithThingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels an existing multicast group session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelMulticastGroupSessionTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelMulticastGroupSession(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new destination that maps a device message to an AWS IoT rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDestinationTest() throws ApiException {
        CreateDestinationRequest createDestinationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDestinationResponse response = api.createDestination(createDestinationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new device profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceProfileTest() throws ApiException {
        CreateDeviceProfileRequest createDeviceProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDeviceProfileResponse response = api.createDeviceProfile(createDeviceProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a FUOTA task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFuotaTaskTest() throws ApiException {
        CreateFuotaTaskRequest createFuotaTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFuotaTaskResponse response = api.createFuotaTask(createFuotaTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a multicast group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMulticastGroupTest() throws ApiException {
        CreateMulticastGroupRequest createMulticastGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMulticastGroupResponse response = api.createMulticastGroup(createMulticastGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new network analyzer configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkAnalyzerConfigurationTest() throws ApiException {
        CreateNetworkAnalyzerConfigurationRequest createNetworkAnalyzerConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateNetworkAnalyzerConfigurationResponse response = api.createNetworkAnalyzerConfiguration(createNetworkAnalyzerConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new service profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceProfileTest() throws ApiException {
        CreateServiceProfileRequest createServiceProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServiceProfileResponse response = api.createServiceProfile(createServiceProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provisions a wireless device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWirelessDeviceTest() throws ApiException {
        CreateWirelessDeviceRequest createWirelessDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWirelessDeviceResponse response = api.createWirelessDevice(createWirelessDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provisions a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWirelessGatewayTest() throws ApiException {
        CreateWirelessGatewayRequest createWirelessGatewayRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWirelessGatewayResponse response = api.createWirelessGateway(createWirelessGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a task for a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWirelessGatewayTaskTest() throws ApiException {
        String id = null;
        CreateWirelessGatewayTaskRequest createWirelessGatewayTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWirelessGatewayTaskResponse response = api.createWirelessGatewayTask(id, createWirelessGatewayTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a gateway task definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWirelessGatewayTaskDefinitionTest() throws ApiException {
        CreateWirelessGatewayTaskDefinitionRequest createWirelessGatewayTaskDefinitionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWirelessGatewayTaskDefinitionResponse response = api.createWirelessGatewayTaskDefinition(createWirelessGatewayTaskDefinitionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDestinationTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDestination(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a device profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceProfileTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDeviceProfile(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a FUOTA task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFuotaTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFuotaTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a multicast group if it is not in use by a fuota task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMulticastGroupTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMulticastGroup(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a network analyzer configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkAnalyzerConfigurationTest() throws ApiException {
        String configurationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteNetworkAnalyzerConfiguration(configurationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove queued messages from the downlink queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQueuedMessagesTest() throws ApiException {
        String id = null;
        String messageId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String wirelessDeviceType = null;
        Object response = api.deleteQueuedMessages(id, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, wirelessDeviceType);
        // TODO: test validations
    }

    /**
     * Deletes a service profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceProfileTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteServiceProfile(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a wireless device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWirelessDeviceTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWirelessDevice(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an import task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWirelessDeviceImportTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWirelessDeviceImportTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWirelessGatewayTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWirelessGateway(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a wireless gateway task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWirelessGatewayTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWirelessGatewayTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWirelessGatewayTaskDefinitionTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWirelessGatewayTaskDefinition(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deregister a wireless device from AWS IoT Wireless.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterWirelessDeviceTest() throws ApiException {
        String identifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String wirelessDeviceType = null;
        Object response = api.deregisterWirelessDevice(identifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, wirelessDeviceType);
        // TODO: test validations
    }

    /**
     * Disassociates your AWS account from a partner account. If &lt;code&gt;PartnerAccountId&lt;/code&gt; and &lt;code&gt;PartnerType&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;, disassociates your AWS account from all partner accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateAwsAccountFromPartnerAccountTest() throws ApiException {
        String partnerAccountId = null;
        String partnerType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateAwsAccountFromPartnerAccount(partnerAccountId, partnerType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a multicast group from a fuota task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateMulticastGroupFromFuotaTaskTest() throws ApiException {
        String id = null;
        String multicastGroupId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateMulticastGroupFromFuotaTask(id, multicastGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a wireless device from a FUOTA task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateWirelessDeviceFromFuotaTaskTest() throws ApiException {
        String id = null;
        String wirelessDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateWirelessDeviceFromFuotaTask(id, wirelessDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a wireless device from a multicast group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateWirelessDeviceFromMulticastGroupTest() throws ApiException {
        String id = null;
        String wirelessDeviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateWirelessDeviceFromMulticastGroup(id, wirelessDeviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a wireless device from its currently associated thing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateWirelessDeviceFromThingTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateWirelessDeviceFromThing(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a wireless gateway from its currently associated certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateWirelessGatewayFromCertificateTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateWirelessGatewayFromCertificate(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a wireless gateway from its currently associated thing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateWirelessGatewayFromThingTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateWirelessGatewayFromThing(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDestinationTest() throws ApiException {
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDestinationResponse response = api.getDestination(name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a device profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceProfileTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeviceProfileResponse response = api.getDeviceProfile(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the event configuration based on resource types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventConfigurationByResourceTypesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventConfigurationByResourceTypesResponse response = api.getEventConfigurationByResourceTypes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a FUOTA task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFuotaTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFuotaTaskResponse response = api.getFuotaTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns current default log levels or log levels by resource types. Based on resource types, log levels can be for wireless device log options or wireless gateway log options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLogLevelsByResourceTypesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLogLevelsByResourceTypesResponse response = api.getLogLevelsByResourceTypes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a multicast group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMulticastGroupTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMulticastGroupResponse response = api.getMulticastGroup(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a multicast group session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMulticastGroupSessionTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMulticastGroupSessionResponse response = api.getMulticastGroupSession(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get network analyzer configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkAnalyzerConfigurationTest() throws ApiException {
        String configurationName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNetworkAnalyzerConfigurationResponse response = api.getNetworkAnalyzerConfiguration(configurationName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a partner account. If &lt;code&gt;PartnerAccountId&lt;/code&gt; and &lt;code&gt;PartnerType&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;, returns all partner accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartnerAccountTest() throws ApiException {
        String partnerAccountId = null;
        String partnerType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPartnerAccountResponse response = api.getPartnerAccount(partnerAccountId, partnerType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Get the position information for a given resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This action is no longer supported. Calls to retrieve the position information should use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\&quot;&gt;GetResourcePosition&lt;/a&gt; API operation instead.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPositionTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPositionResponse response = api.getPosition(resourceIdentifier, resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Get position configuration for a given resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This action is no longer supported. Calls to retrieve the position configuration should use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\&quot;&gt;GetResourcePosition&lt;/a&gt; API operation instead.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPositionConfigurationTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPositionConfigurationResponse response = api.getPositionConfiguration(resourceIdentifier, resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get estimated position information as a payload in GeoJSON format. The payload measurement data is resolved using solvers that are provided by third-party vendors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPositionEstimateTest() throws ApiException {
        GetPositionEstimateRequest getPositionEstimateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPositionEstimateResponse response = api.getPositionEstimate(getPositionEstimateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the event configuration for a particular resource identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceEventConfigurationTest() throws ApiException {
        String identifier = null;
        String identifierType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String partnerType = null;
        GetResourceEventConfigurationResponse response = api.getResourceEventConfiguration(identifier, identifierType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, partnerType);
        // TODO: test validations
    }

    /**
     * Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceLogLevelTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourceLogLevelResponse response = api.getResourceLogLevel(resourceIdentifier, resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get the position information for a given wireless device or a wireless gateway resource. The position information uses the &lt;a href&#x3D;\&quot;https://gisgeography.com/wgs84-world-geodetic-system/\&quot;&gt; World Geodetic System (WGS84)&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcePositionTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourcePositionResponse response = api.getResourcePosition(resourceIdentifier, resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceEndpointTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String serviceType = null;
        GetServiceEndpointResponse response = api.getServiceEndpoint(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceType);
        // TODO: test validations
    }

    /**
     * Gets information about a service profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceProfileTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServiceProfileResponse response = api.getServiceProfile(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a wireless device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessDeviceTest() throws ApiException {
        String identifier = null;
        String identifierType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessDeviceResponse response = api.getWirelessDevice(identifier, identifierType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get information about an import task and count of device onboarding summary information for the import task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessDeviceImportTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessDeviceImportTaskResponse response = api.getWirelessDeviceImportTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets operating information about a wireless device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessDeviceStatisticsTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessDeviceStatisticsResponse response = api.getWirelessDeviceStatistics(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessGatewayTest() throws ApiException {
        String identifier = null;
        String identifierType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessGatewayResponse response = api.getWirelessGateway(identifier, identifierType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the ID of the certificate that is currently associated with a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessGatewayCertificateTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessGatewayCertificateResponse response = api.getWirelessGatewayCertificate(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the firmware version and other information about a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessGatewayFirmwareInformationTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessGatewayFirmwareInformationResponse response = api.getWirelessGatewayFirmwareInformation(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets operating information about a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessGatewayStatisticsTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessGatewayStatisticsResponse response = api.getWirelessGatewayStatistics(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a wireless gateway task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessGatewayTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessGatewayTaskResponse response = api.getWirelessGatewayTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a wireless gateway task definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWirelessGatewayTaskDefinitionTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWirelessGatewayTaskDefinitionResponse response = api.getWirelessGatewayTaskDefinition(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the destinations registered to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDestinationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListDestinationsResponse response = api.listDestinations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the device profiles registered to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeviceProfilesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String deviceProfileType = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListDeviceProfilesResponse response = api.listDeviceProfiles(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, deviceProfileType, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List the Sidewalk devices in an import task and their onboarding status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesForWirelessDeviceImportTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String status = null;
        ListDevicesForWirelessDeviceImportTaskResponse response = api.listDevicesForWirelessDeviceImportTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, status);
        // TODO: test validations
    }

    /**
     * List event configurations where at least one event topic has been enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventConfigurationsTest() throws ApiException {
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListEventConfigurationsResponse response = api.listEventConfigurations(resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the FUOTA tasks registered to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFuotaTasksTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListFuotaTasksResponse response = api.listFuotaTasks(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the multicast groups registered to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMulticastGroupsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListMulticastGroupsResponse response = api.listMulticastGroups(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List all multicast groups associated with a fuota task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMulticastGroupsByFuotaTaskTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListMulticastGroupsByFuotaTaskResponse response = api.listMulticastGroupsByFuotaTask(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the network analyzer configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkAnalyzerConfigurationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListNetworkAnalyzerConfigurationsResponse response = api.listNetworkAnalyzerConfigurations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the partner accounts associated with your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPartnerAccountsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListPartnerAccountsResponse response = api.listPartnerAccounts(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;List position configurations for a given resource, such as positioning solvers.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This action is no longer supported. Calls to retrieve position information should use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\&quot;&gt;GetResourcePosition&lt;/a&gt; API operation instead.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPositionConfigurationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String resourceType = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListPositionConfigurationsResponse response = api.listPositionConfigurations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceType, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List queued messages in the downlink queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listQueuedMessagesTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String wirelessDeviceType = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListQueuedMessagesResponse response = api.listQueuedMessages(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, wirelessDeviceType, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the service profiles registered to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceProfilesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListServiceProfilesResponse response = api.listServiceProfiles(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Lists the tags (metadata) you have assigned to the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List wireless devices that have been added to an import task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWirelessDeviceImportTasksTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListWirelessDeviceImportTasksResponse response = api.listWirelessDeviceImportTasks(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the wireless devices registered to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWirelessDevicesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String destinationName = null;
        String deviceProfileId = null;
        String serviceProfileId = null;
        String wirelessDeviceType = null;
        String fuotaTaskId = null;
        String multicastGroupId = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListWirelessDevicesResponse response = api.listWirelessDevices(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, destinationName, deviceProfileId, serviceProfileId, wirelessDeviceType, fuotaTaskId, multicastGroupId, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List the wireless gateway tasks definitions registered to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWirelessGatewayTaskDefinitionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String taskDefinitionType = null;
        ListWirelessGatewayTaskDefinitionsResponse response = api.listWirelessGatewayTaskDefinitions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, taskDefinitionType);
        // TODO: test validations
    }

    /**
     * Lists the wireless gateways registered to your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWirelessGatewaysTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListWirelessGatewaysResponse response = api.listWirelessGateways(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Put position configuration for a given resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This action is no longer supported. Calls to update the position configuration should use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\&quot;&gt;UpdateResourcePosition&lt;/a&gt; API operation instead.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPositionConfigurationTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        PutPositionConfigurationRequest putPositionConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putPositionConfiguration(resourceIdentifier, resourceType, putPositionConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway or a wireless device. A limit of 200 log level override can be set per account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourceLogLevelTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        PutResourceLogLevelRequest putResourceLogLevelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putResourceLogLevel(resourceIdentifier, resourceType, putResourceLogLevelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the log-level overrides for all resources; both wireless devices and wireless gateways.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetAllResourceLogLevelsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.resetAllResourceLogLevels(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetResourceLogLevelTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.resetResourceLogLevel(resourceIdentifier, resourceType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sends the specified data to a multicast group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendDataToMulticastGroupTest() throws ApiException {
        String id = null;
        SendDataToMulticastGroupRequest sendDataToMulticastGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendDataToMulticastGroupResponse response = api.sendDataToMulticastGroup(id, sendDataToMulticastGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sends a decrypted application data frame to a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendDataToWirelessDeviceTest() throws ApiException {
        String id = null;
        SendDataToWirelessDeviceRequest sendDataToWirelessDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendDataToWirelessDeviceResponse response = api.sendDataToWirelessDevice(id, sendDataToWirelessDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a bulk association of all qualifying wireless devices with a multicast group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBulkAssociateWirelessDeviceWithMulticastGroupTest() throws ApiException {
        String id = null;
        StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest startBulkDisassociateWirelessDeviceFromMulticastGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startBulkAssociateWirelessDeviceWithMulticastGroup(id, startBulkDisassociateWirelessDeviceFromMulticastGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a bulk disassociatin of all qualifying wireless devices from a multicast group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBulkDisassociateWirelessDeviceFromMulticastGroupTest() throws ApiException {
        String id = null;
        StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest startBulkDisassociateWirelessDeviceFromMulticastGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startBulkDisassociateWirelessDeviceFromMulticastGroup(id, startBulkDisassociateWirelessDeviceFromMulticastGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a FUOTA task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startFuotaTaskTest() throws ApiException {
        String id = null;
        StartFuotaTaskRequest startFuotaTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startFuotaTask(id, startFuotaTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a multicast group session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMulticastGroupSessionTest() throws ApiException {
        String id = null;
        StartMulticastGroupSessionRequest startMulticastGroupSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startMulticastGroupSession(id, startMulticastGroupSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start import task for a single wireless device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSingleWirelessDeviceImportTaskTest() throws ApiException {
        StartSingleWirelessDeviceImportTaskRequest startSingleWirelessDeviceImportTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartSingleWirelessDeviceImportTaskResponse response = api.startSingleWirelessDeviceImportTask(startSingleWirelessDeviceImportTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start import task for provisioning Sidewalk devices in bulk using an S3 CSV file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startWirelessDeviceImportTaskTest() throws ApiException {
        StartWirelessDeviceImportTaskRequest startWirelessDeviceImportTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartWirelessDeviceImportTaskResponse response = api.startWirelessDeviceImportTask(startWirelessDeviceImportTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a tag to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Simulates a provisioned device by sending an uplink data payload of &lt;code&gt;Hello&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testWirelessDeviceTest() throws ApiException {
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestWirelessDeviceResponse response = api.testWirelessDevice(id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates properties of a destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDestinationTest() throws ApiException {
        String name = null;
        UpdateDestinationRequest updateDestinationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDestination(name, updateDestinationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update the event configuration based on resource types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventConfigurationByResourceTypesTest() throws ApiException {
        UpdateEventConfigurationByResourceTypesRequest updateEventConfigurationByResourceTypesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateEventConfigurationByResourceTypes(updateEventConfigurationByResourceTypesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates properties of a FUOTA task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFuotaTaskTest() throws ApiException {
        String id = null;
        UpdateFuotaTaskRequest updateFuotaTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateFuotaTask(id, updateFuotaTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Set default log level, or log levels by resource types. This can be for wireless device log options or wireless gateways log options and is used to control the log messages that&#39;ll be displayed in CloudWatch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLogLevelsByResourceTypesTest() throws ApiException {
        UpdateLogLevelsByResourceTypesRequest updateLogLevelsByResourceTypesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateLogLevelsByResourceTypes(updateLogLevelsByResourceTypesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates properties of a multicast group session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMulticastGroupTest() throws ApiException {
        String id = null;
        UpdateMulticastGroupRequest updateMulticastGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateMulticastGroup(id, updateMulticastGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update network analyzer configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAnalyzerConfigurationTest() throws ApiException {
        String configurationName = null;
        UpdateNetworkAnalyzerConfigurationRequest updateNetworkAnalyzerConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateNetworkAnalyzerConfiguration(configurationName, updateNetworkAnalyzerConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates properties of a partner account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePartnerAccountTest() throws ApiException {
        String partnerAccountId = null;
        String partnerType = null;
        UpdatePartnerAccountRequest updatePartnerAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updatePartnerAccount(partnerAccountId, partnerType, updatePartnerAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update the position information of a resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This action is no longer supported. Calls to update the position information should use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\&quot;&gt;UpdateResourcePosition&lt;/a&gt; API operation instead.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePositionTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        UpdatePositionRequest updatePositionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updatePosition(resourceIdentifier, resourceType, updatePositionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update the event configuration for a particular resource identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceEventConfigurationTest() throws ApiException {
        String identifier = null;
        String identifierType = null;
        UpdateResourceEventConfigurationRequest updateResourceEventConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String partnerType = null;
        Object response = api.updateResourceEventConfiguration(identifier, identifierType, updateResourceEventConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, partnerType);
        // TODO: test validations
    }

    /**
     * Update the position information of a given wireless device or a wireless gateway resource. The position coordinates are based on the &lt;a href&#x3D;\&quot;https://gisgeography.com/wgs84-world-geodetic-system/\&quot;&gt; World Geodetic System (WGS84)&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourcePositionTest() throws ApiException {
        String resourceIdentifier = null;
        String resourceType = null;
        UpdateResourcePositionRequest updateResourcePositionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateResourcePosition(resourceIdentifier, resourceType, updateResourcePositionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates properties of a wireless device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWirelessDeviceTest() throws ApiException {
        String id = null;
        UpdateWirelessDeviceRequest updateWirelessDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateWirelessDevice(id, updateWirelessDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update an import task to add more devices to the task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWirelessDeviceImportTaskTest() throws ApiException {
        String id = null;
        UpdateWirelessDeviceImportTaskRequest updateWirelessDeviceImportTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateWirelessDeviceImportTask(id, updateWirelessDeviceImportTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates properties of a wireless gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWirelessGatewayTest() throws ApiException {
        String id = null;
        UpdateWirelessGatewayRequest updateWirelessGatewayRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateWirelessGateway(id, updateWirelessGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
