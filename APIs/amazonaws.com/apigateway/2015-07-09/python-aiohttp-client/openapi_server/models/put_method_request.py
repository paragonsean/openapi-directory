# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutMethodRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_type: str=None, authorizer_id: str=None, api_key_required: bool=None, operation_name: str=None, request_parameters: Dict[str, bool]=None, request_models: Dict[str, str]=None, request_validator_id: str=None, authorization_scopes: List[str]=None):
        """PutMethodRequest - a model defined in OpenAPI

        :param authorization_type: The authorization_type of this PutMethodRequest.
        :param authorizer_id: The authorizer_id of this PutMethodRequest.
        :param api_key_required: The api_key_required of this PutMethodRequest.
        :param operation_name: The operation_name of this PutMethodRequest.
        :param request_parameters: The request_parameters of this PutMethodRequest.
        :param request_models: The request_models of this PutMethodRequest.
        :param request_validator_id: The request_validator_id of this PutMethodRequest.
        :param authorization_scopes: The authorization_scopes of this PutMethodRequest.
        """
        self.openapi_types = {
            'authorization_type': str,
            'authorizer_id': str,
            'api_key_required': bool,
            'operation_name': str,
            'request_parameters': Dict[str, bool],
            'request_models': Dict[str, str],
            'request_validator_id': str,
            'authorization_scopes': List[str]
        }

        self.attribute_map = {
            'authorization_type': 'authorizationType',
            'authorizer_id': 'authorizerId',
            'api_key_required': 'apiKeyRequired',
            'operation_name': 'operationName',
            'request_parameters': 'requestParameters',
            'request_models': 'requestModels',
            'request_validator_id': 'requestValidatorId',
            'authorization_scopes': 'authorizationScopes'
        }

        self._authorization_type = authorization_type
        self._authorizer_id = authorizer_id
        self._api_key_required = api_key_required
        self._operation_name = operation_name
        self._request_parameters = request_parameters
        self._request_models = request_models
        self._request_validator_id = request_validator_id
        self._authorization_scopes = authorization_scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutMethodRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutMethod_request of this PutMethodRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_type(self):
        """Gets the authorization_type of this PutMethodRequest.

        The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.

        :return: The authorization_type of this PutMethodRequest.
        :rtype: str
        """
        return self._authorization_type

    @authorization_type.setter
    def authorization_type(self, authorization_type):
        """Sets the authorization_type of this PutMethodRequest.

        The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.

        :param authorization_type: The authorization_type of this PutMethodRequest.
        :type authorization_type: str
        """
        if authorization_type is None:
            raise ValueError("Invalid value for `authorization_type`, must not be `None`")

        self._authorization_type = authorization_type

    @property
    def authorizer_id(self):
        """Gets the authorizer_id of this PutMethodRequest.

        Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.

        :return: The authorizer_id of this PutMethodRequest.
        :rtype: str
        """
        return self._authorizer_id

    @authorizer_id.setter
    def authorizer_id(self, authorizer_id):
        """Sets the authorizer_id of this PutMethodRequest.

        Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.

        :param authorizer_id: The authorizer_id of this PutMethodRequest.
        :type authorizer_id: str
        """

        self._authorizer_id = authorizer_id

    @property
    def api_key_required(self):
        """Gets the api_key_required of this PutMethodRequest.

        Specifies whether the method required a valid ApiKey.

        :return: The api_key_required of this PutMethodRequest.
        :rtype: bool
        """
        return self._api_key_required

    @api_key_required.setter
    def api_key_required(self, api_key_required):
        """Sets the api_key_required of this PutMethodRequest.

        Specifies whether the method required a valid ApiKey.

        :param api_key_required: The api_key_required of this PutMethodRequest.
        :type api_key_required: bool
        """

        self._api_key_required = api_key_required

    @property
    def operation_name(self):
        """Gets the operation_name of this PutMethodRequest.

        A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.

        :return: The operation_name of this PutMethodRequest.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this PutMethodRequest.

        A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.

        :param operation_name: The operation_name of this PutMethodRequest.
        :type operation_name: str
        """

        self._operation_name = operation_name

    @property
    def request_parameters(self):
        """Gets the request_parameters of this PutMethodRequest.

        A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.

        :return: The request_parameters of this PutMethodRequest.
        :rtype: Dict[str, bool]
        """
        return self._request_parameters

    @request_parameters.setter
    def request_parameters(self, request_parameters):
        """Sets the request_parameters of this PutMethodRequest.

        A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.

        :param request_parameters: The request_parameters of this PutMethodRequest.
        :type request_parameters: Dict[str, bool]
        """

        self._request_parameters = request_parameters

    @property
    def request_models(self):
        """Gets the request_models of this PutMethodRequest.

        Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.

        :return: The request_models of this PutMethodRequest.
        :rtype: Dict[str, str]
        """
        return self._request_models

    @request_models.setter
    def request_models(self, request_models):
        """Sets the request_models of this PutMethodRequest.

        Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.

        :param request_models: The request_models of this PutMethodRequest.
        :type request_models: Dict[str, str]
        """

        self._request_models = request_models

    @property
    def request_validator_id(self):
        """Gets the request_validator_id of this PutMethodRequest.

        The identifier of a RequestValidator for validating the method request.

        :return: The request_validator_id of this PutMethodRequest.
        :rtype: str
        """
        return self._request_validator_id

    @request_validator_id.setter
    def request_validator_id(self, request_validator_id):
        """Sets the request_validator_id of this PutMethodRequest.

        The identifier of a RequestValidator for validating the method request.

        :param request_validator_id: The request_validator_id of this PutMethodRequest.
        :type request_validator_id: str
        """

        self._request_validator_id = request_validator_id

    @property
    def authorization_scopes(self):
        """Gets the authorization_scopes of this PutMethodRequest.

        A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.

        :return: The authorization_scopes of this PutMethodRequest.
        :rtype: List[str]
        """
        return self._authorization_scopes

    @authorization_scopes.setter
    def authorization_scopes(self, authorization_scopes):
        """Sets the authorization_scopes of this PutMethodRequest.

        A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.

        :param authorization_scopes: The authorization_scopes of this PutMethodRequest.
        :type authorization_scopes: List[str]
        """

        self._authorization_scopes = authorization_scopes
