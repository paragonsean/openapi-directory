# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestInvokeAuthorizerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_status: int=None, log: str=None, latency: int=None, principal_id: str=None, policy: str=None, authorization: Dict=None, claims: Dict=None):
        """TestInvokeAuthorizerResponse - a model defined in OpenAPI

        :param client_status: The client_status of this TestInvokeAuthorizerResponse.
        :param log: The log of this TestInvokeAuthorizerResponse.
        :param latency: The latency of this TestInvokeAuthorizerResponse.
        :param principal_id: The principal_id of this TestInvokeAuthorizerResponse.
        :param policy: The policy of this TestInvokeAuthorizerResponse.
        :param authorization: The authorization of this TestInvokeAuthorizerResponse.
        :param claims: The claims of this TestInvokeAuthorizerResponse.
        """
        self.openapi_types = {
            'client_status': int,
            'log': str,
            'latency': int,
            'principal_id': str,
            'policy': str,
            'authorization': Dict,
            'claims': Dict
        }

        self.attribute_map = {
            'client_status': 'clientStatus',
            'log': 'log',
            'latency': 'latency',
            'principal_id': 'principalId',
            'policy': 'policy',
            'authorization': 'authorization',
            'claims': 'claims'
        }

        self._client_status = client_status
        self._log = log
        self._latency = latency
        self._principal_id = principal_id
        self._policy = policy
        self._authorization = authorization
        self._claims = claims

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestInvokeAuthorizerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestInvokeAuthorizerResponse of this TestInvokeAuthorizerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_status(self):
        """Gets the client_status of this TestInvokeAuthorizerResponse.


        :return: The client_status of this TestInvokeAuthorizerResponse.
        :rtype: int
        """
        return self._client_status

    @client_status.setter
    def client_status(self, client_status):
        """Sets the client_status of this TestInvokeAuthorizerResponse.


        :param client_status: The client_status of this TestInvokeAuthorizerResponse.
        :type client_status: int
        """

        self._client_status = client_status

    @property
    def log(self):
        """Gets the log of this TestInvokeAuthorizerResponse.


        :return: The log of this TestInvokeAuthorizerResponse.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this TestInvokeAuthorizerResponse.


        :param log: The log of this TestInvokeAuthorizerResponse.
        :type log: str
        """

        self._log = log

    @property
    def latency(self):
        """Gets the latency of this TestInvokeAuthorizerResponse.


        :return: The latency of this TestInvokeAuthorizerResponse.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this TestInvokeAuthorizerResponse.


        :param latency: The latency of this TestInvokeAuthorizerResponse.
        :type latency: int
        """

        self._latency = latency

    @property
    def principal_id(self):
        """Gets the principal_id of this TestInvokeAuthorizerResponse.


        :return: The principal_id of this TestInvokeAuthorizerResponse.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this TestInvokeAuthorizerResponse.


        :param principal_id: The principal_id of this TestInvokeAuthorizerResponse.
        :type principal_id: str
        """

        self._principal_id = principal_id

    @property
    def policy(self):
        """Gets the policy of this TestInvokeAuthorizerResponse.


        :return: The policy of this TestInvokeAuthorizerResponse.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this TestInvokeAuthorizerResponse.


        :param policy: The policy of this TestInvokeAuthorizerResponse.
        :type policy: str
        """

        self._policy = policy

    @property
    def authorization(self):
        """Gets the authorization of this TestInvokeAuthorizerResponse.


        :return: The authorization of this TestInvokeAuthorizerResponse.
        :rtype: Dict
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this TestInvokeAuthorizerResponse.


        :param authorization: The authorization of this TestInvokeAuthorizerResponse.
        :type authorization: Dict
        """

        self._authorization = authorization

    @property
    def claims(self):
        """Gets the claims of this TestInvokeAuthorizerResponse.


        :return: The claims of this TestInvokeAuthorizerResponse.
        :rtype: Dict
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this TestInvokeAuthorizerResponse.


        :param claims: The claims of this TestInvokeAuthorizerResponse.
        :type claims: Dict
        """

        self._claims = claims
