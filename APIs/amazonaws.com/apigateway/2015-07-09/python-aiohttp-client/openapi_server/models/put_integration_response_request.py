# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutIntegrationResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, selection_pattern: str=None, response_parameters: Dict[str, str]=None, response_templates: Dict[str, str]=None, content_handling: str=None):
        """PutIntegrationResponseRequest - a model defined in OpenAPI

        :param selection_pattern: The selection_pattern of this PutIntegrationResponseRequest.
        :param response_parameters: The response_parameters of this PutIntegrationResponseRequest.
        :param response_templates: The response_templates of this PutIntegrationResponseRequest.
        :param content_handling: The content_handling of this PutIntegrationResponseRequest.
        """
        self.openapi_types = {
            'selection_pattern': str,
            'response_parameters': Dict[str, str],
            'response_templates': Dict[str, str],
            'content_handling': str
        }

        self.attribute_map = {
            'selection_pattern': 'selectionPattern',
            'response_parameters': 'responseParameters',
            'response_templates': 'responseTemplates',
            'content_handling': 'contentHandling'
        }

        self._selection_pattern = selection_pattern
        self._response_parameters = response_parameters
        self._response_templates = response_templates
        self._content_handling = content_handling

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutIntegrationResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutIntegrationResponse_request of this PutIntegrationResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def selection_pattern(self):
        """Gets the selection_pattern of this PutIntegrationResponseRequest.

        Specifies the selection pattern of a put integration response.

        :return: The selection_pattern of this PutIntegrationResponseRequest.
        :rtype: str
        """
        return self._selection_pattern

    @selection_pattern.setter
    def selection_pattern(self, selection_pattern):
        """Sets the selection_pattern of this PutIntegrationResponseRequest.

        Specifies the selection pattern of a put integration response.

        :param selection_pattern: The selection_pattern of this PutIntegrationResponseRequest.
        :type selection_pattern: str
        """

        self._selection_pattern = selection_pattern

    @property
    def response_parameters(self):
        """Gets the response_parameters of this PutIntegrationResponseRequest.

        A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.

        :return: The response_parameters of this PutIntegrationResponseRequest.
        :rtype: Dict[str, str]
        """
        return self._response_parameters

    @response_parameters.setter
    def response_parameters(self, response_parameters):
        """Sets the response_parameters of this PutIntegrationResponseRequest.

        A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.

        :param response_parameters: The response_parameters of this PutIntegrationResponseRequest.
        :type response_parameters: Dict[str, str]
        """

        self._response_parameters = response_parameters

    @property
    def response_templates(self):
        """Gets the response_templates of this PutIntegrationResponseRequest.

        Specifies a put integration response's templates.

        :return: The response_templates of this PutIntegrationResponseRequest.
        :rtype: Dict[str, str]
        """
        return self._response_templates

    @response_templates.setter
    def response_templates(self, response_templates):
        """Sets the response_templates of this PutIntegrationResponseRequest.

        Specifies a put integration response's templates.

        :param response_templates: The response_templates of this PutIntegrationResponseRequest.
        :type response_templates: Dict[str, str]
        """

        self._response_templates = response_templates

    @property
    def content_handling(self):
        """Gets the content_handling of this PutIntegrationResponseRequest.

        <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>

        :return: The content_handling of this PutIntegrationResponseRequest.
        :rtype: str
        """
        return self._content_handling

    @content_handling.setter
    def content_handling(self, content_handling):
        """Sets the content_handling of this PutIntegrationResponseRequest.

        <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>

        :param content_handling: The content_handling of this PutIntegrationResponseRequest.
        :type content_handling: str
        """
        allowed_values = ["CONVERT_TO_BINARY", "CONVERT_TO_TEXT"]  # noqa: E501
        if content_handling not in allowed_values:
            raise ValueError(
                "Invalid value for `content_handling` ({0}), must be one of {1}"
                .format(content_handling, allowed_values)
            )

        self._content_handling = content_handling
