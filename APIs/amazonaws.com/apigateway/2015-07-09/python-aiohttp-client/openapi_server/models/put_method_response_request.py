# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutMethodResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, response_parameters: Dict[str, bool]=None, response_models: Dict[str, str]=None):
        """PutMethodResponseRequest - a model defined in OpenAPI

        :param response_parameters: The response_parameters of this PutMethodResponseRequest.
        :param response_models: The response_models of this PutMethodResponseRequest.
        """
        self.openapi_types = {
            'response_parameters': Dict[str, bool],
            'response_models': Dict[str, str]
        }

        self.attribute_map = {
            'response_parameters': 'responseParameters',
            'response_models': 'responseModels'
        }

        self._response_parameters = response_parameters
        self._response_models = response_models

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutMethodResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutMethodResponse_request of this PutMethodResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def response_parameters(self):
        """Gets the response_parameters of this PutMethodResponseRequest.

        A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)

        :return: The response_parameters of this PutMethodResponseRequest.
        :rtype: Dict[str, bool]
        """
        return self._response_parameters

    @response_parameters.setter
    def response_parameters(self, response_parameters):
        """Sets the response_parameters of this PutMethodResponseRequest.

        A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)

        :param response_parameters: The response_parameters of this PutMethodResponseRequest.
        :type response_parameters: Dict[str, bool]
        """

        self._response_parameters = response_parameters

    @property
    def response_models(self):
        """Gets the response_models of this PutMethodResponseRequest.

        Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.

        :return: The response_models of this PutMethodResponseRequest.
        :rtype: Dict[str, str]
        """
        return self._response_models

    @response_models.setter
    def response_models(self, response_models):
        """Sets the response_models of this PutMethodResponseRequest.

        Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.

        :param response_models: The response_models of this PutMethodResponseRequest.
        :type response_models: Dict[str, str]
        """

        self._response_models = response_models
