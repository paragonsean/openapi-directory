# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateBasePathMappingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_path: str=None, rest_api_id: str=None, stage: str=None):
        """CreateBasePathMappingRequest - a model defined in OpenAPI

        :param base_path: The base_path of this CreateBasePathMappingRequest.
        :param rest_api_id: The rest_api_id of this CreateBasePathMappingRequest.
        :param stage: The stage of this CreateBasePathMappingRequest.
        """
        self.openapi_types = {
            'base_path': str,
            'rest_api_id': str,
            'stage': str
        }

        self.attribute_map = {
            'base_path': 'basePath',
            'rest_api_id': 'restApiId',
            'stage': 'stage'
        }

        self._base_path = base_path
        self._rest_api_id = rest_api_id
        self._stage = stage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBasePathMappingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBasePathMapping_request of this CreateBasePathMappingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_path(self):
        """Gets the base_path of this CreateBasePathMappingRequest.

        The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.

        :return: The base_path of this CreateBasePathMappingRequest.
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this CreateBasePathMappingRequest.

        The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.

        :param base_path: The base_path of this CreateBasePathMappingRequest.
        :type base_path: str
        """

        self._base_path = base_path

    @property
    def rest_api_id(self):
        """Gets the rest_api_id of this CreateBasePathMappingRequest.

        The string identifier of the associated RestApi.

        :return: The rest_api_id of this CreateBasePathMappingRequest.
        :rtype: str
        """
        return self._rest_api_id

    @rest_api_id.setter
    def rest_api_id(self, rest_api_id):
        """Sets the rest_api_id of this CreateBasePathMappingRequest.

        The string identifier of the associated RestApi.

        :param rest_api_id: The rest_api_id of this CreateBasePathMappingRequest.
        :type rest_api_id: str
        """
        if rest_api_id is None:
            raise ValueError("Invalid value for `rest_api_id`, must not be `None`")

        self._rest_api_id = rest_api_id

    @property
    def stage(self):
        """Gets the stage of this CreateBasePathMappingRequest.

        The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.

        :return: The stage of this CreateBasePathMappingRequest.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this CreateBasePathMappingRequest.

        The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.

        :param stage: The stage of this CreateBasePathMappingRequest.
        :type stage: str
        """

        self._stage = stage
