# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.documentation_part_location import DocumentationPartLocation
from openapi_server import util


class DocumentationPart(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, location: DocumentationPartLocation=None, properties: object=None):
        """DocumentationPart - a model defined in OpenAPI

        :param id: The id of this DocumentationPart.
        :param location: The location of this DocumentationPart.
        :param properties: The properties of this DocumentationPart.
        """
        self.openapi_types = {
            'id': str,
            'location': DocumentationPartLocation,
            'properties': object
        }

        self.attribute_map = {
            'id': 'id',
            'location': 'location',
            'properties': 'properties'
        }

        self._id = id
        self._location = location
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentationPart':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentationPart of this DocumentationPart.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DocumentationPart.


        :return: The id of this DocumentationPart.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentationPart.


        :param id: The id of this DocumentationPart.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this DocumentationPart.


        :return: The location of this DocumentationPart.
        :rtype: DocumentationPartLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DocumentationPart.


        :param location: The location of this DocumentationPart.
        :type location: DocumentationPartLocation
        """

        self._location = location

    @property
    def properties(self):
        """Gets the properties of this DocumentationPart.

        A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>\"{ \\\"description\\\": \\\"The API does ...\\\" }\"</code>. Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.

        :return: The properties of this DocumentationPart.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this DocumentationPart.

        A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>\"{ \\\"description\\\": \\\"The API does ...\\\" }\"</code>. Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.

        :param properties: The properties of this DocumentationPart.
        :type properties: object
        """

        self._properties = properties
