# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unauthorized_cache_control_header_strategy import UnauthorizedCacheControlHeaderStrategy
from openapi_server import util


class MethodSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metrics_enabled: bool=None, logging_level: str=None, data_trace_enabled: bool=None, throttling_burst_limit: int=None, throttling_rate_limit: float=None, caching_enabled: bool=None, cache_ttl_in_seconds: int=None, cache_data_encrypted: bool=None, require_authorization_for_cache_control: bool=None, unauthorized_cache_control_header_strategy: UnauthorizedCacheControlHeaderStrategy=None):
        """MethodSetting - a model defined in OpenAPI

        :param metrics_enabled: The metrics_enabled of this MethodSetting.
        :param logging_level: The logging_level of this MethodSetting.
        :param data_trace_enabled: The data_trace_enabled of this MethodSetting.
        :param throttling_burst_limit: The throttling_burst_limit of this MethodSetting.
        :param throttling_rate_limit: The throttling_rate_limit of this MethodSetting.
        :param caching_enabled: The caching_enabled of this MethodSetting.
        :param cache_ttl_in_seconds: The cache_ttl_in_seconds of this MethodSetting.
        :param cache_data_encrypted: The cache_data_encrypted of this MethodSetting.
        :param require_authorization_for_cache_control: The require_authorization_for_cache_control of this MethodSetting.
        :param unauthorized_cache_control_header_strategy: The unauthorized_cache_control_header_strategy of this MethodSetting.
        """
        self.openapi_types = {
            'metrics_enabled': bool,
            'logging_level': str,
            'data_trace_enabled': bool,
            'throttling_burst_limit': int,
            'throttling_rate_limit': float,
            'caching_enabled': bool,
            'cache_ttl_in_seconds': int,
            'cache_data_encrypted': bool,
            'require_authorization_for_cache_control': bool,
            'unauthorized_cache_control_header_strategy': UnauthorizedCacheControlHeaderStrategy
        }

        self.attribute_map = {
            'metrics_enabled': 'metricsEnabled',
            'logging_level': 'loggingLevel',
            'data_trace_enabled': 'dataTraceEnabled',
            'throttling_burst_limit': 'throttlingBurstLimit',
            'throttling_rate_limit': 'throttlingRateLimit',
            'caching_enabled': 'cachingEnabled',
            'cache_ttl_in_seconds': 'cacheTtlInSeconds',
            'cache_data_encrypted': 'cacheDataEncrypted',
            'require_authorization_for_cache_control': 'requireAuthorizationForCacheControl',
            'unauthorized_cache_control_header_strategy': 'unauthorizedCacheControlHeaderStrategy'
        }

        self._metrics_enabled = metrics_enabled
        self._logging_level = logging_level
        self._data_trace_enabled = data_trace_enabled
        self._throttling_burst_limit = throttling_burst_limit
        self._throttling_rate_limit = throttling_rate_limit
        self._caching_enabled = caching_enabled
        self._cache_ttl_in_seconds = cache_ttl_in_seconds
        self._cache_data_encrypted = cache_data_encrypted
        self._require_authorization_for_cache_control = require_authorization_for_cache_control
        self._unauthorized_cache_control_header_strategy = unauthorized_cache_control_header_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MethodSetting of this MethodSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metrics_enabled(self):
        """Gets the metrics_enabled of this MethodSetting.


        :return: The metrics_enabled of this MethodSetting.
        :rtype: bool
        """
        return self._metrics_enabled

    @metrics_enabled.setter
    def metrics_enabled(self, metrics_enabled):
        """Sets the metrics_enabled of this MethodSetting.


        :param metrics_enabled: The metrics_enabled of this MethodSetting.
        :type metrics_enabled: bool
        """

        self._metrics_enabled = metrics_enabled

    @property
    def logging_level(self):
        """Gets the logging_level of this MethodSetting.


        :return: The logging_level of this MethodSetting.
        :rtype: str
        """
        return self._logging_level

    @logging_level.setter
    def logging_level(self, logging_level):
        """Sets the logging_level of this MethodSetting.


        :param logging_level: The logging_level of this MethodSetting.
        :type logging_level: str
        """

        self._logging_level = logging_level

    @property
    def data_trace_enabled(self):
        """Gets the data_trace_enabled of this MethodSetting.


        :return: The data_trace_enabled of this MethodSetting.
        :rtype: bool
        """
        return self._data_trace_enabled

    @data_trace_enabled.setter
    def data_trace_enabled(self, data_trace_enabled):
        """Sets the data_trace_enabled of this MethodSetting.


        :param data_trace_enabled: The data_trace_enabled of this MethodSetting.
        :type data_trace_enabled: bool
        """

        self._data_trace_enabled = data_trace_enabled

    @property
    def throttling_burst_limit(self):
        """Gets the throttling_burst_limit of this MethodSetting.


        :return: The throttling_burst_limit of this MethodSetting.
        :rtype: int
        """
        return self._throttling_burst_limit

    @throttling_burst_limit.setter
    def throttling_burst_limit(self, throttling_burst_limit):
        """Sets the throttling_burst_limit of this MethodSetting.


        :param throttling_burst_limit: The throttling_burst_limit of this MethodSetting.
        :type throttling_burst_limit: int
        """

        self._throttling_burst_limit = throttling_burst_limit

    @property
    def throttling_rate_limit(self):
        """Gets the throttling_rate_limit of this MethodSetting.


        :return: The throttling_rate_limit of this MethodSetting.
        :rtype: float
        """
        return self._throttling_rate_limit

    @throttling_rate_limit.setter
    def throttling_rate_limit(self, throttling_rate_limit):
        """Sets the throttling_rate_limit of this MethodSetting.


        :param throttling_rate_limit: The throttling_rate_limit of this MethodSetting.
        :type throttling_rate_limit: float
        """

        self._throttling_rate_limit = throttling_rate_limit

    @property
    def caching_enabled(self):
        """Gets the caching_enabled of this MethodSetting.


        :return: The caching_enabled of this MethodSetting.
        :rtype: bool
        """
        return self._caching_enabled

    @caching_enabled.setter
    def caching_enabled(self, caching_enabled):
        """Sets the caching_enabled of this MethodSetting.


        :param caching_enabled: The caching_enabled of this MethodSetting.
        :type caching_enabled: bool
        """

        self._caching_enabled = caching_enabled

    @property
    def cache_ttl_in_seconds(self):
        """Gets the cache_ttl_in_seconds of this MethodSetting.


        :return: The cache_ttl_in_seconds of this MethodSetting.
        :rtype: int
        """
        return self._cache_ttl_in_seconds

    @cache_ttl_in_seconds.setter
    def cache_ttl_in_seconds(self, cache_ttl_in_seconds):
        """Sets the cache_ttl_in_seconds of this MethodSetting.


        :param cache_ttl_in_seconds: The cache_ttl_in_seconds of this MethodSetting.
        :type cache_ttl_in_seconds: int
        """

        self._cache_ttl_in_seconds = cache_ttl_in_seconds

    @property
    def cache_data_encrypted(self):
        """Gets the cache_data_encrypted of this MethodSetting.


        :return: The cache_data_encrypted of this MethodSetting.
        :rtype: bool
        """
        return self._cache_data_encrypted

    @cache_data_encrypted.setter
    def cache_data_encrypted(self, cache_data_encrypted):
        """Sets the cache_data_encrypted of this MethodSetting.


        :param cache_data_encrypted: The cache_data_encrypted of this MethodSetting.
        :type cache_data_encrypted: bool
        """

        self._cache_data_encrypted = cache_data_encrypted

    @property
    def require_authorization_for_cache_control(self):
        """Gets the require_authorization_for_cache_control of this MethodSetting.


        :return: The require_authorization_for_cache_control of this MethodSetting.
        :rtype: bool
        """
        return self._require_authorization_for_cache_control

    @require_authorization_for_cache_control.setter
    def require_authorization_for_cache_control(self, require_authorization_for_cache_control):
        """Sets the require_authorization_for_cache_control of this MethodSetting.


        :param require_authorization_for_cache_control: The require_authorization_for_cache_control of this MethodSetting.
        :type require_authorization_for_cache_control: bool
        """

        self._require_authorization_for_cache_control = require_authorization_for_cache_control

    @property
    def unauthorized_cache_control_header_strategy(self):
        """Gets the unauthorized_cache_control_header_strategy of this MethodSetting.


        :return: The unauthorized_cache_control_header_strategy of this MethodSetting.
        :rtype: UnauthorizedCacheControlHeaderStrategy
        """
        return self._unauthorized_cache_control_header_strategy

    @unauthorized_cache_control_header_strategy.setter
    def unauthorized_cache_control_header_strategy(self, unauthorized_cache_control_header_strategy):
        """Sets the unauthorized_cache_control_header_strategy of this MethodSetting.


        :param unauthorized_cache_control_header_strategy: The unauthorized_cache_control_header_strategy of this MethodSetting.
        :type unauthorized_cache_control_header_strategy: UnauthorizedCacheControlHeaderStrategy
        """

        self._unauthorized_cache_control_header_strategy = unauthorized_cache_control_header_strategy
