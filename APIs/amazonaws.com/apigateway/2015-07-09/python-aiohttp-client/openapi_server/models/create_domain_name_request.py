# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_domain_name_request_endpoint_configuration import CreateDomainNameRequestEndpointConfiguration
from openapi_server.models.create_domain_name_request_mutual_tls_authentication import CreateDomainNameRequestMutualTlsAuthentication
from openapi_server import util


class CreateDomainNameRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, certificate_name: str=None, certificate_body: str=None, certificate_private_key: str=None, certificate_chain: str=None, certificate_arn: str=None, regional_certificate_name: str=None, regional_certificate_arn: str=None, endpoint_configuration: CreateDomainNameRequestEndpointConfiguration=None, tags: Dict[str, str]=None, security_policy: str=None, mutual_tls_authentication: CreateDomainNameRequestMutualTlsAuthentication=None, ownership_verification_certificate_arn: str=None):
        """CreateDomainNameRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this CreateDomainNameRequest.
        :param certificate_name: The certificate_name of this CreateDomainNameRequest.
        :param certificate_body: The certificate_body of this CreateDomainNameRequest.
        :param certificate_private_key: The certificate_private_key of this CreateDomainNameRequest.
        :param certificate_chain: The certificate_chain of this CreateDomainNameRequest.
        :param certificate_arn: The certificate_arn of this CreateDomainNameRequest.
        :param regional_certificate_name: The regional_certificate_name of this CreateDomainNameRequest.
        :param regional_certificate_arn: The regional_certificate_arn of this CreateDomainNameRequest.
        :param endpoint_configuration: The endpoint_configuration of this CreateDomainNameRequest.
        :param tags: The tags of this CreateDomainNameRequest.
        :param security_policy: The security_policy of this CreateDomainNameRequest.
        :param mutual_tls_authentication: The mutual_tls_authentication of this CreateDomainNameRequest.
        :param ownership_verification_certificate_arn: The ownership_verification_certificate_arn of this CreateDomainNameRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'certificate_name': str,
            'certificate_body': str,
            'certificate_private_key': str,
            'certificate_chain': str,
            'certificate_arn': str,
            'regional_certificate_name': str,
            'regional_certificate_arn': str,
            'endpoint_configuration': CreateDomainNameRequestEndpointConfiguration,
            'tags': Dict[str, str],
            'security_policy': str,
            'mutual_tls_authentication': CreateDomainNameRequestMutualTlsAuthentication,
            'ownership_verification_certificate_arn': str
        }

        self.attribute_map = {
            'domain_name': 'domainName',
            'certificate_name': 'certificateName',
            'certificate_body': 'certificateBody',
            'certificate_private_key': 'certificatePrivateKey',
            'certificate_chain': 'certificateChain',
            'certificate_arn': 'certificateArn',
            'regional_certificate_name': 'regionalCertificateName',
            'regional_certificate_arn': 'regionalCertificateArn',
            'endpoint_configuration': 'endpointConfiguration',
            'tags': 'tags',
            'security_policy': 'securityPolicy',
            'mutual_tls_authentication': 'mutualTlsAuthentication',
            'ownership_verification_certificate_arn': 'ownershipVerificationCertificateArn'
        }

        self._domain_name = domain_name
        self._certificate_name = certificate_name
        self._certificate_body = certificate_body
        self._certificate_private_key = certificate_private_key
        self._certificate_chain = certificate_chain
        self._certificate_arn = certificate_arn
        self._regional_certificate_name = regional_certificate_name
        self._regional_certificate_arn = regional_certificate_arn
        self._endpoint_configuration = endpoint_configuration
        self._tags = tags
        self._security_policy = security_policy
        self._mutual_tls_authentication = mutual_tls_authentication
        self._ownership_verification_certificate_arn = ownership_verification_certificate_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDomainNameRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDomainName_request of this CreateDomainNameRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this CreateDomainNameRequest.

        The name of the DomainName resource.

        :return: The domain_name of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CreateDomainNameRequest.

        The name of the DomainName resource.

        :param domain_name: The domain_name of this CreateDomainNameRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def certificate_name(self):
        """Gets the certificate_name of this CreateDomainNameRequest.

        The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.

        :return: The certificate_name of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._certificate_name

    @certificate_name.setter
    def certificate_name(self, certificate_name):
        """Sets the certificate_name of this CreateDomainNameRequest.

        The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.

        :param certificate_name: The certificate_name of this CreateDomainNameRequest.
        :type certificate_name: str
        """

        self._certificate_name = certificate_name

    @property
    def certificate_body(self):
        """Gets the certificate_body of this CreateDomainNameRequest.

        [Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.

        :return: The certificate_body of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._certificate_body

    @certificate_body.setter
    def certificate_body(self, certificate_body):
        """Sets the certificate_body of this CreateDomainNameRequest.

        [Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.

        :param certificate_body: The certificate_body of this CreateDomainNameRequest.
        :type certificate_body: str
        """

        self._certificate_body = certificate_body

    @property
    def certificate_private_key(self):
        """Gets the certificate_private_key of this CreateDomainNameRequest.

        [Deprecated] Your edge-optimized endpoint's domain name certificate's private key.

        :return: The certificate_private_key of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._certificate_private_key

    @certificate_private_key.setter
    def certificate_private_key(self, certificate_private_key):
        """Sets the certificate_private_key of this CreateDomainNameRequest.

        [Deprecated] Your edge-optimized endpoint's domain name certificate's private key.

        :param certificate_private_key: The certificate_private_key of this CreateDomainNameRequest.
        :type certificate_private_key: str
        """

        self._certificate_private_key = certificate_private_key

    @property
    def certificate_chain(self):
        """Gets the certificate_chain of this CreateDomainNameRequest.

        [Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.

        :return: The certificate_chain of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._certificate_chain

    @certificate_chain.setter
    def certificate_chain(self, certificate_chain):
        """Sets the certificate_chain of this CreateDomainNameRequest.

        [Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.

        :param certificate_chain: The certificate_chain of this CreateDomainNameRequest.
        :type certificate_chain: str
        """

        self._certificate_chain = certificate_chain

    @property
    def certificate_arn(self):
        """Gets the certificate_arn of this CreateDomainNameRequest.

        The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.

        :return: The certificate_arn of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._certificate_arn

    @certificate_arn.setter
    def certificate_arn(self, certificate_arn):
        """Sets the certificate_arn of this CreateDomainNameRequest.

        The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.

        :param certificate_arn: The certificate_arn of this CreateDomainNameRequest.
        :type certificate_arn: str
        """

        self._certificate_arn = certificate_arn

    @property
    def regional_certificate_name(self):
        """Gets the regional_certificate_name of this CreateDomainNameRequest.

        The user-friendly name of the certificate that will be used by regional endpoint for this domain name.

        :return: The regional_certificate_name of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._regional_certificate_name

    @regional_certificate_name.setter
    def regional_certificate_name(self, regional_certificate_name):
        """Sets the regional_certificate_name of this CreateDomainNameRequest.

        The user-friendly name of the certificate that will be used by regional endpoint for this domain name.

        :param regional_certificate_name: The regional_certificate_name of this CreateDomainNameRequest.
        :type regional_certificate_name: str
        """

        self._regional_certificate_name = regional_certificate_name

    @property
    def regional_certificate_arn(self):
        """Gets the regional_certificate_arn of this CreateDomainNameRequest.

        The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.

        :return: The regional_certificate_arn of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._regional_certificate_arn

    @regional_certificate_arn.setter
    def regional_certificate_arn(self, regional_certificate_arn):
        """Sets the regional_certificate_arn of this CreateDomainNameRequest.

        The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.

        :param regional_certificate_arn: The regional_certificate_arn of this CreateDomainNameRequest.
        :type regional_certificate_arn: str
        """

        self._regional_certificate_arn = regional_certificate_arn

    @property
    def endpoint_configuration(self):
        """Gets the endpoint_configuration of this CreateDomainNameRequest.


        :return: The endpoint_configuration of this CreateDomainNameRequest.
        :rtype: CreateDomainNameRequestEndpointConfiguration
        """
        return self._endpoint_configuration

    @endpoint_configuration.setter
    def endpoint_configuration(self, endpoint_configuration):
        """Sets the endpoint_configuration of this CreateDomainNameRequest.


        :param endpoint_configuration: The endpoint_configuration of this CreateDomainNameRequest.
        :type endpoint_configuration: CreateDomainNameRequestEndpointConfiguration
        """

        self._endpoint_configuration = endpoint_configuration

    @property
    def tags(self):
        """Gets the tags of this CreateDomainNameRequest.

        The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.

        :return: The tags of this CreateDomainNameRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDomainNameRequest.

        The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.

        :param tags: The tags of this CreateDomainNameRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def security_policy(self):
        """Gets the security_policy of this CreateDomainNameRequest.

        The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.

        :return: The security_policy of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._security_policy

    @security_policy.setter
    def security_policy(self, security_policy):
        """Sets the security_policy of this CreateDomainNameRequest.

        The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.

        :param security_policy: The security_policy of this CreateDomainNameRequest.
        :type security_policy: str
        """
        allowed_values = ["TLS_1_0", "TLS_1_2"]  # noqa: E501
        if security_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `security_policy` ({0}), must be one of {1}"
                .format(security_policy, allowed_values)
            )

        self._security_policy = security_policy

    @property
    def mutual_tls_authentication(self):
        """Gets the mutual_tls_authentication of this CreateDomainNameRequest.


        :return: The mutual_tls_authentication of this CreateDomainNameRequest.
        :rtype: CreateDomainNameRequestMutualTlsAuthentication
        """
        return self._mutual_tls_authentication

    @mutual_tls_authentication.setter
    def mutual_tls_authentication(self, mutual_tls_authentication):
        """Sets the mutual_tls_authentication of this CreateDomainNameRequest.


        :param mutual_tls_authentication: The mutual_tls_authentication of this CreateDomainNameRequest.
        :type mutual_tls_authentication: CreateDomainNameRequestMutualTlsAuthentication
        """

        self._mutual_tls_authentication = mutual_tls_authentication

    @property
    def ownership_verification_certificate_arn(self):
        """Gets the ownership_verification_certificate_arn of this CreateDomainNameRequest.

        The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.

        :return: The ownership_verification_certificate_arn of this CreateDomainNameRequest.
        :rtype: str
        """
        return self._ownership_verification_certificate_arn

    @ownership_verification_certificate_arn.setter
    def ownership_verification_certificate_arn(self, ownership_verification_certificate_arn):
        """Sets the ownership_verification_certificate_arn of this CreateDomainNameRequest.

        The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.

        :param ownership_verification_certificate_arn: The ownership_verification_certificate_arn of this CreateDomainNameRequest.
        :type ownership_verification_certificate_arn: str
        """

        self._ownership_verification_certificate_arn = ownership_verification_certificate_arn
