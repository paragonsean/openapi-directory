# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_type import ConnectionType
from openapi_server.models.content_handling_strategy import ContentHandlingStrategy
from openapi_server.models.integration_tls_config import IntegrationTlsConfig
from openapi_server.models.integration_type import IntegrationType
from openapi_server import util


class MethodMethodIntegration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: IntegrationType=None, http_method: str=None, uri: str=None, connection_type: ConnectionType=None, connection_id: str=None, credentials: str=None, request_parameters: Dict=None, request_templates: Dict=None, passthrough_behavior: str=None, content_handling: ContentHandlingStrategy=None, timeout_in_millis: int=None, cache_namespace: str=None, cache_key_parameters: List=None, integration_responses: Dict=None, tls_config: IntegrationTlsConfig=None):
        """MethodMethodIntegration - a model defined in OpenAPI

        :param type: The type of this MethodMethodIntegration.
        :param http_method: The http_method of this MethodMethodIntegration.
        :param uri: The uri of this MethodMethodIntegration.
        :param connection_type: The connection_type of this MethodMethodIntegration.
        :param connection_id: The connection_id of this MethodMethodIntegration.
        :param credentials: The credentials of this MethodMethodIntegration.
        :param request_parameters: The request_parameters of this MethodMethodIntegration.
        :param request_templates: The request_templates of this MethodMethodIntegration.
        :param passthrough_behavior: The passthrough_behavior of this MethodMethodIntegration.
        :param content_handling: The content_handling of this MethodMethodIntegration.
        :param timeout_in_millis: The timeout_in_millis of this MethodMethodIntegration.
        :param cache_namespace: The cache_namespace of this MethodMethodIntegration.
        :param cache_key_parameters: The cache_key_parameters of this MethodMethodIntegration.
        :param integration_responses: The integration_responses of this MethodMethodIntegration.
        :param tls_config: The tls_config of this MethodMethodIntegration.
        """
        self.openapi_types = {
            'type': IntegrationType,
            'http_method': str,
            'uri': str,
            'connection_type': ConnectionType,
            'connection_id': str,
            'credentials': str,
            'request_parameters': Dict,
            'request_templates': Dict,
            'passthrough_behavior': str,
            'content_handling': ContentHandlingStrategy,
            'timeout_in_millis': int,
            'cache_namespace': str,
            'cache_key_parameters': List,
            'integration_responses': Dict,
            'tls_config': IntegrationTlsConfig
        }

        self.attribute_map = {
            'type': 'type',
            'http_method': 'httpMethod',
            'uri': 'uri',
            'connection_type': 'connectionType',
            'connection_id': 'connectionId',
            'credentials': 'credentials',
            'request_parameters': 'requestParameters',
            'request_templates': 'requestTemplates',
            'passthrough_behavior': 'passthroughBehavior',
            'content_handling': 'contentHandling',
            'timeout_in_millis': 'timeoutInMillis',
            'cache_namespace': 'cacheNamespace',
            'cache_key_parameters': 'cacheKeyParameters',
            'integration_responses': 'integrationResponses',
            'tls_config': 'tlsConfig'
        }

        self._type = type
        self._http_method = http_method
        self._uri = uri
        self._connection_type = connection_type
        self._connection_id = connection_id
        self._credentials = credentials
        self._request_parameters = request_parameters
        self._request_templates = request_templates
        self._passthrough_behavior = passthrough_behavior
        self._content_handling = content_handling
        self._timeout_in_millis = timeout_in_millis
        self._cache_namespace = cache_namespace
        self._cache_key_parameters = cache_key_parameters
        self._integration_responses = integration_responses
        self._tls_config = tls_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MethodMethodIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Method_methodIntegration of this MethodMethodIntegration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this MethodMethodIntegration.


        :return: The type of this MethodMethodIntegration.
        :rtype: IntegrationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MethodMethodIntegration.


        :param type: The type of this MethodMethodIntegration.
        :type type: IntegrationType
        """

        self._type = type

    @property
    def http_method(self):
        """Gets the http_method of this MethodMethodIntegration.


        :return: The http_method of this MethodMethodIntegration.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this MethodMethodIntegration.


        :param http_method: The http_method of this MethodMethodIntegration.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def uri(self):
        """Gets the uri of this MethodMethodIntegration.


        :return: The uri of this MethodMethodIntegration.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this MethodMethodIntegration.


        :param uri: The uri of this MethodMethodIntegration.
        :type uri: str
        """

        self._uri = uri

    @property
    def connection_type(self):
        """Gets the connection_type of this MethodMethodIntegration.


        :return: The connection_type of this MethodMethodIntegration.
        :rtype: ConnectionType
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this MethodMethodIntegration.


        :param connection_type: The connection_type of this MethodMethodIntegration.
        :type connection_type: ConnectionType
        """

        self._connection_type = connection_type

    @property
    def connection_id(self):
        """Gets the connection_id of this MethodMethodIntegration.


        :return: The connection_id of this MethodMethodIntegration.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this MethodMethodIntegration.


        :param connection_id: The connection_id of this MethodMethodIntegration.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def credentials(self):
        """Gets the credentials of this MethodMethodIntegration.


        :return: The credentials of this MethodMethodIntegration.
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this MethodMethodIntegration.


        :param credentials: The credentials of this MethodMethodIntegration.
        :type credentials: str
        """

        self._credentials = credentials

    @property
    def request_parameters(self):
        """Gets the request_parameters of this MethodMethodIntegration.


        :return: The request_parameters of this MethodMethodIntegration.
        :rtype: Dict
        """
        return self._request_parameters

    @request_parameters.setter
    def request_parameters(self, request_parameters):
        """Sets the request_parameters of this MethodMethodIntegration.


        :param request_parameters: The request_parameters of this MethodMethodIntegration.
        :type request_parameters: Dict
        """

        self._request_parameters = request_parameters

    @property
    def request_templates(self):
        """Gets the request_templates of this MethodMethodIntegration.


        :return: The request_templates of this MethodMethodIntegration.
        :rtype: Dict
        """
        return self._request_templates

    @request_templates.setter
    def request_templates(self, request_templates):
        """Sets the request_templates of this MethodMethodIntegration.


        :param request_templates: The request_templates of this MethodMethodIntegration.
        :type request_templates: Dict
        """

        self._request_templates = request_templates

    @property
    def passthrough_behavior(self):
        """Gets the passthrough_behavior of this MethodMethodIntegration.


        :return: The passthrough_behavior of this MethodMethodIntegration.
        :rtype: str
        """
        return self._passthrough_behavior

    @passthrough_behavior.setter
    def passthrough_behavior(self, passthrough_behavior):
        """Sets the passthrough_behavior of this MethodMethodIntegration.


        :param passthrough_behavior: The passthrough_behavior of this MethodMethodIntegration.
        :type passthrough_behavior: str
        """

        self._passthrough_behavior = passthrough_behavior

    @property
    def content_handling(self):
        """Gets the content_handling of this MethodMethodIntegration.


        :return: The content_handling of this MethodMethodIntegration.
        :rtype: ContentHandlingStrategy
        """
        return self._content_handling

    @content_handling.setter
    def content_handling(self, content_handling):
        """Sets the content_handling of this MethodMethodIntegration.


        :param content_handling: The content_handling of this MethodMethodIntegration.
        :type content_handling: ContentHandlingStrategy
        """

        self._content_handling = content_handling

    @property
    def timeout_in_millis(self):
        """Gets the timeout_in_millis of this MethodMethodIntegration.


        :return: The timeout_in_millis of this MethodMethodIntegration.
        :rtype: int
        """
        return self._timeout_in_millis

    @timeout_in_millis.setter
    def timeout_in_millis(self, timeout_in_millis):
        """Sets the timeout_in_millis of this MethodMethodIntegration.


        :param timeout_in_millis: The timeout_in_millis of this MethodMethodIntegration.
        :type timeout_in_millis: int
        """

        self._timeout_in_millis = timeout_in_millis

    @property
    def cache_namespace(self):
        """Gets the cache_namespace of this MethodMethodIntegration.


        :return: The cache_namespace of this MethodMethodIntegration.
        :rtype: str
        """
        return self._cache_namespace

    @cache_namespace.setter
    def cache_namespace(self, cache_namespace):
        """Sets the cache_namespace of this MethodMethodIntegration.


        :param cache_namespace: The cache_namespace of this MethodMethodIntegration.
        :type cache_namespace: str
        """

        self._cache_namespace = cache_namespace

    @property
    def cache_key_parameters(self):
        """Gets the cache_key_parameters of this MethodMethodIntegration.


        :return: The cache_key_parameters of this MethodMethodIntegration.
        :rtype: List
        """
        return self._cache_key_parameters

    @cache_key_parameters.setter
    def cache_key_parameters(self, cache_key_parameters):
        """Sets the cache_key_parameters of this MethodMethodIntegration.


        :param cache_key_parameters: The cache_key_parameters of this MethodMethodIntegration.
        :type cache_key_parameters: List
        """

        self._cache_key_parameters = cache_key_parameters

    @property
    def integration_responses(self):
        """Gets the integration_responses of this MethodMethodIntegration.


        :return: The integration_responses of this MethodMethodIntegration.
        :rtype: Dict
        """
        return self._integration_responses

    @integration_responses.setter
    def integration_responses(self, integration_responses):
        """Sets the integration_responses of this MethodMethodIntegration.


        :param integration_responses: The integration_responses of this MethodMethodIntegration.
        :type integration_responses: Dict
        """

        self._integration_responses = integration_responses

    @property
    def tls_config(self):
        """Gets the tls_config of this MethodMethodIntegration.


        :return: The tls_config of this MethodMethodIntegration.
        :rtype: IntegrationTlsConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this MethodMethodIntegration.


        :param tls_config: The tls_config of this MethodMethodIntegration.
        :type tls_config: IntegrationTlsConfig
        """

        self._tls_config = tls_config
