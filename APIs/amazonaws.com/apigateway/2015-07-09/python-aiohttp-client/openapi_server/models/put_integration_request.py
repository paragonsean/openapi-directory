# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_integration_request_tls_config import PutIntegrationRequestTlsConfig
from openapi_server import util


class PutIntegrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, http_method: str=None, uri: str=None, connection_type: str=None, connection_id: str=None, credentials: str=None, request_parameters: Dict[str, str]=None, request_templates: Dict[str, str]=None, passthrough_behavior: str=None, cache_namespace: str=None, cache_key_parameters: List[str]=None, content_handling: str=None, timeout_in_millis: int=None, tls_config: PutIntegrationRequestTlsConfig=None):
        """PutIntegrationRequest - a model defined in OpenAPI

        :param type: The type of this PutIntegrationRequest.
        :param http_method: The http_method of this PutIntegrationRequest.
        :param uri: The uri of this PutIntegrationRequest.
        :param connection_type: The connection_type of this PutIntegrationRequest.
        :param connection_id: The connection_id of this PutIntegrationRequest.
        :param credentials: The credentials of this PutIntegrationRequest.
        :param request_parameters: The request_parameters of this PutIntegrationRequest.
        :param request_templates: The request_templates of this PutIntegrationRequest.
        :param passthrough_behavior: The passthrough_behavior of this PutIntegrationRequest.
        :param cache_namespace: The cache_namespace of this PutIntegrationRequest.
        :param cache_key_parameters: The cache_key_parameters of this PutIntegrationRequest.
        :param content_handling: The content_handling of this PutIntegrationRequest.
        :param timeout_in_millis: The timeout_in_millis of this PutIntegrationRequest.
        :param tls_config: The tls_config of this PutIntegrationRequest.
        """
        self.openapi_types = {
            'type': str,
            'http_method': str,
            'uri': str,
            'connection_type': str,
            'connection_id': str,
            'credentials': str,
            'request_parameters': Dict[str, str],
            'request_templates': Dict[str, str],
            'passthrough_behavior': str,
            'cache_namespace': str,
            'cache_key_parameters': List[str],
            'content_handling': str,
            'timeout_in_millis': int,
            'tls_config': PutIntegrationRequestTlsConfig
        }

        self.attribute_map = {
            'type': 'type',
            'http_method': 'httpMethod',
            'uri': 'uri',
            'connection_type': 'connectionType',
            'connection_id': 'connectionId',
            'credentials': 'credentials',
            'request_parameters': 'requestParameters',
            'request_templates': 'requestTemplates',
            'passthrough_behavior': 'passthroughBehavior',
            'cache_namespace': 'cacheNamespace',
            'cache_key_parameters': 'cacheKeyParameters',
            'content_handling': 'contentHandling',
            'timeout_in_millis': 'timeoutInMillis',
            'tls_config': 'tlsConfig'
        }

        self._type = type
        self._http_method = http_method
        self._uri = uri
        self._connection_type = connection_type
        self._connection_id = connection_id
        self._credentials = credentials
        self._request_parameters = request_parameters
        self._request_templates = request_templates
        self._passthrough_behavior = passthrough_behavior
        self._cache_namespace = cache_namespace
        self._cache_key_parameters = cache_key_parameters
        self._content_handling = content_handling
        self._timeout_in_millis = timeout_in_millis
        self._tls_config = tls_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutIntegrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutIntegration_request of this PutIntegrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this PutIntegrationRequest.

        The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. 

        :return: The type of this PutIntegrationRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PutIntegrationRequest.

        The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. 

        :param type: The type of this PutIntegrationRequest.
        :type type: str
        """
        allowed_values = ["HTTP", "AWS", "MOCK", "HTTP_PROXY", "AWS_PROXY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def http_method(self):
        """Gets the http_method of this PutIntegrationRequest.

        The HTTP method for the integration.

        :return: The http_method of this PutIntegrationRequest.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this PutIntegrationRequest.

        The HTTP method for the integration.

        :param http_method: The http_method of this PutIntegrationRequest.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def uri(self):
        """Gets the uri of this PutIntegrationRequest.

        Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of <code>GetObject</code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>.

        :return: The uri of this PutIntegrationRequest.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PutIntegrationRequest.

        Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of <code>GetObject</code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>.

        :param uri: The uri of this PutIntegrationRequest.
        :type uri: str
        """

        self._uri = uri

    @property
    def connection_type(self):
        """Gets the connection_type of this PutIntegrationRequest.

        The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.

        :return: The connection_type of this PutIntegrationRequest.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this PutIntegrationRequest.

        The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.

        :param connection_type: The connection_type of this PutIntegrationRequest.
        :type connection_type: str
        """
        allowed_values = ["INTERNET", "VPC_LINK"]  # noqa: E501
        if connection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def connection_id(self):
        """Gets the connection_id of this PutIntegrationRequest.

        The ID of the VpcLink used for the integration. Specify this value only if you specify <code>VPC_LINK</code> as the connection type.

        :return: The connection_id of this PutIntegrationRequest.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this PutIntegrationRequest.

        The ID of the VpcLink used for the integration. Specify this value only if you specify <code>VPC_LINK</code> as the connection type.

        :param connection_id: The connection_id of this PutIntegrationRequest.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def credentials(self):
        """Gets the credentials of this PutIntegrationRequest.

        Specifies whether credentials are required for a put integration.

        :return: The credentials of this PutIntegrationRequest.
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this PutIntegrationRequest.

        Specifies whether credentials are required for a put integration.

        :param credentials: The credentials of this PutIntegrationRequest.
        :type credentials: str
        """

        self._credentials = credentials

    @property
    def request_parameters(self):
        """Gets the request_parameters of this PutIntegrationRequest.

        A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.

        :return: The request_parameters of this PutIntegrationRequest.
        :rtype: Dict[str, str]
        """
        return self._request_parameters

    @request_parameters.setter
    def request_parameters(self, request_parameters):
        """Sets the request_parameters of this PutIntegrationRequest.

        A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.

        :param request_parameters: The request_parameters of this PutIntegrationRequest.
        :type request_parameters: Dict[str, str]
        """

        self._request_parameters = request_parameters

    @property
    def request_templates(self):
        """Gets the request_templates of this PutIntegrationRequest.

        Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.

        :return: The request_templates of this PutIntegrationRequest.
        :rtype: Dict[str, str]
        """
        return self._request_templates

    @request_templates.setter
    def request_templates(self, request_templates):
        """Sets the request_templates of this PutIntegrationRequest.

        Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.

        :param request_templates: The request_templates of this PutIntegrationRequest.
        :type request_templates: Dict[str, str]
        """

        self._request_templates = request_templates

    @property
    def passthrough_behavior(self):
        """Gets the passthrough_behavior of this PutIntegrationRequest.

        Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. 

        :return: The passthrough_behavior of this PutIntegrationRequest.
        :rtype: str
        """
        return self._passthrough_behavior

    @passthrough_behavior.setter
    def passthrough_behavior(self, passthrough_behavior):
        """Sets the passthrough_behavior of this PutIntegrationRequest.

        Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. 

        :param passthrough_behavior: The passthrough_behavior of this PutIntegrationRequest.
        :type passthrough_behavior: str
        """

        self._passthrough_behavior = passthrough_behavior

    @property
    def cache_namespace(self):
        """Gets the cache_namespace of this PutIntegrationRequest.

        Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.

        :return: The cache_namespace of this PutIntegrationRequest.
        :rtype: str
        """
        return self._cache_namespace

    @cache_namespace.setter
    def cache_namespace(self, cache_namespace):
        """Sets the cache_namespace of this PutIntegrationRequest.

        Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.

        :param cache_namespace: The cache_namespace of this PutIntegrationRequest.
        :type cache_namespace: str
        """

        self._cache_namespace = cache_namespace

    @property
    def cache_key_parameters(self):
        """Gets the cache_key_parameters of this PutIntegrationRequest.

        A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.

        :return: The cache_key_parameters of this PutIntegrationRequest.
        :rtype: List[str]
        """
        return self._cache_key_parameters

    @cache_key_parameters.setter
    def cache_key_parameters(self, cache_key_parameters):
        """Sets the cache_key_parameters of this PutIntegrationRequest.

        A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.

        :param cache_key_parameters: The cache_key_parameters of this PutIntegrationRequest.
        :type cache_key_parameters: List[str]
        """

        self._cache_key_parameters = cache_key_parameters

    @property
    def content_handling(self):
        """Gets the content_handling of this PutIntegrationRequest.

        <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>

        :return: The content_handling of this PutIntegrationRequest.
        :rtype: str
        """
        return self._content_handling

    @content_handling.setter
    def content_handling(self, content_handling):
        """Sets the content_handling of this PutIntegrationRequest.

        <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>

        :param content_handling: The content_handling of this PutIntegrationRequest.
        :type content_handling: str
        """
        allowed_values = ["CONVERT_TO_BINARY", "CONVERT_TO_TEXT"]  # noqa: E501
        if content_handling not in allowed_values:
            raise ValueError(
                "Invalid value for `content_handling` ({0}), must be one of {1}"
                .format(content_handling, allowed_values)
            )

        self._content_handling = content_handling

    @property
    def timeout_in_millis(self):
        """Gets the timeout_in_millis of this PutIntegrationRequest.

        Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.

        :return: The timeout_in_millis of this PutIntegrationRequest.
        :rtype: int
        """
        return self._timeout_in_millis

    @timeout_in_millis.setter
    def timeout_in_millis(self, timeout_in_millis):
        """Sets the timeout_in_millis of this PutIntegrationRequest.

        Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.

        :param timeout_in_millis: The timeout_in_millis of this PutIntegrationRequest.
        :type timeout_in_millis: int
        """

        self._timeout_in_millis = timeout_in_millis

    @property
    def tls_config(self):
        """Gets the tls_config of this PutIntegrationRequest.


        :return: The tls_config of this PutIntegrationRequest.
        :rtype: PutIntegrationRequestTlsConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this PutIntegrationRequest.


        :param tls_config: The tls_config of this PutIntegrationRequest.
        :type tls_config: PutIntegrationRequestTlsConfig
        """

        self._tls_config = tls_config
