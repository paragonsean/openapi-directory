# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutGatewayResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_code: str=None, response_parameters: Dict[str, str]=None, response_templates: Dict[str, str]=None):
        """PutGatewayResponseRequest - a model defined in OpenAPI

        :param status_code: The status_code of this PutGatewayResponseRequest.
        :param response_parameters: The response_parameters of this PutGatewayResponseRequest.
        :param response_templates: The response_templates of this PutGatewayResponseRequest.
        """
        self.openapi_types = {
            'status_code': str,
            'response_parameters': Dict[str, str],
            'response_templates': Dict[str, str]
        }

        self.attribute_map = {
            'status_code': 'statusCode',
            'response_parameters': 'responseParameters',
            'response_templates': 'responseTemplates'
        }

        self._status_code = status_code
        self._response_parameters = response_parameters
        self._response_templates = response_templates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutGatewayResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutGatewayResponse_request of this PutGatewayResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_code(self):
        """Gets the status_code of this PutGatewayResponseRequest.

        The status code.

        :return: The status_code of this PutGatewayResponseRequest.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this PutGatewayResponseRequest.

        The status code.

        :param status_code: The status_code of this PutGatewayResponseRequest.
        :type status_code: str
        """
        if status_code is not None and not re.search(r'[1-5]\d\d', status_code):
            raise ValueError("Invalid value for `status_code`, must be a follow pattern or equal to `/[1-5]\d\d/`")

        self._status_code = status_code

    @property
    def response_parameters(self):
        """Gets the response_parameters of this PutGatewayResponseRequest.

        Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.

        :return: The response_parameters of this PutGatewayResponseRequest.
        :rtype: Dict[str, str]
        """
        return self._response_parameters

    @response_parameters.setter
    def response_parameters(self, response_parameters):
        """Sets the response_parameters of this PutGatewayResponseRequest.

        Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.

        :param response_parameters: The response_parameters of this PutGatewayResponseRequest.
        :type response_parameters: Dict[str, str]
        """

        self._response_parameters = response_parameters

    @property
    def response_templates(self):
        """Gets the response_templates of this PutGatewayResponseRequest.

        Response templates of the GatewayResponse as a string-to-string map of key-value pairs.

        :return: The response_templates of this PutGatewayResponseRequest.
        :rtype: Dict[str, str]
        """
        return self._response_templates

    @response_templates.setter
    def response_templates(self, response_templates):
        """Sets the response_templates of this PutGatewayResponseRequest.

        Response templates of the GatewayResponse as a string-to-string map of key-value pairs.

        :param response_templates: The response_templates of this PutGatewayResponseRequest.
        :type response_templates: Dict[str, str]
        """

        self._response_templates = response_templates
