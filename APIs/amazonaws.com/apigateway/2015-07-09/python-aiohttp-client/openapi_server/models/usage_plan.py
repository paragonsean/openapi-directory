# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_plan_quota import UsagePlanQuota
from openapi_server.models.usage_plan_throttle import UsagePlanThrottle
from openapi_server import util


class UsagePlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, description: str=None, api_stages: List=None, throttle: UsagePlanThrottle=None, quota: UsagePlanQuota=None, product_code: str=None, tags: Dict=None):
        """UsagePlan - a model defined in OpenAPI

        :param id: The id of this UsagePlan.
        :param name: The name of this UsagePlan.
        :param description: The description of this UsagePlan.
        :param api_stages: The api_stages of this UsagePlan.
        :param throttle: The throttle of this UsagePlan.
        :param quota: The quota of this UsagePlan.
        :param product_code: The product_code of this UsagePlan.
        :param tags: The tags of this UsagePlan.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'api_stages': List,
            'throttle': UsagePlanThrottle,
            'quota': UsagePlanQuota,
            'product_code': str,
            'tags': Dict
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'api_stages': 'apiStages',
            'throttle': 'throttle',
            'quota': 'quota',
            'product_code': 'productCode',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._description = description
        self._api_stages = api_stages
        self._throttle = throttle
        self._quota = quota
        self._product_code = product_code
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsagePlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsagePlan of this UsagePlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UsagePlan.


        :return: The id of this UsagePlan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsagePlan.


        :param id: The id of this UsagePlan.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UsagePlan.


        :return: The name of this UsagePlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UsagePlan.


        :param name: The name of this UsagePlan.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UsagePlan.


        :return: The description of this UsagePlan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UsagePlan.


        :param description: The description of this UsagePlan.
        :type description: str
        """

        self._description = description

    @property
    def api_stages(self):
        """Gets the api_stages of this UsagePlan.


        :return: The api_stages of this UsagePlan.
        :rtype: List
        """
        return self._api_stages

    @api_stages.setter
    def api_stages(self, api_stages):
        """Sets the api_stages of this UsagePlan.


        :param api_stages: The api_stages of this UsagePlan.
        :type api_stages: List
        """

        self._api_stages = api_stages

    @property
    def throttle(self):
        """Gets the throttle of this UsagePlan.


        :return: The throttle of this UsagePlan.
        :rtype: UsagePlanThrottle
        """
        return self._throttle

    @throttle.setter
    def throttle(self, throttle):
        """Sets the throttle of this UsagePlan.


        :param throttle: The throttle of this UsagePlan.
        :type throttle: UsagePlanThrottle
        """

        self._throttle = throttle

    @property
    def quota(self):
        """Gets the quota of this UsagePlan.


        :return: The quota of this UsagePlan.
        :rtype: UsagePlanQuota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this UsagePlan.


        :param quota: The quota of this UsagePlan.
        :type quota: UsagePlanQuota
        """

        self._quota = quota

    @property
    def product_code(self):
        """Gets the product_code of this UsagePlan.


        :return: The product_code of this UsagePlan.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this UsagePlan.


        :param product_code: The product_code of this UsagePlan.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def tags(self):
        """Gets the tags of this UsagePlan.


        :return: The tags of this UsagePlan.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UsagePlan.


        :param tags: The tags of this UsagePlan.
        :type tags: Dict
        """

        self._tags = tags
