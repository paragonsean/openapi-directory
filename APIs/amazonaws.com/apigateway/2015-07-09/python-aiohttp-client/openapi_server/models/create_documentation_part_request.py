# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_documentation_part_request_location import CreateDocumentationPartRequestLocation
from openapi_server import util


class CreateDocumentationPartRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: CreateDocumentationPartRequestLocation=None, properties: str=None):
        """CreateDocumentationPartRequest - a model defined in OpenAPI

        :param location: The location of this CreateDocumentationPartRequest.
        :param properties: The properties of this CreateDocumentationPartRequest.
        """
        self.openapi_types = {
            'location': CreateDocumentationPartRequestLocation,
            'properties': str
        }

        self.attribute_map = {
            'location': 'location',
            'properties': 'properties'
        }

        self._location = location
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDocumentationPartRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDocumentationPart_request of this CreateDocumentationPartRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this CreateDocumentationPartRequest.


        :return: The location of this CreateDocumentationPartRequest.
        :rtype: CreateDocumentationPartRequestLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateDocumentationPartRequest.


        :param location: The location of this CreateDocumentationPartRequest.
        :type location: CreateDocumentationPartRequestLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def properties(self):
        """Gets the properties of this CreateDocumentationPartRequest.

        The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.

        :return: The properties of this CreateDocumentationPartRequest.
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateDocumentationPartRequest.

        The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.

        :param properties: The properties of this CreateDocumentationPartRequest.
        :type properties: str
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties
