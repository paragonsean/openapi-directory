# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestInvokeMethodRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path_with_query_string: str=None, body: str=None, headers: Dict[str, str]=None, multi_value_headers: Dict[str, List[str]]=None, client_certificate_id: str=None, stage_variables: Dict[str, str]=None):
        """TestInvokeMethodRequest - a model defined in OpenAPI

        :param path_with_query_string: The path_with_query_string of this TestInvokeMethodRequest.
        :param body: The body of this TestInvokeMethodRequest.
        :param headers: The headers of this TestInvokeMethodRequest.
        :param multi_value_headers: The multi_value_headers of this TestInvokeMethodRequest.
        :param client_certificate_id: The client_certificate_id of this TestInvokeMethodRequest.
        :param stage_variables: The stage_variables of this TestInvokeMethodRequest.
        """
        self.openapi_types = {
            'path_with_query_string': str,
            'body': str,
            'headers': Dict[str, str],
            'multi_value_headers': Dict[str, List[str]],
            'client_certificate_id': str,
            'stage_variables': Dict[str, str]
        }

        self.attribute_map = {
            'path_with_query_string': 'pathWithQueryString',
            'body': 'body',
            'headers': 'headers',
            'multi_value_headers': 'multiValueHeaders',
            'client_certificate_id': 'clientCertificateId',
            'stage_variables': 'stageVariables'
        }

        self._path_with_query_string = path_with_query_string
        self._body = body
        self._headers = headers
        self._multi_value_headers = multi_value_headers
        self._client_certificate_id = client_certificate_id
        self._stage_variables = stage_variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestInvokeMethodRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestInvokeMethod_request of this TestInvokeMethodRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path_with_query_string(self):
        """Gets the path_with_query_string of this TestInvokeMethodRequest.

        The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.

        :return: The path_with_query_string of this TestInvokeMethodRequest.
        :rtype: str
        """
        return self._path_with_query_string

    @path_with_query_string.setter
    def path_with_query_string(self, path_with_query_string):
        """Sets the path_with_query_string of this TestInvokeMethodRequest.

        The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.

        :param path_with_query_string: The path_with_query_string of this TestInvokeMethodRequest.
        :type path_with_query_string: str
        """

        self._path_with_query_string = path_with_query_string

    @property
    def body(self):
        """Gets the body of this TestInvokeMethodRequest.

        The simulated request body of an incoming invocation request.

        :return: The body of this TestInvokeMethodRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TestInvokeMethodRequest.

        The simulated request body of an incoming invocation request.

        :param body: The body of this TestInvokeMethodRequest.
        :type body: str
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this TestInvokeMethodRequest.

        A key-value map of headers to simulate an incoming invocation request.

        :return: The headers of this TestInvokeMethodRequest.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this TestInvokeMethodRequest.

        A key-value map of headers to simulate an incoming invocation request.

        :param headers: The headers of this TestInvokeMethodRequest.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def multi_value_headers(self):
        """Gets the multi_value_headers of this TestInvokeMethodRequest.

        The headers as a map from string to list of values to simulate an incoming invocation request.

        :return: The multi_value_headers of this TestInvokeMethodRequest.
        :rtype: Dict[str, List[str]]
        """
        return self._multi_value_headers

    @multi_value_headers.setter
    def multi_value_headers(self, multi_value_headers):
        """Sets the multi_value_headers of this TestInvokeMethodRequest.

        The headers as a map from string to list of values to simulate an incoming invocation request.

        :param multi_value_headers: The multi_value_headers of this TestInvokeMethodRequest.
        :type multi_value_headers: Dict[str, List[str]]
        """

        self._multi_value_headers = multi_value_headers

    @property
    def client_certificate_id(self):
        """Gets the client_certificate_id of this TestInvokeMethodRequest.

        A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.

        :return: The client_certificate_id of this TestInvokeMethodRequest.
        :rtype: str
        """
        return self._client_certificate_id

    @client_certificate_id.setter
    def client_certificate_id(self, client_certificate_id):
        """Sets the client_certificate_id of this TestInvokeMethodRequest.

        A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.

        :param client_certificate_id: The client_certificate_id of this TestInvokeMethodRequest.
        :type client_certificate_id: str
        """

        self._client_certificate_id = client_certificate_id

    @property
    def stage_variables(self):
        """Gets the stage_variables of this TestInvokeMethodRequest.

        A key-value map of stage variables to simulate an invocation on a deployed Stage.

        :return: The stage_variables of this TestInvokeMethodRequest.
        :rtype: Dict[str, str]
        """
        return self._stage_variables

    @stage_variables.setter
    def stage_variables(self, stage_variables):
        """Sets the stage_variables of this TestInvokeMethodRequest.

        A key-value map of stage variables to simulate an invocation on a deployed Stage.

        :param stage_variables: The stage_variables of this TestInvokeMethodRequest.
        :type stage_variables: Dict[str, str]
        """

        self._stage_variables = stage_variables
