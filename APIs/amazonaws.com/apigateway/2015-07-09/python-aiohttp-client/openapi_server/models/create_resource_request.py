# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path_part: str=None):
        """CreateResourceRequest - a model defined in OpenAPI

        :param path_part: The path_part of this CreateResourceRequest.
        """
        self.openapi_types = {
            'path_part': str
        }

        self.attribute_map = {
            'path_part': 'pathPart'
        }

        self._path_part = path_part

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateResource_request of this CreateResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path_part(self):
        """Gets the path_part of this CreateResourceRequest.

        The last path segment for this resource.

        :return: The path_part of this CreateResourceRequest.
        :rtype: str
        """
        return self._path_part

    @path_part.setter
    def path_part(self, path_part):
        """Sets the path_part of this CreateResourceRequest.

        The last path segment for this resource.

        :param path_part: The path_part of this CreateResourceRequest.
        :type path_part: str
        """
        if path_part is None:
            raise ValueError("Invalid value for `path_part`, must not be `None`")

        self._path_part = path_part
