# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.method_method_integration import MethodMethodIntegration
from openapi_server import util


class Method(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_method: str=None, authorization_type: str=None, authorizer_id: str=None, api_key_required: bool=None, request_validator_id: str=None, operation_name: str=None, request_parameters: Dict=None, request_models: Dict=None, method_responses: Dict=None, method_integration: MethodMethodIntegration=None, authorization_scopes: List=None):
        """Method - a model defined in OpenAPI

        :param http_method: The http_method of this Method.
        :param authorization_type: The authorization_type of this Method.
        :param authorizer_id: The authorizer_id of this Method.
        :param api_key_required: The api_key_required of this Method.
        :param request_validator_id: The request_validator_id of this Method.
        :param operation_name: The operation_name of this Method.
        :param request_parameters: The request_parameters of this Method.
        :param request_models: The request_models of this Method.
        :param method_responses: The method_responses of this Method.
        :param method_integration: The method_integration of this Method.
        :param authorization_scopes: The authorization_scopes of this Method.
        """
        self.openapi_types = {
            'http_method': str,
            'authorization_type': str,
            'authorizer_id': str,
            'api_key_required': bool,
            'request_validator_id': str,
            'operation_name': str,
            'request_parameters': Dict,
            'request_models': Dict,
            'method_responses': Dict,
            'method_integration': MethodMethodIntegration,
            'authorization_scopes': List
        }

        self.attribute_map = {
            'http_method': 'httpMethod',
            'authorization_type': 'authorizationType',
            'authorizer_id': 'authorizerId',
            'api_key_required': 'apiKeyRequired',
            'request_validator_id': 'requestValidatorId',
            'operation_name': 'operationName',
            'request_parameters': 'requestParameters',
            'request_models': 'requestModels',
            'method_responses': 'methodResponses',
            'method_integration': 'methodIntegration',
            'authorization_scopes': 'authorizationScopes'
        }

        self._http_method = http_method
        self._authorization_type = authorization_type
        self._authorizer_id = authorizer_id
        self._api_key_required = api_key_required
        self._request_validator_id = request_validator_id
        self._operation_name = operation_name
        self._request_parameters = request_parameters
        self._request_models = request_models
        self._method_responses = method_responses
        self._method_integration = method_integration
        self._authorization_scopes = authorization_scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Method':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Method of this Method.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_method(self):
        """Gets the http_method of this Method.


        :return: The http_method of this Method.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this Method.


        :param http_method: The http_method of this Method.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def authorization_type(self):
        """Gets the authorization_type of this Method.


        :return: The authorization_type of this Method.
        :rtype: str
        """
        return self._authorization_type

    @authorization_type.setter
    def authorization_type(self, authorization_type):
        """Sets the authorization_type of this Method.


        :param authorization_type: The authorization_type of this Method.
        :type authorization_type: str
        """

        self._authorization_type = authorization_type

    @property
    def authorizer_id(self):
        """Gets the authorizer_id of this Method.


        :return: The authorizer_id of this Method.
        :rtype: str
        """
        return self._authorizer_id

    @authorizer_id.setter
    def authorizer_id(self, authorizer_id):
        """Sets the authorizer_id of this Method.


        :param authorizer_id: The authorizer_id of this Method.
        :type authorizer_id: str
        """

        self._authorizer_id = authorizer_id

    @property
    def api_key_required(self):
        """Gets the api_key_required of this Method.


        :return: The api_key_required of this Method.
        :rtype: bool
        """
        return self._api_key_required

    @api_key_required.setter
    def api_key_required(self, api_key_required):
        """Sets the api_key_required of this Method.


        :param api_key_required: The api_key_required of this Method.
        :type api_key_required: bool
        """

        self._api_key_required = api_key_required

    @property
    def request_validator_id(self):
        """Gets the request_validator_id of this Method.


        :return: The request_validator_id of this Method.
        :rtype: str
        """
        return self._request_validator_id

    @request_validator_id.setter
    def request_validator_id(self, request_validator_id):
        """Sets the request_validator_id of this Method.


        :param request_validator_id: The request_validator_id of this Method.
        :type request_validator_id: str
        """

        self._request_validator_id = request_validator_id

    @property
    def operation_name(self):
        """Gets the operation_name of this Method.


        :return: The operation_name of this Method.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this Method.


        :param operation_name: The operation_name of this Method.
        :type operation_name: str
        """

        self._operation_name = operation_name

    @property
    def request_parameters(self):
        """Gets the request_parameters of this Method.


        :return: The request_parameters of this Method.
        :rtype: Dict
        """
        return self._request_parameters

    @request_parameters.setter
    def request_parameters(self, request_parameters):
        """Sets the request_parameters of this Method.


        :param request_parameters: The request_parameters of this Method.
        :type request_parameters: Dict
        """

        self._request_parameters = request_parameters

    @property
    def request_models(self):
        """Gets the request_models of this Method.


        :return: The request_models of this Method.
        :rtype: Dict
        """
        return self._request_models

    @request_models.setter
    def request_models(self, request_models):
        """Sets the request_models of this Method.


        :param request_models: The request_models of this Method.
        :type request_models: Dict
        """

        self._request_models = request_models

    @property
    def method_responses(self):
        """Gets the method_responses of this Method.


        :return: The method_responses of this Method.
        :rtype: Dict
        """
        return self._method_responses

    @method_responses.setter
    def method_responses(self, method_responses):
        """Sets the method_responses of this Method.


        :param method_responses: The method_responses of this Method.
        :type method_responses: Dict
        """

        self._method_responses = method_responses

    @property
    def method_integration(self):
        """Gets the method_integration of this Method.


        :return: The method_integration of this Method.
        :rtype: MethodMethodIntegration
        """
        return self._method_integration

    @method_integration.setter
    def method_integration(self, method_integration):
        """Sets the method_integration of this Method.


        :param method_integration: The method_integration of this Method.
        :type method_integration: MethodMethodIntegration
        """

        self._method_integration = method_integration

    @property
    def authorization_scopes(self):
        """Gets the authorization_scopes of this Method.


        :return: The authorization_scopes of this Method.
        :rtype: List
        """
        return self._authorization_scopes

    @authorization_scopes.setter
    def authorization_scopes(self, authorization_scopes):
        """Sets the authorization_scopes of this Method.


        :param authorization_scopes: The authorization_scopes of this Method.
        :type authorization_scopes: List
        """

        self._authorization_scopes = authorization_scopes
