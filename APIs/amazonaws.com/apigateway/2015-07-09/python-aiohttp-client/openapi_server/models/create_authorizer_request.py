# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAuthorizerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, provider_arns: List[str]=None, auth_type: str=None, authorizer_uri: str=None, authorizer_credentials: str=None, identity_source: str=None, identity_validation_expression: str=None, authorizer_result_ttl_in_seconds: int=None):
        """CreateAuthorizerRequest - a model defined in OpenAPI

        :param name: The name of this CreateAuthorizerRequest.
        :param type: The type of this CreateAuthorizerRequest.
        :param provider_arns: The provider_arns of this CreateAuthorizerRequest.
        :param auth_type: The auth_type of this CreateAuthorizerRequest.
        :param authorizer_uri: The authorizer_uri of this CreateAuthorizerRequest.
        :param authorizer_credentials: The authorizer_credentials of this CreateAuthorizerRequest.
        :param identity_source: The identity_source of this CreateAuthorizerRequest.
        :param identity_validation_expression: The identity_validation_expression of this CreateAuthorizerRequest.
        :param authorizer_result_ttl_in_seconds: The authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'provider_arns': List[str],
            'auth_type': str,
            'authorizer_uri': str,
            'authorizer_credentials': str,
            'identity_source': str,
            'identity_validation_expression': str,
            'authorizer_result_ttl_in_seconds': int
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'provider_arns': 'providerARNs',
            'auth_type': 'authType',
            'authorizer_uri': 'authorizerUri',
            'authorizer_credentials': 'authorizerCredentials',
            'identity_source': 'identitySource',
            'identity_validation_expression': 'identityValidationExpression',
            'authorizer_result_ttl_in_seconds': 'authorizerResultTtlInSeconds'
        }

        self._name = name
        self._type = type
        self._provider_arns = provider_arns
        self._auth_type = auth_type
        self._authorizer_uri = authorizer_uri
        self._authorizer_credentials = authorizer_credentials
        self._identity_source = identity_source
        self._identity_validation_expression = identity_validation_expression
        self._authorizer_result_ttl_in_seconds = authorizer_result_ttl_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAuthorizerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAuthorizer_request of this CreateAuthorizerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateAuthorizerRequest.

        The name of the authorizer.

        :return: The name of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAuthorizerRequest.

        The name of the authorizer.

        :param name: The name of this CreateAuthorizerRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreateAuthorizerRequest.

        The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.

        :return: The type of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateAuthorizerRequest.

        The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.

        :param type: The type of this CreateAuthorizerRequest.
        :type type: str
        """
        allowed_values = ["TOKEN", "REQUEST", "COGNITO_USER_POOLS"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def provider_arns(self):
        """Gets the provider_arns of this CreateAuthorizerRequest.

        A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. 

        :return: The provider_arns of this CreateAuthorizerRequest.
        :rtype: List[str]
        """
        return self._provider_arns

    @provider_arns.setter
    def provider_arns(self, provider_arns):
        """Sets the provider_arns of this CreateAuthorizerRequest.

        A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. 

        :param provider_arns: The provider_arns of this CreateAuthorizerRequest.
        :type provider_arns: List[str]
        """

        self._provider_arns = provider_arns

    @property
    def auth_type(self):
        """Gets the auth_type of this CreateAuthorizerRequest.

        Optional customer-defined field, used in OpenAPI imports and exports without functional impact.

        :return: The auth_type of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this CreateAuthorizerRequest.

        Optional customer-defined field, used in OpenAPI imports and exports without functional impact.

        :param auth_type: The auth_type of this CreateAuthorizerRequest.
        :type auth_type: str
        """

        self._auth_type = auth_type

    @property
    def authorizer_uri(self):
        """Gets the authorizer_uri of this CreateAuthorizerRequest.

        Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.

        :return: The authorizer_uri of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._authorizer_uri

    @authorizer_uri.setter
    def authorizer_uri(self, authorizer_uri):
        """Sets the authorizer_uri of this CreateAuthorizerRequest.

        Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.

        :param authorizer_uri: The authorizer_uri of this CreateAuthorizerRequest.
        :type authorizer_uri: str
        """

        self._authorizer_uri = authorizer_uri

    @property
    def authorizer_credentials(self):
        """Gets the authorizer_credentials of this CreateAuthorizerRequest.

        Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.

        :return: The authorizer_credentials of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._authorizer_credentials

    @authorizer_credentials.setter
    def authorizer_credentials(self, authorizer_credentials):
        """Sets the authorizer_credentials of this CreateAuthorizerRequest.

        Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.

        :param authorizer_credentials: The authorizer_credentials of this CreateAuthorizerRequest.
        :type authorizer_credentials: str
        """

        self._authorizer_credentials = authorizer_credentials

    @property
    def identity_source(self):
        """Gets the identity_source of this CreateAuthorizerRequest.

        The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.

        :return: The identity_source of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._identity_source

    @identity_source.setter
    def identity_source(self, identity_source):
        """Sets the identity_source of this CreateAuthorizerRequest.

        The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.

        :param identity_source: The identity_source of this CreateAuthorizerRequest.
        :type identity_source: str
        """

        self._identity_source = identity_source

    @property
    def identity_validation_expression(self):
        """Gets the identity_validation_expression of this CreateAuthorizerRequest.

        A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.

        :return: The identity_validation_expression of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._identity_validation_expression

    @identity_validation_expression.setter
    def identity_validation_expression(self, identity_validation_expression):
        """Sets the identity_validation_expression of this CreateAuthorizerRequest.

        A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.

        :param identity_validation_expression: The identity_validation_expression of this CreateAuthorizerRequest.
        :type identity_validation_expression: str
        """

        self._identity_validation_expression = identity_validation_expression

    @property
    def authorizer_result_ttl_in_seconds(self):
        """Gets the authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.

        The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.

        :return: The authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.
        :rtype: int
        """
        return self._authorizer_result_ttl_in_seconds

    @authorizer_result_ttl_in_seconds.setter
    def authorizer_result_ttl_in_seconds(self, authorizer_result_ttl_in_seconds):
        """Sets the authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.

        The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.

        :param authorizer_result_ttl_in_seconds: The authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.
        :type authorizer_result_ttl_in_seconds: int
        """

        self._authorizer_result_ttl_in_seconds = authorizer_result_ttl_in_seconds
