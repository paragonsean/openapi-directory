# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestInvokeMethodResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: int=None, body: str=None, headers: Dict=None, multi_value_headers: Dict=None, log: str=None, latency: int=None):
        """TestInvokeMethodResponse - a model defined in OpenAPI

        :param status: The status of this TestInvokeMethodResponse.
        :param body: The body of this TestInvokeMethodResponse.
        :param headers: The headers of this TestInvokeMethodResponse.
        :param multi_value_headers: The multi_value_headers of this TestInvokeMethodResponse.
        :param log: The log of this TestInvokeMethodResponse.
        :param latency: The latency of this TestInvokeMethodResponse.
        """
        self.openapi_types = {
            'status': int,
            'body': str,
            'headers': Dict,
            'multi_value_headers': Dict,
            'log': str,
            'latency': int
        }

        self.attribute_map = {
            'status': 'status',
            'body': 'body',
            'headers': 'headers',
            'multi_value_headers': 'multiValueHeaders',
            'log': 'log',
            'latency': 'latency'
        }

        self._status = status
        self._body = body
        self._headers = headers
        self._multi_value_headers = multi_value_headers
        self._log = log
        self._latency = latency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestInvokeMethodResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestInvokeMethodResponse of this TestInvokeMethodResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this TestInvokeMethodResponse.


        :return: The status of this TestInvokeMethodResponse.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestInvokeMethodResponse.


        :param status: The status of this TestInvokeMethodResponse.
        :type status: int
        """

        self._status = status

    @property
    def body(self):
        """Gets the body of this TestInvokeMethodResponse.


        :return: The body of this TestInvokeMethodResponse.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TestInvokeMethodResponse.


        :param body: The body of this TestInvokeMethodResponse.
        :type body: str
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this TestInvokeMethodResponse.


        :return: The headers of this TestInvokeMethodResponse.
        :rtype: Dict
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this TestInvokeMethodResponse.


        :param headers: The headers of this TestInvokeMethodResponse.
        :type headers: Dict
        """

        self._headers = headers

    @property
    def multi_value_headers(self):
        """Gets the multi_value_headers of this TestInvokeMethodResponse.


        :return: The multi_value_headers of this TestInvokeMethodResponse.
        :rtype: Dict
        """
        return self._multi_value_headers

    @multi_value_headers.setter
    def multi_value_headers(self, multi_value_headers):
        """Sets the multi_value_headers of this TestInvokeMethodResponse.


        :param multi_value_headers: The multi_value_headers of this TestInvokeMethodResponse.
        :type multi_value_headers: Dict
        """

        self._multi_value_headers = multi_value_headers

    @property
    def log(self):
        """Gets the log of this TestInvokeMethodResponse.


        :return: The log of this TestInvokeMethodResponse.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this TestInvokeMethodResponse.


        :param log: The log of this TestInvokeMethodResponse.
        :type log: str
        """

        self._log = log

    @property
    def latency(self):
        """Gets the latency of this TestInvokeMethodResponse.


        :return: The latency of this TestInvokeMethodResponse.
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this TestInvokeMethodResponse.


        :param latency: The latency of this TestInvokeMethodResponse.
        :type latency: int
        """

        self._latency = latency
