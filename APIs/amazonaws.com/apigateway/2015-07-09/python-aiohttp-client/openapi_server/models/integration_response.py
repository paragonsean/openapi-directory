# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_handling_strategy import ContentHandlingStrategy
from openapi_server import util


class IntegrationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_code: str=None, selection_pattern: str=None, response_parameters: Dict=None, response_templates: Dict=None, content_handling: ContentHandlingStrategy=None):
        """IntegrationResponse - a model defined in OpenAPI

        :param status_code: The status_code of this IntegrationResponse.
        :param selection_pattern: The selection_pattern of this IntegrationResponse.
        :param response_parameters: The response_parameters of this IntegrationResponse.
        :param response_templates: The response_templates of this IntegrationResponse.
        :param content_handling: The content_handling of this IntegrationResponse.
        """
        self.openapi_types = {
            'status_code': str,
            'selection_pattern': str,
            'response_parameters': Dict,
            'response_templates': Dict,
            'content_handling': ContentHandlingStrategy
        }

        self.attribute_map = {
            'status_code': 'statusCode',
            'selection_pattern': 'selectionPattern',
            'response_parameters': 'responseParameters',
            'response_templates': 'responseTemplates',
            'content_handling': 'contentHandling'
        }

        self._status_code = status_code
        self._selection_pattern = selection_pattern
        self._response_parameters = response_parameters
        self._response_templates = response_templates
        self._content_handling = content_handling

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegrationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegrationResponse of this IntegrationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_code(self):
        """Gets the status_code of this IntegrationResponse.


        :return: The status_code of this IntegrationResponse.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this IntegrationResponse.


        :param status_code: The status_code of this IntegrationResponse.
        :type status_code: str
        """

        self._status_code = status_code

    @property
    def selection_pattern(self):
        """Gets the selection_pattern of this IntegrationResponse.


        :return: The selection_pattern of this IntegrationResponse.
        :rtype: str
        """
        return self._selection_pattern

    @selection_pattern.setter
    def selection_pattern(self, selection_pattern):
        """Sets the selection_pattern of this IntegrationResponse.


        :param selection_pattern: The selection_pattern of this IntegrationResponse.
        :type selection_pattern: str
        """

        self._selection_pattern = selection_pattern

    @property
    def response_parameters(self):
        """Gets the response_parameters of this IntegrationResponse.


        :return: The response_parameters of this IntegrationResponse.
        :rtype: Dict
        """
        return self._response_parameters

    @response_parameters.setter
    def response_parameters(self, response_parameters):
        """Sets the response_parameters of this IntegrationResponse.


        :param response_parameters: The response_parameters of this IntegrationResponse.
        :type response_parameters: Dict
        """

        self._response_parameters = response_parameters

    @property
    def response_templates(self):
        """Gets the response_templates of this IntegrationResponse.


        :return: The response_templates of this IntegrationResponse.
        :rtype: Dict
        """
        return self._response_templates

    @response_templates.setter
    def response_templates(self, response_templates):
        """Sets the response_templates of this IntegrationResponse.


        :param response_templates: The response_templates of this IntegrationResponse.
        :type response_templates: Dict
        """

        self._response_templates = response_templates

    @property
    def content_handling(self):
        """Gets the content_handling of this IntegrationResponse.


        :return: The content_handling of this IntegrationResponse.
        :rtype: ContentHandlingStrategy
        """
        return self._content_handling

    @content_handling.setter
    def content_handling(self, content_handling):
        """Sets the content_handling of this IntegrationResponse.


        :param content_handling: The content_handling of this IntegrationResponse.
        :type content_handling: ContentHandlingStrategy
        """

        self._content_handling = content_handling
