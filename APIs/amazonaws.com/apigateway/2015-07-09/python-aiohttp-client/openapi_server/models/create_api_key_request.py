# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stage_key import StageKey
from openapi_server import util


class CreateApiKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, enabled: bool=None, generate_distinct_id: bool=None, value: str=None, stage_keys: List[StageKey]=None, customer_id: str=None, tags: Dict[str, str]=None):
        """CreateApiKeyRequest - a model defined in OpenAPI

        :param name: The name of this CreateApiKeyRequest.
        :param description: The description of this CreateApiKeyRequest.
        :param enabled: The enabled of this CreateApiKeyRequest.
        :param generate_distinct_id: The generate_distinct_id of this CreateApiKeyRequest.
        :param value: The value of this CreateApiKeyRequest.
        :param stage_keys: The stage_keys of this CreateApiKeyRequest.
        :param customer_id: The customer_id of this CreateApiKeyRequest.
        :param tags: The tags of this CreateApiKeyRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'enabled': bool,
            'generate_distinct_id': bool,
            'value': str,
            'stage_keys': List[StageKey],
            'customer_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'enabled': 'enabled',
            'generate_distinct_id': 'generateDistinctId',
            'value': 'value',
            'stage_keys': 'stageKeys',
            'customer_id': 'customerId',
            'tags': 'tags'
        }

        self._name = name
        self._description = description
        self._enabled = enabled
        self._generate_distinct_id = generate_distinct_id
        self._value = value
        self._stage_keys = stage_keys
        self._customer_id = customer_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApiKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApiKey_request of this CreateApiKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateApiKeyRequest.

        The name of the ApiKey.

        :return: The name of this CreateApiKeyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateApiKeyRequest.

        The name of the ApiKey.

        :param name: The name of this CreateApiKeyRequest.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateApiKeyRequest.

        The description of the ApiKey.

        :return: The description of this CreateApiKeyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateApiKeyRequest.

        The description of the ApiKey.

        :param description: The description of this CreateApiKeyRequest.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this CreateApiKeyRequest.

        Specifies whether the ApiKey can be used by callers.

        :return: The enabled of this CreateApiKeyRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CreateApiKeyRequest.

        Specifies whether the ApiKey can be used by callers.

        :param enabled: The enabled of this CreateApiKeyRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def generate_distinct_id(self):
        """Gets the generate_distinct_id of this CreateApiKeyRequest.

        Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.

        :return: The generate_distinct_id of this CreateApiKeyRequest.
        :rtype: bool
        """
        return self._generate_distinct_id

    @generate_distinct_id.setter
    def generate_distinct_id(self, generate_distinct_id):
        """Sets the generate_distinct_id of this CreateApiKeyRequest.

        Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.

        :param generate_distinct_id: The generate_distinct_id of this CreateApiKeyRequest.
        :type generate_distinct_id: bool
        """

        self._generate_distinct_id = generate_distinct_id

    @property
    def value(self):
        """Gets the value of this CreateApiKeyRequest.

        Specifies a value of the API key.

        :return: The value of this CreateApiKeyRequest.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CreateApiKeyRequest.

        Specifies a value of the API key.

        :param value: The value of this CreateApiKeyRequest.
        :type value: str
        """

        self._value = value

    @property
    def stage_keys(self):
        """Gets the stage_keys of this CreateApiKeyRequest.

        DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.

        :return: The stage_keys of this CreateApiKeyRequest.
        :rtype: List[StageKey]
        """
        return self._stage_keys

    @stage_keys.setter
    def stage_keys(self, stage_keys):
        """Sets the stage_keys of this CreateApiKeyRequest.

        DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.

        :param stage_keys: The stage_keys of this CreateApiKeyRequest.
        :type stage_keys: List[StageKey]
        """

        self._stage_keys = stage_keys

    @property
    def customer_id(self):
        """Gets the customer_id of this CreateApiKeyRequest.

        An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.

        :return: The customer_id of this CreateApiKeyRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CreateApiKeyRequest.

        An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.

        :param customer_id: The customer_id of this CreateApiKeyRequest.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def tags(self):
        """Gets the tags of this CreateApiKeyRequest.

        The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.

        :return: The tags of this CreateApiKeyRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateApiKeyRequest.

        The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.

        :param tags: The tags of this CreateApiKeyRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
