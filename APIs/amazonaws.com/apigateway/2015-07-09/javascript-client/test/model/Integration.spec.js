/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonApiGateway);
  }
}(this, function(expect, AmazonApiGateway) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonApiGateway.Integration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Integration', function() {
    it('should create an instance of Integration', function() {
      // uncomment below and update the code to test Integration
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be.a(AmazonApiGateway.Integration);
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property httpMethod (base name: "httpMethod")', function() {
      // uncomment below and update the code to test the property httpMethod
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property uri (base name: "uri")', function() {
      // uncomment below and update the code to test the property uri
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property connectionType (base name: "connectionType")', function() {
      // uncomment below and update the code to test the property connectionType
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property connectionId (base name: "connectionId")', function() {
      // uncomment below and update the code to test the property connectionId
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property credentials (base name: "credentials")', function() {
      // uncomment below and update the code to test the property credentials
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property requestParameters (base name: "requestParameters")', function() {
      // uncomment below and update the code to test the property requestParameters
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property requestTemplates (base name: "requestTemplates")', function() {
      // uncomment below and update the code to test the property requestTemplates
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property passthroughBehavior (base name: "passthroughBehavior")', function() {
      // uncomment below and update the code to test the property passthroughBehavior
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property contentHandling (base name: "contentHandling")', function() {
      // uncomment below and update the code to test the property contentHandling
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property timeoutInMillis (base name: "timeoutInMillis")', function() {
      // uncomment below and update the code to test the property timeoutInMillis
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property cacheNamespace (base name: "cacheNamespace")', function() {
      // uncomment below and update the code to test the property cacheNamespace
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property cacheKeyParameters (base name: "cacheKeyParameters")', function() {
      // uncomment below and update the code to test the property cacheKeyParameters
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property integrationResponses (base name: "integrationResponses")', function() {
      // uncomment below and update the code to test the property integrationResponses
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

    it('should have the property tlsConfig (base name: "tlsConfig")', function() {
      // uncomment below and update the code to test the property tlsConfig
      //var instance = new AmazonApiGateway.Integration();
      //expect(instance).to.be();
    });

  });

}));
