/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonApiGateway);
  }
}(this, function(expect, AmazonApiGateway) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonApiGateway.CreateDomainNameRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateDomainNameRequest', function() {
    it('should create an instance of CreateDomainNameRequest', function() {
      // uncomment below and update the code to test CreateDomainNameRequest
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be.a(AmazonApiGateway.CreateDomainNameRequest);
    });

    it('should have the property domainName (base name: "domainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property certificateName (base name: "certificateName")', function() {
      // uncomment below and update the code to test the property certificateName
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property certificateBody (base name: "certificateBody")', function() {
      // uncomment below and update the code to test the property certificateBody
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property certificatePrivateKey (base name: "certificatePrivateKey")', function() {
      // uncomment below and update the code to test the property certificatePrivateKey
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property certificateChain (base name: "certificateChain")', function() {
      // uncomment below and update the code to test the property certificateChain
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property certificateArn (base name: "certificateArn")', function() {
      // uncomment below and update the code to test the property certificateArn
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property regionalCertificateName (base name: "regionalCertificateName")', function() {
      // uncomment below and update the code to test the property regionalCertificateName
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property regionalCertificateArn (base name: "regionalCertificateArn")', function() {
      // uncomment below and update the code to test the property regionalCertificateArn
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property endpointConfiguration (base name: "endpointConfiguration")', function() {
      // uncomment below and update the code to test the property endpointConfiguration
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property securityPolicy (base name: "securityPolicy")', function() {
      // uncomment below and update the code to test the property securityPolicy
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property mutualTlsAuthentication (base name: "mutualTlsAuthentication")', function() {
      // uncomment below and update the code to test the property mutualTlsAuthentication
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

    it('should have the property ownershipVerificationCertificateArn (base name: "ownershipVerificationCertificateArn")', function() {
      // uncomment below and update the code to test the property ownershipVerificationCertificateArn
      //var instance = new AmazonApiGateway.CreateDomainNameRequest();
      //expect(instance).to.be();
    });

  });

}));
