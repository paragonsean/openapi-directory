/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonApiGateway);
  }
}(this, function(expect, AmazonApiGateway) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonApiGateway.MethodSetting();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MethodSetting', function() {
    it('should create an instance of MethodSetting', function() {
      // uncomment below and update the code to test MethodSetting
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be.a(AmazonApiGateway.MethodSetting);
    });

    it('should have the property metricsEnabled (base name: "metricsEnabled")', function() {
      // uncomment below and update the code to test the property metricsEnabled
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property loggingLevel (base name: "loggingLevel")', function() {
      // uncomment below and update the code to test the property loggingLevel
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property dataTraceEnabled (base name: "dataTraceEnabled")', function() {
      // uncomment below and update the code to test the property dataTraceEnabled
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property throttlingBurstLimit (base name: "throttlingBurstLimit")', function() {
      // uncomment below and update the code to test the property throttlingBurstLimit
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property throttlingRateLimit (base name: "throttlingRateLimit")', function() {
      // uncomment below and update the code to test the property throttlingRateLimit
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property cachingEnabled (base name: "cachingEnabled")', function() {
      // uncomment below and update the code to test the property cachingEnabled
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property cacheTtlInSeconds (base name: "cacheTtlInSeconds")', function() {
      // uncomment below and update the code to test the property cacheTtlInSeconds
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property cacheDataEncrypted (base name: "cacheDataEncrypted")', function() {
      // uncomment below and update the code to test the property cacheDataEncrypted
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property requireAuthorizationForCacheControl (base name: "requireAuthorizationForCacheControl")', function() {
      // uncomment below and update the code to test the property requireAuthorizationForCacheControl
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

    it('should have the property unauthorizedCacheControlHeaderStrategy (base name: "unauthorizedCacheControlHeaderStrategy")', function() {
      // uncomment below and update the code to test the property unauthorizedCacheControlHeaderStrategy
      //var instance = new AmazonApiGateway.MethodSetting();
      //expect(instance).to.be();
    });

  });

}));
