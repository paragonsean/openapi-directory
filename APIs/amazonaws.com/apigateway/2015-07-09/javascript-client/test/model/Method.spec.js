/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonApiGateway);
  }
}(this, function(expect, AmazonApiGateway) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonApiGateway.Method();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Method', function() {
    it('should create an instance of Method', function() {
      // uncomment below and update the code to test Method
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be.a(AmazonApiGateway.Method);
    });

    it('should have the property httpMethod (base name: "httpMethod")', function() {
      // uncomment below and update the code to test the property httpMethod
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property authorizationType (base name: "authorizationType")', function() {
      // uncomment below and update the code to test the property authorizationType
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property authorizerId (base name: "authorizerId")', function() {
      // uncomment below and update the code to test the property authorizerId
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property apiKeyRequired (base name: "apiKeyRequired")', function() {
      // uncomment below and update the code to test the property apiKeyRequired
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property requestValidatorId (base name: "requestValidatorId")', function() {
      // uncomment below and update the code to test the property requestValidatorId
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property operationName (base name: "operationName")', function() {
      // uncomment below and update the code to test the property operationName
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property requestParameters (base name: "requestParameters")', function() {
      // uncomment below and update the code to test the property requestParameters
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property requestModels (base name: "requestModels")', function() {
      // uncomment below and update the code to test the property requestModels
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property methodResponses (base name: "methodResponses")', function() {
      // uncomment below and update the code to test the property methodResponses
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property methodIntegration (base name: "methodIntegration")', function() {
      // uncomment below and update the code to test the property methodIntegration
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

    it('should have the property authorizationScopes (base name: "authorizationScopes")', function() {
      // uncomment below and update the code to test the property authorizationScopes
      //var instance = new AmazonApiGateway.Method();
      //expect(instance).to.be();
    });

  });

}));
