/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonApiGateway);
  }
}(this, function(expect, AmazonApiGateway) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonApiGateway.DomainName();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DomainName', function() {
    it('should create an instance of DomainName', function() {
      // uncomment below and update the code to test DomainName
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be.a(AmazonApiGateway.DomainName);
    });

    it('should have the property domainName (base name: "domainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property certificateName (base name: "certificateName")', function() {
      // uncomment below and update the code to test the property certificateName
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property certificateArn (base name: "certificateArn")', function() {
      // uncomment below and update the code to test the property certificateArn
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property certificateUploadDate (base name: "certificateUploadDate")', function() {
      // uncomment below and update the code to test the property certificateUploadDate
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property regionalDomainName (base name: "regionalDomainName")', function() {
      // uncomment below and update the code to test the property regionalDomainName
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property regionalHostedZoneId (base name: "regionalHostedZoneId")', function() {
      // uncomment below and update the code to test the property regionalHostedZoneId
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property regionalCertificateName (base name: "regionalCertificateName")', function() {
      // uncomment below and update the code to test the property regionalCertificateName
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property regionalCertificateArn (base name: "regionalCertificateArn")', function() {
      // uncomment below and update the code to test the property regionalCertificateArn
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property distributionDomainName (base name: "distributionDomainName")', function() {
      // uncomment below and update the code to test the property distributionDomainName
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property distributionHostedZoneId (base name: "distributionHostedZoneId")', function() {
      // uncomment below and update the code to test the property distributionHostedZoneId
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property endpointConfiguration (base name: "endpointConfiguration")', function() {
      // uncomment below and update the code to test the property endpointConfiguration
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property domainNameStatus (base name: "domainNameStatus")', function() {
      // uncomment below and update the code to test the property domainNameStatus
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property domainNameStatusMessage (base name: "domainNameStatusMessage")', function() {
      // uncomment below and update the code to test the property domainNameStatusMessage
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property securityPolicy (base name: "securityPolicy")', function() {
      // uncomment below and update the code to test the property securityPolicy
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property mutualTlsAuthentication (base name: "mutualTlsAuthentication")', function() {
      // uncomment below and update the code to test the property mutualTlsAuthentication
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

    it('should have the property ownershipVerificationCertificateArn (base name: "ownershipVerificationCertificateArn")', function() {
      // uncomment below and update the code to test the property ownershipVerificationCertificateArn
      //var instance = new AmazonApiGateway.DomainName();
      //expect(instance).to.be();
    });

  });

}));
