/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonApiGateway);
  }
}(this, function(expect, AmazonApiGateway) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonApiGateway.Authorizer();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Authorizer', function() {
    it('should create an instance of Authorizer', function() {
      // uncomment below and update the code to test Authorizer
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be.a(AmazonApiGateway.Authorizer);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property providerARNs (base name: "providerARNs")', function() {
      // uncomment below and update the code to test the property providerARNs
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property authType (base name: "authType")', function() {
      // uncomment below and update the code to test the property authType
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property authorizerUri (base name: "authorizerUri")', function() {
      // uncomment below and update the code to test the property authorizerUri
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property authorizerCredentials (base name: "authorizerCredentials")', function() {
      // uncomment below and update the code to test the property authorizerCredentials
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property identitySource (base name: "identitySource")', function() {
      // uncomment below and update the code to test the property identitySource
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property identityValidationExpression (base name: "identityValidationExpression")', function() {
      // uncomment below and update the code to test the property identityValidationExpression
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

    it('should have the property authorizerResultTtlInSeconds (base name: "authorizerResultTtlInSeconds")', function() {
      // uncomment below and update the code to test the property authorizerResultTtlInSeconds
      //var instance = new AmazonApiGateway.Authorizer();
      //expect(instance).to.be();
    });

  });

}));
