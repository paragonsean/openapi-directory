/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import ApiKey from '../model/ApiKey';
import ApiKeyIds from '../model/ApiKeyIds';
import ApiKeys from '../model/ApiKeys';
import Authorizer from '../model/Authorizer';
import Authorizers from '../model/Authorizers';
import BasePathMapping from '../model/BasePathMapping';
import BasePathMappings from '../model/BasePathMappings';
import ClientCertificate from '../model/ClientCertificate';
import ClientCertificates from '../model/ClientCertificates';
import CreateApiKeyRequest from '../model/CreateApiKeyRequest';
import CreateAuthorizerRequest from '../model/CreateAuthorizerRequest';
import CreateBasePathMappingRequest from '../model/CreateBasePathMappingRequest';
import CreateDeploymentRequest from '../model/CreateDeploymentRequest';
import CreateDocumentationPartRequest from '../model/CreateDocumentationPartRequest';
import CreateDocumentationVersionRequest from '../model/CreateDocumentationVersionRequest';
import CreateDomainNameRequest from '../model/CreateDomainNameRequest';
import CreateModelRequest from '../model/CreateModelRequest';
import CreateRequestValidatorRequest from '../model/CreateRequestValidatorRequest';
import CreateResourceRequest from '../model/CreateResourceRequest';
import CreateRestApiRequest from '../model/CreateRestApiRequest';
import CreateStageRequest from '../model/CreateStageRequest';
import CreateUsagePlanKeyRequest from '../model/CreateUsagePlanKeyRequest';
import CreateUsagePlanRequest from '../model/CreateUsagePlanRequest';
import CreateVpcLinkRequest from '../model/CreateVpcLinkRequest';
import Deployment from '../model/Deployment';
import Deployments from '../model/Deployments';
import DocumentationPart from '../model/DocumentationPart';
import DocumentationPartIds from '../model/DocumentationPartIds';
import DocumentationParts from '../model/DocumentationParts';
import DocumentationVersion from '../model/DocumentationVersion';
import DocumentationVersions from '../model/DocumentationVersions';
import DomainName from '../model/DomainName';
import DomainNames from '../model/DomainNames';
import ExportResponse from '../model/ExportResponse';
import GatewayResponse from '../model/GatewayResponse';
import GatewayResponses from '../model/GatewayResponses';
import GenerateClientCertificateRequest from '../model/GenerateClientCertificateRequest';
import ImportApiKeysRequest from '../model/ImportApiKeysRequest';
import ImportDocumentationPartsRequest from '../model/ImportDocumentationPartsRequest';
import ImportRestApiRequest from '../model/ImportRestApiRequest';
import Integration from '../model/Integration';
import IntegrationResponse from '../model/IntegrationResponse';
import Method from '../model/Method';
import MethodResponse from '../model/MethodResponse';
import Model from '../model/Model';
import Models from '../model/Models';
import PutGatewayResponseRequest from '../model/PutGatewayResponseRequest';
import PutIntegrationRequest from '../model/PutIntegrationRequest';
import PutIntegrationResponseRequest from '../model/PutIntegrationResponseRequest';
import PutMethodRequest from '../model/PutMethodRequest';
import PutMethodResponseRequest from '../model/PutMethodResponseRequest';
import PutRestApiRequest from '../model/PutRestApiRequest';
import RequestValidator from '../model/RequestValidator';
import RequestValidators from '../model/RequestValidators';
import Resource from '../model/Resource';
import Resources from '../model/Resources';
import RestApi from '../model/RestApi';
import RestApis from '../model/RestApis';
import SdkResponse from '../model/SdkResponse';
import SdkType from '../model/SdkType';
import SdkTypes from '../model/SdkTypes';
import Stage from '../model/Stage';
import Stages from '../model/Stages';
import TagResourceRequest from '../model/TagResourceRequest';
import Tags from '../model/Tags';
import Template from '../model/Template';
import TestInvokeAuthorizerRequest from '../model/TestInvokeAuthorizerRequest';
import TestInvokeAuthorizerResponse from '../model/TestInvokeAuthorizerResponse';
import TestInvokeMethodRequest from '../model/TestInvokeMethodRequest';
import TestInvokeMethodResponse from '../model/TestInvokeMethodResponse';
import UpdateApiKeyRequest from '../model/UpdateApiKeyRequest';
import Usage from '../model/Usage';
import UsagePlan from '../model/UsagePlan';
import UsagePlanKey from '../model/UsagePlanKey';
import UsagePlanKeys from '../model/UsagePlanKeys';
import UsagePlans from '../model/UsagePlans';
import VpcLink from '../model/VpcLink';
import VpcLinks from '../model/VpcLinks';

/**
* Default service.
* @module api/DefaultApi
* @version 2015-07-09
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApiKey operation.
     * @callback module:api/DefaultApi~createApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an ApiKey resource. 
     * @param {module:model/CreateApiKeyRequest} createApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    createApiKey(createApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApiKeyRequest;
      // verify the required parameter 'createApiKeyRequest' is set
      if (createApiKeyRequest === undefined || createApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'createApiKeyRequest' when calling createApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/apikeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizer operation.
     * @callback module:api/DefaultApi~createAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorizer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new Authorizer resource to an existing RestApi resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/CreateAuthorizerRequest} createAuthorizerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorizer}
     */
    createAuthorizer(restapiId, createAuthorizerRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAuthorizerRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling createAuthorizer");
      }
      // verify the required parameter 'createAuthorizerRequest' is set
      if (createAuthorizerRequest === undefined || createAuthorizerRequest === null) {
        throw new Error("Missing the required parameter 'createAuthorizerRequest' when calling createAuthorizer");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Authorizer;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/authorizers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBasePathMapping operation.
     * @callback module:api/DefaultApi~createBasePathMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasePathMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new BasePathMapping resource.
     * @param {String} domainName The domain name of the BasePathMapping resource to create.
     * @param {module:model/CreateBasePathMappingRequest} createBasePathMappingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBasePathMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasePathMapping}
     */
    createBasePathMapping(domainName, createBasePathMappingRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBasePathMappingRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling createBasePathMapping");
      }
      // verify the required parameter 'createBasePathMappingRequest' is set
      if (createBasePathMappingRequest === undefined || createBasePathMappingRequest === null) {
        throw new Error("Missing the required parameter 'createBasePathMappingRequest' when calling createBasePathMapping");
      }

      let pathParams = {
        'domain_name': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasePathMapping;
      return this.apiClient.callApi(
        '/domainnames/{domain_name}/basepathmappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeployment operation.
     * @callback module:api/DefaultApi~createDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Deployment resource, which makes a specified RestApi callable over the internet.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/CreateDeploymentRequest} createDeploymentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    createDeployment(restapiId, createDeploymentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDeploymentRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling createDeployment");
      }
      // verify the required parameter 'createDeploymentRequest' is set
      if (createDeploymentRequest === undefined || createDeploymentRequest === null) {
        throw new Error("Missing the required parameter 'createDeploymentRequest' when calling createDeployment");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDocumentationPart operation.
     * @callback module:api/DefaultApi~createDocumentationPartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationPart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a documentation part.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/CreateDocumentationPartRequest} createDocumentationPartRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDocumentationPartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationPart}
     */
    createDocumentationPart(restapiId, createDocumentationPartRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDocumentationPartRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling createDocumentationPart");
      }
      // verify the required parameter 'createDocumentationPartRequest' is set
      if (createDocumentationPartRequest === undefined || createDocumentationPartRequest === null) {
        throw new Error("Missing the required parameter 'createDocumentationPartRequest' when calling createDocumentationPart");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentationPart;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/parts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDocumentationVersion operation.
     * @callback module:api/DefaultApi~createDocumentationVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a documentation version
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/CreateDocumentationVersionRequest} createDocumentationVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDocumentationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationVersion}
     */
    createDocumentationVersion(restapiId, createDocumentationVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDocumentationVersionRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling createDocumentationVersion");
      }
      // verify the required parameter 'createDocumentationVersionRequest' is set
      if (createDocumentationVersionRequest === undefined || createDocumentationVersionRequest === null) {
        throw new Error("Missing the required parameter 'createDocumentationVersionRequest' when calling createDocumentationVersion");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentationVersion;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDomainName operation.
     * @callback module:api/DefaultApi~createDomainNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new domain name.
     * @param {module:model/CreateDomainNameRequest} createDomainNameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainName}
     */
    createDomainName(createDomainNameRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDomainNameRequest;
      // verify the required parameter 'createDomainNameRequest' is set
      if (createDomainNameRequest === undefined || createDomainNameRequest === null) {
        throw new Error("Missing the required parameter 'createDomainNameRequest' when calling createDomainName");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainName;
      return this.apiClient.callApi(
        '/domainnames', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModel operation.
     * @callback module:api/DefaultApi~createModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new Model resource to an existing RestApi resource.
     * @param {String} restapiId The RestApi identifier under which the Model will be created.
     * @param {module:model/CreateModelRequest} createModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    createModel(restapiId, createModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createModelRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling createModel");
      }
      // verify the required parameter 'createModelRequest' is set
      if (createModelRequest === undefined || createModelRequest === null) {
        throw new Error("Missing the required parameter 'createModelRequest' when calling createModel");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRequestValidator operation.
     * @callback module:api/DefaultApi~createRequestValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestValidator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a RequestValidator of a given RestApi.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/CreateRequestValidatorRequest} createRequestValidatorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRequestValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestValidator}
     */
    createRequestValidator(restapiId, createRequestValidatorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRequestValidatorRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling createRequestValidator");
      }
      // verify the required parameter 'createRequestValidatorRequest' is set
      if (createRequestValidatorRequest === undefined || createRequestValidatorRequest === null) {
        throw new Error("Missing the required parameter 'createRequestValidatorRequest' when calling createRequestValidator");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RequestValidator;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/requestvalidators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResource operation.
     * @callback module:api/DefaultApi~createResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Resource resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} parentId The parent resource's identifier.
     * @param {module:model/CreateResourceRequest} createResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resource}
     */
    createResource(restapiId, parentId, createResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createResourceRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling createResource");
      }
      // verify the required parameter 'parentId' is set
      if (parentId === undefined || parentId === null) {
        throw new Error("Missing the required parameter 'parentId' when calling createResource");
      }
      // verify the required parameter 'createResourceRequest' is set
      if (createResourceRequest === undefined || createResourceRequest === null) {
        throw new Error("Missing the required parameter 'createResourceRequest' when calling createResource");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'parent_id': parentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Resource;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{parent_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRestApi operation.
     * @callback module:api/DefaultApi~createRestApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new RestApi resource.
     * @param {module:model/CreateRestApiRequest} createRestApiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRestApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApi}
     */
    createRestApi(createRestApiRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRestApiRequest;
      // verify the required parameter 'createRestApiRequest' is set
      if (createRestApiRequest === undefined || createRestApiRequest === null) {
        throw new Error("Missing the required parameter 'createRestApiRequest' when calling createRestApi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestApi;
      return this.apiClient.callApi(
        '/restapis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStage operation.
     * @callback module:api/DefaultApi~createStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Stage resource that references a pre-existing Deployment for the API. 
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/CreateStageRequest} createStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    createStage(restapiId, createStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStageRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling createStage");
      }
      // verify the required parameter 'createStageRequest' is set
      if (createStageRequest === undefined || createStageRequest === null) {
        throw new Error("Missing the required parameter 'createStageRequest' when calling createStage");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Stage;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUsagePlan operation.
     * @callback module:api/DefaultApi~createUsagePlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagePlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload. 
     * @param {module:model/CreateUsagePlanRequest} createUsagePlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUsagePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagePlan}
     */
    createUsagePlan(createUsagePlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUsagePlanRequest;
      // verify the required parameter 'createUsagePlanRequest' is set
      if (createUsagePlanRequest === undefined || createUsagePlanRequest === null) {
        throw new Error("Missing the required parameter 'createUsagePlanRequest' when calling createUsagePlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsagePlan;
      return this.apiClient.callApi(
        '/usageplans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUsagePlanKey operation.
     * @callback module:api/DefaultApi~createUsagePlanKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagePlanKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a usage plan key for adding an existing API key to a usage plan.
     * @param {String} usageplanId The Id of the UsagePlan resource representing the usage plan containing the to-be-created UsagePlanKey resource representing a plan customer.
     * @param {module:model/CreateUsagePlanKeyRequest} createUsagePlanKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUsagePlanKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagePlanKey}
     */
    createUsagePlanKey(usageplanId, createUsagePlanKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUsagePlanKeyRequest;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling createUsagePlanKey");
      }
      // verify the required parameter 'createUsagePlanKeyRequest' is set
      if (createUsagePlanKeyRequest === undefined || createUsagePlanKeyRequest === null) {
        throw new Error("Missing the required parameter 'createUsagePlanKeyRequest' when calling createUsagePlanKey");
      }

      let pathParams = {
        'usageplanId': usageplanId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsagePlanKey;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVpcLink operation.
     * @callback module:api/DefaultApi~createVpcLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpcLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
     * @param {module:model/CreateVpcLinkRequest} createVpcLinkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVpcLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpcLink}
     */
    createVpcLink(createVpcLinkRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVpcLinkRequest;
      // verify the required parameter 'createVpcLinkRequest' is set
      if (createVpcLinkRequest === undefined || createVpcLinkRequest === null) {
        throw new Error("Missing the required parameter 'createVpcLinkRequest' when calling createVpcLink");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VpcLink;
      return this.apiClient.callApi(
        '/vpclinks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiKey operation.
     * @callback module:api/DefaultApi~deleteApiKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the ApiKey resource.
     * @param {String} apiKey The identifier of the ApiKey resource to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiKey(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteApiKey");
      }

      let pathParams = {
        'api_Key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apikeys/{api_Key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizer operation.
     * @callback module:api/DefaultApi~deleteAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Authorizer resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} authorizerId The identifier of the Authorizer resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAuthorizer(restapiId, authorizerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteAuthorizer");
      }
      // verify the required parameter 'authorizerId' is set
      if (authorizerId === undefined || authorizerId === null) {
        throw new Error("Missing the required parameter 'authorizerId' when calling deleteAuthorizer");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'authorizer_id': authorizerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/authorizers/{authorizer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBasePathMapping operation.
     * @callback module:api/DefaultApi~deleteBasePathMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the BasePathMapping resource.
     * @param {String} domainName The domain name of the BasePathMapping resource to delete.
     * @param {String} basePath <p>The base path name of the BasePathMapping resource to delete.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBasePathMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBasePathMapping(domainName, basePath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteBasePathMapping");
      }
      // verify the required parameter 'basePath' is set
      if (basePath === undefined || basePath === null) {
        throw new Error("Missing the required parameter 'basePath' when calling deleteBasePathMapping");
      }

      let pathParams = {
        'domain_name': domainName,
        'base_path': basePath
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domainnames/{domain_name}/basepathmappings/{base_path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClientCertificate operation.
     * @callback module:api/DefaultApi~deleteClientCertificateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the ClientCertificate resource.
     * @param {String} clientcertificateId The identifier of the ClientCertificate resource to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteClientCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteClientCertificate(clientcertificateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientcertificateId' is set
      if (clientcertificateId === undefined || clientcertificateId === null) {
        throw new Error("Missing the required parameter 'clientcertificateId' when calling deleteClientCertificate");
      }

      let pathParams = {
        'clientcertificate_id': clientcertificateId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clientcertificates/{clientcertificate_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeployment operation.
     * @callback module:api/DefaultApi~deleteDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources associated with it.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} deploymentId The identifier of the Deployment resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeployment(restapiId, deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteDeployment");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteDeployment");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'deployment_id': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/deployments/{deployment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocumentationPart operation.
     * @callback module:api/DefaultApi~deleteDocumentationPartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a documentation part
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} partId The identifier of the to-be-deleted documentation part.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDocumentationPartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocumentationPart(restapiId, partId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteDocumentationPart");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling deleteDocumentationPart");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'part_id': partId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/parts/{part_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocumentationVersion operation.
     * @callback module:api/DefaultApi~deleteDocumentationVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a documentation version.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} docVersion The version identifier of a to-be-deleted documentation snapshot.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDocumentationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocumentationVersion(restapiId, docVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteDocumentationVersion");
      }
      // verify the required parameter 'docVersion' is set
      if (docVersion === undefined || docVersion === null) {
        throw new Error("Missing the required parameter 'docVersion' when calling deleteDocumentationVersion");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'doc_version': docVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/versions/{doc_version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomainName operation.
     * @callback module:api/DefaultApi~deleteDomainNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the DomainName resource.
     * @param {String} domainName The name of the DomainName resource to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDomainName(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteDomainName");
      }

      let pathParams = {
        'domain_name': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domainnames/{domain_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGatewayResponse operation.
     * @callback module:api/DefaultApi~deleteGatewayResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/String} responseType The response type of the associated GatewayResponse.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteGatewayResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGatewayResponse(restapiId, responseType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteGatewayResponse");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling deleteGatewayResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'response_type': responseType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/gatewayresponses/{response_type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegration operation.
     * @callback module:api/DefaultApi~deleteIntegrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a delete integration.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Specifies a delete integration request's resource identifier.
     * @param {String} httpMethod Specifies a delete integration request's HTTP method.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntegration(restapiId, resourceId, httpMethod, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteIntegration");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteIntegration");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling deleteIntegration");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegrationResponse operation.
     * @callback module:api/DefaultApi~deleteIntegrationResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a delete integration response.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Specifies a delete integration response request's resource identifier.
     * @param {String} httpMethod Specifies a delete integration response request's HTTP method.
     * @param {String} statusCode Specifies a delete integration response request's status code.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIntegrationResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntegrationResponse(restapiId, resourceId, httpMethod, statusCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteIntegrationResponse");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteIntegrationResponse");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling deleteIntegrationResponse");
      }
      // verify the required parameter 'statusCode' is set
      if (statusCode === undefined || statusCode === null) {
        throw new Error("Missing the required parameter 'statusCode' when calling deleteIntegrationResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod,
        'status_code': statusCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMethod operation.
     * @callback module:api/DefaultApi~deleteMethodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Method resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The Resource identifier for the Method resource.
     * @param {String} httpMethod The HTTP verb of the Method resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMethodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMethod(restapiId, resourceId, httpMethod, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteMethod");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteMethod");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling deleteMethod");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMethodResponse operation.
     * @callback module:api/DefaultApi~deleteMethodResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing MethodResponse resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The Resource identifier for the MethodResponse resource.
     * @param {String} httpMethod The HTTP verb of the Method resource.
     * @param {String} statusCode The status code identifier for the MethodResponse resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMethodResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMethodResponse(restapiId, resourceId, httpMethod, statusCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteMethodResponse");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteMethodResponse");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling deleteMethodResponse");
      }
      // verify the required parameter 'statusCode' is set
      if (statusCode === undefined || statusCode === null) {
        throw new Error("Missing the required parameter 'statusCode' when calling deleteMethodResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod,
        'status_code': statusCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback module:api/DefaultApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a model.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} modelName The name of the model to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModel(restapiId, modelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteModel");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling deleteModel");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'model_name': modelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/models/{model_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRequestValidator operation.
     * @callback module:api/DefaultApi~deleteRequestValidatorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a RequestValidator of a given RestApi.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} requestvalidatorId The identifier of the RequestValidator to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRequestValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRequestValidator(restapiId, requestvalidatorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteRequestValidator");
      }
      // verify the required parameter 'requestvalidatorId' is set
      if (requestvalidatorId === undefined || requestvalidatorId === null) {
        throw new Error("Missing the required parameter 'requestvalidatorId' when calling deleteRequestValidator");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'requestvalidator_id': requestvalidatorId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResource operation.
     * @callback module:api/DefaultApi~deleteResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Resource resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The identifier of the Resource resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteResource(restapiId, resourceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling deleteResource");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRestApi operation.
     * @callback module:api/DefaultApi~deleteRestApiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified API.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRestApiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRestApi(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteRestApi");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStage operation.
     * @callback module:api/DefaultApi~deleteStageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Stage resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} stageName The name of the Stage resource to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteStageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStage(restapiId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling deleteStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling deleteStage");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'stage_name': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages/{stage_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsagePlan operation.
     * @callback module:api/DefaultApi~deleteUsagePlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a usage plan of a given plan Id.
     * @param {String} usageplanId The Id of the to-be-deleted usage plan.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUsagePlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUsagePlan(usageplanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling deleteUsagePlan");
      }

      let pathParams = {
        'usageplanId': usageplanId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsagePlanKey operation.
     * @callback module:api/DefaultApi~deleteUsagePlanKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a usage plan key and remove the underlying API key from the associated usage plan.
     * @param {String} usageplanId The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.
     * @param {String} keyId The Id of the UsagePlanKey resource to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUsagePlanKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUsagePlanKey(usageplanId, keyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling deleteUsagePlanKey");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteUsagePlanKey");
      }

      let pathParams = {
        'usageplanId': usageplanId,
        'keyId': keyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}/keys/{keyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVpcLink operation.
     * @callback module:api/DefaultApi~deleteVpcLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing VpcLink of a specified identifier.
     * @param {String} vpclinkId The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVpcLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVpcLink(vpclinkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vpclinkId' is set
      if (vpclinkId === undefined || vpclinkId === null) {
        throw new Error("Missing the required parameter 'vpclinkId' when calling deleteVpcLink");
      }

      let pathParams = {
        'vpclink_id': vpclinkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vpclinks/{vpclink_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flushStageAuthorizersCache operation.
     * @callback module:api/DefaultApi~flushStageAuthorizersCacheCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flushes all authorizer cache entries on a stage.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} stageName The name of the stage to flush.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~flushStageAuthorizersCacheCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flushStageAuthorizersCache(restapiId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling flushStageAuthorizersCache");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling flushStageAuthorizersCache");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'stage_name': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flushStageCache operation.
     * @callback module:api/DefaultApi~flushStageCacheCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flushes a stage's cache.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} stageName The name of the stage to flush its cache.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~flushStageCacheCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flushStageCache(restapiId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling flushStageCache");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling flushStageCache");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'stage_name': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages/{stage_name}/cache/data', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateClientCertificate operation.
     * @callback module:api/DefaultApi~generateClientCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a ClientCertificate resource.
     * @param {module:model/GenerateClientCertificateRequest} generateClientCertificateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~generateClientCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCertificate}
     */
    generateClientCertificate(generateClientCertificateRequest, opts, callback) {
      opts = opts || {};
      let postBody = generateClientCertificateRequest;
      // verify the required parameter 'generateClientCertificateRequest' is set
      if (generateClientCertificateRequest === undefined || generateClientCertificateRequest === null) {
        throw new Error("Missing the required parameter 'generateClientCertificateRequest' when calling generateClientCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientCertificate;
      return this.apiClient.callApi(
        '/clientcertificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/DefaultApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the current Account resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    getAccount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKey operation.
     * @callback module:api/DefaultApi~getApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the current ApiKey resource.
     * @param {String} apiKey The identifier of the ApiKey resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [includeValue] A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains the key value.
     * @param {module:api/DefaultApi~getApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    getApiKey(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getApiKey");
      }

      let pathParams = {
        'api_Key': apiKey
      };
      let queryParams = {
        'includeValue': opts['includeValue']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/apikeys/{api_Key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKeys operation.
     * @callback module:api/DefaultApi~getApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the current ApiKeys resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {String} [name] The name of queried API keys.
     * @param {String} [customerId] The identifier of a customer in AWS Marketplace or an external system, such as a developer portal.
     * @param {Boolean} [includeValues] A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.
     * @param {module:api/DefaultApi~getApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeys}
     */
    getApiKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit'],
        'name': opts['name'],
        'customerId': opts['customerId'],
        'includeValues': opts['includeValues']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKeys;
      return this.apiClient.callApi(
        '/apikeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizer operation.
     * @callback module:api/DefaultApi~getAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorizer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe an existing Authorizer resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} authorizerId The identifier of the Authorizer resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorizer}
     */
    getAuthorizer(restapiId, authorizerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getAuthorizer");
      }
      // verify the required parameter 'authorizerId' is set
      if (authorizerId === undefined || authorizerId === null) {
        throw new Error("Missing the required parameter 'authorizerId' when calling getAuthorizer");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'authorizer_id': authorizerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Authorizer;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/authorizers/{authorizer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizers operation.
     * @callback module:api/DefaultApi~getAuthorizersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorizers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe an existing Authorizers resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getAuthorizersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorizers}
     */
    getAuthorizers(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getAuthorizers");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Authorizers;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/authorizers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasePathMapping operation.
     * @callback module:api/DefaultApi~getBasePathMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasePathMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe a BasePathMapping resource.
     * @param {String} domainName The domain name of the BasePathMapping resource to be described.
     * @param {String} basePath The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify any base path name after the domain name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBasePathMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasePathMapping}
     */
    getBasePathMapping(domainName, basePath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getBasePathMapping");
      }
      // verify the required parameter 'basePath' is set
      if (basePath === undefined || basePath === null) {
        throw new Error("Missing the required parameter 'basePath' when calling getBasePathMapping");
      }

      let pathParams = {
        'domain_name': domainName,
        'base_path': basePath
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasePathMapping;
      return this.apiClient.callApi(
        '/domainnames/{domain_name}/basepathmappings/{base_path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasePathMappings operation.
     * @callback module:api/DefaultApi~getBasePathMappingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasePathMappings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a collection of BasePathMapping resources.
     * @param {String} domainName The domain name of a BasePathMapping resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getBasePathMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasePathMappings}
     */
    getBasePathMappings(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getBasePathMappings");
      }

      let pathParams = {
        'domain_name': domainName
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasePathMappings;
      return this.apiClient.callApi(
        '/domainnames/{domain_name}/basepathmappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientCertificate operation.
     * @callback module:api/DefaultApi~getClientCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the current ClientCertificate resource.
     * @param {String} clientcertificateId The identifier of the ClientCertificate resource to be described.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getClientCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCertificate}
     */
    getClientCertificate(clientcertificateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientcertificateId' is set
      if (clientcertificateId === undefined || clientcertificateId === null) {
        throw new Error("Missing the required parameter 'clientcertificateId' when calling getClientCertificate");
      }

      let pathParams = {
        'clientcertificate_id': clientcertificateId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientCertificate;
      return this.apiClient.callApi(
        '/clientcertificates/{clientcertificate_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientCertificates operation.
     * @callback module:api/DefaultApi~getClientCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCertificates} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a collection of ClientCertificate resources.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getClientCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCertificates}
     */
    getClientCertificates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientCertificates;
      return this.apiClient.callApi(
        '/clientcertificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployment operation.
     * @callback module:api/DefaultApi~getDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a Deployment resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} deploymentId The identifier of the Deployment resource to get information about.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [embed] A query parameter to retrieve the specified embedded resources of the returned Deployment resource in the response. In a REST API call, this <code>embed</code> parameter value is a list of comma-separated strings, as in <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2</code>. The SDK and other platform-dependent libraries might use a different format for the list. Currently, this request supports only retrieval of the embedded API summary this way. Hence, the parameter value must be a single-valued list containing only the <code>\"apisummary\"</code> string. For example, <code>GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary</code>.
     * @param {module:api/DefaultApi~getDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    getDeployment(restapiId, deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getDeployment");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getDeployment");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'deployment_id': deploymentId
      };
      let queryParams = {
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/deployments/{deployment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployments operation.
     * @callback module:api/DefaultApi~getDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a Deployments collection.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployments}
     */
    getDeployments(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getDeployments");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployments;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentationPart operation.
     * @callback module:api/DefaultApi~getDocumentationPartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationPart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a documentation part.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} partId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDocumentationPartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationPart}
     */
    getDocumentationPart(restapiId, partId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getDocumentationPart");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling getDocumentationPart");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'part_id': partId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentationPart;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/parts/{part_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentationParts operation.
     * @callback module:api/DefaultApi~getDocumentationPartsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationParts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets documentation parts.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [type] The type of API entities of the to-be-retrieved documentation parts. 
     * @param {String} [name] The name of API entities of the to-be-retrieved documentation parts.
     * @param {String} [path] The path of API entities of the to-be-retrieved documentation parts.
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:model/String} [locationStatus] The status of the API documentation parts to retrieve. Valid values are <code>DOCUMENTED</code> for retrieving DocumentationPart resources with content and <code>UNDOCUMENTED</code> for DocumentationPart resources without content.
     * @param {module:api/DefaultApi~getDocumentationPartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationParts}
     */
    getDocumentationParts(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getDocumentationParts");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'type': opts['type'],
        'name': opts['name'],
        'path': opts['path'],
        'position': opts['position'],
        'limit': opts['limit'],
        'locationStatus': opts['locationStatus']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentationParts;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/parts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentationVersion operation.
     * @callback module:api/DefaultApi~getDocumentationVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a documentation version.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} docVersion The version identifier of the to-be-retrieved documentation snapshot.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDocumentationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationVersion}
     */
    getDocumentationVersion(restapiId, docVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getDocumentationVersion");
      }
      // verify the required parameter 'docVersion' is set
      if (docVersion === undefined || docVersion === null) {
        throw new Error("Missing the required parameter 'docVersion' when calling getDocumentationVersion");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'doc_version': docVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentationVersion;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/versions/{doc_version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentationVersions operation.
     * @callback module:api/DefaultApi~getDocumentationVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationVersions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets documentation versions.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getDocumentationVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationVersions}
     */
    getDocumentationVersions(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getDocumentationVersions");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentationVersions;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainName operation.
     * @callback module:api/DefaultApi~getDomainNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
     * @param {String} domainName The name of the DomainName resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainName}
     */
    getDomainName(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getDomainName");
      }

      let pathParams = {
        'domain_name': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainName;
      return this.apiClient.callApi(
        '/domainnames/{domain_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainNames operation.
     * @callback module:api/DefaultApi~getDomainNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainNames} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a collection of DomainName resources.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getDomainNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainNames}
     */
    getDomainNames(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainNames;
      return this.apiClient.callApi(
        '/domainnames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExport operation.
     * @callback module:api/DefaultApi~getExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports a deployed version of a RestApi in a specified format.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} stageName The name of the Stage that will be exported.
     * @param {String} exportType The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Object.<String, {String: String}>} [parameters] A key-value map of query string parameters that specify properties of the export, depending on the requested <code>exportType</code>. For <code>exportType</code> <code>oas30</code> and <code>swagger</code>, any combination of the following parameters are supported: <code>extensions='integrations'</code> or <code>extensions='apigateway'</code> will export the API with x-amazon-apigateway-integration extensions. <code>extensions='authorizers'</code> will export the API with x-amazon-apigateway-authorizer extensions. <code>postman</code> will export the API with Postman extensions, allowing for import to the Postman tool
     * @param {String} [accept] The content-type of the export, for example <code>application/json</code>. Currently <code>application/json</code> and <code>application/yaml</code> are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>. This should be specified in the <code>Accept</code> header for direct API requests.
     * @param {module:api/DefaultApi~getExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportResponse}
     */
    getExport(restapiId, stageName, exportType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getExport");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling getExport");
      }
      // verify the required parameter 'exportType' is set
      if (exportType === undefined || exportType === null) {
        throw new Error("Missing the required parameter 'exportType' when calling getExport");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'stage_name': stageName,
        'export_type': exportType
      };
      let queryParams = {
        'parameters': opts['parameters']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGatewayResponse operation.
     * @callback module:api/DefaultApi~getGatewayResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a GatewayResponse of a specified response type on the given RestApi.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/String} responseType The response type of the associated GatewayResponse.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getGatewayResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayResponse}
     */
    getGatewayResponse(restapiId, responseType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getGatewayResponse");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling getGatewayResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'response_type': responseType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GatewayResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/gatewayresponses/{response_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGatewayResponses operation.
     * @callback module:api/DefaultApi~getGatewayResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayResponses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set. The GatewayResponse collection does not support pagination and the position does not apply here.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500. The GatewayResponses collection does not support pagination and the limit does not apply here.
     * @param {module:api/DefaultApi~getGatewayResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayResponses}
     */
    getGatewayResponses(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getGatewayResponses");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GatewayResponses;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/gatewayresponses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegration operation.
     * @callback module:api/DefaultApi~getIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the integration settings.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Specifies a get integration request's resource identifier
     * @param {String} httpMethod Specifies a get integration request's HTTP method.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Integration}
     */
    getIntegration(restapiId, resourceId, httpMethod, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getIntegration");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getIntegration");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling getIntegration");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Integration;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrationResponse operation.
     * @callback module:api/DefaultApi~getIntegrationResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a get integration response.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Specifies a get integration response request's resource identifier.
     * @param {String} httpMethod Specifies a get integration response request's HTTP method.
     * @param {String} statusCode Specifies a get integration response request's status code.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIntegrationResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationResponse}
     */
    getIntegrationResponse(restapiId, resourceId, httpMethod, statusCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getIntegrationResponse");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getIntegrationResponse");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling getIntegrationResponse");
      }
      // verify the required parameter 'statusCode' is set
      if (statusCode === undefined || statusCode === null) {
        throw new Error("Missing the required parameter 'statusCode' when calling getIntegrationResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod,
        'status_code': statusCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMethod operation.
     * @callback module:api/DefaultApi~getMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Method} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe an existing Method resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The Resource identifier for the Method resource.
     * @param {String} httpMethod Specifies the method request's HTTP method type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Method}
     */
    getMethod(restapiId, resourceId, httpMethod, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getMethod");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getMethod");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling getMethod");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Method;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMethodResponse operation.
     * @callback module:api/DefaultApi~getMethodResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a MethodResponse resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The Resource identifier for the MethodResponse resource.
     * @param {String} httpMethod The HTTP verb of the Method resource.
     * @param {String} statusCode The status code for the MethodResponse resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMethodResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodResponse}
     */
    getMethodResponse(restapiId, resourceId, httpMethod, statusCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getMethodResponse");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getMethodResponse");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling getMethodResponse");
      }
      // verify the required parameter 'statusCode' is set
      if (statusCode === undefined || statusCode === null) {
        throw new Error("Missing the required parameter 'statusCode' when calling getMethodResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod,
        'status_code': statusCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MethodResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModel operation.
     * @callback module:api/DefaultApi~getModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing model defined for a RestApi resource.
     * @param {String} restapiId The RestApi identifier under which the Model exists.
     * @param {String} modelName The name of the model as an identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [flatten] A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.
     * @param {module:api/DefaultApi~getModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    getModel(restapiId, modelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getModel");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling getModel");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'model_name': modelName
      };
      let queryParams = {
        'flatten': opts['flatten']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/models/{model_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelTemplate operation.
     * @callback module:api/DefaultApi~getModelTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Template} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a sample mapping template that can be used to transform a payload into the structure of a model.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} modelName The name of the model for which to generate a template.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getModelTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Template}
     */
    getModelTemplate(restapiId, modelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getModelTemplate");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling getModelTemplate");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'model_name': modelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Template;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/models/{model_name}/default_template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModels operation.
     * @callback module:api/DefaultApi~getModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Models} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes existing Models defined for a RestApi resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Models}
     */
    getModels(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getModels");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Models;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRequestValidator operation.
     * @callback module:api/DefaultApi~getRequestValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestValidator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a RequestValidator of a given RestApi.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} requestvalidatorId The identifier of the RequestValidator to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRequestValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestValidator}
     */
    getRequestValidator(restapiId, requestvalidatorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getRequestValidator");
      }
      // verify the required parameter 'requestvalidatorId' is set
      if (requestvalidatorId === undefined || requestvalidatorId === null) {
        throw new Error("Missing the required parameter 'requestvalidatorId' when calling getRequestValidator");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'requestvalidator_id': requestvalidatorId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestValidator;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRequestValidators operation.
     * @callback module:api/DefaultApi~getRequestValidatorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestValidators} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RequestValidators collection of a given RestApi.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getRequestValidatorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestValidators}
     */
    getRequestValidators(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getRequestValidators");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestValidators;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/requestvalidators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResource operation.
     * @callback module:api/DefaultApi~getResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information about a resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The identifier for the Resource resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [embed] A query parameter to retrieve the specified resources embedded in the returned Resource representation in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the <code>\"methods\"</code> string. For example, <code>GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods</code>.
     * @param {module:api/DefaultApi~getResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resource}
     */
    getResource(restapiId, resourceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling getResource");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId
      };
      let queryParams = {
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Resource;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResources operation.
     * @callback module:api/DefaultApi~getResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resources} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists information about a collection of Resource resources.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {Array.<String>} [embed] A query parameter used to retrieve the specified resources embedded in the returned Resources resource in the response. This <code>embed</code> parameter value is a list of comma-separated strings. Currently, the request supports only retrieval of the embedded Method resources this way. The query parameter value must be a single-valued list and contain the <code>\"methods\"</code> string. For example, <code>GET /restapis/{restapi_id}/resources?embed=methods</code>.
     * @param {module:api/DefaultApi~getResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resources}
     */
    getResources(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getResources");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit'],
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Resources;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRestApi operation.
     * @callback module:api/DefaultApi~getRestApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the RestApi resource in the collection.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRestApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApi}
     */
    getRestApi(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getRestApi");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestApi;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRestApis operation.
     * @callback module:api/DefaultApi~getRestApisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the RestApis resources for your collection.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getRestApisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApis}
     */
    getRestApis(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestApis;
      return this.apiClient.callApi(
        '/restapis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSdk operation.
     * @callback module:api/DefaultApi~getSdkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SdkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a client SDK for a RestApi and Stage.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} stageName The name of the Stage that the SDK will use.
     * @param {String} sdkType The language for the generated SDK. Currently <code>java</code>, <code>javascript</code>, <code>android</code>, <code>objectivec</code> (for iOS), <code>swift</code> (for iOS), and <code>ruby</code> are supported.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Object.<String, {String: String}>} [parameters] A string-to-string key-value map of query parameters <code>sdkType</code>-dependent properties of the SDK. For <code>sdkType</code> of <code>objectivec</code> or <code>swift</code>, a parameter named <code>classPrefix</code> is required. For <code>sdkType</code> of <code>android</code>, parameters named <code>groupId</code>, <code>artifactId</code>, <code>artifactVersion</code>, and <code>invokerPackage</code> are required. For <code>sdkType</code> of <code>java</code>, parameters named <code>serviceName</code> and <code>javaPackageName</code> are required. 
     * @param {module:api/DefaultApi~getSdkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SdkResponse}
     */
    getSdk(restapiId, stageName, sdkType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getSdk");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling getSdk");
      }
      // verify the required parameter 'sdkType' is set
      if (sdkType === undefined || sdkType === null) {
        throw new Error("Missing the required parameter 'sdkType' when calling getSdk");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'stage_name': stageName,
        'sdk_type': sdkType
      };
      let queryParams = {
        'parameters': opts['parameters']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SdkResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSdkType operation.
     * @callback module:api/DefaultApi~getSdkTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SdkType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an SDK type.
     * @param {String} sdktypeId The identifier of the queried SdkType instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSdkTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SdkType}
     */
    getSdkType(sdktypeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sdktypeId' is set
      if (sdktypeId === undefined || sdktypeId === null) {
        throw new Error("Missing the required parameter 'sdktypeId' when calling getSdkType");
      }

      let pathParams = {
        'sdktype_id': sdktypeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SdkType;
      return this.apiClient.callApi(
        '/sdktypes/{sdktype_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSdkTypes operation.
     * @callback module:api/DefaultApi~getSdkTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SdkTypes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets SDK types
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getSdkTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SdkTypes}
     */
    getSdkTypes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SdkTypes;
      return this.apiClient.callApi(
        '/sdktypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStage operation.
     * @callback module:api/DefaultApi~getStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a Stage resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} stageName The name of the Stage resource to get information about.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    getStage(restapiId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling getStage");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'stage_name': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stage;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages/{stage_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStages operation.
     * @callback module:api/DefaultApi~getStagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about one or more Stage resources.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [deploymentId] The stages' deployment identifiers.
     * @param {module:api/DefaultApi~getStagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stages}
     */
    getStages(restapiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling getStages");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'deploymentId': opts['deploymentId']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Stages;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTags operation.
     * @callback module:api/DefaultApi~getTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Tags collection for a given resource.
     * @param {String} resourceArn The ARN of a resource that can be tagged.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] (Not currently supported) The current pagination position in the paged result set.
     * @param {Number} [limit] (Not currently supported) The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tags}
     */
    getTags(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling getTags");
      }

      let pathParams = {
        'resource_arn': resourceArn
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tags;
      return this.apiClient.callApi(
        '/tags/{resource_arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsage operation.
     * @callback module:api/DefaultApi~getUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the usage data of a usage plan in a specified time interval.
     * @param {String} usageplanId The Id of the usage plan associated with the usage data.
     * @param {String} startDate The starting date (e.g., 2016-01-01) of the usage data.
     * @param {String} endDate The ending date (e.g., 2016-12-31) of the usage data.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [keyId] The Id of the API key associated with the resultant usage data.
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Usage}
     */
    getUsage(usageplanId, startDate, endDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling getUsage");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling getUsage");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling getUsage");
      }

      let pathParams = {
        'usageplanId': usageplanId
      };
      let queryParams = {
        'keyId': opts['keyId'],
        'startDate': startDate,
        'endDate': endDate,
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Usage;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}/usage#startDate&endDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsagePlan operation.
     * @callback module:api/DefaultApi~getUsagePlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagePlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a usage plan of a given plan identifier.
     * @param {String} usageplanId The identifier of the UsagePlan resource to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getUsagePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagePlan}
     */
    getUsagePlan(usageplanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling getUsagePlan");
      }

      let pathParams = {
        'usageplanId': usageplanId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagePlan;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsagePlanKey operation.
     * @callback module:api/DefaultApi~getUsagePlanKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagePlanKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a usage plan key of a given key identifier.
     * @param {String} usageplanId The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
     * @param {String} keyId The key Id of the to-be-retrieved UsagePlanKey resource representing a plan customer.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getUsagePlanKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagePlanKey}
     */
    getUsagePlanKey(usageplanId, keyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling getUsagePlanKey");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling getUsagePlanKey");
      }

      let pathParams = {
        'usageplanId': usageplanId,
        'keyId': keyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagePlanKey;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}/keys/{keyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsagePlanKeys operation.
     * @callback module:api/DefaultApi~getUsagePlanKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagePlanKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the usage plan keys representing the API keys added to a specified usage plan.
     * @param {String} usageplanId The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {String} [name] A query parameter specifying the name of the to-be-returned usage plan keys.
     * @param {module:api/DefaultApi~getUsagePlanKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagePlanKeys}
     */
    getUsagePlanKeys(usageplanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling getUsagePlanKeys");
      }

      let pathParams = {
        'usageplanId': usageplanId
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit'],
        'name': opts['name']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagePlanKeys;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsagePlans operation.
     * @callback module:api/DefaultApi~getUsagePlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagePlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the usage plans of the caller's account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {String} [keyId] The identifier of the API key associated with the usage plans.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getUsagePlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagePlans}
     */
    getUsagePlans(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'position': opts['position'],
        'keyId': opts['keyId'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagePlans;
      return this.apiClient.callApi(
        '/usageplans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVpcLink operation.
     * @callback module:api/DefaultApi~getVpcLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpcLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specified VPC link under the caller's account in a region.
     * @param {String} vpclinkId The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getVpcLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpcLink}
     */
    getVpcLink(vpclinkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vpclinkId' is set
      if (vpclinkId === undefined || vpclinkId === null) {
        throw new Error("Missing the required parameter 'vpclinkId' when calling getVpcLink");
      }

      let pathParams = {
        'vpclink_id': vpclinkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VpcLink;
      return this.apiClient.callApi(
        '/vpclinks/{vpclink_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVpcLinks operation.
     * @callback module:api/DefaultApi~getVpcLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpcLinks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the VpcLinks collection under the caller's account in a selected region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [position] The current pagination position in the paged result set.
     * @param {Number} [limit] The maximum number of returned results per page. The default value is 25 and the maximum value is 500.
     * @param {module:api/DefaultApi~getVpcLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpcLinks}
     */
    getVpcLinks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'position': opts['position'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VpcLinks;
      return this.apiClient.callApi(
        '/vpclinks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importApiKeys operation.
     * @callback module:api/DefaultApi~importApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyIds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import API keys from an external source, such as a CSV-formatted file.
     * @param {module:model/String} format A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.
     * @param {module:model/String} mode 
     * @param {module:model/ImportApiKeysRequest} importApiKeysRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [failonwarnings] A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.
     * @param {module:api/DefaultApi~importApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyIds}
     */
    importApiKeys(format, mode, importApiKeysRequest, opts, callback) {
      opts = opts || {};
      let postBody = importApiKeysRequest;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling importApiKeys");
      }
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling importApiKeys");
      }
      // verify the required parameter 'importApiKeysRequest' is set
      if (importApiKeysRequest === undefined || importApiKeysRequest === null) {
        throw new Error("Missing the required parameter 'importApiKeysRequest' when calling importApiKeys");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': format,
        'failonwarnings': opts['failonwarnings'],
        'mode': mode
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKeyIds;
      return this.apiClient.callApi(
        '/apikeys#mode=import&format', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importDocumentationParts operation.
     * @callback module:api/DefaultApi~importDocumentationPartsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationPartIds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports documentation parts
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/ImportDocumentationPartsRequest} importDocumentationPartsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [mode] A query parameter to indicate whether to overwrite (<code>OVERWRITE</code>) any existing DocumentationParts definition or to merge (<code>MERGE</code>) the new definition into the existing one. The default value is <code>MERGE</code>.
     * @param {Boolean} [failonwarnings] A query parameter to specify whether to rollback the documentation importation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
     * @param {module:api/DefaultApi~importDocumentationPartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationPartIds}
     */
    importDocumentationParts(restapiId, importDocumentationPartsRequest, opts, callback) {
      opts = opts || {};
      let postBody = importDocumentationPartsRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling importDocumentationParts");
      }
      // verify the required parameter 'importDocumentationPartsRequest' is set
      if (importDocumentationPartsRequest === undefined || importDocumentationPartsRequest === null) {
        throw new Error("Missing the required parameter 'importDocumentationPartsRequest' when calling importDocumentationParts");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'mode': opts['mode'],
        'failonwarnings': opts['failonwarnings']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentationPartIds;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/parts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importRestApi operation.
     * @callback module:api/DefaultApi~importRestApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A feature of the API Gateway control service for creating a new API from an external API definition file.
     * @param {module:model/String} mode 
     * @param {module:model/ImportRestApiRequest} importRestApiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [failonwarnings] A query parameter to indicate whether to rollback the API creation (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
     * @param {Object.<String, {String: String}>} [parameters] <p>A key-value map of context-specific query string parameters specifying the behavior of different API importing operations. The following shows operation-specific parameters and their supported values.</p> <p> To exclude DocumentationParts from the import, set <code>parameters</code> as <code>ignore=documentation</code>.</p> <p> To configure the endpoint type, set <code>parameters</code> as <code>endpointConfigurationTypes=EDGE</code>, <code>endpointConfigurationTypes=REGIONAL</code>, or <code>endpointConfigurationTypes=PRIVATE</code>. The default endpoint type is <code>EDGE</code>.</p> <p> To handle imported <code>basepath</code>, set <code>parameters</code> as <code>basepath=ignore</code>, <code>basepath=prepend</code> or <code>basepath=split</code>.</p> <p>For example, the AWS CLI command to exclude documentation from the imported API is:</p> <p>The AWS CLI command to set the regional endpoint on the imported API is:</p>
     * @param {module:api/DefaultApi~importRestApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApi}
     */
    importRestApi(mode, importRestApiRequest, opts, callback) {
      opts = opts || {};
      let postBody = importRestApiRequest;
      // verify the required parameter 'mode' is set
      if (mode === undefined || mode === null) {
        throw new Error("Missing the required parameter 'mode' when calling importRestApi");
      }
      // verify the required parameter 'importRestApiRequest' is set
      if (importRestApiRequest === undefined || importRestApiRequest === null) {
        throw new Error("Missing the required parameter 'importRestApiRequest' when calling importRestApi");
      }

      let pathParams = {
      };
      let queryParams = {
        'failonwarnings': opts['failonwarnings'],
        'parameters': opts['parameters'],
        'mode': mode
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestApi;
      return this.apiClient.callApi(
        '/restapis#mode=import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putGatewayResponse operation.
     * @callback module:api/DefaultApi~putGatewayResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/String} responseType The response type of the associated GatewayResponse
     * @param {module:model/PutGatewayResponseRequest} putGatewayResponseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putGatewayResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayResponse}
     */
    putGatewayResponse(restapiId, responseType, putGatewayResponseRequest, opts, callback) {
      opts = opts || {};
      let postBody = putGatewayResponseRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling putGatewayResponse");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling putGatewayResponse");
      }
      // verify the required parameter 'putGatewayResponseRequest' is set
      if (putGatewayResponseRequest === undefined || putGatewayResponseRequest === null) {
        throw new Error("Missing the required parameter 'putGatewayResponseRequest' when calling putGatewayResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'response_type': responseType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/gatewayresponses/{response_type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putIntegration operation.
     * @callback module:api/DefaultApi~putIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets up a method's integration.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Specifies a put integration request's resource ID.
     * @param {String} httpMethod Specifies the HTTP method for the integration.
     * @param {module:model/PutIntegrationRequest} putIntegrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Integration}
     */
    putIntegration(restapiId, resourceId, httpMethod, putIntegrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putIntegrationRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling putIntegration");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling putIntegration");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling putIntegration");
      }
      // verify the required parameter 'putIntegrationRequest' is set
      if (putIntegrationRequest === undefined || putIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'putIntegrationRequest' when calling putIntegration");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Integration;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putIntegrationResponse operation.
     * @callback module:api/DefaultApi~putIntegrationResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents a put integration.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Specifies a put integration response request's resource identifier.
     * @param {String} httpMethod Specifies a put integration response request's HTTP method.
     * @param {String} statusCode Specifies the status code that is used to map the integration response to an existing MethodResponse.
     * @param {module:model/PutIntegrationResponseRequest} putIntegrationResponseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putIntegrationResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationResponse}
     */
    putIntegrationResponse(restapiId, resourceId, httpMethod, statusCode, putIntegrationResponseRequest, opts, callback) {
      opts = opts || {};
      let postBody = putIntegrationResponseRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling putIntegrationResponse");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling putIntegrationResponse");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling putIntegrationResponse");
      }
      // verify the required parameter 'statusCode' is set
      if (statusCode === undefined || statusCode === null) {
        throw new Error("Missing the required parameter 'statusCode' when calling putIntegrationResponse");
      }
      // verify the required parameter 'putIntegrationResponseRequest' is set
      if (putIntegrationResponseRequest === undefined || putIntegrationResponseRequest === null) {
        throw new Error("Missing the required parameter 'putIntegrationResponseRequest' when calling putIntegrationResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod,
        'status_code': statusCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMethod operation.
     * @callback module:api/DefaultApi~putMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Method} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a method to an existing Resource resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The Resource identifier for the new Method resource.
     * @param {String} httpMethod Specifies the method request's HTTP method type.
     * @param {module:model/PutMethodRequest} putMethodRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Method}
     */
    putMethod(restapiId, resourceId, httpMethod, putMethodRequest, opts, callback) {
      opts = opts || {};
      let postBody = putMethodRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling putMethod");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling putMethod");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling putMethod");
      }
      // verify the required parameter 'putMethodRequest' is set
      if (putMethodRequest === undefined || putMethodRequest === null) {
        throw new Error("Missing the required parameter 'putMethodRequest' when calling putMethod");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Method;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putMethodResponse operation.
     * @callback module:api/DefaultApi~putMethodResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a MethodResponse to an existing Method resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The Resource identifier for the Method resource.
     * @param {String} httpMethod The HTTP verb of the Method resource.
     * @param {String} statusCode The method response's status code.
     * @param {module:model/PutMethodResponseRequest} putMethodResponseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putMethodResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodResponse}
     */
    putMethodResponse(restapiId, resourceId, httpMethod, statusCode, putMethodResponseRequest, opts, callback) {
      opts = opts || {};
      let postBody = putMethodResponseRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling putMethodResponse");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling putMethodResponse");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling putMethodResponse");
      }
      // verify the required parameter 'statusCode' is set
      if (statusCode === undefined || statusCode === null) {
        throw new Error("Missing the required parameter 'statusCode' when calling putMethodResponse");
      }
      // verify the required parameter 'putMethodResponseRequest' is set
      if (putMethodResponseRequest === undefined || putMethodResponseRequest === null) {
        throw new Error("Missing the required parameter 'putMethodResponseRequest' when calling putMethodResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod,
        'status_code': statusCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MethodResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRestApi operation.
     * @callback module:api/DefaultApi~putRestApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/PutRestApiRequest} putRestApiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [mode] The <code>mode</code> query parameter to specify the update mode. Valid values are \"merge\" and \"overwrite\". By default, the update mode is \"merge\".
     * @param {Boolean} [failonwarnings] A query parameter to indicate whether to rollback the API update (<code>true</code>) or not (<code>false</code>) when a warning is encountered. The default value is <code>false</code>.
     * @param {Object.<String, {String: String}>} [parameters] Custom header parameters as part of the request. For example, to exclude DocumentationParts from an imported API, set <code>ignore=documentation</code> as a <code>parameters</code> value, as in the AWS CLI command of <code>aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'</code>.
     * @param {module:api/DefaultApi~putRestApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApi}
     */
    putRestApi(restapiId, putRestApiRequest, opts, callback) {
      opts = opts || {};
      let postBody = putRestApiRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling putRestApi");
      }
      // verify the required parameter 'putRestApiRequest' is set
      if (putRestApiRequest === undefined || putRestApiRequest === null) {
        throw new Error("Missing the required parameter 'putRestApiRequest' when calling putRestApi");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
        'mode': opts['mode'],
        'failonwarnings': opts['failonwarnings'],
        'parameters': opts['parameters']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestApi;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds or updates a tag on a given resource.
     * @param {String} resourceArn The ARN of a resource that can be tagged.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resource_arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resource_arn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testInvokeAuthorizer operation.
     * @callback module:api/DefaultApi~testInvokeAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestInvokeAuthorizerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} authorizerId Specifies a test invoke authorizer request's Authorizer ID.
     * @param {module:model/TestInvokeAuthorizerRequest} testInvokeAuthorizerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~testInvokeAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestInvokeAuthorizerResponse}
     */
    testInvokeAuthorizer(restapiId, authorizerId, testInvokeAuthorizerRequest, opts, callback) {
      opts = opts || {};
      let postBody = testInvokeAuthorizerRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling testInvokeAuthorizer");
      }
      // verify the required parameter 'authorizerId' is set
      if (authorizerId === undefined || authorizerId === null) {
        throw new Error("Missing the required parameter 'authorizerId' when calling testInvokeAuthorizer");
      }
      // verify the required parameter 'testInvokeAuthorizerRequest' is set
      if (testInvokeAuthorizerRequest === undefined || testInvokeAuthorizerRequest === null) {
        throw new Error("Missing the required parameter 'testInvokeAuthorizerRequest' when calling testInvokeAuthorizer");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'authorizer_id': authorizerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestInvokeAuthorizerResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/authorizers/{authorizer_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testInvokeMethod operation.
     * @callback module:api/DefaultApi~testInvokeMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestInvokeMethodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate the invocation of a Method in your RestApi with headers, parameters, and an incoming request body.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Specifies a test invoke method request's resource ID.
     * @param {String} httpMethod Specifies a test invoke method request's HTTP method.
     * @param {module:model/TestInvokeMethodRequest} testInvokeMethodRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~testInvokeMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestInvokeMethodResponse}
     */
    testInvokeMethod(restapiId, resourceId, httpMethod, testInvokeMethodRequest, opts, callback) {
      opts = opts || {};
      let postBody = testInvokeMethodRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling testInvokeMethod");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling testInvokeMethod");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling testInvokeMethod");
      }
      // verify the required parameter 'testInvokeMethodRequest' is set
      if (testInvokeMethodRequest === undefined || testInvokeMethodRequest === null) {
        throw new Error("Missing the required parameter 'testInvokeMethodRequest' when calling testInvokeMethod");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestInvokeMethodResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag from a given resource.
     * @param {String} resourceArn The ARN of a resource that can be tagged.
     * @param {Array.<String>} tagKeys The Tag keys to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resource_arn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resource_arn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/DefaultApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about the current Account resource.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    updateAccount(updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/account', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiKey operation.
     * @callback module:api/DefaultApi~updateApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about an ApiKey resource.
     * @param {String} apiKey The identifier of the ApiKey resource to be updated.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    updateApiKey(apiKey, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateApiKey");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateApiKey");
      }

      let pathParams = {
        'api_Key': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/apikeys/{api_Key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAuthorizer operation.
     * @callback module:api/DefaultApi~updateAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Authorizer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Authorizer resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} authorizerId The identifier of the Authorizer resource.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Authorizer}
     */
    updateAuthorizer(restapiId, authorizerId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateAuthorizer");
      }
      // verify the required parameter 'authorizerId' is set
      if (authorizerId === undefined || authorizerId === null) {
        throw new Error("Missing the required parameter 'authorizerId' when calling updateAuthorizer");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateAuthorizer");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'authorizer_id': authorizerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Authorizer;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/authorizers/{authorizer_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBasePathMapping operation.
     * @callback module:api/DefaultApi~updateBasePathMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasePathMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about the BasePathMapping resource.
     * @param {String} domainName The domain name of the BasePathMapping resource to change.
     * @param {String} basePath <p>The base path of the BasePathMapping resource to change.</p> <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBasePathMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasePathMapping}
     */
    updateBasePathMapping(domainName, basePath, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateBasePathMapping");
      }
      // verify the required parameter 'basePath' is set
      if (basePath === undefined || basePath === null) {
        throw new Error("Missing the required parameter 'basePath' when calling updateBasePathMapping");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateBasePathMapping");
      }

      let pathParams = {
        'domain_name': domainName,
        'base_path': basePath
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasePathMapping;
      return this.apiClient.callApi(
        '/domainnames/{domain_name}/basepathmappings/{base_path}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientCertificate operation.
     * @callback module:api/DefaultApi~updateClientCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about an ClientCertificate resource.
     * @param {String} clientcertificateId The identifier of the ClientCertificate resource to be updated.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateClientCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCertificate}
     */
    updateClientCertificate(clientcertificateId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'clientcertificateId' is set
      if (clientcertificateId === undefined || clientcertificateId === null) {
        throw new Error("Missing the required parameter 'clientcertificateId' when calling updateClientCertificate");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateClientCertificate");
      }

      let pathParams = {
        'clientcertificate_id': clientcertificateId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ClientCertificate;
      return this.apiClient.callApi(
        '/clientcertificates/{clientcertificate_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeployment operation.
     * @callback module:api/DefaultApi~updateDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about a Deployment resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} deploymentId The replacement identifier for the Deployment resource to change information about.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    updateDeployment(restapiId, deploymentId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateDeployment");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling updateDeployment");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateDeployment");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'deployment_id': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/deployments/{deployment_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocumentationPart operation.
     * @callback module:api/DefaultApi~updateDocumentationPartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationPart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a documentation part.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} partId The identifier of the to-be-updated documentation part.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDocumentationPartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationPart}
     */
    updateDocumentationPart(restapiId, partId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateDocumentationPart");
      }
      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling updateDocumentationPart");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateDocumentationPart");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'part_id': partId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentationPart;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/parts/{part_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocumentationVersion operation.
     * @callback module:api/DefaultApi~updateDocumentationVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentationVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a documentation version.
     * @param {String} restapiId The string identifier of the associated RestApi..
     * @param {String} docVersion The version identifier of the to-be-updated documentation version.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDocumentationVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentationVersion}
     */
    updateDocumentationVersion(restapiId, docVersion, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateDocumentationVersion");
      }
      // verify the required parameter 'docVersion' is set
      if (docVersion === undefined || docVersion === null) {
        throw new Error("Missing the required parameter 'docVersion' when calling updateDocumentationVersion");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateDocumentationVersion");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'doc_version': docVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DocumentationVersion;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/documentation/versions/{doc_version}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainName operation.
     * @callback module:api/DefaultApi~updateDomainNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about the DomainName resource.
     * @param {String} domainName The name of the DomainName resource to be changed.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainName}
     */
    updateDomainName(domainName, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateDomainName");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateDomainName");
      }

      let pathParams = {
        'domain_name': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainName;
      return this.apiClient.callApi(
        '/domainnames/{domain_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGatewayResponse operation.
     * @callback module:api/DefaultApi~updateGatewayResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GatewayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a GatewayResponse of a specified response type on the given RestApi.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/String} responseType The response type of the associated GatewayResponse.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGatewayResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GatewayResponse}
     */
    updateGatewayResponse(restapiId, responseType, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateGatewayResponse");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling updateGatewayResponse");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateGatewayResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'response_type': responseType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GatewayResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/gatewayresponses/{response_type}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIntegration operation.
     * @callback module:api/DefaultApi~updateIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Integration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents an update integration.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Represents an update integration request's resource identifier.
     * @param {String} httpMethod Represents an update integration request's HTTP method.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Integration}
     */
    updateIntegration(restapiId, resourceId, httpMethod, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateIntegration");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling updateIntegration");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling updateIntegration");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateIntegration");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Integration;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIntegrationResponse operation.
     * @callback module:api/DefaultApi~updateIntegrationResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents an update integration response.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId Specifies an update integration response request's resource identifier.
     * @param {String} httpMethod Specifies an update integration response request's HTTP method.
     * @param {String} statusCode Specifies an update integration response request's status code.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIntegrationResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationResponse}
     */
    updateIntegrationResponse(restapiId, resourceId, httpMethod, statusCode, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateIntegrationResponse");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling updateIntegrationResponse");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling updateIntegrationResponse");
      }
      // verify the required parameter 'statusCode' is set
      if (statusCode === undefined || statusCode === null) {
        throw new Error("Missing the required parameter 'statusCode' when calling updateIntegrationResponse");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateIntegrationResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod,
        'status_code': statusCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMethod operation.
     * @callback module:api/DefaultApi~updateMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Method} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Method resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The Resource identifier for the Method resource.
     * @param {String} httpMethod The HTTP verb of the Method resource.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Method}
     */
    updateMethod(restapiId, resourceId, httpMethod, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateMethod");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling updateMethod");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling updateMethod");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateMethod");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Method;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMethodResponse operation.
     * @callback module:api/DefaultApi~updateMethodResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MethodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing MethodResponse resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The Resource identifier for the MethodResponse resource.
     * @param {String} httpMethod The HTTP verb of the Method resource.
     * @param {String} statusCode The status code for the MethodResponse resource.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMethodResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MethodResponse}
     */
    updateMethodResponse(restapiId, resourceId, httpMethod, statusCode, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateMethodResponse");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling updateMethodResponse");
      }
      // verify the required parameter 'httpMethod' is set
      if (httpMethod === undefined || httpMethod === null) {
        throw new Error("Missing the required parameter 'httpMethod' when calling updateMethodResponse");
      }
      // verify the required parameter 'statusCode' is set
      if (statusCode === undefined || statusCode === null) {
        throw new Error("Missing the required parameter 'statusCode' when calling updateMethodResponse");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateMethodResponse");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId,
        'http_method': httpMethod,
        'status_code': statusCode
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MethodResponse;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModel operation.
     * @callback module:api/DefaultApi~updateModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about a model.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} modelName The name of the model to update.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    updateModel(restapiId, modelName, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateModel");
      }
      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling updateModel");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateModel");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'model_name': modelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Model;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/models/{model_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRequestValidator operation.
     * @callback module:api/DefaultApi~updateRequestValidatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestValidator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a RequestValidator of a given RestApi.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} requestvalidatorId The identifier of RequestValidator to be updated.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRequestValidatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestValidator}
     */
    updateRequestValidator(restapiId, requestvalidatorId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateRequestValidator");
      }
      // verify the required parameter 'requestvalidatorId' is set
      if (requestvalidatorId === undefined || requestvalidatorId === null) {
        throw new Error("Missing the required parameter 'requestvalidatorId' when calling updateRequestValidator");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateRequestValidator");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'requestvalidator_id': requestvalidatorId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RequestValidator;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResource operation.
     * @callback module:api/DefaultApi~updateResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Resource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about a Resource resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} resourceId The identifier of the Resource resource.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Resource}
     */
    updateResource(restapiId, resourceId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling updateResource");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateResource");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'resource_id': resourceId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Resource;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/resources/{resource_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRestApi operation.
     * @callback module:api/DefaultApi~updateRestApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about the specified API.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRestApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestApi}
     */
    updateRestApi(restapiId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateRestApi");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateRestApi");
      }

      let pathParams = {
        'restapi_id': restapiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestApi;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStage operation.
     * @callback module:api/DefaultApi~updateStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Stage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes information about a Stage resource.
     * @param {String} restapiId The string identifier of the associated RestApi.
     * @param {String} stageName The name of the Stage resource to change information about.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Stage}
     */
    updateStage(restapiId, stageName, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'restapiId' is set
      if (restapiId === undefined || restapiId === null) {
        throw new Error("Missing the required parameter 'restapiId' when calling updateStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling updateStage");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateStage");
      }

      let pathParams = {
        'restapi_id': restapiId,
        'stage_name': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Stage;
      return this.apiClient.callApi(
        '/restapis/{restapi_id}/stages/{stage_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsage operation.
     * @callback module:api/DefaultApi~updateUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
     * @param {String} usageplanId The Id of the usage plan associated with the usage data.
     * @param {String} keyId The identifier of the API key associated with the usage plan in which a temporary extension is granted to the remaining quota.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Usage}
     */
    updateUsage(usageplanId, keyId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling updateUsage");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling updateUsage");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateUsage");
      }

      let pathParams = {
        'usageplanId': usageplanId,
        'keyId': keyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Usage;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}/keys/{keyId}/usage', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsagePlan operation.
     * @callback module:api/DefaultApi~updateUsagePlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagePlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a usage plan of a given plan Id.
     * @param {String} usageplanId The Id of the to-be-updated usage plan.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateUsagePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagePlan}
     */
    updateUsagePlan(usageplanId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'usageplanId' is set
      if (usageplanId === undefined || usageplanId === null) {
        throw new Error("Missing the required parameter 'usageplanId' when calling updateUsagePlan");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateUsagePlan");
      }

      let pathParams = {
        'usageplanId': usageplanId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsagePlan;
      return this.apiClient.callApi(
        '/usageplans/{usageplanId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVpcLink operation.
     * @callback module:api/DefaultApi~updateVpcLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VpcLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing VpcLink of a specified identifier.
     * @param {String} vpclinkId The identifier of the VpcLink. It is used in an Integration to reference this VpcLink.
     * @param {module:model/UpdateApiKeyRequest} updateApiKeyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVpcLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VpcLink}
     */
    updateVpcLink(vpclinkId, updateApiKeyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiKeyRequest;
      // verify the required parameter 'vpclinkId' is set
      if (vpclinkId === undefined || vpclinkId === null) {
        throw new Error("Missing the required parameter 'vpclinkId' when calling updateVpcLink");
      }
      // verify the required parameter 'updateApiKeyRequest' is set
      if (updateApiKeyRequest === undefined || updateApiKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateApiKeyRequest' when calling updateVpcLink");
      }

      let pathParams = {
        'vpclink_id': vpclinkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VpcLink;
      return this.apiClient.callApi(
        '/vpclinks/{vpclink_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
