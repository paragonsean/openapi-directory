/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateDomainNameRequestEndpointConfiguration from './CreateDomainNameRequestEndpointConfiguration';
import CreateDomainNameRequestMutualTlsAuthentication from './CreateDomainNameRequestMutualTlsAuthentication';

/**
 * The CreateDomainNameRequest model module.
 * @module model/CreateDomainNameRequest
 * @version 2015-07-09
 */
class CreateDomainNameRequest {
    /**
     * Constructs a new <code>CreateDomainNameRequest</code>.
     * @alias module:model/CreateDomainNameRequest
     * @param domainName {String} The name of the DomainName resource.
     */
    constructor(domainName) { 
        
        CreateDomainNameRequest.initialize(this, domainName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainName) { 
        obj['domainName'] = domainName;
    }

    /**
     * Constructs a <code>CreateDomainNameRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDomainNameRequest} obj Optional instance to populate.
     * @return {module:model/CreateDomainNameRequest} The populated <code>CreateDomainNameRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDomainNameRequest();

            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('certificateName')) {
                obj['certificateName'] = ApiClient.convertToType(data['certificateName'], 'String');
            }
            if (data.hasOwnProperty('certificateBody')) {
                obj['certificateBody'] = ApiClient.convertToType(data['certificateBody'], 'String');
            }
            if (data.hasOwnProperty('certificatePrivateKey')) {
                obj['certificatePrivateKey'] = ApiClient.convertToType(data['certificatePrivateKey'], 'String');
            }
            if (data.hasOwnProperty('certificateChain')) {
                obj['certificateChain'] = ApiClient.convertToType(data['certificateChain'], 'String');
            }
            if (data.hasOwnProperty('certificateArn')) {
                obj['certificateArn'] = ApiClient.convertToType(data['certificateArn'], 'String');
            }
            if (data.hasOwnProperty('regionalCertificateName')) {
                obj['regionalCertificateName'] = ApiClient.convertToType(data['regionalCertificateName'], 'String');
            }
            if (data.hasOwnProperty('regionalCertificateArn')) {
                obj['regionalCertificateArn'] = ApiClient.convertToType(data['regionalCertificateArn'], 'String');
            }
            if (data.hasOwnProperty('endpointConfiguration')) {
                obj['endpointConfiguration'] = CreateDomainNameRequestEndpointConfiguration.constructFromObject(data['endpointConfiguration']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('securityPolicy')) {
                obj['securityPolicy'] = ApiClient.convertToType(data['securityPolicy'], 'String');
            }
            if (data.hasOwnProperty('mutualTlsAuthentication')) {
                obj['mutualTlsAuthentication'] = CreateDomainNameRequestMutualTlsAuthentication.constructFromObject(data['mutualTlsAuthentication']);
            }
            if (data.hasOwnProperty('ownershipVerificationCertificateArn')) {
                obj['ownershipVerificationCertificateArn'] = ApiClient.convertToType(data['ownershipVerificationCertificateArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDomainNameRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDomainNameRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDomainNameRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // ensure the json data is a string
        if (data['certificateName'] && !(typeof data['certificateName'] === 'string' || data['certificateName'] instanceof String)) {
            throw new Error("Expected the field `certificateName` to be a primitive type in the JSON string but got " + data['certificateName']);
        }
        // ensure the json data is a string
        if (data['certificateBody'] && !(typeof data['certificateBody'] === 'string' || data['certificateBody'] instanceof String)) {
            throw new Error("Expected the field `certificateBody` to be a primitive type in the JSON string but got " + data['certificateBody']);
        }
        // ensure the json data is a string
        if (data['certificatePrivateKey'] && !(typeof data['certificatePrivateKey'] === 'string' || data['certificatePrivateKey'] instanceof String)) {
            throw new Error("Expected the field `certificatePrivateKey` to be a primitive type in the JSON string but got " + data['certificatePrivateKey']);
        }
        // ensure the json data is a string
        if (data['certificateChain'] && !(typeof data['certificateChain'] === 'string' || data['certificateChain'] instanceof String)) {
            throw new Error("Expected the field `certificateChain` to be a primitive type in the JSON string but got " + data['certificateChain']);
        }
        // ensure the json data is a string
        if (data['certificateArn'] && !(typeof data['certificateArn'] === 'string' || data['certificateArn'] instanceof String)) {
            throw new Error("Expected the field `certificateArn` to be a primitive type in the JSON string but got " + data['certificateArn']);
        }
        // ensure the json data is a string
        if (data['regionalCertificateName'] && !(typeof data['regionalCertificateName'] === 'string' || data['regionalCertificateName'] instanceof String)) {
            throw new Error("Expected the field `regionalCertificateName` to be a primitive type in the JSON string but got " + data['regionalCertificateName']);
        }
        // ensure the json data is a string
        if (data['regionalCertificateArn'] && !(typeof data['regionalCertificateArn'] === 'string' || data['regionalCertificateArn'] instanceof String)) {
            throw new Error("Expected the field `regionalCertificateArn` to be a primitive type in the JSON string but got " + data['regionalCertificateArn']);
        }
        // validate the optional field `endpointConfiguration`
        if (data['endpointConfiguration']) { // data not null
          CreateDomainNameRequestEndpointConfiguration.validateJSON(data['endpointConfiguration']);
        }
        // ensure the json data is a string
        if (data['securityPolicy'] && !(typeof data['securityPolicy'] === 'string' || data['securityPolicy'] instanceof String)) {
            throw new Error("Expected the field `securityPolicy` to be a primitive type in the JSON string but got " + data['securityPolicy']);
        }
        // validate the optional field `mutualTlsAuthentication`
        if (data['mutualTlsAuthentication']) { // data not null
          CreateDomainNameRequestMutualTlsAuthentication.validateJSON(data['mutualTlsAuthentication']);
        }
        // ensure the json data is a string
        if (data['ownershipVerificationCertificateArn'] && !(typeof data['ownershipVerificationCertificateArn'] === 'string' || data['ownershipVerificationCertificateArn'] instanceof String)) {
            throw new Error("Expected the field `ownershipVerificationCertificateArn` to be a primitive type in the JSON string but got " + data['ownershipVerificationCertificateArn']);
        }

        return true;
    }


}

CreateDomainNameRequest.RequiredProperties = ["domainName"];

/**
 * The name of the DomainName resource.
 * @member {String} domainName
 */
CreateDomainNameRequest.prototype['domainName'] = undefined;

/**
 * The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.
 * @member {String} certificateName
 */
CreateDomainNameRequest.prototype['certificateName'] = undefined;

/**
 * [Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.
 * @member {String} certificateBody
 */
CreateDomainNameRequest.prototype['certificateBody'] = undefined;

/**
 * [Deprecated] Your edge-optimized endpoint's domain name certificate's private key.
 * @member {String} certificatePrivateKey
 */
CreateDomainNameRequest.prototype['certificatePrivateKey'] = undefined;

/**
 * [Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.
 * @member {String} certificateChain
 */
CreateDomainNameRequest.prototype['certificateChain'] = undefined;

/**
 * The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
 * @member {String} certificateArn
 */
CreateDomainNameRequest.prototype['certificateArn'] = undefined;

/**
 * The user-friendly name of the certificate that will be used by regional endpoint for this domain name.
 * @member {String} regionalCertificateName
 */
CreateDomainNameRequest.prototype['regionalCertificateName'] = undefined;

/**
 * The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.
 * @member {String} regionalCertificateArn
 */
CreateDomainNameRequest.prototype['regionalCertificateArn'] = undefined;

/**
 * @member {module:model/CreateDomainNameRequestEndpointConfiguration} endpointConfiguration
 */
CreateDomainNameRequest.prototype['endpointConfiguration'] = undefined;

/**
 * The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.
 * @member {Object.<String, String>} tags
 */
CreateDomainNameRequest.prototype['tags'] = undefined;

/**
 * The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.
 * @member {module:model/CreateDomainNameRequest.SecurityPolicyEnum} securityPolicy
 */
CreateDomainNameRequest.prototype['securityPolicy'] = undefined;

/**
 * @member {module:model/CreateDomainNameRequestMutualTlsAuthentication} mutualTlsAuthentication
 */
CreateDomainNameRequest.prototype['mutualTlsAuthentication'] = undefined;

/**
 * The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
 * @member {String} ownershipVerificationCertificateArn
 */
CreateDomainNameRequest.prototype['ownershipVerificationCertificateArn'] = undefined;





/**
 * Allowed values for the <code>securityPolicy</code> property.
 * @enum {String}
 * @readonly
 */
CreateDomainNameRequest['SecurityPolicyEnum'] = {

    /**
     * value: "TLS_1_0"
     * @const
     */
    "0": "TLS_1_0",

    /**
     * value: "TLS_1_2"
     * @const
     */
    "2": "TLS_1_2"
};



export default CreateDomainNameRequest;

