/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateAuthorizerRequest model module.
 * @module model/CreateAuthorizerRequest
 * @version 2015-07-09
 */
class CreateAuthorizerRequest {
    /**
     * Constructs a new <code>CreateAuthorizerRequest</code>.
     * @alias module:model/CreateAuthorizerRequest
     * @param name {String} The name of the authorizer.
     * @param type {module:model/CreateAuthorizerRequest.TypeEnum} The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
     */
    constructor(name, type) { 
        
        CreateAuthorizerRequest.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CreateAuthorizerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAuthorizerRequest} obj Optional instance to populate.
     * @return {module:model/CreateAuthorizerRequest} The populated <code>CreateAuthorizerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAuthorizerRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('providerARNs')) {
                obj['providerARNs'] = ApiClient.convertToType(data['providerARNs'], ['String']);
            }
            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('authorizerUri')) {
                obj['authorizerUri'] = ApiClient.convertToType(data['authorizerUri'], 'String');
            }
            if (data.hasOwnProperty('authorizerCredentials')) {
                obj['authorizerCredentials'] = ApiClient.convertToType(data['authorizerCredentials'], 'String');
            }
            if (data.hasOwnProperty('identitySource')) {
                obj['identitySource'] = ApiClient.convertToType(data['identitySource'], 'String');
            }
            if (data.hasOwnProperty('identityValidationExpression')) {
                obj['identityValidationExpression'] = ApiClient.convertToType(data['identityValidationExpression'], 'String');
            }
            if (data.hasOwnProperty('authorizerResultTtlInSeconds')) {
                obj['authorizerResultTtlInSeconds'] = ApiClient.convertToType(data['authorizerResultTtlInSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAuthorizerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAuthorizerRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAuthorizerRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['providerARNs'])) {
            throw new Error("Expected the field `providerARNs` to be an array in the JSON data but got " + data['providerARNs']);
        }
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }
        // ensure the json data is a string
        if (data['authorizerUri'] && !(typeof data['authorizerUri'] === 'string' || data['authorizerUri'] instanceof String)) {
            throw new Error("Expected the field `authorizerUri` to be a primitive type in the JSON string but got " + data['authorizerUri']);
        }
        // ensure the json data is a string
        if (data['authorizerCredentials'] && !(typeof data['authorizerCredentials'] === 'string' || data['authorizerCredentials'] instanceof String)) {
            throw new Error("Expected the field `authorizerCredentials` to be a primitive type in the JSON string but got " + data['authorizerCredentials']);
        }
        // ensure the json data is a string
        if (data['identitySource'] && !(typeof data['identitySource'] === 'string' || data['identitySource'] instanceof String)) {
            throw new Error("Expected the field `identitySource` to be a primitive type in the JSON string but got " + data['identitySource']);
        }
        // ensure the json data is a string
        if (data['identityValidationExpression'] && !(typeof data['identityValidationExpression'] === 'string' || data['identityValidationExpression'] instanceof String)) {
            throw new Error("Expected the field `identityValidationExpression` to be a primitive type in the JSON string but got " + data['identityValidationExpression']);
        }

        return true;
    }


}

CreateAuthorizerRequest.RequiredProperties = ["name", "type"];

/**
 * The name of the authorizer.
 * @member {String} name
 */
CreateAuthorizerRequest.prototype['name'] = undefined;

/**
 * The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.
 * @member {module:model/CreateAuthorizerRequest.TypeEnum} type
 */
CreateAuthorizerRequest.prototype['type'] = undefined;

/**
 * A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. 
 * @member {Array.<String>} providerARNs
 */
CreateAuthorizerRequest.prototype['providerARNs'] = undefined;

/**
 * Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
 * @member {String} authType
 */
CreateAuthorizerRequest.prototype['authType'] = undefined;

/**
 * Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.
 * @member {String} authorizerUri
 */
CreateAuthorizerRequest.prototype['authorizerUri'] = undefined;

/**
 * Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
 * @member {String} authorizerCredentials
 */
CreateAuthorizerRequest.prototype['authorizerCredentials'] = undefined;

/**
 * The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
 * @member {String} identitySource
 */
CreateAuthorizerRequest.prototype['identitySource'] = undefined;

/**
 * A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.
 * @member {String} identityValidationExpression
 */
CreateAuthorizerRequest.prototype['identityValidationExpression'] = undefined;

/**
 * The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
 * @member {Number} authorizerResultTtlInSeconds
 */
CreateAuthorizerRequest.prototype['authorizerResultTtlInSeconds'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateAuthorizerRequest['TypeEnum'] = {

    /**
     * value: "TOKEN"
     * @const
     */
    "TOKEN": "TOKEN",

    /**
     * value: "REQUEST"
     * @const
     */
    "REQUEST": "REQUEST",

    /**
     * value: "COGNITO_USER_POOLS"
     * @const
     */
    "COGNITO_USER_POOLS": "COGNITO_USER_POOLS"
};



export default CreateAuthorizerRequest;

