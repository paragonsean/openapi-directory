/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutMethodRequest model module.
 * @module model/PutMethodRequest
 * @version 2015-07-09
 */
class PutMethodRequest {
    /**
     * Constructs a new <code>PutMethodRequest</code>.
     * @alias module:model/PutMethodRequest
     * @param authorizationType {String} The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.
     */
    constructor(authorizationType) { 
        
        PutMethodRequest.initialize(this, authorizationType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorizationType) { 
        obj['authorizationType'] = authorizationType;
    }

    /**
     * Constructs a <code>PutMethodRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutMethodRequest} obj Optional instance to populate.
     * @return {module:model/PutMethodRequest} The populated <code>PutMethodRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutMethodRequest();

            if (data.hasOwnProperty('authorizationType')) {
                obj['authorizationType'] = ApiClient.convertToType(data['authorizationType'], 'String');
            }
            if (data.hasOwnProperty('authorizerId')) {
                obj['authorizerId'] = ApiClient.convertToType(data['authorizerId'], 'String');
            }
            if (data.hasOwnProperty('apiKeyRequired')) {
                obj['apiKeyRequired'] = ApiClient.convertToType(data['apiKeyRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('operationName')) {
                obj['operationName'] = ApiClient.convertToType(data['operationName'], 'String');
            }
            if (data.hasOwnProperty('requestParameters')) {
                obj['requestParameters'] = ApiClient.convertToType(data['requestParameters'], {'String': 'Boolean'});
            }
            if (data.hasOwnProperty('requestModels')) {
                obj['requestModels'] = ApiClient.convertToType(data['requestModels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('requestValidatorId')) {
                obj['requestValidatorId'] = ApiClient.convertToType(data['requestValidatorId'], 'String');
            }
            if (data.hasOwnProperty('authorizationScopes')) {
                obj['authorizationScopes'] = ApiClient.convertToType(data['authorizationScopes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutMethodRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutMethodRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutMethodRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authorizationType'] && !(typeof data['authorizationType'] === 'string' || data['authorizationType'] instanceof String)) {
            throw new Error("Expected the field `authorizationType` to be a primitive type in the JSON string but got " + data['authorizationType']);
        }
        // ensure the json data is a string
        if (data['authorizerId'] && !(typeof data['authorizerId'] === 'string' || data['authorizerId'] instanceof String)) {
            throw new Error("Expected the field `authorizerId` to be a primitive type in the JSON string but got " + data['authorizerId']);
        }
        // ensure the json data is a string
        if (data['operationName'] && !(typeof data['operationName'] === 'string' || data['operationName'] instanceof String)) {
            throw new Error("Expected the field `operationName` to be a primitive type in the JSON string but got " + data['operationName']);
        }
        // ensure the json data is a string
        if (data['requestValidatorId'] && !(typeof data['requestValidatorId'] === 'string' || data['requestValidatorId'] instanceof String)) {
            throw new Error("Expected the field `requestValidatorId` to be a primitive type in the JSON string but got " + data['requestValidatorId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['authorizationScopes'])) {
            throw new Error("Expected the field `authorizationScopes` to be an array in the JSON data but got " + data['authorizationScopes']);
        }

        return true;
    }


}

PutMethodRequest.RequiredProperties = ["authorizationType"];

/**
 * The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.
 * @member {String} authorizationType
 */
PutMethodRequest.prototype['authorizationType'] = undefined;

/**
 * Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.
 * @member {String} authorizerId
 */
PutMethodRequest.prototype['authorizerId'] = undefined;

/**
 * Specifies whether the method required a valid ApiKey.
 * @member {Boolean} apiKeyRequired
 */
PutMethodRequest.prototype['apiKeyRequired'] = undefined;

/**
 * A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.
 * @member {String} operationName
 */
PutMethodRequest.prototype['operationName'] = undefined;

/**
 * A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.
 * @member {Object.<String, Boolean>} requestParameters
 */
PutMethodRequest.prototype['requestParameters'] = undefined;

/**
 * Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.
 * @member {Object.<String, String>} requestModels
 */
PutMethodRequest.prototype['requestModels'] = undefined;

/**
 * The identifier of a RequestValidator for validating the method request.
 * @member {String} requestValidatorId
 */
PutMethodRequest.prototype['requestValidatorId'] = undefined;

/**
 * A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
 * @member {Array.<String>} authorizationScopes
 */
PutMethodRequest.prototype['authorizationScopes'] = undefined;






export default PutMethodRequest;

