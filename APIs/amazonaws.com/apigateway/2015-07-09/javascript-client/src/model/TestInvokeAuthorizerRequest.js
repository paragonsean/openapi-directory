/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestInvokeAuthorizerRequest model module.
 * @module model/TestInvokeAuthorizerRequest
 * @version 2015-07-09
 */
class TestInvokeAuthorizerRequest {
    /**
     * Constructs a new <code>TestInvokeAuthorizerRequest</code>.
     * @alias module:model/TestInvokeAuthorizerRequest
     */
    constructor() { 
        
        TestInvokeAuthorizerRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestInvokeAuthorizerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestInvokeAuthorizerRequest} obj Optional instance to populate.
     * @return {module:model/TestInvokeAuthorizerRequest} The populated <code>TestInvokeAuthorizerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestInvokeAuthorizerRequest();

            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('multiValueHeaders')) {
                obj['multiValueHeaders'] = ApiClient.convertToType(data['multiValueHeaders'], {'String': Array});
            }
            if (data.hasOwnProperty('pathWithQueryString')) {
                obj['pathWithQueryString'] = ApiClient.convertToType(data['pathWithQueryString'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('stageVariables')) {
                obj['stageVariables'] = ApiClient.convertToType(data['stageVariables'], {'String': 'String'});
            }
            if (data.hasOwnProperty('additionalContext')) {
                obj['additionalContext'] = ApiClient.convertToType(data['additionalContext'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestInvokeAuthorizerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestInvokeAuthorizerRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['pathWithQueryString'] && !(typeof data['pathWithQueryString'] === 'string' || data['pathWithQueryString'] instanceof String)) {
            throw new Error("Expected the field `pathWithQueryString` to be a primitive type in the JSON string but got " + data['pathWithQueryString']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }

        return true;
    }


}



/**
 * A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.
 * @member {Object.<String, String>} headers
 */
TestInvokeAuthorizerRequest.prototype['headers'] = undefined;

/**
 * The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.
 * @member {Object.<String, Array.<String>>} multiValueHeaders
 */
TestInvokeAuthorizerRequest.prototype['multiValueHeaders'] = undefined;

/**
 * The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
 * @member {String} pathWithQueryString
 */
TestInvokeAuthorizerRequest.prototype['pathWithQueryString'] = undefined;

/**
 * The simulated request body of an incoming invocation request.
 * @member {String} body
 */
TestInvokeAuthorizerRequest.prototype['body'] = undefined;

/**
 * A key-value map of stage variables to simulate an invocation on a deployed Stage.
 * @member {Object.<String, String>} stageVariables
 */
TestInvokeAuthorizerRequest.prototype['stageVariables'] = undefined;

/**
 * A key-value map of additional context variables.
 * @member {Object.<String, String>} additionalContext
 */
TestInvokeAuthorizerRequest.prototype['additionalContext'] = undefined;






export default TestInvokeAuthorizerRequest;

