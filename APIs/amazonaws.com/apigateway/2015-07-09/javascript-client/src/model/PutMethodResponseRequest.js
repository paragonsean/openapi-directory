/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutMethodResponseRequest model module.
 * @module model/PutMethodResponseRequest
 * @version 2015-07-09
 */
class PutMethodResponseRequest {
    /**
     * Constructs a new <code>PutMethodResponseRequest</code>.
     * @alias module:model/PutMethodResponseRequest
     */
    constructor() { 
        
        PutMethodResponseRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutMethodResponseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutMethodResponseRequest} obj Optional instance to populate.
     * @return {module:model/PutMethodResponseRequest} The populated <code>PutMethodResponseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutMethodResponseRequest();

            if (data.hasOwnProperty('responseParameters')) {
                obj['responseParameters'] = ApiClient.convertToType(data['responseParameters'], {'String': 'Boolean'});
            }
            if (data.hasOwnProperty('responseModels')) {
                obj['responseModels'] = ApiClient.convertToType(data['responseModels'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutMethodResponseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutMethodResponseRequest</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)
 * @member {Object.<String, Boolean>} responseParameters
 */
PutMethodResponseRequest.prototype['responseParameters'] = undefined;

/**
 * Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.
 * @member {Object.<String, String>} responseModels
 */
PutMethodResponseRequest.prototype['responseModels'] = undefined;






export default PutMethodResponseRequest;

