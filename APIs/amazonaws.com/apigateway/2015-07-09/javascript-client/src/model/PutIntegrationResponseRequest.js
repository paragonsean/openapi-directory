/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutIntegrationResponseRequest model module.
 * @module model/PutIntegrationResponseRequest
 * @version 2015-07-09
 */
class PutIntegrationResponseRequest {
    /**
     * Constructs a new <code>PutIntegrationResponseRequest</code>.
     * @alias module:model/PutIntegrationResponseRequest
     */
    constructor() { 
        
        PutIntegrationResponseRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutIntegrationResponseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutIntegrationResponseRequest} obj Optional instance to populate.
     * @return {module:model/PutIntegrationResponseRequest} The populated <code>PutIntegrationResponseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutIntegrationResponseRequest();

            if (data.hasOwnProperty('selectionPattern')) {
                obj['selectionPattern'] = ApiClient.convertToType(data['selectionPattern'], 'String');
            }
            if (data.hasOwnProperty('responseParameters')) {
                obj['responseParameters'] = ApiClient.convertToType(data['responseParameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('responseTemplates')) {
                obj['responseTemplates'] = ApiClient.convertToType(data['responseTemplates'], {'String': 'String'});
            }
            if (data.hasOwnProperty('contentHandling')) {
                obj['contentHandling'] = ApiClient.convertToType(data['contentHandling'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutIntegrationResponseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutIntegrationResponseRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['selectionPattern'] && !(typeof data['selectionPattern'] === 'string' || data['selectionPattern'] instanceof String)) {
            throw new Error("Expected the field `selectionPattern` to be a primitive type in the JSON string but got " + data['selectionPattern']);
        }
        // ensure the json data is a string
        if (data['contentHandling'] && !(typeof data['contentHandling'] === 'string' || data['contentHandling'] instanceof String)) {
            throw new Error("Expected the field `contentHandling` to be a primitive type in the JSON string but got " + data['contentHandling']);
        }

        return true;
    }


}



/**
 * Specifies the selection pattern of a put integration response.
 * @member {String} selectionPattern
 */
PutIntegrationResponseRequest.prototype['selectionPattern'] = undefined;

/**
 * A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.
 * @member {Object.<String, String>} responseParameters
 */
PutIntegrationResponseRequest.prototype['responseParameters'] = undefined;

/**
 * Specifies a put integration response's templates.
 * @member {Object.<String, String>} responseTemplates
 */
PutIntegrationResponseRequest.prototype['responseTemplates'] = undefined;

/**
 * <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
 * @member {module:model/PutIntegrationResponseRequest.ContentHandlingEnum} contentHandling
 */
PutIntegrationResponseRequest.prototype['contentHandling'] = undefined;





/**
 * Allowed values for the <code>contentHandling</code> property.
 * @enum {String}
 * @readonly
 */
PutIntegrationResponseRequest['ContentHandlingEnum'] = {

    /**
     * value: "CONVERT_TO_BINARY"
     * @const
     */
    "BINARY": "CONVERT_TO_BINARY",

    /**
     * value: "CONVERT_TO_TEXT"
     * @const
     */
    "TEXT": "CONVERT_TO_TEXT"
};



export default PutIntegrationResponseRequest;

