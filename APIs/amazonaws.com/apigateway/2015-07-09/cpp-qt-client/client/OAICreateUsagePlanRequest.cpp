/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUsagePlanRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUsagePlanRequest::OAICreateUsagePlanRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUsagePlanRequest::OAICreateUsagePlanRequest() {
    this->initializeModel();
}

OAICreateUsagePlanRequest::~OAICreateUsagePlanRequest() {}

void OAICreateUsagePlanRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_api_stages_isSet = false;
    m_api_stages_isValid = false;

    m_throttle_isSet = false;
    m_throttle_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateUsagePlanRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUsagePlanRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_api_stages_isValid = ::OpenAPI::fromJsonValue(m_api_stages, json[QString("apiStages")]);
    m_api_stages_isSet = !json[QString("apiStages")].isNull() && m_api_stages_isValid;

    m_throttle_isValid = ::OpenAPI::fromJsonValue(m_throttle, json[QString("throttle")]);
    m_throttle_isSet = !json[QString("throttle")].isNull() && m_throttle_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateUsagePlanRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUsagePlanRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_api_stages.isSet()) {
        obj.insert(QString("apiStages"), ::OpenAPI::toJsonValue(m_api_stages));
    }
    if (m_throttle.isSet()) {
        obj.insert(QString("throttle"), ::OpenAPI::toJsonValue(m_throttle));
    }
    if (m_quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateUsagePlanRequest::getName() const {
    return m_name;
}
void OAICreateUsagePlanRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateUsagePlanRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateUsagePlanRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateUsagePlanRequest::getDescription() const {
    return m_description;
}
void OAICreateUsagePlanRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateUsagePlanRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateUsagePlanRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateUsagePlanRequest::getApiStages() const {
    return m_api_stages;
}
void OAICreateUsagePlanRequest::setApiStages(const QList &api_stages) {
    m_api_stages = api_stages;
    m_api_stages_isSet = true;
}

bool OAICreateUsagePlanRequest::is_api_stages_Set() const{
    return m_api_stages_isSet;
}

bool OAICreateUsagePlanRequest::is_api_stages_Valid() const{
    return m_api_stages_isValid;
}

OAICreateUsagePlanRequest_throttle OAICreateUsagePlanRequest::getThrottle() const {
    return m_throttle;
}
void OAICreateUsagePlanRequest::setThrottle(const OAICreateUsagePlanRequest_throttle &throttle) {
    m_throttle = throttle;
    m_throttle_isSet = true;
}

bool OAICreateUsagePlanRequest::is_throttle_Set() const{
    return m_throttle_isSet;
}

bool OAICreateUsagePlanRequest::is_throttle_Valid() const{
    return m_throttle_isValid;
}

OAICreateUsagePlanRequest_quota OAICreateUsagePlanRequest::getQuota() const {
    return m_quota;
}
void OAICreateUsagePlanRequest::setQuota(const OAICreateUsagePlanRequest_quota &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAICreateUsagePlanRequest::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAICreateUsagePlanRequest::is_quota_Valid() const{
    return m_quota_isValid;
}

QMap OAICreateUsagePlanRequest::getTags() const {
    return m_tags;
}
void OAICreateUsagePlanRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateUsagePlanRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateUsagePlanRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateUsagePlanRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_stages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUsagePlanRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
