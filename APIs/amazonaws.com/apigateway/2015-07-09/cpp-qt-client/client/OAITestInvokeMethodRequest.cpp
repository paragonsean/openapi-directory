/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestInvokeMethodRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestInvokeMethodRequest::OAITestInvokeMethodRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestInvokeMethodRequest::OAITestInvokeMethodRequest() {
    this->initializeModel();
}

OAITestInvokeMethodRequest::~OAITestInvokeMethodRequest() {}

void OAITestInvokeMethodRequest::initializeModel() {

    m_path_with_query_string_isSet = false;
    m_path_with_query_string_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_multi_value_headers_isSet = false;
    m_multi_value_headers_isValid = false;

    m_client_certificate_id_isSet = false;
    m_client_certificate_id_isValid = false;

    m_stage_variables_isSet = false;
    m_stage_variables_isValid = false;
}

void OAITestInvokeMethodRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestInvokeMethodRequest::fromJsonObject(QJsonObject json) {

    m_path_with_query_string_isValid = ::OpenAPI::fromJsonValue(m_path_with_query_string, json[QString("pathWithQueryString")]);
    m_path_with_query_string_isSet = !json[QString("pathWithQueryString")].isNull() && m_path_with_query_string_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_multi_value_headers_isValid = ::OpenAPI::fromJsonValue(m_multi_value_headers, json[QString("multiValueHeaders")]);
    m_multi_value_headers_isSet = !json[QString("multiValueHeaders")].isNull() && m_multi_value_headers_isValid;

    m_client_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_client_certificate_id, json[QString("clientCertificateId")]);
    m_client_certificate_id_isSet = !json[QString("clientCertificateId")].isNull() && m_client_certificate_id_isValid;

    m_stage_variables_isValid = ::OpenAPI::fromJsonValue(m_stage_variables, json[QString("stageVariables")]);
    m_stage_variables_isSet = !json[QString("stageVariables")].isNull() && m_stage_variables_isValid;
}

QString OAITestInvokeMethodRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestInvokeMethodRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_path_with_query_string_isSet) {
        obj.insert(QString("pathWithQueryString"), ::OpenAPI::toJsonValue(m_path_with_query_string));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_multi_value_headers.isSet()) {
        obj.insert(QString("multiValueHeaders"), ::OpenAPI::toJsonValue(m_multi_value_headers));
    }
    if (m_client_certificate_id_isSet) {
        obj.insert(QString("clientCertificateId"), ::OpenAPI::toJsonValue(m_client_certificate_id));
    }
    if (m_stage_variables.isSet()) {
        obj.insert(QString("stageVariables"), ::OpenAPI::toJsonValue(m_stage_variables));
    }
    return obj;
}

QString OAITestInvokeMethodRequest::getPathWithQueryString() const {
    return m_path_with_query_string;
}
void OAITestInvokeMethodRequest::setPathWithQueryString(const QString &path_with_query_string) {
    m_path_with_query_string = path_with_query_string;
    m_path_with_query_string_isSet = true;
}

bool OAITestInvokeMethodRequest::is_path_with_query_string_Set() const{
    return m_path_with_query_string_isSet;
}

bool OAITestInvokeMethodRequest::is_path_with_query_string_Valid() const{
    return m_path_with_query_string_isValid;
}

QString OAITestInvokeMethodRequest::getBody() const {
    return m_body;
}
void OAITestInvokeMethodRequest::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITestInvokeMethodRequest::is_body_Set() const{
    return m_body_isSet;
}

bool OAITestInvokeMethodRequest::is_body_Valid() const{
    return m_body_isValid;
}

QMap OAITestInvokeMethodRequest::getHeaders() const {
    return m_headers;
}
void OAITestInvokeMethodRequest::setHeaders(const QMap &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAITestInvokeMethodRequest::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAITestInvokeMethodRequest::is_headers_Valid() const{
    return m_headers_isValid;
}

QMap OAITestInvokeMethodRequest::getMultiValueHeaders() const {
    return m_multi_value_headers;
}
void OAITestInvokeMethodRequest::setMultiValueHeaders(const QMap &multi_value_headers) {
    m_multi_value_headers = multi_value_headers;
    m_multi_value_headers_isSet = true;
}

bool OAITestInvokeMethodRequest::is_multi_value_headers_Set() const{
    return m_multi_value_headers_isSet;
}

bool OAITestInvokeMethodRequest::is_multi_value_headers_Valid() const{
    return m_multi_value_headers_isValid;
}

QString OAITestInvokeMethodRequest::getClientCertificateId() const {
    return m_client_certificate_id;
}
void OAITestInvokeMethodRequest::setClientCertificateId(const QString &client_certificate_id) {
    m_client_certificate_id = client_certificate_id;
    m_client_certificate_id_isSet = true;
}

bool OAITestInvokeMethodRequest::is_client_certificate_id_Set() const{
    return m_client_certificate_id_isSet;
}

bool OAITestInvokeMethodRequest::is_client_certificate_id_Valid() const{
    return m_client_certificate_id_isValid;
}

QMap OAITestInvokeMethodRequest::getStageVariables() const {
    return m_stage_variables;
}
void OAITestInvokeMethodRequest::setStageVariables(const QMap &stage_variables) {
    m_stage_variables = stage_variables;
    m_stage_variables_isSet = true;
}

bool OAITestInvokeMethodRequest::is_stage_variables_Set() const{
    return m_stage_variables_isSet;
}

bool OAITestInvokeMethodRequest::is_stage_variables_Valid() const{
    return m_stage_variables_isValid;
}

bool OAITestInvokeMethodRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_with_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_value_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestInvokeMethodRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
