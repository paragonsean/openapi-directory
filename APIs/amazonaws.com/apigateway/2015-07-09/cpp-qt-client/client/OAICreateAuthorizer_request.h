/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAuthorizer_request.h
 *
 * 
 */

#ifndef OAICreateAuthorizer_request_H
#define OAICreateAuthorizer_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateAuthorizer_request : public OAIObject {
public:
    OAICreateAuthorizer_request();
    OAICreateAuthorizer_request(QString json);
    ~OAICreateAuthorizer_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList<QString> getProviderArns() const;
    void setProviderArns(const QList<QString> &provider_arns);
    bool is_provider_arns_Set() const;
    bool is_provider_arns_Valid() const;

    QString getAuthType() const;
    void setAuthType(const QString &auth_type);
    bool is_auth_type_Set() const;
    bool is_auth_type_Valid() const;

    QString getAuthorizerUri() const;
    void setAuthorizerUri(const QString &authorizer_uri);
    bool is_authorizer_uri_Set() const;
    bool is_authorizer_uri_Valid() const;

    QString getAuthorizerCredentials() const;
    void setAuthorizerCredentials(const QString &authorizer_credentials);
    bool is_authorizer_credentials_Set() const;
    bool is_authorizer_credentials_Valid() const;

    QString getIdentitySource() const;
    void setIdentitySource(const QString &identity_source);
    bool is_identity_source_Set() const;
    bool is_identity_source_Valid() const;

    QString getIdentityValidationExpression() const;
    void setIdentityValidationExpression(const QString &identity_validation_expression);
    bool is_identity_validation_expression_Set() const;
    bool is_identity_validation_expression_Valid() const;

    qint32 getAuthorizerResultTtlInSeconds() const;
    void setAuthorizerResultTtlInSeconds(const qint32 &authorizer_result_ttl_in_seconds);
    bool is_authorizer_result_ttl_in_seconds_Set() const;
    bool is_authorizer_result_ttl_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList<QString> m_provider_arns;
    bool m_provider_arns_isSet;
    bool m_provider_arns_isValid;

    QString m_auth_type;
    bool m_auth_type_isSet;
    bool m_auth_type_isValid;

    QString m_authorizer_uri;
    bool m_authorizer_uri_isSet;
    bool m_authorizer_uri_isValid;

    QString m_authorizer_credentials;
    bool m_authorizer_credentials_isSet;
    bool m_authorizer_credentials_isValid;

    QString m_identity_source;
    bool m_identity_source_isSet;
    bool m_identity_source_isValid;

    QString m_identity_validation_expression;
    bool m_identity_validation_expression_isSet;
    bool m_identity_validation_expression_isValid;

    qint32 m_authorizer_result_ttl_in_seconds;
    bool m_authorizer_result_ttl_in_seconds_isSet;
    bool m_authorizer_result_ttl_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAuthorizer_request)

#endif // OAICreateAuthorizer_request_H
