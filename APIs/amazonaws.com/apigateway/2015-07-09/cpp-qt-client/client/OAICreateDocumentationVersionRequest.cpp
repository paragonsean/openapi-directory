/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDocumentationVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDocumentationVersionRequest::OAICreateDocumentationVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDocumentationVersionRequest::OAICreateDocumentationVersionRequest() {
    this->initializeModel();
}

OAICreateDocumentationVersionRequest::~OAICreateDocumentationVersionRequest() {}

void OAICreateDocumentationVersionRequest::initializeModel() {

    m_documentation_version_isSet = false;
    m_documentation_version_isValid = false;

    m_stage_name_isSet = false;
    m_stage_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAICreateDocumentationVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDocumentationVersionRequest::fromJsonObject(QJsonObject json) {

    m_documentation_version_isValid = ::OpenAPI::fromJsonValue(m_documentation_version, json[QString("documentationVersion")]);
    m_documentation_version_isSet = !json[QString("documentationVersion")].isNull() && m_documentation_version_isValid;

    m_stage_name_isValid = ::OpenAPI::fromJsonValue(m_stage_name, json[QString("stageName")]);
    m_stage_name_isSet = !json[QString("stageName")].isNull() && m_stage_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAICreateDocumentationVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDocumentationVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_documentation_version_isSet) {
        obj.insert(QString("documentationVersion"), ::OpenAPI::toJsonValue(m_documentation_version));
    }
    if (m_stage_name_isSet) {
        obj.insert(QString("stageName"), ::OpenAPI::toJsonValue(m_stage_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAICreateDocumentationVersionRequest::getDocumentationVersion() const {
    return m_documentation_version;
}
void OAICreateDocumentationVersionRequest::setDocumentationVersion(const QString &documentation_version) {
    m_documentation_version = documentation_version;
    m_documentation_version_isSet = true;
}

bool OAICreateDocumentationVersionRequest::is_documentation_version_Set() const{
    return m_documentation_version_isSet;
}

bool OAICreateDocumentationVersionRequest::is_documentation_version_Valid() const{
    return m_documentation_version_isValid;
}

QString OAICreateDocumentationVersionRequest::getStageName() const {
    return m_stage_name;
}
void OAICreateDocumentationVersionRequest::setStageName(const QString &stage_name) {
    m_stage_name = stage_name;
    m_stage_name_isSet = true;
}

bool OAICreateDocumentationVersionRequest::is_stage_name_Set() const{
    return m_stage_name_isSet;
}

bool OAICreateDocumentationVersionRequest::is_stage_name_Valid() const{
    return m_stage_name_isValid;
}

QString OAICreateDocumentationVersionRequest::getDescription() const {
    return m_description;
}
void OAICreateDocumentationVersionRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateDocumentationVersionRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateDocumentationVersionRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateDocumentationVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documentation_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDocumentationVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_documentation_version_isValid && true;
}

} // namespace OpenAPI
