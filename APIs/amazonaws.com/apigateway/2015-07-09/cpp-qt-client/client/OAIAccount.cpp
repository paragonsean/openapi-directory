/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_cloudwatch_role_arn_isSet = false;
    m_cloudwatch_role_arn_isValid = false;

    m_throttle_settings_isSet = false;
    m_throttle_settings_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_api_key_version_isSet = false;
    m_api_key_version_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_cloudwatch_role_arn_isValid = ::OpenAPI::fromJsonValue(m_cloudwatch_role_arn, json[QString("cloudwatchRoleArn")]);
    m_cloudwatch_role_arn_isSet = !json[QString("cloudwatchRoleArn")].isNull() && m_cloudwatch_role_arn_isValid;

    m_throttle_settings_isValid = ::OpenAPI::fromJsonValue(m_throttle_settings, json[QString("throttleSettings")]);
    m_throttle_settings_isSet = !json[QString("throttleSettings")].isNull() && m_throttle_settings_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_api_key_version_isValid = ::OpenAPI::fromJsonValue(m_api_key_version, json[QString("apiKeyVersion")]);
    m_api_key_version_isSet = !json[QString("apiKeyVersion")].isNull() && m_api_key_version_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_cloudwatch_role_arn_isSet) {
        obj.insert(QString("cloudwatchRoleArn"), ::OpenAPI::toJsonValue(m_cloudwatch_role_arn));
    }
    if (m_throttle_settings.isSet()) {
        obj.insert(QString("throttleSettings"), ::OpenAPI::toJsonValue(m_throttle_settings));
    }
    if (m_features.isSet()) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_api_key_version_isSet) {
        obj.insert(QString("apiKeyVersion"), ::OpenAPI::toJsonValue(m_api_key_version));
    }
    return obj;
}

QString OAIAccount::getCloudwatchRoleArn() const {
    return m_cloudwatch_role_arn;
}
void OAIAccount::setCloudwatchRoleArn(const QString &cloudwatch_role_arn) {
    m_cloudwatch_role_arn = cloudwatch_role_arn;
    m_cloudwatch_role_arn_isSet = true;
}

bool OAIAccount::is_cloudwatch_role_arn_Set() const{
    return m_cloudwatch_role_arn_isSet;
}

bool OAIAccount::is_cloudwatch_role_arn_Valid() const{
    return m_cloudwatch_role_arn_isValid;
}

OAIAccount_throttleSettings OAIAccount::getThrottleSettings() const {
    return m_throttle_settings;
}
void OAIAccount::setThrottleSettings(const OAIAccount_throttleSettings &throttle_settings) {
    m_throttle_settings = throttle_settings;
    m_throttle_settings_isSet = true;
}

bool OAIAccount::is_throttle_settings_Set() const{
    return m_throttle_settings_isSet;
}

bool OAIAccount::is_throttle_settings_Valid() const{
    return m_throttle_settings_isValid;
}

QList OAIAccount::getFeatures() const {
    return m_features;
}
void OAIAccount::setFeatures(const QList &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIAccount::is_features_Set() const{
    return m_features_isSet;
}

bool OAIAccount::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIAccount::getApiKeyVersion() const {
    return m_api_key_version;
}
void OAIAccount::setApiKeyVersion(const QString &api_key_version) {
    m_api_key_version = api_key_version;
    m_api_key_version_isSet = true;
}

bool OAIAccount::is_api_key_version_Set() const{
    return m_api_key_version_isSet;
}

bool OAIAccount::is_api_key_version_Valid() const{
    return m_api_key_version_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloudwatch_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttle_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
