/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    return obj;
}

QString OAIModel::getId() const {
    return m_id;
}
void OAIModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIModel::getName() const {
    return m_name;
}
void OAIModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIModel::getDescription() const {
    return m_description;
}
void OAIModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAIModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIModel::getSchema() const {
    return m_schema;
}
void OAIModel::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIModel::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIModel::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIModel::getContentType() const {
    return m_content_type;
}
void OAIModel::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIModel::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIModel::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
