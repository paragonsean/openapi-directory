/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUsagePlan.h
 *
 * Represents a usage plan used to specify who can assess associated API stages. Optionally, target request rate and quota limits can be set. In some cases clients can exceed the targets that you set. Donâ€™t rely on usage plans to control costs. Consider using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html\&quot;&gt;Amazon Web Services Budgets&lt;/a&gt; to monitor costs and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\&quot;&gt;WAF&lt;/a&gt; to manage API requests.
 */

#ifndef OAIUsagePlan_H
#define OAIUsagePlan_H

#include <QJsonObject>

#include "OAIUsagePlan_quota.h"
#include "OAIUsagePlan_throttle.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUsagePlan_throttle;
class OAIUsagePlan_quota;

class OAIUsagePlan : public OAIObject {
public:
    OAIUsagePlan();
    OAIUsagePlan(QString json);
    ~OAIUsagePlan() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getApiStages() const;
    void setApiStages(const QList &api_stages);
    bool is_api_stages_Set() const;
    bool is_api_stages_Valid() const;

    OAIUsagePlan_throttle getThrottle() const;
    void setThrottle(const OAIUsagePlan_throttle &throttle);
    bool is_throttle_Set() const;
    bool is_throttle_Valid() const;

    OAIUsagePlan_quota getQuota() const;
    void setQuota(const OAIUsagePlan_quota &quota);
    bool is_quota_Set() const;
    bool is_quota_Valid() const;

    QString getProductCode() const;
    void setProductCode(const QString &product_code);
    bool is_product_code_Set() const;
    bool is_product_code_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_api_stages;
    bool m_api_stages_isSet;
    bool m_api_stages_isValid;

    OAIUsagePlan_throttle m_throttle;
    bool m_throttle_isSet;
    bool m_throttle_isValid;

    OAIUsagePlan_quota m_quota;
    bool m_quota_isSet;
    bool m_quota_isValid;

    QString m_product_code;
    bool m_product_code_isSet;
    bool m_product_code_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUsagePlan)

#endif // OAIUsagePlan_H
