/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRequestValidator_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRequestValidator_request::OAICreateRequestValidator_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRequestValidator_request::OAICreateRequestValidator_request() {
    this->initializeModel();
}

OAICreateRequestValidator_request::~OAICreateRequestValidator_request() {}

void OAICreateRequestValidator_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_validate_request_body_isSet = false;
    m_validate_request_body_isValid = false;

    m_validate_request_parameters_isSet = false;
    m_validate_request_parameters_isValid = false;
}

void OAICreateRequestValidator_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRequestValidator_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_validate_request_body_isValid = ::OpenAPI::fromJsonValue(m_validate_request_body, json[QString("validateRequestBody")]);
    m_validate_request_body_isSet = !json[QString("validateRequestBody")].isNull() && m_validate_request_body_isValid;

    m_validate_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_validate_request_parameters, json[QString("validateRequestParameters")]);
    m_validate_request_parameters_isSet = !json[QString("validateRequestParameters")].isNull() && m_validate_request_parameters_isValid;
}

QString OAICreateRequestValidator_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRequestValidator_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_validate_request_body_isSet) {
        obj.insert(QString("validateRequestBody"), ::OpenAPI::toJsonValue(m_validate_request_body));
    }
    if (m_validate_request_parameters_isSet) {
        obj.insert(QString("validateRequestParameters"), ::OpenAPI::toJsonValue(m_validate_request_parameters));
    }
    return obj;
}

QString OAICreateRequestValidator_request::getName() const {
    return m_name;
}
void OAICreateRequestValidator_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRequestValidator_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRequestValidator_request::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateRequestValidator_request::isValidateRequestBody() const {
    return m_validate_request_body;
}
void OAICreateRequestValidator_request::setValidateRequestBody(const bool &validate_request_body) {
    m_validate_request_body = validate_request_body;
    m_validate_request_body_isSet = true;
}

bool OAICreateRequestValidator_request::is_validate_request_body_Set() const{
    return m_validate_request_body_isSet;
}

bool OAICreateRequestValidator_request::is_validate_request_body_Valid() const{
    return m_validate_request_body_isValid;
}

bool OAICreateRequestValidator_request::isValidateRequestParameters() const {
    return m_validate_request_parameters;
}
void OAICreateRequestValidator_request::setValidateRequestParameters(const bool &validate_request_parameters) {
    m_validate_request_parameters = validate_request_parameters;
    m_validate_request_parameters_isSet = true;
}

bool OAICreateRequestValidator_request::is_validate_request_parameters_Set() const{
    return m_validate_request_parameters_isSet;
}

bool OAICreateRequestValidator_request::is_validate_request_parameters_Valid() const{
    return m_validate_request_parameters_isValid;
}

bool OAICreateRequestValidator_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_request_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_request_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRequestValidator_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
