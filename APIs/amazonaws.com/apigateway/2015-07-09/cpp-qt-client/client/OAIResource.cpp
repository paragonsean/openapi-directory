/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResource::OAIResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResource::OAIResource() {
    this->initializeModel();
}

OAIResource::~OAIResource() {}

void OAIResource::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_path_part_isSet = false;
    m_path_part_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_resource_methods_isSet = false;
    m_resource_methods_isValid = false;
}

void OAIResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResource::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_path_part_isValid = ::OpenAPI::fromJsonValue(m_path_part, json[QString("pathPart")]);
    m_path_part_isSet = !json[QString("pathPart")].isNull() && m_path_part_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_resource_methods_isValid = ::OpenAPI::fromJsonValue(m_resource_methods, json[QString("resourceMethods")]);
    m_resource_methods_isSet = !json[QString("resourceMethods")].isNull() && m_resource_methods_isValid;
}

QString OAIResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResource::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_path_part_isSet) {
        obj.insert(QString("pathPart"), ::OpenAPI::toJsonValue(m_path_part));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_resource_methods.isSet()) {
        obj.insert(QString("resourceMethods"), ::OpenAPI::toJsonValue(m_resource_methods));
    }
    return obj;
}

QString OAIResource::getId() const {
    return m_id;
}
void OAIResource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResource::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResource::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResource::getParentId() const {
    return m_parent_id;
}
void OAIResource::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIResource::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIResource::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIResource::getPathPart() const {
    return m_path_part;
}
void OAIResource::setPathPart(const QString &path_part) {
    m_path_part = path_part;
    m_path_part_isSet = true;
}

bool OAIResource::is_path_part_Set() const{
    return m_path_part_isSet;
}

bool OAIResource::is_path_part_Valid() const{
    return m_path_part_isValid;
}

QString OAIResource::getPath() const {
    return m_path;
}
void OAIResource::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIResource::is_path_Set() const{
    return m_path_isSet;
}

bool OAIResource::is_path_Valid() const{
    return m_path_isValid;
}

QMap OAIResource::getResourceMethods() const {
    return m_resource_methods;
}
void OAIResource::setResourceMethods(const QMap &resource_methods) {
    m_resource_methods = resource_methods;
    m_resource_methods_isSet = true;
}

bool OAIResource::is_resource_methods_Set() const{
    return m_resource_methods_isSet;
}

bool OAIResource::is_resource_methods_Valid() const{
    return m_resource_methods_isValid;
}

bool OAIResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_methods.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
