/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizer::OAIAuthorizer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizer::OAIAuthorizer() {
    this->initializeModel();
}

OAIAuthorizer::~OAIAuthorizer() {}

void OAIAuthorizer::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_provider_arns_isSet = false;
    m_provider_arns_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_authorizer_uri_isSet = false;
    m_authorizer_uri_isValid = false;

    m_authorizer_credentials_isSet = false;
    m_authorizer_credentials_isValid = false;

    m_identity_source_isSet = false;
    m_identity_source_isValid = false;

    m_identity_validation_expression_isSet = false;
    m_identity_validation_expression_isValid = false;

    m_authorizer_result_ttl_in_seconds_isSet = false;
    m_authorizer_result_ttl_in_seconds_isValid = false;
}

void OAIAuthorizer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizer::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_provider_arns_isValid = ::OpenAPI::fromJsonValue(m_provider_arns, json[QString("providerARNs")]);
    m_provider_arns_isSet = !json[QString("providerARNs")].isNull() && m_provider_arns_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_authorizer_uri_isValid = ::OpenAPI::fromJsonValue(m_authorizer_uri, json[QString("authorizerUri")]);
    m_authorizer_uri_isSet = !json[QString("authorizerUri")].isNull() && m_authorizer_uri_isValid;

    m_authorizer_credentials_isValid = ::OpenAPI::fromJsonValue(m_authorizer_credentials, json[QString("authorizerCredentials")]);
    m_authorizer_credentials_isSet = !json[QString("authorizerCredentials")].isNull() && m_authorizer_credentials_isValid;

    m_identity_source_isValid = ::OpenAPI::fromJsonValue(m_identity_source, json[QString("identitySource")]);
    m_identity_source_isSet = !json[QString("identitySource")].isNull() && m_identity_source_isValid;

    m_identity_validation_expression_isValid = ::OpenAPI::fromJsonValue(m_identity_validation_expression, json[QString("identityValidationExpression")]);
    m_identity_validation_expression_isSet = !json[QString("identityValidationExpression")].isNull() && m_identity_validation_expression_isValid;

    m_authorizer_result_ttl_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_authorizer_result_ttl_in_seconds, json[QString("authorizerResultTtlInSeconds")]);
    m_authorizer_result_ttl_in_seconds_isSet = !json[QString("authorizerResultTtlInSeconds")].isNull() && m_authorizer_result_ttl_in_seconds_isValid;
}

QString OAIAuthorizer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizer::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_provider_arns.isSet()) {
        obj.insert(QString("providerARNs"), ::OpenAPI::toJsonValue(m_provider_arns));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_authorizer_uri_isSet) {
        obj.insert(QString("authorizerUri"), ::OpenAPI::toJsonValue(m_authorizer_uri));
    }
    if (m_authorizer_credentials_isSet) {
        obj.insert(QString("authorizerCredentials"), ::OpenAPI::toJsonValue(m_authorizer_credentials));
    }
    if (m_identity_source_isSet) {
        obj.insert(QString("identitySource"), ::OpenAPI::toJsonValue(m_identity_source));
    }
    if (m_identity_validation_expression_isSet) {
        obj.insert(QString("identityValidationExpression"), ::OpenAPI::toJsonValue(m_identity_validation_expression));
    }
    if (m_authorizer_result_ttl_in_seconds_isSet) {
        obj.insert(QString("authorizerResultTtlInSeconds"), ::OpenAPI::toJsonValue(m_authorizer_result_ttl_in_seconds));
    }
    return obj;
}

QString OAIAuthorizer::getId() const {
    return m_id;
}
void OAIAuthorizer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthorizer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthorizer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAuthorizer::getName() const {
    return m_name;
}
void OAIAuthorizer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAuthorizer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAuthorizer::is_name_Valid() const{
    return m_name_isValid;
}

OAIAuthorizerType OAIAuthorizer::getType() const {
    return m_type;
}
void OAIAuthorizer::setType(const OAIAuthorizerType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAuthorizer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAuthorizer::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIAuthorizer::getProviderArns() const {
    return m_provider_arns;
}
void OAIAuthorizer::setProviderArns(const QList &provider_arns) {
    m_provider_arns = provider_arns;
    m_provider_arns_isSet = true;
}

bool OAIAuthorizer::is_provider_arns_Set() const{
    return m_provider_arns_isSet;
}

bool OAIAuthorizer::is_provider_arns_Valid() const{
    return m_provider_arns_isValid;
}

QString OAIAuthorizer::getAuthType() const {
    return m_auth_type;
}
void OAIAuthorizer::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIAuthorizer::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIAuthorizer::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIAuthorizer::getAuthorizerUri() const {
    return m_authorizer_uri;
}
void OAIAuthorizer::setAuthorizerUri(const QString &authorizer_uri) {
    m_authorizer_uri = authorizer_uri;
    m_authorizer_uri_isSet = true;
}

bool OAIAuthorizer::is_authorizer_uri_Set() const{
    return m_authorizer_uri_isSet;
}

bool OAIAuthorizer::is_authorizer_uri_Valid() const{
    return m_authorizer_uri_isValid;
}

QString OAIAuthorizer::getAuthorizerCredentials() const {
    return m_authorizer_credentials;
}
void OAIAuthorizer::setAuthorizerCredentials(const QString &authorizer_credentials) {
    m_authorizer_credentials = authorizer_credentials;
    m_authorizer_credentials_isSet = true;
}

bool OAIAuthorizer::is_authorizer_credentials_Set() const{
    return m_authorizer_credentials_isSet;
}

bool OAIAuthorizer::is_authorizer_credentials_Valid() const{
    return m_authorizer_credentials_isValid;
}

QString OAIAuthorizer::getIdentitySource() const {
    return m_identity_source;
}
void OAIAuthorizer::setIdentitySource(const QString &identity_source) {
    m_identity_source = identity_source;
    m_identity_source_isSet = true;
}

bool OAIAuthorizer::is_identity_source_Set() const{
    return m_identity_source_isSet;
}

bool OAIAuthorizer::is_identity_source_Valid() const{
    return m_identity_source_isValid;
}

QString OAIAuthorizer::getIdentityValidationExpression() const {
    return m_identity_validation_expression;
}
void OAIAuthorizer::setIdentityValidationExpression(const QString &identity_validation_expression) {
    m_identity_validation_expression = identity_validation_expression;
    m_identity_validation_expression_isSet = true;
}

bool OAIAuthorizer::is_identity_validation_expression_Set() const{
    return m_identity_validation_expression_isSet;
}

bool OAIAuthorizer::is_identity_validation_expression_Valid() const{
    return m_identity_validation_expression_isValid;
}

qint32 OAIAuthorizer::getAuthorizerResultTtlInSeconds() const {
    return m_authorizer_result_ttl_in_seconds;
}
void OAIAuthorizer::setAuthorizerResultTtlInSeconds(const qint32 &authorizer_result_ttl_in_seconds) {
    m_authorizer_result_ttl_in_seconds = authorizer_result_ttl_in_seconds;
    m_authorizer_result_ttl_in_seconds_isSet = true;
}

bool OAIAuthorizer::is_authorizer_result_ttl_in_seconds_Set() const{
    return m_authorizer_result_ttl_in_seconds_isSet;
}

bool OAIAuthorizer::is_authorizer_result_ttl_in_seconds_Valid() const{
    return m_authorizer_result_ttl_in_seconds_isValid;
}

bool OAIAuthorizer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_validation_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_result_ttl_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
