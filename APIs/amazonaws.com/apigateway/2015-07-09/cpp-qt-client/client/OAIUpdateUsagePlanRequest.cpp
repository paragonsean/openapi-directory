/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUsagePlanRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUsagePlanRequest::OAIUpdateUsagePlanRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUsagePlanRequest::OAIUpdateUsagePlanRequest() {
    this->initializeModel();
}

OAIUpdateUsagePlanRequest::~OAIUpdateUsagePlanRequest() {}

void OAIUpdateUsagePlanRequest::initializeModel() {

    m_patch_operations_isSet = false;
    m_patch_operations_isValid = false;
}

void OAIUpdateUsagePlanRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUsagePlanRequest::fromJsonObject(QJsonObject json) {

    m_patch_operations_isValid = ::OpenAPI::fromJsonValue(m_patch_operations, json[QString("patchOperations")]);
    m_patch_operations_isSet = !json[QString("patchOperations")].isNull() && m_patch_operations_isValid;
}

QString OAIUpdateUsagePlanRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUsagePlanRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_patch_operations.isSet()) {
        obj.insert(QString("patchOperations"), ::OpenAPI::toJsonValue(m_patch_operations));
    }
    return obj;
}

QList OAIUpdateUsagePlanRequest::getPatchOperations() const {
    return m_patch_operations;
}
void OAIUpdateUsagePlanRequest::setPatchOperations(const QList &patch_operations) {
    m_patch_operations = patch_operations;
    m_patch_operations_isSet = true;
}

bool OAIUpdateUsagePlanRequest::is_patch_operations_Set() const{
    return m_patch_operations_isSet;
}

bool OAIUpdateUsagePlanRequest::is_patch_operations_Valid() const{
    return m_patch_operations_isValid;
}

bool OAIUpdateUsagePlanRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_patch_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUsagePlanRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
