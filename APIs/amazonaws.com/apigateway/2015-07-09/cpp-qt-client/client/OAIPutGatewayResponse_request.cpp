/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutGatewayResponse_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutGatewayResponse_request::OAIPutGatewayResponse_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutGatewayResponse_request::OAIPutGatewayResponse_request() {
    this->initializeModel();
}

OAIPutGatewayResponse_request::~OAIPutGatewayResponse_request() {}

void OAIPutGatewayResponse_request::initializeModel() {

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_response_parameters_isSet = false;
    m_response_parameters_isValid = false;

    m_response_templates_isSet = false;
    m_response_templates_isValid = false;
}

void OAIPutGatewayResponse_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutGatewayResponse_request::fromJsonObject(QJsonObject json) {

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_response_parameters_isValid = ::OpenAPI::fromJsonValue(m_response_parameters, json[QString("responseParameters")]);
    m_response_parameters_isSet = !json[QString("responseParameters")].isNull() && m_response_parameters_isValid;

    m_response_templates_isValid = ::OpenAPI::fromJsonValue(m_response_templates, json[QString("responseTemplates")]);
    m_response_templates_isSet = !json[QString("responseTemplates")].isNull() && m_response_templates_isValid;
}

QString OAIPutGatewayResponse_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutGatewayResponse_request::asJsonObject() const {
    QJsonObject obj;
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_response_parameters.size() > 0) {
        obj.insert(QString("responseParameters"), ::OpenAPI::toJsonValue(m_response_parameters));
    }
    if (m_response_templates.size() > 0) {
        obj.insert(QString("responseTemplates"), ::OpenAPI::toJsonValue(m_response_templates));
    }
    return obj;
}

QString OAIPutGatewayResponse_request::getStatusCode() const {
    return m_status_code;
}
void OAIPutGatewayResponse_request::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIPutGatewayResponse_request::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIPutGatewayResponse_request::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QMap<QString, QString> OAIPutGatewayResponse_request::getResponseParameters() const {
    return m_response_parameters;
}
void OAIPutGatewayResponse_request::setResponseParameters(const QMap<QString, QString> &response_parameters) {
    m_response_parameters = response_parameters;
    m_response_parameters_isSet = true;
}

bool OAIPutGatewayResponse_request::is_response_parameters_Set() const{
    return m_response_parameters_isSet;
}

bool OAIPutGatewayResponse_request::is_response_parameters_Valid() const{
    return m_response_parameters_isValid;
}

QMap<QString, QString> OAIPutGatewayResponse_request::getResponseTemplates() const {
    return m_response_templates;
}
void OAIPutGatewayResponse_request::setResponseTemplates(const QMap<QString, QString> &response_templates) {
    m_response_templates = response_templates;
    m_response_templates_isSet = true;
}

bool OAIPutGatewayResponse_request::is_response_templates_Set() const{
    return m_response_templates_isSet;
}

bool OAIPutGatewayResponse_request::is_response_templates_Valid() const{
    return m_response_templates_isValid;
}

bool OAIPutGatewayResponse_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutGatewayResponse_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
