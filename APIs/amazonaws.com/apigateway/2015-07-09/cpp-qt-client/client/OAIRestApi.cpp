/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestApi.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestApi::OAIRestApi(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestApi::OAIRestApi() {
    this->initializeModel();
}

OAIRestApi::~OAIRestApi() {}

void OAIRestApi::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;

    m_binary_media_types_isSet = false;
    m_binary_media_types_isValid = false;

    m_minimum_compression_size_isSet = false;
    m_minimum_compression_size_isValid = false;

    m_api_key_source_isSet = false;
    m_api_key_source_isValid = false;

    m_endpoint_configuration_isSet = false;
    m_endpoint_configuration_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_disable_execute_api_endpoint_isSet = false;
    m_disable_execute_api_endpoint_isValid = false;
}

void OAIRestApi::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestApi::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;

    m_binary_media_types_isValid = ::OpenAPI::fromJsonValue(m_binary_media_types, json[QString("binaryMediaTypes")]);
    m_binary_media_types_isSet = !json[QString("binaryMediaTypes")].isNull() && m_binary_media_types_isValid;

    m_minimum_compression_size_isValid = ::OpenAPI::fromJsonValue(m_minimum_compression_size, json[QString("minimumCompressionSize")]);
    m_minimum_compression_size_isSet = !json[QString("minimumCompressionSize")].isNull() && m_minimum_compression_size_isValid;

    m_api_key_source_isValid = ::OpenAPI::fromJsonValue(m_api_key_source, json[QString("apiKeySource")]);
    m_api_key_source_isSet = !json[QString("apiKeySource")].isNull() && m_api_key_source_isValid;

    m_endpoint_configuration_isValid = ::OpenAPI::fromJsonValue(m_endpoint_configuration, json[QString("endpointConfiguration")]);
    m_endpoint_configuration_isSet = !json[QString("endpointConfiguration")].isNull() && m_endpoint_configuration_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_disable_execute_api_endpoint_isValid = ::OpenAPI::fromJsonValue(m_disable_execute_api_endpoint, json[QString("disableExecuteApiEndpoint")]);
    m_disable_execute_api_endpoint_isSet = !json[QString("disableExecuteApiEndpoint")].isNull() && m_disable_execute_api_endpoint_isValid;
}

QString OAIRestApi::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestApi::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_warnings.isSet()) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    if (m_binary_media_types.isSet()) {
        obj.insert(QString("binaryMediaTypes"), ::OpenAPI::toJsonValue(m_binary_media_types));
    }
    if (m_minimum_compression_size_isSet) {
        obj.insert(QString("minimumCompressionSize"), ::OpenAPI::toJsonValue(m_minimum_compression_size));
    }
    if (m_api_key_source.isSet()) {
        obj.insert(QString("apiKeySource"), ::OpenAPI::toJsonValue(m_api_key_source));
    }
    if (m_endpoint_configuration.isSet()) {
        obj.insert(QString("endpointConfiguration"), ::OpenAPI::toJsonValue(m_endpoint_configuration));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_disable_execute_api_endpoint_isSet) {
        obj.insert(QString("disableExecuteApiEndpoint"), ::OpenAPI::toJsonValue(m_disable_execute_api_endpoint));
    }
    return obj;
}

QString OAIRestApi::getId() const {
    return m_id;
}
void OAIRestApi::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRestApi::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRestApi::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRestApi::getName() const {
    return m_name;
}
void OAIRestApi::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRestApi::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRestApi::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRestApi::getDescription() const {
    return m_description;
}
void OAIRestApi::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRestApi::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRestApi::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIRestApi::getCreatedDate() const {
    return m_created_date;
}
void OAIRestApi::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIRestApi::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIRestApi::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIRestApi::getVersion() const {
    return m_version;
}
void OAIRestApi::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRestApi::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRestApi::is_version_Valid() const{
    return m_version_isValid;
}

QList OAIRestApi::getWarnings() const {
    return m_warnings;
}
void OAIRestApi::setWarnings(const QList &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIRestApi::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIRestApi::is_warnings_Valid() const{
    return m_warnings_isValid;
}

QList OAIRestApi::getBinaryMediaTypes() const {
    return m_binary_media_types;
}
void OAIRestApi::setBinaryMediaTypes(const QList &binary_media_types) {
    m_binary_media_types = binary_media_types;
    m_binary_media_types_isSet = true;
}

bool OAIRestApi::is_binary_media_types_Set() const{
    return m_binary_media_types_isSet;
}

bool OAIRestApi::is_binary_media_types_Valid() const{
    return m_binary_media_types_isValid;
}

qint32 OAIRestApi::getMinimumCompressionSize() const {
    return m_minimum_compression_size;
}
void OAIRestApi::setMinimumCompressionSize(const qint32 &minimum_compression_size) {
    m_minimum_compression_size = minimum_compression_size;
    m_minimum_compression_size_isSet = true;
}

bool OAIRestApi::is_minimum_compression_size_Set() const{
    return m_minimum_compression_size_isSet;
}

bool OAIRestApi::is_minimum_compression_size_Valid() const{
    return m_minimum_compression_size_isValid;
}

OAIApiKeySourceType OAIRestApi::getApiKeySource() const {
    return m_api_key_source;
}
void OAIRestApi::setApiKeySource(const OAIApiKeySourceType &api_key_source) {
    m_api_key_source = api_key_source;
    m_api_key_source_isSet = true;
}

bool OAIRestApi::is_api_key_source_Set() const{
    return m_api_key_source_isSet;
}

bool OAIRestApi::is_api_key_source_Valid() const{
    return m_api_key_source_isValid;
}

OAIRestApi_endpointConfiguration OAIRestApi::getEndpointConfiguration() const {
    return m_endpoint_configuration;
}
void OAIRestApi::setEndpointConfiguration(const OAIRestApi_endpointConfiguration &endpoint_configuration) {
    m_endpoint_configuration = endpoint_configuration;
    m_endpoint_configuration_isSet = true;
}

bool OAIRestApi::is_endpoint_configuration_Set() const{
    return m_endpoint_configuration_isSet;
}

bool OAIRestApi::is_endpoint_configuration_Valid() const{
    return m_endpoint_configuration_isValid;
}

QString OAIRestApi::getPolicy() const {
    return m_policy;
}
void OAIRestApi::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIRestApi::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIRestApi::is_policy_Valid() const{
    return m_policy_isValid;
}

QMap OAIRestApi::getTags() const {
    return m_tags;
}
void OAIRestApi::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRestApi::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRestApi::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRestApi::getDisableExecuteApiEndpoint() const {
    return m_disable_execute_api_endpoint;
}
void OAIRestApi::setDisableExecuteApiEndpoint(const bool &disable_execute_api_endpoint) {
    m_disable_execute_api_endpoint = disable_execute_api_endpoint;
    m_disable_execute_api_endpoint_isSet = true;
}

bool OAIRestApi::is_disable_execute_api_endpoint_Set() const{
    return m_disable_execute_api_endpoint_isSet;
}

bool OAIRestApi::is_disable_execute_api_endpoint_Valid() const{
    return m_disable_execute_api_endpoint_isValid;
}

bool OAIRestApi::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_media_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_compression_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_execute_api_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestApi::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
