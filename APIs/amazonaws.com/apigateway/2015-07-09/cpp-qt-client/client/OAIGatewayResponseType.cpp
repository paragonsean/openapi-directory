/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayResponseType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayResponseType::OAIGatewayResponseType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayResponseType::OAIGatewayResponseType() {
    this->initializeModel();
}

OAIGatewayResponseType::~OAIGatewayResponseType() {}

void OAIGatewayResponseType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIGatewayResponseType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIGatewayResponseType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DEFAULT_4XX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::DEFAULT_4XX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEFAULT_5XX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::DEFAULT_5XX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESOURCE_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::RESOURCE_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAUTHORIZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::UNAUTHORIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_API_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::INVALID_API_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTHORIZER_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::AUTHORIZER_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTHORIZER_CONFIGURATION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::AUTHORIZER_CONFIGURATION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_SIGNATURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::INVALID_SIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED_TOKEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::EXPIRED_TOKEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MISSING_AUTHENTICATION_TOKEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::MISSING_AUTHENTICATION_TOKEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTEGRATION_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::INTEGRATION_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTEGRATION_TIMEOUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::INTEGRATION_TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("API_CONFIGURATION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::API_CONFIGURATION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_MEDIA_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::UNSUPPORTED_MEDIA_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAD_REQUEST_PARAMETERS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::BAD_REQUEST_PARAMETERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BAD_REQUEST_BODY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::BAD_REQUEST_BODY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REQUEST_TOO_LARGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::REQUEST_TOO_LARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("THROTTLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::THROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUOTA_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::QUOTA_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WAF_FILTERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIGatewayResponseType::WAF_FILTERED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIGatewayResponseType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIGatewayResponseType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIGatewayResponseType::DEFAULT_4XX:
            val = "DEFAULT_4XX";
            break;
        case eOAIGatewayResponseType::DEFAULT_5XX:
            val = "DEFAULT_5XX";
            break;
        case eOAIGatewayResponseType::RESOURCE_NOT_FOUND:
            val = "RESOURCE_NOT_FOUND";
            break;
        case eOAIGatewayResponseType::UNAUTHORIZED:
            val = "UNAUTHORIZED";
            break;
        case eOAIGatewayResponseType::INVALID_API_KEY:
            val = "INVALID_API_KEY";
            break;
        case eOAIGatewayResponseType::ACCESS_DENIED:
            val = "ACCESS_DENIED";
            break;
        case eOAIGatewayResponseType::AUTHORIZER_FAILURE:
            val = "AUTHORIZER_FAILURE";
            break;
        case eOAIGatewayResponseType::AUTHORIZER_CONFIGURATION_ERROR:
            val = "AUTHORIZER_CONFIGURATION_ERROR";
            break;
        case eOAIGatewayResponseType::INVALID_SIGNATURE:
            val = "INVALID_SIGNATURE";
            break;
        case eOAIGatewayResponseType::EXPIRED_TOKEN:
            val = "EXPIRED_TOKEN";
            break;
        case eOAIGatewayResponseType::MISSING_AUTHENTICATION_TOKEN:
            val = "MISSING_AUTHENTICATION_TOKEN";
            break;
        case eOAIGatewayResponseType::INTEGRATION_FAILURE:
            val = "INTEGRATION_FAILURE";
            break;
        case eOAIGatewayResponseType::INTEGRATION_TIMEOUT:
            val = "INTEGRATION_TIMEOUT";
            break;
        case eOAIGatewayResponseType::API_CONFIGURATION_ERROR:
            val = "API_CONFIGURATION_ERROR";
            break;
        case eOAIGatewayResponseType::UNSUPPORTED_MEDIA_TYPE:
            val = "UNSUPPORTED_MEDIA_TYPE";
            break;
        case eOAIGatewayResponseType::BAD_REQUEST_PARAMETERS:
            val = "BAD_REQUEST_PARAMETERS";
            break;
        case eOAIGatewayResponseType::BAD_REQUEST_BODY:
            val = "BAD_REQUEST_BODY";
            break;
        case eOAIGatewayResponseType::REQUEST_TOO_LARGE:
            val = "REQUEST_TOO_LARGE";
            break;
        case eOAIGatewayResponseType::THROTTLED:
            val = "THROTTLED";
            break;
        case eOAIGatewayResponseType::QUOTA_EXCEEDED:
            val = "QUOTA_EXCEEDED";
            break;
        case eOAIGatewayResponseType::WAF_FILTERED:
            val = "WAF_FILTERED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIGatewayResponseType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIGatewayResponseType::eOAIGatewayResponseType OAIGatewayResponseType::getValue() const {
    return m_value;
}

void OAIGatewayResponseType::setValue(const OAIGatewayResponseType::eOAIGatewayResponseType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIGatewayResponseType::isSet() const {
    
    return m_value_isSet;
}

bool OAIGatewayResponseType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
