/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointConfiguration::OAIEndpointConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointConfiguration::OAIEndpointConfiguration() {
    this->initializeModel();
}

OAIEndpointConfiguration::~OAIEndpointConfiguration() {}

void OAIEndpointConfiguration::initializeModel() {

    m_types_isSet = false;
    m_types_isValid = false;

    m_vpc_endpoint_ids_isSet = false;
    m_vpc_endpoint_ids_isValid = false;
}

void OAIEndpointConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointConfiguration::fromJsonObject(QJsonObject json) {

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_vpc_endpoint_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_ids, json[QString("vpcEndpointIds")]);
    m_vpc_endpoint_ids_isSet = !json[QString("vpcEndpointIds")].isNull() && m_vpc_endpoint_ids_isValid;
}

QString OAIEndpointConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_types.isSet()) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_vpc_endpoint_ids.isSet()) {
        obj.insert(QString("vpcEndpointIds"), ::OpenAPI::toJsonValue(m_vpc_endpoint_ids));
    }
    return obj;
}

QList OAIEndpointConfiguration::getTypes() const {
    return m_types;
}
void OAIEndpointConfiguration::setTypes(const QList &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIEndpointConfiguration::is_types_Set() const{
    return m_types_isSet;
}

bool OAIEndpointConfiguration::is_types_Valid() const{
    return m_types_isValid;
}

QList OAIEndpointConfiguration::getVpcEndpointIds() const {
    return m_vpc_endpoint_ids;
}
void OAIEndpointConfiguration::setVpcEndpointIds(const QList &vpc_endpoint_ids) {
    m_vpc_endpoint_ids = vpc_endpoint_ids;
    m_vpc_endpoint_ids_isSet = true;
}

bool OAIEndpointConfiguration::is_vpc_endpoint_ids_Set() const{
    return m_vpc_endpoint_ids_isSet;
}

bool OAIEndpointConfiguration::is_vpc_endpoint_ids_Valid() const{
    return m_vpc_endpoint_ids_isValid;
}

bool OAIEndpointConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoint_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
