/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMethodSnapshot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMethodSnapshot::OAIMethodSnapshot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMethodSnapshot::OAIMethodSnapshot() {
    this->initializeModel();
}

OAIMethodSnapshot::~OAIMethodSnapshot() {}

void OAIMethodSnapshot::initializeModel() {

    m_authorization_type_isSet = false;
    m_authorization_type_isValid = false;

    m_api_key_required_isSet = false;
    m_api_key_required_isValid = false;
}

void OAIMethodSnapshot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMethodSnapshot::fromJsonObject(QJsonObject json) {

    m_authorization_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_type, json[QString("authorizationType")]);
    m_authorization_type_isSet = !json[QString("authorizationType")].isNull() && m_authorization_type_isValid;

    m_api_key_required_isValid = ::OpenAPI::fromJsonValue(m_api_key_required, json[QString("apiKeyRequired")]);
    m_api_key_required_isSet = !json[QString("apiKeyRequired")].isNull() && m_api_key_required_isValid;
}

QString OAIMethodSnapshot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMethodSnapshot::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_type_isSet) {
        obj.insert(QString("authorizationType"), ::OpenAPI::toJsonValue(m_authorization_type));
    }
    if (m_api_key_required_isSet) {
        obj.insert(QString("apiKeyRequired"), ::OpenAPI::toJsonValue(m_api_key_required));
    }
    return obj;
}

QString OAIMethodSnapshot::getAuthorizationType() const {
    return m_authorization_type;
}
void OAIMethodSnapshot::setAuthorizationType(const QString &authorization_type) {
    m_authorization_type = authorization_type;
    m_authorization_type_isSet = true;
}

bool OAIMethodSnapshot::is_authorization_type_Set() const{
    return m_authorization_type_isSet;
}

bool OAIMethodSnapshot::is_authorization_type_Valid() const{
    return m_authorization_type_isValid;
}

bool OAIMethodSnapshot::getApiKeyRequired() const {
    return m_api_key_required;
}
void OAIMethodSnapshot::setApiKeyRequired(const bool &api_key_required) {
    m_api_key_required = api_key_required;
    m_api_key_required_isSet = true;
}

bool OAIMethodSnapshot::is_api_key_required_Set() const{
    return m_api_key_required_isSet;
}

bool OAIMethodSnapshot::is_api_key_required_Valid() const{
    return m_api_key_required_isValid;
}

bool OAIMethodSnapshot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMethodSnapshot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
