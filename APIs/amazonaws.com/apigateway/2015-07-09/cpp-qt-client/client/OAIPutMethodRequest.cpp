/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMethodRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMethodRequest::OAIPutMethodRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMethodRequest::OAIPutMethodRequest() {
    this->initializeModel();
}

OAIPutMethodRequest::~OAIPutMethodRequest() {}

void OAIPutMethodRequest::initializeModel() {

    m_authorization_type_isSet = false;
    m_authorization_type_isValid = false;

    m_authorizer_id_isSet = false;
    m_authorizer_id_isValid = false;

    m_api_key_required_isSet = false;
    m_api_key_required_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_request_parameters_isSet = false;
    m_request_parameters_isValid = false;

    m_request_models_isSet = false;
    m_request_models_isValid = false;

    m_request_validator_id_isSet = false;
    m_request_validator_id_isValid = false;

    m_authorization_scopes_isSet = false;
    m_authorization_scopes_isValid = false;
}

void OAIPutMethodRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutMethodRequest::fromJsonObject(QJsonObject json) {

    m_authorization_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_type, json[QString("authorizationType")]);
    m_authorization_type_isSet = !json[QString("authorizationType")].isNull() && m_authorization_type_isValid;

    m_authorizer_id_isValid = ::OpenAPI::fromJsonValue(m_authorizer_id, json[QString("authorizerId")]);
    m_authorizer_id_isSet = !json[QString("authorizerId")].isNull() && m_authorizer_id_isValid;

    m_api_key_required_isValid = ::OpenAPI::fromJsonValue(m_api_key_required, json[QString("apiKeyRequired")]);
    m_api_key_required_isSet = !json[QString("apiKeyRequired")].isNull() && m_api_key_required_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("operationName")]);
    m_operation_name_isSet = !json[QString("operationName")].isNull() && m_operation_name_isValid;

    m_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_request_parameters, json[QString("requestParameters")]);
    m_request_parameters_isSet = !json[QString("requestParameters")].isNull() && m_request_parameters_isValid;

    m_request_models_isValid = ::OpenAPI::fromJsonValue(m_request_models, json[QString("requestModels")]);
    m_request_models_isSet = !json[QString("requestModels")].isNull() && m_request_models_isValid;

    m_request_validator_id_isValid = ::OpenAPI::fromJsonValue(m_request_validator_id, json[QString("requestValidatorId")]);
    m_request_validator_id_isSet = !json[QString("requestValidatorId")].isNull() && m_request_validator_id_isValid;

    m_authorization_scopes_isValid = ::OpenAPI::fromJsonValue(m_authorization_scopes, json[QString("authorizationScopes")]);
    m_authorization_scopes_isSet = !json[QString("authorizationScopes")].isNull() && m_authorization_scopes_isValid;
}

QString OAIPutMethodRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutMethodRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_type_isSet) {
        obj.insert(QString("authorizationType"), ::OpenAPI::toJsonValue(m_authorization_type));
    }
    if (m_authorizer_id_isSet) {
        obj.insert(QString("authorizerId"), ::OpenAPI::toJsonValue(m_authorizer_id));
    }
    if (m_api_key_required_isSet) {
        obj.insert(QString("apiKeyRequired"), ::OpenAPI::toJsonValue(m_api_key_required));
    }
    if (m_operation_name_isSet) {
        obj.insert(QString("operationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_request_parameters.isSet()) {
        obj.insert(QString("requestParameters"), ::OpenAPI::toJsonValue(m_request_parameters));
    }
    if (m_request_models.isSet()) {
        obj.insert(QString("requestModels"), ::OpenAPI::toJsonValue(m_request_models));
    }
    if (m_request_validator_id_isSet) {
        obj.insert(QString("requestValidatorId"), ::OpenAPI::toJsonValue(m_request_validator_id));
    }
    if (m_authorization_scopes.isSet()) {
        obj.insert(QString("authorizationScopes"), ::OpenAPI::toJsonValue(m_authorization_scopes));
    }
    return obj;
}

QString OAIPutMethodRequest::getAuthorizationType() const {
    return m_authorization_type;
}
void OAIPutMethodRequest::setAuthorizationType(const QString &authorization_type) {
    m_authorization_type = authorization_type;
    m_authorization_type_isSet = true;
}

bool OAIPutMethodRequest::is_authorization_type_Set() const{
    return m_authorization_type_isSet;
}

bool OAIPutMethodRequest::is_authorization_type_Valid() const{
    return m_authorization_type_isValid;
}

QString OAIPutMethodRequest::getAuthorizerId() const {
    return m_authorizer_id;
}
void OAIPutMethodRequest::setAuthorizerId(const QString &authorizer_id) {
    m_authorizer_id = authorizer_id;
    m_authorizer_id_isSet = true;
}

bool OAIPutMethodRequest::is_authorizer_id_Set() const{
    return m_authorizer_id_isSet;
}

bool OAIPutMethodRequest::is_authorizer_id_Valid() const{
    return m_authorizer_id_isValid;
}

bool OAIPutMethodRequest::getApiKeyRequired() const {
    return m_api_key_required;
}
void OAIPutMethodRequest::setApiKeyRequired(const bool &api_key_required) {
    m_api_key_required = api_key_required;
    m_api_key_required_isSet = true;
}

bool OAIPutMethodRequest::is_api_key_required_Set() const{
    return m_api_key_required_isSet;
}

bool OAIPutMethodRequest::is_api_key_required_Valid() const{
    return m_api_key_required_isValid;
}

QString OAIPutMethodRequest::getOperationName() const {
    return m_operation_name;
}
void OAIPutMethodRequest::setOperationName(const QString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAIPutMethodRequest::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAIPutMethodRequest::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

QMap OAIPutMethodRequest::getRequestParameters() const {
    return m_request_parameters;
}
void OAIPutMethodRequest::setRequestParameters(const QMap &request_parameters) {
    m_request_parameters = request_parameters;
    m_request_parameters_isSet = true;
}

bool OAIPutMethodRequest::is_request_parameters_Set() const{
    return m_request_parameters_isSet;
}

bool OAIPutMethodRequest::is_request_parameters_Valid() const{
    return m_request_parameters_isValid;
}

QMap OAIPutMethodRequest::getRequestModels() const {
    return m_request_models;
}
void OAIPutMethodRequest::setRequestModels(const QMap &request_models) {
    m_request_models = request_models;
    m_request_models_isSet = true;
}

bool OAIPutMethodRequest::is_request_models_Set() const{
    return m_request_models_isSet;
}

bool OAIPutMethodRequest::is_request_models_Valid() const{
    return m_request_models_isValid;
}

QString OAIPutMethodRequest::getRequestValidatorId() const {
    return m_request_validator_id;
}
void OAIPutMethodRequest::setRequestValidatorId(const QString &request_validator_id) {
    m_request_validator_id = request_validator_id;
    m_request_validator_id_isSet = true;
}

bool OAIPutMethodRequest::is_request_validator_id_Set() const{
    return m_request_validator_id_isSet;
}

bool OAIPutMethodRequest::is_request_validator_id_Valid() const{
    return m_request_validator_id_isValid;
}

QList OAIPutMethodRequest::getAuthorizationScopes() const {
    return m_authorization_scopes;
}
void OAIPutMethodRequest::setAuthorizationScopes(const QList &authorization_scopes) {
    m_authorization_scopes = authorization_scopes;
    m_authorization_scopes_isSet = true;
}

bool OAIPutMethodRequest::is_authorization_scopes_Set() const{
    return m_authorization_scopes_isSet;
}

bool OAIPutMethodRequest::is_authorization_scopes_Valid() const{
    return m_authorization_scopes_isValid;
}

bool OAIPutMethodRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_models.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_validator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutMethodRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorization_type_isValid && true;
}

} // namespace OpenAPI
