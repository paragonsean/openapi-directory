/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStages::OAIStages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStages::OAIStages() {
    this->initializeModel();
}

OAIStages::~OAIStages() {}

void OAIStages::initializeModel() {

    m_item_isSet = false;
    m_item_isValid = false;
}

void OAIStages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStages::fromJsonObject(QJsonObject json) {

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;
}

QString OAIStages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStages::asJsonObject() const {
    QJsonObject obj;
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    return obj;
}

QList OAIStages::getItem() const {
    return m_item;
}
void OAIStages::setItem(const QList &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIStages::is_item_Set() const{
    return m_item_isSet;
}

bool OAIStages::is_item_Valid() const{
    return m_item_isValid;
}

bool OAIStages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStages::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
