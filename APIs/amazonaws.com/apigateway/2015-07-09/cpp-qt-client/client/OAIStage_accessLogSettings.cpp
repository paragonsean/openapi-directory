/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStage_accessLogSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStage_accessLogSettings::OAIStage_accessLogSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStage_accessLogSettings::OAIStage_accessLogSettings() {
    this->initializeModel();
}

OAIStage_accessLogSettings::~OAIStage_accessLogSettings() {}

void OAIStage_accessLogSettings::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_destination_arn_isSet = false;
    m_destination_arn_isValid = false;
}

void OAIStage_accessLogSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStage_accessLogSettings::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_arn, json[QString("destinationArn")]);
    m_destination_arn_isSet = !json[QString("destinationArn")].isNull() && m_destination_arn_isValid;
}

QString OAIStage_accessLogSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStage_accessLogSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_destination_arn_isSet) {
        obj.insert(QString("destinationArn"), ::OpenAPI::toJsonValue(m_destination_arn));
    }
    return obj;
}

QString OAIStage_accessLogSettings::getFormat() const {
    return m_format;
}
void OAIStage_accessLogSettings::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIStage_accessLogSettings::is_format_Set() const{
    return m_format_isSet;
}

bool OAIStage_accessLogSettings::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIStage_accessLogSettings::getDestinationArn() const {
    return m_destination_arn;
}
void OAIStage_accessLogSettings::setDestinationArn(const QString &destination_arn) {
    m_destination_arn = destination_arn;
    m_destination_arn_isSet = true;
}

bool OAIStage_accessLogSettings::is_destination_arn_Set() const{
    return m_destination_arn_isSet;
}

bool OAIStage_accessLogSettings::is_destination_arn_Valid() const{
    return m_destination_arn_isValid;
}

bool OAIStage_accessLogSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStage_accessLogSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
