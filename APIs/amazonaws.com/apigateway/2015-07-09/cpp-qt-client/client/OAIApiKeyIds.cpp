/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKeyIds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKeyIds::OAIApiKeyIds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKeyIds::OAIApiKeyIds() {
    this->initializeModel();
}

OAIApiKeyIds::~OAIApiKeyIds() {}

void OAIApiKeyIds::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIApiKeyIds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKeyIds::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIApiKeyIds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKeyIds::asJsonObject() const {
    QJsonObject obj;
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_warnings.isSet()) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList OAIApiKeyIds::getIds() const {
    return m_ids;
}
void OAIApiKeyIds::setIds(const QList &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIApiKeyIds::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIApiKeyIds::is_ids_Valid() const{
    return m_ids_isValid;
}

QList OAIApiKeyIds::getWarnings() const {
    return m_warnings;
}
void OAIApiKeyIds::setWarnings(const QList &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIApiKeyIds::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIApiKeyIds::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIApiKeyIds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKeyIds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
