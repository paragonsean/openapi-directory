/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMutualTlsAuthenticationInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMutualTlsAuthenticationInput::OAIMutualTlsAuthenticationInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMutualTlsAuthenticationInput::OAIMutualTlsAuthenticationInput() {
    this->initializeModel();
}

OAIMutualTlsAuthenticationInput::~OAIMutualTlsAuthenticationInput() {}

void OAIMutualTlsAuthenticationInput::initializeModel() {

    m_truststore_uri_isSet = false;
    m_truststore_uri_isValid = false;

    m_truststore_version_isSet = false;
    m_truststore_version_isValid = false;
}

void OAIMutualTlsAuthenticationInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMutualTlsAuthenticationInput::fromJsonObject(QJsonObject json) {

    m_truststore_uri_isValid = ::OpenAPI::fromJsonValue(m_truststore_uri, json[QString("truststoreUri")]);
    m_truststore_uri_isSet = !json[QString("truststoreUri")].isNull() && m_truststore_uri_isValid;

    m_truststore_version_isValid = ::OpenAPI::fromJsonValue(m_truststore_version, json[QString("truststoreVersion")]);
    m_truststore_version_isSet = !json[QString("truststoreVersion")].isNull() && m_truststore_version_isValid;
}

QString OAIMutualTlsAuthenticationInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMutualTlsAuthenticationInput::asJsonObject() const {
    QJsonObject obj;
    if (m_truststore_uri_isSet) {
        obj.insert(QString("truststoreUri"), ::OpenAPI::toJsonValue(m_truststore_uri));
    }
    if (m_truststore_version_isSet) {
        obj.insert(QString("truststoreVersion"), ::OpenAPI::toJsonValue(m_truststore_version));
    }
    return obj;
}

QString OAIMutualTlsAuthenticationInput::getTruststoreUri() const {
    return m_truststore_uri;
}
void OAIMutualTlsAuthenticationInput::setTruststoreUri(const QString &truststore_uri) {
    m_truststore_uri = truststore_uri;
    m_truststore_uri_isSet = true;
}

bool OAIMutualTlsAuthenticationInput::is_truststore_uri_Set() const{
    return m_truststore_uri_isSet;
}

bool OAIMutualTlsAuthenticationInput::is_truststore_uri_Valid() const{
    return m_truststore_uri_isValid;
}

QString OAIMutualTlsAuthenticationInput::getTruststoreVersion() const {
    return m_truststore_version;
}
void OAIMutualTlsAuthenticationInput::setTruststoreVersion(const QString &truststore_version) {
    m_truststore_version = truststore_version;
    m_truststore_version_isSet = true;
}

bool OAIMutualTlsAuthenticationInput::is_truststore_version_Set() const{
    return m_truststore_version_isSet;
}

bool OAIMutualTlsAuthenticationInput::is_truststore_version_Valid() const{
    return m_truststore_version_isValid;
}

bool OAIMutualTlsAuthenticationInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_truststore_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truststore_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMutualTlsAuthenticationInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
