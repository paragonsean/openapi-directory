/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsagePlanKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsagePlanKey::OAIUsagePlanKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsagePlanKey::OAIUsagePlanKey() {
    this->initializeModel();
}

OAIUsagePlanKey::~OAIUsagePlanKey() {}

void OAIUsagePlanKey::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIUsagePlanKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsagePlanKey::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIUsagePlanKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsagePlanKey::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIUsagePlanKey::getId() const {
    return m_id;
}
void OAIUsagePlanKey::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUsagePlanKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUsagePlanKey::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUsagePlanKey::getType() const {
    return m_type;
}
void OAIUsagePlanKey::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUsagePlanKey::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUsagePlanKey::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIUsagePlanKey::getValue() const {
    return m_value;
}
void OAIUsagePlanKey::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIUsagePlanKey::is_value_Set() const{
    return m_value_isSet;
}

bool OAIUsagePlanKey::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIUsagePlanKey::getName() const {
    return m_name;
}
void OAIUsagePlanKey::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUsagePlanKey::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUsagePlanKey::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUsagePlanKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsagePlanKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
