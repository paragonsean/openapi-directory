/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStage::OAIStage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStage::OAIStage() {
    this->initializeModel();
}

OAIStage::~OAIStage() {}

void OAIStage::initializeModel() {

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_client_certificate_id_isSet = false;
    m_client_certificate_id_isValid = false;

    m_stage_name_isSet = false;
    m_stage_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_cache_cluster_enabled_isSet = false;
    m_cache_cluster_enabled_isValid = false;

    m_cache_cluster_size_isSet = false;
    m_cache_cluster_size_isValid = false;

    m_cache_cluster_status_isSet = false;
    m_cache_cluster_status_isValid = false;

    m_method_settings_isSet = false;
    m_method_settings_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;

    m_documentation_version_isSet = false;
    m_documentation_version_isValid = false;

    m_access_log_settings_isSet = false;
    m_access_log_settings_isValid = false;

    m_canary_settings_isSet = false;
    m_canary_settings_isValid = false;

    m_tracing_enabled_isSet = false;
    m_tracing_enabled_isValid = false;

    m_web_acl_arn_isSet = false;
    m_web_acl_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;
}

void OAIStage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStage::fromJsonObject(QJsonObject json) {

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_client_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_client_certificate_id, json[QString("clientCertificateId")]);
    m_client_certificate_id_isSet = !json[QString("clientCertificateId")].isNull() && m_client_certificate_id_isValid;

    m_stage_name_isValid = ::OpenAPI::fromJsonValue(m_stage_name, json[QString("stageName")]);
    m_stage_name_isSet = !json[QString("stageName")].isNull() && m_stage_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_cache_cluster_enabled_isValid = ::OpenAPI::fromJsonValue(m_cache_cluster_enabled, json[QString("cacheClusterEnabled")]);
    m_cache_cluster_enabled_isSet = !json[QString("cacheClusterEnabled")].isNull() && m_cache_cluster_enabled_isValid;

    m_cache_cluster_size_isValid = ::OpenAPI::fromJsonValue(m_cache_cluster_size, json[QString("cacheClusterSize")]);
    m_cache_cluster_size_isSet = !json[QString("cacheClusterSize")].isNull() && m_cache_cluster_size_isValid;

    m_cache_cluster_status_isValid = ::OpenAPI::fromJsonValue(m_cache_cluster_status, json[QString("cacheClusterStatus")]);
    m_cache_cluster_status_isSet = !json[QString("cacheClusterStatus")].isNull() && m_cache_cluster_status_isValid;

    m_method_settings_isValid = ::OpenAPI::fromJsonValue(m_method_settings, json[QString("methodSettings")]);
    m_method_settings_isSet = !json[QString("methodSettings")].isNull() && m_method_settings_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;

    m_documentation_version_isValid = ::OpenAPI::fromJsonValue(m_documentation_version, json[QString("documentationVersion")]);
    m_documentation_version_isSet = !json[QString("documentationVersion")].isNull() && m_documentation_version_isValid;

    m_access_log_settings_isValid = ::OpenAPI::fromJsonValue(m_access_log_settings, json[QString("accessLogSettings")]);
    m_access_log_settings_isSet = !json[QString("accessLogSettings")].isNull() && m_access_log_settings_isValid;

    m_canary_settings_isValid = ::OpenAPI::fromJsonValue(m_canary_settings, json[QString("canarySettings")]);
    m_canary_settings_isSet = !json[QString("canarySettings")].isNull() && m_canary_settings_isValid;

    m_tracing_enabled_isValid = ::OpenAPI::fromJsonValue(m_tracing_enabled, json[QString("tracingEnabled")]);
    m_tracing_enabled_isSet = !json[QString("tracingEnabled")].isNull() && m_tracing_enabled_isValid;

    m_web_acl_arn_isValid = ::OpenAPI::fromJsonValue(m_web_acl_arn, json[QString("webAclArn")]);
    m_web_acl_arn_isSet = !json[QString("webAclArn")].isNull() && m_web_acl_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("lastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("lastUpdatedDate")].isNull() && m_last_updated_date_isValid;
}

QString OAIStage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStage::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_client_certificate_id_isSet) {
        obj.insert(QString("clientCertificateId"), ::OpenAPI::toJsonValue(m_client_certificate_id));
    }
    if (m_stage_name_isSet) {
        obj.insert(QString("stageName"), ::OpenAPI::toJsonValue(m_stage_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_cache_cluster_enabled_isSet) {
        obj.insert(QString("cacheClusterEnabled"), ::OpenAPI::toJsonValue(m_cache_cluster_enabled));
    }
    if (m_cache_cluster_size.isSet()) {
        obj.insert(QString("cacheClusterSize"), ::OpenAPI::toJsonValue(m_cache_cluster_size));
    }
    if (m_cache_cluster_status.isSet()) {
        obj.insert(QString("cacheClusterStatus"), ::OpenAPI::toJsonValue(m_cache_cluster_status));
    }
    if (m_method_settings.isSet()) {
        obj.insert(QString("methodSettings"), ::OpenAPI::toJsonValue(m_method_settings));
    }
    if (m_variables.isSet()) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    if (m_documentation_version_isSet) {
        obj.insert(QString("documentationVersion"), ::OpenAPI::toJsonValue(m_documentation_version));
    }
    if (m_access_log_settings.isSet()) {
        obj.insert(QString("accessLogSettings"), ::OpenAPI::toJsonValue(m_access_log_settings));
    }
    if (m_canary_settings.isSet()) {
        obj.insert(QString("canarySettings"), ::OpenAPI::toJsonValue(m_canary_settings));
    }
    if (m_tracing_enabled_isSet) {
        obj.insert(QString("tracingEnabled"), ::OpenAPI::toJsonValue(m_tracing_enabled));
    }
    if (m_web_acl_arn_isSet) {
        obj.insert(QString("webAclArn"), ::OpenAPI::toJsonValue(m_web_acl_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("lastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    return obj;
}

QString OAIStage::getDeploymentId() const {
    return m_deployment_id;
}
void OAIStage::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIStage::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIStage::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QString OAIStage::getClientCertificateId() const {
    return m_client_certificate_id;
}
void OAIStage::setClientCertificateId(const QString &client_certificate_id) {
    m_client_certificate_id = client_certificate_id;
    m_client_certificate_id_isSet = true;
}

bool OAIStage::is_client_certificate_id_Set() const{
    return m_client_certificate_id_isSet;
}

bool OAIStage::is_client_certificate_id_Valid() const{
    return m_client_certificate_id_isValid;
}

QString OAIStage::getStageName() const {
    return m_stage_name;
}
void OAIStage::setStageName(const QString &stage_name) {
    m_stage_name = stage_name;
    m_stage_name_isSet = true;
}

bool OAIStage::is_stage_name_Set() const{
    return m_stage_name_isSet;
}

bool OAIStage::is_stage_name_Valid() const{
    return m_stage_name_isValid;
}

QString OAIStage::getDescription() const {
    return m_description;
}
void OAIStage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStage::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIStage::getCacheClusterEnabled() const {
    return m_cache_cluster_enabled;
}
void OAIStage::setCacheClusterEnabled(const bool &cache_cluster_enabled) {
    m_cache_cluster_enabled = cache_cluster_enabled;
    m_cache_cluster_enabled_isSet = true;
}

bool OAIStage::is_cache_cluster_enabled_Set() const{
    return m_cache_cluster_enabled_isSet;
}

bool OAIStage::is_cache_cluster_enabled_Valid() const{
    return m_cache_cluster_enabled_isValid;
}

OAICacheClusterSize OAIStage::getCacheClusterSize() const {
    return m_cache_cluster_size;
}
void OAIStage::setCacheClusterSize(const OAICacheClusterSize &cache_cluster_size) {
    m_cache_cluster_size = cache_cluster_size;
    m_cache_cluster_size_isSet = true;
}

bool OAIStage::is_cache_cluster_size_Set() const{
    return m_cache_cluster_size_isSet;
}

bool OAIStage::is_cache_cluster_size_Valid() const{
    return m_cache_cluster_size_isValid;
}

OAICacheClusterStatus OAIStage::getCacheClusterStatus() const {
    return m_cache_cluster_status;
}
void OAIStage::setCacheClusterStatus(const OAICacheClusterStatus &cache_cluster_status) {
    m_cache_cluster_status = cache_cluster_status;
    m_cache_cluster_status_isSet = true;
}

bool OAIStage::is_cache_cluster_status_Set() const{
    return m_cache_cluster_status_isSet;
}

bool OAIStage::is_cache_cluster_status_Valid() const{
    return m_cache_cluster_status_isValid;
}

QMap OAIStage::getMethodSettings() const {
    return m_method_settings;
}
void OAIStage::setMethodSettings(const QMap &method_settings) {
    m_method_settings = method_settings;
    m_method_settings_isSet = true;
}

bool OAIStage::is_method_settings_Set() const{
    return m_method_settings_isSet;
}

bool OAIStage::is_method_settings_Valid() const{
    return m_method_settings_isValid;
}

QMap OAIStage::getVariables() const {
    return m_variables;
}
void OAIStage::setVariables(const QMap &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIStage::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIStage::is_variables_Valid() const{
    return m_variables_isValid;
}

QString OAIStage::getDocumentationVersion() const {
    return m_documentation_version;
}
void OAIStage::setDocumentationVersion(const QString &documentation_version) {
    m_documentation_version = documentation_version;
    m_documentation_version_isSet = true;
}

bool OAIStage::is_documentation_version_Set() const{
    return m_documentation_version_isSet;
}

bool OAIStage::is_documentation_version_Valid() const{
    return m_documentation_version_isValid;
}

OAIStage_accessLogSettings OAIStage::getAccessLogSettings() const {
    return m_access_log_settings;
}
void OAIStage::setAccessLogSettings(const OAIStage_accessLogSettings &access_log_settings) {
    m_access_log_settings = access_log_settings;
    m_access_log_settings_isSet = true;
}

bool OAIStage::is_access_log_settings_Set() const{
    return m_access_log_settings_isSet;
}

bool OAIStage::is_access_log_settings_Valid() const{
    return m_access_log_settings_isValid;
}

OAIStage_canarySettings OAIStage::getCanarySettings() const {
    return m_canary_settings;
}
void OAIStage::setCanarySettings(const OAIStage_canarySettings &canary_settings) {
    m_canary_settings = canary_settings;
    m_canary_settings_isSet = true;
}

bool OAIStage::is_canary_settings_Set() const{
    return m_canary_settings_isSet;
}

bool OAIStage::is_canary_settings_Valid() const{
    return m_canary_settings_isValid;
}

bool OAIStage::getTracingEnabled() const {
    return m_tracing_enabled;
}
void OAIStage::setTracingEnabled(const bool &tracing_enabled) {
    m_tracing_enabled = tracing_enabled;
    m_tracing_enabled_isSet = true;
}

bool OAIStage::is_tracing_enabled_Set() const{
    return m_tracing_enabled_isSet;
}

bool OAIStage::is_tracing_enabled_Valid() const{
    return m_tracing_enabled_isValid;
}

QString OAIStage::getWebAclArn() const {
    return m_web_acl_arn;
}
void OAIStage::setWebAclArn(const QString &web_acl_arn) {
    m_web_acl_arn = web_acl_arn;
    m_web_acl_arn_isSet = true;
}

bool OAIStage::is_web_acl_arn_Set() const{
    return m_web_acl_arn_isSet;
}

bool OAIStage::is_web_acl_arn_Valid() const{
    return m_web_acl_arn_isValid;
}

QMap OAIStage::getTags() const {
    return m_tags;
}
void OAIStage::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStage::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStage::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIStage::getCreatedDate() const {
    return m_created_date;
}
void OAIStage::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIStage::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIStage::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAIStage::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIStage::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIStage::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIStage::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

bool OAIStage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_cluster_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_cluster_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_cluster_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_log_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canary_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_acl_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
