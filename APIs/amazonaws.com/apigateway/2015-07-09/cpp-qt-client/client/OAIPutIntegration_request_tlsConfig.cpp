/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntegration_request_tlsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntegration_request_tlsConfig::OAIPutIntegration_request_tlsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntegration_request_tlsConfig::OAIPutIntegration_request_tlsConfig() {
    this->initializeModel();
}

OAIPutIntegration_request_tlsConfig::~OAIPutIntegration_request_tlsConfig() {}

void OAIPutIntegration_request_tlsConfig::initializeModel() {

    m_insecure_skip_verification_isSet = false;
    m_insecure_skip_verification_isValid = false;
}

void OAIPutIntegration_request_tlsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntegration_request_tlsConfig::fromJsonObject(QJsonObject json) {

    m_insecure_skip_verification_isValid = ::OpenAPI::fromJsonValue(m_insecure_skip_verification, json[QString("insecureSkipVerification")]);
    m_insecure_skip_verification_isSet = !json[QString("insecureSkipVerification")].isNull() && m_insecure_skip_verification_isValid;
}

QString OAIPutIntegration_request_tlsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntegration_request_tlsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_insecure_skip_verification_isSet) {
        obj.insert(QString("insecureSkipVerification"), ::OpenAPI::toJsonValue(m_insecure_skip_verification));
    }
    return obj;
}

bool OAIPutIntegration_request_tlsConfig::getInsecureSkipVerification() const {
    return m_insecure_skip_verification;
}
void OAIPutIntegration_request_tlsConfig::setInsecureSkipVerification(const bool &insecure_skip_verification) {
    m_insecure_skip_verification = insecure_skip_verification;
    m_insecure_skip_verification_isSet = true;
}

bool OAIPutIntegration_request_tlsConfig::is_insecure_skip_verification_Set() const{
    return m_insecure_skip_verification_isSet;
}

bool OAIPutIntegration_request_tlsConfig::is_insecure_skip_verification_Valid() const{
    return m_insecure_skip_verification_isValid;
}

bool OAIPutIntegration_request_tlsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insecure_skip_verification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntegration_request_tlsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
