/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThrottleSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThrottleSettings::OAIThrottleSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThrottleSettings::OAIThrottleSettings() {
    this->initializeModel();
}

OAIThrottleSettings::~OAIThrottleSettings() {}

void OAIThrottleSettings::initializeModel() {

    m_burst_limit_isSet = false;
    m_burst_limit_isValid = false;

    m_rate_limit_isSet = false;
    m_rate_limit_isValid = false;
}

void OAIThrottleSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThrottleSettings::fromJsonObject(QJsonObject json) {

    m_burst_limit_isValid = ::OpenAPI::fromJsonValue(m_burst_limit, json[QString("burstLimit")]);
    m_burst_limit_isSet = !json[QString("burstLimit")].isNull() && m_burst_limit_isValid;

    m_rate_limit_isValid = ::OpenAPI::fromJsonValue(m_rate_limit, json[QString("rateLimit")]);
    m_rate_limit_isSet = !json[QString("rateLimit")].isNull() && m_rate_limit_isValid;
}

QString OAIThrottleSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThrottleSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_burst_limit_isSet) {
        obj.insert(QString("burstLimit"), ::OpenAPI::toJsonValue(m_burst_limit));
    }
    if (m_rate_limit_isSet) {
        obj.insert(QString("rateLimit"), ::OpenAPI::toJsonValue(m_rate_limit));
    }
    return obj;
}

qint32 OAIThrottleSettings::getBurstLimit() const {
    return m_burst_limit;
}
void OAIThrottleSettings::setBurstLimit(const qint32 &burst_limit) {
    m_burst_limit = burst_limit;
    m_burst_limit_isSet = true;
}

bool OAIThrottleSettings::is_burst_limit_Set() const{
    return m_burst_limit_isSet;
}

bool OAIThrottleSettings::is_burst_limit_Valid() const{
    return m_burst_limit_isValid;
}

double OAIThrottleSettings::getRateLimit() const {
    return m_rate_limit;
}
void OAIThrottleSettings::setRateLimit(const double &rate_limit) {
    m_rate_limit = rate_limit;
    m_rate_limit_isSet = true;
}

bool OAIThrottleSettings::is_rate_limit_Set() const{
    return m_rate_limit_isSet;
}

bool OAIThrottleSettings::is_rate_limit_Valid() const{
    return m_rate_limit_isValid;
}

bool OAIThrottleSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_burst_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThrottleSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
