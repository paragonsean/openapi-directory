/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentationPartType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentationPartType::OAIDocumentationPartType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentationPartType::OAIDocumentationPartType() {
    this->initializeModel();
}

OAIDocumentationPartType::~OAIDocumentationPartType() {}

void OAIDocumentationPartType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDocumentationPartType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDocumentationPartType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("API", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::API;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTHORIZER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::AUTHORIZER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MODEL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::MODEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESOURCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::RESOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("METHOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::METHOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PATH_PARAMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::PATH_PARAMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUERY_PARAMETER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::QUERY_PARAMETER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REQUEST_HEADER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::REQUEST_HEADER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REQUEST_BODY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::REQUEST_BODY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESPONSE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::RESPONSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESPONSE_HEADER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::RESPONSE_HEADER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESPONSE_BODY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDocumentationPartType::RESPONSE_BODY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDocumentationPartType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDocumentationPartType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDocumentationPartType::API:
            val = "API";
            break;
        case eOAIDocumentationPartType::AUTHORIZER:
            val = "AUTHORIZER";
            break;
        case eOAIDocumentationPartType::MODEL:
            val = "MODEL";
            break;
        case eOAIDocumentationPartType::RESOURCE:
            val = "RESOURCE";
            break;
        case eOAIDocumentationPartType::METHOD:
            val = "METHOD";
            break;
        case eOAIDocumentationPartType::PATH_PARAMETER:
            val = "PATH_PARAMETER";
            break;
        case eOAIDocumentationPartType::QUERY_PARAMETER:
            val = "QUERY_PARAMETER";
            break;
        case eOAIDocumentationPartType::REQUEST_HEADER:
            val = "REQUEST_HEADER";
            break;
        case eOAIDocumentationPartType::REQUEST_BODY:
            val = "REQUEST_BODY";
            break;
        case eOAIDocumentationPartType::RESPONSE:
            val = "RESPONSE";
            break;
        case eOAIDocumentationPartType::RESPONSE_HEADER:
            val = "RESPONSE_HEADER";
            break;
        case eOAIDocumentationPartType::RESPONSE_BODY:
            val = "RESPONSE_BODY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDocumentationPartType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDocumentationPartType::eOAIDocumentationPartType OAIDocumentationPartType::getValue() const {
    return m_value;
}

void OAIDocumentationPartType::setValue(const OAIDocumentationPartType::eOAIDocumentationPartType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDocumentationPartType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDocumentationPartType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
