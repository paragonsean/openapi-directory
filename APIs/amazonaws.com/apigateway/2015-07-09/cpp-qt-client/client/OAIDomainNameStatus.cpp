/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainNameStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainNameStatus::OAIDomainNameStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainNameStatus::OAIDomainNameStatus() {
    this->initializeModel();
}

OAIDomainNameStatus::~OAIDomainNameStatus() {}

void OAIDomainNameStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDomainNameStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDomainNameStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainNameStatus::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainNameStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainNameStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_CERTIFICATE_REIMPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainNameStatus::PENDING_CERTIFICATE_REIMPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_OWNERSHIP_VERIFICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainNameStatus::PENDING_OWNERSHIP_VERIFICATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDomainNameStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDomainNameStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDomainNameStatus::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAIDomainNameStatus::UPDATING:
            val = "UPDATING";
            break;
        case eOAIDomainNameStatus::PENDING:
            val = "PENDING";
            break;
        case eOAIDomainNameStatus::PENDING_CERTIFICATE_REIMPORT:
            val = "PENDING_CERTIFICATE_REIMPORT";
            break;
        case eOAIDomainNameStatus::PENDING_OWNERSHIP_VERIFICATION:
            val = "PENDING_OWNERSHIP_VERIFICATION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDomainNameStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDomainNameStatus::eOAIDomainNameStatus OAIDomainNameStatus::getValue() const {
    return m_value;
}

void OAIDomainNameStatus::setValue(const OAIDomainNameStatus::eOAIDomainNameStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDomainNameStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIDomainNameStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
