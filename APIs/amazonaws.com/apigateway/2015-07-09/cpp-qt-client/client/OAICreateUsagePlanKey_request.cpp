/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUsagePlanKey_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUsagePlanKey_request::OAICreateUsagePlanKey_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUsagePlanKey_request::OAICreateUsagePlanKey_request() {
    this->initializeModel();
}

OAICreateUsagePlanKey_request::~OAICreateUsagePlanKey_request() {}

void OAICreateUsagePlanKey_request::initializeModel() {

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;
}

void OAICreateUsagePlanKey_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUsagePlanKey_request::fromJsonObject(QJsonObject json) {

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("keyId")]);
    m_key_id_isSet = !json[QString("keyId")].isNull() && m_key_id_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("keyType")]);
    m_key_type_isSet = !json[QString("keyType")].isNull() && m_key_type_isValid;
}

QString OAICreateUsagePlanKey_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUsagePlanKey_request::asJsonObject() const {
    QJsonObject obj;
    if (m_key_id_isSet) {
        obj.insert(QString("keyId"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_key_type_isSet) {
        obj.insert(QString("keyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    return obj;
}

QString OAICreateUsagePlanKey_request::getKeyId() const {
    return m_key_id;
}
void OAICreateUsagePlanKey_request::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAICreateUsagePlanKey_request::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAICreateUsagePlanKey_request::is_key_id_Valid() const{
    return m_key_id_isValid;
}

QString OAICreateUsagePlanKey_request::getKeyType() const {
    return m_key_type;
}
void OAICreateUsagePlanKey_request::setKeyType(const QString &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAICreateUsagePlanKey_request::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAICreateUsagePlanKey_request::is_key_type_Valid() const{
    return m_key_type_isValid;
}

bool OAICreateUsagePlanKey_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUsagePlanKey_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_id_isValid && m_key_type_isValid && true;
}

} // namespace OpenAPI
