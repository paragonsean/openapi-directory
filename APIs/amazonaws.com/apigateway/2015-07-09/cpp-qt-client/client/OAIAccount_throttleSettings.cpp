/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount_throttleSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount_throttleSettings::OAIAccount_throttleSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount_throttleSettings::OAIAccount_throttleSettings() {
    this->initializeModel();
}

OAIAccount_throttleSettings::~OAIAccount_throttleSettings() {}

void OAIAccount_throttleSettings::initializeModel() {

    m_burst_limit_isSet = false;
    m_burst_limit_isValid = false;

    m_rate_limit_isSet = false;
    m_rate_limit_isValid = false;
}

void OAIAccount_throttleSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount_throttleSettings::fromJsonObject(QJsonObject json) {

    m_burst_limit_isValid = ::OpenAPI::fromJsonValue(m_burst_limit, json[QString("burstLimit")]);
    m_burst_limit_isSet = !json[QString("burstLimit")].isNull() && m_burst_limit_isValid;

    m_rate_limit_isValid = ::OpenAPI::fromJsonValue(m_rate_limit, json[QString("rateLimit")]);
    m_rate_limit_isSet = !json[QString("rateLimit")].isNull() && m_rate_limit_isValid;
}

QString OAIAccount_throttleSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount_throttleSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_burst_limit_isSet) {
        obj.insert(QString("burstLimit"), ::OpenAPI::toJsonValue(m_burst_limit));
    }
    if (m_rate_limit_isSet) {
        obj.insert(QString("rateLimit"), ::OpenAPI::toJsonValue(m_rate_limit));
    }
    return obj;
}

qint32 OAIAccount_throttleSettings::getBurstLimit() const {
    return m_burst_limit;
}
void OAIAccount_throttleSettings::setBurstLimit(const qint32 &burst_limit) {
    m_burst_limit = burst_limit;
    m_burst_limit_isSet = true;
}

bool OAIAccount_throttleSettings::is_burst_limit_Set() const{
    return m_burst_limit_isSet;
}

bool OAIAccount_throttleSettings::is_burst_limit_Valid() const{
    return m_burst_limit_isValid;
}

double OAIAccount_throttleSettings::getRateLimit() const {
    return m_rate_limit;
}
void OAIAccount_throttleSettings::setRateLimit(const double &rate_limit) {
    m_rate_limit = rate_limit;
    m_rate_limit_isSet = true;
}

bool OAIAccount_throttleSettings::is_rate_limit_Set() const{
    return m_rate_limit_isSet;
}

bool OAIAccount_throttleSettings::is_rate_limit_Valid() const{
    return m_rate_limit_isValid;
}

bool OAIAccount_throttleSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_burst_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount_throttleSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
