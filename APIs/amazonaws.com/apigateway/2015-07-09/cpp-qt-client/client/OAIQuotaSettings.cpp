/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaSettings::OAIQuotaSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaSettings::OAIQuotaSettings() {
    this->initializeModel();
}

OAIQuotaSettings::~OAIQuotaSettings() {}

void OAIQuotaSettings::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;
}

void OAIQuotaSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaSettings::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;
}

QString OAIQuotaSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_period.isSet()) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    return obj;
}

qint32 OAIQuotaSettings::getLimit() const {
    return m_limit;
}
void OAIQuotaSettings::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQuotaSettings::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQuotaSettings::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIQuotaSettings::getOffset() const {
    return m_offset;
}
void OAIQuotaSettings::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIQuotaSettings::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIQuotaSettings::is_offset_Valid() const{
    return m_offset_isValid;
}

OAIQuotaPeriodType OAIQuotaSettings::getPeriod() const {
    return m_period;
}
void OAIQuotaSettings::setPeriod(const OAIQuotaPeriodType &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIQuotaSettings::is_period_Set() const{
    return m_period_isSet;
}

bool OAIQuotaSettings::is_period_Valid() const{
    return m_period_isValid;
}

bool OAIQuotaSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
