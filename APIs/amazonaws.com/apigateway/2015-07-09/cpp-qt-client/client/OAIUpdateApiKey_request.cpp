/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApiKey_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApiKey_request::OAIUpdateApiKey_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApiKey_request::OAIUpdateApiKey_request() {
    this->initializeModel();
}

OAIUpdateApiKey_request::~OAIUpdateApiKey_request() {}

void OAIUpdateApiKey_request::initializeModel() {

    m_patch_operations_isSet = false;
    m_patch_operations_isValid = false;
}

void OAIUpdateApiKey_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApiKey_request::fromJsonObject(QJsonObject json) {

    m_patch_operations_isValid = ::OpenAPI::fromJsonValue(m_patch_operations, json[QString("patchOperations")]);
    m_patch_operations_isSet = !json[QString("patchOperations")].isNull() && m_patch_operations_isValid;
}

QString OAIUpdateApiKey_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApiKey_request::asJsonObject() const {
    QJsonObject obj;
    if (m_patch_operations.size() > 0) {
        obj.insert(QString("patchOperations"), ::OpenAPI::toJsonValue(m_patch_operations));
    }
    return obj;
}

QList<OAIPatchOperation> OAIUpdateApiKey_request::getPatchOperations() const {
    return m_patch_operations;
}
void OAIUpdateApiKey_request::setPatchOperations(const QList<OAIPatchOperation> &patch_operations) {
    m_patch_operations = patch_operations;
    m_patch_operations_isSet = true;
}

bool OAIUpdateApiKey_request::is_patch_operations_Set() const{
    return m_patch_operations_isSet;
}

bool OAIUpdateApiKey_request::is_patch_operations_Valid() const{
    return m_patch_operations_isValid;
}

bool OAIUpdateApiKey_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_patch_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApiKey_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
