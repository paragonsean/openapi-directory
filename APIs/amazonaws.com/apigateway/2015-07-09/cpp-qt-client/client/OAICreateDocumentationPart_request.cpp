/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDocumentationPart_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDocumentationPart_request::OAICreateDocumentationPart_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDocumentationPart_request::OAICreateDocumentationPart_request() {
    this->initializeModel();
}

OAICreateDocumentationPart_request::~OAICreateDocumentationPart_request() {}

void OAICreateDocumentationPart_request::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAICreateDocumentationPart_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDocumentationPart_request::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAICreateDocumentationPart_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDocumentationPart_request::asJsonObject() const {
    QJsonObject obj;
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAICreateDocumentationPart_request_location OAICreateDocumentationPart_request::getLocation() const {
    return m_location;
}
void OAICreateDocumentationPart_request::setLocation(const OAICreateDocumentationPart_request_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICreateDocumentationPart_request::is_location_Set() const{
    return m_location_isSet;
}

bool OAICreateDocumentationPart_request::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICreateDocumentationPart_request::getProperties() const {
    return m_properties;
}
void OAICreateDocumentationPart_request::setProperties(const QString &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreateDocumentationPart_request::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreateDocumentationPart_request::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAICreateDocumentationPart_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDocumentationPart_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_properties_isValid && true;
}

} // namespace OpenAPI
