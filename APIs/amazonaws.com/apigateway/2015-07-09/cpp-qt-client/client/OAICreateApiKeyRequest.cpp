/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApiKeyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApiKeyRequest::OAICreateApiKeyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApiKeyRequest::OAICreateApiKeyRequest() {
    this->initializeModel();
}

OAICreateApiKeyRequest::~OAICreateApiKeyRequest() {}

void OAICreateApiKeyRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_generate_distinct_id_isSet = false;
    m_generate_distinct_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_stage_keys_isSet = false;
    m_stage_keys_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateApiKeyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApiKeyRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_generate_distinct_id_isValid = ::OpenAPI::fromJsonValue(m_generate_distinct_id, json[QString("generateDistinctId")]);
    m_generate_distinct_id_isSet = !json[QString("generateDistinctId")].isNull() && m_generate_distinct_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_stage_keys_isValid = ::OpenAPI::fromJsonValue(m_stage_keys, json[QString("stageKeys")]);
    m_stage_keys_isSet = !json[QString("stageKeys")].isNull() && m_stage_keys_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateApiKeyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApiKeyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_generate_distinct_id_isSet) {
        obj.insert(QString("generateDistinctId"), ::OpenAPI::toJsonValue(m_generate_distinct_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_stage_keys.isSet()) {
        obj.insert(QString("stageKeys"), ::OpenAPI::toJsonValue(m_stage_keys));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateApiKeyRequest::getName() const {
    return m_name;
}
void OAICreateApiKeyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApiKeyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApiKeyRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateApiKeyRequest::getDescription() const {
    return m_description;
}
void OAICreateApiKeyRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApiKeyRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApiKeyRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateApiKeyRequest::getEnabled() const {
    return m_enabled;
}
void OAICreateApiKeyRequest::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateApiKeyRequest::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateApiKeyRequest::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAICreateApiKeyRequest::getGenerateDistinctId() const {
    return m_generate_distinct_id;
}
void OAICreateApiKeyRequest::setGenerateDistinctId(const bool &generate_distinct_id) {
    m_generate_distinct_id = generate_distinct_id;
    m_generate_distinct_id_isSet = true;
}

bool OAICreateApiKeyRequest::is_generate_distinct_id_Set() const{
    return m_generate_distinct_id_isSet;
}

bool OAICreateApiKeyRequest::is_generate_distinct_id_Valid() const{
    return m_generate_distinct_id_isValid;
}

QString OAICreateApiKeyRequest::getValue() const {
    return m_value;
}
void OAICreateApiKeyRequest::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICreateApiKeyRequest::is_value_Set() const{
    return m_value_isSet;
}

bool OAICreateApiKeyRequest::is_value_Valid() const{
    return m_value_isValid;
}

QList OAICreateApiKeyRequest::getStageKeys() const {
    return m_stage_keys;
}
void OAICreateApiKeyRequest::setStageKeys(const QList &stage_keys) {
    m_stage_keys = stage_keys;
    m_stage_keys_isSet = true;
}

bool OAICreateApiKeyRequest::is_stage_keys_Set() const{
    return m_stage_keys_isSet;
}

bool OAICreateApiKeyRequest::is_stage_keys_Valid() const{
    return m_stage_keys_isValid;
}

QString OAICreateApiKeyRequest::getCustomerId() const {
    return m_customer_id;
}
void OAICreateApiKeyRequest::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICreateApiKeyRequest::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICreateApiKeyRequest::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QMap OAICreateApiKeyRequest::getTags() const {
    return m_tags;
}
void OAICreateApiKeyRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApiKeyRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApiKeyRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateApiKeyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_distinct_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApiKeyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
