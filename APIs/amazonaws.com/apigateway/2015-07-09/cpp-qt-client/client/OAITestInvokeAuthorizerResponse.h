/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestInvokeAuthorizerResponse.h
 *
 * Represents the response of the test invoke request for a custom Authorizer
 */

#ifndef OAITestInvokeAuthorizerResponse_H
#define OAITestInvokeAuthorizerResponse_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITestInvokeAuthorizerResponse : public OAIObject {
public:
    OAITestInvokeAuthorizerResponse();
    OAITestInvokeAuthorizerResponse(QString json);
    ~OAITestInvokeAuthorizerResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getClientStatus() const;
    void setClientStatus(const qint32 &client_status);
    bool is_client_status_Set() const;
    bool is_client_status_Valid() const;

    QString getLog() const;
    void setLog(const QString &log);
    bool is_log_Set() const;
    bool is_log_Valid() const;

    qint32 getLatency() const;
    void setLatency(const qint32 &latency);
    bool is_latency_Set() const;
    bool is_latency_Valid() const;

    QString getPrincipalId() const;
    void setPrincipalId(const QString &principal_id);
    bool is_principal_id_Set() const;
    bool is_principal_id_Valid() const;

    QString getPolicy() const;
    void setPolicy(const QString &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    QMap getAuthorization() const;
    void setAuthorization(const QMap &authorization);
    bool is_authorization_Set() const;
    bool is_authorization_Valid() const;

    QMap getClaims() const;
    void setClaims(const QMap &claims);
    bool is_claims_Set() const;
    bool is_claims_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_client_status;
    bool m_client_status_isSet;
    bool m_client_status_isValid;

    QString m_log;
    bool m_log_isSet;
    bool m_log_isValid;

    qint32 m_latency;
    bool m_latency_isSet;
    bool m_latency_isValid;

    QString m_principal_id;
    bool m_principal_id_isSet;
    bool m_principal_id_isValid;

    QString m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;

    QMap m_authorization;
    bool m_authorization_isSet;
    bool m_authorization_isValid;

    QMap m_claims;
    bool m_claims_isSet;
    bool m_claims_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestInvokeAuthorizerResponse)

#endif // OAITestInvokeAuthorizerResponse_H
