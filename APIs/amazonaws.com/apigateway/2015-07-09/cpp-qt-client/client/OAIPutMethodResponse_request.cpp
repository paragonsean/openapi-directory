/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMethodResponse_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMethodResponse_request::OAIPutMethodResponse_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMethodResponse_request::OAIPutMethodResponse_request() {
    this->initializeModel();
}

OAIPutMethodResponse_request::~OAIPutMethodResponse_request() {}

void OAIPutMethodResponse_request::initializeModel() {

    m_response_parameters_isSet = false;
    m_response_parameters_isValid = false;

    m_response_models_isSet = false;
    m_response_models_isValid = false;
}

void OAIPutMethodResponse_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutMethodResponse_request::fromJsonObject(QJsonObject json) {

    m_response_parameters_isValid = ::OpenAPI::fromJsonValue(m_response_parameters, json[QString("responseParameters")]);
    m_response_parameters_isSet = !json[QString("responseParameters")].isNull() && m_response_parameters_isValid;

    m_response_models_isValid = ::OpenAPI::fromJsonValue(m_response_models, json[QString("responseModels")]);
    m_response_models_isSet = !json[QString("responseModels")].isNull() && m_response_models_isValid;
}

QString OAIPutMethodResponse_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutMethodResponse_request::asJsonObject() const {
    QJsonObject obj;
    if (m_response_parameters.size() > 0) {
        obj.insert(QString("responseParameters"), ::OpenAPI::toJsonValue(m_response_parameters));
    }
    if (m_response_models.size() > 0) {
        obj.insert(QString("responseModels"), ::OpenAPI::toJsonValue(m_response_models));
    }
    return obj;
}

QMap<QString, bool> OAIPutMethodResponse_request::getResponseParameters() const {
    return m_response_parameters;
}
void OAIPutMethodResponse_request::setResponseParameters(const QMap<QString, bool> &response_parameters) {
    m_response_parameters = response_parameters;
    m_response_parameters_isSet = true;
}

bool OAIPutMethodResponse_request::is_response_parameters_Set() const{
    return m_response_parameters_isSet;
}

bool OAIPutMethodResponse_request::is_response_parameters_Valid() const{
    return m_response_parameters_isValid;
}

QMap<QString, QString> OAIPutMethodResponse_request::getResponseModels() const {
    return m_response_models;
}
void OAIPutMethodResponse_request::setResponseModels(const QMap<QString, QString> &response_models) {
    m_response_models = response_models;
    m_response_models_isSet = true;
}

bool OAIPutMethodResponse_request::is_response_models_Set() const{
    return m_response_models_isSet;
}

bool OAIPutMethodResponse_request::is_response_models_Valid() const{
    return m_response_models_isValid;
}

bool OAIPutMethodResponse_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_response_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutMethodResponse_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
