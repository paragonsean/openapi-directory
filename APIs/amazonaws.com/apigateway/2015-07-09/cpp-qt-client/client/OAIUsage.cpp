/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsage::OAIUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsage::OAIUsage() {
    this->initializeModel();
}

OAIUsage::~OAIUsage() {}

void OAIUsage::initializeModel() {

    m_usage_plan_id_isSet = false;
    m_usage_plan_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsage::fromJsonObject(QJsonObject json) {

    m_usage_plan_id_isValid = ::OpenAPI::fromJsonValue(m_usage_plan_id, json[QString("usagePlanId")]);
    m_usage_plan_id_isSet = !json[QString("usagePlanId")].isNull() && m_usage_plan_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;
}

QString OAIUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_usage_plan_id_isSet) {
        obj.insert(QString("usagePlanId"), ::OpenAPI::toJsonValue(m_usage_plan_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

QString OAIUsage::getUsagePlanId() const {
    return m_usage_plan_id;
}
void OAIUsage::setUsagePlanId(const QString &usage_plan_id) {
    m_usage_plan_id = usage_plan_id;
    m_usage_plan_id_isSet = true;
}

bool OAIUsage::is_usage_plan_id_Set() const{
    return m_usage_plan_id_isSet;
}

bool OAIUsage::is_usage_plan_id_Valid() const{
    return m_usage_plan_id_isValid;
}

QString OAIUsage::getStartDate() const {
    return m_start_date;
}
void OAIUsage::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIUsage::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIUsage::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIUsage::getEndDate() const {
    return m_end_date;
}
void OAIUsage::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIUsage::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIUsage::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIUsage::getPosition() const {
    return m_position;
}
void OAIUsage::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIUsage::is_position_Set() const{
    return m_position_isSet;
}

bool OAIUsage::is_position_Valid() const{
    return m_position_isValid;
}

QMap OAIUsage::getItems() const {
    return m_items;
}
void OAIUsage::setItems(const QMap &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIUsage::is_items_Set() const{
    return m_items_isSet;
}

bool OAIUsage::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_usage_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
