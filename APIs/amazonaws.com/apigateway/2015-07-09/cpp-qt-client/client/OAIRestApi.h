/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestApi.h
 *
 * Represents a REST API.
 */

#ifndef OAIRestApi_H
#define OAIRestApi_H

#include <QJsonObject>

#include "OAIApiKeySourceType.h"
#include "OAIRestApi_endpointConfiguration.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRestApi_endpointConfiguration;

class OAIRestApi : public OAIObject {
public:
    OAIRestApi();
    OAIRestApi(QString json);
    ~OAIRestApi() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getCreatedDate() const;
    void setCreatedDate(const QDateTime &created_date);
    bool is_created_date_Set() const;
    bool is_created_date_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QList getWarnings() const;
    void setWarnings(const QList &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    QList getBinaryMediaTypes() const;
    void setBinaryMediaTypes(const QList &binary_media_types);
    bool is_binary_media_types_Set() const;
    bool is_binary_media_types_Valid() const;

    qint32 getMinimumCompressionSize() const;
    void setMinimumCompressionSize(const qint32 &minimum_compression_size);
    bool is_minimum_compression_size_Set() const;
    bool is_minimum_compression_size_Valid() const;

    OAIApiKeySourceType getApiKeySource() const;
    void setApiKeySource(const OAIApiKeySourceType &api_key_source);
    bool is_api_key_source_Set() const;
    bool is_api_key_source_Valid() const;

    OAIRestApi_endpointConfiguration getEndpointConfiguration() const;
    void setEndpointConfiguration(const OAIRestApi_endpointConfiguration &endpoint_configuration);
    bool is_endpoint_configuration_Set() const;
    bool is_endpoint_configuration_Valid() const;

    QString getPolicy() const;
    void setPolicy(const QString &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    bool getDisableExecuteApiEndpoint() const;
    void setDisableExecuteApiEndpoint(const bool &disable_execute_api_endpoint);
    bool is_disable_execute_api_endpoint_Set() const;
    bool is_disable_execute_api_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_created_date;
    bool m_created_date_isSet;
    bool m_created_date_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QList m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;

    QList m_binary_media_types;
    bool m_binary_media_types_isSet;
    bool m_binary_media_types_isValid;

    qint32 m_minimum_compression_size;
    bool m_minimum_compression_size_isSet;
    bool m_minimum_compression_size_isValid;

    OAIApiKeySourceType m_api_key_source;
    bool m_api_key_source_isSet;
    bool m_api_key_source_isValid;

    OAIRestApi_endpointConfiguration m_endpoint_configuration;
    bool m_endpoint_configuration_isSet;
    bool m_endpoint_configuration_isValid;

    QString m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    bool m_disable_execute_api_endpoint;
    bool m_disable_execute_api_endpoint_isSet;
    bool m_disable_execute_api_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestApi)

#endif // OAIRestApi_H
