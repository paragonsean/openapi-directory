/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientCertificate::OAIClientCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientCertificate::OAIClientCertificate() {
    this->initializeModel();
}

OAIClientCertificate::~OAIClientCertificate() {}

void OAIClientCertificate::initializeModel() {

    m_client_certificate_id_isSet = false;
    m_client_certificate_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_pem_encoded_certificate_isSet = false;
    m_pem_encoded_certificate_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIClientCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientCertificate::fromJsonObject(QJsonObject json) {

    m_client_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_client_certificate_id, json[QString("clientCertificateId")]);
    m_client_certificate_id_isSet = !json[QString("clientCertificateId")].isNull() && m_client_certificate_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_pem_encoded_certificate_isValid = ::OpenAPI::fromJsonValue(m_pem_encoded_certificate, json[QString("pemEncodedCertificate")]);
    m_pem_encoded_certificate_isSet = !json[QString("pemEncodedCertificate")].isNull() && m_pem_encoded_certificate_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIClientCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_client_certificate_id_isSet) {
        obj.insert(QString("clientCertificateId"), ::OpenAPI::toJsonValue(m_client_certificate_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_pem_encoded_certificate_isSet) {
        obj.insert(QString("pemEncodedCertificate"), ::OpenAPI::toJsonValue(m_pem_encoded_certificate));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIClientCertificate::getClientCertificateId() const {
    return m_client_certificate_id;
}
void OAIClientCertificate::setClientCertificateId(const QString &client_certificate_id) {
    m_client_certificate_id = client_certificate_id;
    m_client_certificate_id_isSet = true;
}

bool OAIClientCertificate::is_client_certificate_id_Set() const{
    return m_client_certificate_id_isSet;
}

bool OAIClientCertificate::is_client_certificate_id_Valid() const{
    return m_client_certificate_id_isValid;
}

QString OAIClientCertificate::getDescription() const {
    return m_description;
}
void OAIClientCertificate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIClientCertificate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIClientCertificate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIClientCertificate::getPemEncodedCertificate() const {
    return m_pem_encoded_certificate;
}
void OAIClientCertificate::setPemEncodedCertificate(const QString &pem_encoded_certificate) {
    m_pem_encoded_certificate = pem_encoded_certificate;
    m_pem_encoded_certificate_isSet = true;
}

bool OAIClientCertificate::is_pem_encoded_certificate_Set() const{
    return m_pem_encoded_certificate_isSet;
}

bool OAIClientCertificate::is_pem_encoded_certificate_Valid() const{
    return m_pem_encoded_certificate_isValid;
}

QDateTime OAIClientCertificate::getCreatedDate() const {
    return m_created_date;
}
void OAIClientCertificate::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIClientCertificate::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIClientCertificate::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAIClientCertificate::getExpirationDate() const {
    return m_expiration_date;
}
void OAIClientCertificate::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIClientCertificate::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIClientCertificate::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QMap OAIClientCertificate::getTags() const {
    return m_tags;
}
void OAIClientCertificate::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIClientCertificate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIClientCertificate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIClientCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pem_encoded_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
