/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRestApi_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRestApi_request::OAICreateRestApi_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRestApi_request::OAICreateRestApi_request() {
    this->initializeModel();
}

OAICreateRestApi_request::~OAICreateRestApi_request() {}

void OAICreateRestApi_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_clone_from_isSet = false;
    m_clone_from_isValid = false;

    m_binary_media_types_isSet = false;
    m_binary_media_types_isValid = false;

    m_minimum_compression_size_isSet = false;
    m_minimum_compression_size_isValid = false;

    m_api_key_source_isSet = false;
    m_api_key_source_isValid = false;

    m_endpoint_configuration_isSet = false;
    m_endpoint_configuration_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_disable_execute_api_endpoint_isSet = false;
    m_disable_execute_api_endpoint_isValid = false;
}

void OAICreateRestApi_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRestApi_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_clone_from_isValid = ::OpenAPI::fromJsonValue(m_clone_from, json[QString("cloneFrom")]);
    m_clone_from_isSet = !json[QString("cloneFrom")].isNull() && m_clone_from_isValid;

    m_binary_media_types_isValid = ::OpenAPI::fromJsonValue(m_binary_media_types, json[QString("binaryMediaTypes")]);
    m_binary_media_types_isSet = !json[QString("binaryMediaTypes")].isNull() && m_binary_media_types_isValid;

    m_minimum_compression_size_isValid = ::OpenAPI::fromJsonValue(m_minimum_compression_size, json[QString("minimumCompressionSize")]);
    m_minimum_compression_size_isSet = !json[QString("minimumCompressionSize")].isNull() && m_minimum_compression_size_isValid;

    m_api_key_source_isValid = ::OpenAPI::fromJsonValue(m_api_key_source, json[QString("apiKeySource")]);
    m_api_key_source_isSet = !json[QString("apiKeySource")].isNull() && m_api_key_source_isValid;

    m_endpoint_configuration_isValid = ::OpenAPI::fromJsonValue(m_endpoint_configuration, json[QString("endpointConfiguration")]);
    m_endpoint_configuration_isSet = !json[QString("endpointConfiguration")].isNull() && m_endpoint_configuration_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_disable_execute_api_endpoint_isValid = ::OpenAPI::fromJsonValue(m_disable_execute_api_endpoint, json[QString("disableExecuteApiEndpoint")]);
    m_disable_execute_api_endpoint_isSet = !json[QString("disableExecuteApiEndpoint")].isNull() && m_disable_execute_api_endpoint_isValid;
}

QString OAICreateRestApi_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRestApi_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_clone_from_isSet) {
        obj.insert(QString("cloneFrom"), ::OpenAPI::toJsonValue(m_clone_from));
    }
    if (m_binary_media_types.size() > 0) {
        obj.insert(QString("binaryMediaTypes"), ::OpenAPI::toJsonValue(m_binary_media_types));
    }
    if (m_minimum_compression_size_isSet) {
        obj.insert(QString("minimumCompressionSize"), ::OpenAPI::toJsonValue(m_minimum_compression_size));
    }
    if (m_api_key_source_isSet) {
        obj.insert(QString("apiKeySource"), ::OpenAPI::toJsonValue(m_api_key_source));
    }
    if (m_endpoint_configuration.isSet()) {
        obj.insert(QString("endpointConfiguration"), ::OpenAPI::toJsonValue(m_endpoint_configuration));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_disable_execute_api_endpoint_isSet) {
        obj.insert(QString("disableExecuteApiEndpoint"), ::OpenAPI::toJsonValue(m_disable_execute_api_endpoint));
    }
    return obj;
}

QString OAICreateRestApi_request::getName() const {
    return m_name;
}
void OAICreateRestApi_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRestApi_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRestApi_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateRestApi_request::getDescription() const {
    return m_description;
}
void OAICreateRestApi_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateRestApi_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateRestApi_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateRestApi_request::getVersion() const {
    return m_version;
}
void OAICreateRestApi_request::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateRestApi_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateRestApi_request::is_version_Valid() const{
    return m_version_isValid;
}

QString OAICreateRestApi_request::getCloneFrom() const {
    return m_clone_from;
}
void OAICreateRestApi_request::setCloneFrom(const QString &clone_from) {
    m_clone_from = clone_from;
    m_clone_from_isSet = true;
}

bool OAICreateRestApi_request::is_clone_from_Set() const{
    return m_clone_from_isSet;
}

bool OAICreateRestApi_request::is_clone_from_Valid() const{
    return m_clone_from_isValid;
}

QList<QString> OAICreateRestApi_request::getBinaryMediaTypes() const {
    return m_binary_media_types;
}
void OAICreateRestApi_request::setBinaryMediaTypes(const QList<QString> &binary_media_types) {
    m_binary_media_types = binary_media_types;
    m_binary_media_types_isSet = true;
}

bool OAICreateRestApi_request::is_binary_media_types_Set() const{
    return m_binary_media_types_isSet;
}

bool OAICreateRestApi_request::is_binary_media_types_Valid() const{
    return m_binary_media_types_isValid;
}

qint32 OAICreateRestApi_request::getMinimumCompressionSize() const {
    return m_minimum_compression_size;
}
void OAICreateRestApi_request::setMinimumCompressionSize(const qint32 &minimum_compression_size) {
    m_minimum_compression_size = minimum_compression_size;
    m_minimum_compression_size_isSet = true;
}

bool OAICreateRestApi_request::is_minimum_compression_size_Set() const{
    return m_minimum_compression_size_isSet;
}

bool OAICreateRestApi_request::is_minimum_compression_size_Valid() const{
    return m_minimum_compression_size_isValid;
}

QString OAICreateRestApi_request::getApiKeySource() const {
    return m_api_key_source;
}
void OAICreateRestApi_request::setApiKeySource(const QString &api_key_source) {
    m_api_key_source = api_key_source;
    m_api_key_source_isSet = true;
}

bool OAICreateRestApi_request::is_api_key_source_Set() const{
    return m_api_key_source_isSet;
}

bool OAICreateRestApi_request::is_api_key_source_Valid() const{
    return m_api_key_source_isValid;
}

OAICreateDomainName_request_endpointConfiguration OAICreateRestApi_request::getEndpointConfiguration() const {
    return m_endpoint_configuration;
}
void OAICreateRestApi_request::setEndpointConfiguration(const OAICreateDomainName_request_endpointConfiguration &endpoint_configuration) {
    m_endpoint_configuration = endpoint_configuration;
    m_endpoint_configuration_isSet = true;
}

bool OAICreateRestApi_request::is_endpoint_configuration_Set() const{
    return m_endpoint_configuration_isSet;
}

bool OAICreateRestApi_request::is_endpoint_configuration_Valid() const{
    return m_endpoint_configuration_isValid;
}

QString OAICreateRestApi_request::getPolicy() const {
    return m_policy;
}
void OAICreateRestApi_request::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAICreateRestApi_request::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAICreateRestApi_request::is_policy_Valid() const{
    return m_policy_isValid;
}

QMap<QString, QString> OAICreateRestApi_request::getTags() const {
    return m_tags;
}
void OAICreateRestApi_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRestApi_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRestApi_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRestApi_request::isDisableExecuteApiEndpoint() const {
    return m_disable_execute_api_endpoint;
}
void OAICreateRestApi_request::setDisableExecuteApiEndpoint(const bool &disable_execute_api_endpoint) {
    m_disable_execute_api_endpoint = disable_execute_api_endpoint;
    m_disable_execute_api_endpoint_isSet = true;
}

bool OAICreateRestApi_request::is_disable_execute_api_endpoint_Set() const{
    return m_disable_execute_api_endpoint_isSet;
}

bool OAICreateRestApi_request::is_disable_execute_api_endpoint_Valid() const{
    return m_disable_execute_api_endpoint_isValid;
}

bool OAICreateRestApi_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_media_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_compression_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_execute_api_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRestApi_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
