/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKeys.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKeys::OAIApiKeys(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKeys::OAIApiKeys() {
    this->initializeModel();
}

OAIApiKeys::~OAIApiKeys() {}

void OAIApiKeys::initializeModel() {

    m_warnings_isSet = false;
    m_warnings_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;
}

void OAIApiKeys::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKeys::fromJsonObject(QJsonObject json) {

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;
}

QString OAIApiKeys::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKeys::asJsonObject() const {
    QJsonObject obj;
    if (m_warnings.isSet()) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    return obj;
}

QList OAIApiKeys::getWarnings() const {
    return m_warnings;
}
void OAIApiKeys::setWarnings(const QList &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIApiKeys::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIApiKeys::is_warnings_Valid() const{
    return m_warnings_isValid;
}

QString OAIApiKeys::getPosition() const {
    return m_position;
}
void OAIApiKeys::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIApiKeys::is_position_Set() const{
    return m_position_isSet;
}

bool OAIApiKeys::is_position_Valid() const{
    return m_position_isValid;
}

QList OAIApiKeys::getItems() const {
    return m_items;
}
void OAIApiKeys::setItems(const QList &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIApiKeys::is_items_Set() const{
    return m_items_isSet;
}

bool OAIApiKeys::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIApiKeys::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKeys::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
