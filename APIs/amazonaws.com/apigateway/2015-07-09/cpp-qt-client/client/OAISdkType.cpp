/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISdkType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISdkType::OAISdkType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISdkType::OAISdkType() {
    this->initializeModel();
}

OAISdkType::~OAISdkType() {}

void OAISdkType::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_configuration_properties_isSet = false;
    m_configuration_properties_isValid = false;
}

void OAISdkType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISdkType::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_configuration_properties_isValid = ::OpenAPI::fromJsonValue(m_configuration_properties, json[QString("configurationProperties")]);
    m_configuration_properties_isSet = !json[QString("configurationProperties")].isNull() && m_configuration_properties_isValid;
}

QString OAISdkType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISdkType::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_configuration_properties.isSet()) {
        obj.insert(QString("configurationProperties"), ::OpenAPI::toJsonValue(m_configuration_properties));
    }
    return obj;
}

QString OAISdkType::getId() const {
    return m_id;
}
void OAISdkType::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISdkType::is_id_Set() const{
    return m_id_isSet;
}

bool OAISdkType::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISdkType::getFriendlyName() const {
    return m_friendly_name;
}
void OAISdkType::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAISdkType::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAISdkType::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAISdkType::getDescription() const {
    return m_description;
}
void OAISdkType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISdkType::is_description_Set() const{
    return m_description_isSet;
}

bool OAISdkType::is_description_Valid() const{
    return m_description_isValid;
}

QList OAISdkType::getConfigurationProperties() const {
    return m_configuration_properties;
}
void OAISdkType::setConfigurationProperties(const QList &configuration_properties) {
    m_configuration_properties = configuration_properties;
    m_configuration_properties_isSet = true;
}

bool OAISdkType::is_configuration_properties_Set() const{
    return m_configuration_properties_isSet;
}

bool OAISdkType::is_configuration_properties_Valid() const{
    return m_configuration_properties_isValid;
}

bool OAISdkType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISdkType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
