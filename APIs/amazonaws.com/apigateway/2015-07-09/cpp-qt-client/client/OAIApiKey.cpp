/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKey::OAIApiKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKey::OAIApiKey() {
    this->initializeModel();
}

OAIApiKey::~OAIApiKey() {}

void OAIApiKey::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_stage_keys_isSet = false;
    m_stage_keys_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIApiKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKey::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("lastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("lastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_stage_keys_isValid = ::OpenAPI::fromJsonValue(m_stage_keys, json[QString("stageKeys")]);
    m_stage_keys_isSet = !json[QString("stageKeys")].isNull() && m_stage_keys_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIApiKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKey::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("lastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_stage_keys.isSet()) {
        obj.insert(QString("stageKeys"), ::OpenAPI::toJsonValue(m_stage_keys));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIApiKey::getId() const {
    return m_id;
}
void OAIApiKey::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApiKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApiKey::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApiKey::getValue() const {
    return m_value;
}
void OAIApiKey::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIApiKey::is_value_Set() const{
    return m_value_isSet;
}

bool OAIApiKey::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIApiKey::getName() const {
    return m_name;
}
void OAIApiKey::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApiKey::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApiKey::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApiKey::getCustomerId() const {
    return m_customer_id;
}
void OAIApiKey::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIApiKey::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIApiKey::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIApiKey::getDescription() const {
    return m_description;
}
void OAIApiKey::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiKey::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiKey::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIApiKey::getEnabled() const {
    return m_enabled;
}
void OAIApiKey::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIApiKey::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIApiKey::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QDateTime OAIApiKey::getCreatedDate() const {
    return m_created_date;
}
void OAIApiKey::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIApiKey::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIApiKey::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAIApiKey::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIApiKey::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIApiKey::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIApiKey::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

QList OAIApiKey::getStageKeys() const {
    return m_stage_keys;
}
void OAIApiKey::setStageKeys(const QList &stage_keys) {
    m_stage_keys = stage_keys;
    m_stage_keys_isSet = true;
}

bool OAIApiKey::is_stage_keys_Set() const{
    return m_stage_keys_isSet;
}

bool OAIApiKey::is_stage_keys_Valid() const{
    return m_stage_keys_isValid;
}

QMap OAIApiKey::getTags() const {
    return m_tags;
}
void OAIApiKey::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIApiKey::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIApiKey::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIApiKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
