/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiStage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiStage::OAIApiStage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiStage::OAIApiStage() {
    this->initializeModel();
}

OAIApiStage::~OAIApiStage() {}

void OAIApiStage::initializeModel() {

    m_api_id_isSet = false;
    m_api_id_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;

    m_throttle_isSet = false;
    m_throttle_isValid = false;
}

void OAIApiStage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiStage::fromJsonObject(QJsonObject json) {

    m_api_id_isValid = ::OpenAPI::fromJsonValue(m_api_id, json[QString("apiId")]);
    m_api_id_isSet = !json[QString("apiId")].isNull() && m_api_id_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;

    m_throttle_isValid = ::OpenAPI::fromJsonValue(m_throttle, json[QString("throttle")]);
    m_throttle_isSet = !json[QString("throttle")].isNull() && m_throttle_isValid;
}

QString OAIApiStage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiStage::asJsonObject() const {
    QJsonObject obj;
    if (m_api_id_isSet) {
        obj.insert(QString("apiId"), ::OpenAPI::toJsonValue(m_api_id));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    if (m_throttle.isSet()) {
        obj.insert(QString("throttle"), ::OpenAPI::toJsonValue(m_throttle));
    }
    return obj;
}

QString OAIApiStage::getApiId() const {
    return m_api_id;
}
void OAIApiStage::setApiId(const QString &api_id) {
    m_api_id = api_id;
    m_api_id_isSet = true;
}

bool OAIApiStage::is_api_id_Set() const{
    return m_api_id_isSet;
}

bool OAIApiStage::is_api_id_Valid() const{
    return m_api_id_isValid;
}

QString OAIApiStage::getStage() const {
    return m_stage;
}
void OAIApiStage::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIApiStage::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIApiStage::is_stage_Valid() const{
    return m_stage_isValid;
}

QMap OAIApiStage::getThrottle() const {
    return m_throttle;
}
void OAIApiStage::setThrottle(const QMap &throttle) {
    m_throttle = throttle;
    m_throttle_isSet = true;
}

bool OAIApiStage::is_throttle_Set() const{
    return m_throttle_isSet;
}

bool OAIApiStage::is_throttle_Valid() const{
    return m_throttle_isValid;
}

bool OAIApiStage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttle.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiStage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
