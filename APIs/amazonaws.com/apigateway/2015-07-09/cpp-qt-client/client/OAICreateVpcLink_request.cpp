/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVpcLink_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVpcLink_request::OAICreateVpcLink_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVpcLink_request::OAICreateVpcLink_request() {
    this->initializeModel();
}

OAICreateVpcLink_request::~OAICreateVpcLink_request() {}

void OAICreateVpcLink_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_target_arns_isSet = false;
    m_target_arns_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateVpcLink_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVpcLink_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_target_arns_isValid = ::OpenAPI::fromJsonValue(m_target_arns, json[QString("targetArns")]);
    m_target_arns_isSet = !json[QString("targetArns")].isNull() && m_target_arns_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateVpcLink_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVpcLink_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_target_arns.size() > 0) {
        obj.insert(QString("targetArns"), ::OpenAPI::toJsonValue(m_target_arns));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateVpcLink_request::getName() const {
    return m_name;
}
void OAICreateVpcLink_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateVpcLink_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateVpcLink_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateVpcLink_request::getDescription() const {
    return m_description;
}
void OAICreateVpcLink_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateVpcLink_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateVpcLink_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAICreateVpcLink_request::getTargetArns() const {
    return m_target_arns;
}
void OAICreateVpcLink_request::setTargetArns(const QList<QString> &target_arns) {
    m_target_arns = target_arns;
    m_target_arns_isSet = true;
}

bool OAICreateVpcLink_request::is_target_arns_Set() const{
    return m_target_arns_isSet;
}

bool OAICreateVpcLink_request::is_target_arns_Valid() const{
    return m_target_arns_isValid;
}

QMap<QString, QString> OAICreateVpcLink_request::getTags() const {
    return m_tags;
}
void OAICreateVpcLink_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVpcLink_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVpcLink_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateVpcLink_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVpcLink_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_target_arns_isValid && true;
}

} // namespace OpenAPI
