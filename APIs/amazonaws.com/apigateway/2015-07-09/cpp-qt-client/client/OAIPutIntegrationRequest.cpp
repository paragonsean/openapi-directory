/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntegrationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntegrationRequest::OAIPutIntegrationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntegrationRequest::OAIPutIntegrationRequest() {
    this->initializeModel();
}

OAIPutIntegrationRequest::~OAIPutIntegrationRequest() {}

void OAIPutIntegrationRequest::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_integration_http_method_isSet = false;
    m_integration_http_method_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_request_parameters_isSet = false;
    m_request_parameters_isValid = false;

    m_request_templates_isSet = false;
    m_request_templates_isValid = false;

    m_passthrough_behavior_isSet = false;
    m_passthrough_behavior_isValid = false;

    m_cache_namespace_isSet = false;
    m_cache_namespace_isValid = false;

    m_cache_key_parameters_isSet = false;
    m_cache_key_parameters_isValid = false;

    m_content_handling_isSet = false;
    m_content_handling_isValid = false;

    m_timeout_in_millis_isSet = false;
    m_timeout_in_millis_isValid = false;

    m_tls_config_isSet = false;
    m_tls_config_isValid = false;
}

void OAIPutIntegrationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntegrationRequest::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_integration_http_method_isValid = ::OpenAPI::fromJsonValue(m_integration_http_method, json[QString("integrationHttpMethod")]);
    m_integration_http_method_isSet = !json[QString("integrationHttpMethod")].isNull() && m_integration_http_method_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_request_parameters, json[QString("requestParameters")]);
    m_request_parameters_isSet = !json[QString("requestParameters")].isNull() && m_request_parameters_isValid;

    m_request_templates_isValid = ::OpenAPI::fromJsonValue(m_request_templates, json[QString("requestTemplates")]);
    m_request_templates_isSet = !json[QString("requestTemplates")].isNull() && m_request_templates_isValid;

    m_passthrough_behavior_isValid = ::OpenAPI::fromJsonValue(m_passthrough_behavior, json[QString("passthroughBehavior")]);
    m_passthrough_behavior_isSet = !json[QString("passthroughBehavior")].isNull() && m_passthrough_behavior_isValid;

    m_cache_namespace_isValid = ::OpenAPI::fromJsonValue(m_cache_namespace, json[QString("cacheNamespace")]);
    m_cache_namespace_isSet = !json[QString("cacheNamespace")].isNull() && m_cache_namespace_isValid;

    m_cache_key_parameters_isValid = ::OpenAPI::fromJsonValue(m_cache_key_parameters, json[QString("cacheKeyParameters")]);
    m_cache_key_parameters_isSet = !json[QString("cacheKeyParameters")].isNull() && m_cache_key_parameters_isValid;

    m_content_handling_isValid = ::OpenAPI::fromJsonValue(m_content_handling, json[QString("contentHandling")]);
    m_content_handling_isSet = !json[QString("contentHandling")].isNull() && m_content_handling_isValid;

    m_timeout_in_millis_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_millis, json[QString("timeoutInMillis")]);
    m_timeout_in_millis_isSet = !json[QString("timeoutInMillis")].isNull() && m_timeout_in_millis_isValid;

    m_tls_config_isValid = ::OpenAPI::fromJsonValue(m_tls_config, json[QString("tlsConfig")]);
    m_tls_config_isSet = !json[QString("tlsConfig")].isNull() && m_tls_config_isValid;
}

QString OAIPutIntegrationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntegrationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_integration_http_method_isSet) {
        obj.insert(QString("integrationHttpMethod"), ::OpenAPI::toJsonValue(m_integration_http_method));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_connection_type.isSet()) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_credentials_isSet) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_request_parameters.isSet()) {
        obj.insert(QString("requestParameters"), ::OpenAPI::toJsonValue(m_request_parameters));
    }
    if (m_request_templates.isSet()) {
        obj.insert(QString("requestTemplates"), ::OpenAPI::toJsonValue(m_request_templates));
    }
    if (m_passthrough_behavior_isSet) {
        obj.insert(QString("passthroughBehavior"), ::OpenAPI::toJsonValue(m_passthrough_behavior));
    }
    if (m_cache_namespace_isSet) {
        obj.insert(QString("cacheNamespace"), ::OpenAPI::toJsonValue(m_cache_namespace));
    }
    if (m_cache_key_parameters.isSet()) {
        obj.insert(QString("cacheKeyParameters"), ::OpenAPI::toJsonValue(m_cache_key_parameters));
    }
    if (m_content_handling.isSet()) {
        obj.insert(QString("contentHandling"), ::OpenAPI::toJsonValue(m_content_handling));
    }
    if (m_timeout_in_millis_isSet) {
        obj.insert(QString("timeoutInMillis"), ::OpenAPI::toJsonValue(m_timeout_in_millis));
    }
    if (m_tls_config.isSet()) {
        obj.insert(QString("tlsConfig"), ::OpenAPI::toJsonValue(m_tls_config));
    }
    return obj;
}

OAIIntegrationType OAIPutIntegrationRequest::getType() const {
    return m_type;
}
void OAIPutIntegrationRequest::setType(const OAIIntegrationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPutIntegrationRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPutIntegrationRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPutIntegrationRequest::getIntegrationHttpMethod() const {
    return m_integration_http_method;
}
void OAIPutIntegrationRequest::setIntegrationHttpMethod(const QString &integration_http_method) {
    m_integration_http_method = integration_http_method;
    m_integration_http_method_isSet = true;
}

bool OAIPutIntegrationRequest::is_integration_http_method_Set() const{
    return m_integration_http_method_isSet;
}

bool OAIPutIntegrationRequest::is_integration_http_method_Valid() const{
    return m_integration_http_method_isValid;
}

QString OAIPutIntegrationRequest::getUri() const {
    return m_uri;
}
void OAIPutIntegrationRequest::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPutIntegrationRequest::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPutIntegrationRequest::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIConnectionType OAIPutIntegrationRequest::getConnectionType() const {
    return m_connection_type;
}
void OAIPutIntegrationRequest::setConnectionType(const OAIConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIPutIntegrationRequest::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIPutIntegrationRequest::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAIPutIntegrationRequest::getConnectionId() const {
    return m_connection_id;
}
void OAIPutIntegrationRequest::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIPutIntegrationRequest::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIPutIntegrationRequest::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QString OAIPutIntegrationRequest::getCredentials() const {
    return m_credentials;
}
void OAIPutIntegrationRequest::setCredentials(const QString &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIPutIntegrationRequest::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIPutIntegrationRequest::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QMap OAIPutIntegrationRequest::getRequestParameters() const {
    return m_request_parameters;
}
void OAIPutIntegrationRequest::setRequestParameters(const QMap &request_parameters) {
    m_request_parameters = request_parameters;
    m_request_parameters_isSet = true;
}

bool OAIPutIntegrationRequest::is_request_parameters_Set() const{
    return m_request_parameters_isSet;
}

bool OAIPutIntegrationRequest::is_request_parameters_Valid() const{
    return m_request_parameters_isValid;
}

QMap OAIPutIntegrationRequest::getRequestTemplates() const {
    return m_request_templates;
}
void OAIPutIntegrationRequest::setRequestTemplates(const QMap &request_templates) {
    m_request_templates = request_templates;
    m_request_templates_isSet = true;
}

bool OAIPutIntegrationRequest::is_request_templates_Set() const{
    return m_request_templates_isSet;
}

bool OAIPutIntegrationRequest::is_request_templates_Valid() const{
    return m_request_templates_isValid;
}

QString OAIPutIntegrationRequest::getPassthroughBehavior() const {
    return m_passthrough_behavior;
}
void OAIPutIntegrationRequest::setPassthroughBehavior(const QString &passthrough_behavior) {
    m_passthrough_behavior = passthrough_behavior;
    m_passthrough_behavior_isSet = true;
}

bool OAIPutIntegrationRequest::is_passthrough_behavior_Set() const{
    return m_passthrough_behavior_isSet;
}

bool OAIPutIntegrationRequest::is_passthrough_behavior_Valid() const{
    return m_passthrough_behavior_isValid;
}

QString OAIPutIntegrationRequest::getCacheNamespace() const {
    return m_cache_namespace;
}
void OAIPutIntegrationRequest::setCacheNamespace(const QString &cache_namespace) {
    m_cache_namespace = cache_namespace;
    m_cache_namespace_isSet = true;
}

bool OAIPutIntegrationRequest::is_cache_namespace_Set() const{
    return m_cache_namespace_isSet;
}

bool OAIPutIntegrationRequest::is_cache_namespace_Valid() const{
    return m_cache_namespace_isValid;
}

QList OAIPutIntegrationRequest::getCacheKeyParameters() const {
    return m_cache_key_parameters;
}
void OAIPutIntegrationRequest::setCacheKeyParameters(const QList &cache_key_parameters) {
    m_cache_key_parameters = cache_key_parameters;
    m_cache_key_parameters_isSet = true;
}

bool OAIPutIntegrationRequest::is_cache_key_parameters_Set() const{
    return m_cache_key_parameters_isSet;
}

bool OAIPutIntegrationRequest::is_cache_key_parameters_Valid() const{
    return m_cache_key_parameters_isValid;
}

OAIContentHandlingStrategy OAIPutIntegrationRequest::getContentHandling() const {
    return m_content_handling;
}
void OAIPutIntegrationRequest::setContentHandling(const OAIContentHandlingStrategy &content_handling) {
    m_content_handling = content_handling;
    m_content_handling_isSet = true;
}

bool OAIPutIntegrationRequest::is_content_handling_Set() const{
    return m_content_handling_isSet;
}

bool OAIPutIntegrationRequest::is_content_handling_Valid() const{
    return m_content_handling_isValid;
}

qint32 OAIPutIntegrationRequest::getTimeoutInMillis() const {
    return m_timeout_in_millis;
}
void OAIPutIntegrationRequest::setTimeoutInMillis(const qint32 &timeout_in_millis) {
    m_timeout_in_millis = timeout_in_millis;
    m_timeout_in_millis_isSet = true;
}

bool OAIPutIntegrationRequest::is_timeout_in_millis_Set() const{
    return m_timeout_in_millis_isSet;
}

bool OAIPutIntegrationRequest::is_timeout_in_millis_Valid() const{
    return m_timeout_in_millis_isValid;
}

OAITlsConfig OAIPutIntegrationRequest::getTlsConfig() const {
    return m_tls_config;
}
void OAIPutIntegrationRequest::setTlsConfig(const OAITlsConfig &tls_config) {
    m_tls_config = tls_config;
    m_tls_config_isSet = true;
}

bool OAIPutIntegrationRequest::is_tls_config_Set() const{
    return m_tls_config_isSet;
}

bool OAIPutIntegrationRequest::is_tls_config_Valid() const{
    return m_tls_config_isValid;
}

bool OAIPutIntegrationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_key_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_handling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntegrationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
