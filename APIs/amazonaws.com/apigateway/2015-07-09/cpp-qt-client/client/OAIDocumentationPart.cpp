/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentationPart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentationPart::OAIDocumentationPart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentationPart::OAIDocumentationPart() {
    this->initializeModel();
}

OAIDocumentationPart::~OAIDocumentationPart() {}

void OAIDocumentationPart::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIDocumentationPart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentationPart::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIDocumentationPart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentationPart::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIDocumentationPart::getId() const {
    return m_id;
}
void OAIDocumentationPart::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentationPart::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentationPart::is_id_Valid() const{
    return m_id_isValid;
}

OAIDocumentationPart_location OAIDocumentationPart::getLocation() const {
    return m_location;
}
void OAIDocumentationPart::setLocation(const OAIDocumentationPart_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDocumentationPart::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDocumentationPart::is_location_Valid() const{
    return m_location_isValid;
}

QJsonValue OAIDocumentationPart::getProperties() const {
    return m_properties;
}
void OAIDocumentationPart::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIDocumentationPart::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIDocumentationPart::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIDocumentationPart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentationPart::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
