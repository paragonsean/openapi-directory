/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateRestApi_request.h
 *
 * 
 */

#ifndef OAICreateRestApi_request_H
#define OAICreateRestApi_request_H

#include <QJsonObject>

#include "OAICreateDomainName_request_endpointConfiguration.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateDomainName_request_endpointConfiguration;

class OAICreateRestApi_request : public OAIObject {
public:
    OAICreateRestApi_request();
    OAICreateRestApi_request(QString json);
    ~OAICreateRestApi_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getCloneFrom() const;
    void setCloneFrom(const QString &clone_from);
    bool is_clone_from_Set() const;
    bool is_clone_from_Valid() const;

    QList<QString> getBinaryMediaTypes() const;
    void setBinaryMediaTypes(const QList<QString> &binary_media_types);
    bool is_binary_media_types_Set() const;
    bool is_binary_media_types_Valid() const;

    qint32 getMinimumCompressionSize() const;
    void setMinimumCompressionSize(const qint32 &minimum_compression_size);
    bool is_minimum_compression_size_Set() const;
    bool is_minimum_compression_size_Valid() const;

    QString getApiKeySource() const;
    void setApiKeySource(const QString &api_key_source);
    bool is_api_key_source_Set() const;
    bool is_api_key_source_Valid() const;

    OAICreateDomainName_request_endpointConfiguration getEndpointConfiguration() const;
    void setEndpointConfiguration(const OAICreateDomainName_request_endpointConfiguration &endpoint_configuration);
    bool is_endpoint_configuration_Set() const;
    bool is_endpoint_configuration_Valid() const;

    QString getPolicy() const;
    void setPolicy(const QString &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    bool isDisableExecuteApiEndpoint() const;
    void setDisableExecuteApiEndpoint(const bool &disable_execute_api_endpoint);
    bool is_disable_execute_api_endpoint_Set() const;
    bool is_disable_execute_api_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_clone_from;
    bool m_clone_from_isSet;
    bool m_clone_from_isValid;

    QList<QString> m_binary_media_types;
    bool m_binary_media_types_isSet;
    bool m_binary_media_types_isValid;

    qint32 m_minimum_compression_size;
    bool m_minimum_compression_size_isSet;
    bool m_minimum_compression_size_isValid;

    QString m_api_key_source;
    bool m_api_key_source_isSet;
    bool m_api_key_source_isValid;

    OAICreateDomainName_request_endpointConfiguration m_endpoint_configuration;
    bool m_endpoint_configuration_isSet;
    bool m_endpoint_configuration_isValid;

    QString m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    bool m_disable_execute_api_endpoint;
    bool m_disable_execute_api_endpoint_isSet;
    bool m_disable_execute_api_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateRestApi_request)

#endif // OAICreateRestApi_request_H
