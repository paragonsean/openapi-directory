/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateClientCertificate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateClientCertificate_request::OAIGenerateClientCertificate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateClientCertificate_request::OAIGenerateClientCertificate_request() {
    this->initializeModel();
}

OAIGenerateClientCertificate_request::~OAIGenerateClientCertificate_request() {}

void OAIGenerateClientCertificate_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGenerateClientCertificate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateClientCertificate_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGenerateClientCertificate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateClientCertificate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGenerateClientCertificate_request::getDescription() const {
    return m_description;
}
void OAIGenerateClientCertificate_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGenerateClientCertificate_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGenerateClientCertificate_request::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIGenerateClientCertificate_request::getTags() const {
    return m_tags;
}
void OAIGenerateClientCertificate_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGenerateClientCertificate_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGenerateClientCertificate_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGenerateClientCertificate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateClientCertificate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
