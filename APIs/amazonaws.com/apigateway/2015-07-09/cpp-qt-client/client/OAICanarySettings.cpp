/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICanarySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICanarySettings::OAICanarySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICanarySettings::OAICanarySettings() {
    this->initializeModel();
}

OAICanarySettings::~OAICanarySettings() {}

void OAICanarySettings::initializeModel() {

    m_percent_traffic_isSet = false;
    m_percent_traffic_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_stage_variable_overrides_isSet = false;
    m_stage_variable_overrides_isValid = false;

    m_use_stage_cache_isSet = false;
    m_use_stage_cache_isValid = false;
}

void OAICanarySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICanarySettings::fromJsonObject(QJsonObject json) {

    m_percent_traffic_isValid = ::OpenAPI::fromJsonValue(m_percent_traffic, json[QString("percentTraffic")]);
    m_percent_traffic_isSet = !json[QString("percentTraffic")].isNull() && m_percent_traffic_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_stage_variable_overrides_isValid = ::OpenAPI::fromJsonValue(m_stage_variable_overrides, json[QString("stageVariableOverrides")]);
    m_stage_variable_overrides_isSet = !json[QString("stageVariableOverrides")].isNull() && m_stage_variable_overrides_isValid;

    m_use_stage_cache_isValid = ::OpenAPI::fromJsonValue(m_use_stage_cache, json[QString("useStageCache")]);
    m_use_stage_cache_isSet = !json[QString("useStageCache")].isNull() && m_use_stage_cache_isValid;
}

QString OAICanarySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICanarySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_percent_traffic_isSet) {
        obj.insert(QString("percentTraffic"), ::OpenAPI::toJsonValue(m_percent_traffic));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_stage_variable_overrides.isSet()) {
        obj.insert(QString("stageVariableOverrides"), ::OpenAPI::toJsonValue(m_stage_variable_overrides));
    }
    if (m_use_stage_cache_isSet) {
        obj.insert(QString("useStageCache"), ::OpenAPI::toJsonValue(m_use_stage_cache));
    }
    return obj;
}

double OAICanarySettings::getPercentTraffic() const {
    return m_percent_traffic;
}
void OAICanarySettings::setPercentTraffic(const double &percent_traffic) {
    m_percent_traffic = percent_traffic;
    m_percent_traffic_isSet = true;
}

bool OAICanarySettings::is_percent_traffic_Set() const{
    return m_percent_traffic_isSet;
}

bool OAICanarySettings::is_percent_traffic_Valid() const{
    return m_percent_traffic_isValid;
}

QString OAICanarySettings::getDeploymentId() const {
    return m_deployment_id;
}
void OAICanarySettings::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAICanarySettings::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAICanarySettings::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QMap OAICanarySettings::getStageVariableOverrides() const {
    return m_stage_variable_overrides;
}
void OAICanarySettings::setStageVariableOverrides(const QMap &stage_variable_overrides) {
    m_stage_variable_overrides = stage_variable_overrides;
    m_stage_variable_overrides_isSet = true;
}

bool OAICanarySettings::is_stage_variable_overrides_Set() const{
    return m_stage_variable_overrides_isSet;
}

bool OAICanarySettings::is_stage_variable_overrides_Valid() const{
    return m_stage_variable_overrides_isValid;
}

bool OAICanarySettings::getUseStageCache() const {
    return m_use_stage_cache;
}
void OAICanarySettings::setUseStageCache(const bool &use_stage_cache) {
    m_use_stage_cache = use_stage_cache;
    m_use_stage_cache_isSet = true;
}

bool OAICanarySettings::is_use_stage_cache_Set() const{
    return m_use_stage_cache_isSet;
}

bool OAICanarySettings::is_use_stage_cache_Valid() const{
    return m_use_stage_cache_isValid;
}

bool OAICanarySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percent_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_variable_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_stage_cache_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICanarySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
