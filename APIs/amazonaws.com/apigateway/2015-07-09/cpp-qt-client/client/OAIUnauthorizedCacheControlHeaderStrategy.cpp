/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnauthorizedCacheControlHeaderStrategy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnauthorizedCacheControlHeaderStrategy::OAIUnauthorizedCacheControlHeaderStrategy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnauthorizedCacheControlHeaderStrategy::OAIUnauthorizedCacheControlHeaderStrategy() {
    this->initializeModel();
}

OAIUnauthorizedCacheControlHeaderStrategy::~OAIUnauthorizedCacheControlHeaderStrategy() {}

void OAIUnauthorizedCacheControlHeaderStrategy::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUnauthorizedCacheControlHeaderStrategy::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUnauthorizedCacheControlHeaderStrategy::fromJson(QString jsonString) {
    
    if ( jsonString.compare("FAIL_WITH_403", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnauthorizedCacheControlHeaderStrategy::FAIL_WITH_403;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCEED_WITH_RESPONSE_HEADER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnauthorizedCacheControlHeaderStrategy::SUCCEED_WITH_RESPONSE_HEADER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCEED_WITHOUT_RESPONSE_HEADER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnauthorizedCacheControlHeaderStrategy::SUCCEED_WITHOUT_RESPONSE_HEADER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUnauthorizedCacheControlHeaderStrategy::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUnauthorizedCacheControlHeaderStrategy::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUnauthorizedCacheControlHeaderStrategy::FAIL_WITH_403:
            val = "FAIL_WITH_403";
            break;
        case eOAIUnauthorizedCacheControlHeaderStrategy::SUCCEED_WITH_RESPONSE_HEADER:
            val = "SUCCEED_WITH_RESPONSE_HEADER";
            break;
        case eOAIUnauthorizedCacheControlHeaderStrategy::SUCCEED_WITHOUT_RESPONSE_HEADER:
            val = "SUCCEED_WITHOUT_RESPONSE_HEADER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUnauthorizedCacheControlHeaderStrategy::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUnauthorizedCacheControlHeaderStrategy::eOAIUnauthorizedCacheControlHeaderStrategy OAIUnauthorizedCacheControlHeaderStrategy::getValue() const {
    return m_value;
}

void OAIUnauthorizedCacheControlHeaderStrategy::setValue(const OAIUnauthorizedCacheControlHeaderStrategy::eOAIUnauthorizedCacheControlHeaderStrategy& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUnauthorizedCacheControlHeaderStrategy::isSet() const {
    
    return m_value_isSet;
}

bool OAIUnauthorizedCacheControlHeaderStrategy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
