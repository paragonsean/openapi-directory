/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcLink::OAIVpcLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcLink::OAIVpcLink() {
    this->initializeModel();
}

OAIVpcLink::~OAIVpcLink() {}

void OAIVpcLink::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_target_arns_isSet = false;
    m_target_arns_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIVpcLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcLink::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_target_arns_isValid = ::OpenAPI::fromJsonValue(m_target_arns, json[QString("targetArns")]);
    m_target_arns_isSet = !json[QString("targetArns")].isNull() && m_target_arns_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIVpcLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcLink::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_target_arns.isSet()) {
        obj.insert(QString("targetArns"), ::OpenAPI::toJsonValue(m_target_arns));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIVpcLink::getId() const {
    return m_id;
}
void OAIVpcLink::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVpcLink::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVpcLink::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVpcLink::getName() const {
    return m_name;
}
void OAIVpcLink::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVpcLink::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVpcLink::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVpcLink::getDescription() const {
    return m_description;
}
void OAIVpcLink::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVpcLink::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVpcLink::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIVpcLink::getTargetArns() const {
    return m_target_arns;
}
void OAIVpcLink::setTargetArns(const QList &target_arns) {
    m_target_arns = target_arns;
    m_target_arns_isSet = true;
}

bool OAIVpcLink::is_target_arns_Set() const{
    return m_target_arns_isSet;
}

bool OAIVpcLink::is_target_arns_Valid() const{
    return m_target_arns_isValid;
}

OAIVpcLinkStatus OAIVpcLink::getStatus() const {
    return m_status;
}
void OAIVpcLink::setStatus(const OAIVpcLinkStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVpcLink::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVpcLink::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVpcLink::getStatusMessage() const {
    return m_status_message;
}
void OAIVpcLink::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIVpcLink::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIVpcLink::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QMap OAIVpcLink::getTags() const {
    return m_tags;
}
void OAIVpcLink::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVpcLink::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVpcLink::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIVpcLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
