/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_api_summary_isSet = false;
    m_api_summary_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_api_summary_isValid = ::OpenAPI::fromJsonValue(m_api_summary, json[QString("apiSummary")]);
    m_api_summary_isSet = !json[QString("apiSummary")].isNull() && m_api_summary_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_api_summary.isSet()) {
        obj.insert(QString("apiSummary"), ::OpenAPI::toJsonValue(m_api_summary));
    }
    return obj;
}

QString OAIDeployment::getId() const {
    return m_id;
}
void OAIDeployment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployment::getDescription() const {
    return m_description;
}
void OAIDeployment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeployment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeployment::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIDeployment::getCreatedDate() const {
    return m_created_date;
}
void OAIDeployment::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIDeployment::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIDeployment::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QMap OAIDeployment::getApiSummary() const {
    return m_api_summary;
}
void OAIDeployment::setApiSummary(const QMap &api_summary) {
    m_api_summary = api_summary;
    m_api_summary_isSet = true;
}

bool OAIDeployment::is_api_summary_Set() const{
    return m_api_summary_isSet;
}

bool OAIDeployment::is_api_summary_Valid() const{
    return m_api_summary_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
