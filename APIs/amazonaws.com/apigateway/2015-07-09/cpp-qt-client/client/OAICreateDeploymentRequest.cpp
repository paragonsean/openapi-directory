/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeploymentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeploymentRequest::OAICreateDeploymentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeploymentRequest::OAICreateDeploymentRequest() {
    this->initializeModel();
}

OAICreateDeploymentRequest::~OAICreateDeploymentRequest() {}

void OAICreateDeploymentRequest::initializeModel() {

    m_stage_name_isSet = false;
    m_stage_name_isValid = false;

    m_stage_description_isSet = false;
    m_stage_description_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_cache_cluster_enabled_isSet = false;
    m_cache_cluster_enabled_isValid = false;

    m_cache_cluster_size_isSet = false;
    m_cache_cluster_size_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;

    m_canary_settings_isSet = false;
    m_canary_settings_isValid = false;

    m_tracing_enabled_isSet = false;
    m_tracing_enabled_isValid = false;
}

void OAICreateDeploymentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeploymentRequest::fromJsonObject(QJsonObject json) {

    m_stage_name_isValid = ::OpenAPI::fromJsonValue(m_stage_name, json[QString("stageName")]);
    m_stage_name_isSet = !json[QString("stageName")].isNull() && m_stage_name_isValid;

    m_stage_description_isValid = ::OpenAPI::fromJsonValue(m_stage_description, json[QString("stageDescription")]);
    m_stage_description_isSet = !json[QString("stageDescription")].isNull() && m_stage_description_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_cache_cluster_enabled_isValid = ::OpenAPI::fromJsonValue(m_cache_cluster_enabled, json[QString("cacheClusterEnabled")]);
    m_cache_cluster_enabled_isSet = !json[QString("cacheClusterEnabled")].isNull() && m_cache_cluster_enabled_isValid;

    m_cache_cluster_size_isValid = ::OpenAPI::fromJsonValue(m_cache_cluster_size, json[QString("cacheClusterSize")]);
    m_cache_cluster_size_isSet = !json[QString("cacheClusterSize")].isNull() && m_cache_cluster_size_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;

    m_canary_settings_isValid = ::OpenAPI::fromJsonValue(m_canary_settings, json[QString("canarySettings")]);
    m_canary_settings_isSet = !json[QString("canarySettings")].isNull() && m_canary_settings_isValid;

    m_tracing_enabled_isValid = ::OpenAPI::fromJsonValue(m_tracing_enabled, json[QString("tracingEnabled")]);
    m_tracing_enabled_isSet = !json[QString("tracingEnabled")].isNull() && m_tracing_enabled_isValid;
}

QString OAICreateDeploymentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeploymentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_stage_name_isSet) {
        obj.insert(QString("stageName"), ::OpenAPI::toJsonValue(m_stage_name));
    }
    if (m_stage_description_isSet) {
        obj.insert(QString("stageDescription"), ::OpenAPI::toJsonValue(m_stage_description));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_cache_cluster_enabled_isSet) {
        obj.insert(QString("cacheClusterEnabled"), ::OpenAPI::toJsonValue(m_cache_cluster_enabled));
    }
    if (m_cache_cluster_size.isSet()) {
        obj.insert(QString("cacheClusterSize"), ::OpenAPI::toJsonValue(m_cache_cluster_size));
    }
    if (m_variables.isSet()) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    if (m_canary_settings.isSet()) {
        obj.insert(QString("canarySettings"), ::OpenAPI::toJsonValue(m_canary_settings));
    }
    if (m_tracing_enabled_isSet) {
        obj.insert(QString("tracingEnabled"), ::OpenAPI::toJsonValue(m_tracing_enabled));
    }
    return obj;
}

QString OAICreateDeploymentRequest::getStageName() const {
    return m_stage_name;
}
void OAICreateDeploymentRequest::setStageName(const QString &stage_name) {
    m_stage_name = stage_name;
    m_stage_name_isSet = true;
}

bool OAICreateDeploymentRequest::is_stage_name_Set() const{
    return m_stage_name_isSet;
}

bool OAICreateDeploymentRequest::is_stage_name_Valid() const{
    return m_stage_name_isValid;
}

QString OAICreateDeploymentRequest::getStageDescription() const {
    return m_stage_description;
}
void OAICreateDeploymentRequest::setStageDescription(const QString &stage_description) {
    m_stage_description = stage_description;
    m_stage_description_isSet = true;
}

bool OAICreateDeploymentRequest::is_stage_description_Set() const{
    return m_stage_description_isSet;
}

bool OAICreateDeploymentRequest::is_stage_description_Valid() const{
    return m_stage_description_isValid;
}

QString OAICreateDeploymentRequest::getDescription() const {
    return m_description;
}
void OAICreateDeploymentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateDeploymentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateDeploymentRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateDeploymentRequest::getCacheClusterEnabled() const {
    return m_cache_cluster_enabled;
}
void OAICreateDeploymentRequest::setCacheClusterEnabled(const bool &cache_cluster_enabled) {
    m_cache_cluster_enabled = cache_cluster_enabled;
    m_cache_cluster_enabled_isSet = true;
}

bool OAICreateDeploymentRequest::is_cache_cluster_enabled_Set() const{
    return m_cache_cluster_enabled_isSet;
}

bool OAICreateDeploymentRequest::is_cache_cluster_enabled_Valid() const{
    return m_cache_cluster_enabled_isValid;
}

OAICacheClusterSize OAICreateDeploymentRequest::getCacheClusterSize() const {
    return m_cache_cluster_size;
}
void OAICreateDeploymentRequest::setCacheClusterSize(const OAICacheClusterSize &cache_cluster_size) {
    m_cache_cluster_size = cache_cluster_size;
    m_cache_cluster_size_isSet = true;
}

bool OAICreateDeploymentRequest::is_cache_cluster_size_Set() const{
    return m_cache_cluster_size_isSet;
}

bool OAICreateDeploymentRequest::is_cache_cluster_size_Valid() const{
    return m_cache_cluster_size_isValid;
}

QMap OAICreateDeploymentRequest::getVariables() const {
    return m_variables;
}
void OAICreateDeploymentRequest::setVariables(const QMap &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAICreateDeploymentRequest::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAICreateDeploymentRequest::is_variables_Valid() const{
    return m_variables_isValid;
}

OAICreateDeploymentRequest_canarySettings OAICreateDeploymentRequest::getCanarySettings() const {
    return m_canary_settings;
}
void OAICreateDeploymentRequest::setCanarySettings(const OAICreateDeploymentRequest_canarySettings &canary_settings) {
    m_canary_settings = canary_settings;
    m_canary_settings_isSet = true;
}

bool OAICreateDeploymentRequest::is_canary_settings_Set() const{
    return m_canary_settings_isSet;
}

bool OAICreateDeploymentRequest::is_canary_settings_Valid() const{
    return m_canary_settings_isValid;
}

bool OAICreateDeploymentRequest::getTracingEnabled() const {
    return m_tracing_enabled;
}
void OAICreateDeploymentRequest::setTracingEnabled(const bool &tracing_enabled) {
    m_tracing_enabled = tracing_enabled;
    m_tracing_enabled_isSet = true;
}

bool OAICreateDeploymentRequest::is_tracing_enabled_Set() const{
    return m_tracing_enabled_isSet;
}

bool OAICreateDeploymentRequest::is_tracing_enabled_Valid() const{
    return m_tracing_enabled_isValid;
}

bool OAICreateDeploymentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stage_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_cluster_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_cluster_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_canary_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeploymentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
