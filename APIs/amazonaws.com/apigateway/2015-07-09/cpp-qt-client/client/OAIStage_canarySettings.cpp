/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStage_canarySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStage_canarySettings::OAIStage_canarySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStage_canarySettings::OAIStage_canarySettings() {
    this->initializeModel();
}

OAIStage_canarySettings::~OAIStage_canarySettings() {}

void OAIStage_canarySettings::initializeModel() {

    m_percent_traffic_isSet = false;
    m_percent_traffic_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_stage_variable_overrides_isSet = false;
    m_stage_variable_overrides_isValid = false;

    m_use_stage_cache_isSet = false;
    m_use_stage_cache_isValid = false;
}

void OAIStage_canarySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStage_canarySettings::fromJsonObject(QJsonObject json) {

    m_percent_traffic_isValid = ::OpenAPI::fromJsonValue(m_percent_traffic, json[QString("percentTraffic")]);
    m_percent_traffic_isSet = !json[QString("percentTraffic")].isNull() && m_percent_traffic_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_stage_variable_overrides_isValid = ::OpenAPI::fromJsonValue(m_stage_variable_overrides, json[QString("stageVariableOverrides")]);
    m_stage_variable_overrides_isSet = !json[QString("stageVariableOverrides")].isNull() && m_stage_variable_overrides_isValid;

    m_use_stage_cache_isValid = ::OpenAPI::fromJsonValue(m_use_stage_cache, json[QString("useStageCache")]);
    m_use_stage_cache_isSet = !json[QString("useStageCache")].isNull() && m_use_stage_cache_isValid;
}

QString OAIStage_canarySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStage_canarySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_percent_traffic_isSet) {
        obj.insert(QString("percentTraffic"), ::OpenAPI::toJsonValue(m_percent_traffic));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_stage_variable_overrides.isSet()) {
        obj.insert(QString("stageVariableOverrides"), ::OpenAPI::toJsonValue(m_stage_variable_overrides));
    }
    if (m_use_stage_cache_isSet) {
        obj.insert(QString("useStageCache"), ::OpenAPI::toJsonValue(m_use_stage_cache));
    }
    return obj;
}

double OAIStage_canarySettings::getPercentTraffic() const {
    return m_percent_traffic;
}
void OAIStage_canarySettings::setPercentTraffic(const double &percent_traffic) {
    m_percent_traffic = percent_traffic;
    m_percent_traffic_isSet = true;
}

bool OAIStage_canarySettings::is_percent_traffic_Set() const{
    return m_percent_traffic_isSet;
}

bool OAIStage_canarySettings::is_percent_traffic_Valid() const{
    return m_percent_traffic_isValid;
}

QString OAIStage_canarySettings::getDeploymentId() const {
    return m_deployment_id;
}
void OAIStage_canarySettings::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIStage_canarySettings::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIStage_canarySettings::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QMap OAIStage_canarySettings::getStageVariableOverrides() const {
    return m_stage_variable_overrides;
}
void OAIStage_canarySettings::setStageVariableOverrides(const QMap &stage_variable_overrides) {
    m_stage_variable_overrides = stage_variable_overrides;
    m_stage_variable_overrides_isSet = true;
}

bool OAIStage_canarySettings::is_stage_variable_overrides_Set() const{
    return m_stage_variable_overrides_isSet;
}

bool OAIStage_canarySettings::is_stage_variable_overrides_Valid() const{
    return m_stage_variable_overrides_isValid;
}

bool OAIStage_canarySettings::getUseStageCache() const {
    return m_use_stage_cache;
}
void OAIStage_canarySettings::setUseStageCache(const bool &use_stage_cache) {
    m_use_stage_cache = use_stage_cache;
    m_use_stage_cache_isSet = true;
}

bool OAIStage_canarySettings::is_use_stage_cache_Set() const{
    return m_use_stage_cache_isSet;
}

bool OAIStage_canarySettings::is_use_stage_cache_Valid() const{
    return m_use_stage_cache_isValid;
}

bool OAIStage_canarySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percent_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_variable_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_stage_cache_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStage_canarySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
