/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestInvokeMethodResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestInvokeMethodResponse::OAITestInvokeMethodResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestInvokeMethodResponse::OAITestInvokeMethodResponse() {
    this->initializeModel();
}

OAITestInvokeMethodResponse::~OAITestInvokeMethodResponse() {}

void OAITestInvokeMethodResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_multi_value_headers_isSet = false;
    m_multi_value_headers_isValid = false;

    m_log_isSet = false;
    m_log_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;
}

void OAITestInvokeMethodResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestInvokeMethodResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_multi_value_headers_isValid = ::OpenAPI::fromJsonValue(m_multi_value_headers, json[QString("multiValueHeaders")]);
    m_multi_value_headers_isSet = !json[QString("multiValueHeaders")].isNull() && m_multi_value_headers_isValid;

    m_log_isValid = ::OpenAPI::fromJsonValue(m_log, json[QString("log")]);
    m_log_isSet = !json[QString("log")].isNull() && m_log_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("latency")]);
    m_latency_isSet = !json[QString("latency")].isNull() && m_latency_isValid;
}

QString OAITestInvokeMethodResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestInvokeMethodResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_multi_value_headers.isSet()) {
        obj.insert(QString("multiValueHeaders"), ::OpenAPI::toJsonValue(m_multi_value_headers));
    }
    if (m_log_isSet) {
        obj.insert(QString("log"), ::OpenAPI::toJsonValue(m_log));
    }
    if (m_latency_isSet) {
        obj.insert(QString("latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    return obj;
}

qint32 OAITestInvokeMethodResponse::getStatus() const {
    return m_status;
}
void OAITestInvokeMethodResponse::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITestInvokeMethodResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAITestInvokeMethodResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITestInvokeMethodResponse::getBody() const {
    return m_body;
}
void OAITestInvokeMethodResponse::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITestInvokeMethodResponse::is_body_Set() const{
    return m_body_isSet;
}

bool OAITestInvokeMethodResponse::is_body_Valid() const{
    return m_body_isValid;
}

QMap OAITestInvokeMethodResponse::getHeaders() const {
    return m_headers;
}
void OAITestInvokeMethodResponse::setHeaders(const QMap &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAITestInvokeMethodResponse::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAITestInvokeMethodResponse::is_headers_Valid() const{
    return m_headers_isValid;
}

QMap OAITestInvokeMethodResponse::getMultiValueHeaders() const {
    return m_multi_value_headers;
}
void OAITestInvokeMethodResponse::setMultiValueHeaders(const QMap &multi_value_headers) {
    m_multi_value_headers = multi_value_headers;
    m_multi_value_headers_isSet = true;
}

bool OAITestInvokeMethodResponse::is_multi_value_headers_Set() const{
    return m_multi_value_headers_isSet;
}

bool OAITestInvokeMethodResponse::is_multi_value_headers_Valid() const{
    return m_multi_value_headers_isValid;
}

QString OAITestInvokeMethodResponse::getLog() const {
    return m_log;
}
void OAITestInvokeMethodResponse::setLog(const QString &log) {
    m_log = log;
    m_log_isSet = true;
}

bool OAITestInvokeMethodResponse::is_log_Set() const{
    return m_log_isSet;
}

bool OAITestInvokeMethodResponse::is_log_Valid() const{
    return m_log_isValid;
}

qint32 OAITestInvokeMethodResponse::getLatency() const {
    return m_latency;
}
void OAITestInvokeMethodResponse::setLatency(const qint32 &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAITestInvokeMethodResponse::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAITestInvokeMethodResponse::is_latency_Valid() const{
    return m_latency_isValid;
}

bool OAITestInvokeMethodResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_value_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestInvokeMethodResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
