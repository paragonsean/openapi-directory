/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainName_mutualTlsAuthentication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainName_mutualTlsAuthentication::OAIDomainName_mutualTlsAuthentication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainName_mutualTlsAuthentication::OAIDomainName_mutualTlsAuthentication() {
    this->initializeModel();
}

OAIDomainName_mutualTlsAuthentication::~OAIDomainName_mutualTlsAuthentication() {}

void OAIDomainName_mutualTlsAuthentication::initializeModel() {

    m_truststore_uri_isSet = false;
    m_truststore_uri_isValid = false;

    m_truststore_version_isSet = false;
    m_truststore_version_isValid = false;

    m_truststore_warnings_isSet = false;
    m_truststore_warnings_isValid = false;
}

void OAIDomainName_mutualTlsAuthentication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainName_mutualTlsAuthentication::fromJsonObject(QJsonObject json) {

    m_truststore_uri_isValid = ::OpenAPI::fromJsonValue(m_truststore_uri, json[QString("truststoreUri")]);
    m_truststore_uri_isSet = !json[QString("truststoreUri")].isNull() && m_truststore_uri_isValid;

    m_truststore_version_isValid = ::OpenAPI::fromJsonValue(m_truststore_version, json[QString("truststoreVersion")]);
    m_truststore_version_isSet = !json[QString("truststoreVersion")].isNull() && m_truststore_version_isValid;

    m_truststore_warnings_isValid = ::OpenAPI::fromJsonValue(m_truststore_warnings, json[QString("truststoreWarnings")]);
    m_truststore_warnings_isSet = !json[QString("truststoreWarnings")].isNull() && m_truststore_warnings_isValid;
}

QString OAIDomainName_mutualTlsAuthentication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainName_mutualTlsAuthentication::asJsonObject() const {
    QJsonObject obj;
    if (m_truststore_uri_isSet) {
        obj.insert(QString("truststoreUri"), ::OpenAPI::toJsonValue(m_truststore_uri));
    }
    if (m_truststore_version_isSet) {
        obj.insert(QString("truststoreVersion"), ::OpenAPI::toJsonValue(m_truststore_version));
    }
    if (m_truststore_warnings.isSet()) {
        obj.insert(QString("truststoreWarnings"), ::OpenAPI::toJsonValue(m_truststore_warnings));
    }
    return obj;
}

QString OAIDomainName_mutualTlsAuthentication::getTruststoreUri() const {
    return m_truststore_uri;
}
void OAIDomainName_mutualTlsAuthentication::setTruststoreUri(const QString &truststore_uri) {
    m_truststore_uri = truststore_uri;
    m_truststore_uri_isSet = true;
}

bool OAIDomainName_mutualTlsAuthentication::is_truststore_uri_Set() const{
    return m_truststore_uri_isSet;
}

bool OAIDomainName_mutualTlsAuthentication::is_truststore_uri_Valid() const{
    return m_truststore_uri_isValid;
}

QString OAIDomainName_mutualTlsAuthentication::getTruststoreVersion() const {
    return m_truststore_version;
}
void OAIDomainName_mutualTlsAuthentication::setTruststoreVersion(const QString &truststore_version) {
    m_truststore_version = truststore_version;
    m_truststore_version_isSet = true;
}

bool OAIDomainName_mutualTlsAuthentication::is_truststore_version_Set() const{
    return m_truststore_version_isSet;
}

bool OAIDomainName_mutualTlsAuthentication::is_truststore_version_Valid() const{
    return m_truststore_version_isValid;
}

QList OAIDomainName_mutualTlsAuthentication::getTruststoreWarnings() const {
    return m_truststore_warnings;
}
void OAIDomainName_mutualTlsAuthentication::setTruststoreWarnings(const QList &truststore_warnings) {
    m_truststore_warnings = truststore_warnings;
    m_truststore_warnings_isSet = true;
}

bool OAIDomainName_mutualTlsAuthentication::is_truststore_warnings_Set() const{
    return m_truststore_warnings_isSet;
}

bool OAIDomainName_mutualTlsAuthentication::is_truststore_warnings_Valid() const{
    return m_truststore_warnings_isValid;
}

bool OAIDomainName_mutualTlsAuthentication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_truststore_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truststore_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truststore_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainName_mutualTlsAuthentication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
