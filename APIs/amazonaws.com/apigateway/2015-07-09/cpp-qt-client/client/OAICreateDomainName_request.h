/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDomainName_request.h
 *
 * 
 */

#ifndef OAICreateDomainName_request_H
#define OAICreateDomainName_request_H

#include <QJsonObject>

#include "OAICreateDomainName_request_endpointConfiguration.h"
#include "OAICreateDomainName_request_mutualTlsAuthentication.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateDomainName_request_endpointConfiguration;
class OAICreateDomainName_request_mutualTlsAuthentication;

class OAICreateDomainName_request : public OAIObject {
public:
    OAICreateDomainName_request();
    OAICreateDomainName_request(QString json);
    ~OAICreateDomainName_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDomainName() const;
    void setDomainName(const QString &domain_name);
    bool is_domain_name_Set() const;
    bool is_domain_name_Valid() const;

    QString getCertificateName() const;
    void setCertificateName(const QString &certificate_name);
    bool is_certificate_name_Set() const;
    bool is_certificate_name_Valid() const;

    QString getCertificateBody() const;
    void setCertificateBody(const QString &certificate_body);
    bool is_certificate_body_Set() const;
    bool is_certificate_body_Valid() const;

    QString getCertificatePrivateKey() const;
    void setCertificatePrivateKey(const QString &certificate_private_key);
    bool is_certificate_private_key_Set() const;
    bool is_certificate_private_key_Valid() const;

    QString getCertificateChain() const;
    void setCertificateChain(const QString &certificate_chain);
    bool is_certificate_chain_Set() const;
    bool is_certificate_chain_Valid() const;

    QString getCertificateArn() const;
    void setCertificateArn(const QString &certificate_arn);
    bool is_certificate_arn_Set() const;
    bool is_certificate_arn_Valid() const;

    QString getRegionalCertificateName() const;
    void setRegionalCertificateName(const QString &regional_certificate_name);
    bool is_regional_certificate_name_Set() const;
    bool is_regional_certificate_name_Valid() const;

    QString getRegionalCertificateArn() const;
    void setRegionalCertificateArn(const QString &regional_certificate_arn);
    bool is_regional_certificate_arn_Set() const;
    bool is_regional_certificate_arn_Valid() const;

    OAICreateDomainName_request_endpointConfiguration getEndpointConfiguration() const;
    void setEndpointConfiguration(const OAICreateDomainName_request_endpointConfiguration &endpoint_configuration);
    bool is_endpoint_configuration_Set() const;
    bool is_endpoint_configuration_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getSecurityPolicy() const;
    void setSecurityPolicy(const QString &security_policy);
    bool is_security_policy_Set() const;
    bool is_security_policy_Valid() const;

    OAICreateDomainName_request_mutualTlsAuthentication getMutualTlsAuthentication() const;
    void setMutualTlsAuthentication(const OAICreateDomainName_request_mutualTlsAuthentication &mutual_tls_authentication);
    bool is_mutual_tls_authentication_Set() const;
    bool is_mutual_tls_authentication_Valid() const;

    QString getOwnershipVerificationCertificateArn() const;
    void setOwnershipVerificationCertificateArn(const QString &ownership_verification_certificate_arn);
    bool is_ownership_verification_certificate_arn_Set() const;
    bool is_ownership_verification_certificate_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_domain_name;
    bool m_domain_name_isSet;
    bool m_domain_name_isValid;

    QString m_certificate_name;
    bool m_certificate_name_isSet;
    bool m_certificate_name_isValid;

    QString m_certificate_body;
    bool m_certificate_body_isSet;
    bool m_certificate_body_isValid;

    QString m_certificate_private_key;
    bool m_certificate_private_key_isSet;
    bool m_certificate_private_key_isValid;

    QString m_certificate_chain;
    bool m_certificate_chain_isSet;
    bool m_certificate_chain_isValid;

    QString m_certificate_arn;
    bool m_certificate_arn_isSet;
    bool m_certificate_arn_isValid;

    QString m_regional_certificate_name;
    bool m_regional_certificate_name_isSet;
    bool m_regional_certificate_name_isValid;

    QString m_regional_certificate_arn;
    bool m_regional_certificate_arn_isSet;
    bool m_regional_certificate_arn_isValid;

    OAICreateDomainName_request_endpointConfiguration m_endpoint_configuration;
    bool m_endpoint_configuration_isSet;
    bool m_endpoint_configuration_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_security_policy;
    bool m_security_policy_isSet;
    bool m_security_policy_isValid;

    OAICreateDomainName_request_mutualTlsAuthentication m_mutual_tls_authentication;
    bool m_mutual_tls_authentication_isSet;
    bool m_mutual_tls_authentication_isValid;

    QString m_ownership_verification_certificate_arn;
    bool m_ownership_verification_certificate_arn_isSet;
    bool m_ownership_verification_certificate_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDomainName_request)

#endif // OAICreateDomainName_request_H
