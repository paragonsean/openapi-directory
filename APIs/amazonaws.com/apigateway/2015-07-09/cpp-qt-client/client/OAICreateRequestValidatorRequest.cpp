/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRequestValidatorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRequestValidatorRequest::OAICreateRequestValidatorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRequestValidatorRequest::OAICreateRequestValidatorRequest() {
    this->initializeModel();
}

OAICreateRequestValidatorRequest::~OAICreateRequestValidatorRequest() {}

void OAICreateRequestValidatorRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_validate_request_body_isSet = false;
    m_validate_request_body_isValid = false;

    m_validate_request_parameters_isSet = false;
    m_validate_request_parameters_isValid = false;
}

void OAICreateRequestValidatorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRequestValidatorRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_validate_request_body_isValid = ::OpenAPI::fromJsonValue(m_validate_request_body, json[QString("validateRequestBody")]);
    m_validate_request_body_isSet = !json[QString("validateRequestBody")].isNull() && m_validate_request_body_isValid;

    m_validate_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_validate_request_parameters, json[QString("validateRequestParameters")]);
    m_validate_request_parameters_isSet = !json[QString("validateRequestParameters")].isNull() && m_validate_request_parameters_isValid;
}

QString OAICreateRequestValidatorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRequestValidatorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_validate_request_body_isSet) {
        obj.insert(QString("validateRequestBody"), ::OpenAPI::toJsonValue(m_validate_request_body));
    }
    if (m_validate_request_parameters_isSet) {
        obj.insert(QString("validateRequestParameters"), ::OpenAPI::toJsonValue(m_validate_request_parameters));
    }
    return obj;
}

QString OAICreateRequestValidatorRequest::getName() const {
    return m_name;
}
void OAICreateRequestValidatorRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRequestValidatorRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRequestValidatorRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateRequestValidatorRequest::getValidateRequestBody() const {
    return m_validate_request_body;
}
void OAICreateRequestValidatorRequest::setValidateRequestBody(const bool &validate_request_body) {
    m_validate_request_body = validate_request_body;
    m_validate_request_body_isSet = true;
}

bool OAICreateRequestValidatorRequest::is_validate_request_body_Set() const{
    return m_validate_request_body_isSet;
}

bool OAICreateRequestValidatorRequest::is_validate_request_body_Valid() const{
    return m_validate_request_body_isValid;
}

bool OAICreateRequestValidatorRequest::getValidateRequestParameters() const {
    return m_validate_request_parameters;
}
void OAICreateRequestValidatorRequest::setValidateRequestParameters(const bool &validate_request_parameters) {
    m_validate_request_parameters = validate_request_parameters;
    m_validate_request_parameters_isSet = true;
}

bool OAICreateRequestValidatorRequest::is_validate_request_parameters_Set() const{
    return m_validate_request_parameters_isSet;
}

bool OAICreateRequestValidatorRequest::is_validate_request_parameters_Valid() const{
    return m_validate_request_parameters_isValid;
}

bool OAICreateRequestValidatorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_request_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_request_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRequestValidatorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
