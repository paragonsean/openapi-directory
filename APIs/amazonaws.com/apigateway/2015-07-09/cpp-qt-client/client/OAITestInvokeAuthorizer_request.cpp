/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestInvokeAuthorizer_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestInvokeAuthorizer_request::OAITestInvokeAuthorizer_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestInvokeAuthorizer_request::OAITestInvokeAuthorizer_request() {
    this->initializeModel();
}

OAITestInvokeAuthorizer_request::~OAITestInvokeAuthorizer_request() {}

void OAITestInvokeAuthorizer_request::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_multi_value_headers_isSet = false;
    m_multi_value_headers_isValid = false;

    m_path_with_query_string_isSet = false;
    m_path_with_query_string_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_stage_variables_isSet = false;
    m_stage_variables_isValid = false;

    m_additional_context_isSet = false;
    m_additional_context_isValid = false;
}

void OAITestInvokeAuthorizer_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestInvokeAuthorizer_request::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    if(json["multiValueHeaders"].isObject()){
        auto varmap = json["multiValueHeaders"].toObject().toVariantMap();
        m_multi_value_headers_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_multi_value_headers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_multi_value_headers_isSet &= !jval.isNull() && m_multi_value_headers_isValid;
                m_multi_value_headers.insert(m_multi_value_headers.end(), val, item);
            }
        }
    }

    m_path_with_query_string_isValid = ::OpenAPI::fromJsonValue(m_path_with_query_string, json[QString("pathWithQueryString")]);
    m_path_with_query_string_isSet = !json[QString("pathWithQueryString")].isNull() && m_path_with_query_string_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_stage_variables_isValid = ::OpenAPI::fromJsonValue(m_stage_variables, json[QString("stageVariables")]);
    m_stage_variables_isSet = !json[QString("stageVariables")].isNull() && m_stage_variables_isValid;

    m_additional_context_isValid = ::OpenAPI::fromJsonValue(m_additional_context, json[QString("additionalContext")]);
    m_additional_context_isSet = !json[QString("additionalContext")].isNull() && m_additional_context_isValid;
}

QString OAITestInvokeAuthorizer_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestInvokeAuthorizer_request::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_multi_value_headers.size() > 0) {
        
        obj.insert(QString("multiValueHeaders"), toJsonValue(m_multi_value_headers));
    }
    if (m_path_with_query_string_isSet) {
        obj.insert(QString("pathWithQueryString"), ::OpenAPI::toJsonValue(m_path_with_query_string));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_stage_variables.size() > 0) {
        obj.insert(QString("stageVariables"), ::OpenAPI::toJsonValue(m_stage_variables));
    }
    if (m_additional_context.size() > 0) {
        obj.insert(QString("additionalContext"), ::OpenAPI::toJsonValue(m_additional_context));
    }
    return obj;
}

QMap<QString, QString> OAITestInvokeAuthorizer_request::getHeaders() const {
    return m_headers;
}
void OAITestInvokeAuthorizer_request::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAITestInvokeAuthorizer_request::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAITestInvokeAuthorizer_request::is_headers_Valid() const{
    return m_headers_isValid;
}

QMap<QString, QList> OAITestInvokeAuthorizer_request::getMultiValueHeaders() const {
    return m_multi_value_headers;
}
void OAITestInvokeAuthorizer_request::setMultiValueHeaders(const QMap<QString, QList> &multi_value_headers) {
    m_multi_value_headers = multi_value_headers;
    m_multi_value_headers_isSet = true;
}

bool OAITestInvokeAuthorizer_request::is_multi_value_headers_Set() const{
    return m_multi_value_headers_isSet;
}

bool OAITestInvokeAuthorizer_request::is_multi_value_headers_Valid() const{
    return m_multi_value_headers_isValid;
}

QString OAITestInvokeAuthorizer_request::getPathWithQueryString() const {
    return m_path_with_query_string;
}
void OAITestInvokeAuthorizer_request::setPathWithQueryString(const QString &path_with_query_string) {
    m_path_with_query_string = path_with_query_string;
    m_path_with_query_string_isSet = true;
}

bool OAITestInvokeAuthorizer_request::is_path_with_query_string_Set() const{
    return m_path_with_query_string_isSet;
}

bool OAITestInvokeAuthorizer_request::is_path_with_query_string_Valid() const{
    return m_path_with_query_string_isValid;
}

QString OAITestInvokeAuthorizer_request::getBody() const {
    return m_body;
}
void OAITestInvokeAuthorizer_request::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITestInvokeAuthorizer_request::is_body_Set() const{
    return m_body_isSet;
}

bool OAITestInvokeAuthorizer_request::is_body_Valid() const{
    return m_body_isValid;
}

QMap<QString, QString> OAITestInvokeAuthorizer_request::getStageVariables() const {
    return m_stage_variables;
}
void OAITestInvokeAuthorizer_request::setStageVariables(const QMap<QString, QString> &stage_variables) {
    m_stage_variables = stage_variables;
    m_stage_variables_isSet = true;
}

bool OAITestInvokeAuthorizer_request::is_stage_variables_Set() const{
    return m_stage_variables_isSet;
}

bool OAITestInvokeAuthorizer_request::is_stage_variables_Valid() const{
    return m_stage_variables_isValid;
}

QMap<QString, QString> OAITestInvokeAuthorizer_request::getAdditionalContext() const {
    return m_additional_context;
}
void OAITestInvokeAuthorizer_request::setAdditionalContext(const QMap<QString, QString> &additional_context) {
    m_additional_context = additional_context;
    m_additional_context_isSet = true;
}

bool OAITestInvokeAuthorizer_request::is_additional_context_Set() const{
    return m_additional_context_isSet;
}

bool OAITestInvokeAuthorizer_request::is_additional_context_Valid() const{
    return m_additional_context_isValid;
}

bool OAITestInvokeAuthorizer_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_value_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_with_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestInvokeAuthorizer_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
