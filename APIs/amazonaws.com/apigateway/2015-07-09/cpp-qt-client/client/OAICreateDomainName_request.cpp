/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDomainName_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDomainName_request::OAICreateDomainName_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDomainName_request::OAICreateDomainName_request() {
    this->initializeModel();
}

OAICreateDomainName_request::~OAICreateDomainName_request() {}

void OAICreateDomainName_request::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_certificate_name_isSet = false;
    m_certificate_name_isValid = false;

    m_certificate_body_isSet = false;
    m_certificate_body_isValid = false;

    m_certificate_private_key_isSet = false;
    m_certificate_private_key_isValid = false;

    m_certificate_chain_isSet = false;
    m_certificate_chain_isValid = false;

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_regional_certificate_name_isSet = false;
    m_regional_certificate_name_isValid = false;

    m_regional_certificate_arn_isSet = false;
    m_regional_certificate_arn_isValid = false;

    m_endpoint_configuration_isSet = false;
    m_endpoint_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_security_policy_isSet = false;
    m_security_policy_isValid = false;

    m_mutual_tls_authentication_isSet = false;
    m_mutual_tls_authentication_isValid = false;

    m_ownership_verification_certificate_arn_isSet = false;
    m_ownership_verification_certificate_arn_isValid = false;
}

void OAICreateDomainName_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDomainName_request::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_certificate_name_isValid = ::OpenAPI::fromJsonValue(m_certificate_name, json[QString("certificateName")]);
    m_certificate_name_isSet = !json[QString("certificateName")].isNull() && m_certificate_name_isValid;

    m_certificate_body_isValid = ::OpenAPI::fromJsonValue(m_certificate_body, json[QString("certificateBody")]);
    m_certificate_body_isSet = !json[QString("certificateBody")].isNull() && m_certificate_body_isValid;

    m_certificate_private_key_isValid = ::OpenAPI::fromJsonValue(m_certificate_private_key, json[QString("certificatePrivateKey")]);
    m_certificate_private_key_isSet = !json[QString("certificatePrivateKey")].isNull() && m_certificate_private_key_isValid;

    m_certificate_chain_isValid = ::OpenAPI::fromJsonValue(m_certificate_chain, json[QString("certificateChain")]);
    m_certificate_chain_isSet = !json[QString("certificateChain")].isNull() && m_certificate_chain_isValid;

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("certificateArn")]);
    m_certificate_arn_isSet = !json[QString("certificateArn")].isNull() && m_certificate_arn_isValid;

    m_regional_certificate_name_isValid = ::OpenAPI::fromJsonValue(m_regional_certificate_name, json[QString("regionalCertificateName")]);
    m_regional_certificate_name_isSet = !json[QString("regionalCertificateName")].isNull() && m_regional_certificate_name_isValid;

    m_regional_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_regional_certificate_arn, json[QString("regionalCertificateArn")]);
    m_regional_certificate_arn_isSet = !json[QString("regionalCertificateArn")].isNull() && m_regional_certificate_arn_isValid;

    m_endpoint_configuration_isValid = ::OpenAPI::fromJsonValue(m_endpoint_configuration, json[QString("endpointConfiguration")]);
    m_endpoint_configuration_isSet = !json[QString("endpointConfiguration")].isNull() && m_endpoint_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_security_policy_isValid = ::OpenAPI::fromJsonValue(m_security_policy, json[QString("securityPolicy")]);
    m_security_policy_isSet = !json[QString("securityPolicy")].isNull() && m_security_policy_isValid;

    m_mutual_tls_authentication_isValid = ::OpenAPI::fromJsonValue(m_mutual_tls_authentication, json[QString("mutualTlsAuthentication")]);
    m_mutual_tls_authentication_isSet = !json[QString("mutualTlsAuthentication")].isNull() && m_mutual_tls_authentication_isValid;

    m_ownership_verification_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_ownership_verification_certificate_arn, json[QString("ownershipVerificationCertificateArn")]);
    m_ownership_verification_certificate_arn_isSet = !json[QString("ownershipVerificationCertificateArn")].isNull() && m_ownership_verification_certificate_arn_isValid;
}

QString OAICreateDomainName_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDomainName_request::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_certificate_name_isSet) {
        obj.insert(QString("certificateName"), ::OpenAPI::toJsonValue(m_certificate_name));
    }
    if (m_certificate_body_isSet) {
        obj.insert(QString("certificateBody"), ::OpenAPI::toJsonValue(m_certificate_body));
    }
    if (m_certificate_private_key_isSet) {
        obj.insert(QString("certificatePrivateKey"), ::OpenAPI::toJsonValue(m_certificate_private_key));
    }
    if (m_certificate_chain_isSet) {
        obj.insert(QString("certificateChain"), ::OpenAPI::toJsonValue(m_certificate_chain));
    }
    if (m_certificate_arn_isSet) {
        obj.insert(QString("certificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_regional_certificate_name_isSet) {
        obj.insert(QString("regionalCertificateName"), ::OpenAPI::toJsonValue(m_regional_certificate_name));
    }
    if (m_regional_certificate_arn_isSet) {
        obj.insert(QString("regionalCertificateArn"), ::OpenAPI::toJsonValue(m_regional_certificate_arn));
    }
    if (m_endpoint_configuration.isSet()) {
        obj.insert(QString("endpointConfiguration"), ::OpenAPI::toJsonValue(m_endpoint_configuration));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_security_policy_isSet) {
        obj.insert(QString("securityPolicy"), ::OpenAPI::toJsonValue(m_security_policy));
    }
    if (m_mutual_tls_authentication.isSet()) {
        obj.insert(QString("mutualTlsAuthentication"), ::OpenAPI::toJsonValue(m_mutual_tls_authentication));
    }
    if (m_ownership_verification_certificate_arn_isSet) {
        obj.insert(QString("ownershipVerificationCertificateArn"), ::OpenAPI::toJsonValue(m_ownership_verification_certificate_arn));
    }
    return obj;
}

QString OAICreateDomainName_request::getDomainName() const {
    return m_domain_name;
}
void OAICreateDomainName_request::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAICreateDomainName_request::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAICreateDomainName_request::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAICreateDomainName_request::getCertificateName() const {
    return m_certificate_name;
}
void OAICreateDomainName_request::setCertificateName(const QString &certificate_name) {
    m_certificate_name = certificate_name;
    m_certificate_name_isSet = true;
}

bool OAICreateDomainName_request::is_certificate_name_Set() const{
    return m_certificate_name_isSet;
}

bool OAICreateDomainName_request::is_certificate_name_Valid() const{
    return m_certificate_name_isValid;
}

QString OAICreateDomainName_request::getCertificateBody() const {
    return m_certificate_body;
}
void OAICreateDomainName_request::setCertificateBody(const QString &certificate_body) {
    m_certificate_body = certificate_body;
    m_certificate_body_isSet = true;
}

bool OAICreateDomainName_request::is_certificate_body_Set() const{
    return m_certificate_body_isSet;
}

bool OAICreateDomainName_request::is_certificate_body_Valid() const{
    return m_certificate_body_isValid;
}

QString OAICreateDomainName_request::getCertificatePrivateKey() const {
    return m_certificate_private_key;
}
void OAICreateDomainName_request::setCertificatePrivateKey(const QString &certificate_private_key) {
    m_certificate_private_key = certificate_private_key;
    m_certificate_private_key_isSet = true;
}

bool OAICreateDomainName_request::is_certificate_private_key_Set() const{
    return m_certificate_private_key_isSet;
}

bool OAICreateDomainName_request::is_certificate_private_key_Valid() const{
    return m_certificate_private_key_isValid;
}

QString OAICreateDomainName_request::getCertificateChain() const {
    return m_certificate_chain;
}
void OAICreateDomainName_request::setCertificateChain(const QString &certificate_chain) {
    m_certificate_chain = certificate_chain;
    m_certificate_chain_isSet = true;
}

bool OAICreateDomainName_request::is_certificate_chain_Set() const{
    return m_certificate_chain_isSet;
}

bool OAICreateDomainName_request::is_certificate_chain_Valid() const{
    return m_certificate_chain_isValid;
}

QString OAICreateDomainName_request::getCertificateArn() const {
    return m_certificate_arn;
}
void OAICreateDomainName_request::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAICreateDomainName_request::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAICreateDomainName_request::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

QString OAICreateDomainName_request::getRegionalCertificateName() const {
    return m_regional_certificate_name;
}
void OAICreateDomainName_request::setRegionalCertificateName(const QString &regional_certificate_name) {
    m_regional_certificate_name = regional_certificate_name;
    m_regional_certificate_name_isSet = true;
}

bool OAICreateDomainName_request::is_regional_certificate_name_Set() const{
    return m_regional_certificate_name_isSet;
}

bool OAICreateDomainName_request::is_regional_certificate_name_Valid() const{
    return m_regional_certificate_name_isValid;
}

QString OAICreateDomainName_request::getRegionalCertificateArn() const {
    return m_regional_certificate_arn;
}
void OAICreateDomainName_request::setRegionalCertificateArn(const QString &regional_certificate_arn) {
    m_regional_certificate_arn = regional_certificate_arn;
    m_regional_certificate_arn_isSet = true;
}

bool OAICreateDomainName_request::is_regional_certificate_arn_Set() const{
    return m_regional_certificate_arn_isSet;
}

bool OAICreateDomainName_request::is_regional_certificate_arn_Valid() const{
    return m_regional_certificate_arn_isValid;
}

OAICreateDomainName_request_endpointConfiguration OAICreateDomainName_request::getEndpointConfiguration() const {
    return m_endpoint_configuration;
}
void OAICreateDomainName_request::setEndpointConfiguration(const OAICreateDomainName_request_endpointConfiguration &endpoint_configuration) {
    m_endpoint_configuration = endpoint_configuration;
    m_endpoint_configuration_isSet = true;
}

bool OAICreateDomainName_request::is_endpoint_configuration_Set() const{
    return m_endpoint_configuration_isSet;
}

bool OAICreateDomainName_request::is_endpoint_configuration_Valid() const{
    return m_endpoint_configuration_isValid;
}

QMap<QString, QString> OAICreateDomainName_request::getTags() const {
    return m_tags;
}
void OAICreateDomainName_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDomainName_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDomainName_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateDomainName_request::getSecurityPolicy() const {
    return m_security_policy;
}
void OAICreateDomainName_request::setSecurityPolicy(const QString &security_policy) {
    m_security_policy = security_policy;
    m_security_policy_isSet = true;
}

bool OAICreateDomainName_request::is_security_policy_Set() const{
    return m_security_policy_isSet;
}

bool OAICreateDomainName_request::is_security_policy_Valid() const{
    return m_security_policy_isValid;
}

OAICreateDomainName_request_mutualTlsAuthentication OAICreateDomainName_request::getMutualTlsAuthentication() const {
    return m_mutual_tls_authentication;
}
void OAICreateDomainName_request::setMutualTlsAuthentication(const OAICreateDomainName_request_mutualTlsAuthentication &mutual_tls_authentication) {
    m_mutual_tls_authentication = mutual_tls_authentication;
    m_mutual_tls_authentication_isSet = true;
}

bool OAICreateDomainName_request::is_mutual_tls_authentication_Set() const{
    return m_mutual_tls_authentication_isSet;
}

bool OAICreateDomainName_request::is_mutual_tls_authentication_Valid() const{
    return m_mutual_tls_authentication_isValid;
}

QString OAICreateDomainName_request::getOwnershipVerificationCertificateArn() const {
    return m_ownership_verification_certificate_arn;
}
void OAICreateDomainName_request::setOwnershipVerificationCertificateArn(const QString &ownership_verification_certificate_arn) {
    m_ownership_verification_certificate_arn = ownership_verification_certificate_arn;
    m_ownership_verification_certificate_arn_isSet = true;
}

bool OAICreateDomainName_request::is_ownership_verification_certificate_arn_Set() const{
    return m_ownership_verification_certificate_arn_isSet;
}

bool OAICreateDomainName_request::is_ownership_verification_certificate_arn_Valid() const{
    return m_ownership_verification_certificate_arn_isValid;
}

bool OAICreateDomainName_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_certificate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutual_tls_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_verification_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDomainName_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
