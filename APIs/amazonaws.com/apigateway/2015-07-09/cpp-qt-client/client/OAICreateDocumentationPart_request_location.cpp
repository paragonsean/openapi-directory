/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDocumentationPart_request_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDocumentationPart_request_location::OAICreateDocumentationPart_request_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDocumentationPart_request_location::OAICreateDocumentationPart_request_location() {
    this->initializeModel();
}

OAICreateDocumentationPart_request_location::~OAICreateDocumentationPart_request_location() {}

void OAICreateDocumentationPart_request_location::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateDocumentationPart_request_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDocumentationPart_request_location::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICreateDocumentationPart_request_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDocumentationPart_request_location::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIDocumentationPartType OAICreateDocumentationPart_request_location::getType() const {
    return m_type;
}
void OAICreateDocumentationPart_request_location::setType(const OAIDocumentationPartType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateDocumentationPart_request_location::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateDocumentationPart_request_location::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateDocumentationPart_request_location::getPath() const {
    return m_path;
}
void OAICreateDocumentationPart_request_location::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICreateDocumentationPart_request_location::is_path_Set() const{
    return m_path_isSet;
}

bool OAICreateDocumentationPart_request_location::is_path_Valid() const{
    return m_path_isValid;
}

QString OAICreateDocumentationPart_request_location::getMethod() const {
    return m_method;
}
void OAICreateDocumentationPart_request_location::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAICreateDocumentationPart_request_location::is_method_Set() const{
    return m_method_isSet;
}

bool OAICreateDocumentationPart_request_location::is_method_Valid() const{
    return m_method_isValid;
}

QString OAICreateDocumentationPart_request_location::getStatusCode() const {
    return m_status_code;
}
void OAICreateDocumentationPart_request_location::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAICreateDocumentationPart_request_location::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAICreateDocumentationPart_request_location::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAICreateDocumentationPart_request_location::getName() const {
    return m_name;
}
void OAICreateDocumentationPart_request_location::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDocumentationPart_request_location::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDocumentationPart_request_location::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateDocumentationPart_request_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDocumentationPart_request_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
