/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestInvokeAuthorizerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestInvokeAuthorizerResponse::OAITestInvokeAuthorizerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestInvokeAuthorizerResponse::OAITestInvokeAuthorizerResponse() {
    this->initializeModel();
}

OAITestInvokeAuthorizerResponse::~OAITestInvokeAuthorizerResponse() {}

void OAITestInvokeAuthorizerResponse::initializeModel() {

    m_client_status_isSet = false;
    m_client_status_isValid = false;

    m_log_isSet = false;
    m_log_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_claims_isSet = false;
    m_claims_isValid = false;
}

void OAITestInvokeAuthorizerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestInvokeAuthorizerResponse::fromJsonObject(QJsonObject json) {

    m_client_status_isValid = ::OpenAPI::fromJsonValue(m_client_status, json[QString("clientStatus")]);
    m_client_status_isSet = !json[QString("clientStatus")].isNull() && m_client_status_isValid;

    m_log_isValid = ::OpenAPI::fromJsonValue(m_log, json[QString("log")]);
    m_log_isSet = !json[QString("log")].isNull() && m_log_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("latency")]);
    m_latency_isSet = !json[QString("latency")].isNull() && m_latency_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;
}

QString OAITestInvokeAuthorizerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestInvokeAuthorizerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_client_status_isSet) {
        obj.insert(QString("clientStatus"), ::OpenAPI::toJsonValue(m_client_status));
    }
    if (m_log_isSet) {
        obj.insert(QString("log"), ::OpenAPI::toJsonValue(m_log));
    }
    if (m_latency_isSet) {
        obj.insert(QString("latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_authorization.isSet()) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_claims.isSet()) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    return obj;
}

qint32 OAITestInvokeAuthorizerResponse::getClientStatus() const {
    return m_client_status;
}
void OAITestInvokeAuthorizerResponse::setClientStatus(const qint32 &client_status) {
    m_client_status = client_status;
    m_client_status_isSet = true;
}

bool OAITestInvokeAuthorizerResponse::is_client_status_Set() const{
    return m_client_status_isSet;
}

bool OAITestInvokeAuthorizerResponse::is_client_status_Valid() const{
    return m_client_status_isValid;
}

QString OAITestInvokeAuthorizerResponse::getLog() const {
    return m_log;
}
void OAITestInvokeAuthorizerResponse::setLog(const QString &log) {
    m_log = log;
    m_log_isSet = true;
}

bool OAITestInvokeAuthorizerResponse::is_log_Set() const{
    return m_log_isSet;
}

bool OAITestInvokeAuthorizerResponse::is_log_Valid() const{
    return m_log_isValid;
}

qint32 OAITestInvokeAuthorizerResponse::getLatency() const {
    return m_latency;
}
void OAITestInvokeAuthorizerResponse::setLatency(const qint32 &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAITestInvokeAuthorizerResponse::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAITestInvokeAuthorizerResponse::is_latency_Valid() const{
    return m_latency_isValid;
}

QString OAITestInvokeAuthorizerResponse::getPrincipalId() const {
    return m_principal_id;
}
void OAITestInvokeAuthorizerResponse::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAITestInvokeAuthorizerResponse::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAITestInvokeAuthorizerResponse::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAITestInvokeAuthorizerResponse::getPolicy() const {
    return m_policy;
}
void OAITestInvokeAuthorizerResponse::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAITestInvokeAuthorizerResponse::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAITestInvokeAuthorizerResponse::is_policy_Valid() const{
    return m_policy_isValid;
}

QMap OAITestInvokeAuthorizerResponse::getAuthorization() const {
    return m_authorization;
}
void OAITestInvokeAuthorizerResponse::setAuthorization(const QMap &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAITestInvokeAuthorizerResponse::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAITestInvokeAuthorizerResponse::is_authorization_Valid() const{
    return m_authorization_isValid;
}

QMap OAITestInvokeAuthorizerResponse::getClaims() const {
    return m_claims;
}
void OAITestInvokeAuthorizerResponse::setClaims(const QMap &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAITestInvokeAuthorizerResponse::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAITestInvokeAuthorizerResponse::is_claims_Valid() const{
    return m_claims_isValid;
}

bool OAITestInvokeAuthorizerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_claims.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestInvokeAuthorizerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
