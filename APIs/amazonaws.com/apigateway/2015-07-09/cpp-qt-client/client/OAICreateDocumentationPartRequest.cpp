/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDocumentationPartRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDocumentationPartRequest::OAICreateDocumentationPartRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDocumentationPartRequest::OAICreateDocumentationPartRequest() {
    this->initializeModel();
}

OAICreateDocumentationPartRequest::~OAICreateDocumentationPartRequest() {}

void OAICreateDocumentationPartRequest::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAICreateDocumentationPartRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDocumentationPartRequest::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAICreateDocumentationPartRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDocumentationPartRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAICreateDocumentationPartRequest_location OAICreateDocumentationPartRequest::getLocation() const {
    return m_location;
}
void OAICreateDocumentationPartRequest::setLocation(const OAICreateDocumentationPartRequest_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICreateDocumentationPartRequest::is_location_Set() const{
    return m_location_isSet;
}

bool OAICreateDocumentationPartRequest::is_location_Valid() const{
    return m_location_isValid;
}

QJsonValue OAICreateDocumentationPartRequest::getProperties() const {
    return m_properties;
}
void OAICreateDocumentationPartRequest::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreateDocumentationPartRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreateDocumentationPartRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAICreateDocumentationPartRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDocumentationPartRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_properties_isValid && true;
}

} // namespace OpenAPI
