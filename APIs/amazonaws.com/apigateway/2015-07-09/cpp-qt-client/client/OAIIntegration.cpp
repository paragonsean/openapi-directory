/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegration::OAIIntegration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegration::OAIIntegration() {
    this->initializeModel();
}

OAIIntegration::~OAIIntegration() {}

void OAIIntegration::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_request_parameters_isSet = false;
    m_request_parameters_isValid = false;

    m_request_templates_isSet = false;
    m_request_templates_isValid = false;

    m_passthrough_behavior_isSet = false;
    m_passthrough_behavior_isValid = false;

    m_content_handling_isSet = false;
    m_content_handling_isValid = false;

    m_timeout_in_millis_isSet = false;
    m_timeout_in_millis_isValid = false;

    m_cache_namespace_isSet = false;
    m_cache_namespace_isValid = false;

    m_cache_key_parameters_isSet = false;
    m_cache_key_parameters_isValid = false;

    m_integration_responses_isSet = false;
    m_integration_responses_isValid = false;

    m_tls_config_isSet = false;
    m_tls_config_isValid = false;
}

void OAIIntegration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegration::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("httpMethod")]);
    m_http_method_isSet = !json[QString("httpMethod")].isNull() && m_http_method_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_request_parameters, json[QString("requestParameters")]);
    m_request_parameters_isSet = !json[QString("requestParameters")].isNull() && m_request_parameters_isValid;

    m_request_templates_isValid = ::OpenAPI::fromJsonValue(m_request_templates, json[QString("requestTemplates")]);
    m_request_templates_isSet = !json[QString("requestTemplates")].isNull() && m_request_templates_isValid;

    m_passthrough_behavior_isValid = ::OpenAPI::fromJsonValue(m_passthrough_behavior, json[QString("passthroughBehavior")]);
    m_passthrough_behavior_isSet = !json[QString("passthroughBehavior")].isNull() && m_passthrough_behavior_isValid;

    m_content_handling_isValid = ::OpenAPI::fromJsonValue(m_content_handling, json[QString("contentHandling")]);
    m_content_handling_isSet = !json[QString("contentHandling")].isNull() && m_content_handling_isValid;

    m_timeout_in_millis_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_millis, json[QString("timeoutInMillis")]);
    m_timeout_in_millis_isSet = !json[QString("timeoutInMillis")].isNull() && m_timeout_in_millis_isValid;

    m_cache_namespace_isValid = ::OpenAPI::fromJsonValue(m_cache_namespace, json[QString("cacheNamespace")]);
    m_cache_namespace_isSet = !json[QString("cacheNamespace")].isNull() && m_cache_namespace_isValid;

    m_cache_key_parameters_isValid = ::OpenAPI::fromJsonValue(m_cache_key_parameters, json[QString("cacheKeyParameters")]);
    m_cache_key_parameters_isSet = !json[QString("cacheKeyParameters")].isNull() && m_cache_key_parameters_isValid;

    m_integration_responses_isValid = ::OpenAPI::fromJsonValue(m_integration_responses, json[QString("integrationResponses")]);
    m_integration_responses_isSet = !json[QString("integrationResponses")].isNull() && m_integration_responses_isValid;

    m_tls_config_isValid = ::OpenAPI::fromJsonValue(m_tls_config, json[QString("tlsConfig")]);
    m_tls_config_isSet = !json[QString("tlsConfig")].isNull() && m_tls_config_isValid;
}

QString OAIIntegration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegration::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("httpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_connection_type.isSet()) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_credentials_isSet) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_request_parameters.isSet()) {
        obj.insert(QString("requestParameters"), ::OpenAPI::toJsonValue(m_request_parameters));
    }
    if (m_request_templates.isSet()) {
        obj.insert(QString("requestTemplates"), ::OpenAPI::toJsonValue(m_request_templates));
    }
    if (m_passthrough_behavior_isSet) {
        obj.insert(QString("passthroughBehavior"), ::OpenAPI::toJsonValue(m_passthrough_behavior));
    }
    if (m_content_handling.isSet()) {
        obj.insert(QString("contentHandling"), ::OpenAPI::toJsonValue(m_content_handling));
    }
    if (m_timeout_in_millis_isSet) {
        obj.insert(QString("timeoutInMillis"), ::OpenAPI::toJsonValue(m_timeout_in_millis));
    }
    if (m_cache_namespace_isSet) {
        obj.insert(QString("cacheNamespace"), ::OpenAPI::toJsonValue(m_cache_namespace));
    }
    if (m_cache_key_parameters.isSet()) {
        obj.insert(QString("cacheKeyParameters"), ::OpenAPI::toJsonValue(m_cache_key_parameters));
    }
    if (m_integration_responses.isSet()) {
        obj.insert(QString("integrationResponses"), ::OpenAPI::toJsonValue(m_integration_responses));
    }
    if (m_tls_config.isSet()) {
        obj.insert(QString("tlsConfig"), ::OpenAPI::toJsonValue(m_tls_config));
    }
    return obj;
}

OAIIntegrationType OAIIntegration::getType() const {
    return m_type;
}
void OAIIntegration::setType(const OAIIntegrationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIntegration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIntegration::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIIntegration::getHttpMethod() const {
    return m_http_method;
}
void OAIIntegration::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIIntegration::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIIntegration::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QString OAIIntegration::getUri() const {
    return m_uri;
}
void OAIIntegration::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIIntegration::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIIntegration::is_uri_Valid() const{
    return m_uri_isValid;
}

OAIConnectionType OAIIntegration::getConnectionType() const {
    return m_connection_type;
}
void OAIIntegration::setConnectionType(const OAIConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIIntegration::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIIntegration::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAIIntegration::getConnectionId() const {
    return m_connection_id;
}
void OAIIntegration::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIIntegration::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIIntegration::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QString OAIIntegration::getCredentials() const {
    return m_credentials;
}
void OAIIntegration::setCredentials(const QString &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIIntegration::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIIntegration::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QMap OAIIntegration::getRequestParameters() const {
    return m_request_parameters;
}
void OAIIntegration::setRequestParameters(const QMap &request_parameters) {
    m_request_parameters = request_parameters;
    m_request_parameters_isSet = true;
}

bool OAIIntegration::is_request_parameters_Set() const{
    return m_request_parameters_isSet;
}

bool OAIIntegration::is_request_parameters_Valid() const{
    return m_request_parameters_isValid;
}

QMap OAIIntegration::getRequestTemplates() const {
    return m_request_templates;
}
void OAIIntegration::setRequestTemplates(const QMap &request_templates) {
    m_request_templates = request_templates;
    m_request_templates_isSet = true;
}

bool OAIIntegration::is_request_templates_Set() const{
    return m_request_templates_isSet;
}

bool OAIIntegration::is_request_templates_Valid() const{
    return m_request_templates_isValid;
}

QString OAIIntegration::getPassthroughBehavior() const {
    return m_passthrough_behavior;
}
void OAIIntegration::setPassthroughBehavior(const QString &passthrough_behavior) {
    m_passthrough_behavior = passthrough_behavior;
    m_passthrough_behavior_isSet = true;
}

bool OAIIntegration::is_passthrough_behavior_Set() const{
    return m_passthrough_behavior_isSet;
}

bool OAIIntegration::is_passthrough_behavior_Valid() const{
    return m_passthrough_behavior_isValid;
}

OAIContentHandlingStrategy OAIIntegration::getContentHandling() const {
    return m_content_handling;
}
void OAIIntegration::setContentHandling(const OAIContentHandlingStrategy &content_handling) {
    m_content_handling = content_handling;
    m_content_handling_isSet = true;
}

bool OAIIntegration::is_content_handling_Set() const{
    return m_content_handling_isSet;
}

bool OAIIntegration::is_content_handling_Valid() const{
    return m_content_handling_isValid;
}

qint32 OAIIntegration::getTimeoutInMillis() const {
    return m_timeout_in_millis;
}
void OAIIntegration::setTimeoutInMillis(const qint32 &timeout_in_millis) {
    m_timeout_in_millis = timeout_in_millis;
    m_timeout_in_millis_isSet = true;
}

bool OAIIntegration::is_timeout_in_millis_Set() const{
    return m_timeout_in_millis_isSet;
}

bool OAIIntegration::is_timeout_in_millis_Valid() const{
    return m_timeout_in_millis_isValid;
}

QString OAIIntegration::getCacheNamespace() const {
    return m_cache_namespace;
}
void OAIIntegration::setCacheNamespace(const QString &cache_namespace) {
    m_cache_namespace = cache_namespace;
    m_cache_namespace_isSet = true;
}

bool OAIIntegration::is_cache_namespace_Set() const{
    return m_cache_namespace_isSet;
}

bool OAIIntegration::is_cache_namespace_Valid() const{
    return m_cache_namespace_isValid;
}

QList OAIIntegration::getCacheKeyParameters() const {
    return m_cache_key_parameters;
}
void OAIIntegration::setCacheKeyParameters(const QList &cache_key_parameters) {
    m_cache_key_parameters = cache_key_parameters;
    m_cache_key_parameters_isSet = true;
}

bool OAIIntegration::is_cache_key_parameters_Set() const{
    return m_cache_key_parameters_isSet;
}

bool OAIIntegration::is_cache_key_parameters_Valid() const{
    return m_cache_key_parameters_isValid;
}

QMap OAIIntegration::getIntegrationResponses() const {
    return m_integration_responses;
}
void OAIIntegration::setIntegrationResponses(const QMap &integration_responses) {
    m_integration_responses = integration_responses;
    m_integration_responses_isSet = true;
}

bool OAIIntegration::is_integration_responses_Set() const{
    return m_integration_responses_isSet;
}

bool OAIIntegration::is_integration_responses_Valid() const{
    return m_integration_responses_isValid;
}

OAIIntegration_tlsConfig OAIIntegration::getTlsConfig() const {
    return m_tls_config;
}
void OAIIntegration::setTlsConfig(const OAIIntegration_tlsConfig &tls_config) {
    m_tls_config = tls_config;
    m_tls_config_isSet = true;
}

bool OAIIntegration::is_tls_config_Set() const{
    return m_tls_config_isSet;
}

bool OAIIntegration::is_tls_config_Valid() const{
    return m_tls_config_isValid;
}

bool OAIIntegration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_handling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_key_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
