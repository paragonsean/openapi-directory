/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchOperation::OAIPatchOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchOperation::OAIPatchOperation() {
    this->initializeModel();
}

OAIPatchOperation::~OAIPatchOperation() {}

void OAIPatchOperation::initializeModel() {

    m_op_isSet = false;
    m_op_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;
}

void OAIPatchOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchOperation::fromJsonObject(QJsonObject json) {

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;
}

QString OAIPatchOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_op.isSet()) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    return obj;
}

OAIOp OAIPatchOperation::getOp() const {
    return m_op;
}
void OAIPatchOperation::setOp(const OAIOp &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAIPatchOperation::is_op_Set() const{
    return m_op_isSet;
}

bool OAIPatchOperation::is_op_Valid() const{
    return m_op_isValid;
}

QString OAIPatchOperation::getPath() const {
    return m_path;
}
void OAIPatchOperation::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPatchOperation::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPatchOperation::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPatchOperation::getValue() const {
    return m_value;
}
void OAIPatchOperation::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPatchOperation::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPatchOperation::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIPatchOperation::getFrom() const {
    return m_from;
}
void OAIPatchOperation::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIPatchOperation::is_from_Set() const{
    return m_from_isSet;
}

bool OAIPatchOperation::is_from_Valid() const{
    return m_from_isValid;
}

bool OAIPatchOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_op.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
