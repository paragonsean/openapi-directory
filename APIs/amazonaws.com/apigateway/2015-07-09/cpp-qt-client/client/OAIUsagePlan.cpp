/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsagePlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsagePlan::OAIUsagePlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsagePlan::OAIUsagePlan() {
    this->initializeModel();
}

OAIUsagePlan::~OAIUsagePlan() {}

void OAIUsagePlan::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_api_stages_isSet = false;
    m_api_stages_isValid = false;

    m_throttle_isSet = false;
    m_throttle_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUsagePlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsagePlan::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_api_stages_isValid = ::OpenAPI::fromJsonValue(m_api_stages, json[QString("apiStages")]);
    m_api_stages_isSet = !json[QString("apiStages")].isNull() && m_api_stages_isValid;

    m_throttle_isValid = ::OpenAPI::fromJsonValue(m_throttle, json[QString("throttle")]);
    m_throttle_isSet = !json[QString("throttle")].isNull() && m_throttle_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("productCode")]);
    m_product_code_isSet = !json[QString("productCode")].isNull() && m_product_code_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIUsagePlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsagePlan::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_api_stages.isSet()) {
        obj.insert(QString("apiStages"), ::OpenAPI::toJsonValue(m_api_stages));
    }
    if (m_throttle.isSet()) {
        obj.insert(QString("throttle"), ::OpenAPI::toJsonValue(m_throttle));
    }
    if (m_quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_product_code_isSet) {
        obj.insert(QString("productCode"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIUsagePlan::getId() const {
    return m_id;
}
void OAIUsagePlan::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUsagePlan::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUsagePlan::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUsagePlan::getName() const {
    return m_name;
}
void OAIUsagePlan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUsagePlan::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUsagePlan::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUsagePlan::getDescription() const {
    return m_description;
}
void OAIUsagePlan::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUsagePlan::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUsagePlan::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUsagePlan::getApiStages() const {
    return m_api_stages;
}
void OAIUsagePlan::setApiStages(const QList &api_stages) {
    m_api_stages = api_stages;
    m_api_stages_isSet = true;
}

bool OAIUsagePlan::is_api_stages_Set() const{
    return m_api_stages_isSet;
}

bool OAIUsagePlan::is_api_stages_Valid() const{
    return m_api_stages_isValid;
}

OAIUsagePlan_throttle OAIUsagePlan::getThrottle() const {
    return m_throttle;
}
void OAIUsagePlan::setThrottle(const OAIUsagePlan_throttle &throttle) {
    m_throttle = throttle;
    m_throttle_isSet = true;
}

bool OAIUsagePlan::is_throttle_Set() const{
    return m_throttle_isSet;
}

bool OAIUsagePlan::is_throttle_Valid() const{
    return m_throttle_isValid;
}

OAIUsagePlan_quota OAIUsagePlan::getQuota() const {
    return m_quota;
}
void OAIUsagePlan::setQuota(const OAIUsagePlan_quota &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIUsagePlan::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIUsagePlan::is_quota_Valid() const{
    return m_quota_isValid;
}

QString OAIUsagePlan::getProductCode() const {
    return m_product_code;
}
void OAIUsagePlan::setProductCode(const QString &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAIUsagePlan::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAIUsagePlan::is_product_code_Valid() const{
    return m_product_code_isValid;
}

QMap OAIUsagePlan::getTags() const {
    return m_tags;
}
void OAIUsagePlan::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUsagePlan::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUsagePlan::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUsagePlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_stages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsagePlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
