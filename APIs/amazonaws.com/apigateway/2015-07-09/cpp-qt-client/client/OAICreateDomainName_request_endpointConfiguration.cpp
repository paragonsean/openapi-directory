/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDomainName_request_endpointConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDomainName_request_endpointConfiguration::OAICreateDomainName_request_endpointConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDomainName_request_endpointConfiguration::OAICreateDomainName_request_endpointConfiguration() {
    this->initializeModel();
}

OAICreateDomainName_request_endpointConfiguration::~OAICreateDomainName_request_endpointConfiguration() {}

void OAICreateDomainName_request_endpointConfiguration::initializeModel() {

    m_types_isSet = false;
    m_types_isValid = false;

    m_vpc_endpoint_ids_isSet = false;
    m_vpc_endpoint_ids_isValid = false;
}

void OAICreateDomainName_request_endpointConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDomainName_request_endpointConfiguration::fromJsonObject(QJsonObject json) {

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;

    m_vpc_endpoint_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_ids, json[QString("vpcEndpointIds")]);
    m_vpc_endpoint_ids_isSet = !json[QString("vpcEndpointIds")].isNull() && m_vpc_endpoint_ids_isValid;
}

QString OAICreateDomainName_request_endpointConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDomainName_request_endpointConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_types.isSet()) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_vpc_endpoint_ids.isSet()) {
        obj.insert(QString("vpcEndpointIds"), ::OpenAPI::toJsonValue(m_vpc_endpoint_ids));
    }
    return obj;
}

QList OAICreateDomainName_request_endpointConfiguration::getTypes() const {
    return m_types;
}
void OAICreateDomainName_request_endpointConfiguration::setTypes(const QList &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAICreateDomainName_request_endpointConfiguration::is_types_Set() const{
    return m_types_isSet;
}

bool OAICreateDomainName_request_endpointConfiguration::is_types_Valid() const{
    return m_types_isValid;
}

QList OAICreateDomainName_request_endpointConfiguration::getVpcEndpointIds() const {
    return m_vpc_endpoint_ids;
}
void OAICreateDomainName_request_endpointConfiguration::setVpcEndpointIds(const QList &vpc_endpoint_ids) {
    m_vpc_endpoint_ids = vpc_endpoint_ids;
    m_vpc_endpoint_ids_isSet = true;
}

bool OAICreateDomainName_request_endpointConfiguration::is_vpc_endpoint_ids_Set() const{
    return m_vpc_endpoint_ids_isSet;
}

bool OAICreateDomainName_request_endpointConfiguration::is_vpc_endpoint_ids_Valid() const{
    return m_vpc_endpoint_ids_isValid;
}

bool OAICreateDomainName_request_endpointConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoint_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDomainName_request_endpointConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
