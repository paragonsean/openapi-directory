/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasePathMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasePathMapping::OAIBasePathMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasePathMapping::OAIBasePathMapping() {
    this->initializeModel();
}

OAIBasePathMapping::~OAIBasePathMapping() {}

void OAIBasePathMapping::initializeModel() {

    m_base_path_isSet = false;
    m_base_path_isValid = false;

    m_rest_api_id_isSet = false;
    m_rest_api_id_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;
}

void OAIBasePathMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasePathMapping::fromJsonObject(QJsonObject json) {

    m_base_path_isValid = ::OpenAPI::fromJsonValue(m_base_path, json[QString("basePath")]);
    m_base_path_isSet = !json[QString("basePath")].isNull() && m_base_path_isValid;

    m_rest_api_id_isValid = ::OpenAPI::fromJsonValue(m_rest_api_id, json[QString("restApiId")]);
    m_rest_api_id_isSet = !json[QString("restApiId")].isNull() && m_rest_api_id_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;
}

QString OAIBasePathMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasePathMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_base_path_isSet) {
        obj.insert(QString("basePath"), ::OpenAPI::toJsonValue(m_base_path));
    }
    if (m_rest_api_id_isSet) {
        obj.insert(QString("restApiId"), ::OpenAPI::toJsonValue(m_rest_api_id));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    return obj;
}

QString OAIBasePathMapping::getBasePath() const {
    return m_base_path;
}
void OAIBasePathMapping::setBasePath(const QString &base_path) {
    m_base_path = base_path;
    m_base_path_isSet = true;
}

bool OAIBasePathMapping::is_base_path_Set() const{
    return m_base_path_isSet;
}

bool OAIBasePathMapping::is_base_path_Valid() const{
    return m_base_path_isValid;
}

QString OAIBasePathMapping::getRestApiId() const {
    return m_rest_api_id;
}
void OAIBasePathMapping::setRestApiId(const QString &rest_api_id) {
    m_rest_api_id = rest_api_id;
    m_rest_api_id_isSet = true;
}

bool OAIBasePathMapping::is_rest_api_id_Set() const{
    return m_rest_api_id_isSet;
}

bool OAIBasePathMapping::is_rest_api_id_Valid() const{
    return m_rest_api_id_isValid;
}

QString OAIBasePathMapping::getStage() const {
    return m_stage;
}
void OAIBasePathMapping::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIBasePathMapping::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIBasePathMapping::is_stage_Valid() const{
    return m_stage_isValid;
}

bool OAIBasePathMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rest_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasePathMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
