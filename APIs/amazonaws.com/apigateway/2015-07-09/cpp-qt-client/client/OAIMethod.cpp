/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMethod::OAIMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMethod::OAIMethod() {
    this->initializeModel();
}

OAIMethod::~OAIMethod() {}

void OAIMethod::initializeModel() {

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_authorization_type_isSet = false;
    m_authorization_type_isValid = false;

    m_authorizer_id_isSet = false;
    m_authorizer_id_isValid = false;

    m_api_key_required_isSet = false;
    m_api_key_required_isValid = false;

    m_request_validator_id_isSet = false;
    m_request_validator_id_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_request_parameters_isSet = false;
    m_request_parameters_isValid = false;

    m_request_models_isSet = false;
    m_request_models_isValid = false;

    m_method_responses_isSet = false;
    m_method_responses_isValid = false;

    m_method_integration_isSet = false;
    m_method_integration_isValid = false;

    m_authorization_scopes_isSet = false;
    m_authorization_scopes_isValid = false;
}

void OAIMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMethod::fromJsonObject(QJsonObject json) {

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("httpMethod")]);
    m_http_method_isSet = !json[QString("httpMethod")].isNull() && m_http_method_isValid;

    m_authorization_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_type, json[QString("authorizationType")]);
    m_authorization_type_isSet = !json[QString("authorizationType")].isNull() && m_authorization_type_isValid;

    m_authorizer_id_isValid = ::OpenAPI::fromJsonValue(m_authorizer_id, json[QString("authorizerId")]);
    m_authorizer_id_isSet = !json[QString("authorizerId")].isNull() && m_authorizer_id_isValid;

    m_api_key_required_isValid = ::OpenAPI::fromJsonValue(m_api_key_required, json[QString("apiKeyRequired")]);
    m_api_key_required_isSet = !json[QString("apiKeyRequired")].isNull() && m_api_key_required_isValid;

    m_request_validator_id_isValid = ::OpenAPI::fromJsonValue(m_request_validator_id, json[QString("requestValidatorId")]);
    m_request_validator_id_isSet = !json[QString("requestValidatorId")].isNull() && m_request_validator_id_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("operationName")]);
    m_operation_name_isSet = !json[QString("operationName")].isNull() && m_operation_name_isValid;

    m_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_request_parameters, json[QString("requestParameters")]);
    m_request_parameters_isSet = !json[QString("requestParameters")].isNull() && m_request_parameters_isValid;

    m_request_models_isValid = ::OpenAPI::fromJsonValue(m_request_models, json[QString("requestModels")]);
    m_request_models_isSet = !json[QString("requestModels")].isNull() && m_request_models_isValid;

    m_method_responses_isValid = ::OpenAPI::fromJsonValue(m_method_responses, json[QString("methodResponses")]);
    m_method_responses_isSet = !json[QString("methodResponses")].isNull() && m_method_responses_isValid;

    m_method_integration_isValid = ::OpenAPI::fromJsonValue(m_method_integration, json[QString("methodIntegration")]);
    m_method_integration_isSet = !json[QString("methodIntegration")].isNull() && m_method_integration_isValid;

    m_authorization_scopes_isValid = ::OpenAPI::fromJsonValue(m_authorization_scopes, json[QString("authorizationScopes")]);
    m_authorization_scopes_isSet = !json[QString("authorizationScopes")].isNull() && m_authorization_scopes_isValid;
}

QString OAIMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_http_method_isSet) {
        obj.insert(QString("httpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_authorization_type_isSet) {
        obj.insert(QString("authorizationType"), ::OpenAPI::toJsonValue(m_authorization_type));
    }
    if (m_authorizer_id_isSet) {
        obj.insert(QString("authorizerId"), ::OpenAPI::toJsonValue(m_authorizer_id));
    }
    if (m_api_key_required_isSet) {
        obj.insert(QString("apiKeyRequired"), ::OpenAPI::toJsonValue(m_api_key_required));
    }
    if (m_request_validator_id_isSet) {
        obj.insert(QString("requestValidatorId"), ::OpenAPI::toJsonValue(m_request_validator_id));
    }
    if (m_operation_name_isSet) {
        obj.insert(QString("operationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_request_parameters.isSet()) {
        obj.insert(QString("requestParameters"), ::OpenAPI::toJsonValue(m_request_parameters));
    }
    if (m_request_models.isSet()) {
        obj.insert(QString("requestModels"), ::OpenAPI::toJsonValue(m_request_models));
    }
    if (m_method_responses.isSet()) {
        obj.insert(QString("methodResponses"), ::OpenAPI::toJsonValue(m_method_responses));
    }
    if (m_method_integration.isSet()) {
        obj.insert(QString("methodIntegration"), ::OpenAPI::toJsonValue(m_method_integration));
    }
    if (m_authorization_scopes.isSet()) {
        obj.insert(QString("authorizationScopes"), ::OpenAPI::toJsonValue(m_authorization_scopes));
    }
    return obj;
}

QString OAIMethod::getHttpMethod() const {
    return m_http_method;
}
void OAIMethod::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIMethod::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIMethod::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QString OAIMethod::getAuthorizationType() const {
    return m_authorization_type;
}
void OAIMethod::setAuthorizationType(const QString &authorization_type) {
    m_authorization_type = authorization_type;
    m_authorization_type_isSet = true;
}

bool OAIMethod::is_authorization_type_Set() const{
    return m_authorization_type_isSet;
}

bool OAIMethod::is_authorization_type_Valid() const{
    return m_authorization_type_isValid;
}

QString OAIMethod::getAuthorizerId() const {
    return m_authorizer_id;
}
void OAIMethod::setAuthorizerId(const QString &authorizer_id) {
    m_authorizer_id = authorizer_id;
    m_authorizer_id_isSet = true;
}

bool OAIMethod::is_authorizer_id_Set() const{
    return m_authorizer_id_isSet;
}

bool OAIMethod::is_authorizer_id_Valid() const{
    return m_authorizer_id_isValid;
}

bool OAIMethod::getApiKeyRequired() const {
    return m_api_key_required;
}
void OAIMethod::setApiKeyRequired(const bool &api_key_required) {
    m_api_key_required = api_key_required;
    m_api_key_required_isSet = true;
}

bool OAIMethod::is_api_key_required_Set() const{
    return m_api_key_required_isSet;
}

bool OAIMethod::is_api_key_required_Valid() const{
    return m_api_key_required_isValid;
}

QString OAIMethod::getRequestValidatorId() const {
    return m_request_validator_id;
}
void OAIMethod::setRequestValidatorId(const QString &request_validator_id) {
    m_request_validator_id = request_validator_id;
    m_request_validator_id_isSet = true;
}

bool OAIMethod::is_request_validator_id_Set() const{
    return m_request_validator_id_isSet;
}

bool OAIMethod::is_request_validator_id_Valid() const{
    return m_request_validator_id_isValid;
}

QString OAIMethod::getOperationName() const {
    return m_operation_name;
}
void OAIMethod::setOperationName(const QString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAIMethod::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAIMethod::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

QMap OAIMethod::getRequestParameters() const {
    return m_request_parameters;
}
void OAIMethod::setRequestParameters(const QMap &request_parameters) {
    m_request_parameters = request_parameters;
    m_request_parameters_isSet = true;
}

bool OAIMethod::is_request_parameters_Set() const{
    return m_request_parameters_isSet;
}

bool OAIMethod::is_request_parameters_Valid() const{
    return m_request_parameters_isValid;
}

QMap OAIMethod::getRequestModels() const {
    return m_request_models;
}
void OAIMethod::setRequestModels(const QMap &request_models) {
    m_request_models = request_models;
    m_request_models_isSet = true;
}

bool OAIMethod::is_request_models_Set() const{
    return m_request_models_isSet;
}

bool OAIMethod::is_request_models_Valid() const{
    return m_request_models_isValid;
}

QMap OAIMethod::getMethodResponses() const {
    return m_method_responses;
}
void OAIMethod::setMethodResponses(const QMap &method_responses) {
    m_method_responses = method_responses;
    m_method_responses_isSet = true;
}

bool OAIMethod::is_method_responses_Set() const{
    return m_method_responses_isSet;
}

bool OAIMethod::is_method_responses_Valid() const{
    return m_method_responses_isValid;
}

OAIMethod_methodIntegration OAIMethod::getMethodIntegration() const {
    return m_method_integration;
}
void OAIMethod::setMethodIntegration(const OAIMethod_methodIntegration &method_integration) {
    m_method_integration = method_integration;
    m_method_integration_isSet = true;
}

bool OAIMethod::is_method_integration_Set() const{
    return m_method_integration_isSet;
}

bool OAIMethod::is_method_integration_Valid() const{
    return m_method_integration_isValid;
}

QList OAIMethod::getAuthorizationScopes() const {
    return m_authorization_scopes;
}
void OAIMethod::setAuthorizationScopes(const QList &authorization_scopes) {
    m_authorization_scopes = authorization_scopes;
    m_authorization_scopes_isSet = true;
}

bool OAIMethod::is_authorization_scopes_Set() const{
    return m_authorization_scopes_isSet;
}

bool OAIMethod::is_authorization_scopes_Valid() const{
    return m_authorization_scopes_isValid;
}

bool OAIMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_validator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_models.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_integration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
