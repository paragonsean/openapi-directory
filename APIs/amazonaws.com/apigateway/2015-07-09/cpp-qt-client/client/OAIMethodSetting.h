/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMethodSetting.h
 *
 * Specifies the method setting properties.
 */

#ifndef OAIMethodSetting_H
#define OAIMethodSetting_H

#include <QJsonObject>

#include "OAIUnauthorizedCacheControlHeaderStrategy.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMethodSetting : public OAIObject {
public:
    OAIMethodSetting();
    OAIMethodSetting(QString json);
    ~OAIMethodSetting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getMetricsEnabled() const;
    void setMetricsEnabled(const bool &metrics_enabled);
    bool is_metrics_enabled_Set() const;
    bool is_metrics_enabled_Valid() const;

    QString getLoggingLevel() const;
    void setLoggingLevel(const QString &logging_level);
    bool is_logging_level_Set() const;
    bool is_logging_level_Valid() const;

    bool getDataTraceEnabled() const;
    void setDataTraceEnabled(const bool &data_trace_enabled);
    bool is_data_trace_enabled_Set() const;
    bool is_data_trace_enabled_Valid() const;

    qint32 getThrottlingBurstLimit() const;
    void setThrottlingBurstLimit(const qint32 &throttling_burst_limit);
    bool is_throttling_burst_limit_Set() const;
    bool is_throttling_burst_limit_Valid() const;

    double getThrottlingRateLimit() const;
    void setThrottlingRateLimit(const double &throttling_rate_limit);
    bool is_throttling_rate_limit_Set() const;
    bool is_throttling_rate_limit_Valid() const;

    bool getCachingEnabled() const;
    void setCachingEnabled(const bool &caching_enabled);
    bool is_caching_enabled_Set() const;
    bool is_caching_enabled_Valid() const;

    qint32 getCacheTtlInSeconds() const;
    void setCacheTtlInSeconds(const qint32 &cache_ttl_in_seconds);
    bool is_cache_ttl_in_seconds_Set() const;
    bool is_cache_ttl_in_seconds_Valid() const;

    bool getCacheDataEncrypted() const;
    void setCacheDataEncrypted(const bool &cache_data_encrypted);
    bool is_cache_data_encrypted_Set() const;
    bool is_cache_data_encrypted_Valid() const;

    bool getRequireAuthorizationForCacheControl() const;
    void setRequireAuthorizationForCacheControl(const bool &require_authorization_for_cache_control);
    bool is_require_authorization_for_cache_control_Set() const;
    bool is_require_authorization_for_cache_control_Valid() const;

    OAIUnauthorizedCacheControlHeaderStrategy getUnauthorizedCacheControlHeaderStrategy() const;
    void setUnauthorizedCacheControlHeaderStrategy(const OAIUnauthorizedCacheControlHeaderStrategy &unauthorized_cache_control_header_strategy);
    bool is_unauthorized_cache_control_header_strategy_Set() const;
    bool is_unauthorized_cache_control_header_strategy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_metrics_enabled;
    bool m_metrics_enabled_isSet;
    bool m_metrics_enabled_isValid;

    QString m_logging_level;
    bool m_logging_level_isSet;
    bool m_logging_level_isValid;

    bool m_data_trace_enabled;
    bool m_data_trace_enabled_isSet;
    bool m_data_trace_enabled_isValid;

    qint32 m_throttling_burst_limit;
    bool m_throttling_burst_limit_isSet;
    bool m_throttling_burst_limit_isValid;

    double m_throttling_rate_limit;
    bool m_throttling_rate_limit_isSet;
    bool m_throttling_rate_limit_isValid;

    bool m_caching_enabled;
    bool m_caching_enabled_isSet;
    bool m_caching_enabled_isValid;

    qint32 m_cache_ttl_in_seconds;
    bool m_cache_ttl_in_seconds_isSet;
    bool m_cache_ttl_in_seconds_isValid;

    bool m_cache_data_encrypted;
    bool m_cache_data_encrypted_isSet;
    bool m_cache_data_encrypted_isValid;

    bool m_require_authorization_for_cache_control;
    bool m_require_authorization_for_cache_control_isSet;
    bool m_require_authorization_for_cache_control_isValid;

    OAIUnauthorizedCacheControlHeaderStrategy m_unauthorized_cache_control_header_strategy;
    bool m_unauthorized_cache_control_header_strategy_isSet;
    bool m_unauthorized_cache_control_header_strategy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMethodSetting)

#endif // OAIMethodSetting_H
