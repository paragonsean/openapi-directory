/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMode::OAIPutMode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMode::OAIPutMode() {
    this->initializeModel();
}

OAIPutMode::~OAIPutMode() {}

void OAIPutMode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPutMode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPutMode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("merge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPutMode::MERGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("overwrite", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPutMode::OVERWRITE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPutMode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPutMode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPutMode::MERGE:
            val = "merge";
            break;
        case eOAIPutMode::OVERWRITE:
            val = "overwrite";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPutMode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPutMode::eOAIPutMode OAIPutMode::getValue() const {
    return m_value;
}

void OAIPutMode::setValue(const OAIPutMode::eOAIPutMode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPutMode::isSet() const {
    
    return m_value_isSet;
}

bool OAIPutMode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
