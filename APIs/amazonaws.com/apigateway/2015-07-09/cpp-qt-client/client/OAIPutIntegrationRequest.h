/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutIntegrationRequest.h
 *
 * Sets up a method&#39;s integration.
 */

#ifndef OAIPutIntegrationRequest_H
#define OAIPutIntegrationRequest_H

#include <QJsonObject>

#include "OAIConnectionType.h"
#include "OAIContentHandlingStrategy.h"
#include "OAIIntegrationType.h"
#include "OAITlsConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITlsConfig;

class OAIPutIntegrationRequest : public OAIObject {
public:
    OAIPutIntegrationRequest();
    OAIPutIntegrationRequest(QString json);
    ~OAIPutIntegrationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIIntegrationType getType() const;
    void setType(const OAIIntegrationType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getIntegrationHttpMethod() const;
    void setIntegrationHttpMethod(const QString &integration_http_method);
    bool is_integration_http_method_Set() const;
    bool is_integration_http_method_Valid() const;

    QString getUri() const;
    void setUri(const QString &uri);
    bool is_uri_Set() const;
    bool is_uri_Valid() const;

    OAIConnectionType getConnectionType() const;
    void setConnectionType(const OAIConnectionType &connection_type);
    bool is_connection_type_Set() const;
    bool is_connection_type_Valid() const;

    QString getConnectionId() const;
    void setConnectionId(const QString &connection_id);
    bool is_connection_id_Set() const;
    bool is_connection_id_Valid() const;

    QString getCredentials() const;
    void setCredentials(const QString &credentials);
    bool is_credentials_Set() const;
    bool is_credentials_Valid() const;

    QMap getRequestParameters() const;
    void setRequestParameters(const QMap &request_parameters);
    bool is_request_parameters_Set() const;
    bool is_request_parameters_Valid() const;

    QMap getRequestTemplates() const;
    void setRequestTemplates(const QMap &request_templates);
    bool is_request_templates_Set() const;
    bool is_request_templates_Valid() const;

    QString getPassthroughBehavior() const;
    void setPassthroughBehavior(const QString &passthrough_behavior);
    bool is_passthrough_behavior_Set() const;
    bool is_passthrough_behavior_Valid() const;

    QString getCacheNamespace() const;
    void setCacheNamespace(const QString &cache_namespace);
    bool is_cache_namespace_Set() const;
    bool is_cache_namespace_Valid() const;

    QList getCacheKeyParameters() const;
    void setCacheKeyParameters(const QList &cache_key_parameters);
    bool is_cache_key_parameters_Set() const;
    bool is_cache_key_parameters_Valid() const;

    OAIContentHandlingStrategy getContentHandling() const;
    void setContentHandling(const OAIContentHandlingStrategy &content_handling);
    bool is_content_handling_Set() const;
    bool is_content_handling_Valid() const;

    qint32 getTimeoutInMillis() const;
    void setTimeoutInMillis(const qint32 &timeout_in_millis);
    bool is_timeout_in_millis_Set() const;
    bool is_timeout_in_millis_Valid() const;

    OAITlsConfig getTlsConfig() const;
    void setTlsConfig(const OAITlsConfig &tls_config);
    bool is_tls_config_Set() const;
    bool is_tls_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIIntegrationType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_integration_http_method;
    bool m_integration_http_method_isSet;
    bool m_integration_http_method_isValid;

    QString m_uri;
    bool m_uri_isSet;
    bool m_uri_isValid;

    OAIConnectionType m_connection_type;
    bool m_connection_type_isSet;
    bool m_connection_type_isValid;

    QString m_connection_id;
    bool m_connection_id_isSet;
    bool m_connection_id_isValid;

    QString m_credentials;
    bool m_credentials_isSet;
    bool m_credentials_isValid;

    QMap m_request_parameters;
    bool m_request_parameters_isSet;
    bool m_request_parameters_isValid;

    QMap m_request_templates;
    bool m_request_templates_isSet;
    bool m_request_templates_isValid;

    QString m_passthrough_behavior;
    bool m_passthrough_behavior_isSet;
    bool m_passthrough_behavior_isValid;

    QString m_cache_namespace;
    bool m_cache_namespace_isSet;
    bool m_cache_namespace_isValid;

    QList m_cache_key_parameters;
    bool m_cache_key_parameters_isSet;
    bool m_cache_key_parameters_isValid;

    OAIContentHandlingStrategy m_content_handling;
    bool m_content_handling_isSet;
    bool m_content_handling_isValid;

    qint32 m_timeout_in_millis;
    bool m_timeout_in_millis_isSet;
    bool m_timeout_in_millis_isValid;

    OAITlsConfig m_tls_config;
    bool m_tls_config_isSet;
    bool m_tls_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutIntegrationRequest)

#endif // OAIPutIntegrationRequest_H
