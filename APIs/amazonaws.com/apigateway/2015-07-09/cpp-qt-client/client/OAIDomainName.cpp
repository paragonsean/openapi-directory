/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainName::OAIDomainName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainName::OAIDomainName() {
    this->initializeModel();
}

OAIDomainName::~OAIDomainName() {}

void OAIDomainName::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_certificate_name_isSet = false;
    m_certificate_name_isValid = false;

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_certificate_upload_date_isSet = false;
    m_certificate_upload_date_isValid = false;

    m_regional_domain_name_isSet = false;
    m_regional_domain_name_isValid = false;

    m_regional_hosted_zone_id_isSet = false;
    m_regional_hosted_zone_id_isValid = false;

    m_regional_certificate_name_isSet = false;
    m_regional_certificate_name_isValid = false;

    m_regional_certificate_arn_isSet = false;
    m_regional_certificate_arn_isValid = false;

    m_distribution_domain_name_isSet = false;
    m_distribution_domain_name_isValid = false;

    m_distribution_hosted_zone_id_isSet = false;
    m_distribution_hosted_zone_id_isValid = false;

    m_endpoint_configuration_isSet = false;
    m_endpoint_configuration_isValid = false;

    m_domain_name_status_isSet = false;
    m_domain_name_status_isValid = false;

    m_domain_name_status_message_isSet = false;
    m_domain_name_status_message_isValid = false;

    m_security_policy_isSet = false;
    m_security_policy_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_mutual_tls_authentication_isSet = false;
    m_mutual_tls_authentication_isValid = false;

    m_ownership_verification_certificate_arn_isSet = false;
    m_ownership_verification_certificate_arn_isValid = false;
}

void OAIDomainName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainName::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_certificate_name_isValid = ::OpenAPI::fromJsonValue(m_certificate_name, json[QString("certificateName")]);
    m_certificate_name_isSet = !json[QString("certificateName")].isNull() && m_certificate_name_isValid;

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("certificateArn")]);
    m_certificate_arn_isSet = !json[QString("certificateArn")].isNull() && m_certificate_arn_isValid;

    m_certificate_upload_date_isValid = ::OpenAPI::fromJsonValue(m_certificate_upload_date, json[QString("certificateUploadDate")]);
    m_certificate_upload_date_isSet = !json[QString("certificateUploadDate")].isNull() && m_certificate_upload_date_isValid;

    m_regional_domain_name_isValid = ::OpenAPI::fromJsonValue(m_regional_domain_name, json[QString("regionalDomainName")]);
    m_regional_domain_name_isSet = !json[QString("regionalDomainName")].isNull() && m_regional_domain_name_isValid;

    m_regional_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_regional_hosted_zone_id, json[QString("regionalHostedZoneId")]);
    m_regional_hosted_zone_id_isSet = !json[QString("regionalHostedZoneId")].isNull() && m_regional_hosted_zone_id_isValid;

    m_regional_certificate_name_isValid = ::OpenAPI::fromJsonValue(m_regional_certificate_name, json[QString("regionalCertificateName")]);
    m_regional_certificate_name_isSet = !json[QString("regionalCertificateName")].isNull() && m_regional_certificate_name_isValid;

    m_regional_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_regional_certificate_arn, json[QString("regionalCertificateArn")]);
    m_regional_certificate_arn_isSet = !json[QString("regionalCertificateArn")].isNull() && m_regional_certificate_arn_isValid;

    m_distribution_domain_name_isValid = ::OpenAPI::fromJsonValue(m_distribution_domain_name, json[QString("distributionDomainName")]);
    m_distribution_domain_name_isSet = !json[QString("distributionDomainName")].isNull() && m_distribution_domain_name_isValid;

    m_distribution_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_distribution_hosted_zone_id, json[QString("distributionHostedZoneId")]);
    m_distribution_hosted_zone_id_isSet = !json[QString("distributionHostedZoneId")].isNull() && m_distribution_hosted_zone_id_isValid;

    m_endpoint_configuration_isValid = ::OpenAPI::fromJsonValue(m_endpoint_configuration, json[QString("endpointConfiguration")]);
    m_endpoint_configuration_isSet = !json[QString("endpointConfiguration")].isNull() && m_endpoint_configuration_isValid;

    m_domain_name_status_isValid = ::OpenAPI::fromJsonValue(m_domain_name_status, json[QString("domainNameStatus")]);
    m_domain_name_status_isSet = !json[QString("domainNameStatus")].isNull() && m_domain_name_status_isValid;

    m_domain_name_status_message_isValid = ::OpenAPI::fromJsonValue(m_domain_name_status_message, json[QString("domainNameStatusMessage")]);
    m_domain_name_status_message_isSet = !json[QString("domainNameStatusMessage")].isNull() && m_domain_name_status_message_isValid;

    m_security_policy_isValid = ::OpenAPI::fromJsonValue(m_security_policy, json[QString("securityPolicy")]);
    m_security_policy_isSet = !json[QString("securityPolicy")].isNull() && m_security_policy_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_mutual_tls_authentication_isValid = ::OpenAPI::fromJsonValue(m_mutual_tls_authentication, json[QString("mutualTlsAuthentication")]);
    m_mutual_tls_authentication_isSet = !json[QString("mutualTlsAuthentication")].isNull() && m_mutual_tls_authentication_isValid;

    m_ownership_verification_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_ownership_verification_certificate_arn, json[QString("ownershipVerificationCertificateArn")]);
    m_ownership_verification_certificate_arn_isSet = !json[QString("ownershipVerificationCertificateArn")].isNull() && m_ownership_verification_certificate_arn_isValid;
}

QString OAIDomainName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainName::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_certificate_name_isSet) {
        obj.insert(QString("certificateName"), ::OpenAPI::toJsonValue(m_certificate_name));
    }
    if (m_certificate_arn_isSet) {
        obj.insert(QString("certificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_certificate_upload_date_isSet) {
        obj.insert(QString("certificateUploadDate"), ::OpenAPI::toJsonValue(m_certificate_upload_date));
    }
    if (m_regional_domain_name_isSet) {
        obj.insert(QString("regionalDomainName"), ::OpenAPI::toJsonValue(m_regional_domain_name));
    }
    if (m_regional_hosted_zone_id_isSet) {
        obj.insert(QString("regionalHostedZoneId"), ::OpenAPI::toJsonValue(m_regional_hosted_zone_id));
    }
    if (m_regional_certificate_name_isSet) {
        obj.insert(QString("regionalCertificateName"), ::OpenAPI::toJsonValue(m_regional_certificate_name));
    }
    if (m_regional_certificate_arn_isSet) {
        obj.insert(QString("regionalCertificateArn"), ::OpenAPI::toJsonValue(m_regional_certificate_arn));
    }
    if (m_distribution_domain_name_isSet) {
        obj.insert(QString("distributionDomainName"), ::OpenAPI::toJsonValue(m_distribution_domain_name));
    }
    if (m_distribution_hosted_zone_id_isSet) {
        obj.insert(QString("distributionHostedZoneId"), ::OpenAPI::toJsonValue(m_distribution_hosted_zone_id));
    }
    if (m_endpoint_configuration.isSet()) {
        obj.insert(QString("endpointConfiguration"), ::OpenAPI::toJsonValue(m_endpoint_configuration));
    }
    if (m_domain_name_status.isSet()) {
        obj.insert(QString("domainNameStatus"), ::OpenAPI::toJsonValue(m_domain_name_status));
    }
    if (m_domain_name_status_message_isSet) {
        obj.insert(QString("domainNameStatusMessage"), ::OpenAPI::toJsonValue(m_domain_name_status_message));
    }
    if (m_security_policy.isSet()) {
        obj.insert(QString("securityPolicy"), ::OpenAPI::toJsonValue(m_security_policy));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_mutual_tls_authentication.isSet()) {
        obj.insert(QString("mutualTlsAuthentication"), ::OpenAPI::toJsonValue(m_mutual_tls_authentication));
    }
    if (m_ownership_verification_certificate_arn_isSet) {
        obj.insert(QString("ownershipVerificationCertificateArn"), ::OpenAPI::toJsonValue(m_ownership_verification_certificate_arn));
    }
    return obj;
}

QString OAIDomainName::getDomainName() const {
    return m_domain_name;
}
void OAIDomainName::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDomainName::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDomainName::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDomainName::getCertificateName() const {
    return m_certificate_name;
}
void OAIDomainName::setCertificateName(const QString &certificate_name) {
    m_certificate_name = certificate_name;
    m_certificate_name_isSet = true;
}

bool OAIDomainName::is_certificate_name_Set() const{
    return m_certificate_name_isSet;
}

bool OAIDomainName::is_certificate_name_Valid() const{
    return m_certificate_name_isValid;
}

QString OAIDomainName::getCertificateArn() const {
    return m_certificate_arn;
}
void OAIDomainName::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAIDomainName::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAIDomainName::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

QDateTime OAIDomainName::getCertificateUploadDate() const {
    return m_certificate_upload_date;
}
void OAIDomainName::setCertificateUploadDate(const QDateTime &certificate_upload_date) {
    m_certificate_upload_date = certificate_upload_date;
    m_certificate_upload_date_isSet = true;
}

bool OAIDomainName::is_certificate_upload_date_Set() const{
    return m_certificate_upload_date_isSet;
}

bool OAIDomainName::is_certificate_upload_date_Valid() const{
    return m_certificate_upload_date_isValid;
}

QString OAIDomainName::getRegionalDomainName() const {
    return m_regional_domain_name;
}
void OAIDomainName::setRegionalDomainName(const QString &regional_domain_name) {
    m_regional_domain_name = regional_domain_name;
    m_regional_domain_name_isSet = true;
}

bool OAIDomainName::is_regional_domain_name_Set() const{
    return m_regional_domain_name_isSet;
}

bool OAIDomainName::is_regional_domain_name_Valid() const{
    return m_regional_domain_name_isValid;
}

QString OAIDomainName::getRegionalHostedZoneId() const {
    return m_regional_hosted_zone_id;
}
void OAIDomainName::setRegionalHostedZoneId(const QString &regional_hosted_zone_id) {
    m_regional_hosted_zone_id = regional_hosted_zone_id;
    m_regional_hosted_zone_id_isSet = true;
}

bool OAIDomainName::is_regional_hosted_zone_id_Set() const{
    return m_regional_hosted_zone_id_isSet;
}

bool OAIDomainName::is_regional_hosted_zone_id_Valid() const{
    return m_regional_hosted_zone_id_isValid;
}

QString OAIDomainName::getRegionalCertificateName() const {
    return m_regional_certificate_name;
}
void OAIDomainName::setRegionalCertificateName(const QString &regional_certificate_name) {
    m_regional_certificate_name = regional_certificate_name;
    m_regional_certificate_name_isSet = true;
}

bool OAIDomainName::is_regional_certificate_name_Set() const{
    return m_regional_certificate_name_isSet;
}

bool OAIDomainName::is_regional_certificate_name_Valid() const{
    return m_regional_certificate_name_isValid;
}

QString OAIDomainName::getRegionalCertificateArn() const {
    return m_regional_certificate_arn;
}
void OAIDomainName::setRegionalCertificateArn(const QString &regional_certificate_arn) {
    m_regional_certificate_arn = regional_certificate_arn;
    m_regional_certificate_arn_isSet = true;
}

bool OAIDomainName::is_regional_certificate_arn_Set() const{
    return m_regional_certificate_arn_isSet;
}

bool OAIDomainName::is_regional_certificate_arn_Valid() const{
    return m_regional_certificate_arn_isValid;
}

QString OAIDomainName::getDistributionDomainName() const {
    return m_distribution_domain_name;
}
void OAIDomainName::setDistributionDomainName(const QString &distribution_domain_name) {
    m_distribution_domain_name = distribution_domain_name;
    m_distribution_domain_name_isSet = true;
}

bool OAIDomainName::is_distribution_domain_name_Set() const{
    return m_distribution_domain_name_isSet;
}

bool OAIDomainName::is_distribution_domain_name_Valid() const{
    return m_distribution_domain_name_isValid;
}

QString OAIDomainName::getDistributionHostedZoneId() const {
    return m_distribution_hosted_zone_id;
}
void OAIDomainName::setDistributionHostedZoneId(const QString &distribution_hosted_zone_id) {
    m_distribution_hosted_zone_id = distribution_hosted_zone_id;
    m_distribution_hosted_zone_id_isSet = true;
}

bool OAIDomainName::is_distribution_hosted_zone_id_Set() const{
    return m_distribution_hosted_zone_id_isSet;
}

bool OAIDomainName::is_distribution_hosted_zone_id_Valid() const{
    return m_distribution_hosted_zone_id_isValid;
}

OAIDomainName_endpointConfiguration OAIDomainName::getEndpointConfiguration() const {
    return m_endpoint_configuration;
}
void OAIDomainName::setEndpointConfiguration(const OAIDomainName_endpointConfiguration &endpoint_configuration) {
    m_endpoint_configuration = endpoint_configuration;
    m_endpoint_configuration_isSet = true;
}

bool OAIDomainName::is_endpoint_configuration_Set() const{
    return m_endpoint_configuration_isSet;
}

bool OAIDomainName::is_endpoint_configuration_Valid() const{
    return m_endpoint_configuration_isValid;
}

OAIDomainNameStatus OAIDomainName::getDomainNameStatus() const {
    return m_domain_name_status;
}
void OAIDomainName::setDomainNameStatus(const OAIDomainNameStatus &domain_name_status) {
    m_domain_name_status = domain_name_status;
    m_domain_name_status_isSet = true;
}

bool OAIDomainName::is_domain_name_status_Set() const{
    return m_domain_name_status_isSet;
}

bool OAIDomainName::is_domain_name_status_Valid() const{
    return m_domain_name_status_isValid;
}

QString OAIDomainName::getDomainNameStatusMessage() const {
    return m_domain_name_status_message;
}
void OAIDomainName::setDomainNameStatusMessage(const QString &domain_name_status_message) {
    m_domain_name_status_message = domain_name_status_message;
    m_domain_name_status_message_isSet = true;
}

bool OAIDomainName::is_domain_name_status_message_Set() const{
    return m_domain_name_status_message_isSet;
}

bool OAIDomainName::is_domain_name_status_message_Valid() const{
    return m_domain_name_status_message_isValid;
}

OAISecurityPolicy OAIDomainName::getSecurityPolicy() const {
    return m_security_policy;
}
void OAIDomainName::setSecurityPolicy(const OAISecurityPolicy &security_policy) {
    m_security_policy = security_policy;
    m_security_policy_isSet = true;
}

bool OAIDomainName::is_security_policy_Set() const{
    return m_security_policy_isSet;
}

bool OAIDomainName::is_security_policy_Valid() const{
    return m_security_policy_isValid;
}

QMap OAIDomainName::getTags() const {
    return m_tags;
}
void OAIDomainName::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDomainName::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDomainName::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDomainName_mutualTlsAuthentication OAIDomainName::getMutualTlsAuthentication() const {
    return m_mutual_tls_authentication;
}
void OAIDomainName::setMutualTlsAuthentication(const OAIDomainName_mutualTlsAuthentication &mutual_tls_authentication) {
    m_mutual_tls_authentication = mutual_tls_authentication;
    m_mutual_tls_authentication_isSet = true;
}

bool OAIDomainName::is_mutual_tls_authentication_Set() const{
    return m_mutual_tls_authentication_isSet;
}

bool OAIDomainName::is_mutual_tls_authentication_Valid() const{
    return m_mutual_tls_authentication_isValid;
}

QString OAIDomainName::getOwnershipVerificationCertificateArn() const {
    return m_ownership_verification_certificate_arn;
}
void OAIDomainName::setOwnershipVerificationCertificateArn(const QString &ownership_verification_certificate_arn) {
    m_ownership_verification_certificate_arn = ownership_verification_certificate_arn;
    m_ownership_verification_certificate_arn_isSet = true;
}

bool OAIDomainName::is_ownership_verification_certificate_arn_Set() const{
    return m_ownership_verification_certificate_arn_isSet;
}

bool OAIDomainName::is_ownership_verification_certificate_arn_Valid() const{
    return m_ownership_verification_certificate_arn_isValid;
}

bool OAIDomainName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_upload_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_certificate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutual_tls_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_verification_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainName::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
