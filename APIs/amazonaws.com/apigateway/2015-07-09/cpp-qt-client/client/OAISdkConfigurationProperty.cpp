/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISdkConfigurationProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISdkConfigurationProperty::OAISdkConfigurationProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISdkConfigurationProperty::OAISdkConfigurationProperty() {
    this->initializeModel();
}

OAISdkConfigurationProperty::~OAISdkConfigurationProperty() {}

void OAISdkConfigurationProperty::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;
}

void OAISdkConfigurationProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISdkConfigurationProperty::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;
}

QString OAISdkConfigurationProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISdkConfigurationProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    return obj;
}

QString OAISdkConfigurationProperty::getName() const {
    return m_name;
}
void OAISdkConfigurationProperty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISdkConfigurationProperty::is_name_Set() const{
    return m_name_isSet;
}

bool OAISdkConfigurationProperty::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISdkConfigurationProperty::getFriendlyName() const {
    return m_friendly_name;
}
void OAISdkConfigurationProperty::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAISdkConfigurationProperty::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAISdkConfigurationProperty::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAISdkConfigurationProperty::getDescription() const {
    return m_description;
}
void OAISdkConfigurationProperty::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISdkConfigurationProperty::is_description_Set() const{
    return m_description_isSet;
}

bool OAISdkConfigurationProperty::is_description_Valid() const{
    return m_description_isValid;
}

bool OAISdkConfigurationProperty::getRequired() const {
    return m_required;
}
void OAISdkConfigurationProperty::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAISdkConfigurationProperty::is_required_Set() const{
    return m_required_isSet;
}

bool OAISdkConfigurationProperty::is_required_Valid() const{
    return m_required_isValid;
}

QString OAISdkConfigurationProperty::getDefaultValue() const {
    return m_default_value;
}
void OAISdkConfigurationProperty::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAISdkConfigurationProperty::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAISdkConfigurationProperty::is_default_value_Valid() const{
    return m_default_value_isValid;
}

bool OAISdkConfigurationProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISdkConfigurationProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
