/**
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutIntegrationResponseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutIntegrationResponseRequest::OAIPutIntegrationResponseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutIntegrationResponseRequest::OAIPutIntegrationResponseRequest() {
    this->initializeModel();
}

OAIPutIntegrationResponseRequest::~OAIPutIntegrationResponseRequest() {}

void OAIPutIntegrationResponseRequest::initializeModel() {

    m_selection_pattern_isSet = false;
    m_selection_pattern_isValid = false;

    m_response_parameters_isSet = false;
    m_response_parameters_isValid = false;

    m_response_templates_isSet = false;
    m_response_templates_isValid = false;

    m_content_handling_isSet = false;
    m_content_handling_isValid = false;
}

void OAIPutIntegrationResponseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutIntegrationResponseRequest::fromJsonObject(QJsonObject json) {

    m_selection_pattern_isValid = ::OpenAPI::fromJsonValue(m_selection_pattern, json[QString("selectionPattern")]);
    m_selection_pattern_isSet = !json[QString("selectionPattern")].isNull() && m_selection_pattern_isValid;

    m_response_parameters_isValid = ::OpenAPI::fromJsonValue(m_response_parameters, json[QString("responseParameters")]);
    m_response_parameters_isSet = !json[QString("responseParameters")].isNull() && m_response_parameters_isValid;

    m_response_templates_isValid = ::OpenAPI::fromJsonValue(m_response_templates, json[QString("responseTemplates")]);
    m_response_templates_isSet = !json[QString("responseTemplates")].isNull() && m_response_templates_isValid;

    m_content_handling_isValid = ::OpenAPI::fromJsonValue(m_content_handling, json[QString("contentHandling")]);
    m_content_handling_isSet = !json[QString("contentHandling")].isNull() && m_content_handling_isValid;
}

QString OAIPutIntegrationResponseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutIntegrationResponseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_selection_pattern_isSet) {
        obj.insert(QString("selectionPattern"), ::OpenAPI::toJsonValue(m_selection_pattern));
    }
    if (m_response_parameters.isSet()) {
        obj.insert(QString("responseParameters"), ::OpenAPI::toJsonValue(m_response_parameters));
    }
    if (m_response_templates.isSet()) {
        obj.insert(QString("responseTemplates"), ::OpenAPI::toJsonValue(m_response_templates));
    }
    if (m_content_handling.isSet()) {
        obj.insert(QString("contentHandling"), ::OpenAPI::toJsonValue(m_content_handling));
    }
    return obj;
}

QString OAIPutIntegrationResponseRequest::getSelectionPattern() const {
    return m_selection_pattern;
}
void OAIPutIntegrationResponseRequest::setSelectionPattern(const QString &selection_pattern) {
    m_selection_pattern = selection_pattern;
    m_selection_pattern_isSet = true;
}

bool OAIPutIntegrationResponseRequest::is_selection_pattern_Set() const{
    return m_selection_pattern_isSet;
}

bool OAIPutIntegrationResponseRequest::is_selection_pattern_Valid() const{
    return m_selection_pattern_isValid;
}

QMap OAIPutIntegrationResponseRequest::getResponseParameters() const {
    return m_response_parameters;
}
void OAIPutIntegrationResponseRequest::setResponseParameters(const QMap &response_parameters) {
    m_response_parameters = response_parameters;
    m_response_parameters_isSet = true;
}

bool OAIPutIntegrationResponseRequest::is_response_parameters_Set() const{
    return m_response_parameters_isSet;
}

bool OAIPutIntegrationResponseRequest::is_response_parameters_Valid() const{
    return m_response_parameters_isValid;
}

QMap OAIPutIntegrationResponseRequest::getResponseTemplates() const {
    return m_response_templates;
}
void OAIPutIntegrationResponseRequest::setResponseTemplates(const QMap &response_templates) {
    m_response_templates = response_templates;
    m_response_templates_isSet = true;
}

bool OAIPutIntegrationResponseRequest::is_response_templates_Set() const{
    return m_response_templates_isSet;
}

bool OAIPutIntegrationResponseRequest::is_response_templates_Valid() const{
    return m_response_templates_isValid;
}

OAIContentHandlingStrategy OAIPutIntegrationResponseRequest::getContentHandling() const {
    return m_content_handling;
}
void OAIPutIntegrationResponseRequest::setContentHandling(const OAIContentHandlingStrategy &content_handling) {
    m_content_handling = content_handling;
    m_content_handling_isSet = true;
}

bool OAIPutIntegrationResponseRequest::is_content_handling_Set() const{
    return m_content_handling_isSet;
}

bool OAIPutIntegrationResponseRequest::is_content_handling_Valid() const{
    return m_content_handling_isValid;
}

bool OAIPutIntegrationResponseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selection_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_handling.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutIntegrationResponseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
