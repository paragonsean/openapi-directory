/*
 * Amazon API Gateway
 * <fullname>Amazon API Gateway</fullname> <p>Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on AWS Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.</p>
 *
 * The version of the OpenAPI document: 2015-07-09
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestInvokeMethodRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:41.810522-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestInvokeMethodRequest {
  public static final String SERIALIZED_NAME_PATH_WITH_QUERY_STRING = "pathWithQueryString";
  @SerializedName(SERIALIZED_NAME_PATH_WITH_QUERY_STRING)
  private String pathWithQueryString;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_MULTI_VALUE_HEADERS = "multiValueHeaders";
  @SerializedName(SERIALIZED_NAME_MULTI_VALUE_HEADERS)
  private Map<String, List<String>> multiValueHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_ID = "clientCertificateId";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_ID)
  private String clientCertificateId;

  public static final String SERIALIZED_NAME_STAGE_VARIABLES = "stageVariables";
  @SerializedName(SERIALIZED_NAME_STAGE_VARIABLES)
  private Map<String, String> stageVariables = new HashMap<>();

  public TestInvokeMethodRequest() {
  }

  public TestInvokeMethodRequest pathWithQueryString(String pathWithQueryString) {
    this.pathWithQueryString = pathWithQueryString;
    return this;
  }

  /**
   * The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.
   * @return pathWithQueryString
   */
  @javax.annotation.Nullable
  public String getPathWithQueryString() {
    return pathWithQueryString;
  }

  public void setPathWithQueryString(String pathWithQueryString) {
    this.pathWithQueryString = pathWithQueryString;
  }


  public TestInvokeMethodRequest body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The simulated request body of an incoming invocation request.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public TestInvokeMethodRequest headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public TestInvokeMethodRequest putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * A key-value map of headers to simulate an incoming invocation request.
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public TestInvokeMethodRequest multiValueHeaders(Map<String, List<String>> multiValueHeaders) {
    this.multiValueHeaders = multiValueHeaders;
    return this;
  }

  public TestInvokeMethodRequest putMultiValueHeadersItem(String key, List<String> multiValueHeadersItem) {
    if (this.multiValueHeaders == null) {
      this.multiValueHeaders = new HashMap<>();
    }
    this.multiValueHeaders.put(key, multiValueHeadersItem);
    return this;
  }

  /**
   * The headers as a map from string to list of values to simulate an incoming invocation request.
   * @return multiValueHeaders
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getMultiValueHeaders() {
    return multiValueHeaders;
  }

  public void setMultiValueHeaders(Map<String, List<String>> multiValueHeaders) {
    this.multiValueHeaders = multiValueHeaders;
  }


  public TestInvokeMethodRequest clientCertificateId(String clientCertificateId) {
    this.clientCertificateId = clientCertificateId;
    return this;
  }

  /**
   * A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.
   * @return clientCertificateId
   */
  @javax.annotation.Nullable
  public String getClientCertificateId() {
    return clientCertificateId;
  }

  public void setClientCertificateId(String clientCertificateId) {
    this.clientCertificateId = clientCertificateId;
  }


  public TestInvokeMethodRequest stageVariables(Map<String, String> stageVariables) {
    this.stageVariables = stageVariables;
    return this;
  }

  public TestInvokeMethodRequest putStageVariablesItem(String key, String stageVariablesItem) {
    if (this.stageVariables == null) {
      this.stageVariables = new HashMap<>();
    }
    this.stageVariables.put(key, stageVariablesItem);
    return this;
  }

  /**
   * A key-value map of stage variables to simulate an invocation on a deployed Stage.
   * @return stageVariables
   */
  @javax.annotation.Nullable
  public Map<String, String> getStageVariables() {
    return stageVariables;
  }

  public void setStageVariables(Map<String, String> stageVariables) {
    this.stageVariables = stageVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestInvokeMethodRequest testInvokeMethodRequest = (TestInvokeMethodRequest) o;
    return Objects.equals(this.pathWithQueryString, testInvokeMethodRequest.pathWithQueryString) &&
        Objects.equals(this.body, testInvokeMethodRequest.body) &&
        Objects.equals(this.headers, testInvokeMethodRequest.headers) &&
        Objects.equals(this.multiValueHeaders, testInvokeMethodRequest.multiValueHeaders) &&
        Objects.equals(this.clientCertificateId, testInvokeMethodRequest.clientCertificateId) &&
        Objects.equals(this.stageVariables, testInvokeMethodRequest.stageVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pathWithQueryString, body, headers, multiValueHeaders, clientCertificateId, stageVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestInvokeMethodRequest {\n");
    sb.append("    pathWithQueryString: ").append(toIndentedString(pathWithQueryString)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    multiValueHeaders: ").append(toIndentedString(multiValueHeaders)).append("\n");
    sb.append("    clientCertificateId: ").append(toIndentedString(clientCertificateId)).append("\n");
    sb.append("    stageVariables: ").append(toIndentedString(stageVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pathWithQueryString");
    openapiFields.add("body");
    openapiFields.add("headers");
    openapiFields.add("multiValueHeaders");
    openapiFields.add("clientCertificateId");
    openapiFields.add("stageVariables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestInvokeMethodRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestInvokeMethodRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestInvokeMethodRequest is not found in the empty JSON string", TestInvokeMethodRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestInvokeMethodRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestInvokeMethodRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pathWithQueryString") != null && !jsonObj.get("pathWithQueryString").isJsonNull()) && !jsonObj.get("pathWithQueryString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pathWithQueryString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pathWithQueryString").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("clientCertificateId") != null && !jsonObj.get("clientCertificateId").isJsonNull()) && !jsonObj.get("clientCertificateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCertificateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCertificateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestInvokeMethodRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestInvokeMethodRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestInvokeMethodRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestInvokeMethodRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TestInvokeMethodRequest>() {
           @Override
           public void write(JsonWriter out, TestInvokeMethodRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestInvokeMethodRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestInvokeMethodRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestInvokeMethodRequest
   * @throws IOException if the JSON string is invalid with respect to TestInvokeMethodRequest
   */
  public static TestInvokeMethodRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestInvokeMethodRequest.class);
  }

  /**
   * Convert an instance of TestInvokeMethodRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

