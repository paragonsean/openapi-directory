/*
 * AWS Account
 * Operations for Amazon Web Services Account Management
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the details of the primary contact information associated with an Amazon Web Services account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:19.598608-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutContactInformationRequestContactInformation {
  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "AddressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "AddressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_LINE3 = "AddressLine3";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE3)
  private String addressLine3;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DISTRICT_OR_COUNTY = "DistrictOrCounty";
  @SerializedName(SERIALIZED_NAME_DISTRICT_OR_COUNTY)
  private String districtOrCounty;

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "PostalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STATE_OR_REGION = "StateOrRegion";
  @SerializedName(SERIALIZED_NAME_STATE_OR_REGION)
  private String stateOrRegion;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "WebsiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public PutContactInformationRequestContactInformation() {
  }

  public PutContactInformationRequestContactInformation addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public PutContactInformationRequestContactInformation addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Get addressLine2
   * @return addressLine2
   */
  @javax.annotation.Nullable
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public PutContactInformationRequestContactInformation addressLine3(String addressLine3) {
    this.addressLine3 = addressLine3;
    return this;
  }

  /**
   * Get addressLine3
   * @return addressLine3
   */
  @javax.annotation.Nullable
  public String getAddressLine3() {
    return addressLine3;
  }

  public void setAddressLine3(String addressLine3) {
    this.addressLine3 = addressLine3;
  }


  public PutContactInformationRequestContactInformation city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public PutContactInformationRequestContactInformation companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public PutContactInformationRequestContactInformation countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Get countryCode
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public PutContactInformationRequestContactInformation districtOrCounty(String districtOrCounty) {
    this.districtOrCounty = districtOrCounty;
    return this;
  }

  /**
   * Get districtOrCounty
   * @return districtOrCounty
   */
  @javax.annotation.Nullable
  public String getDistrictOrCounty() {
    return districtOrCounty;
  }

  public void setDistrictOrCounty(String districtOrCounty) {
    this.districtOrCounty = districtOrCounty;
  }


  public PutContactInformationRequestContactInformation fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public PutContactInformationRequestContactInformation phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public PutContactInformationRequestContactInformation postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public PutContactInformationRequestContactInformation stateOrRegion(String stateOrRegion) {
    this.stateOrRegion = stateOrRegion;
    return this;
  }

  /**
   * Get stateOrRegion
   * @return stateOrRegion
   */
  @javax.annotation.Nullable
  public String getStateOrRegion() {
    return stateOrRegion;
  }

  public void setStateOrRegion(String stateOrRegion) {
    this.stateOrRegion = stateOrRegion;
  }


  public PutContactInformationRequestContactInformation websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * Get websiteUrl
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutContactInformationRequestContactInformation putContactInformationRequestContactInformation = (PutContactInformationRequestContactInformation) o;
    return Objects.equals(this.addressLine1, putContactInformationRequestContactInformation.addressLine1) &&
        Objects.equals(this.addressLine2, putContactInformationRequestContactInformation.addressLine2) &&
        Objects.equals(this.addressLine3, putContactInformationRequestContactInformation.addressLine3) &&
        Objects.equals(this.city, putContactInformationRequestContactInformation.city) &&
        Objects.equals(this.companyName, putContactInformationRequestContactInformation.companyName) &&
        Objects.equals(this.countryCode, putContactInformationRequestContactInformation.countryCode) &&
        Objects.equals(this.districtOrCounty, putContactInformationRequestContactInformation.districtOrCounty) &&
        Objects.equals(this.fullName, putContactInformationRequestContactInformation.fullName) &&
        Objects.equals(this.phoneNumber, putContactInformationRequestContactInformation.phoneNumber) &&
        Objects.equals(this.postalCode, putContactInformationRequestContactInformation.postalCode) &&
        Objects.equals(this.stateOrRegion, putContactInformationRequestContactInformation.stateOrRegion) &&
        Objects.equals(this.websiteUrl, putContactInformationRequestContactInformation.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressLine1, addressLine2, addressLine3, city, companyName, countryCode, districtOrCounty, fullName, phoneNumber, postalCode, stateOrRegion, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutContactInformationRequestContactInformation {\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressLine3: ").append(toIndentedString(addressLine3)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    districtOrCounty: ").append(toIndentedString(districtOrCounty)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    stateOrRegion: ").append(toIndentedString(stateOrRegion)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AddressLine1");
    openapiFields.add("AddressLine2");
    openapiFields.add("AddressLine3");
    openapiFields.add("City");
    openapiFields.add("CompanyName");
    openapiFields.add("CountryCode");
    openapiFields.add("DistrictOrCounty");
    openapiFields.add("FullName");
    openapiFields.add("PhoneNumber");
    openapiFields.add("PostalCode");
    openapiFields.add("StateOrRegion");
    openapiFields.add("WebsiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutContactInformationRequestContactInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutContactInformationRequestContactInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutContactInformationRequestContactInformation is not found in the empty JSON string", PutContactInformationRequestContactInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutContactInformationRequestContactInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutContactInformationRequestContactInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AddressLine1`
      if (jsonObj.get("AddressLine1") != null && !jsonObj.get("AddressLine1").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AddressLine1"));
      }
      // validate the optional field `AddressLine2`
      if (jsonObj.get("AddressLine2") != null && !jsonObj.get("AddressLine2").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AddressLine2"));
      }
      // validate the optional field `AddressLine3`
      if (jsonObj.get("AddressLine3") != null && !jsonObj.get("AddressLine3").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AddressLine3"));
      }
      // validate the optional field `City`
      if (jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("City"));
      }
      // validate the optional field `CompanyName`
      if (jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CompanyName"));
      }
      // validate the optional field `CountryCode`
      if (jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CountryCode"));
      }
      // validate the optional field `DistrictOrCounty`
      if (jsonObj.get("DistrictOrCounty") != null && !jsonObj.get("DistrictOrCounty").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DistrictOrCounty"));
      }
      // validate the optional field `FullName`
      if (jsonObj.get("FullName") != null && !jsonObj.get("FullName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FullName"));
      }
      // validate the optional field `PhoneNumber`
      if (jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumber"));
      }
      // validate the optional field `PostalCode`
      if (jsonObj.get("PostalCode") != null && !jsonObj.get("PostalCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PostalCode"));
      }
      // validate the optional field `StateOrRegion`
      if (jsonObj.get("StateOrRegion") != null && !jsonObj.get("StateOrRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StateOrRegion"));
      }
      // validate the optional field `WebsiteUrl`
      if (jsonObj.get("WebsiteUrl") != null && !jsonObj.get("WebsiteUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WebsiteUrl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutContactInformationRequestContactInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutContactInformationRequestContactInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutContactInformationRequestContactInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutContactInformationRequestContactInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<PutContactInformationRequestContactInformation>() {
           @Override
           public void write(JsonWriter out, PutContactInformationRequestContactInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutContactInformationRequestContactInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutContactInformationRequestContactInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutContactInformationRequestContactInformation
   * @throws IOException if the JSON string is invalid with respect to PutContactInformationRequestContactInformation
   */
  public static PutContactInformationRequestContactInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutContactInformationRequestContactInformation.class);
  }

  /**
   * Convert an instance of PutContactInformationRequestContactInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

