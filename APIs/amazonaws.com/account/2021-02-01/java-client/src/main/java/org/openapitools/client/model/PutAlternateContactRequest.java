/*
 * AWS Account
 * Operations for Amazon Web Services Account Management
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutAlternateContactRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:19.598608-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutAlternateContactRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  /**
   * Specifies which alternate contact you want to create or update.
   */
  @JsonAdapter(AlternateContactTypeEnum.Adapter.class)
  public enum AlternateContactTypeEnum {
    BILLING("BILLING"),
    
    OPERATIONS("OPERATIONS"),
    
    SECURITY("SECURITY");

    private String value;

    AlternateContactTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlternateContactTypeEnum fromValue(String value) {
      for (AlternateContactTypeEnum b : AlternateContactTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlternateContactTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlternateContactTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlternateContactTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlternateContactTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlternateContactTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALTERNATE_CONTACT_TYPE = "AlternateContactType";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_CONTACT_TYPE)
  private AlternateContactTypeEnum alternateContactType;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public PutAlternateContactRequest() {
  }

  public PutAlternateContactRequest accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the 12 digit account ID number of the Amazon Web Services account that you want to access or modify with this operation.&lt;/p&gt; &lt;p&gt;If you do not specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation.&lt;/p&gt; &lt;p&gt;To use this parameter, the caller must be an identity in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account\&quot;&gt;organization&#39;s management account&lt;/a&gt; or a delegated administrator account, and the specified account ID must be a member account in the same organization. The organization must have &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;all features enabled&lt;/a&gt;, and the organization must have &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html\&quot;&gt;trusted access&lt;/a&gt; enabled for the Account Management service, and optionally a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html\&quot;&gt;delegated admin&lt;/a&gt; account assigned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The management account can&#39;t specify its own &lt;code&gt;AccountId&lt;/code&gt;; it must call the operation in standalone context by not including the &lt;code&gt;AccountId&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To call this operation on an account that is not a member of an organization, then don&#39;t specify this parameter, and call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.&lt;/p&gt;
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public PutAlternateContactRequest alternateContactType(AlternateContactTypeEnum alternateContactType) {
    this.alternateContactType = alternateContactType;
    return this;
  }

  /**
   * Specifies which alternate contact you want to create or update.
   * @return alternateContactType
   */
  @javax.annotation.Nonnull
  public AlternateContactTypeEnum getAlternateContactType() {
    return alternateContactType;
  }

  public void setAlternateContactType(AlternateContactTypeEnum alternateContactType) {
    this.alternateContactType = alternateContactType;
  }


  public PutAlternateContactRequest emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Specifies an email address for the alternate contact. 
   * @return emailAddress
   */
  @javax.annotation.Nonnull
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public PutAlternateContactRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Specifies a name for the alternate contact.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PutAlternateContactRequest phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Specifies a phone number for the alternate contact.
   * @return phoneNumber
   */
  @javax.annotation.Nonnull
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public PutAlternateContactRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Specifies a title for the alternate contact.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutAlternateContactRequest putAlternateContactRequest = (PutAlternateContactRequest) o;
    return Objects.equals(this.accountId, putAlternateContactRequest.accountId) &&
        Objects.equals(this.alternateContactType, putAlternateContactRequest.alternateContactType) &&
        Objects.equals(this.emailAddress, putAlternateContactRequest.emailAddress) &&
        Objects.equals(this.name, putAlternateContactRequest.name) &&
        Objects.equals(this.phoneNumber, putAlternateContactRequest.phoneNumber) &&
        Objects.equals(this.title, putAlternateContactRequest.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, alternateContactType, emailAddress, name, phoneNumber, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutAlternateContactRequest {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    alternateContactType: ").append(toIndentedString(alternateContactType)).append("\n");
    sb.append("    emailAddress: ").append("*").append("\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    phoneNumber: ").append("*").append("\n");
    sb.append("    title: ").append("*").append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");
    openapiFields.add("AlternateContactType");
    openapiFields.add("EmailAddress");
    openapiFields.add("Name");
    openapiFields.add("PhoneNumber");
    openapiFields.add("Title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AlternateContactType");
    openapiRequiredFields.add("EmailAddress");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("PhoneNumber");
    openapiRequiredFields.add("Title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutAlternateContactRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutAlternateContactRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutAlternateContactRequest is not found in the empty JSON string", PutAlternateContactRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutAlternateContactRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutAlternateContactRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutAlternateContactRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) && !jsonObj.get("AccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountId").toString()));
      }
      if (!jsonObj.get("AlternateContactType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlternateContactType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlternateContactType").toString()));
      }
      // validate the required field `AlternateContactType`
      AlternateContactTypeEnum.validateJsonElement(jsonObj.get("AlternateContactType"));
      if (!jsonObj.get("EmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailAddress").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("PhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhoneNumber").toString()));
      }
      if (!jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutAlternateContactRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutAlternateContactRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutAlternateContactRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutAlternateContactRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutAlternateContactRequest>() {
           @Override
           public void write(JsonWriter out, PutAlternateContactRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutAlternateContactRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutAlternateContactRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutAlternateContactRequest
   * @throws IOException if the JSON string is invalid with respect to PutAlternateContactRequest
   */
  public static PutAlternateContactRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutAlternateContactRequest.class);
  }

  /**
   * Convert an instance of PutAlternateContactRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

