/*
 * AWS Account
 * Operations for Amazon Web Services Account Management
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetContactInformationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:19.598608-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetContactInformationRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public GetContactInformationRequest() {
  }

  public GetContactInformationRequest accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the 12-digit account ID number of the Amazon Web Services account that you want to access or modify with this operation. If you don&#39;t specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation. To use this parameter, the caller must be an identity in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account\&quot;&gt;organization&#39;s management account&lt;/a&gt; or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\&quot;&gt;all features enabled&lt;/a&gt;, and the organization must have &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html\&quot;&gt;trusted access&lt;/a&gt; enabled for the Account Management service, and optionally a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html\&quot;&gt;delegated admin&lt;/a&gt; account assigned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The management account can&#39;t specify its own &lt;code&gt;AccountId&lt;/code&gt;. It must call the operation in standalone context by not including the &lt;code&gt;AccountId&lt;/code&gt; parameter.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To call this operation on an account that is not a member of an organization, don&#39;t specify this parameter. Instead, call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.&lt;/p&gt;
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContactInformationRequest getContactInformationRequest = (GetContactInformationRequest) o;
    return Objects.equals(this.accountId, getContactInformationRequest.accountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContactInformationRequest {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetContactInformationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetContactInformationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetContactInformationRequest is not found in the empty JSON string", GetContactInformationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetContactInformationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetContactInformationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountId") != null && !jsonObj.get("AccountId").isJsonNull()) && !jsonObj.get("AccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetContactInformationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetContactInformationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetContactInformationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetContactInformationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetContactInformationRequest>() {
           @Override
           public void write(JsonWriter out, GetContactInformationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetContactInformationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetContactInformationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetContactInformationRequest
   * @throws IOException if the JSON string is invalid with respect to GetContactInformationRequest
   */
  public static GetContactInformationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetContactInformationRequest.class);
  }

  /**
   * Convert an instance of GetContactInformationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

