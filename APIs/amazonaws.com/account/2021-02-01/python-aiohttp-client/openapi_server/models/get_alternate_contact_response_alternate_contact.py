# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternate_contact_type import AlternateContactType
from openapi_server import util


class GetAlternateContactResponseAlternateContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_contact_type: AlternateContactType=None, email_address: str=None, name: str=None, phone_number: str=None, title: str=None):
        """GetAlternateContactResponseAlternateContact - a model defined in OpenAPI

        :param alternate_contact_type: The alternate_contact_type of this GetAlternateContactResponseAlternateContact.
        :param email_address: The email_address of this GetAlternateContactResponseAlternateContact.
        :param name: The name of this GetAlternateContactResponseAlternateContact.
        :param phone_number: The phone_number of this GetAlternateContactResponseAlternateContact.
        :param title: The title of this GetAlternateContactResponseAlternateContact.
        """
        self.openapi_types = {
            'alternate_contact_type': AlternateContactType,
            'email_address': str,
            'name': str,
            'phone_number': str,
            'title': str
        }

        self.attribute_map = {
            'alternate_contact_type': 'AlternateContactType',
            'email_address': 'EmailAddress',
            'name': 'Name',
            'phone_number': 'PhoneNumber',
            'title': 'Title'
        }

        self._alternate_contact_type = alternate_contact_type
        self._email_address = email_address
        self._name = name
        self._phone_number = phone_number
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetAlternateContactResponseAlternateContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetAlternateContactResponse_AlternateContact of this GetAlternateContactResponseAlternateContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_contact_type(self):
        """Gets the alternate_contact_type of this GetAlternateContactResponseAlternateContact.


        :return: The alternate_contact_type of this GetAlternateContactResponseAlternateContact.
        :rtype: AlternateContactType
        """
        return self._alternate_contact_type

    @alternate_contact_type.setter
    def alternate_contact_type(self, alternate_contact_type):
        """Sets the alternate_contact_type of this GetAlternateContactResponseAlternateContact.


        :param alternate_contact_type: The alternate_contact_type of this GetAlternateContactResponseAlternateContact.
        :type alternate_contact_type: AlternateContactType
        """

        self._alternate_contact_type = alternate_contact_type

    @property
    def email_address(self):
        """Gets the email_address of this GetAlternateContactResponseAlternateContact.


        :return: The email_address of this GetAlternateContactResponseAlternateContact.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this GetAlternateContactResponseAlternateContact.


        :param email_address: The email_address of this GetAlternateContactResponseAlternateContact.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def name(self):
        """Gets the name of this GetAlternateContactResponseAlternateContact.


        :return: The name of this GetAlternateContactResponseAlternateContact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetAlternateContactResponseAlternateContact.


        :param name: The name of this GetAlternateContactResponseAlternateContact.
        :type name: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this GetAlternateContactResponseAlternateContact.


        :return: The phone_number of this GetAlternateContactResponseAlternateContact.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this GetAlternateContactResponseAlternateContact.


        :param phone_number: The phone_number of this GetAlternateContactResponseAlternateContact.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def title(self):
        """Gets the title of this GetAlternateContactResponseAlternateContact.


        :return: The title of this GetAlternateContactResponseAlternateContact.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GetAlternateContactResponseAlternateContact.


        :param title: The title of this GetAlternateContactResponseAlternateContact.
        :type title: str
        """

        self._title = title
