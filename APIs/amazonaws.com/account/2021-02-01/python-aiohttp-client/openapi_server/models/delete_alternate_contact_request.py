# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteAlternateContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, alternate_contact_type: str=None):
        """DeleteAlternateContactRequest - a model defined in OpenAPI

        :param account_id: The account_id of this DeleteAlternateContactRequest.
        :param alternate_contact_type: The alternate_contact_type of this DeleteAlternateContactRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'alternate_contact_type': str
        }

        self.attribute_map = {
            'account_id': 'AccountId',
            'alternate_contact_type': 'AlternateContactType'
        }

        self._account_id = account_id
        self._alternate_contact_type = alternate_contact_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteAlternateContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteAlternateContact_request of this DeleteAlternateContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this DeleteAlternateContactRequest.

        <p>Specifies the 12 digit account ID number of the Amazon Web Services account that you want to access or modify with this operation.</p> <p>If you do not specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation.</p> <p>To use this parameter, the caller must be an identity in the <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account\">organization's management account</a> or a delegated administrator account, and the specified account ID must be a member account in the same organization. The organization must have <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\">all features enabled</a>, and the organization must have <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html\">trusted access</a> enabled for the Account Management service, and optionally a <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html\">delegated admin</a> account assigned.</p> <note> <p>The management account can't specify its own <code>AccountId</code>; it must call the operation in standalone context by not including the <code>AccountId</code> parameter.</p> </note> <p>To call this operation on an account that is not a member of an organization, then don't specify this parameter, and call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.</p>

        :return: The account_id of this DeleteAlternateContactRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DeleteAlternateContactRequest.

        <p>Specifies the 12 digit account ID number of the Amazon Web Services account that you want to access or modify with this operation.</p> <p>If you do not specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation.</p> <p>To use this parameter, the caller must be an identity in the <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account\">organization's management account</a> or a delegated administrator account, and the specified account ID must be a member account in the same organization. The organization must have <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\">all features enabled</a>, and the organization must have <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html\">trusted access</a> enabled for the Account Management service, and optionally a <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html\">delegated admin</a> account assigned.</p> <note> <p>The management account can't specify its own <code>AccountId</code>; it must call the operation in standalone context by not including the <code>AccountId</code> parameter.</p> </note> <p>To call this operation on an account that is not a member of an organization, then don't specify this parameter, and call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.</p>

        :param account_id: The account_id of this DeleteAlternateContactRequest.
        :type account_id: str
        """
        if account_id is not None and not re.search(r'^\d{12}$', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/^\d{12}$/`")

        self._account_id = account_id

    @property
    def alternate_contact_type(self):
        """Gets the alternate_contact_type of this DeleteAlternateContactRequest.

        Specifies which of the alternate contacts to delete. 

        :return: The alternate_contact_type of this DeleteAlternateContactRequest.
        :rtype: str
        """
        return self._alternate_contact_type

    @alternate_contact_type.setter
    def alternate_contact_type(self, alternate_contact_type):
        """Sets the alternate_contact_type of this DeleteAlternateContactRequest.

        Specifies which of the alternate contacts to delete. 

        :param alternate_contact_type: The alternate_contact_type of this DeleteAlternateContactRequest.
        :type alternate_contact_type: str
        """
        allowed_values = ["BILLING", "OPERATIONS", "SECURITY"]  # noqa: E501
        if alternate_contact_type not in allowed_values:
            raise ValueError(
                "Invalid value for `alternate_contact_type` ({0}), must be one of {1}"
                .format(alternate_contact_type, allowed_values)
            )

        self._alternate_contact_type = alternate_contact_type
