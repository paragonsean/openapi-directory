/**
 * AWS Account
 * Operations for Amazon Web Services Account Management
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutAlternateContactRequest model module.
 * @module model/PutAlternateContactRequest
 * @version 2021-02-01
 */
class PutAlternateContactRequest {
    /**
     * Constructs a new <code>PutAlternateContactRequest</code>.
     * @alias module:model/PutAlternateContactRequest
     * @param alternateContactType {module:model/PutAlternateContactRequest.AlternateContactTypeEnum} Specifies which alternate contact you want to create or update.
     * @param emailAddress {String} Specifies an email address for the alternate contact. 
     * @param name {String} Specifies a name for the alternate contact.
     * @param phoneNumber {String} Specifies a phone number for the alternate contact.
     * @param title {String} Specifies a title for the alternate contact.
     */
    constructor(alternateContactType, emailAddress, name, phoneNumber, title) { 
        
        PutAlternateContactRequest.initialize(this, alternateContactType, emailAddress, name, phoneNumber, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alternateContactType, emailAddress, name, phoneNumber, title) { 
        obj['AlternateContactType'] = alternateContactType;
        obj['EmailAddress'] = emailAddress;
        obj['Name'] = name;
        obj['PhoneNumber'] = phoneNumber;
        obj['Title'] = title;
    }

    /**
     * Constructs a <code>PutAlternateContactRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutAlternateContactRequest} obj Optional instance to populate.
     * @return {module:model/PutAlternateContactRequest} The populated <code>PutAlternateContactRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutAlternateContactRequest();

            if (data.hasOwnProperty('AccountId')) {
                obj['AccountId'] = ApiClient.convertToType(data['AccountId'], 'String');
            }
            if (data.hasOwnProperty('AlternateContactType')) {
                obj['AlternateContactType'] = ApiClient.convertToType(data['AlternateContactType'], 'String');
            }
            if (data.hasOwnProperty('EmailAddress')) {
                obj['EmailAddress'] = ApiClient.convertToType(data['EmailAddress'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PhoneNumber')) {
                obj['PhoneNumber'] = ApiClient.convertToType(data['PhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutAlternateContactRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutAlternateContactRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutAlternateContactRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AccountId'] && !(typeof data['AccountId'] === 'string' || data['AccountId'] instanceof String)) {
            throw new Error("Expected the field `AccountId` to be a primitive type in the JSON string but got " + data['AccountId']);
        }
        // ensure the json data is a string
        if (data['AlternateContactType'] && !(typeof data['AlternateContactType'] === 'string' || data['AlternateContactType'] instanceof String)) {
            throw new Error("Expected the field `AlternateContactType` to be a primitive type in the JSON string but got " + data['AlternateContactType']);
        }
        // ensure the json data is a string
        if (data['EmailAddress'] && !(typeof data['EmailAddress'] === 'string' || data['EmailAddress'] instanceof String)) {
            throw new Error("Expected the field `EmailAddress` to be a primitive type in the JSON string but got " + data['EmailAddress']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['PhoneNumber'] && !(typeof data['PhoneNumber'] === 'string' || data['PhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `PhoneNumber` to be a primitive type in the JSON string but got " + data['PhoneNumber']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }

        return true;
    }


}

PutAlternateContactRequest.RequiredProperties = ["AlternateContactType", "EmailAddress", "Name", "PhoneNumber", "Title"];

/**
 * <p>Specifies the 12 digit account ID number of the Amazon Web Services account that you want to access or modify with this operation.</p> <p>If you do not specify this parameter, it defaults to the Amazon Web Services account of the identity used to call the operation.</p> <p>To use this parameter, the caller must be an identity in the <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_getting-started_concepts.html#account\">organization's management account</a> or a delegated administrator account, and the specified account ID must be a member account in the same organization. The organization must have <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_org_support-all-features.html\">all features enabled</a>, and the organization must have <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-trusted-access.html\">trusted access</a> enabled for the Account Management service, and optionally a <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/using-orgs-delegated-admin.html\">delegated admin</a> account assigned.</p> <note> <p>The management account can't specify its own <code>AccountId</code>; it must call the operation in standalone context by not including the <code>AccountId</code> parameter.</p> </note> <p>To call this operation on an account that is not a member of an organization, then don't specify this parameter, and call the operation using an identity belonging to the account whose contacts you wish to retrieve or modify.</p>
 * @member {String} AccountId
 */
PutAlternateContactRequest.prototype['AccountId'] = undefined;

/**
 * Specifies which alternate contact you want to create or update.
 * @member {module:model/PutAlternateContactRequest.AlternateContactTypeEnum} AlternateContactType
 */
PutAlternateContactRequest.prototype['AlternateContactType'] = undefined;

/**
 * Specifies an email address for the alternate contact. 
 * @member {String} EmailAddress
 */
PutAlternateContactRequest.prototype['EmailAddress'] = undefined;

/**
 * Specifies a name for the alternate contact.
 * @member {String} Name
 */
PutAlternateContactRequest.prototype['Name'] = undefined;

/**
 * Specifies a phone number for the alternate contact.
 * @member {String} PhoneNumber
 */
PutAlternateContactRequest.prototype['PhoneNumber'] = undefined;

/**
 * Specifies a title for the alternate contact.
 * @member {String} Title
 */
PutAlternateContactRequest.prototype['Title'] = undefined;





/**
 * Allowed values for the <code>AlternateContactType</code> property.
 * @enum {String}
 * @readonly
 */
PutAlternateContactRequest['AlternateContactTypeEnum'] = {

    /**
     * value: "BILLING"
     * @const
     */
    "BILLING": "BILLING",

    /**
     * value: "OPERATIONS"
     * @const
     */
    "OPERATIONS": "OPERATIONS",

    /**
     * value: "SECURITY"
     * @const
     */
    "SECURITY": "SECURITY"
};



export default PutAlternateContactRequest;

