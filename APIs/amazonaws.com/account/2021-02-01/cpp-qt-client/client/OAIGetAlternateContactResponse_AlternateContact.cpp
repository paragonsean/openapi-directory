/**
 * AWS Account
 * Operations for Amazon Web Services Account Management
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAlternateContactResponse_AlternateContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAlternateContactResponse_AlternateContact::OAIGetAlternateContactResponse_AlternateContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAlternateContactResponse_AlternateContact::OAIGetAlternateContactResponse_AlternateContact() {
    this->initializeModel();
}

OAIGetAlternateContactResponse_AlternateContact::~OAIGetAlternateContactResponse_AlternateContact() {}

void OAIGetAlternateContactResponse_AlternateContact::initializeModel() {

    m_alternate_contact_type_isSet = false;
    m_alternate_contact_type_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIGetAlternateContactResponse_AlternateContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAlternateContactResponse_AlternateContact::fromJsonObject(QJsonObject json) {

    m_alternate_contact_type_isValid = ::OpenAPI::fromJsonValue(m_alternate_contact_type, json[QString("AlternateContactType")]);
    m_alternate_contact_type_isSet = !json[QString("AlternateContactType")].isNull() && m_alternate_contact_type_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("EmailAddress")]);
    m_email_address_isSet = !json[QString("EmailAddress")].isNull() && m_email_address_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;
}

QString OAIGetAlternateContactResponse_AlternateContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAlternateContactResponse_AlternateContact::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_contact_type.isSet()) {
        obj.insert(QString("AlternateContactType"), ::OpenAPI::toJsonValue(m_alternate_contact_type));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("EmailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

OAIAlternateContactType OAIGetAlternateContactResponse_AlternateContact::getAlternateContactType() const {
    return m_alternate_contact_type;
}
void OAIGetAlternateContactResponse_AlternateContact::setAlternateContactType(const OAIAlternateContactType &alternate_contact_type) {
    m_alternate_contact_type = alternate_contact_type;
    m_alternate_contact_type_isSet = true;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_alternate_contact_type_Set() const{
    return m_alternate_contact_type_isSet;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_alternate_contact_type_Valid() const{
    return m_alternate_contact_type_isValid;
}

QString OAIGetAlternateContactResponse_AlternateContact::getEmailAddress() const {
    return m_email_address;
}
void OAIGetAlternateContactResponse_AlternateContact::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIGetAlternateContactResponse_AlternateContact::getName() const {
    return m_name;
}
void OAIGetAlternateContactResponse_AlternateContact::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetAlternateContactResponse_AlternateContact::getPhoneNumber() const {
    return m_phone_number;
}
void OAIGetAlternateContactResponse_AlternateContact::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIGetAlternateContactResponse_AlternateContact::getTitle() const {
    return m_title;
}
void OAIGetAlternateContactResponse_AlternateContact::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGetAlternateContactResponse_AlternateContact::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIGetAlternateContactResponse_AlternateContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_contact_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAlternateContactResponse_AlternateContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
