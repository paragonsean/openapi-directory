openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p> <b>Introduction</b> </p> <p>The Amazon Interactive Video Service\
    \ (IVS) real-time API is REST compatible, using a standard HTTP API and an AWS\
    \ EventBridge event stream for responses. JSON is used for both requests and responses,\
    \ including errors. </p> <p>Terminology:</p> <ul> <li> <p>A <i>stage</i> is a\
    \ virtual space where participants can exchange video in real time.</p> </li>\
    \ <li> <p>A <i>participant token</i> is a token that authenticates a participant\
    \ when they join a stage.</p> </li> <li> <p>A <i>participant object</i> represents\
    \ participants (people) in the stage and contains information about them. When\
    \ a token is created, it includes a participant ID; when a participant uses that\
    \ token to join a stage, the participant is associated with that participant ID\
    \ There is a 1:1 mapping between participant tokens and participants.</p> </li>\
    \ </ul> <p> <b>Resources</b> </p> <p>The following resources contain information\
    \ about your IVS live stream (see <a href=\"https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/getting-started.html\"\
    >Getting Started with Amazon IVS Real-Time Streaming</a>):</p> <ul> <li> <p> <b>Stage</b>\
    \ — A stage is a virtual space where participants can exchange video in real time.</p>\
    \ </li> </ul> <p> <b>Tagging</b> </p> <p>A <i>tag</i> is a metadata label that\
    \ you assign to an AWS resource. A tag comprises a <i>key</i> and a <i>value</i>,\
    \ both set by you. For example, you might set a tag as <code>topic:nature</code>\
    \ to label a particular video category. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
    >Tagging AWS Resources</a> for more information, including restrictions that apply\
    \ to tags and \"Tag naming limits and requirements\"; Amazon IVS stages has no\
    \ service-specific constraints beyond what is documented there.</p> <p>Tags can\
    \ help you identify and organize your AWS resources. For example, you can use\
    \ the same tag for different resources to indicate that they are related. You\
    \ can also use tags to manage access (see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html\"\
    >Access Tags</a>).</p> <p>The Amazon IVS real-time API has these tag-related endpoints:\
    \ <a>TagResource</a>, <a>UntagResource</a>, and <a>ListTagsForResource</a>. The\
    \ following resource supports tagging: Stage.</p> <p>At most 50 tags can be applied\
    \ to a resource.</p> <p> <b>Stages Endpoints</b> </p> <ul> <li> <p> <a>CreateParticipantToken</a>\
    \ — Creates an additional token for a specified stage. This can be done after\
    \ stage creation or when tokens expire.</p> </li> <li> <p> <a>CreateStage</a>\
    \ — Creates a new stage (and optionally participant tokens).</p> </li> <li> <p>\
    \ <a>DeleteStage</a> — Shuts down and deletes the specified stage (disconnecting\
    \ all participants).</p> </li> <li> <p> <a>DisconnectParticipant</a> — Disconnects\
    \ a specified participant and revokes the participant permanently from a specified\
    \ stage.</p> </li> <li> <p> <a>GetParticipant</a> — Gets information about the\
    \ specified participant token.</p> </li> <li> <p> <a>GetStage</a> — Gets information\
    \ for the specified stage.</p> </li> <li> <p> <a>GetStageSession</a> — Gets information\
    \ for the specified stage session.</p> </li> <li> <p> <a>ListParticipantEvents</a>\
    \ — Lists events for a specified participant that occurred during a specified\
    \ stage session.</p> </li> <li> <p> <a>ListParticipants</a> — Lists all participants\
    \ in a specified stage session.</p> </li> <li> <p> <a>ListStages</a> — Gets summary\
    \ information about all stages in your account, in the AWS region where the API\
    \ request is processed.</p> </li> <li> <p> <a>ListStageSessions</a> — Gets all\
    \ sessions for a specified stage.</p> </li> <li> <p> <a>UpdateStage</a> — Updates\
    \ a stage’s configuration.</p> </li> </ul> <p> <b>Tags Endpoints</b> </p> <ul>\
    \ <li> <p> <a>ListTagsForResource</a> — Gets information about AWS tags for the\
    \ specified ARN.</p> </li> <li> <p> <a>TagResource</a> — Adds or updates tags\
    \ for the AWS resource with the specified ARN.</p> </li> <li> <p> <a>UntagResource</a>\
    \ — Removes tags from the resource with the specified ARN.</p> </li> </ul>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Interactive Video Service RealTime
  version: 2020-07-14
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: ivs-realtime
  x-aws-signingName: ivs
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ivs-realtime-2020-07-14.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/ivsrealtime/
servers:
- description: The ivsrealtime multi-region endpoint
  url: "http://ivsrealtime.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The ivsrealtime multi-region endpoint
  url: "https://ivsrealtime.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The ivsrealtime endpoint for China (Beijing) and China (Ningxia)
  url: "http://ivsrealtime.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The ivsrealtime endpoint for China (Beijing) and China (Ningxia)
  url: "https://ivsrealtime.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /CreateParticipantToken:
    post:
      description: <p>Creates an additional token for a specified stage. This can
        be done after stage creation or when tokens expire. Tokens always are scoped
        to the stage for which they are created.</p> <p>Encryption keys are owned
        by Amazon IVS and never used directly by your application.</p>
      operationId: CreateParticipantToken
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateParticipantToken_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateParticipantTokenResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
      x-content-type: application/json
      x-accepts:
      - application/json
  /CreateStage:
    post:
      description: Creates a new stage (and optionally participant tokens).
      operationId: CreateStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStage_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
      x-content-type: application/json
      x-accepts:
      - application/json
  /DeleteStage:
    post:
      description: Shuts down and deletes the specified stage (disconnecting all participants).
      operationId: DeleteStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteStage_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteStageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
      x-content-type: application/json
      x-accepts:
      - application/json
  /DisconnectParticipant:
    post:
      description: Disconnects a specified participant and revokes the participant
        permanently from a specified stage.
      operationId: DisconnectParticipant
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisconnectParticipant_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisconnectParticipantResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
      x-content-type: application/json
      x-accepts:
      - application/json
  /GetParticipant:
    post:
      description: Gets information about the specified participant token.
      operationId: GetParticipant
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetParticipant_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetParticipantResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /GetStage:
    post:
      description: Gets information for the specified stage.
      operationId: GetStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetStage_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /GetStageSession:
    post:
      description: Gets information for the specified stage session.
      operationId: GetStageSession
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetStageSession_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStageSessionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /ListParticipantEvents:
    post:
      description: Lists events for a specified participant that occurred during a
        specified stage session.
      operationId: ListParticipantEvents
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListParticipantEvents_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListParticipantEventsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /ListParticipants:
    post:
      description: Lists all participants in a specified stage session.
      operationId: ListParticipants
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListParticipants_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListParticipantsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /ListStageSessions:
    post:
      description: Gets all sessions for a specified stage.
      operationId: ListStageSessions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListStageSessions_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStageSessionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /ListStages:
    post:
      description: "Gets summary information about all stages in your account, in\
        \ the AWS region where the API request is processed."
      operationId: ListStages
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListStages_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStagesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{resourceArn}:
    get:
      description: Gets information about AWS tags for the specified ARN.
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of the resource to be retrieved. The ARN must be URL-encoded.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    post:
      description: Adds or updates tags for the AWS resource with the specified ARN.
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of the resource to be tagged. The ARN must be URL-encoded.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{resourceArn}#tagKeys:
    delete:
      description: Removes tags from the resource with the specified ARN.
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ARN of the resource to be untagged. The ARN must be URL-encoded.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$"
          type: string
        style: simple
      - description: "Array of tags to be removed. Array of maps, each of the form\
          \ <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
          >Tagging AWS Resources</a> for details, including restrictions that apply\
          \ to tags and \"Tag naming limits and requirements\"; Amazon IVS has no\
          \ constraints beyond what is documented there."
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 50
          minItems: 0
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /UpdateStage:
    post:
      description: Updates a stage’s configuration.
      operationId: UpdateStage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStage_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingVerification'
          description: PendingVerification
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateParticipantTokenResponse:
      example:
        participantToken:
          duration: ""
          participantId: ""
          capabilities: ""
          expirationTime: ""
          attributes: ""
          userId: ""
          token: ""
      properties:
        participantToken:
          $ref: '#/components/schemas/CreateParticipantTokenResponse_participantToken'
      type: object
    String:
      type: string
    ParticipantTokenCapability:
      enum:
      - PUBLISH
      - SUBSCRIBE
      type: string
    ResourceNotFoundException: {}
    ValidationException: {}
    AccessDeniedException: {}
    ServiceQuotaExceededException: {}
    PendingVerification: {}
    CreateStageResponse:
      example:
        stage:
          name: ""
          arn: ""
          activeSessionId: ""
          tags: ""
        participantTokens: ""
      properties:
        participantTokens:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenList'
          - description: Participant tokens attached to the stage. These correspond
              to the <code>participants</code> in the request.
        stage:
          $ref: '#/components/schemas/CreateStageResponse_stage'
      type: object
    ParticipantTokenConfiguration:
      description: Object specifying a participant token configuration in a stage.
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenAttributes'
          - description: "Application-provided attributes to encode into the corresponding\
              \ participant token and attach to a stage. Map keys and values can contain\
              \ UTF-8 encoded text. The maximum length of this field is 1 KB total.\
              \ <i>This field is exposed to all stage participants and should not\
              \ be used for personally identifying, confidential, or sensitive information.</i> "
        capabilities:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenCapabilities'
          - description: Set of capabilities that the user is allowed to perform in
              the stage.
        duration:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenDurationMinutes'
          - description: "Duration (in minutes), after which the corresponding participant\
              \ token expires. Default: 720 (12 hours)."
        userId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenUserId'
          - description: "Customer-assigned name to help identify the token; this\
              \ can be used to link a participant to a user in the customer’s own\
              \ systems. This can be any UTF-8 encoded text. <i>This field is exposed\
              \ to all stage participants and should not be used for personally identifying,\
              \ confidential, or sensitive information.</i> "
      type: object
    TagValue:
      maxLength: 256
      minLength: 0
      type: string
    DeleteStageResponse:
      properties: {}
      type: object
    ConflictException: {}
    DisconnectParticipantResponse:
      properties: {}
      type: object
    GetParticipantResponse:
      example:
        participant:
          participantId: ""
          firstJoinTime: ""
          attributes: ""
          published: ""
          state: ""
          userId: ""
      properties:
        participant:
          $ref: '#/components/schemas/GetParticipantResponse_participant'
      type: object
    GetStageResponse:
      example:
        stage:
          name: ""
          arn: ""
          activeSessionId: ""
          tags: ""
      properties:
        stage:
          $ref: '#/components/schemas/GetStageResponse_stage'
      type: object
    GetStageSessionResponse:
      example:
        stageSession:
          startTime: ""
          endTime: ""
          sessionId: ""
      properties:
        stageSession:
          $ref: '#/components/schemas/GetStageSessionResponse_stageSession'
      type: object
    ListParticipantEventsResponse:
      example:
        nextToken: ""
        events: ""
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/EventList'
          - description: List of the matching events.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If there are more rooms than <code>maxResults</code>, use\
              \ <code>nextToken</code> in the request to get the next set. "
      required:
      - events
      type: object
    ListParticipantsResponse:
      example:
        nextToken: ""
        participants: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If there are more rooms than <code>maxResults</code>, use\
              \ <code>nextToken</code> in the request to get the next set."
        participants:
          allOf:
          - $ref: '#/components/schemas/ParticipantList'
          - description: List of the matching participants (summary information only).
      required:
      - participants
      type: object
    ListStageSessionsResponse:
      example:
        stageSessions: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If there are more rooms than <code>maxResults</code>, use\
              \ <code>nextToken</code> in the request to get the next set."
        stageSessions:
          allOf:
          - $ref: '#/components/schemas/StageSessionList'
          - description: List of matching stage sessions.
      required:
      - stageSessions
      type: object
    ListStagesResponse:
      example:
        nextToken: ""
        stages: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If there are more rooms than <code>maxResults</code>, use\
              \ <code>nextToken</code> in the request to get the next set."
        stages:
          allOf:
          - $ref: '#/components/schemas/StageSummaryList'
          - description: List of the matching stages (summary information only).
      required:
      - stages
      type: object
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>."
      required:
      - tags
      type: object
    InternalServerException: {}
    TagResourceResponse:
      properties: {}
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      type: string
    UpdateStageResponse:
      example:
        stage:
          name: ""
          arn: ""
          activeSessionId: ""
          tags: ""
      properties:
        stage:
          $ref: '#/components/schemas/UpdateStageResponse_stage'
      type: object
    ParticipantTokenAttributes:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    ParticipantTokenCapabilities:
      items:
        $ref: '#/components/schemas/ParticipantTokenCapability'
      maxItems: 2
      minItems: 0
      type: array
    ParticipantTokenDurationMinutes:
      maximum: 20160
      minimum: 1
      type: integer
    StageArn:
      maxLength: 128
      minLength: 1
      pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
      type: string
    ParticipantTokenUserId:
      maxLength: 128
      minLength: 0
      type: string
    CreateParticipantTokenRequest:
      example:
        duration: ""
        capabilities: ""
        stageArn: ""
        attributes: ""
        userId: ""
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenAttributes'
          - description: "Application-provided attributes to encode into the token\
              \ and attach to a stage. Map keys and values can contain UTF-8 encoded\
              \ text. The maximum length of this field is 1 KB total. <i>This field\
              \ is exposed to all stage participants and should not be used for personally\
              \ identifying, confidential, or sensitive information.</i> "
        capabilities:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenCapabilities'
          - description: "Set of capabilities that the user is allowed to perform\
              \ in the stage. Default: <code>PUBLISH, SUBSCRIBE</code>."
        duration:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenDurationMinutes'
          - description: "Duration (in minutes), after which the token expires. Default:\
              \ 720 (12 hours)."
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: ARN of the stage to which this token is scoped.
        userId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenUserId'
          - description: "Name that can be specified to help identify the token. This\
              \ can be any UTF-8 encoded text. <i>This field is exposed to all stage\
              \ participants and should not be used for personally identifying, confidential,\
              \ or sensitive information.</i> "
      required:
      - stageArn
      title: CreateParticipantTokenRequest
      type: object
    ParticipantToken:
      description: Object specifying a participant token in a stage.
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenAttributes'
          - description: "Application-provided attributes to encode into the token\
              \ and attach to a stage. <i>This field is exposed to all stage participants\
              \ and should not be used for personally identifying, confidential, or\
              \ sensitive information.</i> "
        capabilities:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenCapabilities'
          - description: Set of capabilities that the user is allowed to perform in
              the stage.
        duration:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenDurationMinutes'
          - description: "Duration (in minutes), after which the participant token\
              \ expires. Default: 720 (12 hours)."
        expirationTime:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenExpirationTime'
          - description: ISO 8601 timestamp (returned as a string) for when this token
              expires.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenId'
          - description: "Unique identifier for this participant token, assigned by\
              \ IVS."
        token:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenString'
          - description: "The issued client token, encrypted."
        userId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenUserId'
          - description: "Customer-assigned name to help identify the token; this\
              \ can be used to link a participant to a user in the customer’s own\
              \ systems. This can be any UTF-8 encoded text. <i>This field is exposed\
              \ to all stage participants and should not be used for personally identifying,\
              \ confidential, or sensitive information.</i> "
      type: object
    StageName:
      maxLength: 128
      minLength: 0
      pattern: "^[a-zA-Z0-9-_]*$"
      type: string
    ParticipantTokenConfigurations:
      items:
        $ref: '#/components/schemas/ParticipantTokenConfiguration'
      maxItems: 12
      minItems: 0
      type: array
    Tags:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      maxProperties: 50
      minProperties: 0
      type: object
    CreateStageRequest:
      example:
        participantTokenConfigurations: ""
        name: ""
        tags: ""
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/StageName'
          - description: Optional name that can be specified for the stage being created.
        participantTokenConfigurations:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenConfigurations'
          - description: Array of participant token configuration objects to attach
              to the new stage.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
              >Tagging AWS Resources</a> for details, including restrictions that\
              \ apply to tags and \"Tag naming limits and requirements\"; Amazon IVS\
              \ has no constraints on tags beyond what is documented there. "
      title: CreateStageRequest
      type: object
    ParticipantTokenList:
      items:
        $ref: '#/components/schemas/ParticipantToken'
      type: array
    Stage:
      description: Object specifying a stage.
      properties:
        activeSessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          - description: ID of the active session within the stage.
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: Stage ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/StageName'
          - description: Stage name.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
              >Tagging AWS Resources</a> for details, including restrictions that\
              \ apply to tags and \"Tag naming limits and requirements\"; Amazon IVS\
              \ has no constraints on tags beyond what is documented there."
      required:
      - arn
      type: object
    DeleteStageRequest:
      example:
        arn: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: ARN of the stage to be deleted.
      required:
      - arn
      title: DeleteStageRequest
      type: object
    DisconnectParticipantReason:
      maxLength: 128
      minLength: 0
      type: string
    ParticipantTokenId:
      type: string
    DisconnectParticipantRequest:
      example:
        participantId: ""
        reason: ""
        stageArn: ""
      properties:
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantTokenId'
          - description: Identifier of the participant to be disconnected. This is
              assigned by IVS and returned by <a>CreateParticipantToken</a>.
        reason:
          allOf:
          - $ref: '#/components/schemas/DisconnectParticipantReason'
          - description: Description of why this participant is being disconnected.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: ARN of the stage to which the participant is attached.
      required:
      - participantId
      - stageArn
      title: DisconnectParticipantRequest
      type: object
    EventErrorCode:
      enum:
      - INSUFFICIENT_CAPABILITIES
      - QUOTA_EXCEEDED
      - PUBLISHER_NOT_FOUND
      type: string
    Time:
      format: date-time
      type: string
    EventName:
      enum:
      - JOINED
      - LEFT
      - PUBLISH_STARTED
      - PUBLISH_STOPPED
      - SUBSCRIBE_STARTED
      - SUBSCRIBE_STOPPED
      - PUBLISH_ERROR
      - SUBSCRIBE_ERROR
      - JOIN_ERROR
      type: string
    ParticipantId:
      type: string
    Event:
      description: An occurrence during a stage session.
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/EventErrorCode'
          - description: "If the event is an error event, the error code is provided\
              \ to give insight into the specific error that occurred. If the event\
              \ is not an error event, this field is null. <code>INSUFFICIENT_CAPABILITIES</code>\
              \ indicates that the participant tried to take an action that the participant’\
              s token is not allowed to do. For more information about participant\
              \ capabilities, see the <code>capabilities</code> field in <a>CreateParticipantToken</a>.\
              \ <code>QUOTA_EXCEEDED</code> indicates that the number of participants\
              \ who want to publish/subscribe to a stage exceeds the quota; for more\
              \ information, see <a href=\"https://docs.aws.amazon.com/ivs/latest/RealTimeUserGuide/service-quotas.html\"\
              >Service Quotas</a>. <code>PUBLISHER_NOT_FOUND</code> indicates that\
              \ the participant tried to subscribe to a publisher that doesn’t exist. "
        eventTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: ISO 8601 timestamp (returned as a string) for when the event
              occurred.
        name:
          allOf:
          - $ref: '#/components/schemas/EventName'
          - description: The name of the event.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          - description: Unique identifier for the participant who triggered the event.
              This is assigned by IVS.
        remoteParticipantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          - description: "Unique identifier for the remote participant. For a subscribe\
              \ event, this is the publisher. For a publish or join event, this is\
              \ null. This is assigned by IVS."
      type: object
    EventList:
      items:
        $ref: '#/components/schemas/Event'
      type: array
    StageSessionId:
      maxLength: 16
      minLength: 16
      pattern: "^st-[a-zA-Z0-9]+$"
      type: string
    GetParticipantRequest:
      example:
        participantId: ""
        stageArn: ""
        sessionId: ""
      properties:
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          - description: Unique identifier for the participant. This is assigned by
              IVS and returned by <a>CreateParticipantToken</a>.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          - description: ID of a session within the stage.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: Stage ARN.
      required:
      - participantId
      - sessionId
      - stageArn
      title: GetParticipantRequest
      type: object
    Participant:
      description: Object describing a participant that has joined a stage.
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/ParticipantAttributes'
          - description: "Application-provided attributes to encode into the token\
              \ and attach to a stage. Map keys and values can contain UTF-8 encoded\
              \ text. The maximum length of this field is 1 KB total. <i>This field\
              \ is exposed to all stage participants and should not be used for personally\
              \ identifying, confidential, or sensitive information</i>."
        firstJoinTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: ISO 8601 timestamp (returned as a string) when the participant
              first joined the stage session.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          - description: "Unique identifier for this participant, assigned by IVS."
        published:
          allOf:
          - $ref: '#/components/schemas/Published'
          - description: Whether the participant ever published to the stage session.
        state:
          allOf:
          - $ref: '#/components/schemas/ParticipantState'
          - description: Whether the participant is connected to or disconnected from
              the stage.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          - description: "Customer-assigned name to help identify the token; this\
              \ can be used to link a participant to a user in the customer’s own\
              \ systems. This can be any UTF-8 encoded text. <i>This field is exposed\
              \ to all stage participants and should not be used for personally identifying,\
              \ confidential, or sensitive information</i>."
      type: object
    GetStageRequest:
      example:
        arn: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: ARN of the stage for which the information is to be retrieved.
      required:
      - arn
      title: GetStageRequest
      type: object
    GetStageSessionRequest:
      example:
        stageArn: ""
        sessionId: ""
      properties:
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          - description: ID of a session within the stage.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: ARN of the stage for which the information is to be retrieved.
      required:
      - sessionId
      - stageArn
      title: GetStageSessionRequest
      type: object
    StageSession:
      description: "A stage session begins when the first participant joins a stage\
        \ and ends after the last participant leaves the stage. A stage session helps\
        \ with debugging stages by grouping events and participants into shorter periods\
        \ of time (i.e., a session), which is helpful when stages are used over long\
        \ periods of time."
      properties:
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: ISO 8601 timestamp (returned as a string) when the stage
              session ended. This is null if the stage is active.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          - description: ID of the session within the stage.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: ' ISO 8601 timestamp (returned as a string) when this stage
              session began.'
      type: object
    MaxParticipantEventResults:
      maximum: 100
      minimum: 1
      type: integer
    PaginationToken:
      maxLength: 1024
      minLength: 0
      pattern: "^[a-zA-Z0-9+/=_-]*$"
      type: string
    ListParticipantEventsRequest:
      example:
        participantId: ""
        stageArn: ""
        maxResults: ""
        nextToken: ""
        sessionId: ""
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxParticipantEventResults'
          - description: "Maximum number of results to return. Default: 50."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: The first participant to retrieve. This is used for pagination;
              see the <code>nextToken</code> response field.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          - description: Unique identifier for this participant. This is assigned
              by IVS and returned by <a>CreateParticipantToken</a>.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          - description: ID of a session within the stage.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: Stage ARN.
      required:
      - participantId
      - sessionId
      - stageArn
      title: ListParticipantEventsRequest
      type: object
    Published:
      type: boolean
    ParticipantState:
      enum:
      - CONNECTED
      - DISCONNECTED
      type: string
    UserId:
      maxLength: 128
      minLength: 0
      type: string
    MaxParticipantResults:
      maximum: 100
      minimum: 1
      type: integer
    ListParticipantsRequest:
      example:
        filterByUserId: ""
        filterByState: ""
        stageArn: ""
        maxResults: ""
        nextToken: ""
        filterByPublished: ""
        sessionId: ""
      properties:
        filterByPublished:
          allOf:
          - $ref: '#/components/schemas/Published'
          - description: "Filters the response list to only show participants who\
              \ published during the stage session. Only one of <code>filterByUserId</code>,\
              \ <code>filterByPublished</code>, or <code>filterByState</code> can\
              \ be provided per request."
        filterByState:
          allOf:
          - $ref: '#/components/schemas/ParticipantState'
          - description: "Filters the response list to only show participants in the\
              \ specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>,\
              \ or <code>filterByState</code> can be provided per request."
        filterByUserId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          - description: "Filters the response list to match the specified user ID.\
              \ Only one of <code>filterByUserId</code>, <code>filterByPublished</code>,\
              \ or <code>filterByState</code> can be provided per request. A <code>userId</code>\
              \ is a customer-assigned name to help identify the token; this can be\
              \ used to link a participant to a user in the customer’s own systems."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxParticipantResults'
          - description: "Maximum number of results to return. Default: 50."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: The first participant to retrieve. This is used for pagination;
              see the <code>nextToken</code> response field.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          - description: ID of the session within the stage.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: Stage ARN.
      required:
      - sessionId
      - stageArn
      title: ListParticipantsRequest
      type: object
    ParticipantList:
      items:
        $ref: '#/components/schemas/ParticipantSummary'
      type: array
    MaxStageSessionResults:
      maximum: 100
      minimum: 1
      type: integer
    ListStageSessionsRequest:
      example:
        stageArn: ""
        maxResults: ""
        nextToken: ""
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxStageSessionResults'
          - description: "Maximum number of results to return. Default: 50."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: The first stage to retrieve. This is used for pagination;
              see the <code>nextToken</code> response field.
        stageArn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: Stage ARN.
      required:
      - stageArn
      title: ListStageSessionsRequest
      type: object
    StageSessionList:
      items:
        $ref: '#/components/schemas/StageSessionSummary'
      type: array
    MaxStageResults:
      maximum: 100
      minimum: 1
      type: integer
    ListStagesRequest:
      example:
        maxResults: ""
        nextToken: ""
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxStageResults'
          - description: "Maximum number of results to return. Default: 50."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: The first stage to retrieve. This is used for pagination;
              see the <code>nextToken</code> response field.
      title: ListStagesRequest
      type: object
    StageSummaryList:
      items:
        $ref: '#/components/schemas/StageSummary'
      type: array
    ResourceArn:
      maxLength: 128
      minLength: 1
      pattern: "^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:[a-z-]/[a-zA-Z0-9-]+$"
      type: string
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    ParticipantAttributes:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    ParticipantSummary:
      description: Summary object describing a participant that has joined a stage.
      properties:
        firstJoinTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: ISO 8601 timestamp (returned as a string) when the participant
              first joined the stage session.
        participantId:
          allOf:
          - $ref: '#/components/schemas/ParticipantId'
          - description: "Unique identifier for this participant, assigned by IVS."
        published:
          allOf:
          - $ref: '#/components/schemas/Published'
          - description: Whether the participant ever published to the stage session.
        state:
          allOf:
          - $ref: '#/components/schemas/ParticipantState'
          - description: Whether the participant is connected to or disconnected from
              the stage.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          - description: "Customer-assigned name to help identify the token; this\
              \ can be used to link a participant to a user in the customer’s own\
              \ systems. This can be any UTF-8 encoded text. <i>This field is exposed\
              \ to all stage participants and should not be used for personally identifying,\
              \ confidential, or sensitive information</i>."
      type: object
    ParticipantTokenExpirationTime:
      format: date-time
      type: string
    ParticipantTokenString:
      format: password
      type: string
    StageSessionSummary:
      description: Summary information about a stage session.
      properties:
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: ISO 8601 timestamp (returned as a string) when the stage
              session ended. This is null if the stage is active.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          - description: ID of the session within the stage.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          - description: ' ISO 8601 timestamp (returned as a string) when this stage
              session began.'
      type: object
    StageSummary:
      description: Summary information about a stage.
      properties:
        activeSessionId:
          allOf:
          - $ref: '#/components/schemas/StageSessionId'
          - description: ID of the active session within the stage.
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: Stage ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/StageName'
          - description: Stage name.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Tags attached to the resource. Array of maps, each of the\
              \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
              >Tagging AWS Resources</a> for details, including restrictions that\
              \ apply to tags and \"Tag naming limits and requirements\"; Amazon IVS\
              \ has no constraints on tags beyond what is documented there."
      required:
      - arn
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 50
      minItems: 0
      type: array
    TagResourceRequest:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          - description: "Array of tags to be added or updated. Array of maps, each\
              \ of the form <code>string:string (key:value)</code>. See <a href=\"\
              https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging\
              \ AWS Resources</a> for details, including restrictions that apply to\
              \ tags and \"Tag naming limits and requirements\"; Amazon IVS has no\
              \ constraints beyond what is documented there."
      required:
      - tags
      title: TagResourceRequest
      type: object
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateStageRequest:
      example:
        name: ""
        arn: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/StageArn'
          - description: ARN of the stage to be updated.
        name:
          allOf:
          - $ref: '#/components/schemas/StageName'
          - description: Name of the stage to be updated.
      required:
      - arn
      title: UpdateStageRequest
      type: object
    CreateParticipantToken_request:
      properties:
        attributes:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "Application-provided attributes to encode into the token and\
            \ attach to a stage. Map keys and values can contain UTF-8 encoded text.\
            \ The maximum length of this field is 1 KB total. <i>This field is exposed\
            \ to all stage participants and should not be used for personally identifying,\
            \ confidential, or sensitive information.</i> "
          type: object
        capabilities:
          description: "Set of capabilities that the user is allowed to perform in\
            \ the stage. Default: <code>PUBLISH, SUBSCRIBE</code>."
          items:
            $ref: '#/components/schemas/ParticipantTokenCapability'
          maxItems: 2
          minItems: 0
          type: array
        duration:
          description: "Duration (in minutes), after which the token expires. Default:\
            \ 720 (12 hours)."
          maximum: 20160
          minimum: 1
          type: integer
        stageArn:
          description: ARN of the stage to which this token is scoped.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
        userId:
          description: "Name that can be specified to help identify the token. This\
            \ can be any UTF-8 encoded text. <i>This field is exposed to all stage\
            \ participants and should not be used for personally identifying, confidential,\
            \ or sensitive information.</i> "
          maxLength: 128
          minLength: 0
          type: string
      required:
      - stageArn
      type: object
    CreateStage_request:
      properties:
        name:
          description: Optional name that can be specified for the stage being created.
          maxLength: 128
          minLength: 0
          pattern: "^[a-zA-Z0-9-_]*$"
          type: string
        participantTokenConfigurations:
          description: Array of participant token configuration objects to attach
            to the new stage.
          items:
            $ref: '#/components/schemas/ParticipantTokenConfiguration'
          maxItems: 12
          minItems: 0
          type: array
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "Tags attached to the resource. Array of maps, each of the\
            \ form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
            >Tagging AWS Resources</a> for details, including restrictions that apply\
            \ to tags and \"Tag naming limits and requirements\"; Amazon IVS has no\
            \ constraints on tags beyond what is documented there. "
          maxProperties: 50
          minProperties: 0
          type: object
      type: object
    DeleteStage_request:
      properties:
        arn:
          description: ARN of the stage to be deleted.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
      required:
      - arn
      type: object
    DisconnectParticipant_request:
      properties:
        participantId:
          description: Identifier of the participant to be disconnected. This is assigned
            by IVS and returned by <a>CreateParticipantToken</a>.
          type: string
        reason:
          description: Description of why this participant is being disconnected.
          maxLength: 128
          minLength: 0
          type: string
        stageArn:
          description: ARN of the stage to which the participant is attached.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
      required:
      - participantId
      - stageArn
      type: object
    GetParticipant_request:
      properties:
        participantId:
          description: Unique identifier for the participant. This is assigned by
            IVS and returned by <a>CreateParticipantToken</a>.
          type: string
        sessionId:
          description: ID of a session within the stage.
          maxLength: 16
          minLength: 16
          pattern: "^st-[a-zA-Z0-9]+$"
          type: string
        stageArn:
          description: Stage ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
      required:
      - participantId
      - sessionId
      - stageArn
      type: object
    GetStage_request:
      properties:
        arn:
          description: ARN of the stage for which the information is to be retrieved.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
      required:
      - arn
      type: object
    GetStageSession_request:
      properties:
        sessionId:
          description: ID of a session within the stage.
          maxLength: 16
          minLength: 16
          pattern: "^st-[a-zA-Z0-9]+$"
          type: string
        stageArn:
          description: ARN of the stage for which the information is to be retrieved.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
      required:
      - sessionId
      - stageArn
      type: object
    ListParticipantEvents_request:
      properties:
        maxResults:
          description: "Maximum number of results to return. Default: 50."
          maximum: 100
          minimum: 1
          type: integer
        nextToken:
          description: The first participant to retrieve. This is used for pagination;
            see the <code>nextToken</code> response field.
          maxLength: 1024
          minLength: 0
          pattern: "^[a-zA-Z0-9+/=_-]*$"
          type: string
        participantId:
          description: Unique identifier for this participant. This is assigned by
            IVS and returned by <a>CreateParticipantToken</a>.
          type: string
        sessionId:
          description: ID of a session within the stage.
          maxLength: 16
          minLength: 16
          pattern: "^st-[a-zA-Z0-9]+$"
          type: string
        stageArn:
          description: Stage ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
      required:
      - participantId
      - sessionId
      - stageArn
      type: object
    ListParticipants_request:
      properties:
        filterByPublished:
          description: "Filters the response list to only show participants who published\
            \ during the stage session. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>,\
            \ or <code>filterByState</code> can be provided per request."
          type: boolean
        filterByState:
          description: "Filters the response list to only show participants in the\
            \ specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>,\
            \ or <code>filterByState</code> can be provided per request."
          enum:
          - CONNECTED
          - DISCONNECTED
          type: string
        filterByUserId:
          description: "Filters the response list to match the specified user ID.\
            \ Only one of <code>filterByUserId</code>, <code>filterByPublished</code>,\
            \ or <code>filterByState</code> can be provided per request. A <code>userId</code>\
            \ is a customer-assigned name to help identify the token; this can be\
            \ used to link a participant to a user in the customer’s own systems."
          maxLength: 128
          minLength: 0
          type: string
        maxResults:
          description: "Maximum number of results to return. Default: 50."
          maximum: 100
          minimum: 1
          type: integer
        nextToken:
          description: The first participant to retrieve. This is used for pagination;
            see the <code>nextToken</code> response field.
          maxLength: 1024
          minLength: 0
          pattern: "^[a-zA-Z0-9+/=_-]*$"
          type: string
        sessionId:
          description: ID of the session within the stage.
          maxLength: 16
          minLength: 16
          pattern: "^st-[a-zA-Z0-9]+$"
          type: string
        stageArn:
          description: Stage ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
      required:
      - sessionId
      - stageArn
      type: object
    ListStageSessions_request:
      properties:
        maxResults:
          description: "Maximum number of results to return. Default: 50."
          maximum: 100
          minimum: 1
          type: integer
        nextToken:
          description: The first stage to retrieve. This is used for pagination; see
            the <code>nextToken</code> response field.
          maxLength: 1024
          minLength: 0
          pattern: "^[a-zA-Z0-9+/=_-]*$"
          type: string
        stageArn:
          description: Stage ARN.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
      required:
      - stageArn
      type: object
    ListStages_request:
      properties:
        maxResults:
          description: "Maximum number of results to return. Default: 50."
          maximum: 100
          minimum: 1
          type: integer
        nextToken:
          description: The first stage to retrieve. This is used for pagination; see
            the <code>nextToken</code> response field.
          maxLength: 1024
          minLength: 0
          pattern: "^[a-zA-Z0-9+/=_-]*$"
          type: string
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: "Array of tags to be added or updated. Array of maps, each\
            \ of the form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\"\
            >Tagging AWS Resources</a> for details, including restrictions that apply\
            \ to tags and \"Tag naming limits and requirements\"; Amazon IVS has no\
            \ constraints beyond what is documented there."
          maxProperties: 50
          minProperties: 0
          type: object
      required:
      - tags
      type: object
    UpdateStage_request:
      properties:
        arn:
          description: ARN of the stage to be updated.
          maxLength: 128
          minLength: 1
          pattern: "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$"
          type: string
        name:
          description: Name of the stage to be updated.
          maxLength: 128
          minLength: 0
          pattern: "^[a-zA-Z0-9-_]*$"
          type: string
      required:
      - arn
      type: object
    CreateParticipantTokenResponse_participantToken:
      allOf:
      - $ref: '#/components/schemas/ParticipantToken'
      - description: The participant token that was created.
      example:
        duration: ""
        participantId: ""
        capabilities: ""
        expirationTime: ""
        attributes: ""
        userId: ""
        token: ""
    CreateStageResponse_stage:
      allOf:
      - $ref: '#/components/schemas/Stage'
      - description: The stage that was created.
      example:
        name: ""
        arn: ""
        activeSessionId: ""
        tags: ""
    GetParticipantResponse_participant:
      allOf:
      - $ref: '#/components/schemas/Participant'
      - description: The participant that is returned.
      example:
        participantId: ""
        firstJoinTime: ""
        attributes: ""
        published: ""
        state: ""
        userId: ""
    GetStageResponse_stage:
      allOf:
      - $ref: '#/components/schemas/Stage'
      - description: The stage that is returned.
      example:
        name: ""
        arn: ""
        activeSessionId: ""
        tags: ""
    GetStageSessionResponse_stageSession:
      allOf:
      - $ref: '#/components/schemas/StageSession'
      - description: The stage session that is returned.
      example:
        startTime: ""
        endTime: ""
        sessionId: ""
    UpdateStageResponse_stage:
      allOf:
      - $ref: '#/components/schemas/Stage'
      - description: The updated stage.
      example:
        name: ""
        arn: ""
        activeSessionId: ""
        tags: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

