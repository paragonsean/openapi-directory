# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_token_configuration import ParticipantTokenConfiguration
import re
from openapi_server import util


class CreateStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, participant_token_configurations: List[ParticipantTokenConfiguration]=None, tags: Dict[str, str]=None):
        """CreateStageRequest - a model defined in OpenAPI

        :param name: The name of this CreateStageRequest.
        :param participant_token_configurations: The participant_token_configurations of this CreateStageRequest.
        :param tags: The tags of this CreateStageRequest.
        """
        self.openapi_types = {
            'name': str,
            'participant_token_configurations': List[ParticipantTokenConfiguration],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'participant_token_configurations': 'participantTokenConfigurations',
            'tags': 'tags'
        }

        self._name = name
        self._participant_token_configurations = participant_token_configurations
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStage_request of this CreateStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateStageRequest.

        Optional name that can be specified for the stage being created.

        :return: The name of this CreateStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateStageRequest.

        Optional name that can be specified for the stage being created.

        :param name: The name of this CreateStageRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'^[a-zA-Z0-9-_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]*$/`")

        self._name = name

    @property
    def participant_token_configurations(self):
        """Gets the participant_token_configurations of this CreateStageRequest.

        Array of participant token configuration objects to attach to the new stage.

        :return: The participant_token_configurations of this CreateStageRequest.
        :rtype: List[ParticipantTokenConfiguration]
        """
        return self._participant_token_configurations

    @participant_token_configurations.setter
    def participant_token_configurations(self, participant_token_configurations):
        """Sets the participant_token_configurations of this CreateStageRequest.

        Array of participant token configuration objects to attach to the new stage.

        :param participant_token_configurations: The participant_token_configurations of this CreateStageRequest.
        :type participant_token_configurations: List[ParticipantTokenConfiguration]
        """
        if participant_token_configurations is not None and len(participant_token_configurations) > 12:
            raise ValueError("Invalid value for `participant_token_configurations`, number of items must be less than or equal to `12`")
        if participant_token_configurations is not None and len(participant_token_configurations) < 0:
            raise ValueError("Invalid value for `participant_token_configurations`, number of items must be greater than or equal to `0`")

        self._participant_token_configurations = participant_token_configurations

    @property
    def tags(self):
        """Gets the tags of this CreateStageRequest.

        Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging AWS Resources</a> for details, including restrictions that apply to tags and \"Tag naming limits and requirements\"; Amazon IVS has no constraints on tags beyond what is documented there. 

        :return: The tags of this CreateStageRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStageRequest.

        Tags attached to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging AWS Resources</a> for details, including restrictions that apply to tags and \"Tag naming limits and requirements\"; Amazon IVS has no constraints on tags beyond what is documented there. 

        :param tags: The tags of this CreateStageRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
