# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListParticipantsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_by_published: bool=None, filter_by_state: str=None, filter_by_user_id: str=None, max_results: int=None, next_token: str=None, session_id: str=None, stage_arn: str=None):
        """ListParticipantsRequest - a model defined in OpenAPI

        :param filter_by_published: The filter_by_published of this ListParticipantsRequest.
        :param filter_by_state: The filter_by_state of this ListParticipantsRequest.
        :param filter_by_user_id: The filter_by_user_id of this ListParticipantsRequest.
        :param max_results: The max_results of this ListParticipantsRequest.
        :param next_token: The next_token of this ListParticipantsRequest.
        :param session_id: The session_id of this ListParticipantsRequest.
        :param stage_arn: The stage_arn of this ListParticipantsRequest.
        """
        self.openapi_types = {
            'filter_by_published': bool,
            'filter_by_state': str,
            'filter_by_user_id': str,
            'max_results': int,
            'next_token': str,
            'session_id': str,
            'stage_arn': str
        }

        self.attribute_map = {
            'filter_by_published': 'filterByPublished',
            'filter_by_state': 'filterByState',
            'filter_by_user_id': 'filterByUserId',
            'max_results': 'maxResults',
            'next_token': 'nextToken',
            'session_id': 'sessionId',
            'stage_arn': 'stageArn'
        }

        self._filter_by_published = filter_by_published
        self._filter_by_state = filter_by_state
        self._filter_by_user_id = filter_by_user_id
        self._max_results = max_results
        self._next_token = next_token
        self._session_id = session_id
        self._stage_arn = stage_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListParticipantsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListParticipants_request of this ListParticipantsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_by_published(self):
        """Gets the filter_by_published of this ListParticipantsRequest.

        Filters the response list to only show participants who published during the stage session. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.

        :return: The filter_by_published of this ListParticipantsRequest.
        :rtype: bool
        """
        return self._filter_by_published

    @filter_by_published.setter
    def filter_by_published(self, filter_by_published):
        """Sets the filter_by_published of this ListParticipantsRequest.

        Filters the response list to only show participants who published during the stage session. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.

        :param filter_by_published: The filter_by_published of this ListParticipantsRequest.
        :type filter_by_published: bool
        """

        self._filter_by_published = filter_by_published

    @property
    def filter_by_state(self):
        """Gets the filter_by_state of this ListParticipantsRequest.

        Filters the response list to only show participants in the specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.

        :return: The filter_by_state of this ListParticipantsRequest.
        :rtype: str
        """
        return self._filter_by_state

    @filter_by_state.setter
    def filter_by_state(self, filter_by_state):
        """Sets the filter_by_state of this ListParticipantsRequest.

        Filters the response list to only show participants in the specified state. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request.

        :param filter_by_state: The filter_by_state of this ListParticipantsRequest.
        :type filter_by_state: str
        """
        allowed_values = ["CONNECTED", "DISCONNECTED"]  # noqa: E501
        if filter_by_state not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_by_state` ({0}), must be one of {1}"
                .format(filter_by_state, allowed_values)
            )

        self._filter_by_state = filter_by_state

    @property
    def filter_by_user_id(self):
        """Gets the filter_by_user_id of this ListParticipantsRequest.

        Filters the response list to match the specified user ID. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request. A <code>userId</code> is a customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems.

        :return: The filter_by_user_id of this ListParticipantsRequest.
        :rtype: str
        """
        return self._filter_by_user_id

    @filter_by_user_id.setter
    def filter_by_user_id(self, filter_by_user_id):
        """Sets the filter_by_user_id of this ListParticipantsRequest.

        Filters the response list to match the specified user ID. Only one of <code>filterByUserId</code>, <code>filterByPublished</code>, or <code>filterByState</code> can be provided per request. A <code>userId</code> is a customer-assigned name to help identify the token; this can be used to link a participant to a user in the customer’s own systems.

        :param filter_by_user_id: The filter_by_user_id of this ListParticipantsRequest.
        :type filter_by_user_id: str
        """
        if filter_by_user_id is not None and len(filter_by_user_id) > 128:
            raise ValueError("Invalid value for `filter_by_user_id`, length must be less than or equal to `128`")
        if filter_by_user_id is not None and len(filter_by_user_id) < 0:
            raise ValueError("Invalid value for `filter_by_user_id`, length must be greater than or equal to `0`")

        self._filter_by_user_id = filter_by_user_id

    @property
    def max_results(self):
        """Gets the max_results of this ListParticipantsRequest.

        Maximum number of results to return. Default: 50.

        :return: The max_results of this ListParticipantsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListParticipantsRequest.

        Maximum number of results to return. Default: 50.

        :param max_results: The max_results of this ListParticipantsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListParticipantsRequest.

        The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.

        :return: The next_token of this ListParticipantsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListParticipantsRequest.

        The first participant to retrieve. This is used for pagination; see the <code>nextToken</code> response field.

        :param next_token: The next_token of this ListParticipantsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1024:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1024`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")
        if next_token is not None and not re.search(r'^[a-zA-Z0-9+\/=_-]*$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9+\/=_-]*$/`")

        self._next_token = next_token

    @property
    def session_id(self):
        """Gets the session_id of this ListParticipantsRequest.

        ID of the session within the stage.

        :return: The session_id of this ListParticipantsRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this ListParticipantsRequest.

        ID of the session within the stage.

        :param session_id: The session_id of this ListParticipantsRequest.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")
        if session_id is not None and len(session_id) > 16:
            raise ValueError("Invalid value for `session_id`, length must be less than or equal to `16`")
        if session_id is not None and len(session_id) < 16:
            raise ValueError("Invalid value for `session_id`, length must be greater than or equal to `16`")
        if session_id is not None and not re.search(r'^st-[a-zA-Z0-9]+$', session_id):
            raise ValueError("Invalid value for `session_id`, must be a follow pattern or equal to `/^st-[a-zA-Z0-9]+$/`")

        self._session_id = session_id

    @property
    def stage_arn(self):
        """Gets the stage_arn of this ListParticipantsRequest.

        Stage ARN.

        :return: The stage_arn of this ListParticipantsRequest.
        :rtype: str
        """
        return self._stage_arn

    @stage_arn.setter
    def stage_arn(self, stage_arn):
        """Sets the stage_arn of this ListParticipantsRequest.

        Stage ARN.

        :param stage_arn: The stage_arn of this ListParticipantsRequest.
        :type stage_arn: str
        """
        if stage_arn is None:
            raise ValueError("Invalid value for `stage_arn`, must not be `None`")
        if stage_arn is not None and len(stage_arn) > 128:
            raise ValueError("Invalid value for `stage_arn`, length must be less than or equal to `128`")
        if stage_arn is not None and len(stage_arn) < 1:
            raise ValueError("Invalid value for `stage_arn`, length must be greater than or equal to `1`")
        if stage_arn is not None and not re.search(r'^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage\/[a-zA-Z0-9-]+$', stage_arn):
            raise ValueError("Invalid value for `stage_arn`, must be a follow pattern or equal to `/^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage\/[a-zA-Z0-9-]+$/`")

        self._stage_arn = stage_arn
