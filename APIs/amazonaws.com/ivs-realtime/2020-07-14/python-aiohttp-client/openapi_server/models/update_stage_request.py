# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateStageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None):
        """UpdateStageRequest - a model defined in OpenAPI

        :param arn: The arn of this UpdateStageRequest.
        :param name: The name of this UpdateStageRequest.
        """
        self.openapi_types = {
            'arn': str,
            'name': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'name': 'name'
        }

        self._arn = arn
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateStageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateStage_request of this UpdateStageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this UpdateStageRequest.

        ARN of the stage to be updated.

        :return: The arn of this UpdateStageRequest.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this UpdateStageRequest.

        ARN of the stage to be updated.

        :param arn: The arn of this UpdateStageRequest.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")
        if arn is not None and len(arn) > 128:
            raise ValueError("Invalid value for `arn`, length must be less than or equal to `128`")
        if arn is not None and len(arn) < 1:
            raise ValueError("Invalid value for `arn`, length must be greater than or equal to `1`")
        if arn is not None and not re.search(r'^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage\/[a-zA-Z0-9-]+$', arn):
            raise ValueError("Invalid value for `arn`, must be a follow pattern or equal to `/^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage\/[a-zA-Z0-9-]+$/`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this UpdateStageRequest.

        Name of the stage to be updated.

        :return: The name of this UpdateStageRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateStageRequest.

        Name of the stage to be updated.

        :param name: The name of this UpdateStageRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'^[a-zA-Z0-9-_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]*$/`")

        self._name = name
