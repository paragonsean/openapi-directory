# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_state import ParticipantState
from openapi_server import util


class Participant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict=None, first_join_time: datetime=None, participant_id: str=None, published: bool=None, state: ParticipantState=None, user_id: str=None):
        """Participant - a model defined in OpenAPI

        :param attributes: The attributes of this Participant.
        :param first_join_time: The first_join_time of this Participant.
        :param participant_id: The participant_id of this Participant.
        :param published: The published of this Participant.
        :param state: The state of this Participant.
        :param user_id: The user_id of this Participant.
        """
        self.openapi_types = {
            'attributes': Dict,
            'first_join_time': datetime,
            'participant_id': str,
            'published': bool,
            'state': ParticipantState,
            'user_id': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'first_join_time': 'firstJoinTime',
            'participant_id': 'participantId',
            'published': 'published',
            'state': 'state',
            'user_id': 'userId'
        }

        self._attributes = attributes
        self._first_join_time = first_join_time
        self._participant_id = participant_id
        self._published = published
        self._state = state
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Participant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Participant of this Participant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Participant.


        :return: The attributes of this Participant.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Participant.


        :param attributes: The attributes of this Participant.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def first_join_time(self):
        """Gets the first_join_time of this Participant.


        :return: The first_join_time of this Participant.
        :rtype: datetime
        """
        return self._first_join_time

    @first_join_time.setter
    def first_join_time(self, first_join_time):
        """Sets the first_join_time of this Participant.


        :param first_join_time: The first_join_time of this Participant.
        :type first_join_time: datetime
        """

        self._first_join_time = first_join_time

    @property
    def participant_id(self):
        """Gets the participant_id of this Participant.


        :return: The participant_id of this Participant.
        :rtype: str
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """Sets the participant_id of this Participant.


        :param participant_id: The participant_id of this Participant.
        :type participant_id: str
        """

        self._participant_id = participant_id

    @property
    def published(self):
        """Gets the published of this Participant.


        :return: The published of this Participant.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Participant.


        :param published: The published of this Participant.
        :type published: bool
        """

        self._published = published

    @property
    def state(self):
        """Gets the state of this Participant.


        :return: The state of this Participant.
        :rtype: ParticipantState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Participant.


        :param state: The state of this Participant.
        :type state: ParticipantState
        """

        self._state = state

    @property
    def user_id(self):
        """Gets the user_id of this Participant.


        :return: The user_id of this Participant.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Participant.


        :param user_id: The user_id of this Participant.
        :type user_id: str
        """

        self._user_id = user_id
