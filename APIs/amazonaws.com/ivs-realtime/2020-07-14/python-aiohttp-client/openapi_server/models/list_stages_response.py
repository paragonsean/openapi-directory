# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListStagesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, stages: List=None):
        """ListStagesResponse - a model defined in OpenAPI

        :param next_token: The next_token of this ListStagesResponse.
        :param stages: The stages of this ListStagesResponse.
        """
        self.openapi_types = {
            'next_token': str,
            'stages': List
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'stages': 'stages'
        }

        self._next_token = next_token
        self._stages = stages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListStagesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListStagesResponse of this ListStagesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListStagesResponse.


        :return: The next_token of this ListStagesResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListStagesResponse.


        :param next_token: The next_token of this ListStagesResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def stages(self):
        """Gets the stages of this ListStagesResponse.


        :return: The stages of this ListStagesResponse.
        :rtype: List
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this ListStagesResponse.


        :param stages: The stages of this ListStagesResponse.
        :type stages: List
        """
        if stages is None:
            raise ValueError("Invalid value for `stages`, must not be `None`")

        self._stages = stages
