# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_token_capability import ParticipantTokenCapability
import re
from openapi_server import util


class CreateParticipantTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, capabilities: List[ParticipantTokenCapability]=None, duration: int=None, stage_arn: str=None, user_id: str=None):
        """CreateParticipantTokenRequest - a model defined in OpenAPI

        :param attributes: The attributes of this CreateParticipantTokenRequest.
        :param capabilities: The capabilities of this CreateParticipantTokenRequest.
        :param duration: The duration of this CreateParticipantTokenRequest.
        :param stage_arn: The stage_arn of this CreateParticipantTokenRequest.
        :param user_id: The user_id of this CreateParticipantTokenRequest.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'capabilities': List[ParticipantTokenCapability],
            'duration': int,
            'stage_arn': str,
            'user_id': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'capabilities': 'capabilities',
            'duration': 'duration',
            'stage_arn': 'stageArn',
            'user_id': 'userId'
        }

        self._attributes = attributes
        self._capabilities = capabilities
        self._duration = duration
        self._stage_arn = stage_arn
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateParticipantTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateParticipantToken_request of this CreateParticipantTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this CreateParticipantTokenRequest.

        Application-provided attributes to encode into the token and attach to a stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> 

        :return: The attributes of this CreateParticipantTokenRequest.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CreateParticipantTokenRequest.

        Application-provided attributes to encode into the token and attach to a stage. Map keys and values can contain UTF-8 encoded text. The maximum length of this field is 1 KB total. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> 

        :param attributes: The attributes of this CreateParticipantTokenRequest.
        :type attributes: Dict[str, str]
        """

        self._attributes = attributes

    @property
    def capabilities(self):
        """Gets the capabilities of this CreateParticipantTokenRequest.

        Set of capabilities that the user is allowed to perform in the stage. Default: <code>PUBLISH, SUBSCRIBE</code>.

        :return: The capabilities of this CreateParticipantTokenRequest.
        :rtype: List[ParticipantTokenCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this CreateParticipantTokenRequest.

        Set of capabilities that the user is allowed to perform in the stage. Default: <code>PUBLISH, SUBSCRIBE</code>.

        :param capabilities: The capabilities of this CreateParticipantTokenRequest.
        :type capabilities: List[ParticipantTokenCapability]
        """
        if capabilities is not None and len(capabilities) > 2:
            raise ValueError("Invalid value for `capabilities`, number of items must be less than or equal to `2`")
        if capabilities is not None and len(capabilities) < 0:
            raise ValueError("Invalid value for `capabilities`, number of items must be greater than or equal to `0`")

        self._capabilities = capabilities

    @property
    def duration(self):
        """Gets the duration of this CreateParticipantTokenRequest.

        Duration (in minutes), after which the token expires. Default: 720 (12 hours).

        :return: The duration of this CreateParticipantTokenRequest.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreateParticipantTokenRequest.

        Duration (in minutes), after which the token expires. Default: 720 (12 hours).

        :param duration: The duration of this CreateParticipantTokenRequest.
        :type duration: int
        """
        if duration is not None and duration > 20160:
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `20160`")
        if duration is not None and duration < 1:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `1`")

        self._duration = duration

    @property
    def stage_arn(self):
        """Gets the stage_arn of this CreateParticipantTokenRequest.

        ARN of the stage to which this token is scoped.

        :return: The stage_arn of this CreateParticipantTokenRequest.
        :rtype: str
        """
        return self._stage_arn

    @stage_arn.setter
    def stage_arn(self, stage_arn):
        """Sets the stage_arn of this CreateParticipantTokenRequest.

        ARN of the stage to which this token is scoped.

        :param stage_arn: The stage_arn of this CreateParticipantTokenRequest.
        :type stage_arn: str
        """
        if stage_arn is None:
            raise ValueError("Invalid value for `stage_arn`, must not be `None`")
        if stage_arn is not None and len(stage_arn) > 128:
            raise ValueError("Invalid value for `stage_arn`, length must be less than or equal to `128`")
        if stage_arn is not None and len(stage_arn) < 1:
            raise ValueError("Invalid value for `stage_arn`, length must be greater than or equal to `1`")
        if stage_arn is not None and not re.search(r'^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage\/[a-zA-Z0-9-]+$', stage_arn):
            raise ValueError("Invalid value for `stage_arn`, must be a follow pattern or equal to `/^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage\/[a-zA-Z0-9-]+$/`")

        self._stage_arn = stage_arn

    @property
    def user_id(self):
        """Gets the user_id of this CreateParticipantTokenRequest.

        Name that can be specified to help identify the token. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> 

        :return: The user_id of this CreateParticipantTokenRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CreateParticipantTokenRequest.

        Name that can be specified to help identify the token. This can be any UTF-8 encoded text. <i>This field is exposed to all stage participants and should not be used for personally identifying, confidential, or sensitive information.</i> 

        :param user_id: The user_id of this CreateParticipantTokenRequest.
        :type user_id: str
        """
        if user_id is not None and len(user_id) > 128:
            raise ValueError("Invalid value for `user_id`, length must be less than or equal to `128`")
        if user_id is not None and len(user_id) < 0:
            raise ValueError("Invalid value for `user_id`, length must be greater than or equal to `0`")

        self._user_id = user_id
