# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DisconnectParticipantRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, participant_id: str=None, reason: str=None, stage_arn: str=None):
        """DisconnectParticipantRequest - a model defined in OpenAPI

        :param participant_id: The participant_id of this DisconnectParticipantRequest.
        :param reason: The reason of this DisconnectParticipantRequest.
        :param stage_arn: The stage_arn of this DisconnectParticipantRequest.
        """
        self.openapi_types = {
            'participant_id': str,
            'reason': str,
            'stage_arn': str
        }

        self.attribute_map = {
            'participant_id': 'participantId',
            'reason': 'reason',
            'stage_arn': 'stageArn'
        }

        self._participant_id = participant_id
        self._reason = reason
        self._stage_arn = stage_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisconnectParticipantRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisconnectParticipant_request of this DisconnectParticipantRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def participant_id(self):
        """Gets the participant_id of this DisconnectParticipantRequest.

        Identifier of the participant to be disconnected. This is assigned by IVS and returned by <a>CreateParticipantToken</a>.

        :return: The participant_id of this DisconnectParticipantRequest.
        :rtype: str
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """Sets the participant_id of this DisconnectParticipantRequest.

        Identifier of the participant to be disconnected. This is assigned by IVS and returned by <a>CreateParticipantToken</a>.

        :param participant_id: The participant_id of this DisconnectParticipantRequest.
        :type participant_id: str
        """
        if participant_id is None:
            raise ValueError("Invalid value for `participant_id`, must not be `None`")

        self._participant_id = participant_id

    @property
    def reason(self):
        """Gets the reason of this DisconnectParticipantRequest.

        Description of why this participant is being disconnected.

        :return: The reason of this DisconnectParticipantRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DisconnectParticipantRequest.

        Description of why this participant is being disconnected.

        :param reason: The reason of this DisconnectParticipantRequest.
        :type reason: str
        """
        if reason is not None and len(reason) > 128:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `128`")
        if reason is not None and len(reason) < 0:
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `0`")

        self._reason = reason

    @property
    def stage_arn(self):
        """Gets the stage_arn of this DisconnectParticipantRequest.

        ARN of the stage to which the participant is attached.

        :return: The stage_arn of this DisconnectParticipantRequest.
        :rtype: str
        """
        return self._stage_arn

    @stage_arn.setter
    def stage_arn(self, stage_arn):
        """Sets the stage_arn of this DisconnectParticipantRequest.

        ARN of the stage to which the participant is attached.

        :param stage_arn: The stage_arn of this DisconnectParticipantRequest.
        :type stage_arn: str
        """
        if stage_arn is None:
            raise ValueError("Invalid value for `stage_arn`, must not be `None`")
        if stage_arn is not None and len(stage_arn) > 128:
            raise ValueError("Invalid value for `stage_arn`, length must be less than or equal to `128`")
        if stage_arn is not None and len(stage_arn) < 1:
            raise ValueError("Invalid value for `stage_arn`, length must be greater than or equal to `1`")
        if stage_arn is not None and not re.search(r'^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage\/[a-zA-Z0-9-]+$', stage_arn):
            raise ValueError("Invalid value for `stage_arn`, must be a follow pattern or equal to `/^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage\/[a-zA-Z0-9-]+$/`")

        self._stage_arn = stage_arn
