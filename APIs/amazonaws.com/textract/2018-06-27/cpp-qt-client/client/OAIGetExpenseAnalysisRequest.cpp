/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetExpenseAnalysisRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetExpenseAnalysisRequest::OAIGetExpenseAnalysisRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetExpenseAnalysisRequest::OAIGetExpenseAnalysisRequest() {
    this->initializeModel();
}

OAIGetExpenseAnalysisRequest::~OAIGetExpenseAnalysisRequest() {}

void OAIGetExpenseAnalysisRequest::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetExpenseAnalysisRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetExpenseAnalysisRequest::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetExpenseAnalysisRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetExpenseAnalysisRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIGetExpenseAnalysisRequest::getJobId() const {
    return m_job_id;
}
void OAIGetExpenseAnalysisRequest::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIGetExpenseAnalysisRequest::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIGetExpenseAnalysisRequest::is_job_id_Valid() const{
    return m_job_id_isValid;
}

qint32 OAIGetExpenseAnalysisRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetExpenseAnalysisRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetExpenseAnalysisRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetExpenseAnalysisRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetExpenseAnalysisRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetExpenseAnalysisRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetExpenseAnalysisRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetExpenseAnalysisRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetExpenseAnalysisRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetExpenseAnalysisRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_id_isValid && true;
}

} // namespace OpenAPI
