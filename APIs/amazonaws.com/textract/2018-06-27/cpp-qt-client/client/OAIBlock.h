/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBlock.h
 *
 * &lt;p&gt;A &lt;code&gt;Block&lt;/code&gt; represents items that are recognized in a document within a group of pixels close to each other. The information returned in a &lt;code&gt;Block&lt;/code&gt; object depends on the type of operation. In text detection for documents (for example &lt;a&gt;DetectDocumentText&lt;/a&gt;), you get information about the detected words and lines of text. In text analysis (for example &lt;a&gt;AnalyzeDocument&lt;/a&gt;), you can also get information about the fields, tables, and selection elements that are detected in the document.&lt;/p&gt; &lt;p&gt;An array of &lt;code&gt;Block&lt;/code&gt; objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as &lt;a&gt;DetectDocumentText&lt;/a&gt;, the array of &lt;code&gt;Block&lt;/code&gt; objects is the entire set of results. In asynchronous operations, such as &lt;a&gt;GetDocumentAnalysis&lt;/a&gt;, the array is returned over one or more responses.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html\&quot;&gt;How Amazon Textract Works&lt;/a&gt;.&lt;/p&gt;
 */

#ifndef OAIBlock_H
#define OAIBlock_H

#include <QJsonObject>

#include "OAIBlockType.h"
#include "OAIBlock_Geometry.h"
#include "OAIBlock_Query.h"
#include "OAISelectionStatus.h"
#include "OAITextType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBlock_Geometry;
class OAIBlock_Query;

class OAIBlock : public OAIObject {
public:
    OAIBlock();
    OAIBlock(QString json);
    ~OAIBlock() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBlockType getBlockType() const;
    void setBlockType(const OAIBlockType &block_type);
    bool is_block_type_Set() const;
    bool is_block_type_Valid() const;

    float getConfidence() const;
    void setConfidence(const float &confidence);
    bool is_confidence_Set() const;
    bool is_confidence_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    OAITextType getTextType() const;
    void setTextType(const OAITextType &text_type);
    bool is_text_type_Set() const;
    bool is_text_type_Valid() const;

    qint32 getRowIndex() const;
    void setRowIndex(const qint32 &row_index);
    bool is_row_index_Set() const;
    bool is_row_index_Valid() const;

    qint32 getColumnIndex() const;
    void setColumnIndex(const qint32 &column_index);
    bool is_column_index_Set() const;
    bool is_column_index_Valid() const;

    qint32 getRowSpan() const;
    void setRowSpan(const qint32 &row_span);
    bool is_row_span_Set() const;
    bool is_row_span_Valid() const;

    qint32 getColumnSpan() const;
    void setColumnSpan(const qint32 &column_span);
    bool is_column_span_Set() const;
    bool is_column_span_Valid() const;

    OAIBlock_Geometry getGeometry() const;
    void setGeometry(const OAIBlock_Geometry &geometry);
    bool is_geometry_Set() const;
    bool is_geometry_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList getRelationships() const;
    void setRelationships(const QList &relationships);
    bool is_relationships_Set() const;
    bool is_relationships_Valid() const;

    QList getEntityTypes() const;
    void setEntityTypes(const QList &entity_types);
    bool is_entity_types_Set() const;
    bool is_entity_types_Valid() const;

    OAISelectionStatus getSelectionStatus() const;
    void setSelectionStatus(const OAISelectionStatus &selection_status);
    bool is_selection_status_Set() const;
    bool is_selection_status_Valid() const;

    qint32 getPage() const;
    void setPage(const qint32 &page);
    bool is_page_Set() const;
    bool is_page_Valid() const;

    OAIBlock_Query getQuery() const;
    void setQuery(const OAIBlock_Query &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBlockType m_block_type;
    bool m_block_type_isSet;
    bool m_block_type_isValid;

    float m_confidence;
    bool m_confidence_isSet;
    bool m_confidence_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    OAITextType m_text_type;
    bool m_text_type_isSet;
    bool m_text_type_isValid;

    qint32 m_row_index;
    bool m_row_index_isSet;
    bool m_row_index_isValid;

    qint32 m_column_index;
    bool m_column_index_isSet;
    bool m_column_index_isValid;

    qint32 m_row_span;
    bool m_row_span_isSet;
    bool m_row_span_isValid;

    qint32 m_column_span;
    bool m_column_span_isSet;
    bool m_column_span_isValid;

    OAIBlock_Geometry m_geometry;
    bool m_geometry_isSet;
    bool m_geometry_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList m_relationships;
    bool m_relationships_isSet;
    bool m_relationships_isValid;

    QList m_entity_types;
    bool m_entity_types_isSet;
    bool m_entity_types_isValid;

    OAISelectionStatus m_selection_status;
    bool m_selection_status_isSet;
    bool m_selection_status_isValid;

    qint32 m_page;
    bool m_page_isSet;
    bool m_page_isValid;

    OAIBlock_Query m_query;
    bool m_query_isSet;
    bool m_query_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBlock)

#endif // OAIBlock_H
