/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILendingField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILendingField::OAILendingField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILendingField::OAILendingField() {
    this->initializeModel();
}

OAILendingField::~OAILendingField() {}

void OAILendingField::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_key_detection_isSet = false;
    m_key_detection_isValid = false;

    m_value_detections_isSet = false;
    m_value_detections_isValid = false;
}

void OAILendingField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILendingField::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_key_detection_isValid = ::OpenAPI::fromJsonValue(m_key_detection, json[QString("KeyDetection")]);
    m_key_detection_isSet = !json[QString("KeyDetection")].isNull() && m_key_detection_isValid;

    m_value_detections_isValid = ::OpenAPI::fromJsonValue(m_value_detections, json[QString("ValueDetections")]);
    m_value_detections_isSet = !json[QString("ValueDetections")].isNull() && m_value_detections_isValid;
}

QString OAILendingField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILendingField::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_key_detection.isSet()) {
        obj.insert(QString("KeyDetection"), ::OpenAPI::toJsonValue(m_key_detection));
    }
    if (m_value_detections.isSet()) {
        obj.insert(QString("ValueDetections"), ::OpenAPI::toJsonValue(m_value_detections));
    }
    return obj;
}

QString OAILendingField::getType() const {
    return m_type;
}
void OAILendingField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILendingField::is_type_Set() const{
    return m_type_isSet;
}

bool OAILendingField::is_type_Valid() const{
    return m_type_isValid;
}

OAILendingDetection OAILendingField::getKeyDetection() const {
    return m_key_detection;
}
void OAILendingField::setKeyDetection(const OAILendingDetection &key_detection) {
    m_key_detection = key_detection;
    m_key_detection_isSet = true;
}

bool OAILendingField::is_key_detection_Set() const{
    return m_key_detection_isSet;
}

bool OAILendingField::is_key_detection_Valid() const{
    return m_key_detection_isValid;
}

QList OAILendingField::getValueDetections() const {
    return m_value_detections;
}
void OAILendingField::setValueDetections(const QList &value_detections) {
    m_value_detections = value_detections;
    m_value_detections_isSet = true;
}

bool OAILendingField::is_value_detections_Set() const{
    return m_value_detections_isSet;
}

bool OAILendingField::is_value_detections_Valid() const{
    return m_value_detections_isValid;
}

bool OAILendingField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_detections.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILendingField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
