/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetExpenseAnalysisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetExpenseAnalysisResponse::OAIGetExpenseAnalysisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetExpenseAnalysisResponse::OAIGetExpenseAnalysisResponse() {
    this->initializeModel();
}

OAIGetExpenseAnalysisResponse::~OAIGetExpenseAnalysisResponse() {}

void OAIGetExpenseAnalysisResponse::initializeModel() {

    m_document_metadata_isSet = false;
    m_document_metadata_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_expense_documents_isSet = false;
    m_expense_documents_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_analyze_expense_model_version_isSet = false;
    m_analyze_expense_model_version_isValid = false;
}

void OAIGetExpenseAnalysisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetExpenseAnalysisResponse::fromJsonObject(QJsonObject json) {

    m_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_document_metadata, json[QString("DocumentMetadata")]);
    m_document_metadata_isSet = !json[QString("DocumentMetadata")].isNull() && m_document_metadata_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_expense_documents_isValid = ::OpenAPI::fromJsonValue(m_expense_documents, json[QString("ExpenseDocuments")]);
    m_expense_documents_isSet = !json[QString("ExpenseDocuments")].isNull() && m_expense_documents_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_analyze_expense_model_version_isValid = ::OpenAPI::fromJsonValue(m_analyze_expense_model_version, json[QString("AnalyzeExpenseModelVersion")]);
    m_analyze_expense_model_version_isSet = !json[QString("AnalyzeExpenseModelVersion")].isNull() && m_analyze_expense_model_version_isValid;
}

QString OAIGetExpenseAnalysisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetExpenseAnalysisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_document_metadata.isSet()) {
        obj.insert(QString("DocumentMetadata"), ::OpenAPI::toJsonValue(m_document_metadata));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_expense_documents.isSet()) {
        obj.insert(QString("ExpenseDocuments"), ::OpenAPI::toJsonValue(m_expense_documents));
    }
    if (m_warnings.isSet()) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_analyze_expense_model_version_isSet) {
        obj.insert(QString("AnalyzeExpenseModelVersion"), ::OpenAPI::toJsonValue(m_analyze_expense_model_version));
    }
    return obj;
}

OAIGetExpenseAnalysisResponse_DocumentMetadata OAIGetExpenseAnalysisResponse::getDocumentMetadata() const {
    return m_document_metadata;
}
void OAIGetExpenseAnalysisResponse::setDocumentMetadata(const OAIGetExpenseAnalysisResponse_DocumentMetadata &document_metadata) {
    m_document_metadata = document_metadata;
    m_document_metadata_isSet = true;
}

bool OAIGetExpenseAnalysisResponse::is_document_metadata_Set() const{
    return m_document_metadata_isSet;
}

bool OAIGetExpenseAnalysisResponse::is_document_metadata_Valid() const{
    return m_document_metadata_isValid;
}

OAIJobStatus OAIGetExpenseAnalysisResponse::getJobStatus() const {
    return m_job_status;
}
void OAIGetExpenseAnalysisResponse::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIGetExpenseAnalysisResponse::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIGetExpenseAnalysisResponse::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QString OAIGetExpenseAnalysisResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetExpenseAnalysisResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetExpenseAnalysisResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetExpenseAnalysisResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIGetExpenseAnalysisResponse::getExpenseDocuments() const {
    return m_expense_documents;
}
void OAIGetExpenseAnalysisResponse::setExpenseDocuments(const QList &expense_documents) {
    m_expense_documents = expense_documents;
    m_expense_documents_isSet = true;
}

bool OAIGetExpenseAnalysisResponse::is_expense_documents_Set() const{
    return m_expense_documents_isSet;
}

bool OAIGetExpenseAnalysisResponse::is_expense_documents_Valid() const{
    return m_expense_documents_isValid;
}

QList OAIGetExpenseAnalysisResponse::getWarnings() const {
    return m_warnings;
}
void OAIGetExpenseAnalysisResponse::setWarnings(const QList &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIGetExpenseAnalysisResponse::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIGetExpenseAnalysisResponse::is_warnings_Valid() const{
    return m_warnings_isValid;
}

QString OAIGetExpenseAnalysisResponse::getStatusMessage() const {
    return m_status_message;
}
void OAIGetExpenseAnalysisResponse::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIGetExpenseAnalysisResponse::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIGetExpenseAnalysisResponse::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIGetExpenseAnalysisResponse::getAnalyzeExpenseModelVersion() const {
    return m_analyze_expense_model_version;
}
void OAIGetExpenseAnalysisResponse::setAnalyzeExpenseModelVersion(const QString &analyze_expense_model_version) {
    m_analyze_expense_model_version = analyze_expense_model_version;
    m_analyze_expense_model_version_isSet = true;
}

bool OAIGetExpenseAnalysisResponse::is_analyze_expense_model_version_Set() const{
    return m_analyze_expense_model_version_isSet;
}

bool OAIGetExpenseAnalysisResponse::is_analyze_expense_model_version_Valid() const{
    return m_analyze_expense_model_version_isValid;
}

bool OAIGetExpenseAnalysisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyze_expense_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetExpenseAnalysisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
