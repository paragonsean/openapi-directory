/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationChannel::OAINotificationChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationChannel::OAINotificationChannel() {
    this->initializeModel();
}

OAINotificationChannel::~OAINotificationChannel() {}

void OAINotificationChannel::initializeModel() {

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAINotificationChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationChannel::fromJsonObject(QJsonObject json) {

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SNSTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("SNSTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAINotificationChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SNSTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAINotificationChannel::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAINotificationChannel::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAINotificationChannel::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAINotificationChannel::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

QString OAINotificationChannel::getRoleArn() const {
    return m_role_arn;
}
void OAINotificationChannel::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAINotificationChannel::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAINotificationChannel::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAINotificationChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sns_topic_arn_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
