/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_bytes_isSet = false;
    m_bytes_isValid = false;

    m_s3_object_isSet = false;
    m_s3_object_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_bytes_isValid = ::OpenAPI::fromJsonValue(m_bytes, json[QString("Bytes")]);
    m_bytes_isSet = !json[QString("Bytes")].isNull() && m_bytes_isValid;

    m_s3_object_isValid = ::OpenAPI::fromJsonValue(m_s3_object, json[QString("S3Object")]);
    m_s3_object_isSet = !json[QString("S3Object")].isNull() && m_s3_object_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_isSet) {
        obj.insert(QString("Bytes"), ::OpenAPI::toJsonValue(m_bytes));
    }
    if (m_s3_object.isSet()) {
        obj.insert(QString("S3Object"), ::OpenAPI::toJsonValue(m_s3_object));
    }
    return obj;
}

QString OAIDocument::getBytes() const {
    return m_bytes;
}
void OAIDocument::setBytes(const QString &bytes) {
    m_bytes = bytes;
    m_bytes_isSet = true;
}

bool OAIDocument::is_bytes_Set() const{
    return m_bytes_isSet;
}

bool OAIDocument::is_bytes_Valid() const{
    return m_bytes_isValid;
}

OAIDocument_S3Object OAIDocument::getS3Object() const {
    return m_s3_object;
}
void OAIDocument::setS3Object(const OAIDocument_S3Object &s3_object) {
    m_s3_object = s3_object;
    m_s3_object_isSet = true;
}

bool OAIDocument::is_s3_object_Set() const{
    return m_s3_object_isSet;
}

bool OAIDocument::is_s3_object_Valid() const{
    return m_s3_object_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_object.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
