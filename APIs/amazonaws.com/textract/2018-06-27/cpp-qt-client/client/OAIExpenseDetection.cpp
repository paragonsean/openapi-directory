/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseDetection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseDetection::OAIExpenseDetection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseDetection::OAIExpenseDetection() {
    this->initializeModel();
}

OAIExpenseDetection::~OAIExpenseDetection() {}

void OAIExpenseDetection::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;
}

void OAIExpenseDetection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseDetection::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("Geometry")]);
    m_geometry_isSet = !json[QString("Geometry")].isNull() && m_geometry_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("Confidence")]);
    m_confidence_isSet = !json[QString("Confidence")].isNull() && m_confidence_isValid;
}

QString OAIExpenseDetection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseDetection::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("Geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("Confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    return obj;
}

QString OAIExpenseDetection::getText() const {
    return m_text;
}
void OAIExpenseDetection::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIExpenseDetection::is_text_Set() const{
    return m_text_isSet;
}

bool OAIExpenseDetection::is_text_Valid() const{
    return m_text_isValid;
}

OAIGeometry OAIExpenseDetection::getGeometry() const {
    return m_geometry;
}
void OAIExpenseDetection::setGeometry(const OAIGeometry &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIExpenseDetection::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIExpenseDetection::is_geometry_Valid() const{
    return m_geometry_isValid;
}

float OAIExpenseDetection::getConfidence() const {
    return m_confidence;
}
void OAIExpenseDetection::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIExpenseDetection::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIExpenseDetection::is_confidence_Valid() const{
    return m_confidence_isValid;
}

bool OAIExpenseDetection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseDetection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
