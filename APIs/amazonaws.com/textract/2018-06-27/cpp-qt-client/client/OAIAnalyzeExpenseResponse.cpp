/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeExpenseResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeExpenseResponse::OAIAnalyzeExpenseResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeExpenseResponse::OAIAnalyzeExpenseResponse() {
    this->initializeModel();
}

OAIAnalyzeExpenseResponse::~OAIAnalyzeExpenseResponse() {}

void OAIAnalyzeExpenseResponse::initializeModel() {

    m_document_metadata_isSet = false;
    m_document_metadata_isValid = false;

    m_expense_documents_isSet = false;
    m_expense_documents_isValid = false;
}

void OAIAnalyzeExpenseResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeExpenseResponse::fromJsonObject(QJsonObject json) {

    m_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_document_metadata, json[QString("DocumentMetadata")]);
    m_document_metadata_isSet = !json[QString("DocumentMetadata")].isNull() && m_document_metadata_isValid;

    m_expense_documents_isValid = ::OpenAPI::fromJsonValue(m_expense_documents, json[QString("ExpenseDocuments")]);
    m_expense_documents_isSet = !json[QString("ExpenseDocuments")].isNull() && m_expense_documents_isValid;
}

QString OAIAnalyzeExpenseResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeExpenseResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_document_metadata.isSet()) {
        obj.insert(QString("DocumentMetadata"), ::OpenAPI::toJsonValue(m_document_metadata));
    }
    if (m_expense_documents.isSet()) {
        obj.insert(QString("ExpenseDocuments"), ::OpenAPI::toJsonValue(m_expense_documents));
    }
    return obj;
}

OAIDocumentMetadata OAIAnalyzeExpenseResponse::getDocumentMetadata() const {
    return m_document_metadata;
}
void OAIAnalyzeExpenseResponse::setDocumentMetadata(const OAIDocumentMetadata &document_metadata) {
    m_document_metadata = document_metadata;
    m_document_metadata_isSet = true;
}

bool OAIAnalyzeExpenseResponse::is_document_metadata_Set() const{
    return m_document_metadata_isSet;
}

bool OAIAnalyzeExpenseResponse::is_document_metadata_Valid() const{
    return m_document_metadata_isValid;
}

QList OAIAnalyzeExpenseResponse::getExpenseDocuments() const {
    return m_expense_documents;
}
void OAIAnalyzeExpenseResponse::setExpenseDocuments(const QList &expense_documents) {
    m_expense_documents = expense_documents;
    m_expense_documents_isSet = true;
}

bool OAIAnalyzeExpenseResponse::is_expense_documents_Set() const{
    return m_expense_documents_isSet;
}

bool OAIAnalyzeExpenseResponse::is_expense_documents_Valid() const{
    return m_expense_documents_isValid;
}

bool OAIAnalyzeExpenseResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeExpenseResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
