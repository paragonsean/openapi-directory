/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeIDRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeIDRequest::OAIAnalyzeIDRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeIDRequest::OAIAnalyzeIDRequest() {
    this->initializeModel();
}

OAIAnalyzeIDRequest::~OAIAnalyzeIDRequest() {}

void OAIAnalyzeIDRequest::initializeModel() {

    m_document_pages_isSet = false;
    m_document_pages_isValid = false;
}

void OAIAnalyzeIDRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeIDRequest::fromJsonObject(QJsonObject json) {

    m_document_pages_isValid = ::OpenAPI::fromJsonValue(m_document_pages, json[QString("DocumentPages")]);
    m_document_pages_isSet = !json[QString("DocumentPages")].isNull() && m_document_pages_isValid;
}

QString OAIAnalyzeIDRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeIDRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_pages.isSet()) {
        obj.insert(QString("DocumentPages"), ::OpenAPI::toJsonValue(m_document_pages));
    }
    return obj;
}

QList OAIAnalyzeIDRequest::getDocumentPages() const {
    return m_document_pages;
}
void OAIAnalyzeIDRequest::setDocumentPages(const QList &document_pages) {
    m_document_pages = document_pages;
    m_document_pages_isSet = true;
}

bool OAIAnalyzeIDRequest::is_document_pages_Set() const{
    return m_document_pages_isSet;
}

bool OAIAnalyzeIDRequest::is_document_pages_Valid() const{
    return m_document_pages_isValid;
}

bool OAIAnalyzeIDRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeIDRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_pages_isValid && true;
}

} // namespace OpenAPI
