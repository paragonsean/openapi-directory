/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeDocumentResponse_HumanLoopActivationOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::OAIAnalyzeDocumentResponse_HumanLoopActivationOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::OAIAnalyzeDocumentResponse_HumanLoopActivationOutput() {
    this->initializeModel();
}

OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::~OAIAnalyzeDocumentResponse_HumanLoopActivationOutput() {}

void OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::initializeModel() {

    m_human_loop_arn_isSet = false;
    m_human_loop_arn_isValid = false;

    m_human_loop_activation_reasons_isSet = false;
    m_human_loop_activation_reasons_isValid = false;

    m_human_loop_activation_conditions_evaluation_results_isSet = false;
    m_human_loop_activation_conditions_evaluation_results_isValid = false;
}

void OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::fromJsonObject(QJsonObject json) {

    m_human_loop_arn_isValid = ::OpenAPI::fromJsonValue(m_human_loop_arn, json[QString("HumanLoopArn")]);
    m_human_loop_arn_isSet = !json[QString("HumanLoopArn")].isNull() && m_human_loop_arn_isValid;

    m_human_loop_activation_reasons_isValid = ::OpenAPI::fromJsonValue(m_human_loop_activation_reasons, json[QString("HumanLoopActivationReasons")]);
    m_human_loop_activation_reasons_isSet = !json[QString("HumanLoopActivationReasons")].isNull() && m_human_loop_activation_reasons_isValid;

    m_human_loop_activation_conditions_evaluation_results_isValid = ::OpenAPI::fromJsonValue(m_human_loop_activation_conditions_evaluation_results, json[QString("HumanLoopActivationConditionsEvaluationResults")]);
    m_human_loop_activation_conditions_evaluation_results_isSet = !json[QString("HumanLoopActivationConditionsEvaluationResults")].isNull() && m_human_loop_activation_conditions_evaluation_results_isValid;
}

QString OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_human_loop_arn_isSet) {
        obj.insert(QString("HumanLoopArn"), ::OpenAPI::toJsonValue(m_human_loop_arn));
    }
    if (m_human_loop_activation_reasons.isSet()) {
        obj.insert(QString("HumanLoopActivationReasons"), ::OpenAPI::toJsonValue(m_human_loop_activation_reasons));
    }
    if (m_human_loop_activation_conditions_evaluation_results_isSet) {
        obj.insert(QString("HumanLoopActivationConditionsEvaluationResults"), ::OpenAPI::toJsonValue(m_human_loop_activation_conditions_evaluation_results));
    }
    return obj;
}

QString OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::getHumanLoopArn() const {
    return m_human_loop_arn;
}
void OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::setHumanLoopArn(const QString &human_loop_arn) {
    m_human_loop_arn = human_loop_arn;
    m_human_loop_arn_isSet = true;
}

bool OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::is_human_loop_arn_Set() const{
    return m_human_loop_arn_isSet;
}

bool OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::is_human_loop_arn_Valid() const{
    return m_human_loop_arn_isValid;
}

QList OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::getHumanLoopActivationReasons() const {
    return m_human_loop_activation_reasons;
}
void OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::setHumanLoopActivationReasons(const QList &human_loop_activation_reasons) {
    m_human_loop_activation_reasons = human_loop_activation_reasons;
    m_human_loop_activation_reasons_isSet = true;
}

bool OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::is_human_loop_activation_reasons_Set() const{
    return m_human_loop_activation_reasons_isSet;
}

bool OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::is_human_loop_activation_reasons_Valid() const{
    return m_human_loop_activation_reasons_isValid;
}

QString OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::getHumanLoopActivationConditionsEvaluationResults() const {
    return m_human_loop_activation_conditions_evaluation_results;
}
void OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::setHumanLoopActivationConditionsEvaluationResults(const QString &human_loop_activation_conditions_evaluation_results) {
    m_human_loop_activation_conditions_evaluation_results = human_loop_activation_conditions_evaluation_results;
    m_human_loop_activation_conditions_evaluation_results_isSet = true;
}

bool OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::is_human_loop_activation_conditions_evaluation_results_Set() const{
    return m_human_loop_activation_conditions_evaluation_results_isSet;
}

bool OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::is_human_loop_activation_conditions_evaluation_results_Valid() const{
    return m_human_loop_activation_conditions_evaluation_results_isValid;
}

bool OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_human_loop_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_loop_activation_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_loop_activation_conditions_evaluation_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeDocumentResponse_HumanLoopActivationOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
