/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlock::OAIBlock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlock::OAIBlock() {
    this->initializeModel();
}

OAIBlock::~OAIBlock() {}

void OAIBlock::initializeModel() {

    m_block_type_isSet = false;
    m_block_type_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_text_type_isSet = false;
    m_text_type_isValid = false;

    m_row_index_isSet = false;
    m_row_index_isValid = false;

    m_column_index_isSet = false;
    m_column_index_isValid = false;

    m_row_span_isSet = false;
    m_row_span_isValid = false;

    m_column_span_isSet = false;
    m_column_span_isValid = false;

    m_geometry_isSet = false;
    m_geometry_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_entity_types_isSet = false;
    m_entity_types_isValid = false;

    m_selection_status_isSet = false;
    m_selection_status_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIBlock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlock::fromJsonObject(QJsonObject json) {

    m_block_type_isValid = ::OpenAPI::fromJsonValue(m_block_type, json[QString("BlockType")]);
    m_block_type_isSet = !json[QString("BlockType")].isNull() && m_block_type_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("Confidence")]);
    m_confidence_isSet = !json[QString("Confidence")].isNull() && m_confidence_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_text_type_isValid = ::OpenAPI::fromJsonValue(m_text_type, json[QString("TextType")]);
    m_text_type_isSet = !json[QString("TextType")].isNull() && m_text_type_isValid;

    m_row_index_isValid = ::OpenAPI::fromJsonValue(m_row_index, json[QString("RowIndex")]);
    m_row_index_isSet = !json[QString("RowIndex")].isNull() && m_row_index_isValid;

    m_column_index_isValid = ::OpenAPI::fromJsonValue(m_column_index, json[QString("ColumnIndex")]);
    m_column_index_isSet = !json[QString("ColumnIndex")].isNull() && m_column_index_isValid;

    m_row_span_isValid = ::OpenAPI::fromJsonValue(m_row_span, json[QString("RowSpan")]);
    m_row_span_isSet = !json[QString("RowSpan")].isNull() && m_row_span_isValid;

    m_column_span_isValid = ::OpenAPI::fromJsonValue(m_column_span, json[QString("ColumnSpan")]);
    m_column_span_isSet = !json[QString("ColumnSpan")].isNull() && m_column_span_isValid;

    m_geometry_isValid = ::OpenAPI::fromJsonValue(m_geometry, json[QString("Geometry")]);
    m_geometry_isSet = !json[QString("Geometry")].isNull() && m_geometry_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("Relationships")]);
    m_relationships_isSet = !json[QString("Relationships")].isNull() && m_relationships_isValid;

    m_entity_types_isValid = ::OpenAPI::fromJsonValue(m_entity_types, json[QString("EntityTypes")]);
    m_entity_types_isSet = !json[QString("EntityTypes")].isNull() && m_entity_types_isValid;

    m_selection_status_isValid = ::OpenAPI::fromJsonValue(m_selection_status, json[QString("SelectionStatus")]);
    m_selection_status_isSet = !json[QString("SelectionStatus")].isNull() && m_selection_status_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("Page")]);
    m_page_isSet = !json[QString("Page")].isNull() && m_page_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("Query")]);
    m_query_isSet = !json[QString("Query")].isNull() && m_query_isValid;
}

QString OAIBlock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlock::asJsonObject() const {
    QJsonObject obj;
    if (m_block_type.isSet()) {
        obj.insert(QString("BlockType"), ::OpenAPI::toJsonValue(m_block_type));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("Confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_text_type.isSet()) {
        obj.insert(QString("TextType"), ::OpenAPI::toJsonValue(m_text_type));
    }
    if (m_row_index_isSet) {
        obj.insert(QString("RowIndex"), ::OpenAPI::toJsonValue(m_row_index));
    }
    if (m_column_index_isSet) {
        obj.insert(QString("ColumnIndex"), ::OpenAPI::toJsonValue(m_column_index));
    }
    if (m_row_span_isSet) {
        obj.insert(QString("RowSpan"), ::OpenAPI::toJsonValue(m_row_span));
    }
    if (m_column_span_isSet) {
        obj.insert(QString("ColumnSpan"), ::OpenAPI::toJsonValue(m_column_span));
    }
    if (m_geometry.isSet()) {
        obj.insert(QString("Geometry"), ::OpenAPI::toJsonValue(m_geometry));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_relationships.isSet()) {
        obj.insert(QString("Relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_entity_types.isSet()) {
        obj.insert(QString("EntityTypes"), ::OpenAPI::toJsonValue(m_entity_types));
    }
    if (m_selection_status.isSet()) {
        obj.insert(QString("SelectionStatus"), ::OpenAPI::toJsonValue(m_selection_status));
    }
    if (m_page_isSet) {
        obj.insert(QString("Page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_query.isSet()) {
        obj.insert(QString("Query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIBlockType OAIBlock::getBlockType() const {
    return m_block_type;
}
void OAIBlock::setBlockType(const OAIBlockType &block_type) {
    m_block_type = block_type;
    m_block_type_isSet = true;
}

bool OAIBlock::is_block_type_Set() const{
    return m_block_type_isSet;
}

bool OAIBlock::is_block_type_Valid() const{
    return m_block_type_isValid;
}

float OAIBlock::getConfidence() const {
    return m_confidence;
}
void OAIBlock::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIBlock::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIBlock::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIBlock::getText() const {
    return m_text;
}
void OAIBlock::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIBlock::is_text_Set() const{
    return m_text_isSet;
}

bool OAIBlock::is_text_Valid() const{
    return m_text_isValid;
}

OAITextType OAIBlock::getTextType() const {
    return m_text_type;
}
void OAIBlock::setTextType(const OAITextType &text_type) {
    m_text_type = text_type;
    m_text_type_isSet = true;
}

bool OAIBlock::is_text_type_Set() const{
    return m_text_type_isSet;
}

bool OAIBlock::is_text_type_Valid() const{
    return m_text_type_isValid;
}

qint32 OAIBlock::getRowIndex() const {
    return m_row_index;
}
void OAIBlock::setRowIndex(const qint32 &row_index) {
    m_row_index = row_index;
    m_row_index_isSet = true;
}

bool OAIBlock::is_row_index_Set() const{
    return m_row_index_isSet;
}

bool OAIBlock::is_row_index_Valid() const{
    return m_row_index_isValid;
}

qint32 OAIBlock::getColumnIndex() const {
    return m_column_index;
}
void OAIBlock::setColumnIndex(const qint32 &column_index) {
    m_column_index = column_index;
    m_column_index_isSet = true;
}

bool OAIBlock::is_column_index_Set() const{
    return m_column_index_isSet;
}

bool OAIBlock::is_column_index_Valid() const{
    return m_column_index_isValid;
}

qint32 OAIBlock::getRowSpan() const {
    return m_row_span;
}
void OAIBlock::setRowSpan(const qint32 &row_span) {
    m_row_span = row_span;
    m_row_span_isSet = true;
}

bool OAIBlock::is_row_span_Set() const{
    return m_row_span_isSet;
}

bool OAIBlock::is_row_span_Valid() const{
    return m_row_span_isValid;
}

qint32 OAIBlock::getColumnSpan() const {
    return m_column_span;
}
void OAIBlock::setColumnSpan(const qint32 &column_span) {
    m_column_span = column_span;
    m_column_span_isSet = true;
}

bool OAIBlock::is_column_span_Set() const{
    return m_column_span_isSet;
}

bool OAIBlock::is_column_span_Valid() const{
    return m_column_span_isValid;
}

OAIBlock_Geometry OAIBlock::getGeometry() const {
    return m_geometry;
}
void OAIBlock::setGeometry(const OAIBlock_Geometry &geometry) {
    m_geometry = geometry;
    m_geometry_isSet = true;
}

bool OAIBlock::is_geometry_Set() const{
    return m_geometry_isSet;
}

bool OAIBlock::is_geometry_Valid() const{
    return m_geometry_isValid;
}

QString OAIBlock::getId() const {
    return m_id;
}
void OAIBlock::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBlock::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBlock::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIBlock::getRelationships() const {
    return m_relationships;
}
void OAIBlock::setRelationships(const QList &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIBlock::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIBlock::is_relationships_Valid() const{
    return m_relationships_isValid;
}

QList OAIBlock::getEntityTypes() const {
    return m_entity_types;
}
void OAIBlock::setEntityTypes(const QList &entity_types) {
    m_entity_types = entity_types;
    m_entity_types_isSet = true;
}

bool OAIBlock::is_entity_types_Set() const{
    return m_entity_types_isSet;
}

bool OAIBlock::is_entity_types_Valid() const{
    return m_entity_types_isValid;
}

OAISelectionStatus OAIBlock::getSelectionStatus() const {
    return m_selection_status;
}
void OAIBlock::setSelectionStatus(const OAISelectionStatus &selection_status) {
    m_selection_status = selection_status;
    m_selection_status_isSet = true;
}

bool OAIBlock::is_selection_status_Set() const{
    return m_selection_status_isSet;
}

bool OAIBlock::is_selection_status_Valid() const{
    return m_selection_status_isValid;
}

qint32 OAIBlock::getPage() const {
    return m_page;
}
void OAIBlock::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIBlock::is_page_Set() const{
    return m_page_isSet;
}

bool OAIBlock::is_page_Valid() const{
    return m_page_isValid;
}

OAIBlock_Query OAIBlock::getQuery() const {
    return m_query;
}
void OAIBlock::setQuery(const OAIBlock_Query &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIBlock::is_query_Set() const{
    return m_query_isSet;
}

bool OAIBlock::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIBlock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geometry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
