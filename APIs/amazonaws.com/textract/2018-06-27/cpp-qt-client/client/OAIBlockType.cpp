/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlockType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlockType::OAIBlockType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlockType::OAIBlockType() {
    this->initializeModel();
}

OAIBlockType::~OAIBlockType() {}

void OAIBlockType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBlockType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBlockType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("KEY_VALUE_SET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::KEY_VALUE_SET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::PAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::LINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WORD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::WORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::TABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CELL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::CELL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELECTION_ELEMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::SELECTION_ELEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MERGED_CELL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::MERGED_CELL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::QUERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUERY_RESULT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::QUERY_RESULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SIGNATURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::SIGNATURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE_TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::TABLE_TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE_FOOTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBlockType::TABLE_FOOTER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBlockType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBlockType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBlockType::KEY_VALUE_SET:
            val = "KEY_VALUE_SET";
            break;
        case eOAIBlockType::PAGE:
            val = "PAGE";
            break;
        case eOAIBlockType::LINE:
            val = "LINE";
            break;
        case eOAIBlockType::WORD:
            val = "WORD";
            break;
        case eOAIBlockType::TABLE:
            val = "TABLE";
            break;
        case eOAIBlockType::CELL:
            val = "CELL";
            break;
        case eOAIBlockType::SELECTION_ELEMENT:
            val = "SELECTION_ELEMENT";
            break;
        case eOAIBlockType::MERGED_CELL:
            val = "MERGED_CELL";
            break;
        case eOAIBlockType::TITLE:
            val = "TITLE";
            break;
        case eOAIBlockType::QUERY:
            val = "QUERY";
            break;
        case eOAIBlockType::QUERY_RESULT:
            val = "QUERY_RESULT";
            break;
        case eOAIBlockType::SIGNATURE:
            val = "SIGNATURE";
            break;
        case eOAIBlockType::TABLE_TITLE:
            val = "TABLE_TITLE";
            break;
        case eOAIBlockType::TABLE_FOOTER:
            val = "TABLE_FOOTER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBlockType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBlockType::eOAIBlockType OAIBlockType::getValue() const {
    return m_value;
}

void OAIBlockType::setValue(const OAIBlockType::eOAIBlockType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBlockType::isSet() const {
    
    return m_value_isSet;
}

bool OAIBlockType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
