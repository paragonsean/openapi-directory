/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeDocumentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeDocumentResponse::OAIAnalyzeDocumentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeDocumentResponse::OAIAnalyzeDocumentResponse() {
    this->initializeModel();
}

OAIAnalyzeDocumentResponse::~OAIAnalyzeDocumentResponse() {}

void OAIAnalyzeDocumentResponse::initializeModel() {

    m_document_metadata_isSet = false;
    m_document_metadata_isValid = false;

    m_blocks_isSet = false;
    m_blocks_isValid = false;

    m_human_loop_activation_output_isSet = false;
    m_human_loop_activation_output_isValid = false;

    m_analyze_document_model_version_isSet = false;
    m_analyze_document_model_version_isValid = false;
}

void OAIAnalyzeDocumentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeDocumentResponse::fromJsonObject(QJsonObject json) {

    m_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_document_metadata, json[QString("DocumentMetadata")]);
    m_document_metadata_isSet = !json[QString("DocumentMetadata")].isNull() && m_document_metadata_isValid;

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("Blocks")]);
    m_blocks_isSet = !json[QString("Blocks")].isNull() && m_blocks_isValid;

    m_human_loop_activation_output_isValid = ::OpenAPI::fromJsonValue(m_human_loop_activation_output, json[QString("HumanLoopActivationOutput")]);
    m_human_loop_activation_output_isSet = !json[QString("HumanLoopActivationOutput")].isNull() && m_human_loop_activation_output_isValid;

    m_analyze_document_model_version_isValid = ::OpenAPI::fromJsonValue(m_analyze_document_model_version, json[QString("AnalyzeDocumentModelVersion")]);
    m_analyze_document_model_version_isSet = !json[QString("AnalyzeDocumentModelVersion")].isNull() && m_analyze_document_model_version_isValid;
}

QString OAIAnalyzeDocumentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeDocumentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_document_metadata.isSet()) {
        obj.insert(QString("DocumentMetadata"), ::OpenAPI::toJsonValue(m_document_metadata));
    }
    if (m_blocks.isSet()) {
        obj.insert(QString("Blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    if (m_human_loop_activation_output.isSet()) {
        obj.insert(QString("HumanLoopActivationOutput"), ::OpenAPI::toJsonValue(m_human_loop_activation_output));
    }
    if (m_analyze_document_model_version_isSet) {
        obj.insert(QString("AnalyzeDocumentModelVersion"), ::OpenAPI::toJsonValue(m_analyze_document_model_version));
    }
    return obj;
}

OAIAnalyzeDocumentResponse_DocumentMetadata OAIAnalyzeDocumentResponse::getDocumentMetadata() const {
    return m_document_metadata;
}
void OAIAnalyzeDocumentResponse::setDocumentMetadata(const OAIAnalyzeDocumentResponse_DocumentMetadata &document_metadata) {
    m_document_metadata = document_metadata;
    m_document_metadata_isSet = true;
}

bool OAIAnalyzeDocumentResponse::is_document_metadata_Set() const{
    return m_document_metadata_isSet;
}

bool OAIAnalyzeDocumentResponse::is_document_metadata_Valid() const{
    return m_document_metadata_isValid;
}

QList OAIAnalyzeDocumentResponse::getBlocks() const {
    return m_blocks;
}
void OAIAnalyzeDocumentResponse::setBlocks(const QList &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIAnalyzeDocumentResponse::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIAnalyzeDocumentResponse::is_blocks_Valid() const{
    return m_blocks_isValid;
}

OAIAnalyzeDocumentResponse_HumanLoopActivationOutput OAIAnalyzeDocumentResponse::getHumanLoopActivationOutput() const {
    return m_human_loop_activation_output;
}
void OAIAnalyzeDocumentResponse::setHumanLoopActivationOutput(const OAIAnalyzeDocumentResponse_HumanLoopActivationOutput &human_loop_activation_output) {
    m_human_loop_activation_output = human_loop_activation_output;
    m_human_loop_activation_output_isSet = true;
}

bool OAIAnalyzeDocumentResponse::is_human_loop_activation_output_Set() const{
    return m_human_loop_activation_output_isSet;
}

bool OAIAnalyzeDocumentResponse::is_human_loop_activation_output_Valid() const{
    return m_human_loop_activation_output_isValid;
}

QString OAIAnalyzeDocumentResponse::getAnalyzeDocumentModelVersion() const {
    return m_analyze_document_model_version;
}
void OAIAnalyzeDocumentResponse::setAnalyzeDocumentModelVersion(const QString &analyze_document_model_version) {
    m_analyze_document_model_version = analyze_document_model_version;
    m_analyze_document_model_version_isSet = true;
}

bool OAIAnalyzeDocumentResponse::is_analyze_document_model_version_Set() const{
    return m_analyze_document_model_version_isSet;
}

bool OAIAnalyzeDocumentResponse::is_analyze_document_model_version_Valid() const{
    return m_analyze_document_model_version_isValid;
}

bool OAIAnalyzeDocumentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_loop_activation_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analyze_document_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeDocumentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
