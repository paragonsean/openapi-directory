/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtraction_LendingDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtraction_LendingDocument::OAIExtraction_LendingDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtraction_LendingDocument::OAIExtraction_LendingDocument() {
    this->initializeModel();
}

OAIExtraction_LendingDocument::~OAIExtraction_LendingDocument() {}

void OAIExtraction_LendingDocument::initializeModel() {

    m_lending_fields_isSet = false;
    m_lending_fields_isValid = false;

    m_signature_detections_isSet = false;
    m_signature_detections_isValid = false;
}

void OAIExtraction_LendingDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtraction_LendingDocument::fromJsonObject(QJsonObject json) {

    m_lending_fields_isValid = ::OpenAPI::fromJsonValue(m_lending_fields, json[QString("LendingFields")]);
    m_lending_fields_isSet = !json[QString("LendingFields")].isNull() && m_lending_fields_isValid;

    m_signature_detections_isValid = ::OpenAPI::fromJsonValue(m_signature_detections, json[QString("SignatureDetections")]);
    m_signature_detections_isSet = !json[QString("SignatureDetections")].isNull() && m_signature_detections_isValid;
}

QString OAIExtraction_LendingDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtraction_LendingDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_lending_fields.isSet()) {
        obj.insert(QString("LendingFields"), ::OpenAPI::toJsonValue(m_lending_fields));
    }
    if (m_signature_detections.isSet()) {
        obj.insert(QString("SignatureDetections"), ::OpenAPI::toJsonValue(m_signature_detections));
    }
    return obj;
}

QList OAIExtraction_LendingDocument::getLendingFields() const {
    return m_lending_fields;
}
void OAIExtraction_LendingDocument::setLendingFields(const QList &lending_fields) {
    m_lending_fields = lending_fields;
    m_lending_fields_isSet = true;
}

bool OAIExtraction_LendingDocument::is_lending_fields_Set() const{
    return m_lending_fields_isSet;
}

bool OAIExtraction_LendingDocument::is_lending_fields_Valid() const{
    return m_lending_fields_isValid;
}

QList OAIExtraction_LendingDocument::getSignatureDetections() const {
    return m_signature_detections;
}
void OAIExtraction_LendingDocument::setSignatureDetections(const QList &signature_detections) {
    m_signature_detections = signature_detections;
    m_signature_detections_isSet = true;
}

bool OAIExtraction_LendingDocument::is_signature_detections_Set() const{
    return m_signature_detections_isSet;
}

bool OAIExtraction_LendingDocument::is_signature_detections_Valid() const{
    return m_signature_detections_isValid;
}

bool OAIExtraction_LendingDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lending_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_detections.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtraction_LendingDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
