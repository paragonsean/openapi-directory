/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("Pages")]);
    m_pages_isSet = !json[QString("Pages")].isNull() && m_pages_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_pages.isSet()) {
        obj.insert(QString("Pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    return obj;
}

QString OAIQuery::getText() const {
    return m_text;
}
void OAIQuery::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIQuery::is_text_Set() const{
    return m_text_isSet;
}

bool OAIQuery::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIQuery::getAlias() const {
    return m_alias;
}
void OAIQuery::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIQuery::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIQuery::is_alias_Valid() const{
    return m_alias_isValid;
}

QList OAIQuery::getPages() const {
    return m_pages;
}
void OAIQuery::setPages(const QList &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIQuery::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIQuery::is_pages_Valid() const{
    return m_pages_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
