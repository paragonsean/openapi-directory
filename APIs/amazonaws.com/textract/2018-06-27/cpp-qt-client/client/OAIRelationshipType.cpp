/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationshipType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationshipType::OAIRelationshipType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationshipType::OAIRelationshipType() {
    this->initializeModel();
}

OAIRelationshipType::~OAIRelationshipType() {}

void OAIRelationshipType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRelationshipType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRelationshipType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHILD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::CHILD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLEX_FEATURES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::COMPLEX_FEATURES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MERGED_CELL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::MERGED_CELL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANSWER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::ANSWER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::TABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE_TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::TABLE_TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE_FOOTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::TABLE_FOOTER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRelationshipType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRelationshipType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRelationshipType::VALUE:
            val = "VALUE";
            break;
        case eOAIRelationshipType::CHILD:
            val = "CHILD";
            break;
        case eOAIRelationshipType::COMPLEX_FEATURES:
            val = "COMPLEX_FEATURES";
            break;
        case eOAIRelationshipType::MERGED_CELL:
            val = "MERGED_CELL";
            break;
        case eOAIRelationshipType::TITLE:
            val = "TITLE";
            break;
        case eOAIRelationshipType::ANSWER:
            val = "ANSWER";
            break;
        case eOAIRelationshipType::TABLE:
            val = "TABLE";
            break;
        case eOAIRelationshipType::TABLE_TITLE:
            val = "TABLE_TITLE";
            break;
        case eOAIRelationshipType::TABLE_FOOTER:
            val = "TABLE_FOOTER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRelationshipType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRelationshipType::eOAIRelationshipType OAIRelationshipType::getValue() const {
    return m_value;
}

void OAIRelationshipType::setValue(const OAIRelationshipType::eOAIRelationshipType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRelationshipType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRelationshipType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
