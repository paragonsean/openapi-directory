/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentGroup::OAIDocumentGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentGroup::OAIDocumentGroup() {
    this->initializeModel();
}

OAIDocumentGroup::~OAIDocumentGroup() {}

void OAIDocumentGroup::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_split_documents_isSet = false;
    m_split_documents_isValid = false;

    m_detected_signatures_isSet = false;
    m_detected_signatures_isValid = false;

    m_undetected_signatures_isSet = false;
    m_undetected_signatures_isValid = false;
}

void OAIDocumentGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentGroup::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_split_documents_isValid = ::OpenAPI::fromJsonValue(m_split_documents, json[QString("SplitDocuments")]);
    m_split_documents_isSet = !json[QString("SplitDocuments")].isNull() && m_split_documents_isValid;

    m_detected_signatures_isValid = ::OpenAPI::fromJsonValue(m_detected_signatures, json[QString("DetectedSignatures")]);
    m_detected_signatures_isSet = !json[QString("DetectedSignatures")].isNull() && m_detected_signatures_isValid;

    m_undetected_signatures_isValid = ::OpenAPI::fromJsonValue(m_undetected_signatures, json[QString("UndetectedSignatures")]);
    m_undetected_signatures_isSet = !json[QString("UndetectedSignatures")].isNull() && m_undetected_signatures_isValid;
}

QString OAIDocumentGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_split_documents.isSet()) {
        obj.insert(QString("SplitDocuments"), ::OpenAPI::toJsonValue(m_split_documents));
    }
    if (m_detected_signatures.isSet()) {
        obj.insert(QString("DetectedSignatures"), ::OpenAPI::toJsonValue(m_detected_signatures));
    }
    if (m_undetected_signatures.isSet()) {
        obj.insert(QString("UndetectedSignatures"), ::OpenAPI::toJsonValue(m_undetected_signatures));
    }
    return obj;
}

QString OAIDocumentGroup::getType() const {
    return m_type;
}
void OAIDocumentGroup::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDocumentGroup::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDocumentGroup::is_type_Valid() const{
    return m_type_isValid;
}

QList OAIDocumentGroup::getSplitDocuments() const {
    return m_split_documents;
}
void OAIDocumentGroup::setSplitDocuments(const QList &split_documents) {
    m_split_documents = split_documents;
    m_split_documents_isSet = true;
}

bool OAIDocumentGroup::is_split_documents_Set() const{
    return m_split_documents_isSet;
}

bool OAIDocumentGroup::is_split_documents_Valid() const{
    return m_split_documents_isValid;
}

QList OAIDocumentGroup::getDetectedSignatures() const {
    return m_detected_signatures;
}
void OAIDocumentGroup::setDetectedSignatures(const QList &detected_signatures) {
    m_detected_signatures = detected_signatures;
    m_detected_signatures_isSet = true;
}

bool OAIDocumentGroup::is_detected_signatures_Set() const{
    return m_detected_signatures_isSet;
}

bool OAIDocumentGroup::is_detected_signatures_Valid() const{
    return m_detected_signatures_isValid;
}

QList OAIDocumentGroup::getUndetectedSignatures() const {
    return m_undetected_signatures;
}
void OAIDocumentGroup::setUndetectedSignatures(const QList &undetected_signatures) {
    m_undetected_signatures = undetected_signatures;
    m_undetected_signatures_isSet = true;
}

bool OAIDocumentGroup::is_undetected_signatures_Set() const{
    return m_undetected_signatures_isSet;
}

bool OAIDocumentGroup::is_undetected_signatures_Valid() const{
    return m_undetected_signatures_isValid;
}

bool OAIDocumentGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_signatures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_undetected_signatures.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
