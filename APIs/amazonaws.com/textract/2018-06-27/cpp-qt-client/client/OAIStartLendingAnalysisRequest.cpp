/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartLendingAnalysisRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartLendingAnalysisRequest::OAIStartLendingAnalysisRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartLendingAnalysisRequest::OAIStartLendingAnalysisRequest() {
    this->initializeModel();
}

OAIStartLendingAnalysisRequest::~OAIStartLendingAnalysisRequest() {}

void OAIStartLendingAnalysisRequest::initializeModel() {

    m_document_location_isSet = false;
    m_document_location_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_job_tag_isSet = false;
    m_job_tag_isValid = false;

    m_notification_channel_isSet = false;
    m_notification_channel_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAIStartLendingAnalysisRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartLendingAnalysisRequest::fromJsonObject(QJsonObject json) {

    m_document_location_isValid = ::OpenAPI::fromJsonValue(m_document_location, json[QString("DocumentLocation")]);
    m_document_location_isSet = !json[QString("DocumentLocation")].isNull() && m_document_location_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_job_tag_isValid = ::OpenAPI::fromJsonValue(m_job_tag, json[QString("JobTag")]);
    m_job_tag_isSet = !json[QString("JobTag")].isNull() && m_job_tag_isValid;

    m_notification_channel_isValid = ::OpenAPI::fromJsonValue(m_notification_channel, json[QString("NotificationChannel")]);
    m_notification_channel_isSet = !json[QString("NotificationChannel")].isNull() && m_notification_channel_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("OutputConfig")]);
    m_output_config_isSet = !json[QString("OutputConfig")].isNull() && m_output_config_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KMSKeyId")]);
    m_kms_key_id_isSet = !json[QString("KMSKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAIStartLendingAnalysisRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartLendingAnalysisRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_location.isSet()) {
        obj.insert(QString("DocumentLocation"), ::OpenAPI::toJsonValue(m_document_location));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_job_tag_isSet) {
        obj.insert(QString("JobTag"), ::OpenAPI::toJsonValue(m_job_tag));
    }
    if (m_notification_channel.isSet()) {
        obj.insert(QString("NotificationChannel"), ::OpenAPI::toJsonValue(m_notification_channel));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("OutputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KMSKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

OAIDocumentLocation OAIStartLendingAnalysisRequest::getDocumentLocation() const {
    return m_document_location;
}
void OAIStartLendingAnalysisRequest::setDocumentLocation(const OAIDocumentLocation &document_location) {
    m_document_location = document_location;
    m_document_location_isSet = true;
}

bool OAIStartLendingAnalysisRequest::is_document_location_Set() const{
    return m_document_location_isSet;
}

bool OAIStartLendingAnalysisRequest::is_document_location_Valid() const{
    return m_document_location_isValid;
}

QString OAIStartLendingAnalysisRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIStartLendingAnalysisRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIStartLendingAnalysisRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIStartLendingAnalysisRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIStartLendingAnalysisRequest::getJobTag() const {
    return m_job_tag;
}
void OAIStartLendingAnalysisRequest::setJobTag(const QString &job_tag) {
    m_job_tag = job_tag;
    m_job_tag_isSet = true;
}

bool OAIStartLendingAnalysisRequest::is_job_tag_Set() const{
    return m_job_tag_isSet;
}

bool OAIStartLendingAnalysisRequest::is_job_tag_Valid() const{
    return m_job_tag_isValid;
}

OAINotificationChannel OAIStartLendingAnalysisRequest::getNotificationChannel() const {
    return m_notification_channel;
}
void OAIStartLendingAnalysisRequest::setNotificationChannel(const OAINotificationChannel &notification_channel) {
    m_notification_channel = notification_channel;
    m_notification_channel_isSet = true;
}

bool OAIStartLendingAnalysisRequest::is_notification_channel_Set() const{
    return m_notification_channel_isSet;
}

bool OAIStartLendingAnalysisRequest::is_notification_channel_Valid() const{
    return m_notification_channel_isValid;
}

OAIOutputConfig OAIStartLendingAnalysisRequest::getOutputConfig() const {
    return m_output_config;
}
void OAIStartLendingAnalysisRequest::setOutputConfig(const OAIOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIStartLendingAnalysisRequest::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIStartLendingAnalysisRequest::is_output_config_Valid() const{
    return m_output_config_isValid;
}

QString OAIStartLendingAnalysisRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIStartLendingAnalysisRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIStartLendingAnalysisRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIStartLendingAnalysisRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIStartLendingAnalysisRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartLendingAnalysisRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_location_isValid && true;
}

} // namespace OpenAPI
