/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseDocument::OAIExpenseDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseDocument::OAIExpenseDocument() {
    this->initializeModel();
}

OAIExpenseDocument::~OAIExpenseDocument() {}

void OAIExpenseDocument::initializeModel() {

    m_expense_index_isSet = false;
    m_expense_index_isValid = false;

    m_summary_fields_isSet = false;
    m_summary_fields_isValid = false;

    m_line_item_groups_isSet = false;
    m_line_item_groups_isValid = false;

    m_blocks_isSet = false;
    m_blocks_isValid = false;
}

void OAIExpenseDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseDocument::fromJsonObject(QJsonObject json) {

    m_expense_index_isValid = ::OpenAPI::fromJsonValue(m_expense_index, json[QString("ExpenseIndex")]);
    m_expense_index_isSet = !json[QString("ExpenseIndex")].isNull() && m_expense_index_isValid;

    m_summary_fields_isValid = ::OpenAPI::fromJsonValue(m_summary_fields, json[QString("SummaryFields")]);
    m_summary_fields_isSet = !json[QString("SummaryFields")].isNull() && m_summary_fields_isValid;

    m_line_item_groups_isValid = ::OpenAPI::fromJsonValue(m_line_item_groups, json[QString("LineItemGroups")]);
    m_line_item_groups_isSet = !json[QString("LineItemGroups")].isNull() && m_line_item_groups_isValid;

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("Blocks")]);
    m_blocks_isSet = !json[QString("Blocks")].isNull() && m_blocks_isValid;
}

QString OAIExpenseDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_expense_index_isSet) {
        obj.insert(QString("ExpenseIndex"), ::OpenAPI::toJsonValue(m_expense_index));
    }
    if (m_summary_fields.isSet()) {
        obj.insert(QString("SummaryFields"), ::OpenAPI::toJsonValue(m_summary_fields));
    }
    if (m_line_item_groups.isSet()) {
        obj.insert(QString("LineItemGroups"), ::OpenAPI::toJsonValue(m_line_item_groups));
    }
    if (m_blocks.isSet()) {
        obj.insert(QString("Blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    return obj;
}

qint32 OAIExpenseDocument::getExpenseIndex() const {
    return m_expense_index;
}
void OAIExpenseDocument::setExpenseIndex(const qint32 &expense_index) {
    m_expense_index = expense_index;
    m_expense_index_isSet = true;
}

bool OAIExpenseDocument::is_expense_index_Set() const{
    return m_expense_index_isSet;
}

bool OAIExpenseDocument::is_expense_index_Valid() const{
    return m_expense_index_isValid;
}

QList OAIExpenseDocument::getSummaryFields() const {
    return m_summary_fields;
}
void OAIExpenseDocument::setSummaryFields(const QList &summary_fields) {
    m_summary_fields = summary_fields;
    m_summary_fields_isSet = true;
}

bool OAIExpenseDocument::is_summary_fields_Set() const{
    return m_summary_fields_isSet;
}

bool OAIExpenseDocument::is_summary_fields_Valid() const{
    return m_summary_fields_isValid;
}

QList OAIExpenseDocument::getLineItemGroups() const {
    return m_line_item_groups;
}
void OAIExpenseDocument::setLineItemGroups(const QList &line_item_groups) {
    m_line_item_groups = line_item_groups;
    m_line_item_groups_isSet = true;
}

bool OAIExpenseDocument::is_line_item_groups_Set() const{
    return m_line_item_groups_isSet;
}

bool OAIExpenseDocument::is_line_item_groups_Valid() const{
    return m_line_item_groups_isValid;
}

QList OAIExpenseDocument::getBlocks() const {
    return m_blocks;
}
void OAIExpenseDocument::setBlocks(const QList &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIExpenseDocument::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIExpenseDocument::is_blocks_Valid() const{
    return m_blocks_isValid;
}

bool OAIExpenseDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expense_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
