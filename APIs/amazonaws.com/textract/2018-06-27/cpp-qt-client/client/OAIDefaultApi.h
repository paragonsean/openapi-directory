/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalyzeDocumentRequest.h"
#include "OAIAnalyzeDocumentResponse.h"
#include "OAIAnalyzeExpenseRequest.h"
#include "OAIAnalyzeExpenseResponse.h"
#include "OAIAnalyzeIDRequest.h"
#include "OAIAnalyzeIDResponse.h"
#include "OAIDetectDocumentTextRequest.h"
#include "OAIDetectDocumentTextResponse.h"
#include "OAIGetDocumentAnalysisRequest.h"
#include "OAIGetDocumentAnalysisResponse.h"
#include "OAIGetDocumentTextDetectionRequest.h"
#include "OAIGetDocumentTextDetectionResponse.h"
#include "OAIGetExpenseAnalysisRequest.h"
#include "OAIGetExpenseAnalysisResponse.h"
#include "OAIGetLendingAnalysisRequest.h"
#include "OAIGetLendingAnalysisResponse.h"
#include "OAIGetLendingAnalysisSummaryRequest.h"
#include "OAIGetLendingAnalysisSummaryResponse.h"
#include "OAIStartDocumentAnalysisRequest.h"
#include "OAIStartDocumentAnalysisResponse.h"
#include "OAIStartDocumentTextDetectionRequest.h"
#include "OAIStartDocumentTextDetectionResponse.h"
#include "OAIStartExpenseAnalysisRequest.h"
#include "OAIStartExpenseAnalysisResponse.h"
#include "OAIStartLendingAnalysisRequest.h"
#include "OAIStartLendingAnalysisResponse.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_analyze_document_request OAIAnalyzeDocumentRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void analyzeDocument(const QString &x_amz_target, const OAIAnalyzeDocumentRequest &oai_analyze_document_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_analyze_expense_request OAIAnalyzeExpenseRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void analyzeExpense(const QString &x_amz_target, const OAIAnalyzeExpenseRequest &oai_analyze_expense_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_analyze_id_request OAIAnalyzeIDRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void analyzeID(const QString &x_amz_target, const OAIAnalyzeIDRequest &oai_analyze_id_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_detect_document_text_request OAIDetectDocumentTextRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void detectDocumentText(const QString &x_amz_target, const OAIDetectDocumentTextRequest &oai_detect_document_text_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_document_analysis_request OAIGetDocumentAnalysisRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDocumentAnalysis(const QString &x_amz_target, const OAIGetDocumentAnalysisRequest &oai_get_document_analysis_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_document_text_detection_request OAIGetDocumentTextDetectionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDocumentTextDetection(const QString &x_amz_target, const OAIGetDocumentTextDetectionRequest &oai_get_document_text_detection_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_expense_analysis_request OAIGetExpenseAnalysisRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getExpenseAnalysis(const QString &x_amz_target, const OAIGetExpenseAnalysisRequest &oai_get_expense_analysis_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_lending_analysis_request OAIGetLendingAnalysisRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getLendingAnalysis(const QString &x_amz_target, const OAIGetLendingAnalysisRequest &oai_get_lending_analysis_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_lending_analysis_summary_request OAIGetLendingAnalysisSummaryRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getLendingAnalysisSummary(const QString &x_amz_target, const OAIGetLendingAnalysisSummaryRequest &oai_get_lending_analysis_summary_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_document_analysis_request OAIStartDocumentAnalysisRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startDocumentAnalysis(const QString &x_amz_target, const OAIStartDocumentAnalysisRequest &oai_start_document_analysis_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_document_text_detection_request OAIStartDocumentTextDetectionRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startDocumentTextDetection(const QString &x_amz_target, const OAIStartDocumentTextDetectionRequest &oai_start_document_text_detection_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_expense_analysis_request OAIStartExpenseAnalysisRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startExpenseAnalysis(const QString &x_amz_target, const OAIStartExpenseAnalysisRequest &oai_start_expense_analysis_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_lending_analysis_request OAIStartLendingAnalysisRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startLendingAnalysis(const QString &x_amz_target, const OAIStartLendingAnalysisRequest &oai_start_lending_analysis_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyzeDocumentCallback(OAIHttpRequestWorker *worker);
    void analyzeExpenseCallback(OAIHttpRequestWorker *worker);
    void analyzeIDCallback(OAIHttpRequestWorker *worker);
    void detectDocumentTextCallback(OAIHttpRequestWorker *worker);
    void getDocumentAnalysisCallback(OAIHttpRequestWorker *worker);
    void getDocumentTextDetectionCallback(OAIHttpRequestWorker *worker);
    void getExpenseAnalysisCallback(OAIHttpRequestWorker *worker);
    void getLendingAnalysisCallback(OAIHttpRequestWorker *worker);
    void getLendingAnalysisSummaryCallback(OAIHttpRequestWorker *worker);
    void startDocumentAnalysisCallback(OAIHttpRequestWorker *worker);
    void startDocumentTextDetectionCallback(OAIHttpRequestWorker *worker);
    void startExpenseAnalysisCallback(OAIHttpRequestWorker *worker);
    void startLendingAnalysisCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyzeDocumentSignal(OAIAnalyzeDocumentResponse summary);
    void analyzeExpenseSignal(OAIAnalyzeExpenseResponse summary);
    void analyzeIDSignal(OAIAnalyzeIDResponse summary);
    void detectDocumentTextSignal(OAIDetectDocumentTextResponse summary);
    void getDocumentAnalysisSignal(OAIGetDocumentAnalysisResponse summary);
    void getDocumentTextDetectionSignal(OAIGetDocumentTextDetectionResponse summary);
    void getExpenseAnalysisSignal(OAIGetExpenseAnalysisResponse summary);
    void getLendingAnalysisSignal(OAIGetLendingAnalysisResponse summary);
    void getLendingAnalysisSummarySignal(OAIGetLendingAnalysisSummaryResponse summary);
    void startDocumentAnalysisSignal(OAIStartDocumentAnalysisResponse summary);
    void startDocumentTextDetectionSignal(OAIStartDocumentTextDetectionResponse summary);
    void startExpenseAnalysisSignal(OAIStartExpenseAnalysisResponse summary);
    void startLendingAnalysisSignal(OAIStartLendingAnalysisResponse summary);


    void analyzeDocumentSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeDocumentResponse summary);
    void analyzeExpenseSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeExpenseResponse summary);
    void analyzeIDSignalFull(OAIHttpRequestWorker *worker, OAIAnalyzeIDResponse summary);
    void detectDocumentTextSignalFull(OAIHttpRequestWorker *worker, OAIDetectDocumentTextResponse summary);
    void getDocumentAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIGetDocumentAnalysisResponse summary);
    void getDocumentTextDetectionSignalFull(OAIHttpRequestWorker *worker, OAIGetDocumentTextDetectionResponse summary);
    void getExpenseAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIGetExpenseAnalysisResponse summary);
    void getLendingAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIGetLendingAnalysisResponse summary);
    void getLendingAnalysisSummarySignalFull(OAIHttpRequestWorker *worker, OAIGetLendingAnalysisSummaryResponse summary);
    void startDocumentAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIStartDocumentAnalysisResponse summary);
    void startDocumentTextDetectionSignalFull(OAIHttpRequestWorker *worker, OAIStartDocumentTextDetectionResponse summary);
    void startExpenseAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIStartExpenseAnalysisResponse summary);
    void startLendingAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIStartLendingAnalysisResponse summary);

    Q_DECL_DEPRECATED_X("Use analyzeDocumentSignalError() instead")
    void analyzeDocumentSignalE(OAIAnalyzeDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeDocumentSignalError(OAIAnalyzeDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeExpenseSignalError() instead")
    void analyzeExpenseSignalE(OAIAnalyzeExpenseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeExpenseSignalError(OAIAnalyzeExpenseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeIDSignalError() instead")
    void analyzeIDSignalE(OAIAnalyzeIDResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeIDSignalError(OAIAnalyzeIDResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectDocumentTextSignalError() instead")
    void detectDocumentTextSignalE(OAIDetectDocumentTextResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectDocumentTextSignalError(OAIDetectDocumentTextResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentAnalysisSignalError() instead")
    void getDocumentAnalysisSignalE(OAIGetDocumentAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentAnalysisSignalError(OAIGetDocumentAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentTextDetectionSignalError() instead")
    void getDocumentTextDetectionSignalE(OAIGetDocumentTextDetectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentTextDetectionSignalError(OAIGetDocumentTextDetectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpenseAnalysisSignalError() instead")
    void getExpenseAnalysisSignalE(OAIGetExpenseAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpenseAnalysisSignalError(OAIGetExpenseAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLendingAnalysisSignalError() instead")
    void getLendingAnalysisSignalE(OAIGetLendingAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLendingAnalysisSignalError(OAIGetLendingAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLendingAnalysisSummarySignalError() instead")
    void getLendingAnalysisSummarySignalE(OAIGetLendingAnalysisSummaryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLendingAnalysisSummarySignalError(OAIGetLendingAnalysisSummaryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDocumentAnalysisSignalError() instead")
    void startDocumentAnalysisSignalE(OAIStartDocumentAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startDocumentAnalysisSignalError(OAIStartDocumentAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDocumentTextDetectionSignalError() instead")
    void startDocumentTextDetectionSignalE(OAIStartDocumentTextDetectionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startDocumentTextDetectionSignalError(OAIStartDocumentTextDetectionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startExpenseAnalysisSignalError() instead")
    void startExpenseAnalysisSignalE(OAIStartExpenseAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startExpenseAnalysisSignalError(OAIStartExpenseAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startLendingAnalysisSignalError() instead")
    void startLendingAnalysisSignalE(OAIStartLendingAnalysisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startLendingAnalysisSignalError(OAIStartLendingAnalysisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyzeDocumentSignalErrorFull() instead")
    void analyzeDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeExpenseSignalErrorFull() instead")
    void analyzeExpenseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeExpenseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyzeIDSignalErrorFull() instead")
    void analyzeIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyzeIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectDocumentTextSignalErrorFull() instead")
    void detectDocumentTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectDocumentTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentAnalysisSignalErrorFull() instead")
    void getDocumentAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentTextDetectionSignalErrorFull() instead")
    void getDocumentTextDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentTextDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExpenseAnalysisSignalErrorFull() instead")
    void getExpenseAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExpenseAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLendingAnalysisSignalErrorFull() instead")
    void getLendingAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLendingAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLendingAnalysisSummarySignalErrorFull() instead")
    void getLendingAnalysisSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLendingAnalysisSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDocumentAnalysisSignalErrorFull() instead")
    void startDocumentAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startDocumentAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDocumentTextDetectionSignalErrorFull() instead")
    void startDocumentTextDetectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startDocumentTextDetectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startExpenseAnalysisSignalErrorFull() instead")
    void startExpenseAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startExpenseAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startLendingAnalysisSignalErrorFull() instead")
    void startLendingAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startLendingAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
