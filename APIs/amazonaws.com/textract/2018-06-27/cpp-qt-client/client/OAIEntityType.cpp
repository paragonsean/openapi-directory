/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityType::OAIEntityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityType::OAIEntityType() {
    this->initializeModel();
}

OAIEntityType::~OAIEntityType() {}

void OAIEntityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEntityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEntityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COLUMN_HEADER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::COLUMN_HEADER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE_TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::TABLE_TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE_FOOTER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::TABLE_FOOTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE_SECTION_TITLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::TABLE_SECTION_TITLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE_SUMMARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::TABLE_SUMMARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STRUCTURED_TABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::STRUCTURED_TABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEMI_STRUCTURED_TABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::SEMI_STRUCTURED_TABLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEntityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEntityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEntityType::KEY:
            val = "KEY";
            break;
        case eOAIEntityType::VALUE:
            val = "VALUE";
            break;
        case eOAIEntityType::COLUMN_HEADER:
            val = "COLUMN_HEADER";
            break;
        case eOAIEntityType::TABLE_TITLE:
            val = "TABLE_TITLE";
            break;
        case eOAIEntityType::TABLE_FOOTER:
            val = "TABLE_FOOTER";
            break;
        case eOAIEntityType::TABLE_SECTION_TITLE:
            val = "TABLE_SECTION_TITLE";
            break;
        case eOAIEntityType::TABLE_SUMMARY:
            val = "TABLE_SUMMARY";
            break;
        case eOAIEntityType::STRUCTURED_TABLE:
            val = "STRUCTURED_TABLE";
            break;
        case eOAIEntityType::SEMI_STRUCTURED_TABLE:
            val = "SEMI_STRUCTURED_TABLE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEntityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEntityType::eOAIEntityType OAIEntityType::getValue() const {
    return m_value;
}

void OAIEntityType::setValue(const OAIEntityType::eOAIEntityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEntityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEntityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
