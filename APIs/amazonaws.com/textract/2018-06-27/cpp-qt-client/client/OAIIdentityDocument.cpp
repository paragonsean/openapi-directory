/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityDocument::OAIIdentityDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityDocument::OAIIdentityDocument() {
    this->initializeModel();
}

OAIIdentityDocument::~OAIIdentityDocument() {}

void OAIIdentityDocument::initializeModel() {

    m_document_index_isSet = false;
    m_document_index_isValid = false;

    m_identity_document_fields_isSet = false;
    m_identity_document_fields_isValid = false;

    m_blocks_isSet = false;
    m_blocks_isValid = false;
}

void OAIIdentityDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityDocument::fromJsonObject(QJsonObject json) {

    m_document_index_isValid = ::OpenAPI::fromJsonValue(m_document_index, json[QString("DocumentIndex")]);
    m_document_index_isSet = !json[QString("DocumentIndex")].isNull() && m_document_index_isValid;

    m_identity_document_fields_isValid = ::OpenAPI::fromJsonValue(m_identity_document_fields, json[QString("IdentityDocumentFields")]);
    m_identity_document_fields_isSet = !json[QString("IdentityDocumentFields")].isNull() && m_identity_document_fields_isValid;

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("Blocks")]);
    m_blocks_isSet = !json[QString("Blocks")].isNull() && m_blocks_isValid;
}

QString OAIIdentityDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_document_index_isSet) {
        obj.insert(QString("DocumentIndex"), ::OpenAPI::toJsonValue(m_document_index));
    }
    if (m_identity_document_fields.isSet()) {
        obj.insert(QString("IdentityDocumentFields"), ::OpenAPI::toJsonValue(m_identity_document_fields));
    }
    if (m_blocks.isSet()) {
        obj.insert(QString("Blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    return obj;
}

qint32 OAIIdentityDocument::getDocumentIndex() const {
    return m_document_index;
}
void OAIIdentityDocument::setDocumentIndex(const qint32 &document_index) {
    m_document_index = document_index;
    m_document_index_isSet = true;
}

bool OAIIdentityDocument::is_document_index_Set() const{
    return m_document_index_isSet;
}

bool OAIIdentityDocument::is_document_index_Valid() const{
    return m_document_index_isValid;
}

QList OAIIdentityDocument::getIdentityDocumentFields() const {
    return m_identity_document_fields;
}
void OAIIdentityDocument::setIdentityDocumentFields(const QList &identity_document_fields) {
    m_identity_document_fields = identity_document_fields;
    m_identity_document_fields_isSet = true;
}

bool OAIIdentityDocument::is_identity_document_fields_Set() const{
    return m_identity_document_fields_isSet;
}

bool OAIIdentityDocument::is_identity_document_fields_Valid() const{
    return m_identity_document_fields_isValid;
}

QList OAIIdentityDocument::getBlocks() const {
    return m_blocks;
}
void OAIIdentityDocument::setBlocks(const QList &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIIdentityDocument::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIIdentityDocument::is_blocks_Valid() const{
    return m_blocks_isValid;
}

bool OAIIdentityDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_document_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
