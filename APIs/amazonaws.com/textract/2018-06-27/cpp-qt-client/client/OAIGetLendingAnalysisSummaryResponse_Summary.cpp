/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetLendingAnalysisSummaryResponse_Summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetLendingAnalysisSummaryResponse_Summary::OAIGetLendingAnalysisSummaryResponse_Summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetLendingAnalysisSummaryResponse_Summary::OAIGetLendingAnalysisSummaryResponse_Summary() {
    this->initializeModel();
}

OAIGetLendingAnalysisSummaryResponse_Summary::~OAIGetLendingAnalysisSummaryResponse_Summary() {}

void OAIGetLendingAnalysisSummaryResponse_Summary::initializeModel() {

    m_document_groups_isSet = false;
    m_document_groups_isValid = false;

    m_undetected_document_types_isSet = false;
    m_undetected_document_types_isValid = false;
}

void OAIGetLendingAnalysisSummaryResponse_Summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetLendingAnalysisSummaryResponse_Summary::fromJsonObject(QJsonObject json) {

    m_document_groups_isValid = ::OpenAPI::fromJsonValue(m_document_groups, json[QString("DocumentGroups")]);
    m_document_groups_isSet = !json[QString("DocumentGroups")].isNull() && m_document_groups_isValid;

    m_undetected_document_types_isValid = ::OpenAPI::fromJsonValue(m_undetected_document_types, json[QString("UndetectedDocumentTypes")]);
    m_undetected_document_types_isSet = !json[QString("UndetectedDocumentTypes")].isNull() && m_undetected_document_types_isValid;
}

QString OAIGetLendingAnalysisSummaryResponse_Summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetLendingAnalysisSummaryResponse_Summary::asJsonObject() const {
    QJsonObject obj;
    if (m_document_groups.isSet()) {
        obj.insert(QString("DocumentGroups"), ::OpenAPI::toJsonValue(m_document_groups));
    }
    if (m_undetected_document_types.isSet()) {
        obj.insert(QString("UndetectedDocumentTypes"), ::OpenAPI::toJsonValue(m_undetected_document_types));
    }
    return obj;
}

QList OAIGetLendingAnalysisSummaryResponse_Summary::getDocumentGroups() const {
    return m_document_groups;
}
void OAIGetLendingAnalysisSummaryResponse_Summary::setDocumentGroups(const QList &document_groups) {
    m_document_groups = document_groups;
    m_document_groups_isSet = true;
}

bool OAIGetLendingAnalysisSummaryResponse_Summary::is_document_groups_Set() const{
    return m_document_groups_isSet;
}

bool OAIGetLendingAnalysisSummaryResponse_Summary::is_document_groups_Valid() const{
    return m_document_groups_isValid;
}

QList OAIGetLendingAnalysisSummaryResponse_Summary::getUndetectedDocumentTypes() const {
    return m_undetected_document_types;
}
void OAIGetLendingAnalysisSummaryResponse_Summary::setUndetectedDocumentTypes(const QList &undetected_document_types) {
    m_undetected_document_types = undetected_document_types;
    m_undetected_document_types_isSet = true;
}

bool OAIGetLendingAnalysisSummaryResponse_Summary::is_undetected_document_types_Set() const{
    return m_undetected_document_types_isSet;
}

bool OAIGetLendingAnalysisSummaryResponse_Summary::is_undetected_document_types_Valid() const{
    return m_undetected_document_types_isValid;
}

bool OAIGetLendingAnalysisSummaryResponse_Summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_undetected_document_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetLendingAnalysisSummaryResponse_Summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
