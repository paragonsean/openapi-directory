/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalyzeDocumentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalyzeDocumentRequest::OAIAnalyzeDocumentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalyzeDocumentRequest::OAIAnalyzeDocumentRequest() {
    this->initializeModel();
}

OAIAnalyzeDocumentRequest::~OAIAnalyzeDocumentRequest() {}

void OAIAnalyzeDocumentRequest::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_feature_types_isSet = false;
    m_feature_types_isValid = false;

    m_human_loop_config_isSet = false;
    m_human_loop_config_isValid = false;

    m_queries_config_isSet = false;
    m_queries_config_isValid = false;
}

void OAIAnalyzeDocumentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalyzeDocumentRequest::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("Document")]);
    m_document_isSet = !json[QString("Document")].isNull() && m_document_isValid;

    m_feature_types_isValid = ::OpenAPI::fromJsonValue(m_feature_types, json[QString("FeatureTypes")]);
    m_feature_types_isSet = !json[QString("FeatureTypes")].isNull() && m_feature_types_isValid;

    m_human_loop_config_isValid = ::OpenAPI::fromJsonValue(m_human_loop_config, json[QString("HumanLoopConfig")]);
    m_human_loop_config_isSet = !json[QString("HumanLoopConfig")].isNull() && m_human_loop_config_isValid;

    m_queries_config_isValid = ::OpenAPI::fromJsonValue(m_queries_config, json[QString("QueriesConfig")]);
    m_queries_config_isSet = !json[QString("QueriesConfig")].isNull() && m_queries_config_isValid;
}

QString OAIAnalyzeDocumentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalyzeDocumentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document.isSet()) {
        obj.insert(QString("Document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_feature_types.isSet()) {
        obj.insert(QString("FeatureTypes"), ::OpenAPI::toJsonValue(m_feature_types));
    }
    if (m_human_loop_config.isSet()) {
        obj.insert(QString("HumanLoopConfig"), ::OpenAPI::toJsonValue(m_human_loop_config));
    }
    if (m_queries_config.isSet()) {
        obj.insert(QString("QueriesConfig"), ::OpenAPI::toJsonValue(m_queries_config));
    }
    return obj;
}

OAIAnalyzeDocumentRequest_Document OAIAnalyzeDocumentRequest::getDocument() const {
    return m_document;
}
void OAIAnalyzeDocumentRequest::setDocument(const OAIAnalyzeDocumentRequest_Document &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIAnalyzeDocumentRequest::is_document_Set() const{
    return m_document_isSet;
}

bool OAIAnalyzeDocumentRequest::is_document_Valid() const{
    return m_document_isValid;
}

QList OAIAnalyzeDocumentRequest::getFeatureTypes() const {
    return m_feature_types;
}
void OAIAnalyzeDocumentRequest::setFeatureTypes(const QList &feature_types) {
    m_feature_types = feature_types;
    m_feature_types_isSet = true;
}

bool OAIAnalyzeDocumentRequest::is_feature_types_Set() const{
    return m_feature_types_isSet;
}

bool OAIAnalyzeDocumentRequest::is_feature_types_Valid() const{
    return m_feature_types_isValid;
}

OAIAnalyzeDocumentRequest_HumanLoopConfig OAIAnalyzeDocumentRequest::getHumanLoopConfig() const {
    return m_human_loop_config;
}
void OAIAnalyzeDocumentRequest::setHumanLoopConfig(const OAIAnalyzeDocumentRequest_HumanLoopConfig &human_loop_config) {
    m_human_loop_config = human_loop_config;
    m_human_loop_config_isSet = true;
}

bool OAIAnalyzeDocumentRequest::is_human_loop_config_Set() const{
    return m_human_loop_config_isSet;
}

bool OAIAnalyzeDocumentRequest::is_human_loop_config_Valid() const{
    return m_human_loop_config_isValid;
}

OAIAnalyzeDocumentRequest_QueriesConfig OAIAnalyzeDocumentRequest::getQueriesConfig() const {
    return m_queries_config;
}
void OAIAnalyzeDocumentRequest::setQueriesConfig(const OAIAnalyzeDocumentRequest_QueriesConfig &queries_config) {
    m_queries_config = queries_config;
    m_queries_config_isSet = true;
}

bool OAIAnalyzeDocumentRequest::is_queries_config_Set() const{
    return m_queries_config_isSet;
}

bool OAIAnalyzeDocumentRequest::is_queries_config_Valid() const{
    return m_queries_config_isValid;
}

bool OAIAnalyzeDocumentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_human_loop_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalyzeDocumentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && m_feature_types_isValid && true;
}

} // namespace OpenAPI
