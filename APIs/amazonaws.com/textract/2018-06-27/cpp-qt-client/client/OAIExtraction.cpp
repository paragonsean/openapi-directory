/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtraction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtraction::OAIExtraction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtraction::OAIExtraction() {
    this->initializeModel();
}

OAIExtraction::~OAIExtraction() {}

void OAIExtraction::initializeModel() {

    m_lending_document_isSet = false;
    m_lending_document_isValid = false;

    m_expense_document_isSet = false;
    m_expense_document_isValid = false;

    m_identity_document_isSet = false;
    m_identity_document_isValid = false;
}

void OAIExtraction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtraction::fromJsonObject(QJsonObject json) {

    m_lending_document_isValid = ::OpenAPI::fromJsonValue(m_lending_document, json[QString("LendingDocument")]);
    m_lending_document_isSet = !json[QString("LendingDocument")].isNull() && m_lending_document_isValid;

    m_expense_document_isValid = ::OpenAPI::fromJsonValue(m_expense_document, json[QString("ExpenseDocument")]);
    m_expense_document_isSet = !json[QString("ExpenseDocument")].isNull() && m_expense_document_isValid;

    m_identity_document_isValid = ::OpenAPI::fromJsonValue(m_identity_document, json[QString("IdentityDocument")]);
    m_identity_document_isSet = !json[QString("IdentityDocument")].isNull() && m_identity_document_isValid;
}

QString OAIExtraction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtraction::asJsonObject() const {
    QJsonObject obj;
    if (m_lending_document.isSet()) {
        obj.insert(QString("LendingDocument"), ::OpenAPI::toJsonValue(m_lending_document));
    }
    if (m_expense_document.isSet()) {
        obj.insert(QString("ExpenseDocument"), ::OpenAPI::toJsonValue(m_expense_document));
    }
    if (m_identity_document.isSet()) {
        obj.insert(QString("IdentityDocument"), ::OpenAPI::toJsonValue(m_identity_document));
    }
    return obj;
}

OAIExtraction_LendingDocument OAIExtraction::getLendingDocument() const {
    return m_lending_document;
}
void OAIExtraction::setLendingDocument(const OAIExtraction_LendingDocument &lending_document) {
    m_lending_document = lending_document;
    m_lending_document_isSet = true;
}

bool OAIExtraction::is_lending_document_Set() const{
    return m_lending_document_isSet;
}

bool OAIExtraction::is_lending_document_Valid() const{
    return m_lending_document_isValid;
}

OAIExpenseDocument OAIExtraction::getExpenseDocument() const {
    return m_expense_document;
}
void OAIExtraction::setExpenseDocument(const OAIExpenseDocument &expense_document) {
    m_expense_document = expense_document;
    m_expense_document_isSet = true;
}

bool OAIExtraction::is_expense_document_Set() const{
    return m_expense_document_isSet;
}

bool OAIExtraction::is_expense_document_Valid() const{
    return m_expense_document_isValid;
}

OAIIdentityDocument OAIExtraction::getIdentityDocument() const {
    return m_identity_document;
}
void OAIExtraction::setIdentityDocument(const OAIIdentityDocument &identity_document) {
    m_identity_document = identity_document;
    m_identity_document_isSet = true;
}

bool OAIExtraction::is_identity_document_Set() const{
    return m_identity_document_isSet;
}

bool OAIExtraction::is_identity_document_Valid() const{
    return m_identity_document_isValid;
}

bool OAIExtraction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lending_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_document.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtraction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
