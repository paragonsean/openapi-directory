/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectDocumentTextResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectDocumentTextResponse::OAIDetectDocumentTextResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectDocumentTextResponse::OAIDetectDocumentTextResponse() {
    this->initializeModel();
}

OAIDetectDocumentTextResponse::~OAIDetectDocumentTextResponse() {}

void OAIDetectDocumentTextResponse::initializeModel() {

    m_document_metadata_isSet = false;
    m_document_metadata_isValid = false;

    m_blocks_isSet = false;
    m_blocks_isValid = false;

    m_detect_document_text_model_version_isSet = false;
    m_detect_document_text_model_version_isValid = false;
}

void OAIDetectDocumentTextResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectDocumentTextResponse::fromJsonObject(QJsonObject json) {

    m_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_document_metadata, json[QString("DocumentMetadata")]);
    m_document_metadata_isSet = !json[QString("DocumentMetadata")].isNull() && m_document_metadata_isValid;

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("Blocks")]);
    m_blocks_isSet = !json[QString("Blocks")].isNull() && m_blocks_isValid;

    m_detect_document_text_model_version_isValid = ::OpenAPI::fromJsonValue(m_detect_document_text_model_version, json[QString("DetectDocumentTextModelVersion")]);
    m_detect_document_text_model_version_isSet = !json[QString("DetectDocumentTextModelVersion")].isNull() && m_detect_document_text_model_version_isValid;
}

QString OAIDetectDocumentTextResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectDocumentTextResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_document_metadata.isSet()) {
        obj.insert(QString("DocumentMetadata"), ::OpenAPI::toJsonValue(m_document_metadata));
    }
    if (m_blocks.isSet()) {
        obj.insert(QString("Blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    if (m_detect_document_text_model_version_isSet) {
        obj.insert(QString("DetectDocumentTextModelVersion"), ::OpenAPI::toJsonValue(m_detect_document_text_model_version));
    }
    return obj;
}

OAIDetectDocumentTextResponse_DocumentMetadata OAIDetectDocumentTextResponse::getDocumentMetadata() const {
    return m_document_metadata;
}
void OAIDetectDocumentTextResponse::setDocumentMetadata(const OAIDetectDocumentTextResponse_DocumentMetadata &document_metadata) {
    m_document_metadata = document_metadata;
    m_document_metadata_isSet = true;
}

bool OAIDetectDocumentTextResponse::is_document_metadata_Set() const{
    return m_document_metadata_isSet;
}

bool OAIDetectDocumentTextResponse::is_document_metadata_Valid() const{
    return m_document_metadata_isValid;
}

QList OAIDetectDocumentTextResponse::getBlocks() const {
    return m_blocks;
}
void OAIDetectDocumentTextResponse::setBlocks(const QList &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIDetectDocumentTextResponse::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIDetectDocumentTextResponse::is_blocks_Valid() const{
    return m_blocks_isValid;
}

QString OAIDetectDocumentTextResponse::getDetectDocumentTextModelVersion() const {
    return m_detect_document_text_model_version;
}
void OAIDetectDocumentTextResponse::setDetectDocumentTextModelVersion(const QString &detect_document_text_model_version) {
    m_detect_document_text_model_version = detect_document_text_model_version;
    m_detect_document_text_model_version_isSet = true;
}

bool OAIDetectDocumentTextResponse::is_detect_document_text_model_version_Set() const{
    return m_detect_document_text_model_version_isSet;
}

bool OAIDetectDocumentTextResponse::is_detect_document_text_model_version_Valid() const{
    return m_detect_document_text_model_version_isValid;
}

bool OAIDetectDocumentTextResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detect_document_text_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectDocumentTextResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
