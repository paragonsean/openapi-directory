/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseGroupProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseGroupProperty::OAIExpenseGroupProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseGroupProperty::OAIExpenseGroupProperty() {
    this->initializeModel();
}

OAIExpenseGroupProperty::~OAIExpenseGroupProperty() {}

void OAIExpenseGroupProperty::initializeModel() {

    m_types_isSet = false;
    m_types_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIExpenseGroupProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseGroupProperty::fromJsonObject(QJsonObject json) {

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("Types")]);
    m_types_isSet = !json[QString("Types")].isNull() && m_types_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;
}

QString OAIExpenseGroupProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseGroupProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_types.isSet()) {
        obj.insert(QString("Types"), ::OpenAPI::toJsonValue(m_types));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QList OAIExpenseGroupProperty::getTypes() const {
    return m_types;
}
void OAIExpenseGroupProperty::setTypes(const QList &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIExpenseGroupProperty::is_types_Set() const{
    return m_types_isSet;
}

bool OAIExpenseGroupProperty::is_types_Valid() const{
    return m_types_isValid;
}

QString OAIExpenseGroupProperty::getId() const {
    return m_id;
}
void OAIExpenseGroupProperty::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExpenseGroupProperty::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExpenseGroupProperty::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIExpenseGroupProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseGroupProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
