/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatureType::OAIFeatureType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatureType::OAIFeatureType() {
    this->initializeModel();
}

OAIFeatureType::~OAIFeatureType() {}

void OAIFeatureType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFeatureType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFeatureType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TABLES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFeatureType::TABLES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORMS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFeatureType::FORMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUERIES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFeatureType::QUERIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SIGNATURES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFeatureType::SIGNATURES;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFeatureType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFeatureType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFeatureType::TABLES:
            val = "TABLES";
            break;
        case eOAIFeatureType::FORMS:
            val = "FORMS";
            break;
        case eOAIFeatureType::QUERIES:
            val = "QUERIES";
            break;
        case eOAIFeatureType::SIGNATURES:
            val = "SIGNATURES";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFeatureType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFeatureType::eOAIFeatureType OAIFeatureType::getValue() const {
    return m_value;
}

void OAIFeatureType::setValue(const OAIFeatureType::eOAIFeatureType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFeatureType::isSet() const {
    
    return m_value_isSet;
}

bool OAIFeatureType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
