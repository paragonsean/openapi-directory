/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseField::OAIExpenseField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseField::OAIExpenseField() {
    this->initializeModel();
}

OAIExpenseField::~OAIExpenseField() {}

void OAIExpenseField::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_label_detection_isSet = false;
    m_label_detection_isValid = false;

    m_value_detection_isSet = false;
    m_value_detection_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_group_properties_isSet = false;
    m_group_properties_isValid = false;
}

void OAIExpenseField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseField::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_label_detection_isValid = ::OpenAPI::fromJsonValue(m_label_detection, json[QString("LabelDetection")]);
    m_label_detection_isSet = !json[QString("LabelDetection")].isNull() && m_label_detection_isValid;

    m_value_detection_isValid = ::OpenAPI::fromJsonValue(m_value_detection, json[QString("ValueDetection")]);
    m_value_detection_isSet = !json[QString("ValueDetection")].isNull() && m_value_detection_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("PageNumber")]);
    m_page_number_isSet = !json[QString("PageNumber")].isNull() && m_page_number_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_group_properties_isValid = ::OpenAPI::fromJsonValue(m_group_properties, json[QString("GroupProperties")]);
    m_group_properties_isSet = !json[QString("GroupProperties")].isNull() && m_group_properties_isValid;
}

QString OAIExpenseField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseField::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_label_detection.isSet()) {
        obj.insert(QString("LabelDetection"), ::OpenAPI::toJsonValue(m_label_detection));
    }
    if (m_value_detection.isSet()) {
        obj.insert(QString("ValueDetection"), ::OpenAPI::toJsonValue(m_value_detection));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("PageNumber"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_group_properties.isSet()) {
        obj.insert(QString("GroupProperties"), ::OpenAPI::toJsonValue(m_group_properties));
    }
    return obj;
}

OAIExpenseField_Type OAIExpenseField::getType() const {
    return m_type;
}
void OAIExpenseField::setType(const OAIExpenseField_Type &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExpenseField::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExpenseField::is_type_Valid() const{
    return m_type_isValid;
}

OAIExpenseField_LabelDetection OAIExpenseField::getLabelDetection() const {
    return m_label_detection;
}
void OAIExpenseField::setLabelDetection(const OAIExpenseField_LabelDetection &label_detection) {
    m_label_detection = label_detection;
    m_label_detection_isSet = true;
}

bool OAIExpenseField::is_label_detection_Set() const{
    return m_label_detection_isSet;
}

bool OAIExpenseField::is_label_detection_Valid() const{
    return m_label_detection_isValid;
}

OAIExpenseField_ValueDetection OAIExpenseField::getValueDetection() const {
    return m_value_detection;
}
void OAIExpenseField::setValueDetection(const OAIExpenseField_ValueDetection &value_detection) {
    m_value_detection = value_detection;
    m_value_detection_isSet = true;
}

bool OAIExpenseField::is_value_detection_Set() const{
    return m_value_detection_isSet;
}

bool OAIExpenseField::is_value_detection_Valid() const{
    return m_value_detection_isValid;
}

qint32 OAIExpenseField::getPageNumber() const {
    return m_page_number;
}
void OAIExpenseField::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIExpenseField::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIExpenseField::is_page_number_Valid() const{
    return m_page_number_isValid;
}

OAIExpenseField_Currency OAIExpenseField::getCurrency() const {
    return m_currency;
}
void OAIExpenseField::setCurrency(const OAIExpenseField_Currency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIExpenseField::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIExpenseField::is_currency_Valid() const{
    return m_currency_isValid;
}

QList OAIExpenseField::getGroupProperties() const {
    return m_group_properties;
}
void OAIExpenseField::setGroupProperties(const QList &group_properties) {
    m_group_properties = group_properties;
    m_group_properties_isSet = true;
}

bool OAIExpenseField::is_group_properties_Set() const{
    return m_group_properties_isSet;
}

bool OAIExpenseField::is_group_properties_Valid() const{
    return m_group_properties_isValid;
}

bool OAIExpenseField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
