/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Query from './Query';

/**
 * The BlockQuery model module.
 * @module model/BlockQuery
 * @version 2018-06-27
 */
class BlockQuery {
    /**
     * Constructs a new <code>BlockQuery</code>.
     * @alias module:model/BlockQuery
     * @implements module:model/Query
     * @param text {String} 
     */
    constructor(text) { 
        Query.initialize(this, text);
        BlockQuery.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['Text'] = text;
    }

    /**
     * Constructs a <code>BlockQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlockQuery} obj Optional instance to populate.
     * @return {module:model/BlockQuery} The populated <code>BlockQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlockQuery();
            Query.constructFromObject(data, obj);

            if (data.hasOwnProperty('Text')) {
                obj['Text'] = ApiClient.convertToType(data['Text'], 'String');
            }
            if (data.hasOwnProperty('Alias')) {
                obj['Alias'] = ApiClient.convertToType(data['Alias'], 'String');
            }
            if (data.hasOwnProperty('Pages')) {
                obj['Pages'] = ApiClient.convertToType(data['Pages'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlockQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlockQuery</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlockQuery.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Text`
        if (data['Text']) { // data not null
          String.validateJSON(data['Text']);
        }
        // validate the optional field `Alias`
        if (data['Alias']) { // data not null
          String.validateJSON(data['Alias']);
        }
        // validate the optional field `Pages`
        if (data['Pages']) { // data not null
          Array.validateJSON(data['Pages']);
        }

        return true;
    }


}

BlockQuery.RequiredProperties = ["Text"];

/**
 * @member {String} Text
 */
BlockQuery.prototype['Text'] = undefined;

/**
 * @member {String} Alias
 */
BlockQuery.prototype['Alias'] = undefined;

/**
 * @member {Array} Pages
 */
BlockQuery.prototype['Pages'] = undefined;


// Implement Query interface:
/**
 * @member {String} Text
 */
Query.prototype['Text'] = undefined;
/**
 * @member {String} Alias
 */
Query.prototype['Alias'] = undefined;
/**
 * @member {Array} Pages
 */
Query.prototype['Pages'] = undefined;




export default BlockQuery;

