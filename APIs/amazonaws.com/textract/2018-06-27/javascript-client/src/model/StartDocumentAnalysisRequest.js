/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueriesConfig from './QueriesConfig';
import StartDocumentAnalysisRequestDocumentLocation from './StartDocumentAnalysisRequestDocumentLocation';
import StartDocumentAnalysisRequestNotificationChannel from './StartDocumentAnalysisRequestNotificationChannel';
import StartDocumentAnalysisRequestOutputConfig from './StartDocumentAnalysisRequestOutputConfig';

/**
 * The StartDocumentAnalysisRequest model module.
 * @module model/StartDocumentAnalysisRequest
 * @version 2018-06-27
 */
class StartDocumentAnalysisRequest {
    /**
     * Constructs a new <code>StartDocumentAnalysisRequest</code>.
     * @alias module:model/StartDocumentAnalysisRequest
     * @param documentLocation {module:model/StartDocumentAnalysisRequestDocumentLocation} 
     * @param featureTypes {Array} 
     */
    constructor(documentLocation, featureTypes) { 
        
        StartDocumentAnalysisRequest.initialize(this, documentLocation, featureTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentLocation, featureTypes) { 
        obj['DocumentLocation'] = documentLocation;
        obj['FeatureTypes'] = featureTypes;
    }

    /**
     * Constructs a <code>StartDocumentAnalysisRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartDocumentAnalysisRequest} obj Optional instance to populate.
     * @return {module:model/StartDocumentAnalysisRequest} The populated <code>StartDocumentAnalysisRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartDocumentAnalysisRequest();

            if (data.hasOwnProperty('DocumentLocation')) {
                obj['DocumentLocation'] = StartDocumentAnalysisRequestDocumentLocation.constructFromObject(data['DocumentLocation']);
            }
            if (data.hasOwnProperty('FeatureTypes')) {
                obj['FeatureTypes'] = ApiClient.convertToType(data['FeatureTypes'], Array);
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('JobTag')) {
                obj['JobTag'] = ApiClient.convertToType(data['JobTag'], 'String');
            }
            if (data.hasOwnProperty('NotificationChannel')) {
                obj['NotificationChannel'] = StartDocumentAnalysisRequestNotificationChannel.constructFromObject(data['NotificationChannel']);
            }
            if (data.hasOwnProperty('OutputConfig')) {
                obj['OutputConfig'] = StartDocumentAnalysisRequestOutputConfig.constructFromObject(data['OutputConfig']);
            }
            if (data.hasOwnProperty('KMSKeyId')) {
                obj['KMSKeyId'] = ApiClient.convertToType(data['KMSKeyId'], 'String');
            }
            if (data.hasOwnProperty('QueriesConfig')) {
                obj['QueriesConfig'] = QueriesConfig.constructFromObject(data['QueriesConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartDocumentAnalysisRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartDocumentAnalysisRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartDocumentAnalysisRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DocumentLocation`
        if (data['DocumentLocation']) { // data not null
          StartDocumentAnalysisRequestDocumentLocation.validateJSON(data['DocumentLocation']);
        }
        // validate the optional field `FeatureTypes`
        if (data['FeatureTypes']) { // data not null
          Array.validateJSON(data['FeatureTypes']);
        }
        // validate the optional field `ClientRequestToken`
        if (data['ClientRequestToken']) { // data not null
          String.validateJSON(data['ClientRequestToken']);
        }
        // validate the optional field `JobTag`
        if (data['JobTag']) { // data not null
          String.validateJSON(data['JobTag']);
        }
        // validate the optional field `NotificationChannel`
        if (data['NotificationChannel']) { // data not null
          StartDocumentAnalysisRequestNotificationChannel.validateJSON(data['NotificationChannel']);
        }
        // validate the optional field `OutputConfig`
        if (data['OutputConfig']) { // data not null
          StartDocumentAnalysisRequestOutputConfig.validateJSON(data['OutputConfig']);
        }
        // validate the optional field `KMSKeyId`
        if (data['KMSKeyId']) { // data not null
          String.validateJSON(data['KMSKeyId']);
        }
        // validate the optional field `QueriesConfig`
        if (data['QueriesConfig']) { // data not null
          QueriesConfig.validateJSON(data['QueriesConfig']);
        }

        return true;
    }


}

StartDocumentAnalysisRequest.RequiredProperties = ["DocumentLocation", "FeatureTypes"];

/**
 * @member {module:model/StartDocumentAnalysisRequestDocumentLocation} DocumentLocation
 */
StartDocumentAnalysisRequest.prototype['DocumentLocation'] = undefined;

/**
 * @member {Array} FeatureTypes
 */
StartDocumentAnalysisRequest.prototype['FeatureTypes'] = undefined;

/**
 * @member {String} ClientRequestToken
 */
StartDocumentAnalysisRequest.prototype['ClientRequestToken'] = undefined;

/**
 * @member {String} JobTag
 */
StartDocumentAnalysisRequest.prototype['JobTag'] = undefined;

/**
 * @member {module:model/StartDocumentAnalysisRequestNotificationChannel} NotificationChannel
 */
StartDocumentAnalysisRequest.prototype['NotificationChannel'] = undefined;

/**
 * @member {module:model/StartDocumentAnalysisRequestOutputConfig} OutputConfig
 */
StartDocumentAnalysisRequest.prototype['OutputConfig'] = undefined;

/**
 * @member {String} KMSKeyId
 */
StartDocumentAnalysisRequest.prototype['KMSKeyId'] = undefined;

/**
 * @member {module:model/QueriesConfig} QueriesConfig
 */
StartDocumentAnalysisRequest.prototype['QueriesConfig'] = undefined;






export default StartDocumentAnalysisRequest;

