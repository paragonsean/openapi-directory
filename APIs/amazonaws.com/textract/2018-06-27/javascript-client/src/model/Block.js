/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockGeometry from './BlockGeometry';
import BlockQuery from './BlockQuery';
import BlockType from './BlockType';
import SelectionStatus from './SelectionStatus';
import TextType from './TextType';

/**
 * The Block model module.
 * @module model/Block
 * @version 2018-06-27
 */
class Block {
    /**
     * Constructs a new <code>Block</code>.
     * &lt;p&gt;A &lt;code&gt;Block&lt;/code&gt; represents items that are recognized in a document within a group of pixels close to each other. The information returned in a &lt;code&gt;Block&lt;/code&gt; object depends on the type of operation. In text detection for documents (for example &lt;a&gt;DetectDocumentText&lt;/a&gt;), you get information about the detected words and lines of text. In text analysis (for example &lt;a&gt;AnalyzeDocument&lt;/a&gt;), you can also get information about the fields, tables, and selection elements that are detected in the document.&lt;/p&gt; &lt;p&gt;An array of &lt;code&gt;Block&lt;/code&gt; objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as &lt;a&gt;DetectDocumentText&lt;/a&gt;, the array of &lt;code&gt;Block&lt;/code&gt; objects is the entire set of results. In asynchronous operations, such as &lt;a&gt;GetDocumentAnalysis&lt;/a&gt;, the array is returned over one or more responses.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html\&quot;&gt;How Amazon Textract Works&lt;/a&gt;.&lt;/p&gt;
     * @alias module:model/Block
     */
    constructor() { 
        
        Block.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Block</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Block} obj Optional instance to populate.
     * @return {module:model/Block} The populated <code>Block</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Block();

            if (data.hasOwnProperty('BlockType')) {
                obj['BlockType'] = ApiClient.convertToType(data['BlockType'], BlockType);
            }
            if (data.hasOwnProperty('Confidence')) {
                obj['Confidence'] = ApiClient.convertToType(data['Confidence'], 'Number');
            }
            if (data.hasOwnProperty('Text')) {
                obj['Text'] = ApiClient.convertToType(data['Text'], 'String');
            }
            if (data.hasOwnProperty('TextType')) {
                obj['TextType'] = ApiClient.convertToType(data['TextType'], TextType);
            }
            if (data.hasOwnProperty('RowIndex')) {
                obj['RowIndex'] = ApiClient.convertToType(data['RowIndex'], 'Number');
            }
            if (data.hasOwnProperty('ColumnIndex')) {
                obj['ColumnIndex'] = ApiClient.convertToType(data['ColumnIndex'], 'Number');
            }
            if (data.hasOwnProperty('RowSpan')) {
                obj['RowSpan'] = ApiClient.convertToType(data['RowSpan'], 'Number');
            }
            if (data.hasOwnProperty('ColumnSpan')) {
                obj['ColumnSpan'] = ApiClient.convertToType(data['ColumnSpan'], 'Number');
            }
            if (data.hasOwnProperty('Geometry')) {
                obj['Geometry'] = BlockGeometry.constructFromObject(data['Geometry']);
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Relationships')) {
                obj['Relationships'] = ApiClient.convertToType(data['Relationships'], Array);
            }
            if (data.hasOwnProperty('EntityTypes')) {
                obj['EntityTypes'] = ApiClient.convertToType(data['EntityTypes'], Array);
            }
            if (data.hasOwnProperty('SelectionStatus')) {
                obj['SelectionStatus'] = ApiClient.convertToType(data['SelectionStatus'], SelectionStatus);
            }
            if (data.hasOwnProperty('Page')) {
                obj['Page'] = ApiClient.convertToType(data['Page'], 'Number');
            }
            if (data.hasOwnProperty('Query')) {
                obj['Query'] = BlockQuery.constructFromObject(data['Query']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Block</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Block</code>.
     */
    static validateJSON(data) {
        // validate the optional field `BlockType`
        if (data['BlockType']) { // data not null
          BlockType.validateJSON(data['BlockType']);
        }
        // validate the optional field `Confidence`
        if (data['Confidence']) { // data not null
          Number.validateJSON(data['Confidence']);
        }
        // validate the optional field `Text`
        if (data['Text']) { // data not null
          String.validateJSON(data['Text']);
        }
        // validate the optional field `TextType`
        if (data['TextType']) { // data not null
          TextType.validateJSON(data['TextType']);
        }
        // validate the optional field `RowIndex`
        if (data['RowIndex']) { // data not null
          Number.validateJSON(data['RowIndex']);
        }
        // validate the optional field `ColumnIndex`
        if (data['ColumnIndex']) { // data not null
          Number.validateJSON(data['ColumnIndex']);
        }
        // validate the optional field `RowSpan`
        if (data['RowSpan']) { // data not null
          Number.validateJSON(data['RowSpan']);
        }
        // validate the optional field `ColumnSpan`
        if (data['ColumnSpan']) { // data not null
          Number.validateJSON(data['ColumnSpan']);
        }
        // validate the optional field `Geometry`
        if (data['Geometry']) { // data not null
          BlockGeometry.validateJSON(data['Geometry']);
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Relationships`
        if (data['Relationships']) { // data not null
          Array.validateJSON(data['Relationships']);
        }
        // validate the optional field `EntityTypes`
        if (data['EntityTypes']) { // data not null
          Array.validateJSON(data['EntityTypes']);
        }
        // validate the optional field `SelectionStatus`
        if (data['SelectionStatus']) { // data not null
          SelectionStatus.validateJSON(data['SelectionStatus']);
        }
        // validate the optional field `Page`
        if (data['Page']) { // data not null
          Number.validateJSON(data['Page']);
        }
        // validate the optional field `Query`
        if (data['Query']) { // data not null
          BlockQuery.validateJSON(data['Query']);
        }

        return true;
    }


}



/**
 * @member {module:model/BlockType} BlockType
 */
Block.prototype['BlockType'] = undefined;

/**
 * @member {Number} Confidence
 */
Block.prototype['Confidence'] = undefined;

/**
 * @member {String} Text
 */
Block.prototype['Text'] = undefined;

/**
 * @member {module:model/TextType} TextType
 */
Block.prototype['TextType'] = undefined;

/**
 * @member {Number} RowIndex
 */
Block.prototype['RowIndex'] = undefined;

/**
 * @member {Number} ColumnIndex
 */
Block.prototype['ColumnIndex'] = undefined;

/**
 * @member {Number} RowSpan
 */
Block.prototype['RowSpan'] = undefined;

/**
 * @member {Number} ColumnSpan
 */
Block.prototype['ColumnSpan'] = undefined;

/**
 * @member {module:model/BlockGeometry} Geometry
 */
Block.prototype['Geometry'] = undefined;

/**
 * @member {String} Id
 */
Block.prototype['Id'] = undefined;

/**
 * @member {Array} Relationships
 */
Block.prototype['Relationships'] = undefined;

/**
 * @member {Array} EntityTypes
 */
Block.prototype['EntityTypes'] = undefined;

/**
 * @member {module:model/SelectionStatus} SelectionStatus
 */
Block.prototype['SelectionStatus'] = undefined;

/**
 * @member {Number} Page
 */
Block.prototype['Page'] = undefined;

/**
 * @member {module:model/BlockQuery} Query
 */
Block.prototype['Query'] = undefined;






export default Block;

