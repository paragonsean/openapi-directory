/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RelationshipType from './RelationshipType';

/**
 * The Relationship model module.
 * @module model/Relationship
 * @version 2018-06-27
 */
class Relationship {
    /**
     * Constructs a new <code>Relationship</code>.
     * &lt;p&gt;Information about how blocks are related to each other. A &lt;code&gt;Block&lt;/code&gt; object contains 0 or more &lt;code&gt;Relation&lt;/code&gt; objects in a list, &lt;code&gt;Relationships&lt;/code&gt;. For more information, see &lt;a&gt;Block&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;Type&lt;/code&gt; element provides the type of the relationship for all blocks in the &lt;code&gt;IDs&lt;/code&gt; array. &lt;/p&gt;
     * @alias module:model/Relationship
     */
    constructor() { 
        
        Relationship.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Relationship</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relationship} obj Optional instance to populate.
     * @return {module:model/Relationship} The populated <code>Relationship</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relationship();

            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], RelationshipType);
            }
            if (data.hasOwnProperty('Ids')) {
                obj['Ids'] = ApiClient.convertToType(data['Ids'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relationship</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relationship</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          RelationshipType.validateJSON(data['Type']);
        }
        // validate the optional field `Ids`
        if (data['Ids']) { // data not null
          Array.validateJSON(data['Ids']);
        }

        return true;
    }


}



/**
 * @member {module:model/RelationshipType} Type
 */
Relationship.prototype['Type'] = undefined;

/**
 * @member {Array} Ids
 */
Relationship.prototype['Ids'] = undefined;






export default Relationship;

