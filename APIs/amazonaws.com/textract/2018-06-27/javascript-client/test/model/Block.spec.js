/**
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonTextract);
  }
}(this, function(expect, AmazonTextract) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonTextract.Block();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Block', function() {
    it('should create an instance of Block', function() {
      // uncomment below and update the code to test Block
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be.a(AmazonTextract.Block);
    });

    it('should have the property blockType (base name: "BlockType")', function() {
      // uncomment below and update the code to test the property blockType
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property confidence (base name: "Confidence")', function() {
      // uncomment below and update the code to test the property confidence
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "Text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property textType (base name: "TextType")', function() {
      // uncomment below and update the code to test the property textType
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property rowIndex (base name: "RowIndex")', function() {
      // uncomment below and update the code to test the property rowIndex
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property columnIndex (base name: "ColumnIndex")', function() {
      // uncomment below and update the code to test the property columnIndex
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property rowSpan (base name: "RowSpan")', function() {
      // uncomment below and update the code to test the property rowSpan
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property columnSpan (base name: "ColumnSpan")', function() {
      // uncomment below and update the code to test the property columnSpan
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property geometry (base name: "Geometry")', function() {
      // uncomment below and update the code to test the property geometry
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property relationships (base name: "Relationships")', function() {
      // uncomment below and update the code to test the property relationships
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property entityTypes (base name: "EntityTypes")', function() {
      // uncomment below and update the code to test the property entityTypes
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property selectionStatus (base name: "SelectionStatus")', function() {
      // uncomment below and update the code to test the property selectionStatus
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property page (base name: "Page")', function() {
      // uncomment below and update the code to test the property page
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

    it('should have the property query (base name: "Query")', function() {
      // uncomment below and update the code to test the property query
      //var instance = new AmazonTextract.Block();
      //expect(instance).to.be();
    });

  });

}));
