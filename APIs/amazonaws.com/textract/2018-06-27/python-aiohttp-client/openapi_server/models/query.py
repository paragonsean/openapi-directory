# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, alias: str=None, pages: List=None):
        """Query - a model defined in OpenAPI

        :param text: The text of this Query.
        :param alias: The alias of this Query.
        :param pages: The pages of this Query.
        """
        self.openapi_types = {
            'text': str,
            'alias': str,
            'pages': List
        }

        self.attribute_map = {
            'text': 'Text',
            'alias': 'Alias',
            'pages': 'Pages'
        }

        self._text = text
        self._alias = alias
        self._pages = pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Query of this Query.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this Query.


        :return: The text of this Query.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Query.


        :param text: The text of this Query.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def alias(self):
        """Gets the alias of this Query.


        :return: The alias of this Query.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Query.


        :param alias: The alias of this Query.
        :type alias: str
        """

        self._alias = alias

    @property
    def pages(self):
        """Gets the pages of this Query.


        :return: The pages of this Query.
        :rtype: List
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this Query.


        :param pages: The pages of this Query.
        :type pages: List
        """

        self._pages = pages
