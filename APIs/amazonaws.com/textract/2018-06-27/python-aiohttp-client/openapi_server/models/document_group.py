# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, split_documents: List=None, detected_signatures: List=None, undetected_signatures: List=None):
        """DocumentGroup - a model defined in OpenAPI

        :param type: The type of this DocumentGroup.
        :param split_documents: The split_documents of this DocumentGroup.
        :param detected_signatures: The detected_signatures of this DocumentGroup.
        :param undetected_signatures: The undetected_signatures of this DocumentGroup.
        """
        self.openapi_types = {
            'type': str,
            'split_documents': List,
            'detected_signatures': List,
            'undetected_signatures': List
        }

        self.attribute_map = {
            'type': 'Type',
            'split_documents': 'SplitDocuments',
            'detected_signatures': 'DetectedSignatures',
            'undetected_signatures': 'UndetectedSignatures'
        }

        self._type = type
        self._split_documents = split_documents
        self._detected_signatures = detected_signatures
        self._undetected_signatures = undetected_signatures

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentGroup of this DocumentGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this DocumentGroup.


        :return: The type of this DocumentGroup.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DocumentGroup.


        :param type: The type of this DocumentGroup.
        :type type: str
        """

        self._type = type

    @property
    def split_documents(self):
        """Gets the split_documents of this DocumentGroup.


        :return: The split_documents of this DocumentGroup.
        :rtype: List
        """
        return self._split_documents

    @split_documents.setter
    def split_documents(self, split_documents):
        """Sets the split_documents of this DocumentGroup.


        :param split_documents: The split_documents of this DocumentGroup.
        :type split_documents: List
        """

        self._split_documents = split_documents

    @property
    def detected_signatures(self):
        """Gets the detected_signatures of this DocumentGroup.


        :return: The detected_signatures of this DocumentGroup.
        :rtype: List
        """
        return self._detected_signatures

    @detected_signatures.setter
    def detected_signatures(self, detected_signatures):
        """Sets the detected_signatures of this DocumentGroup.


        :param detected_signatures: The detected_signatures of this DocumentGroup.
        :type detected_signatures: List
        """

        self._detected_signatures = detected_signatures

    @property
    def undetected_signatures(self):
        """Gets the undetected_signatures of this DocumentGroup.


        :return: The undetected_signatures of this DocumentGroup.
        :rtype: List
        """
        return self._undetected_signatures

    @undetected_signatures.setter
    def undetected_signatures(self, undetected_signatures):
        """Sets the undetected_signatures of this DocumentGroup.


        :param undetected_signatures: The undetected_signatures of this DocumentGroup.
        :type undetected_signatures: List
        """

        self._undetected_signatures = undetected_signatures
