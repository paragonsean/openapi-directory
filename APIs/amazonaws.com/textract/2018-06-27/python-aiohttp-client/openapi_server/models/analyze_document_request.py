# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analyze_document_request_document import AnalyzeDocumentRequestDocument
from openapi_server.models.analyze_document_request_human_loop_config import AnalyzeDocumentRequestHumanLoopConfig
from openapi_server.models.analyze_document_request_queries_config import AnalyzeDocumentRequestQueriesConfig
from openapi_server import util


class AnalyzeDocumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document: AnalyzeDocumentRequestDocument=None, feature_types: List=None, human_loop_config: AnalyzeDocumentRequestHumanLoopConfig=None, queries_config: AnalyzeDocumentRequestQueriesConfig=None):
        """AnalyzeDocumentRequest - a model defined in OpenAPI

        :param document: The document of this AnalyzeDocumentRequest.
        :param feature_types: The feature_types of this AnalyzeDocumentRequest.
        :param human_loop_config: The human_loop_config of this AnalyzeDocumentRequest.
        :param queries_config: The queries_config of this AnalyzeDocumentRequest.
        """
        self.openapi_types = {
            'document': AnalyzeDocumentRequestDocument,
            'feature_types': List,
            'human_loop_config': AnalyzeDocumentRequestHumanLoopConfig,
            'queries_config': AnalyzeDocumentRequestQueriesConfig
        }

        self.attribute_map = {
            'document': 'Document',
            'feature_types': 'FeatureTypes',
            'human_loop_config': 'HumanLoopConfig',
            'queries_config': 'QueriesConfig'
        }

        self._document = document
        self._feature_types = feature_types
        self._human_loop_config = human_loop_config
        self._queries_config = queries_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeDocumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeDocumentRequest of this AnalyzeDocumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document(self):
        """Gets the document of this AnalyzeDocumentRequest.


        :return: The document of this AnalyzeDocumentRequest.
        :rtype: AnalyzeDocumentRequestDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AnalyzeDocumentRequest.


        :param document: The document of this AnalyzeDocumentRequest.
        :type document: AnalyzeDocumentRequestDocument
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def feature_types(self):
        """Gets the feature_types of this AnalyzeDocumentRequest.


        :return: The feature_types of this AnalyzeDocumentRequest.
        :rtype: List
        """
        return self._feature_types

    @feature_types.setter
    def feature_types(self, feature_types):
        """Sets the feature_types of this AnalyzeDocumentRequest.


        :param feature_types: The feature_types of this AnalyzeDocumentRequest.
        :type feature_types: List
        """
        if feature_types is None:
            raise ValueError("Invalid value for `feature_types`, must not be `None`")

        self._feature_types = feature_types

    @property
    def human_loop_config(self):
        """Gets the human_loop_config of this AnalyzeDocumentRequest.


        :return: The human_loop_config of this AnalyzeDocumentRequest.
        :rtype: AnalyzeDocumentRequestHumanLoopConfig
        """
        return self._human_loop_config

    @human_loop_config.setter
    def human_loop_config(self, human_loop_config):
        """Sets the human_loop_config of this AnalyzeDocumentRequest.


        :param human_loop_config: The human_loop_config of this AnalyzeDocumentRequest.
        :type human_loop_config: AnalyzeDocumentRequestHumanLoopConfig
        """

        self._human_loop_config = human_loop_config

    @property
    def queries_config(self):
        """Gets the queries_config of this AnalyzeDocumentRequest.


        :return: The queries_config of this AnalyzeDocumentRequest.
        :rtype: AnalyzeDocumentRequestQueriesConfig
        """
        return self._queries_config

    @queries_config.setter
    def queries_config(self, queries_config):
        """Sets the queries_config of this AnalyzeDocumentRequest.


        :param queries_config: The queries_config of this AnalyzeDocumentRequest.
        :type queries_config: AnalyzeDocumentRequestQueriesConfig
        """

        self._queries_config = queries_config
