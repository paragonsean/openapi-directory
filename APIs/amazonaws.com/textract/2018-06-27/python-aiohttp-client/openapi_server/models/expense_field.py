# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expense_field_currency import ExpenseFieldCurrency
from openapi_server.models.expense_field_label_detection import ExpenseFieldLabelDetection
from openapi_server.models.expense_field_type import ExpenseFieldType
from openapi_server.models.expense_field_value_detection import ExpenseFieldValueDetection
from openapi_server import util


class ExpenseField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ExpenseFieldType=None, label_detection: ExpenseFieldLabelDetection=None, value_detection: ExpenseFieldValueDetection=None, page_number: int=None, currency: ExpenseFieldCurrency=None, group_properties: List=None):
        """ExpenseField - a model defined in OpenAPI

        :param type: The type of this ExpenseField.
        :param label_detection: The label_detection of this ExpenseField.
        :param value_detection: The value_detection of this ExpenseField.
        :param page_number: The page_number of this ExpenseField.
        :param currency: The currency of this ExpenseField.
        :param group_properties: The group_properties of this ExpenseField.
        """
        self.openapi_types = {
            'type': ExpenseFieldType,
            'label_detection': ExpenseFieldLabelDetection,
            'value_detection': ExpenseFieldValueDetection,
            'page_number': int,
            'currency': ExpenseFieldCurrency,
            'group_properties': List
        }

        self.attribute_map = {
            'type': 'Type',
            'label_detection': 'LabelDetection',
            'value_detection': 'ValueDetection',
            'page_number': 'PageNumber',
            'currency': 'Currency',
            'group_properties': 'GroupProperties'
        }

        self._type = type
        self._label_detection = label_detection
        self._value_detection = value_detection
        self._page_number = page_number
        self._currency = currency
        self._group_properties = group_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseField of this ExpenseField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ExpenseField.


        :return: The type of this ExpenseField.
        :rtype: ExpenseFieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExpenseField.


        :param type: The type of this ExpenseField.
        :type type: ExpenseFieldType
        """

        self._type = type

    @property
    def label_detection(self):
        """Gets the label_detection of this ExpenseField.


        :return: The label_detection of this ExpenseField.
        :rtype: ExpenseFieldLabelDetection
        """
        return self._label_detection

    @label_detection.setter
    def label_detection(self, label_detection):
        """Sets the label_detection of this ExpenseField.


        :param label_detection: The label_detection of this ExpenseField.
        :type label_detection: ExpenseFieldLabelDetection
        """

        self._label_detection = label_detection

    @property
    def value_detection(self):
        """Gets the value_detection of this ExpenseField.


        :return: The value_detection of this ExpenseField.
        :rtype: ExpenseFieldValueDetection
        """
        return self._value_detection

    @value_detection.setter
    def value_detection(self, value_detection):
        """Sets the value_detection of this ExpenseField.


        :param value_detection: The value_detection of this ExpenseField.
        :type value_detection: ExpenseFieldValueDetection
        """

        self._value_detection = value_detection

    @property
    def page_number(self):
        """Gets the page_number of this ExpenseField.


        :return: The page_number of this ExpenseField.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ExpenseField.


        :param page_number: The page_number of this ExpenseField.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def currency(self):
        """Gets the currency of this ExpenseField.


        :return: The currency of this ExpenseField.
        :rtype: ExpenseFieldCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ExpenseField.


        :param currency: The currency of this ExpenseField.
        :type currency: ExpenseFieldCurrency
        """

        self._currency = currency

    @property
    def group_properties(self):
        """Gets the group_properties of this ExpenseField.


        :return: The group_properties of this ExpenseField.
        :rtype: List
        """
        return self._group_properties

    @group_properties.setter
    def group_properties(self, group_properties):
        """Sets the group_properties of this ExpenseField.


        :param group_properties: The group_properties of this ExpenseField.
        :type group_properties: List
        """

        self._group_properties = group_properties
