# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geometry import Geometry
from openapi_server import util


class ExpenseDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, geometry: Geometry=None, confidence: float=None):
        """ExpenseDetection - a model defined in OpenAPI

        :param text: The text of this ExpenseDetection.
        :param geometry: The geometry of this ExpenseDetection.
        :param confidence: The confidence of this ExpenseDetection.
        """
        self.openapi_types = {
            'text': str,
            'geometry': Geometry,
            'confidence': float
        }

        self.attribute_map = {
            'text': 'Text',
            'geometry': 'Geometry',
            'confidence': 'Confidence'
        }

        self._text = text
        self._geometry = geometry
        self._confidence = confidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpenseDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpenseDetection of this ExpenseDetection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this ExpenseDetection.


        :return: The text of this ExpenseDetection.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ExpenseDetection.


        :param text: The text of this ExpenseDetection.
        :type text: str
        """

        self._text = text

    @property
    def geometry(self):
        """Gets the geometry of this ExpenseDetection.


        :return: The geometry of this ExpenseDetection.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this ExpenseDetection.


        :param geometry: The geometry of this ExpenseDetection.
        :type geometry: Geometry
        """

        self._geometry = geometry

    @property
    def confidence(self):
        """Gets the confidence of this ExpenseDetection.


        :return: The confidence of this ExpenseDetection.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this ExpenseDetection.


        :param confidence: The confidence of this ExpenseDetection.
        :type confidence: float
        """

        self._confidence = confidence
