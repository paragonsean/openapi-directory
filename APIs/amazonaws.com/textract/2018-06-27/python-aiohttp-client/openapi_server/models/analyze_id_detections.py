# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analyze_id_detections_normalized_value import AnalyzeIDDetectionsNormalizedValue
from openapi_server import util


class AnalyzeIDDetections(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, text: str=None, normalized_value: AnalyzeIDDetectionsNormalizedValue=None, confidence: float=None):
        """AnalyzeIDDetections - a model defined in OpenAPI

        :param text: The text of this AnalyzeIDDetections.
        :param normalized_value: The normalized_value of this AnalyzeIDDetections.
        :param confidence: The confidence of this AnalyzeIDDetections.
        """
        self.openapi_types = {
            'text': str,
            'normalized_value': AnalyzeIDDetectionsNormalizedValue,
            'confidence': float
        }

        self.attribute_map = {
            'text': 'Text',
            'normalized_value': 'NormalizedValue',
            'confidence': 'Confidence'
        }

        self._text = text
        self._normalized_value = normalized_value
        self._confidence = confidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalyzeIDDetections':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalyzeIDDetections of this AnalyzeIDDetections.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self):
        """Gets the text of this AnalyzeIDDetections.


        :return: The text of this AnalyzeIDDetections.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AnalyzeIDDetections.


        :param text: The text of this AnalyzeIDDetections.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def normalized_value(self):
        """Gets the normalized_value of this AnalyzeIDDetections.


        :return: The normalized_value of this AnalyzeIDDetections.
        :rtype: AnalyzeIDDetectionsNormalizedValue
        """
        return self._normalized_value

    @normalized_value.setter
    def normalized_value(self, normalized_value):
        """Sets the normalized_value of this AnalyzeIDDetections.


        :param normalized_value: The normalized_value of this AnalyzeIDDetections.
        :type normalized_value: AnalyzeIDDetectionsNormalizedValue
        """

        self._normalized_value = normalized_value

    @property
    def confidence(self):
        """Gets the confidence of this AnalyzeIDDetections.


        :return: The confidence of this AnalyzeIDDetections.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AnalyzeIDDetections.


        :param confidence: The confidence of this AnalyzeIDDetections.
        :type confidence: float
        """

        self._confidence = confidence
