/*
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HumanLoopConfigDataAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalyzeDocumentRequestHumanLoopConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:42.141552-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyzeDocumentRequestHumanLoopConfig {
  public static final String SERIALIZED_NAME_HUMAN_LOOP_NAME = "HumanLoopName";
  @SerializedName(SERIALIZED_NAME_HUMAN_LOOP_NAME)
  private String humanLoopName;

  public static final String SERIALIZED_NAME_FLOW_DEFINITION_ARN = "FlowDefinitionArn";
  @SerializedName(SERIALIZED_NAME_FLOW_DEFINITION_ARN)
  private String flowDefinitionArn;

  public static final String SERIALIZED_NAME_DATA_ATTRIBUTES = "DataAttributes";
  @SerializedName(SERIALIZED_NAME_DATA_ATTRIBUTES)
  private HumanLoopConfigDataAttributes dataAttributes;

  public AnalyzeDocumentRequestHumanLoopConfig() {
  }

  public AnalyzeDocumentRequestHumanLoopConfig humanLoopName(String humanLoopName) {
    this.humanLoopName = humanLoopName;
    return this;
  }

  /**
   * Get humanLoopName
   * @return humanLoopName
   */
  @javax.annotation.Nonnull
  public String getHumanLoopName() {
    return humanLoopName;
  }

  public void setHumanLoopName(String humanLoopName) {
    this.humanLoopName = humanLoopName;
  }


  public AnalyzeDocumentRequestHumanLoopConfig flowDefinitionArn(String flowDefinitionArn) {
    this.flowDefinitionArn = flowDefinitionArn;
    return this;
  }

  /**
   * Get flowDefinitionArn
   * @return flowDefinitionArn
   */
  @javax.annotation.Nonnull
  public String getFlowDefinitionArn() {
    return flowDefinitionArn;
  }

  public void setFlowDefinitionArn(String flowDefinitionArn) {
    this.flowDefinitionArn = flowDefinitionArn;
  }


  public AnalyzeDocumentRequestHumanLoopConfig dataAttributes(HumanLoopConfigDataAttributes dataAttributes) {
    this.dataAttributes = dataAttributes;
    return this;
  }

  /**
   * Get dataAttributes
   * @return dataAttributes
   */
  @javax.annotation.Nullable
  public HumanLoopConfigDataAttributes getDataAttributes() {
    return dataAttributes;
  }

  public void setDataAttributes(HumanLoopConfigDataAttributes dataAttributes) {
    this.dataAttributes = dataAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzeDocumentRequestHumanLoopConfig analyzeDocumentRequestHumanLoopConfig = (AnalyzeDocumentRequestHumanLoopConfig) o;
    return Objects.equals(this.humanLoopName, analyzeDocumentRequestHumanLoopConfig.humanLoopName) &&
        Objects.equals(this.flowDefinitionArn, analyzeDocumentRequestHumanLoopConfig.flowDefinitionArn) &&
        Objects.equals(this.dataAttributes, analyzeDocumentRequestHumanLoopConfig.dataAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(humanLoopName, flowDefinitionArn, dataAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzeDocumentRequestHumanLoopConfig {\n");
    sb.append("    humanLoopName: ").append(toIndentedString(humanLoopName)).append("\n");
    sb.append("    flowDefinitionArn: ").append(toIndentedString(flowDefinitionArn)).append("\n");
    sb.append("    dataAttributes: ").append(toIndentedString(dataAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HumanLoopName");
    openapiFields.add("FlowDefinitionArn");
    openapiFields.add("DataAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HumanLoopName");
    openapiRequiredFields.add("FlowDefinitionArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzeDocumentRequestHumanLoopConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzeDocumentRequestHumanLoopConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzeDocumentRequestHumanLoopConfig is not found in the empty JSON string", AnalyzeDocumentRequestHumanLoopConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzeDocumentRequestHumanLoopConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzeDocumentRequestHumanLoopConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalyzeDocumentRequestHumanLoopConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `HumanLoopName`
      String.validateJsonElement(jsonObj.get("HumanLoopName"));
      // validate the required field `FlowDefinitionArn`
      String.validateJsonElement(jsonObj.get("FlowDefinitionArn"));
      // validate the optional field `DataAttributes`
      if (jsonObj.get("DataAttributes") != null && !jsonObj.get("DataAttributes").isJsonNull()) {
        HumanLoopConfigDataAttributes.validateJsonElement(jsonObj.get("DataAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzeDocumentRequestHumanLoopConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzeDocumentRequestHumanLoopConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzeDocumentRequestHumanLoopConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzeDocumentRequestHumanLoopConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzeDocumentRequestHumanLoopConfig>() {
           @Override
           public void write(JsonWriter out, AnalyzeDocumentRequestHumanLoopConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzeDocumentRequestHumanLoopConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzeDocumentRequestHumanLoopConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzeDocumentRequestHumanLoopConfig
   * @throws IOException if the JSON string is invalid with respect to AnalyzeDocumentRequestHumanLoopConfig
   */
  public static AnalyzeDocumentRequestHumanLoopConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzeDocumentRequestHumanLoopConfig.class);
  }

  /**
   * Convert an instance of AnalyzeDocumentRequestHumanLoopConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

