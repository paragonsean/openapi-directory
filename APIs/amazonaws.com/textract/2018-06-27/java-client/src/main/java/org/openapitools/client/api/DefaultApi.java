/*
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnalyzeDocumentRequest;
import org.openapitools.client.model.AnalyzeDocumentResponse;
import org.openapitools.client.model.AnalyzeExpenseRequest;
import org.openapitools.client.model.AnalyzeExpenseResponse;
import org.openapitools.client.model.AnalyzeIDRequest;
import org.openapitools.client.model.AnalyzeIDResponse;
import org.openapitools.client.model.DetectDocumentTextRequest;
import org.openapitools.client.model.DetectDocumentTextResponse;
import org.openapitools.client.model.GetDocumentAnalysisRequest;
import org.openapitools.client.model.GetDocumentAnalysisResponse;
import org.openapitools.client.model.GetDocumentTextDetectionRequest;
import org.openapitools.client.model.GetDocumentTextDetectionResponse;
import org.openapitools.client.model.GetExpenseAnalysisRequest;
import org.openapitools.client.model.GetExpenseAnalysisResponse;
import org.openapitools.client.model.GetLendingAnalysisRequest;
import org.openapitools.client.model.GetLendingAnalysisResponse;
import org.openapitools.client.model.GetLendingAnalysisSummaryRequest;
import org.openapitools.client.model.GetLendingAnalysisSummaryResponse;
import org.openapitools.client.model.StartDocumentAnalysisRequest;
import org.openapitools.client.model.StartDocumentAnalysisResponse;
import org.openapitools.client.model.StartDocumentTextDetectionRequest;
import org.openapitools.client.model.StartDocumentTextDetectionResponse;
import org.openapitools.client.model.StartExpenseAnalysisRequest;
import org.openapitools.client.model.StartExpenseAnalysisResponse;
import org.openapitools.client.model.StartLendingAnalysisRequest;
import org.openapitools.client.model.StartLendingAnalysisResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyzeDocument
     * @param xAmzTarget  (required)
     * @param analyzeDocumentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> HumanLoopQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeDocumentCall(String xAmzTarget, AnalyzeDocumentRequest analyzeDocumentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyzeDocumentRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.AnalyzeDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeDocumentValidateBeforeCall(String xAmzTarget, AnalyzeDocumentRequest analyzeDocumentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling analyzeDocument(Async)");
        }

        // verify the required parameter 'analyzeDocumentRequest' is set
        if (analyzeDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'analyzeDocumentRequest' when calling analyzeDocument(Async)");
        }

        return analyzeDocumentCall(xAmzTarget, analyzeDocumentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Analyzes an input document for relationships between detected items. &lt;/p&gt; &lt;p&gt;The types of information returned are as follows: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Form data (key-value pairs). The related information is returned in two &lt;a&gt;Block&lt;/a&gt; objects, each of type &lt;code&gt;KEY_VALUE_SET&lt;/code&gt;: a KEY &lt;code&gt;Block&lt;/code&gt; object and a VALUE &lt;code&gt;Block&lt;/code&gt; object. For example, &lt;i&gt;Name: Ana Silva Carolina&lt;/i&gt; contains a key and value. &lt;i&gt;Name:&lt;/i&gt; is the key. &lt;i&gt;Ana Silva Carolina&lt;/i&gt; is the value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Table and table cell data. A TABLE &lt;code&gt;Block&lt;/code&gt; object contains information about a detected table. A CELL &lt;code&gt;Block&lt;/code&gt; object is returned for each cell in a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lines and words of text. A LINE &lt;code&gt;Block&lt;/code&gt; object contains one or more WORD &lt;code&gt;Block&lt;/code&gt; objects. All lines and words that are detected in the document are returned (including text that doesn&#39;t have a relationship with the value of &lt;code&gt;FeatureTypes&lt;/code&gt;). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Signatures. A SIGNATURE &lt;code&gt;Block&lt;/code&gt; object contains the location information of a signature in a document. If used in conjunction with forms or tables, a signature can be given a Key-Value pairing or be detected in the cell of a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query Result. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT &lt;code&gt;Block&lt;/code&gt; object contains information about a selection element, including the selection status.&lt;/p&gt; &lt;p&gt;You can choose which type of analysis to perform by specifying the &lt;code&gt;FeatureTypes&lt;/code&gt; list. &lt;/p&gt; &lt;p&gt;The output is returned in a list of &lt;code&gt;Block&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AnalyzeDocument&lt;/code&gt; is a synchronous operation. To analyze documents asynchronously, use &lt;a&gt;StartDocumentAnalysis&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param analyzeDocumentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AnalyzeDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> HumanLoopQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzeDocumentResponse analyzeDocument(String xAmzTarget, AnalyzeDocumentRequest analyzeDocumentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AnalyzeDocumentResponse> localVarResp = analyzeDocumentWithHttpInfo(xAmzTarget, analyzeDocumentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Analyzes an input document for relationships between detected items. &lt;/p&gt; &lt;p&gt;The types of information returned are as follows: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Form data (key-value pairs). The related information is returned in two &lt;a&gt;Block&lt;/a&gt; objects, each of type &lt;code&gt;KEY_VALUE_SET&lt;/code&gt;: a KEY &lt;code&gt;Block&lt;/code&gt; object and a VALUE &lt;code&gt;Block&lt;/code&gt; object. For example, &lt;i&gt;Name: Ana Silva Carolina&lt;/i&gt; contains a key and value. &lt;i&gt;Name:&lt;/i&gt; is the key. &lt;i&gt;Ana Silva Carolina&lt;/i&gt; is the value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Table and table cell data. A TABLE &lt;code&gt;Block&lt;/code&gt; object contains information about a detected table. A CELL &lt;code&gt;Block&lt;/code&gt; object is returned for each cell in a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lines and words of text. A LINE &lt;code&gt;Block&lt;/code&gt; object contains one or more WORD &lt;code&gt;Block&lt;/code&gt; objects. All lines and words that are detected in the document are returned (including text that doesn&#39;t have a relationship with the value of &lt;code&gt;FeatureTypes&lt;/code&gt;). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Signatures. A SIGNATURE &lt;code&gt;Block&lt;/code&gt; object contains the location information of a signature in a document. If used in conjunction with forms or tables, a signature can be given a Key-Value pairing or be detected in the cell of a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query Result. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT &lt;code&gt;Block&lt;/code&gt; object contains information about a selection element, including the selection status.&lt;/p&gt; &lt;p&gt;You can choose which type of analysis to perform by specifying the &lt;code&gt;FeatureTypes&lt;/code&gt; list. &lt;/p&gt; &lt;p&gt;The output is returned in a list of &lt;code&gt;Block&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AnalyzeDocument&lt;/code&gt; is a synchronous operation. To analyze documents asynchronously, use &lt;a&gt;StartDocumentAnalysis&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param analyzeDocumentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AnalyzeDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> HumanLoopQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeDocumentResponse> analyzeDocumentWithHttpInfo(String xAmzTarget, AnalyzeDocumentRequest analyzeDocumentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = analyzeDocumentValidateBeforeCall(xAmzTarget, analyzeDocumentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AnalyzeDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Analyzes an input document for relationships between detected items. &lt;/p&gt; &lt;p&gt;The types of information returned are as follows: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Form data (key-value pairs). The related information is returned in two &lt;a&gt;Block&lt;/a&gt; objects, each of type &lt;code&gt;KEY_VALUE_SET&lt;/code&gt;: a KEY &lt;code&gt;Block&lt;/code&gt; object and a VALUE &lt;code&gt;Block&lt;/code&gt; object. For example, &lt;i&gt;Name: Ana Silva Carolina&lt;/i&gt; contains a key and value. &lt;i&gt;Name:&lt;/i&gt; is the key. &lt;i&gt;Ana Silva Carolina&lt;/i&gt; is the value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Table and table cell data. A TABLE &lt;code&gt;Block&lt;/code&gt; object contains information about a detected table. A CELL &lt;code&gt;Block&lt;/code&gt; object is returned for each cell in a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lines and words of text. A LINE &lt;code&gt;Block&lt;/code&gt; object contains one or more WORD &lt;code&gt;Block&lt;/code&gt; objects. All lines and words that are detected in the document are returned (including text that doesn&#39;t have a relationship with the value of &lt;code&gt;FeatureTypes&lt;/code&gt;). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Signatures. A SIGNATURE &lt;code&gt;Block&lt;/code&gt; object contains the location information of a signature in a document. If used in conjunction with forms or tables, a signature can be given a Key-Value pairing or be detected in the cell of a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query Result. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT &lt;code&gt;Block&lt;/code&gt; object contains information about a selection element, including the selection status.&lt;/p&gt; &lt;p&gt;You can choose which type of analysis to perform by specifying the &lt;code&gt;FeatureTypes&lt;/code&gt; list. &lt;/p&gt; &lt;p&gt;The output is returned in a list of &lt;code&gt;Block&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AnalyzeDocument&lt;/code&gt; is a synchronous operation. To analyze documents asynchronously, use &lt;a&gt;StartDocumentAnalysis&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param analyzeDocumentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> HumanLoopQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeDocumentAsync(String xAmzTarget, AnalyzeDocumentRequest analyzeDocumentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AnalyzeDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeDocumentValidateBeforeCall(xAmzTarget, analyzeDocumentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyzeExpense
     * @param xAmzTarget  (required)
     * @param analyzeExpenseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeExpenseCall(String xAmzTarget, AnalyzeExpenseRequest analyzeExpenseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyzeExpenseRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.AnalyzeExpense";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeExpenseValidateBeforeCall(String xAmzTarget, AnalyzeExpenseRequest analyzeExpenseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling analyzeExpense(Async)");
        }

        // verify the required parameter 'analyzeExpenseRequest' is set
        if (analyzeExpenseRequest == null) {
            throw new ApiException("Missing the required parameter 'analyzeExpenseRequest' when calling analyzeExpense(Async)");
        }

        return analyzeExpenseCall(xAmzTarget, analyzeExpenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;AnalyzeExpense&lt;/code&gt; synchronously analyzes an input document for financially related relationships between text.&lt;/p&gt; &lt;p&gt;Information is returned as &lt;code&gt;ExpenseDocuments&lt;/code&gt; and seperated as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LineItemGroups&lt;/code&gt;- A data set containing &lt;code&gt;LineItems&lt;/code&gt; which store information about the lines of text, such as an item purchased and its price on a receipt.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SummaryFields&lt;/code&gt;- Contains all other information a receipt, such as header information or the vendors name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param analyzeExpenseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AnalyzeExpenseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzeExpenseResponse analyzeExpense(String xAmzTarget, AnalyzeExpenseRequest analyzeExpenseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AnalyzeExpenseResponse> localVarResp = analyzeExpenseWithHttpInfo(xAmzTarget, analyzeExpenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; &lt;code&gt;AnalyzeExpense&lt;/code&gt; synchronously analyzes an input document for financially related relationships between text.&lt;/p&gt; &lt;p&gt;Information is returned as &lt;code&gt;ExpenseDocuments&lt;/code&gt; and seperated as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LineItemGroups&lt;/code&gt;- A data set containing &lt;code&gt;LineItems&lt;/code&gt; which store information about the lines of text, such as an item purchased and its price on a receipt.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SummaryFields&lt;/code&gt;- Contains all other information a receipt, such as header information or the vendors name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param analyzeExpenseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AnalyzeExpenseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeExpenseResponse> analyzeExpenseWithHttpInfo(String xAmzTarget, AnalyzeExpenseRequest analyzeExpenseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = analyzeExpenseValidateBeforeCall(xAmzTarget, analyzeExpenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AnalyzeExpenseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;code&gt;AnalyzeExpense&lt;/code&gt; synchronously analyzes an input document for financially related relationships between text.&lt;/p&gt; &lt;p&gt;Information is returned as &lt;code&gt;ExpenseDocuments&lt;/code&gt; and seperated as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LineItemGroups&lt;/code&gt;- A data set containing &lt;code&gt;LineItems&lt;/code&gt; which store information about the lines of text, such as an item purchased and its price on a receipt.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SummaryFields&lt;/code&gt;- Contains all other information a receipt, such as header information or the vendors name.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param analyzeExpenseRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeExpenseAsync(String xAmzTarget, AnalyzeExpenseRequest analyzeExpenseRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AnalyzeExpenseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeExpenseValidateBeforeCall(xAmzTarget, analyzeExpenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeExpenseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyzeID
     * @param xAmzTarget  (required)
     * @param analyzeIDRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeIDCall(String xAmzTarget, AnalyzeIDRequest analyzeIDRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyzeIDRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.AnalyzeID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeIDValidateBeforeCall(String xAmzTarget, AnalyzeIDRequest analyzeIDRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling analyzeID(Async)");
        }

        // verify the required parameter 'analyzeIDRequest' is set
        if (analyzeIDRequest == null) {
            throw new ApiException("Missing the required parameter 'analyzeIDRequest' when calling analyzeID(Async)");
        }

        return analyzeIDCall(xAmzTarget, analyzeIDRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Analyzes identity documents for relevant information. This information is extracted and returned as &lt;code&gt;IdentityDocumentFields&lt;/code&gt;, which records both the normalized field and value of the extracted text. Unlike other Amazon Textract operations, &lt;code&gt;AnalyzeID&lt;/code&gt; doesn&#39;t return any Geometry data.
     * @param xAmzTarget  (required)
     * @param analyzeIDRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AnalyzeIDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public AnalyzeIDResponse analyzeID(String xAmzTarget, AnalyzeIDRequest analyzeIDRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AnalyzeIDResponse> localVarResp = analyzeIDWithHttpInfo(xAmzTarget, analyzeIDRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Analyzes identity documents for relevant information. This information is extracted and returned as &lt;code&gt;IdentityDocumentFields&lt;/code&gt;, which records both the normalized field and value of the extracted text. Unlike other Amazon Textract operations, &lt;code&gt;AnalyzeID&lt;/code&gt; doesn&#39;t return any Geometry data.
     * @param xAmzTarget  (required)
     * @param analyzeIDRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AnalyzeIDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyzeIDResponse> analyzeIDWithHttpInfo(String xAmzTarget, AnalyzeIDRequest analyzeIDRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = analyzeIDValidateBeforeCall(xAmzTarget, analyzeIDRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AnalyzeIDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Analyzes identity documents for relevant information. This information is extracted and returned as &lt;code&gt;IdentityDocumentFields&lt;/code&gt;, which records both the normalized field and value of the extracted text. Unlike other Amazon Textract operations, &lt;code&gt;AnalyzeID&lt;/code&gt; doesn&#39;t return any Geometry data.
     * @param xAmzTarget  (required)
     * @param analyzeIDRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyzeIDAsync(String xAmzTarget, AnalyzeIDRequest analyzeIDRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AnalyzeIDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeIDValidateBeforeCall(xAmzTarget, analyzeIDRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeIDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectDocumentText
     * @param xAmzTarget  (required)
     * @param detectDocumentTextRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectDocumentTextCall(String xAmzTarget, DetectDocumentTextRequest detectDocumentTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detectDocumentTextRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.DetectDocumentText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectDocumentTextValidateBeforeCall(String xAmzTarget, DetectDocumentTextRequest detectDocumentTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling detectDocumentText(Async)");
        }

        // verify the required parameter 'detectDocumentTextRequest' is set
        if (detectDocumentTextRequest == null) {
            throw new ApiException("Missing the required parameter 'detectDocumentTextRequest' when calling detectDocumentText(Async)");
        }

        return detectDocumentTextCall(xAmzTarget, detectDocumentTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detects text in the input document. Amazon Textract can detect lines of text and the words that make up a line of text. The input document must be in one of the following image formats: JPEG, PNG, PDF, or TIFF. &lt;code&gt;DetectDocumentText&lt;/code&gt; returns the detected text in an array of &lt;a&gt;Block&lt;/a&gt; objects. &lt;/p&gt; &lt;p&gt;Each document page has as an associated &lt;code&gt;Block&lt;/code&gt; of type PAGE. Each PAGE &lt;code&gt;Block&lt;/code&gt; object is the parent of LINE &lt;code&gt;Block&lt;/code&gt; objects that represent the lines of detected text on a page. A LINE &lt;code&gt;Block&lt;/code&gt; object is a parent for each word that makes up the line. Words are represented by &lt;code&gt;Block&lt;/code&gt; objects of type WORD.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectDocumentText&lt;/code&gt; is a synchronous operation. To analyze documents asynchronously, use &lt;a&gt;StartDocumentTextDetection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param detectDocumentTextRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DetectDocumentTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public DetectDocumentTextResponse detectDocumentText(String xAmzTarget, DetectDocumentTextRequest detectDocumentTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DetectDocumentTextResponse> localVarResp = detectDocumentTextWithHttpInfo(xAmzTarget, detectDocumentTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detects text in the input document. Amazon Textract can detect lines of text and the words that make up a line of text. The input document must be in one of the following image formats: JPEG, PNG, PDF, or TIFF. &lt;code&gt;DetectDocumentText&lt;/code&gt; returns the detected text in an array of &lt;a&gt;Block&lt;/a&gt; objects. &lt;/p&gt; &lt;p&gt;Each document page has as an associated &lt;code&gt;Block&lt;/code&gt; of type PAGE. Each PAGE &lt;code&gt;Block&lt;/code&gt; object is the parent of LINE &lt;code&gt;Block&lt;/code&gt; objects that represent the lines of detected text on a page. A LINE &lt;code&gt;Block&lt;/code&gt; object is a parent for each word that makes up the line. Words are represented by &lt;code&gt;Block&lt;/code&gt; objects of type WORD.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectDocumentText&lt;/code&gt; is a synchronous operation. To analyze documents asynchronously, use &lt;a&gt;StartDocumentTextDetection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param detectDocumentTextRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DetectDocumentTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectDocumentTextResponse> detectDocumentTextWithHttpInfo(String xAmzTarget, DetectDocumentTextRequest detectDocumentTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = detectDocumentTextValidateBeforeCall(xAmzTarget, detectDocumentTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DetectDocumentTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detects text in the input document. Amazon Textract can detect lines of text and the words that make up a line of text. The input document must be in one of the following image formats: JPEG, PNG, PDF, or TIFF. &lt;code&gt;DetectDocumentText&lt;/code&gt; returns the detected text in an array of &lt;a&gt;Block&lt;/a&gt; objects. &lt;/p&gt; &lt;p&gt;Each document page has as an associated &lt;code&gt;Block&lt;/code&gt; of type PAGE. Each PAGE &lt;code&gt;Block&lt;/code&gt; object is the parent of LINE &lt;code&gt;Block&lt;/code&gt; objects that represent the lines of detected text on a page. A LINE &lt;code&gt;Block&lt;/code&gt; object is a parent for each word that makes up the line. Words are represented by &lt;code&gt;Block&lt;/code&gt; objects of type WORD.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectDocumentText&lt;/code&gt; is a synchronous operation. To analyze documents asynchronously, use &lt;a&gt;StartDocumentTextDetection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param detectDocumentTextRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectDocumentTextAsync(String xAmzTarget, DetectDocumentTextRequest detectDocumentTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DetectDocumentTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectDocumentTextValidateBeforeCall(xAmzTarget, detectDocumentTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DetectDocumentTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentAnalysis
     * @param xAmzTarget  (required)
     * @param getDocumentAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAnalysisCall(String xAmzTarget, GetDocumentAnalysisRequest getDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDocumentAnalysisRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.GetDocumentAnalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentAnalysisValidateBeforeCall(String xAmzTarget, GetDocumentAnalysisRequest getDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getDocumentAnalysis(Async)");
        }

        // verify the required parameter 'getDocumentAnalysisRequest' is set
        if (getDocumentAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'getDocumentAnalysisRequest' when calling getDocumentAnalysis(Async)");
        }

        return getDocumentAnalysisCall(xAmzTarget, getDocumentAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.&lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;a&gt;StartDocumentAnalysis&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetDocumentAnalysis&lt;/code&gt; returns an array of &lt;a&gt;Block&lt;/a&gt; objects. The following types of information are returned: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Form data (key-value pairs). The related information is returned in two &lt;a&gt;Block&lt;/a&gt; objects, each of type &lt;code&gt;KEY_VALUE_SET&lt;/code&gt;: a KEY &lt;code&gt;Block&lt;/code&gt; object and a VALUE &lt;code&gt;Block&lt;/code&gt; object. For example, &lt;i&gt;Name: Ana Silva Carolina&lt;/i&gt; contains a key and value. &lt;i&gt;Name:&lt;/i&gt; is the key. &lt;i&gt;Ana Silva Carolina&lt;/i&gt; is the value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Table and table cell data. A TABLE &lt;code&gt;Block&lt;/code&gt; object contains information about a detected table. A CELL &lt;code&gt;Block&lt;/code&gt; object is returned for each cell in a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lines and words of text. A LINE &lt;code&gt;Block&lt;/code&gt; object contains one or more WORD &lt;code&gt;Block&lt;/code&gt; objects. All lines and words that are detected in the document are returned (including text that doesn&#39;t have a relationship with the value of the &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; &lt;code&gt;FeatureTypes&lt;/code&gt; input parameter). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query Results. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;While processing a document with queries, look out for &lt;code&gt;INVALID_REQUEST_PARAMETERS&lt;/code&gt; output. This indicates that either the per page query limit has been exceeded or that the operation is trying to query a page in the document which doesn’t exist. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT &lt;code&gt;Block&lt;/code&gt; object contains information about a selection element, including the selection status.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getDocumentAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDocumentAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentAnalysisResponse getDocumentAnalysis(String xAmzTarget, GetDocumentAnalysisRequest getDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDocumentAnalysisResponse> localVarResp = getDocumentAnalysisWithHttpInfo(xAmzTarget, getDocumentAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.&lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;a&gt;StartDocumentAnalysis&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetDocumentAnalysis&lt;/code&gt; returns an array of &lt;a&gt;Block&lt;/a&gt; objects. The following types of information are returned: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Form data (key-value pairs). The related information is returned in two &lt;a&gt;Block&lt;/a&gt; objects, each of type &lt;code&gt;KEY_VALUE_SET&lt;/code&gt;: a KEY &lt;code&gt;Block&lt;/code&gt; object and a VALUE &lt;code&gt;Block&lt;/code&gt; object. For example, &lt;i&gt;Name: Ana Silva Carolina&lt;/i&gt; contains a key and value. &lt;i&gt;Name:&lt;/i&gt; is the key. &lt;i&gt;Ana Silva Carolina&lt;/i&gt; is the value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Table and table cell data. A TABLE &lt;code&gt;Block&lt;/code&gt; object contains information about a detected table. A CELL &lt;code&gt;Block&lt;/code&gt; object is returned for each cell in a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lines and words of text. A LINE &lt;code&gt;Block&lt;/code&gt; object contains one or more WORD &lt;code&gt;Block&lt;/code&gt; objects. All lines and words that are detected in the document are returned (including text that doesn&#39;t have a relationship with the value of the &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; &lt;code&gt;FeatureTypes&lt;/code&gt; input parameter). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query Results. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;While processing a document with queries, look out for &lt;code&gt;INVALID_REQUEST_PARAMETERS&lt;/code&gt; output. This indicates that either the per page query limit has been exceeded or that the operation is trying to query a page in the document which doesn’t exist. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT &lt;code&gt;Block&lt;/code&gt; object contains information about a selection element, including the selection status.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getDocumentAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDocumentAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDocumentAnalysisResponse> getDocumentAnalysisWithHttpInfo(String xAmzTarget, GetDocumentAnalysisRequest getDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDocumentAnalysisValidateBeforeCall(xAmzTarget, getDocumentAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDocumentAnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes text in a document.&lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;a&gt;StartDocumentAnalysis&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetDocumentAnalysis&lt;/code&gt; returns an array of &lt;a&gt;Block&lt;/a&gt; objects. The following types of information are returned: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Form data (key-value pairs). The related information is returned in two &lt;a&gt;Block&lt;/a&gt; objects, each of type &lt;code&gt;KEY_VALUE_SET&lt;/code&gt;: a KEY &lt;code&gt;Block&lt;/code&gt; object and a VALUE &lt;code&gt;Block&lt;/code&gt; object. For example, &lt;i&gt;Name: Ana Silva Carolina&lt;/i&gt; contains a key and value. &lt;i&gt;Name:&lt;/i&gt; is the key. &lt;i&gt;Ana Silva Carolina&lt;/i&gt; is the value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Table and table cell data. A TABLE &lt;code&gt;Block&lt;/code&gt; object contains information about a detected table. A CELL &lt;code&gt;Block&lt;/code&gt; object is returned for each cell in a table.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Lines and words of text. A LINE &lt;code&gt;Block&lt;/code&gt; object contains one or more WORD &lt;code&gt;Block&lt;/code&gt; objects. All lines and words that are detected in the document are returned (including text that doesn&#39;t have a relationship with the value of the &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; &lt;code&gt;FeatureTypes&lt;/code&gt; input parameter). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query. A QUERY Block object contains the query text, alias and link to the associated Query results block object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Query Results. A QUERY_RESULT Block object contains the answer to the query and an ID that connects it to the query asked. This Block also contains a confidence score.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;While processing a document with queries, look out for &lt;code&gt;INVALID_REQUEST_PARAMETERS&lt;/code&gt; output. This indicates that either the per page query limit has been exceeded or that the operation is trying to query a page in the document which doesn’t exist. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Selection elements such as check boxes and option buttons (radio buttons) can be detected in form data and in tables. A SELECTION_ELEMENT &lt;code&gt;Block&lt;/code&gt; object contains information about a selection element, including the selection status.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;MaxResults&lt;/code&gt; parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getDocumentAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAnalysisAsync(String xAmzTarget, GetDocumentAnalysisRequest getDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDocumentAnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentAnalysisValidateBeforeCall(xAmzTarget, getDocumentAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDocumentAnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentTextDetection
     * @param xAmzTarget  (required)
     * @param getDocumentTextDetectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentTextDetectionCall(String xAmzTarget, GetDocumentTextDetectionRequest getDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDocumentTextDetectionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.GetDocumentTextDetection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentTextDetectionValidateBeforeCall(String xAmzTarget, GetDocumentTextDetectionRequest getDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getDocumentTextDetection(Async)");
        }

        // verify the required parameter 'getDocumentTextDetectionRequest' is set
        if (getDocumentTextDetectionRequest == null) {
            throw new ApiException("Missing the required parameter 'getDocumentTextDetectionRequest' when calling getDocumentTextDetection(Async)");
        }

        return getDocumentTextDetectionCall(xAmzTarget, getDocumentTextDetectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that detects text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.&lt;/p&gt; &lt;p&gt;You start asynchronous text detection by calling &lt;a&gt;StartDocumentTextDetection&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text detection operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetDocumentTextDetection&lt;/code&gt; returns an array of &lt;a&gt;Block&lt;/a&gt; objects. &lt;/p&gt; &lt;p&gt;Each document page has as an associated &lt;code&gt;Block&lt;/code&gt; of type PAGE. Each PAGE &lt;code&gt;Block&lt;/code&gt; object is the parent of LINE &lt;code&gt;Block&lt;/code&gt; objects that represent the lines of detected text on a page. A LINE &lt;code&gt;Block&lt;/code&gt; object is a parent for each word that makes up the line. Words are represented by &lt;code&gt;Block&lt;/code&gt; objects of type WORD.&lt;/p&gt; &lt;p&gt;Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getDocumentTextDetectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDocumentTextDetectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentTextDetectionResponse getDocumentTextDetection(String xAmzTarget, GetDocumentTextDetectionRequest getDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDocumentTextDetectionResponse> localVarResp = getDocumentTextDetectionWithHttpInfo(xAmzTarget, getDocumentTextDetectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that detects text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.&lt;/p&gt; &lt;p&gt;You start asynchronous text detection by calling &lt;a&gt;StartDocumentTextDetection&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text detection operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetDocumentTextDetection&lt;/code&gt; returns an array of &lt;a&gt;Block&lt;/a&gt; objects. &lt;/p&gt; &lt;p&gt;Each document page has as an associated &lt;code&gt;Block&lt;/code&gt; of type PAGE. Each PAGE &lt;code&gt;Block&lt;/code&gt; object is the parent of LINE &lt;code&gt;Block&lt;/code&gt; objects that represent the lines of detected text on a page. A LINE &lt;code&gt;Block&lt;/code&gt; object is a parent for each word that makes up the line. Words are represented by &lt;code&gt;Block&lt;/code&gt; objects of type WORD.&lt;/p&gt; &lt;p&gt;Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getDocumentTextDetectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDocumentTextDetectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDocumentTextDetectionResponse> getDocumentTextDetectionWithHttpInfo(String xAmzTarget, GetDocumentTextDetectionRequest getDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDocumentTextDetectionValidateBeforeCall(xAmzTarget, getDocumentTextDetectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDocumentTextDetectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that detects text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.&lt;/p&gt; &lt;p&gt;You start asynchronous text detection by calling &lt;a&gt;StartDocumentTextDetection&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text detection operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;. To get the results of the text-detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;GetDocumentTextDetection&lt;/code&gt; returns an array of &lt;a&gt;Block&lt;/a&gt; objects. &lt;/p&gt; &lt;p&gt;Each document page has as an associated &lt;code&gt;Block&lt;/code&gt; of type PAGE. Each PAGE &lt;code&gt;Block&lt;/code&gt; object is the parent of LINE &lt;code&gt;Block&lt;/code&gt; objects that represent the lines of detected text on a page. A LINE &lt;code&gt;Block&lt;/code&gt; object is a parent for each word that makes up the line. Words are represented by &lt;code&gt;Block&lt;/code&gt; objects of type WORD.&lt;/p&gt; &lt;p&gt;Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getDocumentTextDetectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentTextDetectionAsync(String xAmzTarget, GetDocumentTextDetectionRequest getDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDocumentTextDetectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentTextDetectionValidateBeforeCall(xAmzTarget, getDocumentTextDetectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDocumentTextDetectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExpenseAnalysis
     * @param xAmzTarget  (required)
     * @param getExpenseAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpenseAnalysisCall(String xAmzTarget, GetExpenseAnalysisRequest getExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getExpenseAnalysisRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.GetExpenseAnalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpenseAnalysisValidateBeforeCall(String xAmzTarget, GetExpenseAnalysisRequest getExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getExpenseAnalysis(Async)");
        }

        // verify the required parameter 'getExpenseAnalysisRequest' is set
        if (getExpenseAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'getExpenseAnalysisRequest' when calling getExpenseAnalysis(Async)");
        }

        return getExpenseAnalysisCall(xAmzTarget, getExpenseAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes invoices and receipts. Amazon Textract finds contact information, items purchased, and vendor name, from input invoices and receipts.&lt;/p&gt; &lt;p&gt;You start asynchronous invoice/receipt analysis by calling &lt;a&gt;StartExpenseAnalysis&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). Upon completion of the invoice/receipt analysis, Amazon Textract publishes the completion status to the Amazon Simple Notification Service (Amazon SNS) topic. This topic must be registered in the initial call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;. To get the results of the invoice/receipt analysis operation, first ensure that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/invoices-receipts.html\&quot;&gt;Analyzing Invoices and Receipts&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getExpenseAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetExpenseAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public GetExpenseAnalysisResponse getExpenseAnalysis(String xAmzTarget, GetExpenseAnalysisRequest getExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetExpenseAnalysisResponse> localVarResp = getExpenseAnalysisWithHttpInfo(xAmzTarget, getExpenseAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes invoices and receipts. Amazon Textract finds contact information, items purchased, and vendor name, from input invoices and receipts.&lt;/p&gt; &lt;p&gt;You start asynchronous invoice/receipt analysis by calling &lt;a&gt;StartExpenseAnalysis&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). Upon completion of the invoice/receipt analysis, Amazon Textract publishes the completion status to the Amazon Simple Notification Service (Amazon SNS) topic. This topic must be registered in the initial call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;. To get the results of the invoice/receipt analysis operation, first ensure that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/invoices-receipts.html\&quot;&gt;Analyzing Invoices and Receipts&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getExpenseAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetExpenseAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetExpenseAnalysisResponse> getExpenseAnalysisWithHttpInfo(String xAmzTarget, GetExpenseAnalysisRequest getExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getExpenseAnalysisValidateBeforeCall(xAmzTarget, getExpenseAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetExpenseAnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes invoices and receipts. Amazon Textract finds contact information, items purchased, and vendor name, from input invoices and receipts.&lt;/p&gt; &lt;p&gt;You start asynchronous invoice/receipt analysis by calling &lt;a&gt;StartExpenseAnalysis&lt;/a&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). Upon completion of the invoice/receipt analysis, Amazon Textract publishes the completion status to the Amazon Simple Notification Service (Amazon SNS) topic. This topic must be registered in the initial call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;. To get the results of the invoice/receipt analysis operation, first ensure that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Use the MaxResults parameter to limit the number of blocks that are returned. If there are more results than specified in &lt;code&gt;MaxResults&lt;/code&gt;, the value of &lt;code&gt;NextToken&lt;/code&gt; in the operation response contains a pagination token for getting the next set of results. To get the next page of results, call &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;, and populate the &lt;code&gt;NextToken&lt;/code&gt; request parameter with the token value that&#39;s returned from the previous call to &lt;code&gt;GetExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/invoices-receipts.html\&quot;&gt;Analyzing Invoices and Receipts&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getExpenseAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExpenseAnalysisAsync(String xAmzTarget, GetExpenseAnalysisRequest getExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetExpenseAnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpenseAnalysisValidateBeforeCall(xAmzTarget, getExpenseAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetExpenseAnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLendingAnalysis
     * @param xAmzTarget  (required)
     * @param getLendingAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLendingAnalysisCall(String xAmzTarget, GetLendingAnalysisRequest getLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLendingAnalysisRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.GetLendingAnalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLendingAnalysisValidateBeforeCall(String xAmzTarget, GetLendingAnalysisRequest getLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getLendingAnalysis(Async)");
        }

        // verify the required parameter 'getLendingAnalysisRequest' is set
        if (getLendingAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'getLendingAnalysisRequest' when calling getLendingAnalysis(Async)");
        }

        return getLendingAnalysisCall(xAmzTarget, getLendingAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes text in a lending document. &lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;code&gt;StartLendingAnalysis&lt;/code&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetLendingAnalysis, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLendingAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetLendingAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public GetLendingAnalysisResponse getLendingAnalysis(String xAmzTarget, GetLendingAnalysisRequest getLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetLendingAnalysisResponse> localVarResp = getLendingAnalysisWithHttpInfo(xAmzTarget, getLendingAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes text in a lending document. &lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;code&gt;StartLendingAnalysis&lt;/code&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetLendingAnalysis, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLendingAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetLendingAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLendingAnalysisResponse> getLendingAnalysisWithHttpInfo(String xAmzTarget, GetLendingAnalysisRequest getLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getLendingAnalysisValidateBeforeCall(xAmzTarget, getLendingAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetLendingAnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the results for an Amazon Textract asynchronous operation that analyzes text in a lending document. &lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;code&gt;StartLendingAnalysis&lt;/code&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call GetLendingAnalysis, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLendingAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLendingAnalysisAsync(String xAmzTarget, GetLendingAnalysisRequest getLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetLendingAnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLendingAnalysisValidateBeforeCall(xAmzTarget, getLendingAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetLendingAnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLendingAnalysisSummary
     * @param xAmzTarget  (required)
     * @param getLendingAnalysisSummaryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLendingAnalysisSummaryCall(String xAmzTarget, GetLendingAnalysisSummaryRequest getLendingAnalysisSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLendingAnalysisSummaryRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.GetLendingAnalysisSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLendingAnalysisSummaryValidateBeforeCall(String xAmzTarget, GetLendingAnalysisSummaryRequest getLendingAnalysisSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getLendingAnalysisSummary(Async)");
        }

        // verify the required parameter 'getLendingAnalysisSummaryRequest' is set
        if (getLendingAnalysisSummaryRequest == null) {
            throw new ApiException("Missing the required parameter 'getLendingAnalysisSummaryRequest' when calling getLendingAnalysisSummary(Async)");
        }

        return getLendingAnalysisSummaryCall(xAmzTarget, getLendingAnalysisSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets summarized results for the &lt;code&gt;StartLendingAnalysis&lt;/code&gt; operation, which analyzes text in a lending document. The returned summary consists of information about documents grouped together by a common document type. Information like detected signatures, page numbers, and split documents is returned with respect to the type of grouped document. &lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;code&gt;StartLendingAnalysis&lt;/code&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call &lt;code&gt;GetLendingAnalysisSummary&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLendingAnalysisSummaryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetLendingAnalysisSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public GetLendingAnalysisSummaryResponse getLendingAnalysisSummary(String xAmzTarget, GetLendingAnalysisSummaryRequest getLendingAnalysisSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetLendingAnalysisSummaryResponse> localVarResp = getLendingAnalysisSummaryWithHttpInfo(xAmzTarget, getLendingAnalysisSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets summarized results for the &lt;code&gt;StartLendingAnalysis&lt;/code&gt; operation, which analyzes text in a lending document. The returned summary consists of information about documents grouped together by a common document type. Information like detected signatures, page numbers, and split documents is returned with respect to the type of grouped document. &lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;code&gt;StartLendingAnalysis&lt;/code&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call &lt;code&gt;GetLendingAnalysisSummary&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLendingAnalysisSummaryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetLendingAnalysisSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLendingAnalysisSummaryResponse> getLendingAnalysisSummaryWithHttpInfo(String xAmzTarget, GetLendingAnalysisSummaryRequest getLendingAnalysisSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getLendingAnalysisSummaryValidateBeforeCall(xAmzTarget, getLendingAnalysisSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetLendingAnalysisSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets summarized results for the &lt;code&gt;StartLendingAnalysis&lt;/code&gt; operation, which analyzes text in a lending document. The returned summary consists of information about documents grouped together by a common document type. Information like detected signatures, page numbers, and split documents is returned with respect to the type of grouped document. &lt;/p&gt; &lt;p&gt;You start asynchronous text analysis by calling &lt;code&gt;StartLendingAnalysis&lt;/code&gt;, which returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;). When the text analysis operation finishes, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that&#39;s registered in the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If so, call &lt;code&gt;GetLendingAnalysisSummary&lt;/code&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartLendingAnalysis&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getLendingAnalysisSummaryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidJobIdException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLendingAnalysisSummaryAsync(String xAmzTarget, GetLendingAnalysisSummaryRequest getLendingAnalysisSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetLendingAnalysisSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLendingAnalysisSummaryValidateBeforeCall(xAmzTarget, getLendingAnalysisSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetLendingAnalysisSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDocumentAnalysis
     * @param xAmzTarget  (required)
     * @param startDocumentAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDocumentAnalysisCall(String xAmzTarget, StartDocumentAnalysisRequest startDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startDocumentAnalysisRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.StartDocumentAnalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDocumentAnalysisValidateBeforeCall(String xAmzTarget, StartDocumentAnalysisRequest startDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startDocumentAnalysis(Async)");
        }

        // verify the required parameter 'startDocumentAnalysisRequest' is set
        if (startDocumentAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'startDocumentAnalysisRequest' when calling startDocumentAnalysis(Async)");
        }

        return startDocumentAnalysisCall(xAmzTarget, startDocumentAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use &lt;a&gt;DocumentLocation&lt;/a&gt; to specify the bucket name and file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetDocumentAnalysis&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startDocumentAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartDocumentAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public StartDocumentAnalysisResponse startDocumentAnalysis(String xAmzTarget, StartDocumentAnalysisRequest startDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartDocumentAnalysisResponse> localVarResp = startDocumentAnalysisWithHttpInfo(xAmzTarget, startDocumentAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use &lt;a&gt;DocumentLocation&lt;/a&gt; to specify the bucket name and file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetDocumentAnalysis&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startDocumentAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartDocumentAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartDocumentAnalysisResponse> startDocumentAnalysisWithHttpInfo(String xAmzTarget, StartDocumentAnalysisRequest startDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startDocumentAnalysisValidateBeforeCall(xAmzTarget, startDocumentAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartDocumentAnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use &lt;a&gt;DocumentLocation&lt;/a&gt; to specify the bucket name and file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetDocumentAnalysis&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\&quot;&gt;Document Text Analysis&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startDocumentAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDocumentAnalysisAsync(String xAmzTarget, StartDocumentAnalysisRequest startDocumentAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartDocumentAnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDocumentAnalysisValidateBeforeCall(xAmzTarget, startDocumentAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartDocumentAnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDocumentTextDetection
     * @param xAmzTarget  (required)
     * @param startDocumentTextDetectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDocumentTextDetectionCall(String xAmzTarget, StartDocumentTextDetectionRequest startDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startDocumentTextDetectionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.StartDocumentTextDetection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDocumentTextDetectionValidateBeforeCall(String xAmzTarget, StartDocumentTextDetectionRequest startDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startDocumentTextDetection(Async)");
        }

        // verify the required parameter 'startDocumentTextDetectionRequest' is set
        if (startDocumentTextDetectionRequest == null) {
            throw new ApiException("Missing the required parameter 'startDocumentTextDetectionRequest' when calling startDocumentTextDetection(Async)");
        }

        return startDocumentTextDetectionCall(xAmzTarget, startDocumentTextDetectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentTextDetection&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use &lt;a&gt;DocumentLocation&lt;/a&gt; to specify the bucket name and file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartTextDetection&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When text detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetDocumentTextDetection&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startDocumentTextDetectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartDocumentTextDetectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public StartDocumentTextDetectionResponse startDocumentTextDetection(String xAmzTarget, StartDocumentTextDetectionRequest startDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartDocumentTextDetectionResponse> localVarResp = startDocumentTextDetectionWithHttpInfo(xAmzTarget, startDocumentTextDetectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentTextDetection&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use &lt;a&gt;DocumentLocation&lt;/a&gt; to specify the bucket name and file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartTextDetection&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When text detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetDocumentTextDetection&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startDocumentTextDetectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartDocumentTextDetectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartDocumentTextDetectionResponse> startDocumentTextDetectionWithHttpInfo(String xAmzTarget, StartDocumentTextDetectionRequest startDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startDocumentTextDetectionValidateBeforeCall(xAmzTarget, startDocumentTextDetectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartDocumentTextDetectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartDocumentTextDetection&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, TIFF, and PDF format. The documents are stored in an Amazon S3 bucket. Use &lt;a&gt;DocumentLocation&lt;/a&gt; to specify the bucket name and file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartTextDetection&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When text detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text detection operation, first check that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetDocumentTextDetection&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) from the initial call to &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\&quot;&gt;Document Text Detection&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startDocumentTextDetectionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDocumentTextDetectionAsync(String xAmzTarget, StartDocumentTextDetectionRequest startDocumentTextDetectionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartDocumentTextDetectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDocumentTextDetectionValidateBeforeCall(xAmzTarget, startDocumentTextDetectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartDocumentTextDetectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startExpenseAnalysis
     * @param xAmzTarget  (required)
     * @param startExpenseAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startExpenseAnalysisCall(String xAmzTarget, StartExpenseAnalysisRequest startExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startExpenseAnalysisRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.StartExpenseAnalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startExpenseAnalysisValidateBeforeCall(String xAmzTarget, StartExpenseAnalysisRequest startExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startExpenseAnalysis(Async)");
        }

        // verify the required parameter 'startExpenseAnalysisRequest' is set
        if (startExpenseAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'startExpenseAnalysisRequest' when calling startExpenseAnalysis(Async)");
        }

        return startExpenseAnalysisCall(xAmzTarget, startExpenseAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts the asynchronous analysis of invoices or receipts for data like contact information, items purchased, and vendor names.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExpenseAnalysis&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, and PDF format. The documents must be stored in an Amazon S3 bucket. Use the &lt;a&gt;DocumentLocation&lt;/a&gt; parameter to specify the name of your S3 bucket and the name of the document in that bucket. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExpenseAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you will provide to &lt;code&gt;GetExpenseAnalysis&lt;/code&gt; to retrieve the results of the operation. When the analysis of the input invoices/receipts is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you provide to the &lt;code&gt;NotificationChannel&lt;/code&gt;. To obtain the results of the invoice and receipt analysis operation, ensure that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetExpenseAnalysis&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) that was returned by your call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/invoice-receipts.html\&quot;&gt;Analyzing Invoices and Receipts&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startExpenseAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartExpenseAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public StartExpenseAnalysisResponse startExpenseAnalysis(String xAmzTarget, StartExpenseAnalysisRequest startExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartExpenseAnalysisResponse> localVarResp = startExpenseAnalysisWithHttpInfo(xAmzTarget, startExpenseAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts the asynchronous analysis of invoices or receipts for data like contact information, items purchased, and vendor names.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExpenseAnalysis&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, and PDF format. The documents must be stored in an Amazon S3 bucket. Use the &lt;a&gt;DocumentLocation&lt;/a&gt; parameter to specify the name of your S3 bucket and the name of the document in that bucket. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExpenseAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you will provide to &lt;code&gt;GetExpenseAnalysis&lt;/code&gt; to retrieve the results of the operation. When the analysis of the input invoices/receipts is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you provide to the &lt;code&gt;NotificationChannel&lt;/code&gt;. To obtain the results of the invoice and receipt analysis operation, ensure that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetExpenseAnalysis&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) that was returned by your call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/invoice-receipts.html\&quot;&gt;Analyzing Invoices and Receipts&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startExpenseAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartExpenseAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartExpenseAnalysisResponse> startExpenseAnalysisWithHttpInfo(String xAmzTarget, StartExpenseAnalysisRequest startExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startExpenseAnalysisValidateBeforeCall(xAmzTarget, startExpenseAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartExpenseAnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts the asynchronous analysis of invoices or receipts for data like contact information, items purchased, and vendor names.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExpenseAnalysis&lt;/code&gt; can analyze text in documents that are in JPEG, PNG, and PDF format. The documents must be stored in an Amazon S3 bucket. Use the &lt;a&gt;DocumentLocation&lt;/a&gt; parameter to specify the name of your S3 bucket and the name of the document in that bucket. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartExpenseAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you will provide to &lt;code&gt;GetExpenseAnalysis&lt;/code&gt; to retrieve the results of the operation. When the analysis of the input invoices/receipts is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you provide to the &lt;code&gt;NotificationChannel&lt;/code&gt;. To obtain the results of the invoice and receipt analysis operation, ensure that the status value published to the Amazon SNS topic is &lt;code&gt;SUCCEEDED&lt;/code&gt;. If so, call &lt;a&gt;GetExpenseAnalysis&lt;/a&gt;, and pass the job identifier (&lt;code&gt;JobId&lt;/code&gt;) that was returned by your call to &lt;code&gt;StartExpenseAnalysis&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/textract/latest/dg/invoice-receipts.html\&quot;&gt;Analyzing Invoices and Receipts&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startExpenseAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startExpenseAnalysisAsync(String xAmzTarget, StartExpenseAnalysisRequest startExpenseAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartExpenseAnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startExpenseAnalysisValidateBeforeCall(xAmzTarget, startExpenseAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartExpenseAnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startLendingAnalysis
     * @param xAmzTarget  (required)
     * @param startLendingAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startLendingAnalysisCall(String xAmzTarget, StartLendingAnalysisRequest startLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startLendingAnalysisRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Textract.StartLendingAnalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startLendingAnalysisValidateBeforeCall(String xAmzTarget, StartLendingAnalysisRequest startLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startLendingAnalysis(Async)");
        }

        // verify the required parameter 'startLendingAnalysisRequest' is set
        if (startLendingAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'startLendingAnalysisRequest' when calling startLendingAnalysis(Async)");
        }

        return startLendingAnalysisCall(xAmzTarget, startLendingAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts the classification and analysis of an input document. &lt;code&gt;StartLendingAnalysis&lt;/code&gt; initiates the classification and analysis of a packet of lending documents. &lt;code&gt;StartLendingAnalysis&lt;/code&gt; operates on a document file located in an Amazon S3 bucket.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartLendingAnalysis&lt;/code&gt; can analyze text in documents that are in one of the following formats: JPEG, PNG, TIFF, PDF. Use &lt;code&gt;DocumentLocation&lt;/code&gt; to specify the bucket name and the file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartLendingAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When the text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If the status is SUCCEEDED you can call either &lt;code&gt;GetLendingAnalysis&lt;/code&gt; or &lt;code&gt;GetLendingAnalysisSummary&lt;/code&gt; and provide the &lt;code&gt;JobId&lt;/code&gt; to obtain the results of the analysis.&lt;/p&gt; &lt;p&gt;If using &lt;code&gt;OutputConfig&lt;/code&gt; to specify an Amazon S3 bucket, the output will be contained within the specified prefix in a directory labeled with the job-id. In the directory there are 3 sub-directories: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;detailedResponse (contains the GetLendingAnalysis response)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;summaryResponse (for the GetLendingAnalysisSummary response)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;splitDocuments (documents split across logical boundaries)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param startLendingAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartLendingAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public StartLendingAnalysisResponse startLendingAnalysis(String xAmzTarget, StartLendingAnalysisRequest startLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartLendingAnalysisResponse> localVarResp = startLendingAnalysisWithHttpInfo(xAmzTarget, startLendingAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts the classification and analysis of an input document. &lt;code&gt;StartLendingAnalysis&lt;/code&gt; initiates the classification and analysis of a packet of lending documents. &lt;code&gt;StartLendingAnalysis&lt;/code&gt; operates on a document file located in an Amazon S3 bucket.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartLendingAnalysis&lt;/code&gt; can analyze text in documents that are in one of the following formats: JPEG, PNG, TIFF, PDF. Use &lt;code&gt;DocumentLocation&lt;/code&gt; to specify the bucket name and the file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartLendingAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When the text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If the status is SUCCEEDED you can call either &lt;code&gt;GetLendingAnalysis&lt;/code&gt; or &lt;code&gt;GetLendingAnalysisSummary&lt;/code&gt; and provide the &lt;code&gt;JobId&lt;/code&gt; to obtain the results of the analysis.&lt;/p&gt; &lt;p&gt;If using &lt;code&gt;OutputConfig&lt;/code&gt; to specify an Amazon S3 bucket, the output will be contained within the specified prefix in a directory labeled with the job-id. In the directory there are 3 sub-directories: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;detailedResponse (contains the GetLendingAnalysis response)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;summaryResponse (for the GetLendingAnalysisSummary response)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;splitDocuments (documents split across logical boundaries)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param startLendingAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartLendingAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartLendingAnalysisResponse> startLendingAnalysisWithHttpInfo(String xAmzTarget, StartLendingAnalysisRequest startLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startLendingAnalysisValidateBeforeCall(xAmzTarget, startLendingAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartLendingAnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts the classification and analysis of an input document. &lt;code&gt;StartLendingAnalysis&lt;/code&gt; initiates the classification and analysis of a packet of lending documents. &lt;code&gt;StartLendingAnalysis&lt;/code&gt; operates on a document file located in an Amazon S3 bucket.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartLendingAnalysis&lt;/code&gt; can analyze text in documents that are in one of the following formats: JPEG, PNG, TIFF, PDF. Use &lt;code&gt;DocumentLocation&lt;/code&gt; to specify the bucket name and the file name of the document. &lt;/p&gt; &lt;p&gt; &lt;code&gt;StartLendingAnalysis&lt;/code&gt; returns a job identifier (&lt;code&gt;JobId&lt;/code&gt;) that you use to get the results of the operation. When the text analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS) topic that you specify in &lt;code&gt;NotificationChannel&lt;/code&gt;. To get the results of the text analysis operation, first check that the status value published to the Amazon SNS topic is SUCCEEDED. If the status is SUCCEEDED you can call either &lt;code&gt;GetLendingAnalysis&lt;/code&gt; or &lt;code&gt;GetLendingAnalysisSummary&lt;/code&gt; and provide the &lt;code&gt;JobId&lt;/code&gt; to obtain the results of the analysis.&lt;/p&gt; &lt;p&gt;If using &lt;code&gt;OutputConfig&lt;/code&gt; to specify an Amazon S3 bucket, the output will be contained within the specified prefix in a directory labeled with the job-id. In the directory there are 3 sub-directories: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;detailedResponse (contains the GetLendingAnalysis response)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;summaryResponse (for the GetLendingAnalysisSummary response)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;splitDocuments (documents split across logical boundaries)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param startLendingAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidS3ObjectException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidKMSKeyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedDocumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DocumentTooLargeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadDocumentException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ProvisionedThroughputExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalServerError </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> IdempotentParameterMismatchException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startLendingAnalysisAsync(String xAmzTarget, StartLendingAnalysisRequest startLendingAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartLendingAnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startLendingAnalysisValidateBeforeCall(xAmzTarget, startLendingAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartLendingAnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
