/*
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueriesConfig;
import org.openapitools.client.model.StartDocumentAnalysisRequestDocumentLocation;
import org.openapitools.client.model.StartDocumentAnalysisRequestNotificationChannel;
import org.openapitools.client.model.StartDocumentAnalysisRequestOutputConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartDocumentAnalysisRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:42.141552-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartDocumentAnalysisRequest {
  public static final String SERIALIZED_NAME_DOCUMENT_LOCATION = "DocumentLocation";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LOCATION)
  private StartDocumentAnalysisRequestDocumentLocation documentLocation;

  public static final String SERIALIZED_NAME_FEATURE_TYPES = "FeatureTypes";
  @SerializedName(SERIALIZED_NAME_FEATURE_TYPES)
  private List featureTypes;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_JOB_TAG = "JobTag";
  @SerializedName(SERIALIZED_NAME_JOB_TAG)
  private String jobTag;

  public static final String SERIALIZED_NAME_NOTIFICATION_CHANNEL = "NotificationChannel";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CHANNEL)
  private StartDocumentAnalysisRequestNotificationChannel notificationChannel;

  public static final String SERIALIZED_NAME_OUTPUT_CONFIG = "OutputConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONFIG)
  private StartDocumentAnalysisRequestOutputConfig outputConfig;

  public static final String SERIALIZED_NAME_KM_S_KEY_ID = "KMSKeyId";
  @SerializedName(SERIALIZED_NAME_KM_S_KEY_ID)
  private String kmSKeyId;

  public static final String SERIALIZED_NAME_QUERIES_CONFIG = "QueriesConfig";
  @SerializedName(SERIALIZED_NAME_QUERIES_CONFIG)
  private QueriesConfig queriesConfig;

  public StartDocumentAnalysisRequest() {
  }

  public StartDocumentAnalysisRequest documentLocation(StartDocumentAnalysisRequestDocumentLocation documentLocation) {
    this.documentLocation = documentLocation;
    return this;
  }

  /**
   * Get documentLocation
   * @return documentLocation
   */
  @javax.annotation.Nonnull
  public StartDocumentAnalysisRequestDocumentLocation getDocumentLocation() {
    return documentLocation;
  }

  public void setDocumentLocation(StartDocumentAnalysisRequestDocumentLocation documentLocation) {
    this.documentLocation = documentLocation;
  }


  public StartDocumentAnalysisRequest featureTypes(List featureTypes) {
    this.featureTypes = featureTypes;
    return this;
  }

  /**
   * Get featureTypes
   * @return featureTypes
   */
  @javax.annotation.Nonnull
  public List getFeatureTypes() {
    return featureTypes;
  }

  public void setFeatureTypes(List featureTypes) {
    this.featureTypes = featureTypes;
  }


  public StartDocumentAnalysisRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public StartDocumentAnalysisRequest jobTag(String jobTag) {
    this.jobTag = jobTag;
    return this;
  }

  /**
   * Get jobTag
   * @return jobTag
   */
  @javax.annotation.Nullable
  public String getJobTag() {
    return jobTag;
  }

  public void setJobTag(String jobTag) {
    this.jobTag = jobTag;
  }


  public StartDocumentAnalysisRequest notificationChannel(StartDocumentAnalysisRequestNotificationChannel notificationChannel) {
    this.notificationChannel = notificationChannel;
    return this;
  }

  /**
   * Get notificationChannel
   * @return notificationChannel
   */
  @javax.annotation.Nullable
  public StartDocumentAnalysisRequestNotificationChannel getNotificationChannel() {
    return notificationChannel;
  }

  public void setNotificationChannel(StartDocumentAnalysisRequestNotificationChannel notificationChannel) {
    this.notificationChannel = notificationChannel;
  }


  public StartDocumentAnalysisRequest outputConfig(StartDocumentAnalysisRequestOutputConfig outputConfig) {
    this.outputConfig = outputConfig;
    return this;
  }

  /**
   * Get outputConfig
   * @return outputConfig
   */
  @javax.annotation.Nullable
  public StartDocumentAnalysisRequestOutputConfig getOutputConfig() {
    return outputConfig;
  }

  public void setOutputConfig(StartDocumentAnalysisRequestOutputConfig outputConfig) {
    this.outputConfig = outputConfig;
  }


  public StartDocumentAnalysisRequest kmSKeyId(String kmSKeyId) {
    this.kmSKeyId = kmSKeyId;
    return this;
  }

  /**
   * Get kmSKeyId
   * @return kmSKeyId
   */
  @javax.annotation.Nullable
  public String getKmSKeyId() {
    return kmSKeyId;
  }

  public void setKmSKeyId(String kmSKeyId) {
    this.kmSKeyId = kmSKeyId;
  }


  public StartDocumentAnalysisRequest queriesConfig(QueriesConfig queriesConfig) {
    this.queriesConfig = queriesConfig;
    return this;
  }

  /**
   * Get queriesConfig
   * @return queriesConfig
   */
  @javax.annotation.Nullable
  public QueriesConfig getQueriesConfig() {
    return queriesConfig;
  }

  public void setQueriesConfig(QueriesConfig queriesConfig) {
    this.queriesConfig = queriesConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartDocumentAnalysisRequest startDocumentAnalysisRequest = (StartDocumentAnalysisRequest) o;
    return Objects.equals(this.documentLocation, startDocumentAnalysisRequest.documentLocation) &&
        Objects.equals(this.featureTypes, startDocumentAnalysisRequest.featureTypes) &&
        Objects.equals(this.clientRequestToken, startDocumentAnalysisRequest.clientRequestToken) &&
        Objects.equals(this.jobTag, startDocumentAnalysisRequest.jobTag) &&
        Objects.equals(this.notificationChannel, startDocumentAnalysisRequest.notificationChannel) &&
        Objects.equals(this.outputConfig, startDocumentAnalysisRequest.outputConfig) &&
        Objects.equals(this.kmSKeyId, startDocumentAnalysisRequest.kmSKeyId) &&
        Objects.equals(this.queriesConfig, startDocumentAnalysisRequest.queriesConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentLocation, featureTypes, clientRequestToken, jobTag, notificationChannel, outputConfig, kmSKeyId, queriesConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartDocumentAnalysisRequest {\n");
    sb.append("    documentLocation: ").append(toIndentedString(documentLocation)).append("\n");
    sb.append("    featureTypes: ").append(toIndentedString(featureTypes)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    jobTag: ").append(toIndentedString(jobTag)).append("\n");
    sb.append("    notificationChannel: ").append(toIndentedString(notificationChannel)).append("\n");
    sb.append("    outputConfig: ").append(toIndentedString(outputConfig)).append("\n");
    sb.append("    kmSKeyId: ").append(toIndentedString(kmSKeyId)).append("\n");
    sb.append("    queriesConfig: ").append(toIndentedString(queriesConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentLocation");
    openapiFields.add("FeatureTypes");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("JobTag");
    openapiFields.add("NotificationChannel");
    openapiFields.add("OutputConfig");
    openapiFields.add("KMSKeyId");
    openapiFields.add("QueriesConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocumentLocation");
    openapiRequiredFields.add("FeatureTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartDocumentAnalysisRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartDocumentAnalysisRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartDocumentAnalysisRequest is not found in the empty JSON string", StartDocumentAnalysisRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartDocumentAnalysisRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartDocumentAnalysisRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartDocumentAnalysisRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DocumentLocation`
      StartDocumentAnalysisRequestDocumentLocation.validateJsonElement(jsonObj.get("DocumentLocation"));
      // validate the required field `FeatureTypes`
      List.validateJsonElement(jsonObj.get("FeatureTypes"));
      // validate the optional field `ClientRequestToken`
      if (jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      }
      // validate the optional field `JobTag`
      if (jsonObj.get("JobTag") != null && !jsonObj.get("JobTag").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobTag"));
      }
      // validate the optional field `NotificationChannel`
      if (jsonObj.get("NotificationChannel") != null && !jsonObj.get("NotificationChannel").isJsonNull()) {
        StartDocumentAnalysisRequestNotificationChannel.validateJsonElement(jsonObj.get("NotificationChannel"));
      }
      // validate the optional field `OutputConfig`
      if (jsonObj.get("OutputConfig") != null && !jsonObj.get("OutputConfig").isJsonNull()) {
        StartDocumentAnalysisRequestOutputConfig.validateJsonElement(jsonObj.get("OutputConfig"));
      }
      // validate the optional field `KMSKeyId`
      if (jsonObj.get("KMSKeyId") != null && !jsonObj.get("KMSKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KMSKeyId"));
      }
      // validate the optional field `QueriesConfig`
      if (jsonObj.get("QueriesConfig") != null && !jsonObj.get("QueriesConfig").isJsonNull()) {
        QueriesConfig.validateJsonElement(jsonObj.get("QueriesConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartDocumentAnalysisRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartDocumentAnalysisRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartDocumentAnalysisRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartDocumentAnalysisRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartDocumentAnalysisRequest>() {
           @Override
           public void write(JsonWriter out, StartDocumentAnalysisRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartDocumentAnalysisRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartDocumentAnalysisRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartDocumentAnalysisRequest
   * @throws IOException if the JSON string is invalid with respect to StartDocumentAnalysisRequest
   */
  public static StartDocumentAnalysisRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartDocumentAnalysisRequest.class);
  }

  /**
   * Convert an instance of StartDocumentAnalysisRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

