/*
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDocumentAnalysisResponseDocumentMetadata;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDocumentTextDetectionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:42.141552-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDocumentTextDetectionResponse {
  public static final String SERIALIZED_NAME_DOCUMENT_METADATA = "DocumentMetadata";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_METADATA)
  private GetDocumentAnalysisResponseDocumentMetadata documentMetadata;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_BLOCKS = "Blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  private List blocks;

  public static final String SERIALIZED_NAME_WARNINGS = "Warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List warnings;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_DETECT_DOCUMENT_TEXT_MODEL_VERSION = "DetectDocumentTextModelVersion";
  @SerializedName(SERIALIZED_NAME_DETECT_DOCUMENT_TEXT_MODEL_VERSION)
  private String detectDocumentTextModelVersion;

  public GetDocumentTextDetectionResponse() {
  }

  public GetDocumentTextDetectionResponse documentMetadata(GetDocumentAnalysisResponseDocumentMetadata documentMetadata) {
    this.documentMetadata = documentMetadata;
    return this;
  }

  /**
   * Get documentMetadata
   * @return documentMetadata
   */
  @javax.annotation.Nullable
  public GetDocumentAnalysisResponseDocumentMetadata getDocumentMetadata() {
    return documentMetadata;
  }

  public void setDocumentMetadata(GetDocumentAnalysisResponseDocumentMetadata documentMetadata) {
    this.documentMetadata = documentMetadata;
  }


  public GetDocumentTextDetectionResponse jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public GetDocumentTextDetectionResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public GetDocumentTextDetectionResponse blocks(List blocks) {
    this.blocks = blocks;
    return this;
  }

  /**
   * Get blocks
   * @return blocks
   */
  @javax.annotation.Nullable
  public List getBlocks() {
    return blocks;
  }

  public void setBlocks(List blocks) {
    this.blocks = blocks;
  }


  public GetDocumentTextDetectionResponse warnings(List warnings) {
    this.warnings = warnings;
    return this;
  }

  /**
   * Get warnings
   * @return warnings
   */
  @javax.annotation.Nullable
  public List getWarnings() {
    return warnings;
  }

  public void setWarnings(List warnings) {
    this.warnings = warnings;
  }


  public GetDocumentTextDetectionResponse statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public GetDocumentTextDetectionResponse detectDocumentTextModelVersion(String detectDocumentTextModelVersion) {
    this.detectDocumentTextModelVersion = detectDocumentTextModelVersion;
    return this;
  }

  /**
   * Get detectDocumentTextModelVersion
   * @return detectDocumentTextModelVersion
   */
  @javax.annotation.Nullable
  public String getDetectDocumentTextModelVersion() {
    return detectDocumentTextModelVersion;
  }

  public void setDetectDocumentTextModelVersion(String detectDocumentTextModelVersion) {
    this.detectDocumentTextModelVersion = detectDocumentTextModelVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDocumentTextDetectionResponse getDocumentTextDetectionResponse = (GetDocumentTextDetectionResponse) o;
    return Objects.equals(this.documentMetadata, getDocumentTextDetectionResponse.documentMetadata) &&
        Objects.equals(this.jobStatus, getDocumentTextDetectionResponse.jobStatus) &&
        Objects.equals(this.nextToken, getDocumentTextDetectionResponse.nextToken) &&
        Objects.equals(this.blocks, getDocumentTextDetectionResponse.blocks) &&
        Objects.equals(this.warnings, getDocumentTextDetectionResponse.warnings) &&
        Objects.equals(this.statusMessage, getDocumentTextDetectionResponse.statusMessage) &&
        Objects.equals(this.detectDocumentTextModelVersion, getDocumentTextDetectionResponse.detectDocumentTextModelVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentMetadata, jobStatus, nextToken, blocks, warnings, statusMessage, detectDocumentTextModelVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDocumentTextDetectionResponse {\n");
    sb.append("    documentMetadata: ").append(toIndentedString(documentMetadata)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    detectDocumentTextModelVersion: ").append(toIndentedString(detectDocumentTextModelVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentMetadata");
    openapiFields.add("JobStatus");
    openapiFields.add("NextToken");
    openapiFields.add("Blocks");
    openapiFields.add("Warnings");
    openapiFields.add("StatusMessage");
    openapiFields.add("DetectDocumentTextModelVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDocumentTextDetectionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDocumentTextDetectionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDocumentTextDetectionResponse is not found in the empty JSON string", GetDocumentTextDetectionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDocumentTextDetectionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDocumentTextDetectionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DocumentMetadata`
      if (jsonObj.get("DocumentMetadata") != null && !jsonObj.get("DocumentMetadata").isJsonNull()) {
        GetDocumentAnalysisResponseDocumentMetadata.validateJsonElement(jsonObj.get("DocumentMetadata"));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `Blocks`
      if (jsonObj.get("Blocks") != null && !jsonObj.get("Blocks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Blocks"));
      }
      // validate the optional field `Warnings`
      if (jsonObj.get("Warnings") != null && !jsonObj.get("Warnings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Warnings"));
      }
      // validate the optional field `StatusMessage`
      if (jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusMessage"));
      }
      // validate the optional field `DetectDocumentTextModelVersion`
      if (jsonObj.get("DetectDocumentTextModelVersion") != null && !jsonObj.get("DetectDocumentTextModelVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DetectDocumentTextModelVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDocumentTextDetectionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDocumentTextDetectionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDocumentTextDetectionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDocumentTextDetectionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDocumentTextDetectionResponse>() {
           @Override
           public void write(JsonWriter out, GetDocumentTextDetectionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDocumentTextDetectionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDocumentTextDetectionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDocumentTextDetectionResponse
   * @throws IOException if the JSON string is invalid with respect to GetDocumentTextDetectionResponse
   */
  public static GetDocumentTextDetectionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDocumentTextDetectionResponse.class);
  }

  /**
   * Convert an instance of GetDocumentTextDetectionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

