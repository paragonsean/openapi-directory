/*
 * Amazon Textract
 * Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.
 *
 * The version of the OpenAPI document: 2018-06-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExpenseFieldCurrency;
import org.openapitools.client.model.ExpenseFieldLabelDetection;
import org.openapitools.client.model.ExpenseFieldType;
import org.openapitools.client.model.ExpenseFieldValueDetection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Breakdown of detected information, seperated into the catagories Type, LabelDetection, and ValueDetection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:42.141552-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpenseField {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ExpenseFieldType type;

  public static final String SERIALIZED_NAME_LABEL_DETECTION = "LabelDetection";
  @SerializedName(SERIALIZED_NAME_LABEL_DETECTION)
  private ExpenseFieldLabelDetection labelDetection;

  public static final String SERIALIZED_NAME_VALUE_DETECTION = "ValueDetection";
  @SerializedName(SERIALIZED_NAME_VALUE_DETECTION)
  private ExpenseFieldValueDetection valueDetection;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "PageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private ExpenseFieldCurrency currency;

  public static final String SERIALIZED_NAME_GROUP_PROPERTIES = "GroupProperties";
  @SerializedName(SERIALIZED_NAME_GROUP_PROPERTIES)
  private List groupProperties;

  public ExpenseField() {
  }

  public ExpenseField type(ExpenseFieldType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ExpenseFieldType getType() {
    return type;
  }

  public void setType(ExpenseFieldType type) {
    this.type = type;
  }


  public ExpenseField labelDetection(ExpenseFieldLabelDetection labelDetection) {
    this.labelDetection = labelDetection;
    return this;
  }

  /**
   * Get labelDetection
   * @return labelDetection
   */
  @javax.annotation.Nullable
  public ExpenseFieldLabelDetection getLabelDetection() {
    return labelDetection;
  }

  public void setLabelDetection(ExpenseFieldLabelDetection labelDetection) {
    this.labelDetection = labelDetection;
  }


  public ExpenseField valueDetection(ExpenseFieldValueDetection valueDetection) {
    this.valueDetection = valueDetection;
    return this;
  }

  /**
   * Get valueDetection
   * @return valueDetection
   */
  @javax.annotation.Nullable
  public ExpenseFieldValueDetection getValueDetection() {
    return valueDetection;
  }

  public void setValueDetection(ExpenseFieldValueDetection valueDetection) {
    this.valueDetection = valueDetection;
  }


  public ExpenseField pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * Get pageNumber
   * @return pageNumber
   */
  @javax.annotation.Nullable
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public ExpenseField currency(ExpenseFieldCurrency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public ExpenseFieldCurrency getCurrency() {
    return currency;
  }

  public void setCurrency(ExpenseFieldCurrency currency) {
    this.currency = currency;
  }


  public ExpenseField groupProperties(List groupProperties) {
    this.groupProperties = groupProperties;
    return this;
  }

  /**
   * Get groupProperties
   * @return groupProperties
   */
  @javax.annotation.Nullable
  public List getGroupProperties() {
    return groupProperties;
  }

  public void setGroupProperties(List groupProperties) {
    this.groupProperties = groupProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpenseField expenseField = (ExpenseField) o;
    return Objects.equals(this.type, expenseField.type) &&
        Objects.equals(this.labelDetection, expenseField.labelDetection) &&
        Objects.equals(this.valueDetection, expenseField.valueDetection) &&
        Objects.equals(this.pageNumber, expenseField.pageNumber) &&
        Objects.equals(this.currency, expenseField.currency) &&
        Objects.equals(this.groupProperties, expenseField.groupProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, labelDetection, valueDetection, pageNumber, currency, groupProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpenseField {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    labelDetection: ").append(toIndentedString(labelDetection)).append("\n");
    sb.append("    valueDetection: ").append(toIndentedString(valueDetection)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    groupProperties: ").append(toIndentedString(groupProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("LabelDetection");
    openapiFields.add("ValueDetection");
    openapiFields.add("PageNumber");
    openapiFields.add("Currency");
    openapiFields.add("GroupProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpenseField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpenseField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpenseField is not found in the empty JSON string", ExpenseField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpenseField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpenseField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ExpenseFieldType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `LabelDetection`
      if (jsonObj.get("LabelDetection") != null && !jsonObj.get("LabelDetection").isJsonNull()) {
        ExpenseFieldLabelDetection.validateJsonElement(jsonObj.get("LabelDetection"));
      }
      // validate the optional field `ValueDetection`
      if (jsonObj.get("ValueDetection") != null && !jsonObj.get("ValueDetection").isJsonNull()) {
        ExpenseFieldValueDetection.validateJsonElement(jsonObj.get("ValueDetection"));
      }
      // validate the optional field `PageNumber`
      if (jsonObj.get("PageNumber") != null && !jsonObj.get("PageNumber").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PageNumber"));
      }
      // validate the optional field `Currency`
      if (jsonObj.get("Currency") != null && !jsonObj.get("Currency").isJsonNull()) {
        ExpenseFieldCurrency.validateJsonElement(jsonObj.get("Currency"));
      }
      // validate the optional field `GroupProperties`
      if (jsonObj.get("GroupProperties") != null && !jsonObj.get("GroupProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GroupProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpenseField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpenseField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpenseField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpenseField.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpenseField>() {
           @Override
           public void write(JsonWriter out, ExpenseField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpenseField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpenseField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpenseField
   * @throws IOException if the JSON string is invalid with respect to ExpenseField
   */
  public static ExpenseField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpenseField.class);
  }

  /**
   * Convert an instance of ExpenseField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

