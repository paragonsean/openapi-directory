# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutEventSelectorsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, trail_name: str=None, event_selectors: List=None, advanced_event_selectors: List=None):
        """PutEventSelectorsRequest - a model defined in OpenAPI

        :param trail_name: The trail_name of this PutEventSelectorsRequest.
        :param event_selectors: The event_selectors of this PutEventSelectorsRequest.
        :param advanced_event_selectors: The advanced_event_selectors of this PutEventSelectorsRequest.
        """
        self.openapi_types = {
            'trail_name': str,
            'event_selectors': List,
            'advanced_event_selectors': List
        }

        self.attribute_map = {
            'trail_name': 'TrailName',
            'event_selectors': 'EventSelectors',
            'advanced_event_selectors': 'AdvancedEventSelectors'
        }

        self._trail_name = trail_name
        self._event_selectors = event_selectors
        self._advanced_event_selectors = advanced_event_selectors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutEventSelectorsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutEventSelectorsRequest of this PutEventSelectorsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trail_name(self):
        """Gets the trail_name of this PutEventSelectorsRequest.


        :return: The trail_name of this PutEventSelectorsRequest.
        :rtype: str
        """
        return self._trail_name

    @trail_name.setter
    def trail_name(self, trail_name):
        """Sets the trail_name of this PutEventSelectorsRequest.


        :param trail_name: The trail_name of this PutEventSelectorsRequest.
        :type trail_name: str
        """
        if trail_name is None:
            raise ValueError("Invalid value for `trail_name`, must not be `None`")

        self._trail_name = trail_name

    @property
    def event_selectors(self):
        """Gets the event_selectors of this PutEventSelectorsRequest.


        :return: The event_selectors of this PutEventSelectorsRequest.
        :rtype: List
        """
        return self._event_selectors

    @event_selectors.setter
    def event_selectors(self, event_selectors):
        """Sets the event_selectors of this PutEventSelectorsRequest.


        :param event_selectors: The event_selectors of this PutEventSelectorsRequest.
        :type event_selectors: List
        """

        self._event_selectors = event_selectors

    @property
    def advanced_event_selectors(self):
        """Gets the advanced_event_selectors of this PutEventSelectorsRequest.


        :return: The advanced_event_selectors of this PutEventSelectorsRequest.
        :rtype: List
        """
        return self._advanced_event_selectors

    @advanced_event_selectors.setter
    def advanced_event_selectors(self, advanced_event_selectors):
        """Sets the advanced_event_selectors of this PutEventSelectorsRequest.


        :param advanced_event_selectors: The advanced_event_selectors of this PutEventSelectorsRequest.
        :type advanced_event_selectors: List
        """

        self._advanced_event_selectors = advanced_event_selectors
