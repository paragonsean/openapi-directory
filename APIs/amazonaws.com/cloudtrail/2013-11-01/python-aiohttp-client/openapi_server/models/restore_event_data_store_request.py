# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RestoreEventDataStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_data_store: str=None):
        """RestoreEventDataStoreRequest - a model defined in OpenAPI

        :param event_data_store: The event_data_store of this RestoreEventDataStoreRequest.
        """
        self.openapi_types = {
            'event_data_store': str
        }

        self.attribute_map = {
            'event_data_store': 'EventDataStore'
        }

        self._event_data_store = event_data_store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreEventDataStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreEventDataStoreRequest of this RestoreEventDataStoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_data_store(self):
        """Gets the event_data_store of this RestoreEventDataStoreRequest.


        :return: The event_data_store of this RestoreEventDataStoreRequest.
        :rtype: str
        """
        return self._event_data_store

    @event_data_store.setter
    def event_data_store(self, event_data_store):
        """Sets the event_data_store of this RestoreEventDataStoreRequest.


        :param event_data_store: The event_data_store of this RestoreEventDataStoreRequest.
        :type event_data_store: str
        """
        if event_data_store is None:
            raise ValueError("Invalid value for `event_data_store`, must not be `None`")

        self._event_data_store = event_data_store
