# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvancedFieldSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, equals: List=None, starts_with: List=None, ends_with: List=None, not_equals: List=None, not_starts_with: List=None, not_ends_with: List=None):
        """AdvancedFieldSelector - a model defined in OpenAPI

        :param _field: The _field of this AdvancedFieldSelector.
        :param equals: The equals of this AdvancedFieldSelector.
        :param starts_with: The starts_with of this AdvancedFieldSelector.
        :param ends_with: The ends_with of this AdvancedFieldSelector.
        :param not_equals: The not_equals of this AdvancedFieldSelector.
        :param not_starts_with: The not_starts_with of this AdvancedFieldSelector.
        :param not_ends_with: The not_ends_with of this AdvancedFieldSelector.
        """
        self.openapi_types = {
            '_field': str,
            'equals': List,
            'starts_with': List,
            'ends_with': List,
            'not_equals': List,
            'not_starts_with': List,
            'not_ends_with': List
        }

        self.attribute_map = {
            '_field': 'Field',
            'equals': 'Equals',
            'starts_with': 'StartsWith',
            'ends_with': 'EndsWith',
            'not_equals': 'NotEquals',
            'not_starts_with': 'NotStartsWith',
            'not_ends_with': 'NotEndsWith'
        }

        self.__field = _field
        self._equals = equals
        self._starts_with = starts_with
        self._ends_with = ends_with
        self._not_equals = not_equals
        self._not_starts_with = not_starts_with
        self._not_ends_with = not_ends_with

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvancedFieldSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvancedFieldSelector of this AdvancedFieldSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this AdvancedFieldSelector.


        :return: The _field of this AdvancedFieldSelector.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this AdvancedFieldSelector.


        :param _field: The _field of this AdvancedFieldSelector.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def equals(self):
        """Gets the equals of this AdvancedFieldSelector.


        :return: The equals of this AdvancedFieldSelector.
        :rtype: List
        """
        return self._equals

    @equals.setter
    def equals(self, equals):
        """Sets the equals of this AdvancedFieldSelector.


        :param equals: The equals of this AdvancedFieldSelector.
        :type equals: List
        """

        self._equals = equals

    @property
    def starts_with(self):
        """Gets the starts_with of this AdvancedFieldSelector.


        :return: The starts_with of this AdvancedFieldSelector.
        :rtype: List
        """
        return self._starts_with

    @starts_with.setter
    def starts_with(self, starts_with):
        """Sets the starts_with of this AdvancedFieldSelector.


        :param starts_with: The starts_with of this AdvancedFieldSelector.
        :type starts_with: List
        """

        self._starts_with = starts_with

    @property
    def ends_with(self):
        """Gets the ends_with of this AdvancedFieldSelector.


        :return: The ends_with of this AdvancedFieldSelector.
        :rtype: List
        """
        return self._ends_with

    @ends_with.setter
    def ends_with(self, ends_with):
        """Sets the ends_with of this AdvancedFieldSelector.


        :param ends_with: The ends_with of this AdvancedFieldSelector.
        :type ends_with: List
        """

        self._ends_with = ends_with

    @property
    def not_equals(self):
        """Gets the not_equals of this AdvancedFieldSelector.


        :return: The not_equals of this AdvancedFieldSelector.
        :rtype: List
        """
        return self._not_equals

    @not_equals.setter
    def not_equals(self, not_equals):
        """Sets the not_equals of this AdvancedFieldSelector.


        :param not_equals: The not_equals of this AdvancedFieldSelector.
        :type not_equals: List
        """

        self._not_equals = not_equals

    @property
    def not_starts_with(self):
        """Gets the not_starts_with of this AdvancedFieldSelector.


        :return: The not_starts_with of this AdvancedFieldSelector.
        :rtype: List
        """
        return self._not_starts_with

    @not_starts_with.setter
    def not_starts_with(self, not_starts_with):
        """Sets the not_starts_with of this AdvancedFieldSelector.


        :param not_starts_with: The not_starts_with of this AdvancedFieldSelector.
        :type not_starts_with: List
        """

        self._not_starts_with = not_starts_with

    @property
    def not_ends_with(self):
        """Gets the not_ends_with of this AdvancedFieldSelector.


        :return: The not_ends_with of this AdvancedFieldSelector.
        :rtype: List
        """
        return self._not_ends_with

    @not_ends_with.setter
    def not_ends_with(self, not_ends_with):
        """Sets the not_ends_with of this AdvancedFieldSelector.


        :param not_ends_with: The not_ends_with of this AdvancedFieldSelector.
        :type not_ends_with: List
        """

        self._not_ends_with = not_ends_with
