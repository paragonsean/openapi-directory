# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportSourceS3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_location_uri: str=None, s3_bucket_region: str=None, s3_bucket_access_role_arn: str=None):
        """ImportSourceS3 - a model defined in OpenAPI

        :param s3_location_uri: The s3_location_uri of this ImportSourceS3.
        :param s3_bucket_region: The s3_bucket_region of this ImportSourceS3.
        :param s3_bucket_access_role_arn: The s3_bucket_access_role_arn of this ImportSourceS3.
        """
        self.openapi_types = {
            's3_location_uri': str,
            's3_bucket_region': str,
            's3_bucket_access_role_arn': str
        }

        self.attribute_map = {
            's3_location_uri': 'S3LocationUri',
            's3_bucket_region': 'S3BucketRegion',
            's3_bucket_access_role_arn': 'S3BucketAccessRoleArn'
        }

        self._s3_location_uri = s3_location_uri
        self._s3_bucket_region = s3_bucket_region
        self._s3_bucket_access_role_arn = s3_bucket_access_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportSourceS3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportSource_S3 of this ImportSourceS3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_location_uri(self):
        """Gets the s3_location_uri of this ImportSourceS3.


        :return: The s3_location_uri of this ImportSourceS3.
        :rtype: str
        """
        return self._s3_location_uri

    @s3_location_uri.setter
    def s3_location_uri(self, s3_location_uri):
        """Sets the s3_location_uri of this ImportSourceS3.


        :param s3_location_uri: The s3_location_uri of this ImportSourceS3.
        :type s3_location_uri: str
        """
        if s3_location_uri is None:
            raise ValueError("Invalid value for `s3_location_uri`, must not be `None`")

        self._s3_location_uri = s3_location_uri

    @property
    def s3_bucket_region(self):
        """Gets the s3_bucket_region of this ImportSourceS3.


        :return: The s3_bucket_region of this ImportSourceS3.
        :rtype: str
        """
        return self._s3_bucket_region

    @s3_bucket_region.setter
    def s3_bucket_region(self, s3_bucket_region):
        """Sets the s3_bucket_region of this ImportSourceS3.


        :param s3_bucket_region: The s3_bucket_region of this ImportSourceS3.
        :type s3_bucket_region: str
        """
        if s3_bucket_region is None:
            raise ValueError("Invalid value for `s3_bucket_region`, must not be `None`")

        self._s3_bucket_region = s3_bucket_region

    @property
    def s3_bucket_access_role_arn(self):
        """Gets the s3_bucket_access_role_arn of this ImportSourceS3.


        :return: The s3_bucket_access_role_arn of this ImportSourceS3.
        :rtype: str
        """
        return self._s3_bucket_access_role_arn

    @s3_bucket_access_role_arn.setter
    def s3_bucket_access_role_arn(self, s3_bucket_access_role_arn):
        """Sets the s3_bucket_access_role_arn of this ImportSourceS3.


        :param s3_bucket_access_role_arn: The s3_bucket_access_role_arn of this ImportSourceS3.
        :type s3_bucket_access_role_arn: str
        """
        if s3_bucket_access_role_arn is None:
            raise ValueError("Invalid value for `s3_bucket_access_role_arn`, must not be `None`")

        self._s3_bucket_access_role_arn = s3_bucket_access_role_arn
