# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdvancedEventSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, field_selectors: List=None):
        """AdvancedEventSelector - a model defined in OpenAPI

        :param name: The name of this AdvancedEventSelector.
        :param field_selectors: The field_selectors of this AdvancedEventSelector.
        """
        self.openapi_types = {
            'name': str,
            'field_selectors': List
        }

        self.attribute_map = {
            'name': 'Name',
            'field_selectors': 'FieldSelectors'
        }

        self._name = name
        self._field_selectors = field_selectors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvancedEventSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvancedEventSelector of this AdvancedEventSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AdvancedEventSelector.


        :return: The name of this AdvancedEventSelector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdvancedEventSelector.


        :param name: The name of this AdvancedEventSelector.
        :type name: str
        """

        self._name = name

    @property
    def field_selectors(self):
        """Gets the field_selectors of this AdvancedEventSelector.


        :return: The field_selectors of this AdvancedEventSelector.
        :rtype: List
        """
        return self._field_selectors

    @field_selectors.setter
    def field_selectors(self, field_selectors):
        """Sets the field_selectors of this AdvancedEventSelector.


        :param field_selectors: The field_selectors of this AdvancedEventSelector.
        :type field_selectors: List
        """
        if field_selectors is None:
            raise ValueError("Invalid value for `field_selectors`, must not be `None`")

        self._field_selectors = field_selectors
