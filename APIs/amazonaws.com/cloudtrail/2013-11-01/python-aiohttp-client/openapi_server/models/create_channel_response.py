# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateChannelResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, name: str=None, source: str=None, destinations: List=None, tags: List[Tag]=None):
        """CreateChannelResponse - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this CreateChannelResponse.
        :param name: The name of this CreateChannelResponse.
        :param source: The source of this CreateChannelResponse.
        :param destinations: The destinations of this CreateChannelResponse.
        :param tags: The tags of this CreateChannelResponse.
        """
        self.openapi_types = {
            'channel_arn': str,
            'name': str,
            'source': str,
            'destinations': List,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'channel_arn': 'ChannelArn',
            'name': 'Name',
            'source': 'Source',
            'destinations': 'Destinations',
            'tags': 'Tags'
        }

        self._channel_arn = channel_arn
        self._name = name
        self._source = source
        self._destinations = destinations
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannelResponse of this CreateChannelResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this CreateChannelResponse.


        :return: The channel_arn of this CreateChannelResponse.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this CreateChannelResponse.


        :param channel_arn: The channel_arn of this CreateChannelResponse.
        :type channel_arn: str
        """

        self._channel_arn = channel_arn

    @property
    def name(self):
        """Gets the name of this CreateChannelResponse.


        :return: The name of this CreateChannelResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateChannelResponse.


        :param name: The name of this CreateChannelResponse.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this CreateChannelResponse.


        :return: The source of this CreateChannelResponse.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateChannelResponse.


        :param source: The source of this CreateChannelResponse.
        :type source: str
        """

        self._source = source

    @property
    def destinations(self):
        """Gets the destinations of this CreateChannelResponse.


        :return: The destinations of this CreateChannelResponse.
        :rtype: List
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this CreateChannelResponse.


        :param destinations: The destinations of this CreateChannelResponse.
        :type destinations: List
        """

        self._destinations = destinations

    @property
    def tags(self):
        """Gets the tags of this CreateChannelResponse.

        A list of tags.

        :return: The tags of this CreateChannelResponse.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateChannelResponse.

        A list of tags.

        :param tags: The tags of this CreateChannelResponse.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")

        self._tags = tags
