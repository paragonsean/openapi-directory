# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lookup_attribute_key import LookupAttributeKey
from openapi_server import util


class LookupAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_key: LookupAttributeKey=None, attribute_value: str=None):
        """LookupAttribute - a model defined in OpenAPI

        :param attribute_key: The attribute_key of this LookupAttribute.
        :param attribute_value: The attribute_value of this LookupAttribute.
        """
        self.openapi_types = {
            'attribute_key': LookupAttributeKey,
            'attribute_value': str
        }

        self.attribute_map = {
            'attribute_key': 'AttributeKey',
            'attribute_value': 'AttributeValue'
        }

        self._attribute_key = attribute_key
        self._attribute_value = attribute_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LookupAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LookupAttribute of this LookupAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_key(self):
        """Gets the attribute_key of this LookupAttribute.


        :return: The attribute_key of this LookupAttribute.
        :rtype: LookupAttributeKey
        """
        return self._attribute_key

    @attribute_key.setter
    def attribute_key(self, attribute_key):
        """Sets the attribute_key of this LookupAttribute.


        :param attribute_key: The attribute_key of this LookupAttribute.
        :type attribute_key: LookupAttributeKey
        """
        if attribute_key is None:
            raise ValueError("Invalid value for `attribute_key`, must not be `None`")

        self._attribute_key = attribute_key

    @property
    def attribute_value(self):
        """Gets the attribute_value of this LookupAttribute.


        :return: The attribute_value of this LookupAttribute.
        :rtype: str
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value):
        """Sets the attribute_value of this LookupAttribute.


        :param attribute_value: The attribute_value of this LookupAttribute.
        :type attribute_value: str
        """
        if attribute_value is None:
            raise ValueError("Invalid value for `attribute_value`, must not be `None`")

        self._attribute_value = attribute_value
