# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.read_write_type import ReadWriteType
from openapi_server import util


class EventSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, read_write_type: ReadWriteType=None, include_management_events: bool=None, data_resources: List=None, exclude_management_event_sources: List=None):
        """EventSelector - a model defined in OpenAPI

        :param read_write_type: The read_write_type of this EventSelector.
        :param include_management_events: The include_management_events of this EventSelector.
        :param data_resources: The data_resources of this EventSelector.
        :param exclude_management_event_sources: The exclude_management_event_sources of this EventSelector.
        """
        self.openapi_types = {
            'read_write_type': ReadWriteType,
            'include_management_events': bool,
            'data_resources': List,
            'exclude_management_event_sources': List
        }

        self.attribute_map = {
            'read_write_type': 'ReadWriteType',
            'include_management_events': 'IncludeManagementEvents',
            'data_resources': 'DataResources',
            'exclude_management_event_sources': 'ExcludeManagementEventSources'
        }

        self._read_write_type = read_write_type
        self._include_management_events = include_management_events
        self._data_resources = data_resources
        self._exclude_management_event_sources = exclude_management_event_sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSelector of this EventSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def read_write_type(self):
        """Gets the read_write_type of this EventSelector.


        :return: The read_write_type of this EventSelector.
        :rtype: ReadWriteType
        """
        return self._read_write_type

    @read_write_type.setter
    def read_write_type(self, read_write_type):
        """Sets the read_write_type of this EventSelector.


        :param read_write_type: The read_write_type of this EventSelector.
        :type read_write_type: ReadWriteType
        """

        self._read_write_type = read_write_type

    @property
    def include_management_events(self):
        """Gets the include_management_events of this EventSelector.


        :return: The include_management_events of this EventSelector.
        :rtype: bool
        """
        return self._include_management_events

    @include_management_events.setter
    def include_management_events(self, include_management_events):
        """Sets the include_management_events of this EventSelector.


        :param include_management_events: The include_management_events of this EventSelector.
        :type include_management_events: bool
        """

        self._include_management_events = include_management_events

    @property
    def data_resources(self):
        """Gets the data_resources of this EventSelector.


        :return: The data_resources of this EventSelector.
        :rtype: List
        """
        return self._data_resources

    @data_resources.setter
    def data_resources(self, data_resources):
        """Sets the data_resources of this EventSelector.


        :param data_resources: The data_resources of this EventSelector.
        :type data_resources: List
        """

        self._data_resources = data_resources

    @property
    def exclude_management_event_sources(self):
        """Gets the exclude_management_event_sources of this EventSelector.


        :return: The exclude_management_event_sources of this EventSelector.
        :rtype: List
        """
        return self._exclude_management_event_sources

    @exclude_management_event_sources.setter
    def exclude_management_event_sources(self, exclude_management_event_sources):
        """Sets the exclude_management_event_sources of this EventSelector.


        :param exclude_management_event_sources: The exclude_management_event_sources of this EventSelector.
        :type exclude_management_event_sources: List
        """

        self._exclude_management_event_sources = exclude_management_event_sources
