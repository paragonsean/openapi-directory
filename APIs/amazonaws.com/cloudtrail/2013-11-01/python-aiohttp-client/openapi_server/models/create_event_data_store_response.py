# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_data_store_status import EventDataStoreStatus
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateEventDataStoreResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_data_store_arn: str=None, name: str=None, status: EventDataStoreStatus=None, advanced_event_selectors: List=None, multi_region_enabled: bool=None, organization_enabled: bool=None, retention_period: int=None, termination_protection_enabled: bool=None, tags_list: List[Tag]=None, created_timestamp: datetime=None, updated_timestamp: datetime=None, kms_key_id: str=None):
        """CreateEventDataStoreResponse - a model defined in OpenAPI

        :param event_data_store_arn: The event_data_store_arn of this CreateEventDataStoreResponse.
        :param name: The name of this CreateEventDataStoreResponse.
        :param status: The status of this CreateEventDataStoreResponse.
        :param advanced_event_selectors: The advanced_event_selectors of this CreateEventDataStoreResponse.
        :param multi_region_enabled: The multi_region_enabled of this CreateEventDataStoreResponse.
        :param organization_enabled: The organization_enabled of this CreateEventDataStoreResponse.
        :param retention_period: The retention_period of this CreateEventDataStoreResponse.
        :param termination_protection_enabled: The termination_protection_enabled of this CreateEventDataStoreResponse.
        :param tags_list: The tags_list of this CreateEventDataStoreResponse.
        :param created_timestamp: The created_timestamp of this CreateEventDataStoreResponse.
        :param updated_timestamp: The updated_timestamp of this CreateEventDataStoreResponse.
        :param kms_key_id: The kms_key_id of this CreateEventDataStoreResponse.
        """
        self.openapi_types = {
            'event_data_store_arn': str,
            'name': str,
            'status': EventDataStoreStatus,
            'advanced_event_selectors': List,
            'multi_region_enabled': bool,
            'organization_enabled': bool,
            'retention_period': int,
            'termination_protection_enabled': bool,
            'tags_list': List[Tag],
            'created_timestamp': datetime,
            'updated_timestamp': datetime,
            'kms_key_id': str
        }

        self.attribute_map = {
            'event_data_store_arn': 'EventDataStoreArn',
            'name': 'Name',
            'status': 'Status',
            'advanced_event_selectors': 'AdvancedEventSelectors',
            'multi_region_enabled': 'MultiRegionEnabled',
            'organization_enabled': 'OrganizationEnabled',
            'retention_period': 'RetentionPeriod',
            'termination_protection_enabled': 'TerminationProtectionEnabled',
            'tags_list': 'TagsList',
            'created_timestamp': 'CreatedTimestamp',
            'updated_timestamp': 'UpdatedTimestamp',
            'kms_key_id': 'KmsKeyId'
        }

        self._event_data_store_arn = event_data_store_arn
        self._name = name
        self._status = status
        self._advanced_event_selectors = advanced_event_selectors
        self._multi_region_enabled = multi_region_enabled
        self._organization_enabled = organization_enabled
        self._retention_period = retention_period
        self._termination_protection_enabled = termination_protection_enabled
        self._tags_list = tags_list
        self._created_timestamp = created_timestamp
        self._updated_timestamp = updated_timestamp
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEventDataStoreResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEventDataStoreResponse of this CreateEventDataStoreResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_data_store_arn(self):
        """Gets the event_data_store_arn of this CreateEventDataStoreResponse.


        :return: The event_data_store_arn of this CreateEventDataStoreResponse.
        :rtype: str
        """
        return self._event_data_store_arn

    @event_data_store_arn.setter
    def event_data_store_arn(self, event_data_store_arn):
        """Sets the event_data_store_arn of this CreateEventDataStoreResponse.


        :param event_data_store_arn: The event_data_store_arn of this CreateEventDataStoreResponse.
        :type event_data_store_arn: str
        """

        self._event_data_store_arn = event_data_store_arn

    @property
    def name(self):
        """Gets the name of this CreateEventDataStoreResponse.


        :return: The name of this CreateEventDataStoreResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateEventDataStoreResponse.


        :param name: The name of this CreateEventDataStoreResponse.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this CreateEventDataStoreResponse.


        :return: The status of this CreateEventDataStoreResponse.
        :rtype: EventDataStoreStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateEventDataStoreResponse.


        :param status: The status of this CreateEventDataStoreResponse.
        :type status: EventDataStoreStatus
        """

        self._status = status

    @property
    def advanced_event_selectors(self):
        """Gets the advanced_event_selectors of this CreateEventDataStoreResponse.


        :return: The advanced_event_selectors of this CreateEventDataStoreResponse.
        :rtype: List
        """
        return self._advanced_event_selectors

    @advanced_event_selectors.setter
    def advanced_event_selectors(self, advanced_event_selectors):
        """Sets the advanced_event_selectors of this CreateEventDataStoreResponse.


        :param advanced_event_selectors: The advanced_event_selectors of this CreateEventDataStoreResponse.
        :type advanced_event_selectors: List
        """

        self._advanced_event_selectors = advanced_event_selectors

    @property
    def multi_region_enabled(self):
        """Gets the multi_region_enabled of this CreateEventDataStoreResponse.


        :return: The multi_region_enabled of this CreateEventDataStoreResponse.
        :rtype: bool
        """
        return self._multi_region_enabled

    @multi_region_enabled.setter
    def multi_region_enabled(self, multi_region_enabled):
        """Sets the multi_region_enabled of this CreateEventDataStoreResponse.


        :param multi_region_enabled: The multi_region_enabled of this CreateEventDataStoreResponse.
        :type multi_region_enabled: bool
        """

        self._multi_region_enabled = multi_region_enabled

    @property
    def organization_enabled(self):
        """Gets the organization_enabled of this CreateEventDataStoreResponse.


        :return: The organization_enabled of this CreateEventDataStoreResponse.
        :rtype: bool
        """
        return self._organization_enabled

    @organization_enabled.setter
    def organization_enabled(self, organization_enabled):
        """Sets the organization_enabled of this CreateEventDataStoreResponse.


        :param organization_enabled: The organization_enabled of this CreateEventDataStoreResponse.
        :type organization_enabled: bool
        """

        self._organization_enabled = organization_enabled

    @property
    def retention_period(self):
        """Gets the retention_period of this CreateEventDataStoreResponse.


        :return: The retention_period of this CreateEventDataStoreResponse.
        :rtype: int
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this CreateEventDataStoreResponse.


        :param retention_period: The retention_period of this CreateEventDataStoreResponse.
        :type retention_period: int
        """

        self._retention_period = retention_period

    @property
    def termination_protection_enabled(self):
        """Gets the termination_protection_enabled of this CreateEventDataStoreResponse.


        :return: The termination_protection_enabled of this CreateEventDataStoreResponse.
        :rtype: bool
        """
        return self._termination_protection_enabled

    @termination_protection_enabled.setter
    def termination_protection_enabled(self, termination_protection_enabled):
        """Sets the termination_protection_enabled of this CreateEventDataStoreResponse.


        :param termination_protection_enabled: The termination_protection_enabled of this CreateEventDataStoreResponse.
        :type termination_protection_enabled: bool
        """

        self._termination_protection_enabled = termination_protection_enabled

    @property
    def tags_list(self):
        """Gets the tags_list of this CreateEventDataStoreResponse.

        A list of tags.

        :return: The tags_list of this CreateEventDataStoreResponse.
        :rtype: List[Tag]
        """
        return self._tags_list

    @tags_list.setter
    def tags_list(self, tags_list):
        """Sets the tags_list of this CreateEventDataStoreResponse.

        A list of tags.

        :param tags_list: The tags_list of this CreateEventDataStoreResponse.
        :type tags_list: List[Tag]
        """
        if tags_list is not None and len(tags_list) > 200:
            raise ValueError("Invalid value for `tags_list`, number of items must be less than or equal to `200`")

        self._tags_list = tags_list

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this CreateEventDataStoreResponse.


        :return: The created_timestamp of this CreateEventDataStoreResponse.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this CreateEventDataStoreResponse.


        :param created_timestamp: The created_timestamp of this CreateEventDataStoreResponse.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def updated_timestamp(self):
        """Gets the updated_timestamp of this CreateEventDataStoreResponse.


        :return: The updated_timestamp of this CreateEventDataStoreResponse.
        :rtype: datetime
        """
        return self._updated_timestamp

    @updated_timestamp.setter
    def updated_timestamp(self, updated_timestamp):
        """Sets the updated_timestamp of this CreateEventDataStoreResponse.


        :param updated_timestamp: The updated_timestamp of this CreateEventDataStoreResponse.
        :type updated_timestamp: datetime
        """

        self._updated_timestamp = updated_timestamp

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateEventDataStoreResponse.


        :return: The kms_key_id of this CreateEventDataStoreResponse.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateEventDataStoreResponse.


        :param kms_key_id: The kms_key_id of this CreateEventDataStoreResponse.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id
