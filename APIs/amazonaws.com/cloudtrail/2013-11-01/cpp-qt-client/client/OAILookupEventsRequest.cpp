/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILookupEventsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILookupEventsRequest::OAILookupEventsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILookupEventsRequest::OAILookupEventsRequest() {
    this->initializeModel();
}

OAILookupEventsRequest::~OAILookupEventsRequest() {}

void OAILookupEventsRequest::initializeModel() {

    m_lookup_attributes_isSet = false;
    m_lookup_attributes_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_event_category_isSet = false;
    m_event_category_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAILookupEventsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILookupEventsRequest::fromJsonObject(QJsonObject json) {

    m_lookup_attributes_isValid = ::OpenAPI::fromJsonValue(m_lookup_attributes, json[QString("LookupAttributes")]);
    m_lookup_attributes_isSet = !json[QString("LookupAttributes")].isNull() && m_lookup_attributes_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_event_category_isValid = ::OpenAPI::fromJsonValue(m_event_category, json[QString("EventCategory")]);
    m_event_category_isSet = !json[QString("EventCategory")].isNull() && m_event_category_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAILookupEventsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILookupEventsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_lookup_attributes.isSet()) {
        obj.insert(QString("LookupAttributes"), ::OpenAPI::toJsonValue(m_lookup_attributes));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_event_category.isSet()) {
        obj.insert(QString("EventCategory"), ::OpenAPI::toJsonValue(m_event_category));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAILookupEventsRequest::getLookupAttributes() const {
    return m_lookup_attributes;
}
void OAILookupEventsRequest::setLookupAttributes(const QList &lookup_attributes) {
    m_lookup_attributes = lookup_attributes;
    m_lookup_attributes_isSet = true;
}

bool OAILookupEventsRequest::is_lookup_attributes_Set() const{
    return m_lookup_attributes_isSet;
}

bool OAILookupEventsRequest::is_lookup_attributes_Valid() const{
    return m_lookup_attributes_isValid;
}

QDateTime OAILookupEventsRequest::getStartTime() const {
    return m_start_time;
}
void OAILookupEventsRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAILookupEventsRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAILookupEventsRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAILookupEventsRequest::getEndTime() const {
    return m_end_time;
}
void OAILookupEventsRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAILookupEventsRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAILookupEventsRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIEventCategory OAILookupEventsRequest::getEventCategory() const {
    return m_event_category;
}
void OAILookupEventsRequest::setEventCategory(const OAIEventCategory &event_category) {
    m_event_category = event_category;
    m_event_category_isSet = true;
}

bool OAILookupEventsRequest::is_event_category_Set() const{
    return m_event_category_isSet;
}

bool OAILookupEventsRequest::is_event_category_Valid() const{
    return m_event_category_isValid;
}

qint32 OAILookupEventsRequest::getMaxResults() const {
    return m_max_results;
}
void OAILookupEventsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAILookupEventsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAILookupEventsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAILookupEventsRequest::getNextToken() const {
    return m_next_token;
}
void OAILookupEventsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAILookupEventsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAILookupEventsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAILookupEventsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lookup_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILookupEventsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
