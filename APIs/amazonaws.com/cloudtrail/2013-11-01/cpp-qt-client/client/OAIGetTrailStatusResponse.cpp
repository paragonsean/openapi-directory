/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTrailStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTrailStatusResponse::OAIGetTrailStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTrailStatusResponse::OAIGetTrailStatusResponse() {
    this->initializeModel();
}

OAIGetTrailStatusResponse::~OAIGetTrailStatusResponse() {}

void OAIGetTrailStatusResponse::initializeModel() {

    m_is_logging_isSet = false;
    m_is_logging_isValid = false;

    m_latest_delivery_error_isSet = false;
    m_latest_delivery_error_isValid = false;

    m_latest_notification_error_isSet = false;
    m_latest_notification_error_isValid = false;

    m_latest_delivery_time_isSet = false;
    m_latest_delivery_time_isValid = false;

    m_latest_notification_time_isSet = false;
    m_latest_notification_time_isValid = false;

    m_start_logging_time_isSet = false;
    m_start_logging_time_isValid = false;

    m_stop_logging_time_isSet = false;
    m_stop_logging_time_isValid = false;

    m_latest_cloud_watch_logs_delivery_error_isSet = false;
    m_latest_cloud_watch_logs_delivery_error_isValid = false;

    m_latest_cloud_watch_logs_delivery_time_isSet = false;
    m_latest_cloud_watch_logs_delivery_time_isValid = false;

    m_latest_digest_delivery_time_isSet = false;
    m_latest_digest_delivery_time_isValid = false;

    m_latest_digest_delivery_error_isSet = false;
    m_latest_digest_delivery_error_isValid = false;

    m_latest_delivery_attempt_time_isSet = false;
    m_latest_delivery_attempt_time_isValid = false;

    m_latest_notification_attempt_time_isSet = false;
    m_latest_notification_attempt_time_isValid = false;

    m_latest_notification_attempt_succeeded_isSet = false;
    m_latest_notification_attempt_succeeded_isValid = false;

    m_latest_delivery_attempt_succeeded_isSet = false;
    m_latest_delivery_attempt_succeeded_isValid = false;

    m_time_logging_started_isSet = false;
    m_time_logging_started_isValid = false;

    m_time_logging_stopped_isSet = false;
    m_time_logging_stopped_isValid = false;
}

void OAIGetTrailStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTrailStatusResponse::fromJsonObject(QJsonObject json) {

    m_is_logging_isValid = ::OpenAPI::fromJsonValue(m_is_logging, json[QString("IsLogging")]);
    m_is_logging_isSet = !json[QString("IsLogging")].isNull() && m_is_logging_isValid;

    m_latest_delivery_error_isValid = ::OpenAPI::fromJsonValue(m_latest_delivery_error, json[QString("LatestDeliveryError")]);
    m_latest_delivery_error_isSet = !json[QString("LatestDeliveryError")].isNull() && m_latest_delivery_error_isValid;

    m_latest_notification_error_isValid = ::OpenAPI::fromJsonValue(m_latest_notification_error, json[QString("LatestNotificationError")]);
    m_latest_notification_error_isSet = !json[QString("LatestNotificationError")].isNull() && m_latest_notification_error_isValid;

    m_latest_delivery_time_isValid = ::OpenAPI::fromJsonValue(m_latest_delivery_time, json[QString("LatestDeliveryTime")]);
    m_latest_delivery_time_isSet = !json[QString("LatestDeliveryTime")].isNull() && m_latest_delivery_time_isValid;

    m_latest_notification_time_isValid = ::OpenAPI::fromJsonValue(m_latest_notification_time, json[QString("LatestNotificationTime")]);
    m_latest_notification_time_isSet = !json[QString("LatestNotificationTime")].isNull() && m_latest_notification_time_isValid;

    m_start_logging_time_isValid = ::OpenAPI::fromJsonValue(m_start_logging_time, json[QString("StartLoggingTime")]);
    m_start_logging_time_isSet = !json[QString("StartLoggingTime")].isNull() && m_start_logging_time_isValid;

    m_stop_logging_time_isValid = ::OpenAPI::fromJsonValue(m_stop_logging_time, json[QString("StopLoggingTime")]);
    m_stop_logging_time_isSet = !json[QString("StopLoggingTime")].isNull() && m_stop_logging_time_isValid;

    m_latest_cloud_watch_logs_delivery_error_isValid = ::OpenAPI::fromJsonValue(m_latest_cloud_watch_logs_delivery_error, json[QString("LatestCloudWatchLogsDeliveryError")]);
    m_latest_cloud_watch_logs_delivery_error_isSet = !json[QString("LatestCloudWatchLogsDeliveryError")].isNull() && m_latest_cloud_watch_logs_delivery_error_isValid;

    m_latest_cloud_watch_logs_delivery_time_isValid = ::OpenAPI::fromJsonValue(m_latest_cloud_watch_logs_delivery_time, json[QString("LatestCloudWatchLogsDeliveryTime")]);
    m_latest_cloud_watch_logs_delivery_time_isSet = !json[QString("LatestCloudWatchLogsDeliveryTime")].isNull() && m_latest_cloud_watch_logs_delivery_time_isValid;

    m_latest_digest_delivery_time_isValid = ::OpenAPI::fromJsonValue(m_latest_digest_delivery_time, json[QString("LatestDigestDeliveryTime")]);
    m_latest_digest_delivery_time_isSet = !json[QString("LatestDigestDeliveryTime")].isNull() && m_latest_digest_delivery_time_isValid;

    m_latest_digest_delivery_error_isValid = ::OpenAPI::fromJsonValue(m_latest_digest_delivery_error, json[QString("LatestDigestDeliveryError")]);
    m_latest_digest_delivery_error_isSet = !json[QString("LatestDigestDeliveryError")].isNull() && m_latest_digest_delivery_error_isValid;

    m_latest_delivery_attempt_time_isValid = ::OpenAPI::fromJsonValue(m_latest_delivery_attempt_time, json[QString("LatestDeliveryAttemptTime")]);
    m_latest_delivery_attempt_time_isSet = !json[QString("LatestDeliveryAttemptTime")].isNull() && m_latest_delivery_attempt_time_isValid;

    m_latest_notification_attempt_time_isValid = ::OpenAPI::fromJsonValue(m_latest_notification_attempt_time, json[QString("LatestNotificationAttemptTime")]);
    m_latest_notification_attempt_time_isSet = !json[QString("LatestNotificationAttemptTime")].isNull() && m_latest_notification_attempt_time_isValid;

    m_latest_notification_attempt_succeeded_isValid = ::OpenAPI::fromJsonValue(m_latest_notification_attempt_succeeded, json[QString("LatestNotificationAttemptSucceeded")]);
    m_latest_notification_attempt_succeeded_isSet = !json[QString("LatestNotificationAttemptSucceeded")].isNull() && m_latest_notification_attempt_succeeded_isValid;

    m_latest_delivery_attempt_succeeded_isValid = ::OpenAPI::fromJsonValue(m_latest_delivery_attempt_succeeded, json[QString("LatestDeliveryAttemptSucceeded")]);
    m_latest_delivery_attempt_succeeded_isSet = !json[QString("LatestDeliveryAttemptSucceeded")].isNull() && m_latest_delivery_attempt_succeeded_isValid;

    m_time_logging_started_isValid = ::OpenAPI::fromJsonValue(m_time_logging_started, json[QString("TimeLoggingStarted")]);
    m_time_logging_started_isSet = !json[QString("TimeLoggingStarted")].isNull() && m_time_logging_started_isValid;

    m_time_logging_stopped_isValid = ::OpenAPI::fromJsonValue(m_time_logging_stopped, json[QString("TimeLoggingStopped")]);
    m_time_logging_stopped_isSet = !json[QString("TimeLoggingStopped")].isNull() && m_time_logging_stopped_isValid;
}

QString OAIGetTrailStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTrailStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_is_logging_isSet) {
        obj.insert(QString("IsLogging"), ::OpenAPI::toJsonValue(m_is_logging));
    }
    if (m_latest_delivery_error_isSet) {
        obj.insert(QString("LatestDeliveryError"), ::OpenAPI::toJsonValue(m_latest_delivery_error));
    }
    if (m_latest_notification_error_isSet) {
        obj.insert(QString("LatestNotificationError"), ::OpenAPI::toJsonValue(m_latest_notification_error));
    }
    if (m_latest_delivery_time_isSet) {
        obj.insert(QString("LatestDeliveryTime"), ::OpenAPI::toJsonValue(m_latest_delivery_time));
    }
    if (m_latest_notification_time_isSet) {
        obj.insert(QString("LatestNotificationTime"), ::OpenAPI::toJsonValue(m_latest_notification_time));
    }
    if (m_start_logging_time_isSet) {
        obj.insert(QString("StartLoggingTime"), ::OpenAPI::toJsonValue(m_start_logging_time));
    }
    if (m_stop_logging_time_isSet) {
        obj.insert(QString("StopLoggingTime"), ::OpenAPI::toJsonValue(m_stop_logging_time));
    }
    if (m_latest_cloud_watch_logs_delivery_error_isSet) {
        obj.insert(QString("LatestCloudWatchLogsDeliveryError"), ::OpenAPI::toJsonValue(m_latest_cloud_watch_logs_delivery_error));
    }
    if (m_latest_cloud_watch_logs_delivery_time_isSet) {
        obj.insert(QString("LatestCloudWatchLogsDeliveryTime"), ::OpenAPI::toJsonValue(m_latest_cloud_watch_logs_delivery_time));
    }
    if (m_latest_digest_delivery_time_isSet) {
        obj.insert(QString("LatestDigestDeliveryTime"), ::OpenAPI::toJsonValue(m_latest_digest_delivery_time));
    }
    if (m_latest_digest_delivery_error_isSet) {
        obj.insert(QString("LatestDigestDeliveryError"), ::OpenAPI::toJsonValue(m_latest_digest_delivery_error));
    }
    if (m_latest_delivery_attempt_time_isSet) {
        obj.insert(QString("LatestDeliveryAttemptTime"), ::OpenAPI::toJsonValue(m_latest_delivery_attempt_time));
    }
    if (m_latest_notification_attempt_time_isSet) {
        obj.insert(QString("LatestNotificationAttemptTime"), ::OpenAPI::toJsonValue(m_latest_notification_attempt_time));
    }
    if (m_latest_notification_attempt_succeeded_isSet) {
        obj.insert(QString("LatestNotificationAttemptSucceeded"), ::OpenAPI::toJsonValue(m_latest_notification_attempt_succeeded));
    }
    if (m_latest_delivery_attempt_succeeded_isSet) {
        obj.insert(QString("LatestDeliveryAttemptSucceeded"), ::OpenAPI::toJsonValue(m_latest_delivery_attempt_succeeded));
    }
    if (m_time_logging_started_isSet) {
        obj.insert(QString("TimeLoggingStarted"), ::OpenAPI::toJsonValue(m_time_logging_started));
    }
    if (m_time_logging_stopped_isSet) {
        obj.insert(QString("TimeLoggingStopped"), ::OpenAPI::toJsonValue(m_time_logging_stopped));
    }
    return obj;
}

bool OAIGetTrailStatusResponse::getIsLogging() const {
    return m_is_logging;
}
void OAIGetTrailStatusResponse::setIsLogging(const bool &is_logging) {
    m_is_logging = is_logging;
    m_is_logging_isSet = true;
}

bool OAIGetTrailStatusResponse::is_is_logging_Set() const{
    return m_is_logging_isSet;
}

bool OAIGetTrailStatusResponse::is_is_logging_Valid() const{
    return m_is_logging_isValid;
}

QString OAIGetTrailStatusResponse::getLatestDeliveryError() const {
    return m_latest_delivery_error;
}
void OAIGetTrailStatusResponse::setLatestDeliveryError(const QString &latest_delivery_error) {
    m_latest_delivery_error = latest_delivery_error;
    m_latest_delivery_error_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_delivery_error_Set() const{
    return m_latest_delivery_error_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_delivery_error_Valid() const{
    return m_latest_delivery_error_isValid;
}

QString OAIGetTrailStatusResponse::getLatestNotificationError() const {
    return m_latest_notification_error;
}
void OAIGetTrailStatusResponse::setLatestNotificationError(const QString &latest_notification_error) {
    m_latest_notification_error = latest_notification_error;
    m_latest_notification_error_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_notification_error_Set() const{
    return m_latest_notification_error_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_notification_error_Valid() const{
    return m_latest_notification_error_isValid;
}

QDateTime OAIGetTrailStatusResponse::getLatestDeliveryTime() const {
    return m_latest_delivery_time;
}
void OAIGetTrailStatusResponse::setLatestDeliveryTime(const QDateTime &latest_delivery_time) {
    m_latest_delivery_time = latest_delivery_time;
    m_latest_delivery_time_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_delivery_time_Set() const{
    return m_latest_delivery_time_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_delivery_time_Valid() const{
    return m_latest_delivery_time_isValid;
}

QDateTime OAIGetTrailStatusResponse::getLatestNotificationTime() const {
    return m_latest_notification_time;
}
void OAIGetTrailStatusResponse::setLatestNotificationTime(const QDateTime &latest_notification_time) {
    m_latest_notification_time = latest_notification_time;
    m_latest_notification_time_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_notification_time_Set() const{
    return m_latest_notification_time_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_notification_time_Valid() const{
    return m_latest_notification_time_isValid;
}

QDateTime OAIGetTrailStatusResponse::getStartLoggingTime() const {
    return m_start_logging_time;
}
void OAIGetTrailStatusResponse::setStartLoggingTime(const QDateTime &start_logging_time) {
    m_start_logging_time = start_logging_time;
    m_start_logging_time_isSet = true;
}

bool OAIGetTrailStatusResponse::is_start_logging_time_Set() const{
    return m_start_logging_time_isSet;
}

bool OAIGetTrailStatusResponse::is_start_logging_time_Valid() const{
    return m_start_logging_time_isValid;
}

QDateTime OAIGetTrailStatusResponse::getStopLoggingTime() const {
    return m_stop_logging_time;
}
void OAIGetTrailStatusResponse::setStopLoggingTime(const QDateTime &stop_logging_time) {
    m_stop_logging_time = stop_logging_time;
    m_stop_logging_time_isSet = true;
}

bool OAIGetTrailStatusResponse::is_stop_logging_time_Set() const{
    return m_stop_logging_time_isSet;
}

bool OAIGetTrailStatusResponse::is_stop_logging_time_Valid() const{
    return m_stop_logging_time_isValid;
}

QString OAIGetTrailStatusResponse::getLatestCloudWatchLogsDeliveryError() const {
    return m_latest_cloud_watch_logs_delivery_error;
}
void OAIGetTrailStatusResponse::setLatestCloudWatchLogsDeliveryError(const QString &latest_cloud_watch_logs_delivery_error) {
    m_latest_cloud_watch_logs_delivery_error = latest_cloud_watch_logs_delivery_error;
    m_latest_cloud_watch_logs_delivery_error_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_cloud_watch_logs_delivery_error_Set() const{
    return m_latest_cloud_watch_logs_delivery_error_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_cloud_watch_logs_delivery_error_Valid() const{
    return m_latest_cloud_watch_logs_delivery_error_isValid;
}

QDateTime OAIGetTrailStatusResponse::getLatestCloudWatchLogsDeliveryTime() const {
    return m_latest_cloud_watch_logs_delivery_time;
}
void OAIGetTrailStatusResponse::setLatestCloudWatchLogsDeliveryTime(const QDateTime &latest_cloud_watch_logs_delivery_time) {
    m_latest_cloud_watch_logs_delivery_time = latest_cloud_watch_logs_delivery_time;
    m_latest_cloud_watch_logs_delivery_time_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_cloud_watch_logs_delivery_time_Set() const{
    return m_latest_cloud_watch_logs_delivery_time_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_cloud_watch_logs_delivery_time_Valid() const{
    return m_latest_cloud_watch_logs_delivery_time_isValid;
}

QDateTime OAIGetTrailStatusResponse::getLatestDigestDeliveryTime() const {
    return m_latest_digest_delivery_time;
}
void OAIGetTrailStatusResponse::setLatestDigestDeliveryTime(const QDateTime &latest_digest_delivery_time) {
    m_latest_digest_delivery_time = latest_digest_delivery_time;
    m_latest_digest_delivery_time_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_digest_delivery_time_Set() const{
    return m_latest_digest_delivery_time_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_digest_delivery_time_Valid() const{
    return m_latest_digest_delivery_time_isValid;
}

QString OAIGetTrailStatusResponse::getLatestDigestDeliveryError() const {
    return m_latest_digest_delivery_error;
}
void OAIGetTrailStatusResponse::setLatestDigestDeliveryError(const QString &latest_digest_delivery_error) {
    m_latest_digest_delivery_error = latest_digest_delivery_error;
    m_latest_digest_delivery_error_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_digest_delivery_error_Set() const{
    return m_latest_digest_delivery_error_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_digest_delivery_error_Valid() const{
    return m_latest_digest_delivery_error_isValid;
}

QString OAIGetTrailStatusResponse::getLatestDeliveryAttemptTime() const {
    return m_latest_delivery_attempt_time;
}
void OAIGetTrailStatusResponse::setLatestDeliveryAttemptTime(const QString &latest_delivery_attempt_time) {
    m_latest_delivery_attempt_time = latest_delivery_attempt_time;
    m_latest_delivery_attempt_time_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_delivery_attempt_time_Set() const{
    return m_latest_delivery_attempt_time_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_delivery_attempt_time_Valid() const{
    return m_latest_delivery_attempt_time_isValid;
}

QString OAIGetTrailStatusResponse::getLatestNotificationAttemptTime() const {
    return m_latest_notification_attempt_time;
}
void OAIGetTrailStatusResponse::setLatestNotificationAttemptTime(const QString &latest_notification_attempt_time) {
    m_latest_notification_attempt_time = latest_notification_attempt_time;
    m_latest_notification_attempt_time_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_notification_attempt_time_Set() const{
    return m_latest_notification_attempt_time_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_notification_attempt_time_Valid() const{
    return m_latest_notification_attempt_time_isValid;
}

QString OAIGetTrailStatusResponse::getLatestNotificationAttemptSucceeded() const {
    return m_latest_notification_attempt_succeeded;
}
void OAIGetTrailStatusResponse::setLatestNotificationAttemptSucceeded(const QString &latest_notification_attempt_succeeded) {
    m_latest_notification_attempt_succeeded = latest_notification_attempt_succeeded;
    m_latest_notification_attempt_succeeded_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_notification_attempt_succeeded_Set() const{
    return m_latest_notification_attempt_succeeded_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_notification_attempt_succeeded_Valid() const{
    return m_latest_notification_attempt_succeeded_isValid;
}

QString OAIGetTrailStatusResponse::getLatestDeliveryAttemptSucceeded() const {
    return m_latest_delivery_attempt_succeeded;
}
void OAIGetTrailStatusResponse::setLatestDeliveryAttemptSucceeded(const QString &latest_delivery_attempt_succeeded) {
    m_latest_delivery_attempt_succeeded = latest_delivery_attempt_succeeded;
    m_latest_delivery_attempt_succeeded_isSet = true;
}

bool OAIGetTrailStatusResponse::is_latest_delivery_attempt_succeeded_Set() const{
    return m_latest_delivery_attempt_succeeded_isSet;
}

bool OAIGetTrailStatusResponse::is_latest_delivery_attempt_succeeded_Valid() const{
    return m_latest_delivery_attempt_succeeded_isValid;
}

QString OAIGetTrailStatusResponse::getTimeLoggingStarted() const {
    return m_time_logging_started;
}
void OAIGetTrailStatusResponse::setTimeLoggingStarted(const QString &time_logging_started) {
    m_time_logging_started = time_logging_started;
    m_time_logging_started_isSet = true;
}

bool OAIGetTrailStatusResponse::is_time_logging_started_Set() const{
    return m_time_logging_started_isSet;
}

bool OAIGetTrailStatusResponse::is_time_logging_started_Valid() const{
    return m_time_logging_started_isValid;
}

QString OAIGetTrailStatusResponse::getTimeLoggingStopped() const {
    return m_time_logging_stopped;
}
void OAIGetTrailStatusResponse::setTimeLoggingStopped(const QString &time_logging_stopped) {
    m_time_logging_stopped = time_logging_stopped;
    m_time_logging_stopped_isSet = true;
}

bool OAIGetTrailStatusResponse::is_time_logging_stopped_Set() const{
    return m_time_logging_stopped_isSet;
}

bool OAIGetTrailStatusResponse::is_time_logging_stopped_Valid() const{
    return m_time_logging_stopped_isValid;
}

bool OAIGetTrailStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_delivery_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_notification_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_delivery_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_notification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_logging_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_logging_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_cloud_watch_logs_delivery_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_cloud_watch_logs_delivery_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_digest_delivery_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_digest_delivery_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_delivery_attempt_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_notification_attempt_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_notification_attempt_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_delivery_attempt_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_logging_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_logging_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTrailStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
