/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeQueryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeQueryResponse::OAIDescribeQueryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeQueryResponse::OAIDescribeQueryResponse() {
    this->initializeModel();
}

OAIDescribeQueryResponse::~OAIDescribeQueryResponse() {}

void OAIDescribeQueryResponse::initializeModel() {

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_query_string_isSet = false;
    m_query_string_isValid = false;

    m_query_status_isSet = false;
    m_query_status_isValid = false;

    m_query_statistics_isSet = false;
    m_query_statistics_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_delivery_s3_uri_isSet = false;
    m_delivery_s3_uri_isValid = false;

    m_delivery_status_isSet = false;
    m_delivery_status_isValid = false;
}

void OAIDescribeQueryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeQueryResponse::fromJsonObject(QJsonObject json) {

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("QueryId")]);
    m_query_id_isSet = !json[QString("QueryId")].isNull() && m_query_id_isValid;

    m_query_string_isValid = ::OpenAPI::fromJsonValue(m_query_string, json[QString("QueryString")]);
    m_query_string_isSet = !json[QString("QueryString")].isNull() && m_query_string_isValid;

    m_query_status_isValid = ::OpenAPI::fromJsonValue(m_query_status, json[QString("QueryStatus")]);
    m_query_status_isSet = !json[QString("QueryStatus")].isNull() && m_query_status_isValid;

    m_query_statistics_isValid = ::OpenAPI::fromJsonValue(m_query_statistics, json[QString("QueryStatistics")]);
    m_query_statistics_isSet = !json[QString("QueryStatistics")].isNull() && m_query_statistics_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_delivery_s3_uri_isValid = ::OpenAPI::fromJsonValue(m_delivery_s3_uri, json[QString("DeliveryS3Uri")]);
    m_delivery_s3_uri_isSet = !json[QString("DeliveryS3Uri")].isNull() && m_delivery_s3_uri_isValid;

    m_delivery_status_isValid = ::OpenAPI::fromJsonValue(m_delivery_status, json[QString("DeliveryStatus")]);
    m_delivery_status_isSet = !json[QString("DeliveryStatus")].isNull() && m_delivery_status_isValid;
}

QString OAIDescribeQueryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeQueryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_query_id_isSet) {
        obj.insert(QString("QueryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_query_string_isSet) {
        obj.insert(QString("QueryString"), ::OpenAPI::toJsonValue(m_query_string));
    }
    if (m_query_status.isSet()) {
        obj.insert(QString("QueryStatus"), ::OpenAPI::toJsonValue(m_query_status));
    }
    if (m_query_statistics.isSet()) {
        obj.insert(QString("QueryStatistics"), ::OpenAPI::toJsonValue(m_query_statistics));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_delivery_s3_uri_isSet) {
        obj.insert(QString("DeliveryS3Uri"), ::OpenAPI::toJsonValue(m_delivery_s3_uri));
    }
    if (m_delivery_status.isSet()) {
        obj.insert(QString("DeliveryStatus"), ::OpenAPI::toJsonValue(m_delivery_status));
    }
    return obj;
}

QString OAIDescribeQueryResponse::getQueryId() const {
    return m_query_id;
}
void OAIDescribeQueryResponse::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIDescribeQueryResponse::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIDescribeQueryResponse::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAIDescribeQueryResponse::getQueryString() const {
    return m_query_string;
}
void OAIDescribeQueryResponse::setQueryString(const QString &query_string) {
    m_query_string = query_string;
    m_query_string_isSet = true;
}

bool OAIDescribeQueryResponse::is_query_string_Set() const{
    return m_query_string_isSet;
}

bool OAIDescribeQueryResponse::is_query_string_Valid() const{
    return m_query_string_isValid;
}

OAIQueryStatus OAIDescribeQueryResponse::getQueryStatus() const {
    return m_query_status;
}
void OAIDescribeQueryResponse::setQueryStatus(const OAIQueryStatus &query_status) {
    m_query_status = query_status;
    m_query_status_isSet = true;
}

bool OAIDescribeQueryResponse::is_query_status_Set() const{
    return m_query_status_isSet;
}

bool OAIDescribeQueryResponse::is_query_status_Valid() const{
    return m_query_status_isValid;
}

OAIDescribeQueryResponse_QueryStatistics OAIDescribeQueryResponse::getQueryStatistics() const {
    return m_query_statistics;
}
void OAIDescribeQueryResponse::setQueryStatistics(const OAIDescribeQueryResponse_QueryStatistics &query_statistics) {
    m_query_statistics = query_statistics;
    m_query_statistics_isSet = true;
}

bool OAIDescribeQueryResponse::is_query_statistics_Set() const{
    return m_query_statistics_isSet;
}

bool OAIDescribeQueryResponse::is_query_statistics_Valid() const{
    return m_query_statistics_isValid;
}

QString OAIDescribeQueryResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIDescribeQueryResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDescribeQueryResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDescribeQueryResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIDescribeQueryResponse::getDeliveryS3Uri() const {
    return m_delivery_s3_uri;
}
void OAIDescribeQueryResponse::setDeliveryS3Uri(const QString &delivery_s3_uri) {
    m_delivery_s3_uri = delivery_s3_uri;
    m_delivery_s3_uri_isSet = true;
}

bool OAIDescribeQueryResponse::is_delivery_s3_uri_Set() const{
    return m_delivery_s3_uri_isSet;
}

bool OAIDescribeQueryResponse::is_delivery_s3_uri_Valid() const{
    return m_delivery_s3_uri_isValid;
}

OAIDeliveryStatus OAIDescribeQueryResponse::getDeliveryStatus() const {
    return m_delivery_status;
}
void OAIDescribeQueryResponse::setDeliveryStatus(const OAIDeliveryStatus &delivery_status) {
    m_delivery_status = delivery_status;
    m_delivery_status_isSet = true;
}

bool OAIDescribeQueryResponse::is_delivery_status_Set() const{
    return m_delivery_status_isSet;
}

bool OAIDescribeQueryResponse::is_delivery_status_Valid() const{
    return m_delivery_status_isValid;
}

bool OAIDescribeQueryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_s3_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeQueryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
