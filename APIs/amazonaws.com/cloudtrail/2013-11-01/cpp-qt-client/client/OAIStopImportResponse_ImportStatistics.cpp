/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopImportResponse_ImportStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopImportResponse_ImportStatistics::OAIStopImportResponse_ImportStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopImportResponse_ImportStatistics::OAIStopImportResponse_ImportStatistics() {
    this->initializeModel();
}

OAIStopImportResponse_ImportStatistics::~OAIStopImportResponse_ImportStatistics() {}

void OAIStopImportResponse_ImportStatistics::initializeModel() {

    m_prefixes_found_isSet = false;
    m_prefixes_found_isValid = false;

    m_prefixes_completed_isSet = false;
    m_prefixes_completed_isValid = false;

    m_files_completed_isSet = false;
    m_files_completed_isValid = false;

    m_events_completed_isSet = false;
    m_events_completed_isValid = false;

    m_failed_entries_isSet = false;
    m_failed_entries_isValid = false;
}

void OAIStopImportResponse_ImportStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopImportResponse_ImportStatistics::fromJsonObject(QJsonObject json) {

    m_prefixes_found_isValid = ::OpenAPI::fromJsonValue(m_prefixes_found, json[QString("PrefixesFound")]);
    m_prefixes_found_isSet = !json[QString("PrefixesFound")].isNull() && m_prefixes_found_isValid;

    m_prefixes_completed_isValid = ::OpenAPI::fromJsonValue(m_prefixes_completed, json[QString("PrefixesCompleted")]);
    m_prefixes_completed_isSet = !json[QString("PrefixesCompleted")].isNull() && m_prefixes_completed_isValid;

    m_files_completed_isValid = ::OpenAPI::fromJsonValue(m_files_completed, json[QString("FilesCompleted")]);
    m_files_completed_isSet = !json[QString("FilesCompleted")].isNull() && m_files_completed_isValid;

    m_events_completed_isValid = ::OpenAPI::fromJsonValue(m_events_completed, json[QString("EventsCompleted")]);
    m_events_completed_isSet = !json[QString("EventsCompleted")].isNull() && m_events_completed_isValid;

    m_failed_entries_isValid = ::OpenAPI::fromJsonValue(m_failed_entries, json[QString("FailedEntries")]);
    m_failed_entries_isSet = !json[QString("FailedEntries")].isNull() && m_failed_entries_isValid;
}

QString OAIStopImportResponse_ImportStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopImportResponse_ImportStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_prefixes_found_isSet) {
        obj.insert(QString("PrefixesFound"), ::OpenAPI::toJsonValue(m_prefixes_found));
    }
    if (m_prefixes_completed_isSet) {
        obj.insert(QString("PrefixesCompleted"), ::OpenAPI::toJsonValue(m_prefixes_completed));
    }
    if (m_files_completed_isSet) {
        obj.insert(QString("FilesCompleted"), ::OpenAPI::toJsonValue(m_files_completed));
    }
    if (m_events_completed_isSet) {
        obj.insert(QString("EventsCompleted"), ::OpenAPI::toJsonValue(m_events_completed));
    }
    if (m_failed_entries_isSet) {
        obj.insert(QString("FailedEntries"), ::OpenAPI::toJsonValue(m_failed_entries));
    }
    return obj;
}

qint32 OAIStopImportResponse_ImportStatistics::getPrefixesFound() const {
    return m_prefixes_found;
}
void OAIStopImportResponse_ImportStatistics::setPrefixesFound(const qint32 &prefixes_found) {
    m_prefixes_found = prefixes_found;
    m_prefixes_found_isSet = true;
}

bool OAIStopImportResponse_ImportStatistics::is_prefixes_found_Set() const{
    return m_prefixes_found_isSet;
}

bool OAIStopImportResponse_ImportStatistics::is_prefixes_found_Valid() const{
    return m_prefixes_found_isValid;
}

qint32 OAIStopImportResponse_ImportStatistics::getPrefixesCompleted() const {
    return m_prefixes_completed;
}
void OAIStopImportResponse_ImportStatistics::setPrefixesCompleted(const qint32 &prefixes_completed) {
    m_prefixes_completed = prefixes_completed;
    m_prefixes_completed_isSet = true;
}

bool OAIStopImportResponse_ImportStatistics::is_prefixes_completed_Set() const{
    return m_prefixes_completed_isSet;
}

bool OAIStopImportResponse_ImportStatistics::is_prefixes_completed_Valid() const{
    return m_prefixes_completed_isValid;
}

qint32 OAIStopImportResponse_ImportStatistics::getFilesCompleted() const {
    return m_files_completed;
}
void OAIStopImportResponse_ImportStatistics::setFilesCompleted(const qint32 &files_completed) {
    m_files_completed = files_completed;
    m_files_completed_isSet = true;
}

bool OAIStopImportResponse_ImportStatistics::is_files_completed_Set() const{
    return m_files_completed_isSet;
}

bool OAIStopImportResponse_ImportStatistics::is_files_completed_Valid() const{
    return m_files_completed_isValid;
}

qint32 OAIStopImportResponse_ImportStatistics::getEventsCompleted() const {
    return m_events_completed;
}
void OAIStopImportResponse_ImportStatistics::setEventsCompleted(const qint32 &events_completed) {
    m_events_completed = events_completed;
    m_events_completed_isSet = true;
}

bool OAIStopImportResponse_ImportStatistics::is_events_completed_Set() const{
    return m_events_completed_isSet;
}

bool OAIStopImportResponse_ImportStatistics::is_events_completed_Valid() const{
    return m_events_completed_isValid;
}

qint32 OAIStopImportResponse_ImportStatistics::getFailedEntries() const {
    return m_failed_entries;
}
void OAIStopImportResponse_ImportStatistics::setFailedEntries(const qint32 &failed_entries) {
    m_failed_entries = failed_entries;
    m_failed_entries_isSet = true;
}

bool OAIStopImportResponse_ImportStatistics::is_failed_entries_Set() const{
    return m_failed_entries_isSet;
}

bool OAIStopImportResponse_ImportStatistics::is_failed_entries_Valid() const{
    return m_failed_entries_isValid;
}

bool OAIStopImportResponse_ImportStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefixes_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefixes_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_entries_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopImportResponse_ImportStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
