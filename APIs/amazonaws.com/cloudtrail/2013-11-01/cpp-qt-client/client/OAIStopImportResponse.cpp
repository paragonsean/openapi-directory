/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopImportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopImportResponse::OAIStopImportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopImportResponse::OAIStopImportResponse() {
    this->initializeModel();
}

OAIStopImportResponse::~OAIStopImportResponse() {}

void OAIStopImportResponse::initializeModel() {

    m_import_id_isSet = false;
    m_import_id_isValid = false;

    m_import_source_isSet = false;
    m_import_source_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_import_status_isSet = false;
    m_import_status_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;

    m_start_event_time_isSet = false;
    m_start_event_time_isValid = false;

    m_end_event_time_isSet = false;
    m_end_event_time_isValid = false;

    m_import_statistics_isSet = false;
    m_import_statistics_isValid = false;
}

void OAIStopImportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopImportResponse::fromJsonObject(QJsonObject json) {

    m_import_id_isValid = ::OpenAPI::fromJsonValue(m_import_id, json[QString("ImportId")]);
    m_import_id_isSet = !json[QString("ImportId")].isNull() && m_import_id_isValid;

    m_import_source_isValid = ::OpenAPI::fromJsonValue(m_import_source, json[QString("ImportSource")]);
    m_import_source_isSet = !json[QString("ImportSource")].isNull() && m_import_source_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;

    m_import_status_isValid = ::OpenAPI::fromJsonValue(m_import_status, json[QString("ImportStatus")]);
    m_import_status_isSet = !json[QString("ImportStatus")].isNull() && m_import_status_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("UpdatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("UpdatedTimestamp")].isNull() && m_updated_timestamp_isValid;

    m_start_event_time_isValid = ::OpenAPI::fromJsonValue(m_start_event_time, json[QString("StartEventTime")]);
    m_start_event_time_isSet = !json[QString("StartEventTime")].isNull() && m_start_event_time_isValid;

    m_end_event_time_isValid = ::OpenAPI::fromJsonValue(m_end_event_time, json[QString("EndEventTime")]);
    m_end_event_time_isSet = !json[QString("EndEventTime")].isNull() && m_end_event_time_isValid;

    m_import_statistics_isValid = ::OpenAPI::fromJsonValue(m_import_statistics, json[QString("ImportStatistics")]);
    m_import_statistics_isSet = !json[QString("ImportStatistics")].isNull() && m_import_statistics_isValid;
}

QString OAIStopImportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopImportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_import_id_isSet) {
        obj.insert(QString("ImportId"), ::OpenAPI::toJsonValue(m_import_id));
    }
    if (m_import_source.isSet()) {
        obj.insert(QString("ImportSource"), ::OpenAPI::toJsonValue(m_import_source));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_import_status.isSet()) {
        obj.insert(QString("ImportStatus"), ::OpenAPI::toJsonValue(m_import_status));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("UpdatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    if (m_start_event_time_isSet) {
        obj.insert(QString("StartEventTime"), ::OpenAPI::toJsonValue(m_start_event_time));
    }
    if (m_end_event_time_isSet) {
        obj.insert(QString("EndEventTime"), ::OpenAPI::toJsonValue(m_end_event_time));
    }
    if (m_import_statistics.isSet()) {
        obj.insert(QString("ImportStatistics"), ::OpenAPI::toJsonValue(m_import_statistics));
    }
    return obj;
}

QString OAIStopImportResponse::getImportId() const {
    return m_import_id;
}
void OAIStopImportResponse::setImportId(const QString &import_id) {
    m_import_id = import_id;
    m_import_id_isSet = true;
}

bool OAIStopImportResponse::is_import_id_Set() const{
    return m_import_id_isSet;
}

bool OAIStopImportResponse::is_import_id_Valid() const{
    return m_import_id_isValid;
}

OAIStartImportResponse_ImportSource OAIStopImportResponse::getImportSource() const {
    return m_import_source;
}
void OAIStopImportResponse::setImportSource(const OAIStartImportResponse_ImportSource &import_source) {
    m_import_source = import_source;
    m_import_source_isSet = true;
}

bool OAIStopImportResponse::is_import_source_Set() const{
    return m_import_source_isSet;
}

bool OAIStopImportResponse::is_import_source_Valid() const{
    return m_import_source_isValid;
}

QList OAIStopImportResponse::getDestinations() const {
    return m_destinations;
}
void OAIStopImportResponse::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIStopImportResponse::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIStopImportResponse::is_destinations_Valid() const{
    return m_destinations_isValid;
}

OAIImportStatus OAIStopImportResponse::getImportStatus() const {
    return m_import_status;
}
void OAIStopImportResponse::setImportStatus(const OAIImportStatus &import_status) {
    m_import_status = import_status;
    m_import_status_isSet = true;
}

bool OAIStopImportResponse::is_import_status_Set() const{
    return m_import_status_isSet;
}

bool OAIStopImportResponse::is_import_status_Valid() const{
    return m_import_status_isValid;
}

QDateTime OAIStopImportResponse::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIStopImportResponse::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIStopImportResponse::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIStopImportResponse::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIStopImportResponse::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIStopImportResponse::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIStopImportResponse::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIStopImportResponse::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

QDateTime OAIStopImportResponse::getStartEventTime() const {
    return m_start_event_time;
}
void OAIStopImportResponse::setStartEventTime(const QDateTime &start_event_time) {
    m_start_event_time = start_event_time;
    m_start_event_time_isSet = true;
}

bool OAIStopImportResponse::is_start_event_time_Set() const{
    return m_start_event_time_isSet;
}

bool OAIStopImportResponse::is_start_event_time_Valid() const{
    return m_start_event_time_isValid;
}

QDateTime OAIStopImportResponse::getEndEventTime() const {
    return m_end_event_time;
}
void OAIStopImportResponse::setEndEventTime(const QDateTime &end_event_time) {
    m_end_event_time = end_event_time;
    m_end_event_time_isSet = true;
}

bool OAIStopImportResponse::is_end_event_time_Set() const{
    return m_end_event_time_isSet;
}

bool OAIStopImportResponse::is_end_event_time_Valid() const{
    return m_end_event_time_isValid;
}

OAIStopImportResponse_ImportStatistics OAIStopImportResponse::getImportStatistics() const {
    return m_import_statistics;
}
void OAIStopImportResponse::setImportStatistics(const OAIStopImportResponse_ImportStatistics &import_statistics) {
    m_import_statistics = import_statistics;
    m_import_statistics_isSet = true;
}

bool OAIStopImportResponse::is_import_statistics_Set() const{
    return m_import_statistics_isSet;
}

bool OAIStopImportResponse::is_import_statistics_Valid() const{
    return m_import_statistics_isValid;
}

bool OAIStopImportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopImportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
