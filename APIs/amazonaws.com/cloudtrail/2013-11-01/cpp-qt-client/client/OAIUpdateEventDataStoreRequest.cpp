/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEventDataStoreRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEventDataStoreRequest::OAIUpdateEventDataStoreRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEventDataStoreRequest::OAIUpdateEventDataStoreRequest() {
    this->initializeModel();
}

OAIUpdateEventDataStoreRequest::~OAIUpdateEventDataStoreRequest() {}

void OAIUpdateEventDataStoreRequest::initializeModel() {

    m_event_data_store_isSet = false;
    m_event_data_store_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_advanced_event_selectors_isSet = false;
    m_advanced_event_selectors_isValid = false;

    m_multi_region_enabled_isSet = false;
    m_multi_region_enabled_isValid = false;

    m_organization_enabled_isSet = false;
    m_organization_enabled_isValid = false;

    m_retention_period_isSet = false;
    m_retention_period_isValid = false;

    m_termination_protection_enabled_isSet = false;
    m_termination_protection_enabled_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAIUpdateEventDataStoreRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEventDataStoreRequest::fromJsonObject(QJsonObject json) {

    m_event_data_store_isValid = ::OpenAPI::fromJsonValue(m_event_data_store, json[QString("EventDataStore")]);
    m_event_data_store_isSet = !json[QString("EventDataStore")].isNull() && m_event_data_store_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_advanced_event_selectors_isValid = ::OpenAPI::fromJsonValue(m_advanced_event_selectors, json[QString("AdvancedEventSelectors")]);
    m_advanced_event_selectors_isSet = !json[QString("AdvancedEventSelectors")].isNull() && m_advanced_event_selectors_isValid;

    m_multi_region_enabled_isValid = ::OpenAPI::fromJsonValue(m_multi_region_enabled, json[QString("MultiRegionEnabled")]);
    m_multi_region_enabled_isSet = !json[QString("MultiRegionEnabled")].isNull() && m_multi_region_enabled_isValid;

    m_organization_enabled_isValid = ::OpenAPI::fromJsonValue(m_organization_enabled, json[QString("OrganizationEnabled")]);
    m_organization_enabled_isSet = !json[QString("OrganizationEnabled")].isNull() && m_organization_enabled_isValid;

    m_retention_period_isValid = ::OpenAPI::fromJsonValue(m_retention_period, json[QString("RetentionPeriod")]);
    m_retention_period_isSet = !json[QString("RetentionPeriod")].isNull() && m_retention_period_isValid;

    m_termination_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_termination_protection_enabled, json[QString("TerminationProtectionEnabled")]);
    m_termination_protection_enabled_isSet = !json[QString("TerminationProtectionEnabled")].isNull() && m_termination_protection_enabled_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAIUpdateEventDataStoreRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEventDataStoreRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_event_data_store_isSet) {
        obj.insert(QString("EventDataStore"), ::OpenAPI::toJsonValue(m_event_data_store));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_advanced_event_selectors.isSet()) {
        obj.insert(QString("AdvancedEventSelectors"), ::OpenAPI::toJsonValue(m_advanced_event_selectors));
    }
    if (m_multi_region_enabled_isSet) {
        obj.insert(QString("MultiRegionEnabled"), ::OpenAPI::toJsonValue(m_multi_region_enabled));
    }
    if (m_organization_enabled_isSet) {
        obj.insert(QString("OrganizationEnabled"), ::OpenAPI::toJsonValue(m_organization_enabled));
    }
    if (m_retention_period_isSet) {
        obj.insert(QString("RetentionPeriod"), ::OpenAPI::toJsonValue(m_retention_period));
    }
    if (m_termination_protection_enabled_isSet) {
        obj.insert(QString("TerminationProtectionEnabled"), ::OpenAPI::toJsonValue(m_termination_protection_enabled));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

QString OAIUpdateEventDataStoreRequest::getEventDataStore() const {
    return m_event_data_store;
}
void OAIUpdateEventDataStoreRequest::setEventDataStore(const QString &event_data_store) {
    m_event_data_store = event_data_store;
    m_event_data_store_isSet = true;
}

bool OAIUpdateEventDataStoreRequest::is_event_data_store_Set() const{
    return m_event_data_store_isSet;
}

bool OAIUpdateEventDataStoreRequest::is_event_data_store_Valid() const{
    return m_event_data_store_isValid;
}

QString OAIUpdateEventDataStoreRequest::getName() const {
    return m_name;
}
void OAIUpdateEventDataStoreRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateEventDataStoreRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateEventDataStoreRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIUpdateEventDataStoreRequest::getAdvancedEventSelectors() const {
    return m_advanced_event_selectors;
}
void OAIUpdateEventDataStoreRequest::setAdvancedEventSelectors(const QList &advanced_event_selectors) {
    m_advanced_event_selectors = advanced_event_selectors;
    m_advanced_event_selectors_isSet = true;
}

bool OAIUpdateEventDataStoreRequest::is_advanced_event_selectors_Set() const{
    return m_advanced_event_selectors_isSet;
}

bool OAIUpdateEventDataStoreRequest::is_advanced_event_selectors_Valid() const{
    return m_advanced_event_selectors_isValid;
}

bool OAIUpdateEventDataStoreRequest::getMultiRegionEnabled() const {
    return m_multi_region_enabled;
}
void OAIUpdateEventDataStoreRequest::setMultiRegionEnabled(const bool &multi_region_enabled) {
    m_multi_region_enabled = multi_region_enabled;
    m_multi_region_enabled_isSet = true;
}

bool OAIUpdateEventDataStoreRequest::is_multi_region_enabled_Set() const{
    return m_multi_region_enabled_isSet;
}

bool OAIUpdateEventDataStoreRequest::is_multi_region_enabled_Valid() const{
    return m_multi_region_enabled_isValid;
}

bool OAIUpdateEventDataStoreRequest::getOrganizationEnabled() const {
    return m_organization_enabled;
}
void OAIUpdateEventDataStoreRequest::setOrganizationEnabled(const bool &organization_enabled) {
    m_organization_enabled = organization_enabled;
    m_organization_enabled_isSet = true;
}

bool OAIUpdateEventDataStoreRequest::is_organization_enabled_Set() const{
    return m_organization_enabled_isSet;
}

bool OAIUpdateEventDataStoreRequest::is_organization_enabled_Valid() const{
    return m_organization_enabled_isValid;
}

qint32 OAIUpdateEventDataStoreRequest::getRetentionPeriod() const {
    return m_retention_period;
}
void OAIUpdateEventDataStoreRequest::setRetentionPeriod(const qint32 &retention_period) {
    m_retention_period = retention_period;
    m_retention_period_isSet = true;
}

bool OAIUpdateEventDataStoreRequest::is_retention_period_Set() const{
    return m_retention_period_isSet;
}

bool OAIUpdateEventDataStoreRequest::is_retention_period_Valid() const{
    return m_retention_period_isValid;
}

bool OAIUpdateEventDataStoreRequest::getTerminationProtectionEnabled() const {
    return m_termination_protection_enabled;
}
void OAIUpdateEventDataStoreRequest::setTerminationProtectionEnabled(const bool &termination_protection_enabled) {
    m_termination_protection_enabled = termination_protection_enabled;
    m_termination_protection_enabled_isSet = true;
}

bool OAIUpdateEventDataStoreRequest::is_termination_protection_enabled_Set() const{
    return m_termination_protection_enabled_isSet;
}

bool OAIUpdateEventDataStoreRequest::is_termination_protection_enabled_Valid() const{
    return m_termination_protection_enabled_isValid;
}

QString OAIUpdateEventDataStoreRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIUpdateEventDataStoreRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIUpdateEventDataStoreRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIUpdateEventDataStoreRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIUpdateEventDataStoreRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_data_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_event_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_region_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEventDataStoreRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_data_store_isValid && true;
}

} // namespace OpenAPI
