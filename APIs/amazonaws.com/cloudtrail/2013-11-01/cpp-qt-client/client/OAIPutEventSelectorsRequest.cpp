/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutEventSelectorsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutEventSelectorsRequest::OAIPutEventSelectorsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutEventSelectorsRequest::OAIPutEventSelectorsRequest() {
    this->initializeModel();
}

OAIPutEventSelectorsRequest::~OAIPutEventSelectorsRequest() {}

void OAIPutEventSelectorsRequest::initializeModel() {

    m_trail_name_isSet = false;
    m_trail_name_isValid = false;

    m_event_selectors_isSet = false;
    m_event_selectors_isValid = false;

    m_advanced_event_selectors_isSet = false;
    m_advanced_event_selectors_isValid = false;
}

void OAIPutEventSelectorsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutEventSelectorsRequest::fromJsonObject(QJsonObject json) {

    m_trail_name_isValid = ::OpenAPI::fromJsonValue(m_trail_name, json[QString("TrailName")]);
    m_trail_name_isSet = !json[QString("TrailName")].isNull() && m_trail_name_isValid;

    m_event_selectors_isValid = ::OpenAPI::fromJsonValue(m_event_selectors, json[QString("EventSelectors")]);
    m_event_selectors_isSet = !json[QString("EventSelectors")].isNull() && m_event_selectors_isValid;

    m_advanced_event_selectors_isValid = ::OpenAPI::fromJsonValue(m_advanced_event_selectors, json[QString("AdvancedEventSelectors")]);
    m_advanced_event_selectors_isSet = !json[QString("AdvancedEventSelectors")].isNull() && m_advanced_event_selectors_isValid;
}

QString OAIPutEventSelectorsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutEventSelectorsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_trail_name_isSet) {
        obj.insert(QString("TrailName"), ::OpenAPI::toJsonValue(m_trail_name));
    }
    if (m_event_selectors.isSet()) {
        obj.insert(QString("EventSelectors"), ::OpenAPI::toJsonValue(m_event_selectors));
    }
    if (m_advanced_event_selectors.isSet()) {
        obj.insert(QString("AdvancedEventSelectors"), ::OpenAPI::toJsonValue(m_advanced_event_selectors));
    }
    return obj;
}

QString OAIPutEventSelectorsRequest::getTrailName() const {
    return m_trail_name;
}
void OAIPutEventSelectorsRequest::setTrailName(const QString &trail_name) {
    m_trail_name = trail_name;
    m_trail_name_isSet = true;
}

bool OAIPutEventSelectorsRequest::is_trail_name_Set() const{
    return m_trail_name_isSet;
}

bool OAIPutEventSelectorsRequest::is_trail_name_Valid() const{
    return m_trail_name_isValid;
}

QList OAIPutEventSelectorsRequest::getEventSelectors() const {
    return m_event_selectors;
}
void OAIPutEventSelectorsRequest::setEventSelectors(const QList &event_selectors) {
    m_event_selectors = event_selectors;
    m_event_selectors_isSet = true;
}

bool OAIPutEventSelectorsRequest::is_event_selectors_Set() const{
    return m_event_selectors_isSet;
}

bool OAIPutEventSelectorsRequest::is_event_selectors_Valid() const{
    return m_event_selectors_isValid;
}

QList OAIPutEventSelectorsRequest::getAdvancedEventSelectors() const {
    return m_advanced_event_selectors;
}
void OAIPutEventSelectorsRequest::setAdvancedEventSelectors(const QList &advanced_event_selectors) {
    m_advanced_event_selectors = advanced_event_selectors;
    m_advanced_event_selectors_isSet = true;
}

bool OAIPutEventSelectorsRequest::is_advanced_event_selectors_Set() const{
    return m_advanced_event_selectors_isSet;
}

bool OAIPutEventSelectorsRequest::is_advanced_event_selectors_Valid() const{
    return m_advanced_event_selectors_isValid;
}

bool OAIPutEventSelectorsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trail_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_event_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutEventSelectorsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_trail_name_isValid && true;
}

} // namespace OpenAPI
