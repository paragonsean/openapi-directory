/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetChannelResponse::OAIGetChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetChannelResponse::OAIGetChannelResponse() {
    this->initializeModel();
}

OAIGetChannelResponse::~OAIGetChannelResponse() {}

void OAIGetChannelResponse::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_config_isSet = false;
    m_source_config_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_ingestion_status_isSet = false;
    m_ingestion_status_isValid = false;
}

void OAIGetChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetChannelResponse::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelArn")]);
    m_channel_arn_isSet = !json[QString("ChannelArn")].isNull() && m_channel_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_source_config_isValid = ::OpenAPI::fromJsonValue(m_source_config, json[QString("SourceConfig")]);
    m_source_config_isSet = !json[QString("SourceConfig")].isNull() && m_source_config_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;

    m_ingestion_status_isValid = ::OpenAPI::fromJsonValue(m_ingestion_status, json[QString("IngestionStatus")]);
    m_ingestion_status_isSet = !json[QString("IngestionStatus")].isNull() && m_ingestion_status_isValid;
}

QString OAIGetChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelArn"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_config.isSet()) {
        obj.insert(QString("SourceConfig"), ::OpenAPI::toJsonValue(m_source_config));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_ingestion_status.isSet()) {
        obj.insert(QString("IngestionStatus"), ::OpenAPI::toJsonValue(m_ingestion_status));
    }
    return obj;
}

QString OAIGetChannelResponse::getChannelArn() const {
    return m_channel_arn;
}
void OAIGetChannelResponse::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIGetChannelResponse::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIGetChannelResponse::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QString OAIGetChannelResponse::getName() const {
    return m_name;
}
void OAIGetChannelResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetChannelResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetChannelResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetChannelResponse::getSource() const {
    return m_source;
}
void OAIGetChannelResponse::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIGetChannelResponse::is_source_Set() const{
    return m_source_isSet;
}

bool OAIGetChannelResponse::is_source_Valid() const{
    return m_source_isValid;
}

OAIGetChannelResponse_SourceConfig OAIGetChannelResponse::getSourceConfig() const {
    return m_source_config;
}
void OAIGetChannelResponse::setSourceConfig(const OAIGetChannelResponse_SourceConfig &source_config) {
    m_source_config = source_config;
    m_source_config_isSet = true;
}

bool OAIGetChannelResponse::is_source_config_Set() const{
    return m_source_config_isSet;
}

bool OAIGetChannelResponse::is_source_config_Valid() const{
    return m_source_config_isValid;
}

QList OAIGetChannelResponse::getDestinations() const {
    return m_destinations;
}
void OAIGetChannelResponse::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIGetChannelResponse::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIGetChannelResponse::is_destinations_Valid() const{
    return m_destinations_isValid;
}

OAIGetChannelResponse_IngestionStatus OAIGetChannelResponse::getIngestionStatus() const {
    return m_ingestion_status;
}
void OAIGetChannelResponse::setIngestionStatus(const OAIGetChannelResponse_IngestionStatus &ingestion_status) {
    m_ingestion_status = ingestion_status;
    m_ingestion_status_isSet = true;
}

bool OAIGetChannelResponse::is_ingestion_status_Set() const{
    return m_ingestion_status_isSet;
}

bool OAIGetChannelResponse::is_ingestion_status_Valid() const{
    return m_ingestion_status_isValid;
}

bool OAIGetChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingestion_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
