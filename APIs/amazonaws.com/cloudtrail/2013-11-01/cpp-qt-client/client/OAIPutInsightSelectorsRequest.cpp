/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutInsightSelectorsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutInsightSelectorsRequest::OAIPutInsightSelectorsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutInsightSelectorsRequest::OAIPutInsightSelectorsRequest() {
    this->initializeModel();
}

OAIPutInsightSelectorsRequest::~OAIPutInsightSelectorsRequest() {}

void OAIPutInsightSelectorsRequest::initializeModel() {

    m_trail_name_isSet = false;
    m_trail_name_isValid = false;

    m_insight_selectors_isSet = false;
    m_insight_selectors_isValid = false;
}

void OAIPutInsightSelectorsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutInsightSelectorsRequest::fromJsonObject(QJsonObject json) {

    m_trail_name_isValid = ::OpenAPI::fromJsonValue(m_trail_name, json[QString("TrailName")]);
    m_trail_name_isSet = !json[QString("TrailName")].isNull() && m_trail_name_isValid;

    m_insight_selectors_isValid = ::OpenAPI::fromJsonValue(m_insight_selectors, json[QString("InsightSelectors")]);
    m_insight_selectors_isSet = !json[QString("InsightSelectors")].isNull() && m_insight_selectors_isValid;
}

QString OAIPutInsightSelectorsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutInsightSelectorsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_trail_name_isSet) {
        obj.insert(QString("TrailName"), ::OpenAPI::toJsonValue(m_trail_name));
    }
    if (m_insight_selectors.isSet()) {
        obj.insert(QString("InsightSelectors"), ::OpenAPI::toJsonValue(m_insight_selectors));
    }
    return obj;
}

QString OAIPutInsightSelectorsRequest::getTrailName() const {
    return m_trail_name;
}
void OAIPutInsightSelectorsRequest::setTrailName(const QString &trail_name) {
    m_trail_name = trail_name;
    m_trail_name_isSet = true;
}

bool OAIPutInsightSelectorsRequest::is_trail_name_Set() const{
    return m_trail_name_isSet;
}

bool OAIPutInsightSelectorsRequest::is_trail_name_Valid() const{
    return m_trail_name_isValid;
}

QList OAIPutInsightSelectorsRequest::getInsightSelectors() const {
    return m_insight_selectors;
}
void OAIPutInsightSelectorsRequest::setInsightSelectors(const QList &insight_selectors) {
    m_insight_selectors = insight_selectors;
    m_insight_selectors_isSet = true;
}

bool OAIPutInsightSelectorsRequest::is_insight_selectors_Set() const{
    return m_insight_selectors_isSet;
}

bool OAIPutInsightSelectorsRequest::is_insight_selectors_Valid() const{
    return m_insight_selectors_isValid;
}

bool OAIPutInsightSelectorsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trail_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insight_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutInsightSelectorsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_trail_name_isValid && m_insight_selectors_isValid && true;
}

} // namespace OpenAPI
