/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataResource.h
 *
 * &lt;p&gt;The Amazon S3 buckets, Lambda functions, or Amazon DynamoDB tables that you specify in your event selectors for your trail to log data events. Data events provide information about the resource operations performed on or within a resource itself. These are also known as data plane operations. You can specify up to 250 data resources for a trail.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The total number of allowed data resources is 250. This number can be distributed between 1 and 5 event selectors, but the total cannot exceed 250 across all selectors for the trail.&lt;/p&gt; &lt;p&gt;If you are using advanced event selectors, the maximum total number of values for all conditions, across all advanced event selectors for the trail, is 500.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The following example demonstrates how logging works when you configure logging of all data events for an S3 bucket named &lt;code&gt;bucket-1&lt;/code&gt;. In this example, the CloudTrail user specified an empty prefix, and the option to log both &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; data events.&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;A user uploads an image file to &lt;code&gt;bucket-1&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;PutObject&lt;/code&gt; API operation is an Amazon S3 object-level API. It is recorded as a data event in CloudTrail. Because the CloudTrail user specified an S3 bucket with an empty prefix, events that occur on any object in that bucket are logged. The trail processes and logs the event.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user uploads an object to an Amazon S3 bucket named &lt;code&gt;arn:aws:s3:::bucket-2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;PutObject&lt;/code&gt; API operation occurred for an object in an S3 bucket that the CloudTrail user didn&#39;t specify for the trail. The trail doesn’t log the event.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The following example demonstrates how logging works when you configure logging of Lambda data events for a Lambda function named &lt;i&gt;MyLambdaFunction&lt;/i&gt;, but not for all Lambda functions.&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;A user runs a script that includes a call to the &lt;i&gt;MyLambdaFunction&lt;/i&gt; function and the &lt;i&gt;MyOtherLambdaFunction&lt;/i&gt; function.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Invoke&lt;/code&gt; API operation on &lt;i&gt;MyLambdaFunction&lt;/i&gt; is an Lambda API. It is recorded as a data event in CloudTrail. Because the CloudTrail user specified logging data events for &lt;i&gt;MyLambdaFunction&lt;/i&gt;, any invocations of that function are logged. The trail processes and logs the event.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;Invoke&lt;/code&gt; API operation on &lt;i&gt;MyOtherLambdaFunction&lt;/i&gt; is an Lambda API. Because the CloudTrail user did not specify logging data events for all Lambda functions, the &lt;code&gt;Invoke&lt;/code&gt; operation for &lt;i&gt;MyOtherLambdaFunction&lt;/i&gt; does not match the function specified for the trail. The trail doesn’t log the event. &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
 */

#ifndef OAIDataResource_H
#define OAIDataResource_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDataResource : public OAIObject {
public:
    OAIDataResource();
    OAIDataResource(QString json);
    ~OAIDataResource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataResource)

#endif // OAIDataResource_H
