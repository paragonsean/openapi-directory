/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_access_key_id_isSet = false;
    m_access_key_id_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_cloud_trail_event_isSet = false;
    m_cloud_trail_event_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("EventId")]);
    m_event_id_isSet = !json[QString("EventId")].isNull() && m_event_id_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("EventName")]);
    m_event_name_isSet = !json[QString("EventName")].isNull() && m_event_name_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("ReadOnly")]);
    m_read_only_isSet = !json[QString("ReadOnly")].isNull() && m_read_only_isValid;

    m_access_key_id_isValid = ::OpenAPI::fromJsonValue(m_access_key_id, json[QString("AccessKeyId")]);
    m_access_key_id_isSet = !json[QString("AccessKeyId")].isNull() && m_access_key_id_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("EventTime")]);
    m_event_time_isSet = !json[QString("EventTime")].isNull() && m_event_time_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("EventSource")]);
    m_event_source_isSet = !json[QString("EventSource")].isNull() && m_event_source_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_cloud_trail_event_isValid = ::OpenAPI::fromJsonValue(m_cloud_trail_event, json[QString("CloudTrailEvent")]);
    m_cloud_trail_event_isSet = !json[QString("CloudTrailEvent")].isNull() && m_cloud_trail_event_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id_isSet) {
        obj.insert(QString("EventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("EventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("ReadOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_access_key_id_isSet) {
        obj.insert(QString("AccessKeyId"), ::OpenAPI::toJsonValue(m_access_key_id));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("EventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("EventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_cloud_trail_event_isSet) {
        obj.insert(QString("CloudTrailEvent"), ::OpenAPI::toJsonValue(m_cloud_trail_event));
    }
    return obj;
}

QString OAIEvent::getEventId() const {
    return m_event_id;
}
void OAIEvent::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIEvent::getEventName() const {
    return m_event_name;
}
void OAIEvent::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIEvent::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIEvent::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIEvent::getReadOnly() const {
    return m_read_only;
}
void OAIEvent::setReadOnly(const QString &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIEvent::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIEvent::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIEvent::getAccessKeyId() const {
    return m_access_key_id;
}
void OAIEvent::setAccessKeyId(const QString &access_key_id) {
    m_access_key_id = access_key_id;
    m_access_key_id_isSet = true;
}

bool OAIEvent::is_access_key_id_Set() const{
    return m_access_key_id_isSet;
}

bool OAIEvent::is_access_key_id_Valid() const{
    return m_access_key_id_isValid;
}

QDateTime OAIEvent::getEventTime() const {
    return m_event_time;
}
void OAIEvent::setEventTime(const QDateTime &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString OAIEvent::getEventSource() const {
    return m_event_source;
}
void OAIEvent::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIEvent::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIEvent::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QString OAIEvent::getUsername() const {
    return m_username;
}
void OAIEvent::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIEvent::is_username_Set() const{
    return m_username_isSet;
}

bool OAIEvent::is_username_Valid() const{
    return m_username_isValid;
}

QList OAIEvent::getResources() const {
    return m_resources;
}
void OAIEvent::setResources(const QList &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIEvent::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIEvent::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIEvent::getCloudTrailEvent() const {
    return m_cloud_trail_event;
}
void OAIEvent::setCloudTrailEvent(const QString &cloud_trail_event) {
    m_cloud_trail_event = cloud_trail_event;
    m_cloud_trail_event_isSet = true;
}

bool OAIEvent::is_cloud_trail_event_Set() const{
    return m_cloud_trail_event_isSet;
}

bool OAIEvent::is_cloud_trail_event_Valid() const{
    return m_cloud_trail_event_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_trail_event_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
