/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventSelector.h
 *
 * &lt;p&gt;Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn&#39;t match any event selector, the trail doesn&#39;t log the event.&lt;/p&gt; &lt;p&gt;You can configure up to five event selectors for a trail.&lt;/p&gt; &lt;p&gt;You cannot apply both event selectors and advanced event selectors to a trail.&lt;/p&gt;
 */

#ifndef OAIEventSelector_H
#define OAIEventSelector_H

#include <QJsonObject>

#include "OAIReadWriteType.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEventSelector : public OAIObject {
public:
    OAIEventSelector();
    OAIEventSelector(QString json);
    ~OAIEventSelector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIReadWriteType getReadWriteType() const;
    void setReadWriteType(const OAIReadWriteType &read_write_type);
    bool is_read_write_type_Set() const;
    bool is_read_write_type_Valid() const;

    bool getIncludeManagementEvents() const;
    void setIncludeManagementEvents(const bool &include_management_events);
    bool is_include_management_events_Set() const;
    bool is_include_management_events_Valid() const;

    QList getDataResources() const;
    void setDataResources(const QList &data_resources);
    bool is_data_resources_Set() const;
    bool is_data_resources_Valid() const;

    QList getExcludeManagementEventSources() const;
    void setExcludeManagementEventSources(const QList &exclude_management_event_sources);
    bool is_exclude_management_event_sources_Set() const;
    bool is_exclude_management_event_sources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIReadWriteType m_read_write_type;
    bool m_read_write_type_isSet;
    bool m_read_write_type_isValid;

    bool m_include_management_events;
    bool m_include_management_events_isSet;
    bool m_include_management_events_isValid;

    QList m_data_resources;
    bool m_data_resources_isSet;
    bool m_data_resources_isValid;

    QList m_exclude_management_event_sources;
    bool m_exclude_management_event_sources_isSet;
    bool m_exclude_management_event_sources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventSelector)

#endif // OAIEventSelector_H
