/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIngestionStatus.h
 *
 * A table showing information about the most recent successful and failed attempts to ingest events.
 */

#ifndef OAIIngestionStatus_H
#define OAIIngestionStatus_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIngestionStatus : public OAIObject {
public:
    OAIIngestionStatus();
    OAIIngestionStatus(QString json);
    ~OAIIngestionStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getLatestIngestionSuccessTime() const;
    void setLatestIngestionSuccessTime(const QDateTime &latest_ingestion_success_time);
    bool is_latest_ingestion_success_time_Set() const;
    bool is_latest_ingestion_success_time_Valid() const;

    QString getLatestIngestionSuccessEventId() const;
    void setLatestIngestionSuccessEventId(const QString &latest_ingestion_success_event_id);
    bool is_latest_ingestion_success_event_id_Set() const;
    bool is_latest_ingestion_success_event_id_Valid() const;

    QString getLatestIngestionErrorCode() const;
    void setLatestIngestionErrorCode(const QString &latest_ingestion_error_code);
    bool is_latest_ingestion_error_code_Set() const;
    bool is_latest_ingestion_error_code_Valid() const;

    QDateTime getLatestIngestionAttemptTime() const;
    void setLatestIngestionAttemptTime(const QDateTime &latest_ingestion_attempt_time);
    bool is_latest_ingestion_attempt_time_Set() const;
    bool is_latest_ingestion_attempt_time_Valid() const;

    QString getLatestIngestionAttemptEventId() const;
    void setLatestIngestionAttemptEventId(const QString &latest_ingestion_attempt_event_id);
    bool is_latest_ingestion_attempt_event_id_Set() const;
    bool is_latest_ingestion_attempt_event_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_latest_ingestion_success_time;
    bool m_latest_ingestion_success_time_isSet;
    bool m_latest_ingestion_success_time_isValid;

    QString m_latest_ingestion_success_event_id;
    bool m_latest_ingestion_success_event_id_isSet;
    bool m_latest_ingestion_success_event_id_isValid;

    QString m_latest_ingestion_error_code;
    bool m_latest_ingestion_error_code_isSet;
    bool m_latest_ingestion_error_code_isValid;

    QDateTime m_latest_ingestion_attempt_time;
    bool m_latest_ingestion_attempt_time_isSet;
    bool m_latest_ingestion_attempt_time_isValid;

    QString m_latest_ingestion_attempt_event_id;
    bool m_latest_ingestion_attempt_event_id_isSet;
    bool m_latest_ingestion_attempt_event_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIngestionStatus)

#endif // OAIIngestionStatus_H
