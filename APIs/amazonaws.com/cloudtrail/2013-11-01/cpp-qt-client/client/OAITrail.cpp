/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrail::OAITrail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrail::OAITrail() {
    this->initializeModel();
}

OAITrail::~OAITrail() {}

void OAITrail::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_s3_key_prefix_isSet = false;
    m_s3_key_prefix_isValid = false;

    m_sns_topic_name_isSet = false;
    m_sns_topic_name_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_include_global_service_events_isSet = false;
    m_include_global_service_events_isValid = false;

    m_is_multi_region_trail_isSet = false;
    m_is_multi_region_trail_isValid = false;

    m_home_region_isSet = false;
    m_home_region_isValid = false;

    m_trail_arn_isSet = false;
    m_trail_arn_isValid = false;

    m_log_file_validation_enabled_isSet = false;
    m_log_file_validation_enabled_isValid = false;

    m_cloud_watch_logs_log_group_arn_isSet = false;
    m_cloud_watch_logs_log_group_arn_isValid = false;

    m_cloud_watch_logs_role_arn_isSet = false;
    m_cloud_watch_logs_role_arn_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_has_custom_event_selectors_isSet = false;
    m_has_custom_event_selectors_isValid = false;

    m_has_insight_selectors_isSet = false;
    m_has_insight_selectors_isValid = false;

    m_is_organization_trail_isSet = false;
    m_is_organization_trail_isValid = false;
}

void OAITrail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrail::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("S3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("S3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_s3_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_s3_key_prefix, json[QString("S3KeyPrefix")]);
    m_s3_key_prefix_isSet = !json[QString("S3KeyPrefix")].isNull() && m_s3_key_prefix_isValid;

    m_sns_topic_name_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_name, json[QString("SnsTopicName")]);
    m_sns_topic_name_isSet = !json[QString("SnsTopicName")].isNull() && m_sns_topic_name_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SnsTopicARN")]);
    m_sns_topic_arn_isSet = !json[QString("SnsTopicARN")].isNull() && m_sns_topic_arn_isValid;

    m_include_global_service_events_isValid = ::OpenAPI::fromJsonValue(m_include_global_service_events, json[QString("IncludeGlobalServiceEvents")]);
    m_include_global_service_events_isSet = !json[QString("IncludeGlobalServiceEvents")].isNull() && m_include_global_service_events_isValid;

    m_is_multi_region_trail_isValid = ::OpenAPI::fromJsonValue(m_is_multi_region_trail, json[QString("IsMultiRegionTrail")]);
    m_is_multi_region_trail_isSet = !json[QString("IsMultiRegionTrail")].isNull() && m_is_multi_region_trail_isValid;

    m_home_region_isValid = ::OpenAPI::fromJsonValue(m_home_region, json[QString("HomeRegion")]);
    m_home_region_isSet = !json[QString("HomeRegion")].isNull() && m_home_region_isValid;

    m_trail_arn_isValid = ::OpenAPI::fromJsonValue(m_trail_arn, json[QString("TrailARN")]);
    m_trail_arn_isSet = !json[QString("TrailARN")].isNull() && m_trail_arn_isValid;

    m_log_file_validation_enabled_isValid = ::OpenAPI::fromJsonValue(m_log_file_validation_enabled, json[QString("LogFileValidationEnabled")]);
    m_log_file_validation_enabled_isSet = !json[QString("LogFileValidationEnabled")].isNull() && m_log_file_validation_enabled_isValid;

    m_cloud_watch_logs_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs_log_group_arn, json[QString("CloudWatchLogsLogGroupArn")]);
    m_cloud_watch_logs_log_group_arn_isSet = !json[QString("CloudWatchLogsLogGroupArn")].isNull() && m_cloud_watch_logs_log_group_arn_isValid;

    m_cloud_watch_logs_role_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs_role_arn, json[QString("CloudWatchLogsRoleArn")]);
    m_cloud_watch_logs_role_arn_isSet = !json[QString("CloudWatchLogsRoleArn")].isNull() && m_cloud_watch_logs_role_arn_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_has_custom_event_selectors_isValid = ::OpenAPI::fromJsonValue(m_has_custom_event_selectors, json[QString("HasCustomEventSelectors")]);
    m_has_custom_event_selectors_isSet = !json[QString("HasCustomEventSelectors")].isNull() && m_has_custom_event_selectors_isValid;

    m_has_insight_selectors_isValid = ::OpenAPI::fromJsonValue(m_has_insight_selectors, json[QString("HasInsightSelectors")]);
    m_has_insight_selectors_isSet = !json[QString("HasInsightSelectors")].isNull() && m_has_insight_selectors_isValid;

    m_is_organization_trail_isValid = ::OpenAPI::fromJsonValue(m_is_organization_trail, json[QString("IsOrganizationTrail")]);
    m_is_organization_trail_isSet = !json[QString("IsOrganizationTrail")].isNull() && m_is_organization_trail_isValid;
}

QString OAITrail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrail::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("S3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_s3_key_prefix_isSet) {
        obj.insert(QString("S3KeyPrefix"), ::OpenAPI::toJsonValue(m_s3_key_prefix));
    }
    if (m_sns_topic_name_isSet) {
        obj.insert(QString("SnsTopicName"), ::OpenAPI::toJsonValue(m_sns_topic_name));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SnsTopicARN"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_include_global_service_events_isSet) {
        obj.insert(QString("IncludeGlobalServiceEvents"), ::OpenAPI::toJsonValue(m_include_global_service_events));
    }
    if (m_is_multi_region_trail_isSet) {
        obj.insert(QString("IsMultiRegionTrail"), ::OpenAPI::toJsonValue(m_is_multi_region_trail));
    }
    if (m_home_region_isSet) {
        obj.insert(QString("HomeRegion"), ::OpenAPI::toJsonValue(m_home_region));
    }
    if (m_trail_arn_isSet) {
        obj.insert(QString("TrailARN"), ::OpenAPI::toJsonValue(m_trail_arn));
    }
    if (m_log_file_validation_enabled_isSet) {
        obj.insert(QString("LogFileValidationEnabled"), ::OpenAPI::toJsonValue(m_log_file_validation_enabled));
    }
    if (m_cloud_watch_logs_log_group_arn_isSet) {
        obj.insert(QString("CloudWatchLogsLogGroupArn"), ::OpenAPI::toJsonValue(m_cloud_watch_logs_log_group_arn));
    }
    if (m_cloud_watch_logs_role_arn_isSet) {
        obj.insert(QString("CloudWatchLogsRoleArn"), ::OpenAPI::toJsonValue(m_cloud_watch_logs_role_arn));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_has_custom_event_selectors_isSet) {
        obj.insert(QString("HasCustomEventSelectors"), ::OpenAPI::toJsonValue(m_has_custom_event_selectors));
    }
    if (m_has_insight_selectors_isSet) {
        obj.insert(QString("HasInsightSelectors"), ::OpenAPI::toJsonValue(m_has_insight_selectors));
    }
    if (m_is_organization_trail_isSet) {
        obj.insert(QString("IsOrganizationTrail"), ::OpenAPI::toJsonValue(m_is_organization_trail));
    }
    return obj;
}

QString OAITrail::getName() const {
    return m_name;
}
void OAITrail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrail::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITrail::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAITrail::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAITrail::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAITrail::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

QString OAITrail::getS3KeyPrefix() const {
    return m_s3_key_prefix;
}
void OAITrail::setS3KeyPrefix(const QString &s3_key_prefix) {
    m_s3_key_prefix = s3_key_prefix;
    m_s3_key_prefix_isSet = true;
}

bool OAITrail::is_s3_key_prefix_Set() const{
    return m_s3_key_prefix_isSet;
}

bool OAITrail::is_s3_key_prefix_Valid() const{
    return m_s3_key_prefix_isValid;
}

QString OAITrail::getSnsTopicName() const {
    return m_sns_topic_name;
}
void OAITrail::setSnsTopicName(const QString &sns_topic_name) {
    m_sns_topic_name = sns_topic_name;
    m_sns_topic_name_isSet = true;
}

bool OAITrail::is_sns_topic_name_Set() const{
    return m_sns_topic_name_isSet;
}

bool OAITrail::is_sns_topic_name_Valid() const{
    return m_sns_topic_name_isValid;
}

QString OAITrail::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAITrail::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAITrail::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAITrail::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

bool OAITrail::getIncludeGlobalServiceEvents() const {
    return m_include_global_service_events;
}
void OAITrail::setIncludeGlobalServiceEvents(const bool &include_global_service_events) {
    m_include_global_service_events = include_global_service_events;
    m_include_global_service_events_isSet = true;
}

bool OAITrail::is_include_global_service_events_Set() const{
    return m_include_global_service_events_isSet;
}

bool OAITrail::is_include_global_service_events_Valid() const{
    return m_include_global_service_events_isValid;
}

bool OAITrail::getIsMultiRegionTrail() const {
    return m_is_multi_region_trail;
}
void OAITrail::setIsMultiRegionTrail(const bool &is_multi_region_trail) {
    m_is_multi_region_trail = is_multi_region_trail;
    m_is_multi_region_trail_isSet = true;
}

bool OAITrail::is_is_multi_region_trail_Set() const{
    return m_is_multi_region_trail_isSet;
}

bool OAITrail::is_is_multi_region_trail_Valid() const{
    return m_is_multi_region_trail_isValid;
}

QString OAITrail::getHomeRegion() const {
    return m_home_region;
}
void OAITrail::setHomeRegion(const QString &home_region) {
    m_home_region = home_region;
    m_home_region_isSet = true;
}

bool OAITrail::is_home_region_Set() const{
    return m_home_region_isSet;
}

bool OAITrail::is_home_region_Valid() const{
    return m_home_region_isValid;
}

QString OAITrail::getTrailArn() const {
    return m_trail_arn;
}
void OAITrail::setTrailArn(const QString &trail_arn) {
    m_trail_arn = trail_arn;
    m_trail_arn_isSet = true;
}

bool OAITrail::is_trail_arn_Set() const{
    return m_trail_arn_isSet;
}

bool OAITrail::is_trail_arn_Valid() const{
    return m_trail_arn_isValid;
}

bool OAITrail::getLogFileValidationEnabled() const {
    return m_log_file_validation_enabled;
}
void OAITrail::setLogFileValidationEnabled(const bool &log_file_validation_enabled) {
    m_log_file_validation_enabled = log_file_validation_enabled;
    m_log_file_validation_enabled_isSet = true;
}

bool OAITrail::is_log_file_validation_enabled_Set() const{
    return m_log_file_validation_enabled_isSet;
}

bool OAITrail::is_log_file_validation_enabled_Valid() const{
    return m_log_file_validation_enabled_isValid;
}

QString OAITrail::getCloudWatchLogsLogGroupArn() const {
    return m_cloud_watch_logs_log_group_arn;
}
void OAITrail::setCloudWatchLogsLogGroupArn(const QString &cloud_watch_logs_log_group_arn) {
    m_cloud_watch_logs_log_group_arn = cloud_watch_logs_log_group_arn;
    m_cloud_watch_logs_log_group_arn_isSet = true;
}

bool OAITrail::is_cloud_watch_logs_log_group_arn_Set() const{
    return m_cloud_watch_logs_log_group_arn_isSet;
}

bool OAITrail::is_cloud_watch_logs_log_group_arn_Valid() const{
    return m_cloud_watch_logs_log_group_arn_isValid;
}

QString OAITrail::getCloudWatchLogsRoleArn() const {
    return m_cloud_watch_logs_role_arn;
}
void OAITrail::setCloudWatchLogsRoleArn(const QString &cloud_watch_logs_role_arn) {
    m_cloud_watch_logs_role_arn = cloud_watch_logs_role_arn;
    m_cloud_watch_logs_role_arn_isSet = true;
}

bool OAITrail::is_cloud_watch_logs_role_arn_Set() const{
    return m_cloud_watch_logs_role_arn_isSet;
}

bool OAITrail::is_cloud_watch_logs_role_arn_Valid() const{
    return m_cloud_watch_logs_role_arn_isValid;
}

QString OAITrail::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAITrail::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAITrail::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAITrail::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAITrail::getHasCustomEventSelectors() const {
    return m_has_custom_event_selectors;
}
void OAITrail::setHasCustomEventSelectors(const bool &has_custom_event_selectors) {
    m_has_custom_event_selectors = has_custom_event_selectors;
    m_has_custom_event_selectors_isSet = true;
}

bool OAITrail::is_has_custom_event_selectors_Set() const{
    return m_has_custom_event_selectors_isSet;
}

bool OAITrail::is_has_custom_event_selectors_Valid() const{
    return m_has_custom_event_selectors_isValid;
}

bool OAITrail::getHasInsightSelectors() const {
    return m_has_insight_selectors;
}
void OAITrail::setHasInsightSelectors(const bool &has_insight_selectors) {
    m_has_insight_selectors = has_insight_selectors;
    m_has_insight_selectors_isSet = true;
}

bool OAITrail::is_has_insight_selectors_Set() const{
    return m_has_insight_selectors_isSet;
}

bool OAITrail::is_has_insight_selectors_Valid() const{
    return m_has_insight_selectors_isValid;
}

bool OAITrail::getIsOrganizationTrail() const {
    return m_is_organization_trail;
}
void OAITrail::setIsOrganizationTrail(const bool &is_organization_trail) {
    m_is_organization_trail = is_organization_trail;
    m_is_organization_trail_isSet = true;
}

bool OAITrail::is_is_organization_trail_Set() const{
    return m_is_organization_trail_isSet;
}

bool OAITrail::is_is_organization_trail_Valid() const{
    return m_is_organization_trail_isValid;
}

bool OAITrail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_global_service_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_multi_region_trail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trail_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_file_validation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logs_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logs_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_custom_event_selectors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_insight_selectors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_organization_trail_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
