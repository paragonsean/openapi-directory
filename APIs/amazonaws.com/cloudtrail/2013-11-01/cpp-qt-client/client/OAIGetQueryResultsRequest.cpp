/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetQueryResultsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetQueryResultsRequest::OAIGetQueryResultsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetQueryResultsRequest::OAIGetQueryResultsRequest() {
    this->initializeModel();
}

OAIGetQueryResultsRequest::~OAIGetQueryResultsRequest() {}

void OAIGetQueryResultsRequest::initializeModel() {

    m_event_data_store_isSet = false;
    m_event_data_store_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_query_results_isSet = false;
    m_max_query_results_isValid = false;
}

void OAIGetQueryResultsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetQueryResultsRequest::fromJsonObject(QJsonObject json) {

    m_event_data_store_isValid = ::OpenAPI::fromJsonValue(m_event_data_store, json[QString("EventDataStore")]);
    m_event_data_store_isSet = !json[QString("EventDataStore")].isNull() && m_event_data_store_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("QueryId")]);
    m_query_id_isSet = !json[QString("QueryId")].isNull() && m_query_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_query_results_isValid = ::OpenAPI::fromJsonValue(m_max_query_results, json[QString("MaxQueryResults")]);
    m_max_query_results_isSet = !json[QString("MaxQueryResults")].isNull() && m_max_query_results_isValid;
}

QString OAIGetQueryResultsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetQueryResultsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_event_data_store_isSet) {
        obj.insert(QString("EventDataStore"), ::OpenAPI::toJsonValue(m_event_data_store));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("QueryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_query_results_isSet) {
        obj.insert(QString("MaxQueryResults"), ::OpenAPI::toJsonValue(m_max_query_results));
    }
    return obj;
}

QString OAIGetQueryResultsRequest::getEventDataStore() const {
    return m_event_data_store;
}
void OAIGetQueryResultsRequest::setEventDataStore(const QString &event_data_store) {
    m_event_data_store = event_data_store;
    m_event_data_store_isSet = true;
}

bool OAIGetQueryResultsRequest::is_event_data_store_Set() const{
    return m_event_data_store_isSet;
}

bool OAIGetQueryResultsRequest::is_event_data_store_Valid() const{
    return m_event_data_store_isValid;
}

QString OAIGetQueryResultsRequest::getQueryId() const {
    return m_query_id;
}
void OAIGetQueryResultsRequest::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIGetQueryResultsRequest::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIGetQueryResultsRequest::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAIGetQueryResultsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetQueryResultsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetQueryResultsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetQueryResultsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetQueryResultsRequest::getMaxQueryResults() const {
    return m_max_query_results;
}
void OAIGetQueryResultsRequest::setMaxQueryResults(const qint32 &max_query_results) {
    m_max_query_results = max_query_results;
    m_max_query_results_isSet = true;
}

bool OAIGetQueryResultsRequest::is_max_query_results_Set() const{
    return m_max_query_results_isSet;
}

bool OAIGetQueryResultsRequest::is_max_query_results_Valid() const{
    return m_max_query_results_isValid;
}

bool OAIGetQueryResultsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_data_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_query_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetQueryResultsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_id_isValid && true;
}

} // namespace OpenAPI
