/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateEventDataStoreRequest.h
 *
 * 
 */

#ifndef OAIUpdateEventDataStoreRequest_H
#define OAIUpdateEventDataStoreRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateEventDataStoreRequest : public OAIObject {
public:
    OAIUpdateEventDataStoreRequest();
    OAIUpdateEventDataStoreRequest(QString json);
    ~OAIUpdateEventDataStoreRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEventDataStore() const;
    void setEventDataStore(const QString &event_data_store);
    bool is_event_data_store_Set() const;
    bool is_event_data_store_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getAdvancedEventSelectors() const;
    void setAdvancedEventSelectors(const QList &advanced_event_selectors);
    bool is_advanced_event_selectors_Set() const;
    bool is_advanced_event_selectors_Valid() const;

    bool getMultiRegionEnabled() const;
    void setMultiRegionEnabled(const bool &multi_region_enabled);
    bool is_multi_region_enabled_Set() const;
    bool is_multi_region_enabled_Valid() const;

    bool getOrganizationEnabled() const;
    void setOrganizationEnabled(const bool &organization_enabled);
    bool is_organization_enabled_Set() const;
    bool is_organization_enabled_Valid() const;

    qint32 getRetentionPeriod() const;
    void setRetentionPeriod(const qint32 &retention_period);
    bool is_retention_period_Set() const;
    bool is_retention_period_Valid() const;

    bool getTerminationProtectionEnabled() const;
    void setTerminationProtectionEnabled(const bool &termination_protection_enabled);
    bool is_termination_protection_enabled_Set() const;
    bool is_termination_protection_enabled_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_event_data_store;
    bool m_event_data_store_isSet;
    bool m_event_data_store_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_advanced_event_selectors;
    bool m_advanced_event_selectors_isSet;
    bool m_advanced_event_selectors_isValid;

    bool m_multi_region_enabled;
    bool m_multi_region_enabled_isSet;
    bool m_multi_region_enabled_isValid;

    bool m_organization_enabled;
    bool m_organization_enabled_isSet;
    bool m_organization_enabled_isValid;

    qint32 m_retention_period;
    bool m_retention_period_isSet;
    bool m_retention_period_isValid;

    bool m_termination_protection_enabled;
    bool m_termination_protection_enabled_isSet;
    bool m_termination_protection_enabled_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateEventDataStoreRequest)

#endif // OAIUpdateEventDataStoreRequest_H
