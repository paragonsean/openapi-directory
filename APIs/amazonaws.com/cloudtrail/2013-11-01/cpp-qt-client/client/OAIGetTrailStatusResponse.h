/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTrailStatusResponse.h
 *
 * Returns the objects or data listed below if successful. Otherwise, returns an error.
 */

#ifndef OAIGetTrailStatusResponse_H
#define OAIGetTrailStatusResponse_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetTrailStatusResponse : public OAIObject {
public:
    OAIGetTrailStatusResponse();
    OAIGetTrailStatusResponse(QString json);
    ~OAIGetTrailStatusResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getIsLogging() const;
    void setIsLogging(const bool &is_logging);
    bool is_is_logging_Set() const;
    bool is_is_logging_Valid() const;

    QString getLatestDeliveryError() const;
    void setLatestDeliveryError(const QString &latest_delivery_error);
    bool is_latest_delivery_error_Set() const;
    bool is_latest_delivery_error_Valid() const;

    QString getLatestNotificationError() const;
    void setLatestNotificationError(const QString &latest_notification_error);
    bool is_latest_notification_error_Set() const;
    bool is_latest_notification_error_Valid() const;

    QDateTime getLatestDeliveryTime() const;
    void setLatestDeliveryTime(const QDateTime &latest_delivery_time);
    bool is_latest_delivery_time_Set() const;
    bool is_latest_delivery_time_Valid() const;

    QDateTime getLatestNotificationTime() const;
    void setLatestNotificationTime(const QDateTime &latest_notification_time);
    bool is_latest_notification_time_Set() const;
    bool is_latest_notification_time_Valid() const;

    QDateTime getStartLoggingTime() const;
    void setStartLoggingTime(const QDateTime &start_logging_time);
    bool is_start_logging_time_Set() const;
    bool is_start_logging_time_Valid() const;

    QDateTime getStopLoggingTime() const;
    void setStopLoggingTime(const QDateTime &stop_logging_time);
    bool is_stop_logging_time_Set() const;
    bool is_stop_logging_time_Valid() const;

    QString getLatestCloudWatchLogsDeliveryError() const;
    void setLatestCloudWatchLogsDeliveryError(const QString &latest_cloud_watch_logs_delivery_error);
    bool is_latest_cloud_watch_logs_delivery_error_Set() const;
    bool is_latest_cloud_watch_logs_delivery_error_Valid() const;

    QDateTime getLatestCloudWatchLogsDeliveryTime() const;
    void setLatestCloudWatchLogsDeliveryTime(const QDateTime &latest_cloud_watch_logs_delivery_time);
    bool is_latest_cloud_watch_logs_delivery_time_Set() const;
    bool is_latest_cloud_watch_logs_delivery_time_Valid() const;

    QDateTime getLatestDigestDeliveryTime() const;
    void setLatestDigestDeliveryTime(const QDateTime &latest_digest_delivery_time);
    bool is_latest_digest_delivery_time_Set() const;
    bool is_latest_digest_delivery_time_Valid() const;

    QString getLatestDigestDeliveryError() const;
    void setLatestDigestDeliveryError(const QString &latest_digest_delivery_error);
    bool is_latest_digest_delivery_error_Set() const;
    bool is_latest_digest_delivery_error_Valid() const;

    QString getLatestDeliveryAttemptTime() const;
    void setLatestDeliveryAttemptTime(const QString &latest_delivery_attempt_time);
    bool is_latest_delivery_attempt_time_Set() const;
    bool is_latest_delivery_attempt_time_Valid() const;

    QString getLatestNotificationAttemptTime() const;
    void setLatestNotificationAttemptTime(const QString &latest_notification_attempt_time);
    bool is_latest_notification_attempt_time_Set() const;
    bool is_latest_notification_attempt_time_Valid() const;

    QString getLatestNotificationAttemptSucceeded() const;
    void setLatestNotificationAttemptSucceeded(const QString &latest_notification_attempt_succeeded);
    bool is_latest_notification_attempt_succeeded_Set() const;
    bool is_latest_notification_attempt_succeeded_Valid() const;

    QString getLatestDeliveryAttemptSucceeded() const;
    void setLatestDeliveryAttemptSucceeded(const QString &latest_delivery_attempt_succeeded);
    bool is_latest_delivery_attempt_succeeded_Set() const;
    bool is_latest_delivery_attempt_succeeded_Valid() const;

    QString getTimeLoggingStarted() const;
    void setTimeLoggingStarted(const QString &time_logging_started);
    bool is_time_logging_started_Set() const;
    bool is_time_logging_started_Valid() const;

    QString getTimeLoggingStopped() const;
    void setTimeLoggingStopped(const QString &time_logging_stopped);
    bool is_time_logging_stopped_Set() const;
    bool is_time_logging_stopped_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_logging;
    bool m_is_logging_isSet;
    bool m_is_logging_isValid;

    QString m_latest_delivery_error;
    bool m_latest_delivery_error_isSet;
    bool m_latest_delivery_error_isValid;

    QString m_latest_notification_error;
    bool m_latest_notification_error_isSet;
    bool m_latest_notification_error_isValid;

    QDateTime m_latest_delivery_time;
    bool m_latest_delivery_time_isSet;
    bool m_latest_delivery_time_isValid;

    QDateTime m_latest_notification_time;
    bool m_latest_notification_time_isSet;
    bool m_latest_notification_time_isValid;

    QDateTime m_start_logging_time;
    bool m_start_logging_time_isSet;
    bool m_start_logging_time_isValid;

    QDateTime m_stop_logging_time;
    bool m_stop_logging_time_isSet;
    bool m_stop_logging_time_isValid;

    QString m_latest_cloud_watch_logs_delivery_error;
    bool m_latest_cloud_watch_logs_delivery_error_isSet;
    bool m_latest_cloud_watch_logs_delivery_error_isValid;

    QDateTime m_latest_cloud_watch_logs_delivery_time;
    bool m_latest_cloud_watch_logs_delivery_time_isSet;
    bool m_latest_cloud_watch_logs_delivery_time_isValid;

    QDateTime m_latest_digest_delivery_time;
    bool m_latest_digest_delivery_time_isSet;
    bool m_latest_digest_delivery_time_isValid;

    QString m_latest_digest_delivery_error;
    bool m_latest_digest_delivery_error_isSet;
    bool m_latest_digest_delivery_error_isValid;

    QString m_latest_delivery_attempt_time;
    bool m_latest_delivery_attempt_time_isSet;
    bool m_latest_delivery_attempt_time_isValid;

    QString m_latest_notification_attempt_time;
    bool m_latest_notification_attempt_time_isSet;
    bool m_latest_notification_attempt_time_isValid;

    QString m_latest_notification_attempt_succeeded;
    bool m_latest_notification_attempt_succeeded_isSet;
    bool m_latest_notification_attempt_succeeded_isValid;

    QString m_latest_delivery_attempt_succeeded;
    bool m_latest_delivery_attempt_succeeded_isSet;
    bool m_latest_delivery_attempt_succeeded_isValid;

    QString m_time_logging_started;
    bool m_time_logging_started_isSet;
    bool m_time_logging_started_isValid;

    QString m_time_logging_stopped;
    bool m_time_logging_stopped_isSet;
    bool m_time_logging_stopped_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTrailStatusResponse)

#endif // OAIGetTrailStatusResponse_H
