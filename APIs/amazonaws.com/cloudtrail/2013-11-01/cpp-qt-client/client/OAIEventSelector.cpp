/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSelector::OAIEventSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSelector::OAIEventSelector() {
    this->initializeModel();
}

OAIEventSelector::~OAIEventSelector() {}

void OAIEventSelector::initializeModel() {

    m_read_write_type_isSet = false;
    m_read_write_type_isValid = false;

    m_include_management_events_isSet = false;
    m_include_management_events_isValid = false;

    m_data_resources_isSet = false;
    m_data_resources_isValid = false;

    m_exclude_management_event_sources_isSet = false;
    m_exclude_management_event_sources_isValid = false;
}

void OAIEventSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSelector::fromJsonObject(QJsonObject json) {

    m_read_write_type_isValid = ::OpenAPI::fromJsonValue(m_read_write_type, json[QString("ReadWriteType")]);
    m_read_write_type_isSet = !json[QString("ReadWriteType")].isNull() && m_read_write_type_isValid;

    m_include_management_events_isValid = ::OpenAPI::fromJsonValue(m_include_management_events, json[QString("IncludeManagementEvents")]);
    m_include_management_events_isSet = !json[QString("IncludeManagementEvents")].isNull() && m_include_management_events_isValid;

    m_data_resources_isValid = ::OpenAPI::fromJsonValue(m_data_resources, json[QString("DataResources")]);
    m_data_resources_isSet = !json[QString("DataResources")].isNull() && m_data_resources_isValid;

    m_exclude_management_event_sources_isValid = ::OpenAPI::fromJsonValue(m_exclude_management_event_sources, json[QString("ExcludeManagementEventSources")]);
    m_exclude_management_event_sources_isSet = !json[QString("ExcludeManagementEventSources")].isNull() && m_exclude_management_event_sources_isValid;
}

QString OAIEventSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_read_write_type.isSet()) {
        obj.insert(QString("ReadWriteType"), ::OpenAPI::toJsonValue(m_read_write_type));
    }
    if (m_include_management_events_isSet) {
        obj.insert(QString("IncludeManagementEvents"), ::OpenAPI::toJsonValue(m_include_management_events));
    }
    if (m_data_resources.isSet()) {
        obj.insert(QString("DataResources"), ::OpenAPI::toJsonValue(m_data_resources));
    }
    if (m_exclude_management_event_sources.isSet()) {
        obj.insert(QString("ExcludeManagementEventSources"), ::OpenAPI::toJsonValue(m_exclude_management_event_sources));
    }
    return obj;
}

OAIReadWriteType OAIEventSelector::getReadWriteType() const {
    return m_read_write_type;
}
void OAIEventSelector::setReadWriteType(const OAIReadWriteType &read_write_type) {
    m_read_write_type = read_write_type;
    m_read_write_type_isSet = true;
}

bool OAIEventSelector::is_read_write_type_Set() const{
    return m_read_write_type_isSet;
}

bool OAIEventSelector::is_read_write_type_Valid() const{
    return m_read_write_type_isValid;
}

bool OAIEventSelector::getIncludeManagementEvents() const {
    return m_include_management_events;
}
void OAIEventSelector::setIncludeManagementEvents(const bool &include_management_events) {
    m_include_management_events = include_management_events;
    m_include_management_events_isSet = true;
}

bool OAIEventSelector::is_include_management_events_Set() const{
    return m_include_management_events_isSet;
}

bool OAIEventSelector::is_include_management_events_Valid() const{
    return m_include_management_events_isValid;
}

QList OAIEventSelector::getDataResources() const {
    return m_data_resources;
}
void OAIEventSelector::setDataResources(const QList &data_resources) {
    m_data_resources = data_resources;
    m_data_resources_isSet = true;
}

bool OAIEventSelector::is_data_resources_Set() const{
    return m_data_resources_isSet;
}

bool OAIEventSelector::is_data_resources_Valid() const{
    return m_data_resources_isValid;
}

QList OAIEventSelector::getExcludeManagementEventSources() const {
    return m_exclude_management_event_sources;
}
void OAIEventSelector::setExcludeManagementEventSources(const QList &exclude_management_event_sources) {
    m_exclude_management_event_sources = exclude_management_event_sources;
    m_exclude_management_event_sources_isSet = true;
}

bool OAIEventSelector::is_exclude_management_event_sources_Set() const{
    return m_exclude_management_event_sources_isSet;
}

bool OAIEventSelector::is_exclude_management_event_sources_Valid() const{
    return m_exclude_management_event_sources_isValid;
}

bool OAIEventSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_write_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_management_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_management_event_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
