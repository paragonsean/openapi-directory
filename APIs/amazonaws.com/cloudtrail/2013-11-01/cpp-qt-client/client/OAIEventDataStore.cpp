/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventDataStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventDataStore::OAIEventDataStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventDataStore::OAIEventDataStore() {
    this->initializeModel();
}

OAIEventDataStore::~OAIEventDataStore() {}

void OAIEventDataStore::initializeModel() {

    m_event_data_store_arn_isSet = false;
    m_event_data_store_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_termination_protection_enabled_isSet = false;
    m_termination_protection_enabled_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_advanced_event_selectors_isSet = false;
    m_advanced_event_selectors_isValid = false;

    m_multi_region_enabled_isSet = false;
    m_multi_region_enabled_isValid = false;

    m_organization_enabled_isSet = false;
    m_organization_enabled_isValid = false;

    m_retention_period_isSet = false;
    m_retention_period_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIEventDataStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventDataStore::fromJsonObject(QJsonObject json) {

    m_event_data_store_arn_isValid = ::OpenAPI::fromJsonValue(m_event_data_store_arn, json[QString("EventDataStoreArn")]);
    m_event_data_store_arn_isSet = !json[QString("EventDataStoreArn")].isNull() && m_event_data_store_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_termination_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_termination_protection_enabled, json[QString("TerminationProtectionEnabled")]);
    m_termination_protection_enabled_isSet = !json[QString("TerminationProtectionEnabled")].isNull() && m_termination_protection_enabled_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_advanced_event_selectors_isValid = ::OpenAPI::fromJsonValue(m_advanced_event_selectors, json[QString("AdvancedEventSelectors")]);
    m_advanced_event_selectors_isSet = !json[QString("AdvancedEventSelectors")].isNull() && m_advanced_event_selectors_isValid;

    m_multi_region_enabled_isValid = ::OpenAPI::fromJsonValue(m_multi_region_enabled, json[QString("MultiRegionEnabled")]);
    m_multi_region_enabled_isSet = !json[QString("MultiRegionEnabled")].isNull() && m_multi_region_enabled_isValid;

    m_organization_enabled_isValid = ::OpenAPI::fromJsonValue(m_organization_enabled, json[QString("OrganizationEnabled")]);
    m_organization_enabled_isSet = !json[QString("OrganizationEnabled")].isNull() && m_organization_enabled_isValid;

    m_retention_period_isValid = ::OpenAPI::fromJsonValue(m_retention_period, json[QString("RetentionPeriod")]);
    m_retention_period_isSet = !json[QString("RetentionPeriod")].isNull() && m_retention_period_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("UpdatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("UpdatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIEventDataStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventDataStore::asJsonObject() const {
    QJsonObject obj;
    if (m_event_data_store_arn_isSet) {
        obj.insert(QString("EventDataStoreArn"), ::OpenAPI::toJsonValue(m_event_data_store_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_termination_protection_enabled_isSet) {
        obj.insert(QString("TerminationProtectionEnabled"), ::OpenAPI::toJsonValue(m_termination_protection_enabled));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_advanced_event_selectors.isSet()) {
        obj.insert(QString("AdvancedEventSelectors"), ::OpenAPI::toJsonValue(m_advanced_event_selectors));
    }
    if (m_multi_region_enabled_isSet) {
        obj.insert(QString("MultiRegionEnabled"), ::OpenAPI::toJsonValue(m_multi_region_enabled));
    }
    if (m_organization_enabled_isSet) {
        obj.insert(QString("OrganizationEnabled"), ::OpenAPI::toJsonValue(m_organization_enabled));
    }
    if (m_retention_period_isSet) {
        obj.insert(QString("RetentionPeriod"), ::OpenAPI::toJsonValue(m_retention_period));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("UpdatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

QString OAIEventDataStore::getEventDataStoreArn() const {
    return m_event_data_store_arn;
}
void OAIEventDataStore::setEventDataStoreArn(const QString &event_data_store_arn) {
    m_event_data_store_arn = event_data_store_arn;
    m_event_data_store_arn_isSet = true;
}

bool OAIEventDataStore::is_event_data_store_arn_Set() const{
    return m_event_data_store_arn_isSet;
}

bool OAIEventDataStore::is_event_data_store_arn_Valid() const{
    return m_event_data_store_arn_isValid;
}

QString OAIEventDataStore::getName() const {
    return m_name;
}
void OAIEventDataStore::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventDataStore::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventDataStore::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEventDataStore::getTerminationProtectionEnabled() const {
    return m_termination_protection_enabled;
}
void OAIEventDataStore::setTerminationProtectionEnabled(const bool &termination_protection_enabled) {
    m_termination_protection_enabled = termination_protection_enabled;
    m_termination_protection_enabled_isSet = true;
}

bool OAIEventDataStore::is_termination_protection_enabled_Set() const{
    return m_termination_protection_enabled_isSet;
}

bool OAIEventDataStore::is_termination_protection_enabled_Valid() const{
    return m_termination_protection_enabled_isValid;
}

OAIEventDataStoreStatus OAIEventDataStore::getStatus() const {
    return m_status;
}
void OAIEventDataStore::setStatus(const OAIEventDataStoreStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEventDataStore::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEventDataStore::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIEventDataStore::getAdvancedEventSelectors() const {
    return m_advanced_event_selectors;
}
void OAIEventDataStore::setAdvancedEventSelectors(const QList &advanced_event_selectors) {
    m_advanced_event_selectors = advanced_event_selectors;
    m_advanced_event_selectors_isSet = true;
}

bool OAIEventDataStore::is_advanced_event_selectors_Set() const{
    return m_advanced_event_selectors_isSet;
}

bool OAIEventDataStore::is_advanced_event_selectors_Valid() const{
    return m_advanced_event_selectors_isValid;
}

bool OAIEventDataStore::getMultiRegionEnabled() const {
    return m_multi_region_enabled;
}
void OAIEventDataStore::setMultiRegionEnabled(const bool &multi_region_enabled) {
    m_multi_region_enabled = multi_region_enabled;
    m_multi_region_enabled_isSet = true;
}

bool OAIEventDataStore::is_multi_region_enabled_Set() const{
    return m_multi_region_enabled_isSet;
}

bool OAIEventDataStore::is_multi_region_enabled_Valid() const{
    return m_multi_region_enabled_isValid;
}

bool OAIEventDataStore::getOrganizationEnabled() const {
    return m_organization_enabled;
}
void OAIEventDataStore::setOrganizationEnabled(const bool &organization_enabled) {
    m_organization_enabled = organization_enabled;
    m_organization_enabled_isSet = true;
}

bool OAIEventDataStore::is_organization_enabled_Set() const{
    return m_organization_enabled_isSet;
}

bool OAIEventDataStore::is_organization_enabled_Valid() const{
    return m_organization_enabled_isValid;
}

qint32 OAIEventDataStore::getRetentionPeriod() const {
    return m_retention_period;
}
void OAIEventDataStore::setRetentionPeriod(const qint32 &retention_period) {
    m_retention_period = retention_period;
    m_retention_period_isSet = true;
}

bool OAIEventDataStore::is_retention_period_Set() const{
    return m_retention_period_isSet;
}

bool OAIEventDataStore::is_retention_period_Valid() const{
    return m_retention_period_isValid;
}

QDateTime OAIEventDataStore::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIEventDataStore::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIEventDataStore::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIEventDataStore::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIEventDataStore::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIEventDataStore::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIEventDataStore::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIEventDataStore::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIEventDataStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_data_store_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_event_selectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_region_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventDataStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
