/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportsListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportsListItem::OAIImportsListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportsListItem::OAIImportsListItem() {
    this->initializeModel();
}

OAIImportsListItem::~OAIImportsListItem() {}

void OAIImportsListItem::initializeModel() {

    m_import_id_isSet = false;
    m_import_id_isValid = false;

    m_import_status_isSet = false;
    m_import_status_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIImportsListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportsListItem::fromJsonObject(QJsonObject json) {

    m_import_id_isValid = ::OpenAPI::fromJsonValue(m_import_id, json[QString("ImportId")]);
    m_import_id_isSet = !json[QString("ImportId")].isNull() && m_import_id_isValid;

    m_import_status_isValid = ::OpenAPI::fromJsonValue(m_import_status, json[QString("ImportStatus")]);
    m_import_status_isSet = !json[QString("ImportStatus")].isNull() && m_import_status_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("UpdatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("UpdatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIImportsListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportsListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_import_id_isSet) {
        obj.insert(QString("ImportId"), ::OpenAPI::toJsonValue(m_import_id));
    }
    if (m_import_status.isSet()) {
        obj.insert(QString("ImportStatus"), ::OpenAPI::toJsonValue(m_import_status));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("UpdatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

QString OAIImportsListItem::getImportId() const {
    return m_import_id;
}
void OAIImportsListItem::setImportId(const QString &import_id) {
    m_import_id = import_id;
    m_import_id_isSet = true;
}

bool OAIImportsListItem::is_import_id_Set() const{
    return m_import_id_isSet;
}

bool OAIImportsListItem::is_import_id_Valid() const{
    return m_import_id_isValid;
}

OAIImportStatus OAIImportsListItem::getImportStatus() const {
    return m_import_status;
}
void OAIImportsListItem::setImportStatus(const OAIImportStatus &import_status) {
    m_import_status = import_status;
    m_import_status_isSet = true;
}

bool OAIImportsListItem::is_import_status_Set() const{
    return m_import_status_isSet;
}

bool OAIImportsListItem::is_import_status_Valid() const{
    return m_import_status_isValid;
}

QList OAIImportsListItem::getDestinations() const {
    return m_destinations;
}
void OAIImportsListItem::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIImportsListItem::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIImportsListItem::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QDateTime OAIImportsListItem::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIImportsListItem::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIImportsListItem::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIImportsListItem::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIImportsListItem::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIImportsListItem::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIImportsListItem::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIImportsListItem::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIImportsListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportsListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
