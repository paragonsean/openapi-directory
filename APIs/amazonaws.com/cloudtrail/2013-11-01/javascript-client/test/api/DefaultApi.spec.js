/**
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCloudTrail);
  }
}(this, function(expect, AwsCloudTrail) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCloudTrail.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addTags', function() {
      it('should call addTags successfully', function(done) {
        //uncomment below and update the code to test addTags
        //instance.addTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelQuery', function() {
      it('should call cancelQuery successfully', function(done) {
        //uncomment below and update the code to test cancelQuery
        //instance.cancelQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannel', function() {
      it('should call createChannel successfully', function(done) {
        //uncomment below and update the code to test createChannel
        //instance.createChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEventDataStore', function() {
      it('should call createEventDataStore successfully', function(done) {
        //uncomment below and update the code to test createEventDataStore
        //instance.createEventDataStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTrail', function() {
      it('should call createTrail successfully', function(done) {
        //uncomment below and update the code to test createTrail
        //instance.createTrail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannel', function() {
      it('should call deleteChannel successfully', function(done) {
        //uncomment below and update the code to test deleteChannel
        //instance.deleteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventDataStore', function() {
      it('should call deleteEventDataStore successfully', function(done) {
        //uncomment below and update the code to test deleteEventDataStore
        //instance.deleteEventDataStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourcePolicy', function() {
      it('should call deleteResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteResourcePolicy
        //instance.deleteResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTrail', function() {
      it('should call deleteTrail successfully', function(done) {
        //uncomment below and update the code to test deleteTrail
        //instance.deleteTrail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterOrganizationDelegatedAdmin', function() {
      it('should call deregisterOrganizationDelegatedAdmin successfully', function(done) {
        //uncomment below and update the code to test deregisterOrganizationDelegatedAdmin
        //instance.deregisterOrganizationDelegatedAdmin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeQuery', function() {
      it('should call describeQuery successfully', function(done) {
        //uncomment below and update the code to test describeQuery
        //instance.describeQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTrails', function() {
      it('should call describeTrails successfully', function(done) {
        //uncomment below and update the code to test describeTrails
        //instance.describeTrails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannel', function() {
      it('should call getChannel successfully', function(done) {
        //uncomment below and update the code to test getChannel
        //instance.getChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventDataStore', function() {
      it('should call getEventDataStore successfully', function(done) {
        //uncomment below and update the code to test getEventDataStore
        //instance.getEventDataStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventSelectors', function() {
      it('should call getEventSelectors successfully', function(done) {
        //uncomment below and update the code to test getEventSelectors
        //instance.getEventSelectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImport', function() {
      it('should call getImport successfully', function(done) {
        //uncomment below and update the code to test getImport
        //instance.getImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInsightSelectors', function() {
      it('should call getInsightSelectors successfully', function(done) {
        //uncomment below and update the code to test getInsightSelectors
        //instance.getInsightSelectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQueryResults', function() {
      it('should call getQueryResults successfully', function(done) {
        //uncomment below and update the code to test getQueryResults
        //instance.getQueryResults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourcePolicy', function() {
      it('should call getResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test getResourcePolicy
        //instance.getResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTrail', function() {
      it('should call getTrail successfully', function(done) {
        //uncomment below and update the code to test getTrail
        //instance.getTrail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTrailStatus', function() {
      it('should call getTrailStatus successfully', function(done) {
        //uncomment below and update the code to test getTrailStatus
        //instance.getTrailStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannels', function() {
      it('should call listChannels successfully', function(done) {
        //uncomment below and update the code to test listChannels
        //instance.listChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventDataStores', function() {
      it('should call listEventDataStores successfully', function(done) {
        //uncomment below and update the code to test listEventDataStores
        //instance.listEventDataStores(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImportFailures', function() {
      it('should call listImportFailures successfully', function(done) {
        //uncomment below and update the code to test listImportFailures
        //instance.listImportFailures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImports', function() {
      it('should call listImports successfully', function(done) {
        //uncomment below and update the code to test listImports
        //instance.listImports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPublicKeys', function() {
      it('should call listPublicKeys successfully', function(done) {
        //uncomment below and update the code to test listPublicKeys
        //instance.listPublicKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listQueries', function() {
      it('should call listQueries successfully', function(done) {
        //uncomment below and update the code to test listQueries
        //instance.listQueries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTags', function() {
      it('should call listTags successfully', function(done) {
        //uncomment below and update the code to test listTags
        //instance.listTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTrails', function() {
      it('should call listTrails successfully', function(done) {
        //uncomment below and update the code to test listTrails
        //instance.listTrails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lookupEvents', function() {
      it('should call lookupEvents successfully', function(done) {
        //uncomment below and update the code to test lookupEvents
        //instance.lookupEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putEventSelectors', function() {
      it('should call putEventSelectors successfully', function(done) {
        //uncomment below and update the code to test putEventSelectors
        //instance.putEventSelectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putInsightSelectors', function() {
      it('should call putInsightSelectors successfully', function(done) {
        //uncomment below and update the code to test putInsightSelectors
        //instance.putInsightSelectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResourcePolicy', function() {
      it('should call putResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test putResourcePolicy
        //instance.putResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerOrganizationDelegatedAdmin', function() {
      it('should call registerOrganizationDelegatedAdmin successfully', function(done) {
        //uncomment below and update the code to test registerOrganizationDelegatedAdmin
        //instance.registerOrganizationDelegatedAdmin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTags', function() {
      it('should call removeTags successfully', function(done) {
        //uncomment below and update the code to test removeTags
        //instance.removeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreEventDataStore', function() {
      it('should call restoreEventDataStore successfully', function(done) {
        //uncomment below and update the code to test restoreEventDataStore
        //instance.restoreEventDataStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startEventDataStoreIngestion', function() {
      it('should call startEventDataStoreIngestion successfully', function(done) {
        //uncomment below and update the code to test startEventDataStoreIngestion
        //instance.startEventDataStoreIngestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startImport', function() {
      it('should call startImport successfully', function(done) {
        //uncomment below and update the code to test startImport
        //instance.startImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startLogging', function() {
      it('should call startLogging successfully', function(done) {
        //uncomment below and update the code to test startLogging
        //instance.startLogging(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startQuery', function() {
      it('should call startQuery successfully', function(done) {
        //uncomment below and update the code to test startQuery
        //instance.startQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopEventDataStoreIngestion', function() {
      it('should call stopEventDataStoreIngestion successfully', function(done) {
        //uncomment below and update the code to test stopEventDataStoreIngestion
        //instance.stopEventDataStoreIngestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopImport', function() {
      it('should call stopImport successfully', function(done) {
        //uncomment below and update the code to test stopImport
        //instance.stopImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopLogging', function() {
      it('should call stopLogging successfully', function(done) {
        //uncomment below and update the code to test stopLogging
        //instance.stopLogging(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannel', function() {
      it('should call updateChannel successfully', function(done) {
        //uncomment below and update the code to test updateChannel
        //instance.updateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEventDataStore', function() {
      it('should call updateEventDataStore successfully', function(done) {
        //uncomment below and update the code to test updateEventDataStore
        //instance.updateEventDataStore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTrail', function() {
      it('should call updateTrail successfully', function(done) {
        //uncomment below and update the code to test updateTrail
        //instance.updateTrail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
