/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gets metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time in milliseconds, and the query&#39;s creation time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryStatisticsForDescribeQuery {
  public static final String SERIALIZED_NAME_EVENTS_MATCHED = "EventsMatched";
  @SerializedName(SERIALIZED_NAME_EVENTS_MATCHED)
  private Integer eventsMatched;

  public static final String SERIALIZED_NAME_EVENTS_SCANNED = "EventsScanned";
  @SerializedName(SERIALIZED_NAME_EVENTS_SCANNED)
  private Integer eventsScanned;

  public static final String SERIALIZED_NAME_BYTES_SCANNED = "BytesScanned";
  @SerializedName(SERIALIZED_NAME_BYTES_SCANNED)
  private Integer bytesScanned;

  public static final String SERIALIZED_NAME_EXECUTION_TIME_IN_MILLIS = "ExecutionTimeInMillis";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIME_IN_MILLIS)
  private Integer executionTimeInMillis;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public QueryStatisticsForDescribeQuery() {
  }

  public QueryStatisticsForDescribeQuery eventsMatched(Integer eventsMatched) {
    this.eventsMatched = eventsMatched;
    return this;
  }

  /**
   * Get eventsMatched
   * @return eventsMatched
   */
  @javax.annotation.Nullable
  public Integer getEventsMatched() {
    return eventsMatched;
  }

  public void setEventsMatched(Integer eventsMatched) {
    this.eventsMatched = eventsMatched;
  }


  public QueryStatisticsForDescribeQuery eventsScanned(Integer eventsScanned) {
    this.eventsScanned = eventsScanned;
    return this;
  }

  /**
   * Get eventsScanned
   * @return eventsScanned
   */
  @javax.annotation.Nullable
  public Integer getEventsScanned() {
    return eventsScanned;
  }

  public void setEventsScanned(Integer eventsScanned) {
    this.eventsScanned = eventsScanned;
  }


  public QueryStatisticsForDescribeQuery bytesScanned(Integer bytesScanned) {
    this.bytesScanned = bytesScanned;
    return this;
  }

  /**
   * Get bytesScanned
   * @return bytesScanned
   */
  @javax.annotation.Nullable
  public Integer getBytesScanned() {
    return bytesScanned;
  }

  public void setBytesScanned(Integer bytesScanned) {
    this.bytesScanned = bytesScanned;
  }


  public QueryStatisticsForDescribeQuery executionTimeInMillis(Integer executionTimeInMillis) {
    this.executionTimeInMillis = executionTimeInMillis;
    return this;
  }

  /**
   * Get executionTimeInMillis
   * @return executionTimeInMillis
   */
  @javax.annotation.Nullable
  public Integer getExecutionTimeInMillis() {
    return executionTimeInMillis;
  }

  public void setExecutionTimeInMillis(Integer executionTimeInMillis) {
    this.executionTimeInMillis = executionTimeInMillis;
  }


  public QueryStatisticsForDescribeQuery creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryStatisticsForDescribeQuery queryStatisticsForDescribeQuery = (QueryStatisticsForDescribeQuery) o;
    return Objects.equals(this.eventsMatched, queryStatisticsForDescribeQuery.eventsMatched) &&
        Objects.equals(this.eventsScanned, queryStatisticsForDescribeQuery.eventsScanned) &&
        Objects.equals(this.bytesScanned, queryStatisticsForDescribeQuery.bytesScanned) &&
        Objects.equals(this.executionTimeInMillis, queryStatisticsForDescribeQuery.executionTimeInMillis) &&
        Objects.equals(this.creationTime, queryStatisticsForDescribeQuery.creationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventsMatched, eventsScanned, bytesScanned, executionTimeInMillis, creationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryStatisticsForDescribeQuery {\n");
    sb.append("    eventsMatched: ").append(toIndentedString(eventsMatched)).append("\n");
    sb.append("    eventsScanned: ").append(toIndentedString(eventsScanned)).append("\n");
    sb.append("    bytesScanned: ").append(toIndentedString(bytesScanned)).append("\n");
    sb.append("    executionTimeInMillis: ").append(toIndentedString(executionTimeInMillis)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventsMatched");
    openapiFields.add("EventsScanned");
    openapiFields.add("BytesScanned");
    openapiFields.add("ExecutionTimeInMillis");
    openapiFields.add("CreationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryStatisticsForDescribeQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryStatisticsForDescribeQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryStatisticsForDescribeQuery is not found in the empty JSON string", QueryStatisticsForDescribeQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryStatisticsForDescribeQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryStatisticsForDescribeQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EventsMatched`
      if (jsonObj.get("EventsMatched") != null && !jsonObj.get("EventsMatched").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EventsMatched"));
      }
      // validate the optional field `EventsScanned`
      if (jsonObj.get("EventsScanned") != null && !jsonObj.get("EventsScanned").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EventsScanned"));
      }
      // validate the optional field `BytesScanned`
      if (jsonObj.get("BytesScanned") != null && !jsonObj.get("BytesScanned").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BytesScanned"));
      }
      // validate the optional field `ExecutionTimeInMillis`
      if (jsonObj.get("ExecutionTimeInMillis") != null && !jsonObj.get("ExecutionTimeInMillis").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ExecutionTimeInMillis"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryStatisticsForDescribeQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryStatisticsForDescribeQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryStatisticsForDescribeQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryStatisticsForDescribeQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryStatisticsForDescribeQuery>() {
           @Override
           public void write(JsonWriter out, QueryStatisticsForDescribeQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryStatisticsForDescribeQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryStatisticsForDescribeQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryStatisticsForDescribeQuery
   * @throws IOException if the JSON string is invalid with respect to QueryStatisticsForDescribeQuery
   */
  public static QueryStatisticsForDescribeQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryStatisticsForDescribeQuery.class);
  }

  /**
   * Convert an instance of QueryStatisticsForDescribeQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

