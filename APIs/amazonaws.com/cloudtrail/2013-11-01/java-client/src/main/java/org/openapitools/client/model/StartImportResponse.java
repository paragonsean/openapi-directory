/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImportStatus;
import org.openapitools.client.model.StartImportResponseImportSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartImportResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartImportResponse {
  public static final String SERIALIZED_NAME_IMPORT_ID = "ImportId";
  @SerializedName(SERIALIZED_NAME_IMPORT_ID)
  private String importId;

  public static final String SERIALIZED_NAME_DESTINATIONS = "Destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List destinations;

  public static final String SERIALIZED_NAME_IMPORT_SOURCE = "ImportSource";
  @SerializedName(SERIALIZED_NAME_IMPORT_SOURCE)
  private StartImportResponseImportSource importSource;

  public static final String SERIALIZED_NAME_START_EVENT_TIME = "StartEventTime";
  @SerializedName(SERIALIZED_NAME_START_EVENT_TIME)
  private OffsetDateTime startEventTime;

  public static final String SERIALIZED_NAME_END_EVENT_TIME = "EndEventTime";
  @SerializedName(SERIALIZED_NAME_END_EVENT_TIME)
  private OffsetDateTime endEventTime;

  public static final String SERIALIZED_NAME_IMPORT_STATUS = "ImportStatus";
  @SerializedName(SERIALIZED_NAME_IMPORT_STATUS)
  private ImportStatus importStatus;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "UpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public StartImportResponse() {
  }

  public StartImportResponse importId(String importId) {
    this.importId = importId;
    return this;
  }

  /**
   * Get importId
   * @return importId
   */
  @javax.annotation.Nullable
  public String getImportId() {
    return importId;
  }

  public void setImportId(String importId) {
    this.importId = importId;
  }


  public StartImportResponse destinations(List destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nullable
  public List getDestinations() {
    return destinations;
  }

  public void setDestinations(List destinations) {
    this.destinations = destinations;
  }


  public StartImportResponse importSource(StartImportResponseImportSource importSource) {
    this.importSource = importSource;
    return this;
  }

  /**
   * Get importSource
   * @return importSource
   */
  @javax.annotation.Nullable
  public StartImportResponseImportSource getImportSource() {
    return importSource;
  }

  public void setImportSource(StartImportResponseImportSource importSource) {
    this.importSource = importSource;
  }


  public StartImportResponse startEventTime(OffsetDateTime startEventTime) {
    this.startEventTime = startEventTime;
    return this;
  }

  /**
   * Get startEventTime
   * @return startEventTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartEventTime() {
    return startEventTime;
  }

  public void setStartEventTime(OffsetDateTime startEventTime) {
    this.startEventTime = startEventTime;
  }


  public StartImportResponse endEventTime(OffsetDateTime endEventTime) {
    this.endEventTime = endEventTime;
    return this;
  }

  /**
   * Get endEventTime
   * @return endEventTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndEventTime() {
    return endEventTime;
  }

  public void setEndEventTime(OffsetDateTime endEventTime) {
    this.endEventTime = endEventTime;
  }


  public StartImportResponse importStatus(ImportStatus importStatus) {
    this.importStatus = importStatus;
    return this;
  }

  /**
   * Get importStatus
   * @return importStatus
   */
  @javax.annotation.Nullable
  public ImportStatus getImportStatus() {
    return importStatus;
  }

  public void setImportStatus(ImportStatus importStatus) {
    this.importStatus = importStatus;
  }


  public StartImportResponse createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public StartImportResponse updatedTimestamp(OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

  /**
   * Get updatedTimestamp
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartImportResponse startImportResponse = (StartImportResponse) o;
    return Objects.equals(this.importId, startImportResponse.importId) &&
        Objects.equals(this.destinations, startImportResponse.destinations) &&
        Objects.equals(this.importSource, startImportResponse.importSource) &&
        Objects.equals(this.startEventTime, startImportResponse.startEventTime) &&
        Objects.equals(this.endEventTime, startImportResponse.endEventTime) &&
        Objects.equals(this.importStatus, startImportResponse.importStatus) &&
        Objects.equals(this.createdTimestamp, startImportResponse.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, startImportResponse.updatedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(importId, destinations, importSource, startEventTime, endEventTime, importStatus, createdTimestamp, updatedTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartImportResponse {\n");
    sb.append("    importId: ").append(toIndentedString(importId)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    importSource: ").append(toIndentedString(importSource)).append("\n");
    sb.append("    startEventTime: ").append(toIndentedString(startEventTime)).append("\n");
    sb.append("    endEventTime: ").append(toIndentedString(endEventTime)).append("\n");
    sb.append("    importStatus: ").append(toIndentedString(importStatus)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ImportId");
    openapiFields.add("Destinations");
    openapiFields.add("ImportSource");
    openapiFields.add("StartEventTime");
    openapiFields.add("EndEventTime");
    openapiFields.add("ImportStatus");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("UpdatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartImportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartImportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartImportResponse is not found in the empty JSON string", StartImportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartImportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartImportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ImportId`
      if (jsonObj.get("ImportId") != null && !jsonObj.get("ImportId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImportId"));
      }
      // validate the optional field `Destinations`
      if (jsonObj.get("Destinations") != null && !jsonObj.get("Destinations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Destinations"));
      }
      // validate the optional field `ImportSource`
      if (jsonObj.get("ImportSource") != null && !jsonObj.get("ImportSource").isJsonNull()) {
        StartImportResponseImportSource.validateJsonElement(jsonObj.get("ImportSource"));
      }
      // validate the optional field `StartEventTime`
      if (jsonObj.get("StartEventTime") != null && !jsonObj.get("StartEventTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartEventTime"));
      }
      // validate the optional field `EndEventTime`
      if (jsonObj.get("EndEventTime") != null && !jsonObj.get("EndEventTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndEventTime"));
      }
      // validate the optional field `ImportStatus`
      if (jsonObj.get("ImportStatus") != null && !jsonObj.get("ImportStatus").isJsonNull()) {
        ImportStatus.validateJsonElement(jsonObj.get("ImportStatus"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `UpdatedTimestamp`
      if (jsonObj.get("UpdatedTimestamp") != null && !jsonObj.get("UpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartImportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartImportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartImportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartImportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<StartImportResponse>() {
           @Override
           public void write(JsonWriter out, StartImportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartImportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartImportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartImportResponse
   * @throws IOException if the JSON string is invalid with respect to StartImportResponse
   */
  public static StartImportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartImportResponse.class);
  }

  /**
   * Convert an instance of StartImportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

