/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetChannelResponseIngestionStatus;
import org.openapitools.client.model.GetChannelResponseSourceConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetChannelResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetChannelResponse {
  public static final String SERIALIZED_NAME_CHANNEL_ARN = "ChannelArn";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ARN)
  private String channelArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_CONFIG = "SourceConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONFIG)
  private GetChannelResponseSourceConfig sourceConfig;

  public static final String SERIALIZED_NAME_DESTINATIONS = "Destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List destinations;

  public static final String SERIALIZED_NAME_INGESTION_STATUS = "IngestionStatus";
  @SerializedName(SERIALIZED_NAME_INGESTION_STATUS)
  private GetChannelResponseIngestionStatus ingestionStatus;

  public GetChannelResponse() {
  }

  public GetChannelResponse channelArn(String channelArn) {
    this.channelArn = channelArn;
    return this;
  }

  /**
   * Get channelArn
   * @return channelArn
   */
  @javax.annotation.Nullable
  public String getChannelArn() {
    return channelArn;
  }

  public void setChannelArn(String channelArn) {
    this.channelArn = channelArn;
  }


  public GetChannelResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetChannelResponse source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public GetChannelResponse sourceConfig(GetChannelResponseSourceConfig sourceConfig) {
    this.sourceConfig = sourceConfig;
    return this;
  }

  /**
   * Get sourceConfig
   * @return sourceConfig
   */
  @javax.annotation.Nullable
  public GetChannelResponseSourceConfig getSourceConfig() {
    return sourceConfig;
  }

  public void setSourceConfig(GetChannelResponseSourceConfig sourceConfig) {
    this.sourceConfig = sourceConfig;
  }


  public GetChannelResponse destinations(List destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nullable
  public List getDestinations() {
    return destinations;
  }

  public void setDestinations(List destinations) {
    this.destinations = destinations;
  }


  public GetChannelResponse ingestionStatus(GetChannelResponseIngestionStatus ingestionStatus) {
    this.ingestionStatus = ingestionStatus;
    return this;
  }

  /**
   * Get ingestionStatus
   * @return ingestionStatus
   */
  @javax.annotation.Nullable
  public GetChannelResponseIngestionStatus getIngestionStatus() {
    return ingestionStatus;
  }

  public void setIngestionStatus(GetChannelResponseIngestionStatus ingestionStatus) {
    this.ingestionStatus = ingestionStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetChannelResponse getChannelResponse = (GetChannelResponse) o;
    return Objects.equals(this.channelArn, getChannelResponse.channelArn) &&
        Objects.equals(this.name, getChannelResponse.name) &&
        Objects.equals(this.source, getChannelResponse.source) &&
        Objects.equals(this.sourceConfig, getChannelResponse.sourceConfig) &&
        Objects.equals(this.destinations, getChannelResponse.destinations) &&
        Objects.equals(this.ingestionStatus, getChannelResponse.ingestionStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelArn, name, source, sourceConfig, destinations, ingestionStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetChannelResponse {\n");
    sb.append("    channelArn: ").append(toIndentedString(channelArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceConfig: ").append(toIndentedString(sourceConfig)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    ingestionStatus: ").append(toIndentedString(ingestionStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelArn");
    openapiFields.add("Name");
    openapiFields.add("Source");
    openapiFields.add("SourceConfig");
    openapiFields.add("Destinations");
    openapiFields.add("IngestionStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetChannelResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetChannelResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetChannelResponse is not found in the empty JSON string", GetChannelResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetChannelResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetChannelResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelArn`
      if (jsonObj.get("ChannelArn") != null && !jsonObj.get("ChannelArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelArn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Source`
      if (jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Source"));
      }
      // validate the optional field `SourceConfig`
      if (jsonObj.get("SourceConfig") != null && !jsonObj.get("SourceConfig").isJsonNull()) {
        GetChannelResponseSourceConfig.validateJsonElement(jsonObj.get("SourceConfig"));
      }
      // validate the optional field `Destinations`
      if (jsonObj.get("Destinations") != null && !jsonObj.get("Destinations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Destinations"));
      }
      // validate the optional field `IngestionStatus`
      if (jsonObj.get("IngestionStatus") != null && !jsonObj.get("IngestionStatus").isJsonNull()) {
        GetChannelResponseIngestionStatus.validateJsonElement(jsonObj.get("IngestionStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetChannelResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetChannelResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetChannelResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetChannelResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetChannelResponse>() {
           @Override
           public void write(JsonWriter out, GetChannelResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetChannelResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetChannelResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetChannelResponse
   * @throws IOException if the JSON string is invalid with respect to GetChannelResponse
   */
  public static GetChannelResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetChannelResponse.class);
  }

  /**
   * Convert an instance of GetChannelResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

