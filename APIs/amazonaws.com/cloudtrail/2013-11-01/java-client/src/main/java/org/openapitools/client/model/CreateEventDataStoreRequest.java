/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEventDataStoreRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEventDataStoreRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ADVANCED_EVENT_SELECTORS = "AdvancedEventSelectors";
  @SerializedName(SERIALIZED_NAME_ADVANCED_EVENT_SELECTORS)
  private List advancedEventSelectors;

  public static final String SERIALIZED_NAME_MULTI_REGION_ENABLED = "MultiRegionEnabled";
  @SerializedName(SERIALIZED_NAME_MULTI_REGION_ENABLED)
  private Boolean multiRegionEnabled;

  public static final String SERIALIZED_NAME_ORGANIZATION_ENABLED = "OrganizationEnabled";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ENABLED)
  private Boolean organizationEnabled;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD = "RetentionPeriod";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD)
  private Integer retentionPeriod;

  public static final String SERIALIZED_NAME_TERMINATION_PROTECTION_ENABLED = "TerminationProtectionEnabled";
  @SerializedName(SERIALIZED_NAME_TERMINATION_PROTECTION_ENABLED)
  private Boolean terminationProtectionEnabled;

  public static final String SERIALIZED_NAME_TAGS_LIST = "TagsList";
  @SerializedName(SERIALIZED_NAME_TAGS_LIST)
  private List<Tag> tagsList = new ArrayList<>();

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_START_INGESTION = "StartIngestion";
  @SerializedName(SERIALIZED_NAME_START_INGESTION)
  private Boolean startIngestion;

  public CreateEventDataStoreRequest() {
  }

  public CreateEventDataStoreRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateEventDataStoreRequest advancedEventSelectors(List advancedEventSelectors) {
    this.advancedEventSelectors = advancedEventSelectors;
    return this;
  }

  /**
   * Get advancedEventSelectors
   * @return advancedEventSelectors
   */
  @javax.annotation.Nullable
  public List getAdvancedEventSelectors() {
    return advancedEventSelectors;
  }

  public void setAdvancedEventSelectors(List advancedEventSelectors) {
    this.advancedEventSelectors = advancedEventSelectors;
  }


  public CreateEventDataStoreRequest multiRegionEnabled(Boolean multiRegionEnabled) {
    this.multiRegionEnabled = multiRegionEnabled;
    return this;
  }

  /**
   * Get multiRegionEnabled
   * @return multiRegionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMultiRegionEnabled() {
    return multiRegionEnabled;
  }

  public void setMultiRegionEnabled(Boolean multiRegionEnabled) {
    this.multiRegionEnabled = multiRegionEnabled;
  }


  public CreateEventDataStoreRequest organizationEnabled(Boolean organizationEnabled) {
    this.organizationEnabled = organizationEnabled;
    return this;
  }

  /**
   * Get organizationEnabled
   * @return organizationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOrganizationEnabled() {
    return organizationEnabled;
  }

  public void setOrganizationEnabled(Boolean organizationEnabled) {
    this.organizationEnabled = organizationEnabled;
  }


  public CreateEventDataStoreRequest retentionPeriod(Integer retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return this;
  }

  /**
   * Get retentionPeriod
   * @return retentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getRetentionPeriod() {
    return retentionPeriod;
  }

  public void setRetentionPeriod(Integer retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
  }


  public CreateEventDataStoreRequest terminationProtectionEnabled(Boolean terminationProtectionEnabled) {
    this.terminationProtectionEnabled = terminationProtectionEnabled;
    return this;
  }

  /**
   * Get terminationProtectionEnabled
   * @return terminationProtectionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTerminationProtectionEnabled() {
    return terminationProtectionEnabled;
  }

  public void setTerminationProtectionEnabled(Boolean terminationProtectionEnabled) {
    this.terminationProtectionEnabled = terminationProtectionEnabled;
  }


  public CreateEventDataStoreRequest tagsList(List<Tag> tagsList) {
    this.tagsList = tagsList;
    return this;
  }

  public CreateEventDataStoreRequest addTagsListItem(Tag tagsListItem) {
    if (this.tagsList == null) {
      this.tagsList = new ArrayList<>();
    }
    this.tagsList.add(tagsListItem);
    return this;
  }

  /**
   * A list of tags.
   * @return tagsList
   */
  @javax.annotation.Nullable
  public List<Tag> getTagsList() {
    return tagsList;
  }

  public void setTagsList(List<Tag> tagsList) {
    this.tagsList = tagsList;
  }


  public CreateEventDataStoreRequest kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public CreateEventDataStoreRequest startIngestion(Boolean startIngestion) {
    this.startIngestion = startIngestion;
    return this;
  }

  /**
   * Get startIngestion
   * @return startIngestion
   */
  @javax.annotation.Nullable
  public Boolean getStartIngestion() {
    return startIngestion;
  }

  public void setStartIngestion(Boolean startIngestion) {
    this.startIngestion = startIngestion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEventDataStoreRequest createEventDataStoreRequest = (CreateEventDataStoreRequest) o;
    return Objects.equals(this.name, createEventDataStoreRequest.name) &&
        Objects.equals(this.advancedEventSelectors, createEventDataStoreRequest.advancedEventSelectors) &&
        Objects.equals(this.multiRegionEnabled, createEventDataStoreRequest.multiRegionEnabled) &&
        Objects.equals(this.organizationEnabled, createEventDataStoreRequest.organizationEnabled) &&
        Objects.equals(this.retentionPeriod, createEventDataStoreRequest.retentionPeriod) &&
        Objects.equals(this.terminationProtectionEnabled, createEventDataStoreRequest.terminationProtectionEnabled) &&
        Objects.equals(this.tagsList, createEventDataStoreRequest.tagsList) &&
        Objects.equals(this.kmsKeyId, createEventDataStoreRequest.kmsKeyId) &&
        Objects.equals(this.startIngestion, createEventDataStoreRequest.startIngestion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, advancedEventSelectors, multiRegionEnabled, organizationEnabled, retentionPeriod, terminationProtectionEnabled, tagsList, kmsKeyId, startIngestion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEventDataStoreRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    advancedEventSelectors: ").append(toIndentedString(advancedEventSelectors)).append("\n");
    sb.append("    multiRegionEnabled: ").append(toIndentedString(multiRegionEnabled)).append("\n");
    sb.append("    organizationEnabled: ").append(toIndentedString(organizationEnabled)).append("\n");
    sb.append("    retentionPeriod: ").append(toIndentedString(retentionPeriod)).append("\n");
    sb.append("    terminationProtectionEnabled: ").append(toIndentedString(terminationProtectionEnabled)).append("\n");
    sb.append("    tagsList: ").append(toIndentedString(tagsList)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    startIngestion: ").append(toIndentedString(startIngestion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("AdvancedEventSelectors");
    openapiFields.add("MultiRegionEnabled");
    openapiFields.add("OrganizationEnabled");
    openapiFields.add("RetentionPeriod");
    openapiFields.add("TerminationProtectionEnabled");
    openapiFields.add("TagsList");
    openapiFields.add("KmsKeyId");
    openapiFields.add("StartIngestion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEventDataStoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEventDataStoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEventDataStoreRequest is not found in the empty JSON string", CreateEventDataStoreRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEventDataStoreRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEventDataStoreRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEventDataStoreRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `AdvancedEventSelectors`
      if (jsonObj.get("AdvancedEventSelectors") != null && !jsonObj.get("AdvancedEventSelectors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdvancedEventSelectors"));
      }
      // validate the optional field `MultiRegionEnabled`
      if (jsonObj.get("MultiRegionEnabled") != null && !jsonObj.get("MultiRegionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MultiRegionEnabled"));
      }
      // validate the optional field `OrganizationEnabled`
      if (jsonObj.get("OrganizationEnabled") != null && !jsonObj.get("OrganizationEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("OrganizationEnabled"));
      }
      // validate the optional field `RetentionPeriod`
      if (jsonObj.get("RetentionPeriod") != null && !jsonObj.get("RetentionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RetentionPeriod"));
      }
      // validate the optional field `TerminationProtectionEnabled`
      if (jsonObj.get("TerminationProtectionEnabled") != null && !jsonObj.get("TerminationProtectionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TerminationProtectionEnabled"));
      }
      if (jsonObj.get("TagsList") != null && !jsonObj.get("TagsList").isJsonNull()) {
        JsonArray jsonArraytagsList = jsonObj.getAsJsonArray("TagsList");
        if (jsonArraytagsList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TagsList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TagsList` to be an array in the JSON string but got `%s`", jsonObj.get("TagsList").toString()));
          }

          // validate the optional field `TagsList` (array)
          for (int i = 0; i < jsonArraytagsList.size(); i++) {
            Tag.validateJsonElement(jsonArraytagsList.get(i));
          };
        }
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `StartIngestion`
      if (jsonObj.get("StartIngestion") != null && !jsonObj.get("StartIngestion").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("StartIngestion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEventDataStoreRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEventDataStoreRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEventDataStoreRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEventDataStoreRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEventDataStoreRequest>() {
           @Override
           public void write(JsonWriter out, CreateEventDataStoreRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEventDataStoreRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEventDataStoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEventDataStoreRequest
   * @throws IOException if the JSON string is invalid with respect to CreateEventDataStoreRequest
   */
  public static CreateEventDataStoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEventDataStoreRequest.class);
  }

  /**
   * Convert an instance of CreateEventDataStoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

