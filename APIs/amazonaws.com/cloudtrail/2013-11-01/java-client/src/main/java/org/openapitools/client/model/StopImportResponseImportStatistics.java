/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StopImportResponseImportStatistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StopImportResponseImportStatistics {
  public static final String SERIALIZED_NAME_PREFIXES_FOUND = "PrefixesFound";
  @SerializedName(SERIALIZED_NAME_PREFIXES_FOUND)
  private Integer prefixesFound;

  public static final String SERIALIZED_NAME_PREFIXES_COMPLETED = "PrefixesCompleted";
  @SerializedName(SERIALIZED_NAME_PREFIXES_COMPLETED)
  private Integer prefixesCompleted;

  public static final String SERIALIZED_NAME_FILES_COMPLETED = "FilesCompleted";
  @SerializedName(SERIALIZED_NAME_FILES_COMPLETED)
  private Integer filesCompleted;

  public static final String SERIALIZED_NAME_EVENTS_COMPLETED = "EventsCompleted";
  @SerializedName(SERIALIZED_NAME_EVENTS_COMPLETED)
  private Integer eventsCompleted;

  public static final String SERIALIZED_NAME_FAILED_ENTRIES = "FailedEntries";
  @SerializedName(SERIALIZED_NAME_FAILED_ENTRIES)
  private Integer failedEntries;

  public StopImportResponseImportStatistics() {
  }

  public StopImportResponseImportStatistics prefixesFound(Integer prefixesFound) {
    this.prefixesFound = prefixesFound;
    return this;
  }

  /**
   * Get prefixesFound
   * @return prefixesFound
   */
  @javax.annotation.Nullable
  public Integer getPrefixesFound() {
    return prefixesFound;
  }

  public void setPrefixesFound(Integer prefixesFound) {
    this.prefixesFound = prefixesFound;
  }


  public StopImportResponseImportStatistics prefixesCompleted(Integer prefixesCompleted) {
    this.prefixesCompleted = prefixesCompleted;
    return this;
  }

  /**
   * Get prefixesCompleted
   * @return prefixesCompleted
   */
  @javax.annotation.Nullable
  public Integer getPrefixesCompleted() {
    return prefixesCompleted;
  }

  public void setPrefixesCompleted(Integer prefixesCompleted) {
    this.prefixesCompleted = prefixesCompleted;
  }


  public StopImportResponseImportStatistics filesCompleted(Integer filesCompleted) {
    this.filesCompleted = filesCompleted;
    return this;
  }

  /**
   * Get filesCompleted
   * @return filesCompleted
   */
  @javax.annotation.Nullable
  public Integer getFilesCompleted() {
    return filesCompleted;
  }

  public void setFilesCompleted(Integer filesCompleted) {
    this.filesCompleted = filesCompleted;
  }


  public StopImportResponseImportStatistics eventsCompleted(Integer eventsCompleted) {
    this.eventsCompleted = eventsCompleted;
    return this;
  }

  /**
   * Get eventsCompleted
   * @return eventsCompleted
   */
  @javax.annotation.Nullable
  public Integer getEventsCompleted() {
    return eventsCompleted;
  }

  public void setEventsCompleted(Integer eventsCompleted) {
    this.eventsCompleted = eventsCompleted;
  }


  public StopImportResponseImportStatistics failedEntries(Integer failedEntries) {
    this.failedEntries = failedEntries;
    return this;
  }

  /**
   * Get failedEntries
   * @return failedEntries
   */
  @javax.annotation.Nullable
  public Integer getFailedEntries() {
    return failedEntries;
  }

  public void setFailedEntries(Integer failedEntries) {
    this.failedEntries = failedEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopImportResponseImportStatistics stopImportResponseImportStatistics = (StopImportResponseImportStatistics) o;
    return Objects.equals(this.prefixesFound, stopImportResponseImportStatistics.prefixesFound) &&
        Objects.equals(this.prefixesCompleted, stopImportResponseImportStatistics.prefixesCompleted) &&
        Objects.equals(this.filesCompleted, stopImportResponseImportStatistics.filesCompleted) &&
        Objects.equals(this.eventsCompleted, stopImportResponseImportStatistics.eventsCompleted) &&
        Objects.equals(this.failedEntries, stopImportResponseImportStatistics.failedEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefixesFound, prefixesCompleted, filesCompleted, eventsCompleted, failedEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopImportResponseImportStatistics {\n");
    sb.append("    prefixesFound: ").append(toIndentedString(prefixesFound)).append("\n");
    sb.append("    prefixesCompleted: ").append(toIndentedString(prefixesCompleted)).append("\n");
    sb.append("    filesCompleted: ").append(toIndentedString(filesCompleted)).append("\n");
    sb.append("    eventsCompleted: ").append(toIndentedString(eventsCompleted)).append("\n");
    sb.append("    failedEntries: ").append(toIndentedString(failedEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PrefixesFound");
    openapiFields.add("PrefixesCompleted");
    openapiFields.add("FilesCompleted");
    openapiFields.add("EventsCompleted");
    openapiFields.add("FailedEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StopImportResponseImportStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StopImportResponseImportStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StopImportResponseImportStatistics is not found in the empty JSON string", StopImportResponseImportStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StopImportResponseImportStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StopImportResponseImportStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PrefixesFound`
      if (jsonObj.get("PrefixesFound") != null && !jsonObj.get("PrefixesFound").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PrefixesFound"));
      }
      // validate the optional field `PrefixesCompleted`
      if (jsonObj.get("PrefixesCompleted") != null && !jsonObj.get("PrefixesCompleted").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PrefixesCompleted"));
      }
      // validate the optional field `FilesCompleted`
      if (jsonObj.get("FilesCompleted") != null && !jsonObj.get("FilesCompleted").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FilesCompleted"));
      }
      // validate the optional field `EventsCompleted`
      if (jsonObj.get("EventsCompleted") != null && !jsonObj.get("EventsCompleted").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EventsCompleted"));
      }
      // validate the optional field `FailedEntries`
      if (jsonObj.get("FailedEntries") != null && !jsonObj.get("FailedEntries").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedEntries"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StopImportResponseImportStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StopImportResponseImportStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StopImportResponseImportStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StopImportResponseImportStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<StopImportResponseImportStatistics>() {
           @Override
           public void write(JsonWriter out, StopImportResponseImportStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StopImportResponseImportStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StopImportResponseImportStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StopImportResponseImportStatistics
   * @throws IOException if the JSON string is invalid with respect to StopImportResponseImportStatistics
   */
  public static StopImportResponseImportStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StopImportResponseImportStatistics.class);
  }

  /**
   * Convert an instance of StopImportResponseImportStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

