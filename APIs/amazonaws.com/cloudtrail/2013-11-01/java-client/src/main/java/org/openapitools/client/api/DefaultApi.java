/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTagsRequest;
import org.openapitools.client.model.CancelQueryRequest;
import org.openapitools.client.model.CancelQueryResponse;
import org.openapitools.client.model.CreateChannelRequest;
import org.openapitools.client.model.CreateChannelResponse;
import org.openapitools.client.model.CreateEventDataStoreRequest;
import org.openapitools.client.model.CreateEventDataStoreResponse;
import org.openapitools.client.model.CreateTrailRequest;
import org.openapitools.client.model.CreateTrailResponse;
import org.openapitools.client.model.DeleteChannelRequest;
import org.openapitools.client.model.DeleteEventDataStoreRequest;
import org.openapitools.client.model.DeleteResourcePolicyRequest;
import org.openapitools.client.model.DeleteTrailRequest;
import org.openapitools.client.model.DeregisterOrganizationDelegatedAdminRequest;
import org.openapitools.client.model.DescribeQueryRequest;
import org.openapitools.client.model.DescribeQueryResponse;
import org.openapitools.client.model.DescribeTrailsRequest;
import org.openapitools.client.model.DescribeTrailsResponse;
import org.openapitools.client.model.GetChannelRequest;
import org.openapitools.client.model.GetChannelResponse;
import org.openapitools.client.model.GetEventDataStoreRequest;
import org.openapitools.client.model.GetEventDataStoreResponse;
import org.openapitools.client.model.GetEventSelectorsRequest;
import org.openapitools.client.model.GetEventSelectorsResponse;
import org.openapitools.client.model.GetImportRequest;
import org.openapitools.client.model.GetImportResponse;
import org.openapitools.client.model.GetInsightSelectorsRequest;
import org.openapitools.client.model.GetInsightSelectorsResponse;
import org.openapitools.client.model.GetQueryResultsRequest;
import org.openapitools.client.model.GetQueryResultsResponse;
import org.openapitools.client.model.GetResourcePolicyRequest;
import org.openapitools.client.model.GetResourcePolicyResponse;
import org.openapitools.client.model.GetTrailRequest;
import org.openapitools.client.model.GetTrailResponse;
import org.openapitools.client.model.GetTrailStatusRequest;
import org.openapitools.client.model.GetTrailStatusResponse;
import org.openapitools.client.model.ListChannelsRequest;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListEventDataStoresRequest;
import org.openapitools.client.model.ListEventDataStoresResponse;
import org.openapitools.client.model.ListImportFailuresRequest;
import org.openapitools.client.model.ListImportFailuresResponse;
import org.openapitools.client.model.ListImportsRequest;
import org.openapitools.client.model.ListImportsResponse;
import org.openapitools.client.model.ListPublicKeysRequest;
import org.openapitools.client.model.ListPublicKeysResponse;
import org.openapitools.client.model.ListQueriesRequest;
import org.openapitools.client.model.ListQueriesResponse;
import org.openapitools.client.model.ListTagsRequest;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.ListTrailsRequest;
import org.openapitools.client.model.ListTrailsResponse;
import org.openapitools.client.model.LookupEventsRequest;
import org.openapitools.client.model.LookupEventsResponse;
import org.openapitools.client.model.PutEventSelectorsRequest;
import org.openapitools.client.model.PutEventSelectorsResponse;
import org.openapitools.client.model.PutInsightSelectorsRequest;
import org.openapitools.client.model.PutInsightSelectorsResponse;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.PutResourcePolicyResponse;
import org.openapitools.client.model.RegisterOrganizationDelegatedAdminRequest;
import org.openapitools.client.model.RemoveTagsRequest;
import org.openapitools.client.model.RestoreEventDataStoreRequest;
import org.openapitools.client.model.RestoreEventDataStoreResponse;
import org.openapitools.client.model.StartEventDataStoreIngestionRequest;
import org.openapitools.client.model.StartImportRequest;
import org.openapitools.client.model.StartImportResponse;
import org.openapitools.client.model.StartLoggingRequest;
import org.openapitools.client.model.StartQueryRequest;
import org.openapitools.client.model.StartQueryResponse;
import org.openapitools.client.model.StopEventDataStoreIngestionRequest;
import org.openapitools.client.model.StopImportRequest;
import org.openapitools.client.model.StopImportResponse;
import org.openapitools.client.model.StopLoggingRequest;
import org.openapitools.client.model.UpdateChannelRequest;
import org.openapitools.client.model.UpdateChannelResponse;
import org.openapitools.client.model.UpdateEventDataStoreRequest;
import org.openapitools.client.model.UpdateEventDataStoreResponse;
import org.openapitools.client.model.UpdateTrailRequest;
import org.openapitools.client.model.UpdateTrailResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTags
     * @param xAmzTarget  (required)
     * @param addTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagsCall(String xAmzTarget, AddTagsRequest addTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.AddTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagsValidateBeforeCall(String xAmzTarget, AddTagsRequest addTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling addTags(Async)");
        }

        // verify the required parameter 'addTagsRequest' is set
        if (addTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'addTagsRequest' when calling addTags(Async)");
        }

        return addTagsCall(xAmzTarget, addTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds one or more tags to a trail, event data store, or channel, up to a limit of 50. Overwrites an existing tag&#39;s value when a new value is specified for an existing tag key. Tag key names must be unique; you cannot have two keys with the same name but different values. If you specify a key without a value, the tag will be created with the specified key and a value of null. You can tag a trail or event data store that applies to all Amazon Web Services Regions only from the Region in which the trail or event data store was created (also known as its home Region).
     * @param xAmzTarget  (required)
     * @param addTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public Object addTags(String xAmzTarget, AddTagsRequest addTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = addTagsWithHttpInfo(xAmzTarget, addTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds one or more tags to a trail, event data store, or channel, up to a limit of 50. Overwrites an existing tag&#39;s value when a new value is specified for an existing tag key. Tag key names must be unique; you cannot have two keys with the same name but different values. If you specify a key without a value, the tag will be created with the specified key and a value of null. You can tag a trail or event data store that applies to all Amazon Web Services Regions only from the Region in which the trail or event data store was created (also known as its home Region).
     * @param xAmzTarget  (required)
     * @param addTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addTagsWithHttpInfo(String xAmzTarget, AddTagsRequest addTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = addTagsValidateBeforeCall(xAmzTarget, addTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds one or more tags to a trail, event data store, or channel, up to a limit of 50. Overwrites an existing tag&#39;s value when a new value is specified for an existing tag key. Tag key names must be unique; you cannot have two keys with the same name but different values. If you specify a key without a value, the tag will be created with the specified key and a value of null. You can tag a trail or event data store that applies to all Amazon Web Services Regions only from the Region in which the trail or event data store was created (also known as its home Region).
     * @param xAmzTarget  (required)
     * @param addTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagsAsync(String xAmzTarget, AddTagsRequest addTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagsValidateBeforeCall(xAmzTarget, addTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelQuery
     * @param xAmzTarget  (required)
     * @param cancelQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InactiveQueryException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelQueryCall(String xAmzTarget, CancelQueryRequest cancelQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelQueryRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CancelQuery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelQueryValidateBeforeCall(String xAmzTarget, CancelQueryRequest cancelQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling cancelQuery(Async)");
        }

        // verify the required parameter 'cancelQueryRequest' is set
        if (cancelQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'cancelQueryRequest' when calling cancelQuery(Async)");
        }

        return cancelQueryCall(xAmzTarget, cancelQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Cancels a query if the query is not in a terminated state, such as &lt;code&gt;CANCELLED&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;TIMED_OUT&lt;/code&gt;, or &lt;code&gt;FINISHED&lt;/code&gt;. You must specify an ARN value for &lt;code&gt;EventDataStore&lt;/code&gt;. The ID of the query that you want to cancel is also required. When you run &lt;code&gt;CancelQuery&lt;/code&gt;, the query status might show as &lt;code&gt;CANCELLED&lt;/code&gt; even if the operation is not yet finished.
     * @param xAmzTarget  (required)
     * @param cancelQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CancelQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InactiveQueryException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public CancelQueryResponse cancelQuery(String xAmzTarget, CancelQueryRequest cancelQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CancelQueryResponse> localVarResp = cancelQueryWithHttpInfo(xAmzTarget, cancelQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels a query if the query is not in a terminated state, such as &lt;code&gt;CANCELLED&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;TIMED_OUT&lt;/code&gt;, or &lt;code&gt;FINISHED&lt;/code&gt;. You must specify an ARN value for &lt;code&gt;EventDataStore&lt;/code&gt;. The ID of the query that you want to cancel is also required. When you run &lt;code&gt;CancelQuery&lt;/code&gt;, the query status might show as &lt;code&gt;CANCELLED&lt;/code&gt; even if the operation is not yet finished.
     * @param xAmzTarget  (required)
     * @param cancelQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CancelQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InactiveQueryException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelQueryResponse> cancelQueryWithHttpInfo(String xAmzTarget, CancelQueryRequest cancelQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = cancelQueryValidateBeforeCall(xAmzTarget, cancelQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CancelQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels a query if the query is not in a terminated state, such as &lt;code&gt;CANCELLED&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;TIMED_OUT&lt;/code&gt;, or &lt;code&gt;FINISHED&lt;/code&gt;. You must specify an ARN value for &lt;code&gt;EventDataStore&lt;/code&gt;. The ID of the query that you want to cancel is also required. When you run &lt;code&gt;CancelQuery&lt;/code&gt;, the query status might show as &lt;code&gt;CANCELLED&lt;/code&gt; even if the operation is not yet finished.
     * @param xAmzTarget  (required)
     * @param cancelQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InactiveQueryException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelQueryAsync(String xAmzTarget, CancelQueryRequest cancelQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CancelQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelQueryValidateBeforeCall(xAmzTarget, cancelQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CancelQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannel
     * @param xAmzTarget  (required)
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChannelAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelCall(String xAmzTarget, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CreateChannel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelValidateBeforeCall(String xAmzTarget, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createChannel(Async)");
        }

        // verify the required parameter 'createChannelRequest' is set
        if (createChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelRequest' when calling createChannel(Async)");
        }

        return createChannelCall(xAmzTarget, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a channel for CloudTrail to ingest events from a partner or external source. After you create a channel, a CloudTrail Lake event data store can log events from the partner or source that you specify.
     * @param xAmzTarget  (required)
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChannelAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateChannelResponse createChannel(String xAmzTarget, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateChannelResponse> localVarResp = createChannelWithHttpInfo(xAmzTarget, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a channel for CloudTrail to ingest events from a partner or external source. After you create a channel, a CloudTrail Lake event data store can log events from the partner or source that you specify.
     * @param xAmzTarget  (required)
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChannelAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChannelResponse> createChannelWithHttpInfo(String xAmzTarget, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createChannelValidateBeforeCall(xAmzTarget, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a channel for CloudTrail to ingest events from a partner or external source. After you create a channel, a CloudTrail Lake event data store can log events from the partner or source that you specify.
     * @param xAmzTarget  (required)
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSourceException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChannelAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelAsync(String xAmzTarget, CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelValidateBeforeCall(xAmzTarget, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEventDataStore
     * @param xAmzTarget  (required)
     * @param createEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventDataStoreCall(String xAmzTarget, CreateEventDataStoreRequest createEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEventDataStoreRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CreateEventDataStore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventDataStoreValidateBeforeCall(String xAmzTarget, CreateEventDataStoreRequest createEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createEventDataStore(Async)");
        }

        // verify the required parameter 'createEventDataStoreRequest' is set
        if (createEventDataStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'createEventDataStoreRequest' when calling createEventDataStore(Async)");
        }

        return createEventDataStoreCall(xAmzTarget, createEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new event data store.
     * @param xAmzTarget  (required)
     * @param createEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateEventDataStoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventDataStoreResponse createEventDataStore(String xAmzTarget, CreateEventDataStoreRequest createEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateEventDataStoreResponse> localVarResp = createEventDataStoreWithHttpInfo(xAmzTarget, createEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new event data store.
     * @param xAmzTarget  (required)
     * @param createEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateEventDataStoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEventDataStoreResponse> createEventDataStoreWithHttpInfo(String xAmzTarget, CreateEventDataStoreRequest createEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createEventDataStoreValidateBeforeCall(xAmzTarget, createEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateEventDataStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new event data store.
     * @param xAmzTarget  (required)
     * @param createEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventDataStoreAsync(String xAmzTarget, CreateEventDataStoreRequest createEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateEventDataStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventDataStoreValidateBeforeCall(xAmzTarget, createEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateEventDataStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrail
     * @param xAmzTarget  (required)
     * @param createTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MaximumNumberOfTrailsExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientSnsTopicPolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSnsTopicNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrailNotProvidedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KmsKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidCloudWatchLogsLogGroupArnException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidCloudWatchLogsRoleArnException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> CloudWatchLogsDeliveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> CloudTrailInvalidClientTokenIdException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrailCall(String xAmzTarget, CreateTrailRequest createTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTrailRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.CreateTrail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrailValidateBeforeCall(String xAmzTarget, CreateTrailRequest createTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createTrail(Async)");
        }

        // verify the required parameter 'createTrailRequest' is set
        if (createTrailRequest == null) {
            throw new ApiException("Missing the required parameter 'createTrailRequest' when calling createTrail(Async)");
        }

        return createTrailCall(xAmzTarget, createTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket. 
     * @param xAmzTarget  (required)
     * @param createTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateTrailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MaximumNumberOfTrailsExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientSnsTopicPolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSnsTopicNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrailNotProvidedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KmsKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidCloudWatchLogsLogGroupArnException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidCloudWatchLogsRoleArnException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> CloudWatchLogsDeliveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> CloudTrailInvalidClientTokenIdException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public CreateTrailResponse createTrail(String xAmzTarget, CreateTrailRequest createTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateTrailResponse> localVarResp = createTrailWithHttpInfo(xAmzTarget, createTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket. 
     * @param xAmzTarget  (required)
     * @param createTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateTrailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MaximumNumberOfTrailsExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientSnsTopicPolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSnsTopicNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrailNotProvidedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KmsKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidCloudWatchLogsLogGroupArnException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidCloudWatchLogsRoleArnException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> CloudWatchLogsDeliveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> CloudTrailInvalidClientTokenIdException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTrailResponse> createTrailWithHttpInfo(String xAmzTarget, CreateTrailRequest createTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createTrailValidateBeforeCall(xAmzTarget, createTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateTrailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket. 
     * @param xAmzTarget  (required)
     * @param createTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> MaximumNumberOfTrailsExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientSnsTopicPolicyException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSnsTopicNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TrailNotProvidedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TagsLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> KmsKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidCloudWatchLogsLogGroupArnException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidCloudWatchLogsRoleArnException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> CloudWatchLogsDeliveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> CloudTrailInvalidClientTokenIdException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrailAsync(String xAmzTarget, CreateTrailRequest createTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateTrailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrailValidateBeforeCall(xAmzTarget, createTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateTrailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannel
     * @param xAmzTarget  (required)
     * @param deleteChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelCall(String xAmzTarget, DeleteChannelRequest deleteChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteChannelRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteChannel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelValidateBeforeCall(String xAmzTarget, DeleteChannelRequest deleteChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteChannel(Async)");
        }

        // verify the required parameter 'deleteChannelRequest' is set
        if (deleteChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteChannelRequest' when calling deleteChannel(Async)");
        }

        return deleteChannelCall(xAmzTarget, deleteChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a channel.
     * @param xAmzTarget  (required)
     * @param deleteChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteChannel(String xAmzTarget, DeleteChannelRequest deleteChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteChannelWithHttpInfo(xAmzTarget, deleteChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a channel.
     * @param xAmzTarget  (required)
     * @param deleteChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteChannelWithHttpInfo(String xAmzTarget, DeleteChannelRequest deleteChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(xAmzTarget, deleteChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a channel.
     * @param xAmzTarget  (required)
     * @param deleteChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelAsync(String xAmzTarget, DeleteChannelRequest deleteChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(xAmzTarget, deleteChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEventDataStore
     * @param xAmzTarget  (required)
     * @param deleteEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreTerminationProtectedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ChannelExistsForEDSException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventDataStoreCall(String xAmzTarget, DeleteEventDataStoreRequest deleteEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEventDataStoreRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteEventDataStore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventDataStoreValidateBeforeCall(String xAmzTarget, DeleteEventDataStoreRequest deleteEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteEventDataStore(Async)");
        }

        // verify the required parameter 'deleteEventDataStoreRequest' is set
        if (deleteEventDataStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteEventDataStoreRequest' when calling deleteEventDataStore(Async)");
        }

        return deleteEventDataStoreCall(xAmzTarget, deleteEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Disables the event data store specified by &lt;code&gt;EventDataStore&lt;/code&gt;, which accepts an event data store ARN. After you run &lt;code&gt;DeleteEventDataStore&lt;/code&gt;, the event data store enters a &lt;code&gt;PENDING_DELETION&lt;/code&gt; state, and is automatically deleted after a wait period of seven days. &lt;code&gt;TerminationProtectionEnabled&lt;/code&gt; must be set to &lt;code&gt;False&lt;/code&gt; on the event data store; this operation cannot work if &lt;code&gt;TerminationProtectionEnabled&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you run &lt;code&gt;DeleteEventDataStore&lt;/code&gt; on an event data store, you cannot run &lt;code&gt;ListQueries&lt;/code&gt;, &lt;code&gt;DescribeQuery&lt;/code&gt;, or &lt;code&gt;GetQueryResults&lt;/code&gt; on queries that are using an event data store in a &lt;code&gt;PENDING_DELETION&lt;/code&gt; state. An event data store in the &lt;code&gt;PENDING_DELETION&lt;/code&gt; state does not incur costs.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreTerminationProtectedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ChannelExistsForEDSException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteEventDataStore(String xAmzTarget, DeleteEventDataStoreRequest deleteEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteEventDataStoreWithHttpInfo(xAmzTarget, deleteEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Disables the event data store specified by &lt;code&gt;EventDataStore&lt;/code&gt;, which accepts an event data store ARN. After you run &lt;code&gt;DeleteEventDataStore&lt;/code&gt;, the event data store enters a &lt;code&gt;PENDING_DELETION&lt;/code&gt; state, and is automatically deleted after a wait period of seven days. &lt;code&gt;TerminationProtectionEnabled&lt;/code&gt; must be set to &lt;code&gt;False&lt;/code&gt; on the event data store; this operation cannot work if &lt;code&gt;TerminationProtectionEnabled&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you run &lt;code&gt;DeleteEventDataStore&lt;/code&gt; on an event data store, you cannot run &lt;code&gt;ListQueries&lt;/code&gt;, &lt;code&gt;DescribeQuery&lt;/code&gt;, or &lt;code&gt;GetQueryResults&lt;/code&gt; on queries that are using an event data store in a &lt;code&gt;PENDING_DELETION&lt;/code&gt; state. An event data store in the &lt;code&gt;PENDING_DELETION&lt;/code&gt; state does not incur costs.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreTerminationProtectedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ChannelExistsForEDSException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteEventDataStoreWithHttpInfo(String xAmzTarget, DeleteEventDataStoreRequest deleteEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteEventDataStoreValidateBeforeCall(xAmzTarget, deleteEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Disables the event data store specified by &lt;code&gt;EventDataStore&lt;/code&gt;, which accepts an event data store ARN. After you run &lt;code&gt;DeleteEventDataStore&lt;/code&gt;, the event data store enters a &lt;code&gt;PENDING_DELETION&lt;/code&gt; state, and is automatically deleted after a wait period of seven days. &lt;code&gt;TerminationProtectionEnabled&lt;/code&gt; must be set to &lt;code&gt;False&lt;/code&gt; on the event data store; this operation cannot work if &lt;code&gt;TerminationProtectionEnabled&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you run &lt;code&gt;DeleteEventDataStore&lt;/code&gt; on an event data store, you cannot run &lt;code&gt;ListQueries&lt;/code&gt;, &lt;code&gt;DescribeQuery&lt;/code&gt;, or &lt;code&gt;GetQueryResults&lt;/code&gt; on queries that are using an event data store in a &lt;code&gt;PENDING_DELETION&lt;/code&gt; state. An event data store in the &lt;code&gt;PENDING_DELETION&lt;/code&gt; state does not incur costs.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreTerminationProtectedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ChannelExistsForEDSException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventDataStoreAsync(String xAmzTarget, DeleteEventDataStoreRequest deleteEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventDataStoreValidateBeforeCall(xAmzTarget, deleteEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourcePolicy
     * @param xAmzTarget  (required)
     * @param deleteResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcePolicyCall(String xAmzTarget, DeleteResourcePolicyRequest deleteResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteResourcePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteResourcePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourcePolicyValidateBeforeCall(String xAmzTarget, DeleteResourcePolicyRequest deleteResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteResourcePolicy(Async)");
        }

        // verify the required parameter 'deleteResourcePolicyRequest' is set
        if (deleteResourcePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteResourcePolicyRequest' when calling deleteResourcePolicy(Async)");
        }

        return deleteResourcePolicyCall(xAmzTarget, deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Deletes the resource-based policy attached to the CloudTrail channel. 
     * @param xAmzTarget  (required)
     * @param deleteResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteResourcePolicy(String xAmzTarget, DeleteResourcePolicyRequest deleteResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteResourcePolicyWithHttpInfo(xAmzTarget, deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Deletes the resource-based policy attached to the CloudTrail channel. 
     * @param xAmzTarget  (required)
     * @param deleteResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteResourcePolicyWithHttpInfo(String xAmzTarget, DeleteResourcePolicyRequest deleteResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteResourcePolicyValidateBeforeCall(xAmzTarget, deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Deletes the resource-based policy attached to the CloudTrail channel. 
     * @param xAmzTarget  (required)
     * @param deleteResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcePolicyAsync(String xAmzTarget, DeleteResourcePolicyRequest deleteResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourcePolicyValidateBeforeCall(xAmzTarget, deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrail
     * @param xAmzTarget  (required)
     * @param deleteTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrailCall(String xAmzTarget, DeleteTrailRequest deleteTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTrailRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeleteTrail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrailValidateBeforeCall(String xAmzTarget, DeleteTrailRequest deleteTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteTrail(Async)");
        }

        // verify the required parameter 'deleteTrailRequest' is set
        if (deleteTrailRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteTrailRequest' when calling deleteTrail(Async)");
        }

        return deleteTrailCall(xAmzTarget, deleteTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a trail. This operation must be called from the Region in which the trail was created. &lt;code&gt;DeleteTrail&lt;/code&gt; cannot be called on the shadow trails (replicated trails in other Regions) of a trail that is enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param deleteTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTrail(String xAmzTarget, DeleteTrailRequest deleteTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTrailWithHttpInfo(xAmzTarget, deleteTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a trail. This operation must be called from the Region in which the trail was created. &lt;code&gt;DeleteTrail&lt;/code&gt; cannot be called on the shadow trails (replicated trails in other Regions) of a trail that is enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param deleteTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTrailWithHttpInfo(String xAmzTarget, DeleteTrailRequest deleteTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteTrailValidateBeforeCall(xAmzTarget, deleteTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a trail. This operation must be called from the Region in which the trail was created. &lt;code&gt;DeleteTrail&lt;/code&gt; cannot be called on the shadow trails (replicated trails in other Regions) of a trail that is enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param deleteTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrailAsync(String xAmzTarget, DeleteTrailRequest deleteTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrailValidateBeforeCall(xAmzTarget, deleteTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deregisterOrganizationDelegatedAdmin
     * @param xAmzTarget  (required)
     * @param deregisterOrganizationDelegatedAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotOrganizationManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterOrganizationDelegatedAdminCall(String xAmzTarget, DeregisterOrganizationDelegatedAdminRequest deregisterOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deregisterOrganizationDelegatedAdminRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DeregisterOrganizationDelegatedAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deregisterOrganizationDelegatedAdminValidateBeforeCall(String xAmzTarget, DeregisterOrganizationDelegatedAdminRequest deregisterOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deregisterOrganizationDelegatedAdmin(Async)");
        }

        // verify the required parameter 'deregisterOrganizationDelegatedAdminRequest' is set
        if (deregisterOrganizationDelegatedAdminRequest == null) {
            throw new ApiException("Missing the required parameter 'deregisterOrganizationDelegatedAdminRequest' when calling deregisterOrganizationDelegatedAdmin(Async)");
        }

        return deregisterOrganizationDelegatedAdminCall(xAmzTarget, deregisterOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes CloudTrail delegated administrator permissions from a member account in an organization.
     * @param xAmzTarget  (required)
     * @param deregisterOrganizationDelegatedAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotOrganizationManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public Object deregisterOrganizationDelegatedAdmin(String xAmzTarget, DeregisterOrganizationDelegatedAdminRequest deregisterOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deregisterOrganizationDelegatedAdminWithHttpInfo(xAmzTarget, deregisterOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes CloudTrail delegated administrator permissions from a member account in an organization.
     * @param xAmzTarget  (required)
     * @param deregisterOrganizationDelegatedAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotOrganizationManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deregisterOrganizationDelegatedAdminWithHttpInfo(String xAmzTarget, DeregisterOrganizationDelegatedAdminRequest deregisterOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deregisterOrganizationDelegatedAdminValidateBeforeCall(xAmzTarget, deregisterOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes CloudTrail delegated administrator permissions from a member account in an organization.
     * @param xAmzTarget  (required)
     * @param deregisterOrganizationDelegatedAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotRegisteredException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotOrganizationManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deregisterOrganizationDelegatedAdminAsync(String xAmzTarget, DeregisterOrganizationDelegatedAdminRequest deregisterOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deregisterOrganizationDelegatedAdminValidateBeforeCall(xAmzTarget, deregisterOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeQuery
     * @param xAmzTarget  (required)
     * @param describeQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeQueryCall(String xAmzTarget, DescribeQueryRequest describeQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeQueryRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DescribeQuery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeQueryValidateBeforeCall(String xAmzTarget, DescribeQueryRequest describeQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeQuery(Async)");
        }

        // verify the required parameter 'describeQueryRequest' is set
        if (describeQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'describeQueryRequest' when calling describeQuery(Async)");
        }

        return describeQueryCall(xAmzTarget, describeQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns metadata about a query, including query run time in milliseconds, number of events scanned and matched, and query status. If the query results were delivered to an S3 bucket, the response also provides the S3 URI and the delivery status.&lt;/p&gt; &lt;p&gt;You must specify either a &lt;code&gt;QueryID&lt;/code&gt; or a &lt;code&gt;QueryAlias&lt;/code&gt;. Specifying the &lt;code&gt;QueryAlias&lt;/code&gt; parameter returns information about the last query run for the alias.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeQueryResponse describeQuery(String xAmzTarget, DescribeQueryRequest describeQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeQueryResponse> localVarResp = describeQueryWithHttpInfo(xAmzTarget, describeQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns metadata about a query, including query run time in milliseconds, number of events scanned and matched, and query status. If the query results were delivered to an S3 bucket, the response also provides the S3 URI and the delivery status.&lt;/p&gt; &lt;p&gt;You must specify either a &lt;code&gt;QueryID&lt;/code&gt; or a &lt;code&gt;QueryAlias&lt;/code&gt;. Specifying the &lt;code&gt;QueryAlias&lt;/code&gt; parameter returns information about the last query run for the alias.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeQueryResponse> describeQueryWithHttpInfo(String xAmzTarget, DescribeQueryRequest describeQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeQueryValidateBeforeCall(xAmzTarget, describeQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns metadata about a query, including query run time in milliseconds, number of events scanned and matched, and query status. If the query results were delivered to an S3 bucket, the response also provides the S3 URI and the delivery status.&lt;/p&gt; &lt;p&gt;You must specify either a &lt;code&gt;QueryID&lt;/code&gt; or a &lt;code&gt;QueryAlias&lt;/code&gt;. Specifying the &lt;code&gt;QueryAlias&lt;/code&gt; parameter returns information about the last query run for the alias.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeQueryAsync(String xAmzTarget, DescribeQueryRequest describeQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeQueryValidateBeforeCall(xAmzTarget, describeQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeTrails
     * @param xAmzTarget  (required)
     * @param describeTrailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTrailsCall(String xAmzTarget, DescribeTrailsRequest describeTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTrailsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DescribeTrails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeTrailsValidateBeforeCall(String xAmzTarget, DescribeTrailsRequest describeTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeTrails(Async)");
        }

        // verify the required parameter 'describeTrailsRequest' is set
        if (describeTrailsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeTrailsRequest' when calling describeTrails(Async)");
        }

        return describeTrailsCall(xAmzTarget, describeTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves settings for one or more trails associated with the current Region for your account.
     * @param xAmzTarget  (required)
     * @param describeTrailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTrailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTrailsResponse describeTrails(String xAmzTarget, DescribeTrailsRequest describeTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTrailsResponse> localVarResp = describeTrailsWithHttpInfo(xAmzTarget, describeTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves settings for one or more trails associated with the current Region for your account.
     * @param xAmzTarget  (required)
     * @param describeTrailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTrailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTrailsResponse> describeTrailsWithHttpInfo(String xAmzTarget, DescribeTrailsRequest describeTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeTrailsValidateBeforeCall(xAmzTarget, describeTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTrailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves settings for one or more trails associated with the current Region for your account.
     * @param xAmzTarget  (required)
     * @param describeTrailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTrailsAsync(String xAmzTarget, DescribeTrailsRequest describeTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTrailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeTrailsValidateBeforeCall(xAmzTarget, describeTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTrailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannel
     * @param xAmzTarget  (required)
     * @param getChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelCall(String xAmzTarget, GetChannelRequest getChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getChannelRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetChannel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelValidateBeforeCall(String xAmzTarget, GetChannelRequest getChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getChannel(Async)");
        }

        // verify the required parameter 'getChannelRequest' is set
        if (getChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'getChannelRequest' when calling getChannel(Async)");
        }

        return getChannelCall(xAmzTarget, getChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Returns information about a specific channel. 
     * @param xAmzTarget  (required)
     * @param getChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public GetChannelResponse getChannel(String xAmzTarget, GetChannelRequest getChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetChannelResponse> localVarResp = getChannelWithHttpInfo(xAmzTarget, getChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns information about a specific channel. 
     * @param xAmzTarget  (required)
     * @param getChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChannelResponse> getChannelWithHttpInfo(String xAmzTarget, GetChannelRequest getChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getChannelValidateBeforeCall(xAmzTarget, getChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns information about a specific channel. 
     * @param xAmzTarget  (required)
     * @param getChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChannelAsync(String xAmzTarget, GetChannelRequest getChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelValidateBeforeCall(xAmzTarget, getChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventDataStore
     * @param xAmzTarget  (required)
     * @param getEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventDataStoreCall(String xAmzTarget, GetEventDataStoreRequest getEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getEventDataStoreRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetEventDataStore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventDataStoreValidateBeforeCall(String xAmzTarget, GetEventDataStoreRequest getEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getEventDataStore(Async)");
        }

        // verify the required parameter 'getEventDataStoreRequest' is set
        if (getEventDataStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'getEventDataStoreRequest' when calling getEventDataStore(Async)");
        }

        return getEventDataStoreCall(xAmzTarget, getEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns information about an event data store specified as either an ARN or the ID portion of the ARN.
     * @param xAmzTarget  (required)
     * @param getEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetEventDataStoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public GetEventDataStoreResponse getEventDataStore(String xAmzTarget, GetEventDataStoreRequest getEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetEventDataStoreResponse> localVarResp = getEventDataStoreWithHttpInfo(xAmzTarget, getEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about an event data store specified as either an ARN or the ID portion of the ARN.
     * @param xAmzTarget  (required)
     * @param getEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetEventDataStoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEventDataStoreResponse> getEventDataStoreWithHttpInfo(String xAmzTarget, GetEventDataStoreRequest getEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getEventDataStoreValidateBeforeCall(xAmzTarget, getEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetEventDataStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about an event data store specified as either an ARN or the ID portion of the ARN.
     * @param xAmzTarget  (required)
     * @param getEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventDataStoreAsync(String xAmzTarget, GetEventDataStoreRequest getEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetEventDataStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventDataStoreValidateBeforeCall(xAmzTarget, getEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetEventDataStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventSelectors
     * @param xAmzTarget  (required)
     * @param getEventSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventSelectorsCall(String xAmzTarget, GetEventSelectorsRequest getEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getEventSelectorsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetEventSelectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventSelectorsValidateBeforeCall(String xAmzTarget, GetEventSelectorsRequest getEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getEventSelectors(Async)");
        }

        // verify the required parameter 'getEventSelectorsRequest' is set
        if (getEventSelectorsRequest == null) {
            throw new ApiException("Missing the required parameter 'getEventSelectorsRequest' when calling getEventSelectors(Async)");
        }

        return getEventSelectorsCall(xAmzTarget, getEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the settings for the event selectors that you configured for your trail. The information returned for your event selectors includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If your event selector includes read-only events, write-only events, or all events. This applies to both management events and data events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your event selector includes management events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your event selector includes data events, the resources on which you are logging data events.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about logging management and data events, see the following topics in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html\&quot;&gt;Logging management events&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getEventSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetEventSelectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public GetEventSelectorsResponse getEventSelectors(String xAmzTarget, GetEventSelectorsRequest getEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetEventSelectorsResponse> localVarResp = getEventSelectorsWithHttpInfo(xAmzTarget, getEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the settings for the event selectors that you configured for your trail. The information returned for your event selectors includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If your event selector includes read-only events, write-only events, or all events. This applies to both management events and data events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your event selector includes management events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your event selector includes data events, the resources on which you are logging data events.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about logging management and data events, see the following topics in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html\&quot;&gt;Logging management events&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getEventSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetEventSelectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEventSelectorsResponse> getEventSelectorsWithHttpInfo(String xAmzTarget, GetEventSelectorsRequest getEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getEventSelectorsValidateBeforeCall(xAmzTarget, getEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetEventSelectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the settings for the event selectors that you configured for your trail. The information returned for your event selectors includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If your event selector includes read-only events, write-only events, or all events. This applies to both management events and data events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your event selector includes management events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your event selector includes data events, the resources on which you are logging data events.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about logging management and data events, see the following topics in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html\&quot;&gt;Logging management events&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getEventSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventSelectorsAsync(String xAmzTarget, GetEventSelectorsRequest getEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetEventSelectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventSelectorsValidateBeforeCall(xAmzTarget, getEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetEventSelectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImport
     * @param xAmzTarget  (required)
     * @param getImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportCall(String xAmzTarget, GetImportRequest getImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getImportRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetImport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportValidateBeforeCall(String xAmzTarget, GetImportRequest getImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getImport(Async)");
        }

        // verify the required parameter 'getImportRequest' is set
        if (getImportRequest == null) {
            throw new ApiException("Missing the required parameter 'getImportRequest' when calling getImport(Async)");
        }

        return getImportCall(xAmzTarget, getImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Returns information about a specific import. 
     * @param xAmzTarget  (required)
     * @param getImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public GetImportResponse getImport(String xAmzTarget, GetImportRequest getImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetImportResponse> localVarResp = getImportWithHttpInfo(xAmzTarget, getImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns information about a specific import. 
     * @param xAmzTarget  (required)
     * @param getImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetImportResponse> getImportWithHttpInfo(String xAmzTarget, GetImportRequest getImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getImportValidateBeforeCall(xAmzTarget, getImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns information about a specific import. 
     * @param xAmzTarget  (required)
     * @param getImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportAsync(String xAmzTarget, GetImportRequest getImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportValidateBeforeCall(xAmzTarget, getImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInsightSelectors
     * @param xAmzTarget  (required)
     * @param getInsightSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsightNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInsightSelectorsCall(String xAmzTarget, GetInsightSelectorsRequest getInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getInsightSelectorsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetInsightSelectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInsightSelectorsValidateBeforeCall(String xAmzTarget, GetInsightSelectorsRequest getInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getInsightSelectors(Async)");
        }

        // verify the required parameter 'getInsightSelectorsRequest' is set
        if (getInsightSelectorsRequest == null) {
            throw new ApiException("Missing the required parameter 'getInsightSelectorsRequest' when calling getInsightSelectors(Async)");
        }

        return getInsightSelectorsCall(xAmzTarget, getInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the settings for the Insights event selectors that you configured for your trail. &lt;code&gt;GetInsightSelectors&lt;/code&gt; shows if CloudTrail Insights event logging is enabled on the trail, and if it is, which insight types are enabled. If you run &lt;code&gt;GetInsightSelectors&lt;/code&gt; on a trail that does not have Insights events enabled, the operation throws the exception &lt;code&gt;InsightNotEnabledException&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html\&quot;&gt;Logging CloudTrail Insights Events for Trails &lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getInsightSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetInsightSelectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsightNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public GetInsightSelectorsResponse getInsightSelectors(String xAmzTarget, GetInsightSelectorsRequest getInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetInsightSelectorsResponse> localVarResp = getInsightSelectorsWithHttpInfo(xAmzTarget, getInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the settings for the Insights event selectors that you configured for your trail. &lt;code&gt;GetInsightSelectors&lt;/code&gt; shows if CloudTrail Insights event logging is enabled on the trail, and if it is, which insight types are enabled. If you run &lt;code&gt;GetInsightSelectors&lt;/code&gt; on a trail that does not have Insights events enabled, the operation throws the exception &lt;code&gt;InsightNotEnabledException&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html\&quot;&gt;Logging CloudTrail Insights Events for Trails &lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getInsightSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetInsightSelectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsightNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetInsightSelectorsResponse> getInsightSelectorsWithHttpInfo(String xAmzTarget, GetInsightSelectorsRequest getInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getInsightSelectorsValidateBeforeCall(xAmzTarget, getInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetInsightSelectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the settings for the Insights event selectors that you configured for your trail. &lt;code&gt;GetInsightSelectors&lt;/code&gt; shows if CloudTrail Insights event logging is enabled on the trail, and if it is, which insight types are enabled. If you run &lt;code&gt;GetInsightSelectors&lt;/code&gt; on a trail that does not have Insights events enabled, the operation throws the exception &lt;code&gt;InsightNotEnabledException&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html\&quot;&gt;Logging CloudTrail Insights Events for Trails &lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getInsightSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsightNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInsightSelectorsAsync(String xAmzTarget, GetInsightSelectorsRequest getInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetInsightSelectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInsightSelectorsValidateBeforeCall(xAmzTarget, getInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetInsightSelectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryResults
     * @param xAmzTarget  (required)
     * @param getQueryResultsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryResultsCall(String xAmzTarget, GetQueryResultsRequest getQueryResultsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getQueryResultsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetQueryResults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryResultsValidateBeforeCall(String xAmzTarget, GetQueryResultsRequest getQueryResultsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getQueryResults(Async)");
        }

        // verify the required parameter 'getQueryResultsRequest' is set
        if (getQueryResultsRequest == null) {
            throw new ApiException("Missing the required parameter 'getQueryResultsRequest' when calling getQueryResults(Async)");
        }

        return getQueryResultsCall(xAmzTarget, getQueryResultsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * Gets event data results of a query. You must specify the &lt;code&gt;QueryID&lt;/code&gt; value returned by the &lt;code&gt;StartQuery&lt;/code&gt; operation.
     * @param xAmzTarget  (required)
     * @param getQueryResultsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return GetQueryResultsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public GetQueryResultsResponse getQueryResults(String xAmzTarget, GetQueryResultsRequest getQueryResultsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<GetQueryResultsResponse> localVarResp = getQueryResultsWithHttpInfo(xAmzTarget, getQueryResultsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets event data results of a query. You must specify the &lt;code&gt;QueryID&lt;/code&gt; value returned by the &lt;code&gt;StartQuery&lt;/code&gt; operation.
     * @param xAmzTarget  (required)
     * @param getQueryResultsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;GetQueryResultsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetQueryResultsResponse> getQueryResultsWithHttpInfo(String xAmzTarget, GetQueryResultsRequest getQueryResultsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = getQueryResultsValidateBeforeCall(xAmzTarget, getQueryResultsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<GetQueryResultsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets event data results of a query. You must specify the &lt;code&gt;QueryID&lt;/code&gt; value returned by the &lt;code&gt;StartQuery&lt;/code&gt; operation.
     * @param xAmzTarget  (required)
     * @param getQueryResultsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> QueryIdNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryResultsAsync(String xAmzTarget, GetQueryResultsRequest getQueryResultsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<GetQueryResultsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryResultsValidateBeforeCall(xAmzTarget, getQueryResultsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<GetQueryResultsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourcePolicy
     * @param xAmzTarget  (required)
     * @param getResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcePolicyCall(String xAmzTarget, GetResourcePolicyRequest getResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getResourcePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetResourcePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcePolicyValidateBeforeCall(String xAmzTarget, GetResourcePolicyRequest getResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getResourcePolicy(Async)");
        }

        // verify the required parameter 'getResourcePolicyRequest' is set
        if (getResourcePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'getResourcePolicyRequest' when calling getResourcePolicy(Async)");
        }

        return getResourcePolicyCall(xAmzTarget, getResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Retrieves the JSON text of the resource-based policy document attached to the CloudTrail channel. 
     * @param xAmzTarget  (required)
     * @param getResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetResourcePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public GetResourcePolicyResponse getResourcePolicy(String xAmzTarget, GetResourcePolicyRequest getResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetResourcePolicyResponse> localVarResp = getResourcePolicyWithHttpInfo(xAmzTarget, getResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Retrieves the JSON text of the resource-based policy document attached to the CloudTrail channel. 
     * @param xAmzTarget  (required)
     * @param getResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetResourcePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetResourcePolicyResponse> getResourcePolicyWithHttpInfo(String xAmzTarget, GetResourcePolicyRequest getResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getResourcePolicyValidateBeforeCall(xAmzTarget, getResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetResourcePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Retrieves the JSON text of the resource-based policy document attached to the CloudTrail channel. 
     * @param xAmzTarget  (required)
     * @param getResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourcePolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcePolicyAsync(String xAmzTarget, GetResourcePolicyRequest getResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetResourcePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcePolicyValidateBeforeCall(xAmzTarget, getResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetResourcePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrail
     * @param xAmzTarget  (required)
     * @param getTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailCall(String xAmzTarget, GetTrailRequest getTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTrailRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetTrail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrailValidateBeforeCall(String xAmzTarget, GetTrailRequest getTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getTrail(Async)");
        }

        // verify the required parameter 'getTrailRequest' is set
        if (getTrailRequest == null) {
            throw new ApiException("Missing the required parameter 'getTrailRequest' when calling getTrail(Async)");
        }

        return getTrailCall(xAmzTarget, getTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns settings information for a specified trail.
     * @param xAmzTarget  (required)
     * @param getTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetTrailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public GetTrailResponse getTrail(String xAmzTarget, GetTrailRequest getTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetTrailResponse> localVarResp = getTrailWithHttpInfo(xAmzTarget, getTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns settings information for a specified trail.
     * @param xAmzTarget  (required)
     * @param getTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetTrailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTrailResponse> getTrailWithHttpInfo(String xAmzTarget, GetTrailRequest getTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getTrailValidateBeforeCall(xAmzTarget, getTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetTrailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns settings information for a specified trail.
     * @param xAmzTarget  (required)
     * @param getTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailAsync(String xAmzTarget, GetTrailRequest getTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetTrailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrailValidateBeforeCall(xAmzTarget, getTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetTrailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrailStatus
     * @param xAmzTarget  (required)
     * @param getTrailStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailStatusCall(String xAmzTarget, GetTrailStatusRequest getTrailStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTrailStatusRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.GetTrailStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrailStatusValidateBeforeCall(String xAmzTarget, GetTrailStatusRequest getTrailStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getTrailStatus(Async)");
        }

        // verify the required parameter 'getTrailStatusRequest' is set
        if (getTrailStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'getTrailStatusRequest' when calling getTrailStatus(Async)");
        }

        return getTrailStatusCall(xAmzTarget, getTrailStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns a JSON-formatted list of information about the specified trail. Fields include information on delivery errors, Amazon SNS and Amazon S3 errors, and start and stop logging times for each trail. This operation returns trail status from a single Region. To return trail status from all Regions, you must call the operation on each Region.
     * @param xAmzTarget  (required)
     * @param getTrailStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetTrailStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public GetTrailStatusResponse getTrailStatus(String xAmzTarget, GetTrailStatusRequest getTrailStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetTrailStatusResponse> localVarResp = getTrailStatusWithHttpInfo(xAmzTarget, getTrailStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a JSON-formatted list of information about the specified trail. Fields include information on delivery errors, Amazon SNS and Amazon S3 errors, and start and stop logging times for each trail. This operation returns trail status from a single Region. To return trail status from all Regions, you must call the operation on each Region.
     * @param xAmzTarget  (required)
     * @param getTrailStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetTrailStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTrailStatusResponse> getTrailStatusWithHttpInfo(String xAmzTarget, GetTrailStatusRequest getTrailStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getTrailStatusValidateBeforeCall(xAmzTarget, getTrailStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetTrailStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a JSON-formatted list of information about the specified trail. Fields include information on delivery errors, Amazon SNS and Amazon S3 errors, and start and stop logging times for each trail. This operation returns trail status from a single Region. To return trail status from all Regions, you must call the operation on each Region.
     * @param xAmzTarget  (required)
     * @param getTrailStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailStatusAsync(String xAmzTarget, GetTrailStatusRequest getTrailStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetTrailStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrailStatusValidateBeforeCall(xAmzTarget, getTrailStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetTrailStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannels
     * @param xAmzTarget  (required)
     * @param listChannelsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsCall(String xAmzTarget, ListChannelsRequest listChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listChannelsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsValidateBeforeCall(String xAmzTarget, ListChannelsRequest listChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listChannels(Async)");
        }

        // verify the required parameter 'listChannelsRequest' is set
        if (listChannelsRequest == null) {
            throw new ApiException("Missing the required parameter 'listChannelsRequest' when calling listChannels(Async)");
        }

        return listChannelsCall(xAmzTarget, listChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     *  Lists the channels in the current account, and their source names. 
     * @param xAmzTarget  (required)
     * @param listChannelsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListChannelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelsResponse listChannels(String xAmzTarget, ListChannelsRequest listChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListChannelsResponse> localVarResp = listChannelsWithHttpInfo(xAmzTarget, listChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     *  Lists the channels in the current account, and their source names. 
     * @param xAmzTarget  (required)
     * @param listChannelsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListChannelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelsResponse> listChannelsWithHttpInfo(String xAmzTarget, ListChannelsRequest listChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(xAmzTarget, listChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Lists the channels in the current account, and their source names. 
     * @param xAmzTarget  (required)
     * @param listChannelsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelsAsync(String xAmzTarget, ListChannelsRequest listChannelsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(xAmzTarget, listChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEventDataStores
     * @param xAmzTarget  (required)
     * @param listEventDataStoresRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventDataStoresCall(String xAmzTarget, ListEventDataStoresRequest listEventDataStoresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listEventDataStoresRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListEventDataStores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventDataStoresValidateBeforeCall(String xAmzTarget, ListEventDataStoresRequest listEventDataStoresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listEventDataStores(Async)");
        }

        // verify the required parameter 'listEventDataStoresRequest' is set
        if (listEventDataStoresRequest == null) {
            throw new ApiException("Missing the required parameter 'listEventDataStoresRequest' when calling listEventDataStores(Async)");
        }

        return listEventDataStoresCall(xAmzTarget, listEventDataStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns information about all event data stores in the account, in the current Region.
     * @param xAmzTarget  (required)
     * @param listEventDataStoresRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListEventDataStoresResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ListEventDataStoresResponse listEventDataStores(String xAmzTarget, ListEventDataStoresRequest listEventDataStoresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListEventDataStoresResponse> localVarResp = listEventDataStoresWithHttpInfo(xAmzTarget, listEventDataStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about all event data stores in the account, in the current Region.
     * @param xAmzTarget  (required)
     * @param listEventDataStoresRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListEventDataStoresResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEventDataStoresResponse> listEventDataStoresWithHttpInfo(String xAmzTarget, ListEventDataStoresRequest listEventDataStoresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listEventDataStoresValidateBeforeCall(xAmzTarget, listEventDataStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListEventDataStoresResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about all event data stores in the account, in the current Region.
     * @param xAmzTarget  (required)
     * @param listEventDataStoresRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEventDataStoresAsync(String xAmzTarget, ListEventDataStoresRequest listEventDataStoresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListEventDataStoresResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventDataStoresValidateBeforeCall(xAmzTarget, listEventDataStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListEventDataStoresResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImportFailures
     * @param xAmzTarget  (required)
     * @param listImportFailuresRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImportFailuresCall(String xAmzTarget, ListImportFailuresRequest listImportFailuresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listImportFailuresRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListImportFailures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImportFailuresValidateBeforeCall(String xAmzTarget, ListImportFailuresRequest listImportFailuresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listImportFailures(Async)");
        }

        // verify the required parameter 'listImportFailuresRequest' is set
        if (listImportFailuresRequest == null) {
            throw new ApiException("Missing the required parameter 'listImportFailuresRequest' when calling listImportFailures(Async)");
        }

        return listImportFailuresCall(xAmzTarget, listImportFailuresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     *  Returns a list of failures for the specified import. 
     * @param xAmzTarget  (required)
     * @param listImportFailuresRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListImportFailuresResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ListImportFailuresResponse listImportFailures(String xAmzTarget, ListImportFailuresRequest listImportFailuresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListImportFailuresResponse> localVarResp = listImportFailuresWithHttpInfo(xAmzTarget, listImportFailuresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns a list of failures for the specified import. 
     * @param xAmzTarget  (required)
     * @param listImportFailuresRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListImportFailuresResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListImportFailuresResponse> listImportFailuresWithHttpInfo(String xAmzTarget, ListImportFailuresRequest listImportFailuresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listImportFailuresValidateBeforeCall(xAmzTarget, listImportFailuresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListImportFailuresResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns a list of failures for the specified import. 
     * @param xAmzTarget  (required)
     * @param listImportFailuresRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImportFailuresAsync(String xAmzTarget, ListImportFailuresRequest listImportFailuresRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListImportFailuresResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImportFailuresValidateBeforeCall(xAmzTarget, listImportFailuresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListImportFailuresResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImports
     * @param xAmzTarget  (required)
     * @param listImportsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImportsCall(String xAmzTarget, ListImportsRequest listImportsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listImportsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListImports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImportsValidateBeforeCall(String xAmzTarget, ListImportsRequest listImportsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listImports(Async)");
        }

        // verify the required parameter 'listImportsRequest' is set
        if (listImportsRequest == null) {
            throw new ApiException("Missing the required parameter 'listImportsRequest' when calling listImports(Async)");
        }

        return listImportsCall(xAmzTarget, listImportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     *  Returns information on all imports, or a select set of imports by &lt;code&gt;ImportStatus&lt;/code&gt; or &lt;code&gt;Destination&lt;/code&gt;. 
     * @param xAmzTarget  (required)
     * @param listImportsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListImportsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ListImportsResponse listImports(String xAmzTarget, ListImportsRequest listImportsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListImportsResponse> localVarResp = listImportsWithHttpInfo(xAmzTarget, listImportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     *  Returns information on all imports, or a select set of imports by &lt;code&gt;ImportStatus&lt;/code&gt; or &lt;code&gt;Destination&lt;/code&gt;. 
     * @param xAmzTarget  (required)
     * @param listImportsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListImportsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListImportsResponse> listImportsWithHttpInfo(String xAmzTarget, ListImportsRequest listImportsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listImportsValidateBeforeCall(xAmzTarget, listImportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListImportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Returns information on all imports, or a select set of imports by &lt;code&gt;ImportStatus&lt;/code&gt; or &lt;code&gt;Destination&lt;/code&gt;. 
     * @param xAmzTarget  (required)
     * @param listImportsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImportsAsync(String xAmzTarget, ListImportsRequest listImportsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListImportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImportsValidateBeforeCall(xAmzTarget, listImportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListImportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPublicKeys
     * @param xAmzTarget  (required)
     * @param listPublicKeysRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTimeRangeException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublicKeysCall(String xAmzTarget, ListPublicKeysRequest listPublicKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPublicKeysRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListPublicKeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublicKeysValidateBeforeCall(String xAmzTarget, ListPublicKeysRequest listPublicKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listPublicKeys(Async)");
        }

        // verify the required parameter 'listPublicKeysRequest' is set
        if (listPublicKeysRequest == null) {
            throw new ApiException("Missing the required parameter 'listPublicKeysRequest' when calling listPublicKeys(Async)");
        }

        return listPublicKeysCall(xAmzTarget, listPublicKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns all public keys whose private keys were used to sign the digest files within the specified time range. The public key is needed to validate digest files that were signed with its corresponding private key.&lt;/p&gt; &lt;note&gt; &lt;p&gt;CloudTrail uses different private and public key pairs per Region. Each digest file is signed with a private key unique to its Region. When you validate a digest file from a specific Region, you must look in the same Region for its corresponding public key.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listPublicKeysRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ListPublicKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTimeRangeException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListPublicKeysResponse listPublicKeys(String xAmzTarget, ListPublicKeysRequest listPublicKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListPublicKeysResponse> localVarResp = listPublicKeysWithHttpInfo(xAmzTarget, listPublicKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns all public keys whose private keys were used to sign the digest files within the specified time range. The public key is needed to validate digest files that were signed with its corresponding private key.&lt;/p&gt; &lt;note&gt; &lt;p&gt;CloudTrail uses different private and public key pairs per Region. Each digest file is signed with a private key unique to its Region. When you validate a digest file from a specific Region, you must look in the same Region for its corresponding public key.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listPublicKeysRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListPublicKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTimeRangeException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPublicKeysResponse> listPublicKeysWithHttpInfo(String xAmzTarget, ListPublicKeysRequest listPublicKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPublicKeysValidateBeforeCall(xAmzTarget, listPublicKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPublicKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns all public keys whose private keys were used to sign the digest files within the specified time range. The public key is needed to validate digest files that were signed with its corresponding private key.&lt;/p&gt; &lt;note&gt; &lt;p&gt;CloudTrail uses different private and public key pairs per Region. Each digest file is signed with a private key unique to its Region. When you validate a digest file from a specific Region, you must look in the same Region for its corresponding public key.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listPublicKeysRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidTimeRangeException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublicKeysAsync(String xAmzTarget, ListPublicKeysRequest listPublicKeysRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListPublicKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublicKeysValidateBeforeCall(xAmzTarget, listPublicKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPublicKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listQueries
     * @param xAmzTarget  (required)
     * @param listQueriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDateRangeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidQueryStatusException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listQueriesCall(String xAmzTarget, ListQueriesRequest listQueriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listQueriesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListQueries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listQueriesValidateBeforeCall(String xAmzTarget, ListQueriesRequest listQueriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listQueries(Async)");
        }

        // verify the required parameter 'listQueriesRequest' is set
        if (listQueriesRequest == null) {
            throw new ApiException("Missing the required parameter 'listQueriesRequest' when calling listQueries(Async)");
        }

        return listQueriesCall(xAmzTarget, listQueriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of queries and query statuses for the past seven days. You must specify an ARN value for &lt;code&gt;EventDataStore&lt;/code&gt;. Optionally, to shorten the list of results, you can specify a time range, formatted as timestamps, by adding &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; parameters, and a &lt;code&gt;QueryStatus&lt;/code&gt; value. Valid values for &lt;code&gt;QueryStatus&lt;/code&gt; include &lt;code&gt;QUEUED&lt;/code&gt;, &lt;code&gt;RUNNING&lt;/code&gt;, &lt;code&gt;FINISHED&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;TIMED_OUT&lt;/code&gt;, or &lt;code&gt;CANCELLED&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param listQueriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListQueriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDateRangeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidQueryStatusException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ListQueriesResponse listQueries(String xAmzTarget, ListQueriesRequest listQueriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListQueriesResponse> localVarResp = listQueriesWithHttpInfo(xAmzTarget, listQueriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of queries and query statuses for the past seven days. You must specify an ARN value for &lt;code&gt;EventDataStore&lt;/code&gt;. Optionally, to shorten the list of results, you can specify a time range, formatted as timestamps, by adding &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; parameters, and a &lt;code&gt;QueryStatus&lt;/code&gt; value. Valid values for &lt;code&gt;QueryStatus&lt;/code&gt; include &lt;code&gt;QUEUED&lt;/code&gt;, &lt;code&gt;RUNNING&lt;/code&gt;, &lt;code&gt;FINISHED&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;TIMED_OUT&lt;/code&gt;, or &lt;code&gt;CANCELLED&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param listQueriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListQueriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDateRangeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidQueryStatusException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListQueriesResponse> listQueriesWithHttpInfo(String xAmzTarget, ListQueriesRequest listQueriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listQueriesValidateBeforeCall(xAmzTarget, listQueriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListQueriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of queries and query statuses for the past seven days. You must specify an ARN value for &lt;code&gt;EventDataStore&lt;/code&gt;. Optionally, to shorten the list of results, you can specify a time range, formatted as timestamps, by adding &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; parameters, and a &lt;code&gt;QueryStatus&lt;/code&gt; value. Valid values for &lt;code&gt;QueryStatus&lt;/code&gt; include &lt;code&gt;QUEUED&lt;/code&gt;, &lt;code&gt;RUNNING&lt;/code&gt;, &lt;code&gt;FINISHED&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;TIMED_OUT&lt;/code&gt;, or &lt;code&gt;CANCELLED&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param listQueriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidDateRangeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidQueryStatusException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listQueriesAsync(String xAmzTarget, ListQueriesRequest listQueriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListQueriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listQueriesValidateBeforeCall(xAmzTarget, listQueriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListQueriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTags
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTokenException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsCall(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsValidateBeforeCall(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTags(Async)");
        }

        // verify the required parameter 'listTagsRequest' is set
        if (listTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsRequest' when calling listTags(Async)");
        }

        return listTagsCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * Lists the tags for the specified trails, event data stores, or channels in the current Region.
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTokenException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsResponse listTags(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListTagsResponse> localVarResp = listTagsWithHttpInfo(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the tags for the specified trails, event data stores, or channels in the current Region.
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTokenException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsResponse> listTagsWithHttpInfo(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTagsValidateBeforeCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the tags for the specified trails, event data stores, or channels in the current Region.
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidTokenException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsAsync(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsValidateBeforeCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrails
     * @param xAmzTarget  (required)
     * @param listTrailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrailsCall(String xAmzTarget, ListTrailsRequest listTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTrailsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.ListTrails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrailsValidateBeforeCall(String xAmzTarget, ListTrailsRequest listTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTrails(Async)");
        }

        // verify the required parameter 'listTrailsRequest' is set
        if (listTrailsRequest == null) {
            throw new ApiException("Missing the required parameter 'listTrailsRequest' when calling listTrails(Async)");
        }

        return listTrailsCall(xAmzTarget, listTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * Lists trails that are in the current account.
     * @param xAmzTarget  (required)
     * @param listTrailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTrailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ListTrailsResponse listTrails(String xAmzTarget, ListTrailsRequest listTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListTrailsResponse> localVarResp = listTrailsWithHttpInfo(xAmzTarget, listTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists trails that are in the current account.
     * @param xAmzTarget  (required)
     * @param listTrailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTrailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrailsResponse> listTrailsWithHttpInfo(String xAmzTarget, ListTrailsRequest listTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTrailsValidateBeforeCall(xAmzTarget, listTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTrailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists trails that are in the current account.
     * @param xAmzTarget  (required)
     * @param listTrailsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrailsAsync(String xAmzTarget, ListTrailsRequest listTrailsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListTrailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrailsValidateBeforeCall(xAmzTarget, listTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTrailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lookupEvents
     * @param xAmzTarget  (required)
     * @param lookupEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidLookupAttributesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTimeRangeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupEventsCall(String xAmzTarget, LookupEventsRequest lookupEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lookupEventsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.LookupEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupEventsValidateBeforeCall(String xAmzTarget, LookupEventsRequest lookupEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling lookupEvents(Async)");
        }

        // verify the required parameter 'lookupEventsRequest' is set
        if (lookupEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'lookupEventsRequest' when calling lookupEvents(Async)");
        }

        return lookupEventsCall(xAmzTarget, lookupEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Looks up &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events\&quot;&gt;management events&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-insights-events\&quot;&gt;CloudTrail Insights events&lt;/a&gt; that are captured by CloudTrail. You can look up events that occurred in a Region within the last 90 days. Lookup supports the following attributes for management events:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services access key&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event source&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Read only&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Resource name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Resource type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;User name&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lookup supports the following attributes for Insights events:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Event ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event source&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All attributes are optional. The default number of results returned is 50, with a maximum of 50 possible. The response includes a token that you can use to get the next page of results.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The rate of lookup requests is limited to two per second, per account, per Region. If this limit is exceeded, a throttling error occurs.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param lookupEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return LookupEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidLookupAttributesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTimeRangeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public LookupEventsResponse lookupEvents(String xAmzTarget, LookupEventsRequest lookupEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<LookupEventsResponse> localVarResp = lookupEventsWithHttpInfo(xAmzTarget, lookupEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Looks up &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events\&quot;&gt;management events&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-insights-events\&quot;&gt;CloudTrail Insights events&lt;/a&gt; that are captured by CloudTrail. You can look up events that occurred in a Region within the last 90 days. Lookup supports the following attributes for management events:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services access key&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event source&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Read only&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Resource name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Resource type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;User name&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lookup supports the following attributes for Insights events:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Event ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event source&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All attributes are optional. The default number of results returned is 50, with a maximum of 50 possible. The response includes a token that you can use to get the next page of results.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The rate of lookup requests is limited to two per second, per account, per Region. If this limit is exceeded, a throttling error occurs.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param lookupEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;LookupEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidLookupAttributesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTimeRangeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LookupEventsResponse> lookupEventsWithHttpInfo(String xAmzTarget, LookupEventsRequest lookupEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = lookupEventsValidateBeforeCall(xAmzTarget, lookupEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<LookupEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Looks up &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events\&quot;&gt;management events&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-insights-events\&quot;&gt;CloudTrail Insights events&lt;/a&gt; that are captured by CloudTrail. You can look up events that occurred in a Region within the last 90 days. Lookup supports the following attributes for management events:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services access key&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event source&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Read only&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Resource name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Resource type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;User name&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lookup supports the following attributes for Insights events:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Event ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event source&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All attributes are optional. The default number of results returned is 50, with a maximum of 50 possible. The response includes a token that you can use to get the next page of results.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The rate of lookup requests is limited to two per second, per account, per Region. If this limit is exceeded, a throttling error occurs.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param lookupEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidLookupAttributesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTimeRangeException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidMaxResultsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupEventsAsync(String xAmzTarget, LookupEventsRequest lookupEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<LookupEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupEventsValidateBeforeCall(xAmzTarget, lookupEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<LookupEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putEventSelectors
     * @param xAmzTarget  (required)
     * @param putEventSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putEventSelectorsCall(String xAmzTarget, PutEventSelectorsRequest putEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putEventSelectorsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutEventSelectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putEventSelectorsValidateBeforeCall(String xAmzTarget, PutEventSelectorsRequest putEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putEventSelectors(Async)");
        }

        // verify the required parameter 'putEventSelectorsRequest' is set
        if (putEventSelectorsRequest == null) {
            throw new ApiException("Missing the required parameter 'putEventSelectorsRequest' when calling putEventSelectors(Async)");
        }

        return putEventSelectorsCall(xAmzTarget, putEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Configures an event selector or advanced event selectors for your trail. Use event selectors or advanced event selectors to specify management and data event settings for your trail. If you want your trail to log Insights events, be sure the event selector enables logging of the Insights event types you want configured for your trail. For more information about logging Insights events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html\&quot;&gt;Logging Insights events for trails&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;. By default, trails created without specific event selectors are configured to log all read and write management events, and no data events.&lt;/p&gt; &lt;p&gt;When an event occurs in your account, CloudTrail evaluates the event selectors or advanced event selectors in all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn&#39;t match any event selector, the trail doesn&#39;t log the event.&lt;/p&gt; &lt;p&gt;Example&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;You create an event selector for a trail and specify that you want write-only events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The EC2 &lt;code&gt;GetConsoleOutput&lt;/code&gt; and &lt;code&gt;RunInstances&lt;/code&gt; API operations occur in your account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CloudTrail evaluates whether the events match your event selectors.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;RunInstances&lt;/code&gt; is a write-only event and it matches your event selector. The trail logs the event.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;GetConsoleOutput&lt;/code&gt; is a read-only event that doesn&#39;t match your event selector. The trail doesn&#39;t log the event. &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The &lt;code&gt;PutEventSelectors&lt;/code&gt; operation must be called from the Region in which the trail was created; otherwise, an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; exception is thrown.&lt;/p&gt; &lt;p&gt;You can configure up to five event selectors for each trail. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html\&quot;&gt;Logging management events&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html\&quot;&gt;Quotas in CloudTrail&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can add advanced event selectors, and conditions for your advanced event selectors, up to a maximum of 500 values for all conditions and selectors on a trail. You can use either &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; or &lt;code&gt;EventSelectors&lt;/code&gt;, but not both. If you apply &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; to a trail, any existing &lt;code&gt;EventSelectors&lt;/code&gt; are overwritten. For more information about advanced event selectors, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putEventSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutEventSelectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public PutEventSelectorsResponse putEventSelectors(String xAmzTarget, PutEventSelectorsRequest putEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutEventSelectorsResponse> localVarResp = putEventSelectorsWithHttpInfo(xAmzTarget, putEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Configures an event selector or advanced event selectors for your trail. Use event selectors or advanced event selectors to specify management and data event settings for your trail. If you want your trail to log Insights events, be sure the event selector enables logging of the Insights event types you want configured for your trail. For more information about logging Insights events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html\&quot;&gt;Logging Insights events for trails&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;. By default, trails created without specific event selectors are configured to log all read and write management events, and no data events.&lt;/p&gt; &lt;p&gt;When an event occurs in your account, CloudTrail evaluates the event selectors or advanced event selectors in all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn&#39;t match any event selector, the trail doesn&#39;t log the event.&lt;/p&gt; &lt;p&gt;Example&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;You create an event selector for a trail and specify that you want write-only events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The EC2 &lt;code&gt;GetConsoleOutput&lt;/code&gt; and &lt;code&gt;RunInstances&lt;/code&gt; API operations occur in your account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CloudTrail evaluates whether the events match your event selectors.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;RunInstances&lt;/code&gt; is a write-only event and it matches your event selector. The trail logs the event.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;GetConsoleOutput&lt;/code&gt; is a read-only event that doesn&#39;t match your event selector. The trail doesn&#39;t log the event. &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The &lt;code&gt;PutEventSelectors&lt;/code&gt; operation must be called from the Region in which the trail was created; otherwise, an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; exception is thrown.&lt;/p&gt; &lt;p&gt;You can configure up to five event selectors for each trail. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html\&quot;&gt;Logging management events&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html\&quot;&gt;Quotas in CloudTrail&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can add advanced event selectors, and conditions for your advanced event selectors, up to a maximum of 500 values for all conditions and selectors on a trail. You can use either &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; or &lt;code&gt;EventSelectors&lt;/code&gt;, but not both. If you apply &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; to a trail, any existing &lt;code&gt;EventSelectors&lt;/code&gt; are overwritten. For more information about advanced event selectors, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putEventSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutEventSelectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutEventSelectorsResponse> putEventSelectorsWithHttpInfo(String xAmzTarget, PutEventSelectorsRequest putEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putEventSelectorsValidateBeforeCall(xAmzTarget, putEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutEventSelectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Configures an event selector or advanced event selectors for your trail. Use event selectors or advanced event selectors to specify management and data event settings for your trail. If you want your trail to log Insights events, be sure the event selector enables logging of the Insights event types you want configured for your trail. For more information about logging Insights events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html\&quot;&gt;Logging Insights events for trails&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;. By default, trails created without specific event selectors are configured to log all read and write management events, and no data events.&lt;/p&gt; &lt;p&gt;When an event occurs in your account, CloudTrail evaluates the event selectors or advanced event selectors in all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn&#39;t match any event selector, the trail doesn&#39;t log the event.&lt;/p&gt; &lt;p&gt;Example&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;You create an event selector for a trail and specify that you want write-only events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The EC2 &lt;code&gt;GetConsoleOutput&lt;/code&gt; and &lt;code&gt;RunInstances&lt;/code&gt; API operations occur in your account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CloudTrail evaluates whether the events match your event selectors.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;RunInstances&lt;/code&gt; is a write-only event and it matches your event selector. The trail logs the event.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;GetConsoleOutput&lt;/code&gt; is a read-only event that doesn&#39;t match your event selector. The trail doesn&#39;t log the event. &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The &lt;code&gt;PutEventSelectors&lt;/code&gt; operation must be called from the Region in which the trail was created; otherwise, an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; exception is thrown.&lt;/p&gt; &lt;p&gt;You can configure up to five event selectors for each trail. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html\&quot;&gt;Logging management events&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html\&quot;&gt;Quotas in CloudTrail&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can add advanced event selectors, and conditions for your advanced event selectors, up to a maximum of 500 values for all conditions and selectors on a trail. You can use either &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; or &lt;code&gt;EventSelectors&lt;/code&gt;, but not both. If you apply &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; to a trail, any existing &lt;code&gt;EventSelectors&lt;/code&gt; are overwritten. For more information about advanced event selectors, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putEventSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putEventSelectorsAsync(String xAmzTarget, PutEventSelectorsRequest putEventSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutEventSelectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putEventSelectorsValidateBeforeCall(xAmzTarget, putEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutEventSelectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putInsightSelectors
     * @param xAmzTarget  (required)
     * @param putInsightSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInsightSelectorsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putInsightSelectorsCall(String xAmzTarget, PutInsightSelectorsRequest putInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putInsightSelectorsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutInsightSelectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putInsightSelectorsValidateBeforeCall(String xAmzTarget, PutInsightSelectorsRequest putInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putInsightSelectors(Async)");
        }

        // verify the required parameter 'putInsightSelectorsRequest' is set
        if (putInsightSelectorsRequest == null) {
            throw new ApiException("Missing the required parameter 'putInsightSelectorsRequest' when calling putInsightSelectors(Async)");
        }

        return putInsightSelectorsCall(xAmzTarget, putInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail. You also use &lt;code&gt;PutInsightSelectors&lt;/code&gt; to turn off Insights event logging, by passing an empty list of insight types. The valid Insights event types in this release are &lt;code&gt;ApiErrorRateInsight&lt;/code&gt; and &lt;code&gt;ApiCallRateInsight&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To log CloudTrail Insights events on API call volume, the trail must log &lt;code&gt;write&lt;/code&gt; management events. To log CloudTrail Insights events on API error rate, the trail must log &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; management events. You can call &lt;code&gt;GetEventSelectors&lt;/code&gt; on a trail to check whether the trail logs management events.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putInsightSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutInsightSelectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInsightSelectorsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public PutInsightSelectorsResponse putInsightSelectors(String xAmzTarget, PutInsightSelectorsRequest putInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutInsightSelectorsResponse> localVarResp = putInsightSelectorsWithHttpInfo(xAmzTarget, putInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail. You also use &lt;code&gt;PutInsightSelectors&lt;/code&gt; to turn off Insights event logging, by passing an empty list of insight types. The valid Insights event types in this release are &lt;code&gt;ApiErrorRateInsight&lt;/code&gt; and &lt;code&gt;ApiCallRateInsight&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To log CloudTrail Insights events on API call volume, the trail must log &lt;code&gt;write&lt;/code&gt; management events. To log CloudTrail Insights events on API error rate, the trail must log &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; management events. You can call &lt;code&gt;GetEventSelectors&lt;/code&gt; on a trail to check whether the trail logs management events.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putInsightSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutInsightSelectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInsightSelectorsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutInsightSelectorsResponse> putInsightSelectorsWithHttpInfo(String xAmzTarget, PutInsightSelectorsRequest putInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putInsightSelectorsValidateBeforeCall(xAmzTarget, putInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutInsightSelectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail. You also use &lt;code&gt;PutInsightSelectors&lt;/code&gt; to turn off Insights event logging, by passing an empty list of insight types. The valid Insights event types in this release are &lt;code&gt;ApiErrorRateInsight&lt;/code&gt; and &lt;code&gt;ApiCallRateInsight&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To log CloudTrail Insights events on API call volume, the trail must log &lt;code&gt;write&lt;/code&gt; management events. To log CloudTrail Insights events on API error rate, the trail must log &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; management events. You can call &lt;code&gt;GetEventSelectors&lt;/code&gt; on a trail to check whether the trail logs management events.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param putInsightSelectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidInsightSelectorsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putInsightSelectorsAsync(String xAmzTarget, PutInsightSelectorsRequest putInsightSelectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutInsightSelectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putInsightSelectorsValidateBeforeCall(xAmzTarget, putInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutInsightSelectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putResourcePolicy
     * @param xAmzTarget  (required)
     * @param putResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourcePolicyNotValidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putResourcePolicyCall(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putResourcePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.PutResourcePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putResourcePolicyValidateBeforeCall(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putResourcePolicy(Async)");
        }

        // verify the required parameter 'putResourcePolicyRequest' is set
        if (putResourcePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'putResourcePolicyRequest' when calling putResourcePolicy(Async)");
        }

        return putResourcePolicyCall(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Attaches a resource-based permission policy to a CloudTrail channel that is used for an integration with an event source outside of Amazon Web Services. For more information about resource-based policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/security_iam_resource-based-policy-examples.html\&quot;&gt;CloudTrail resource-based policy examples&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;. 
     * @param xAmzTarget  (required)
     * @param putResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutResourcePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourcePolicyNotValidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public PutResourcePolicyResponse putResourcePolicy(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutResourcePolicyResponse> localVarResp = putResourcePolicyWithHttpInfo(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Attaches a resource-based permission policy to a CloudTrail channel that is used for an integration with an event source outside of Amazon Web Services. For more information about resource-based policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/security_iam_resource-based-policy-examples.html\&quot;&gt;CloudTrail resource-based policy examples&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;. 
     * @param xAmzTarget  (required)
     * @param putResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutResourcePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourcePolicyNotValidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutResourcePolicyResponse> putResourcePolicyWithHttpInfo(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putResourcePolicyValidateBeforeCall(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutResourcePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Attaches a resource-based permission policy to a CloudTrail channel that is used for an integration with an event source outside of Amazon Web Services. For more information about resource-based policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/security_iam_resource-based-policy-examples.html\&quot;&gt;CloudTrail resource-based policy examples&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;. 
     * @param xAmzTarget  (required)
     * @param putResourcePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceARNNotValidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourcePolicyNotValidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putResourcePolicyAsync(String xAmzTarget, PutResourcePolicyRequest putResourcePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutResourcePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putResourcePolicyValidateBeforeCall(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutResourcePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerOrganizationDelegatedAdmin
     * @param xAmzTarget  (required)
     * @param registerOrganizationDelegatedAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountRegisteredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CannotDelegateManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DelegatedAdminAccountLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerOrganizationDelegatedAdminCall(String xAmzTarget, RegisterOrganizationDelegatedAdminRequest registerOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerOrganizationDelegatedAdminRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RegisterOrganizationDelegatedAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerOrganizationDelegatedAdminValidateBeforeCall(String xAmzTarget, RegisterOrganizationDelegatedAdminRequest registerOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling registerOrganizationDelegatedAdmin(Async)");
        }

        // verify the required parameter 'registerOrganizationDelegatedAdminRequest' is set
        if (registerOrganizationDelegatedAdminRequest == null) {
            throw new ApiException("Missing the required parameter 'registerOrganizationDelegatedAdminRequest' when calling registerOrganizationDelegatedAdmin(Async)");
        }

        return registerOrganizationDelegatedAdminCall(xAmzTarget, registerOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Registers an organization’s member account as the CloudTrail delegated administrator.
     * @param xAmzTarget  (required)
     * @param registerOrganizationDelegatedAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountRegisteredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CannotDelegateManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DelegatedAdminAccountLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public Object registerOrganizationDelegatedAdmin(String xAmzTarget, RegisterOrganizationDelegatedAdminRequest registerOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = registerOrganizationDelegatedAdminWithHttpInfo(xAmzTarget, registerOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Registers an organization’s member account as the CloudTrail delegated administrator.
     * @param xAmzTarget  (required)
     * @param registerOrganizationDelegatedAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountRegisteredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CannotDelegateManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DelegatedAdminAccountLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> registerOrganizationDelegatedAdminWithHttpInfo(String xAmzTarget, RegisterOrganizationDelegatedAdminRequest registerOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = registerOrganizationDelegatedAdminValidateBeforeCall(xAmzTarget, registerOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Registers an organization’s member account as the CloudTrail delegated administrator.
     * @param xAmzTarget  (required)
     * @param registerOrganizationDelegatedAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountRegisteredException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccountNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CannotDelegateManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DelegatedAdminAccountLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotOrganizationManagementAccountException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerOrganizationDelegatedAdminAsync(String xAmzTarget, RegisterOrganizationDelegatedAdminRequest registerOrganizationDelegatedAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerOrganizationDelegatedAdminValidateBeforeCall(xAmzTarget, registerOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTags
     * @param xAmzTarget  (required)
     * @param removeTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTagsCall(String xAmzTarget, RemoveTagsRequest removeTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTagsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RemoveTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagsValidateBeforeCall(String xAmzTarget, RemoveTagsRequest removeTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling removeTags(Async)");
        }

        // verify the required parameter 'removeTagsRequest' is set
        if (removeTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'removeTagsRequest' when calling removeTags(Async)");
        }

        return removeTagsCall(xAmzTarget, removeTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the specified tags from a trail, event data store, or channel.
     * @param xAmzTarget  (required)
     * @param removeTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public Object removeTags(String xAmzTarget, RemoveTagsRequest removeTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = removeTagsWithHttpInfo(xAmzTarget, removeTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the specified tags from a trail, event data store, or channel.
     * @param xAmzTarget  (required)
     * @param removeTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeTagsWithHttpInfo(String xAmzTarget, RemoveTagsRequest removeTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = removeTagsValidateBeforeCall(xAmzTarget, removeTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the specified tags from a trail, event data store, or channel.
     * @param xAmzTarget  (required)
     * @param removeTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceTypeNotSupportedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTagsAsync(String xAmzTarget, RemoveTagsRequest removeTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagsValidateBeforeCall(xAmzTarget, removeTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreEventDataStore
     * @param xAmzTarget  (required)
     * @param restoreEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreEventDataStoreCall(String xAmzTarget, RestoreEventDataStoreRequest restoreEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreEventDataStoreRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.RestoreEventDataStore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreEventDataStoreValidateBeforeCall(String xAmzTarget, RestoreEventDataStoreRequest restoreEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling restoreEventDataStore(Async)");
        }

        // verify the required parameter 'restoreEventDataStoreRequest' is set
        if (restoreEventDataStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'restoreEventDataStoreRequest' when calling restoreEventDataStore(Async)");
        }

        return restoreEventDataStoreCall(xAmzTarget, restoreEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Restores a deleted event data store specified by &lt;code&gt;EventDataStore&lt;/code&gt;, which accepts an event data store ARN. You can only restore a deleted event data store within the seven-day wait period after deletion. Restoring an event data store can take several minutes, depending on the size of the event data store.
     * @param xAmzTarget  (required)
     * @param restoreEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RestoreEventDataStoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
     </table>
     */
    public RestoreEventDataStoreResponse restoreEventDataStore(String xAmzTarget, RestoreEventDataStoreRequest restoreEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RestoreEventDataStoreResponse> localVarResp = restoreEventDataStoreWithHttpInfo(xAmzTarget, restoreEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Restores a deleted event data store specified by &lt;code&gt;EventDataStore&lt;/code&gt;, which accepts an event data store ARN. You can only restore a deleted event data store within the seven-day wait period after deletion. Restoring an event data store can take several minutes, depending on the size of the event data store.
     * @param xAmzTarget  (required)
     * @param restoreEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RestoreEventDataStoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreEventDataStoreResponse> restoreEventDataStoreWithHttpInfo(String xAmzTarget, RestoreEventDataStoreRequest restoreEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = restoreEventDataStoreValidateBeforeCall(xAmzTarget, restoreEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RestoreEventDataStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restores a deleted event data store specified by &lt;code&gt;EventDataStore&lt;/code&gt;, which accepts an event data store ARN. You can only restore a deleted event data store within the seven-day wait period after deletion. Restoring an event data store can take several minutes, depending on the size of the event data store.
     * @param xAmzTarget  (required)
     * @param restoreEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreMaxLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreEventDataStoreAsync(String xAmzTarget, RestoreEventDataStoreRequest restoreEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RestoreEventDataStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreEventDataStoreValidateBeforeCall(xAmzTarget, restoreEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RestoreEventDataStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startEventDataStoreIngestion
     * @param xAmzTarget  (required)
     * @param startEventDataStoreIngestionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startEventDataStoreIngestionCall(String xAmzTarget, StartEventDataStoreIngestionRequest startEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startEventDataStoreIngestionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartEventDataStoreIngestion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startEventDataStoreIngestionValidateBeforeCall(String xAmzTarget, StartEventDataStoreIngestionRequest startEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startEventDataStoreIngestion(Async)");
        }

        // verify the required parameter 'startEventDataStoreIngestionRequest' is set
        if (startEventDataStoreIngestionRequest == null) {
            throw new ApiException("Missing the required parameter 'startEventDataStoreIngestionRequest' when calling startEventDataStoreIngestion(Async)");
        }

        return startEventDataStoreIngestionCall(xAmzTarget, startEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Starts the ingestion of live events on an event data store specified as either an ARN or the ID portion of the ARN. To start ingestion, the event data store &lt;code&gt;Status&lt;/code&gt; must be &lt;code&gt;STOPPED_INGESTION&lt;/code&gt; and the &lt;code&gt;eventCategory&lt;/code&gt; must be &lt;code&gt;Management&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, or &lt;code&gt;ConfigurationItem&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param startEventDataStoreIngestionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public Object startEventDataStoreIngestion(String xAmzTarget, StartEventDataStoreIngestionRequest startEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = startEventDataStoreIngestionWithHttpInfo(xAmzTarget, startEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts the ingestion of live events on an event data store specified as either an ARN or the ID portion of the ARN. To start ingestion, the event data store &lt;code&gt;Status&lt;/code&gt; must be &lt;code&gt;STOPPED_INGESTION&lt;/code&gt; and the &lt;code&gt;eventCategory&lt;/code&gt; must be &lt;code&gt;Management&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, or &lt;code&gt;ConfigurationItem&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param startEventDataStoreIngestionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> startEventDataStoreIngestionWithHttpInfo(String xAmzTarget, StartEventDataStoreIngestionRequest startEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startEventDataStoreIngestionValidateBeforeCall(xAmzTarget, startEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts the ingestion of live events on an event data store specified as either an ARN or the ID portion of the ARN. To start ingestion, the event data store &lt;code&gt;Status&lt;/code&gt; must be &lt;code&gt;STOPPED_INGESTION&lt;/code&gt; and the &lt;code&gt;eventCategory&lt;/code&gt; must be &lt;code&gt;Management&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, or &lt;code&gt;ConfigurationItem&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param startEventDataStoreIngestionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startEventDataStoreIngestionAsync(String xAmzTarget, StartEventDataStoreIngestionRequest startEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = startEventDataStoreIngestionValidateBeforeCall(xAmzTarget, startEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startImport
     * @param xAmzTarget  (required)
     * @param startImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidImportSourceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startImportCall(String xAmzTarget, StartImportRequest startImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startImportRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartImport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startImportValidateBeforeCall(String xAmzTarget, StartImportRequest startImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startImport(Async)");
        }

        // verify the required parameter 'startImportRequest' is set
        if (startImportRequest == null) {
            throw new ApiException("Missing the required parameter 'startImportRequest' when calling startImport(Async)");
        }

        return startImportCall(xAmzTarget, startImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Starts an import of logged trail events from a source S3 bucket to a destination event data store. By default, CloudTrail only imports events contained in the S3 bucket&#39;s &lt;code&gt;CloudTrail&lt;/code&gt; prefix and the prefixes inside the &lt;code&gt;CloudTrail&lt;/code&gt; prefix, and does not check prefixes for other Amazon Web Services services. If you want to import CloudTrail events contained in another prefix, you must include the prefix in the &lt;code&gt;S3LocationUri&lt;/code&gt;. For more considerations about importing trail events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-copy-trail-to-lake.html#cloudtrail-trail-copy-considerations\&quot;&gt;Considerations&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you start a new import, the &lt;code&gt;Destinations&lt;/code&gt; and &lt;code&gt;ImportSource&lt;/code&gt; parameters are required. Before starting a new import, disable any access control lists (ACLs) attached to the source S3 bucket. For more information about disabling ACLs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html\&quot;&gt;Controlling ownership of objects and disabling ACLs for your bucket&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you retry an import, the &lt;code&gt;ImportID&lt;/code&gt; parameter is required. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If the destination event data store is for an organization, you must use the management account to import trail events. You cannot use the delegated administrator account for the organization. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidImportSourceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public StartImportResponse startImport(String xAmzTarget, StartImportRequest startImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartImportResponse> localVarResp = startImportWithHttpInfo(xAmzTarget, startImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Starts an import of logged trail events from a source S3 bucket to a destination event data store. By default, CloudTrail only imports events contained in the S3 bucket&#39;s &lt;code&gt;CloudTrail&lt;/code&gt; prefix and the prefixes inside the &lt;code&gt;CloudTrail&lt;/code&gt; prefix, and does not check prefixes for other Amazon Web Services services. If you want to import CloudTrail events contained in another prefix, you must include the prefix in the &lt;code&gt;S3LocationUri&lt;/code&gt;. For more considerations about importing trail events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-copy-trail-to-lake.html#cloudtrail-trail-copy-considerations\&quot;&gt;Considerations&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you start a new import, the &lt;code&gt;Destinations&lt;/code&gt; and &lt;code&gt;ImportSource&lt;/code&gt; parameters are required. Before starting a new import, disable any access control lists (ACLs) attached to the source S3 bucket. For more information about disabling ACLs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html\&quot;&gt;Controlling ownership of objects and disabling ACLs for your bucket&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you retry an import, the &lt;code&gt;ImportID&lt;/code&gt; parameter is required. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If the destination event data store is for an organization, you must use the management account to import trail events. You cannot use the delegated administrator account for the organization. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidImportSourceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartImportResponse> startImportWithHttpInfo(String xAmzTarget, StartImportRequest startImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startImportValidateBeforeCall(xAmzTarget, startImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Starts an import of logged trail events from a source S3 bucket to a destination event data store. By default, CloudTrail only imports events contained in the S3 bucket&#39;s &lt;code&gt;CloudTrail&lt;/code&gt; prefix and the prefixes inside the &lt;code&gt;CloudTrail&lt;/code&gt; prefix, and does not check prefixes for other Amazon Web Services services. If you want to import CloudTrail events contained in another prefix, you must include the prefix in the &lt;code&gt;S3LocationUri&lt;/code&gt;. For more considerations about importing trail events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-copy-trail-to-lake.html#cloudtrail-trail-copy-considerations\&quot;&gt;Considerations&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you start a new import, the &lt;code&gt;Destinations&lt;/code&gt; and &lt;code&gt;ImportSource&lt;/code&gt; parameters are required. Before starting a new import, disable any access control lists (ACLs) attached to the source S3 bucket. For more information about disabling ACLs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html\&quot;&gt;Controlling ownership of objects and disabling ACLs for your bucket&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you retry an import, the &lt;code&gt;ImportID&lt;/code&gt; parameter is required. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If the destination event data store is for an organization, you must use the management account to import trail events. You cannot use the delegated administrator account for the organization. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param startImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccountHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidImportSourceException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startImportAsync(String xAmzTarget, StartImportRequest startImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startImportValidateBeforeCall(xAmzTarget, startImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startLogging
     * @param xAmzTarget  (required)
     * @param startLoggingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startLoggingCall(String xAmzTarget, StartLoggingRequest startLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startLoggingRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartLogging";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startLoggingValidateBeforeCall(String xAmzTarget, StartLoggingRequest startLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startLogging(Async)");
        }

        // verify the required parameter 'startLoggingRequest' is set
        if (startLoggingRequest == null) {
            throw new ApiException("Missing the required parameter 'startLoggingRequest' when calling startLogging(Async)");
        }

        return startLoggingCall(xAmzTarget, startLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Starts the recording of Amazon Web Services API calls and log file delivery for a trail. For a trail that is enabled in all Regions, this operation must be called from the Region in which the trail was created. This operation cannot be called on the shadow trails (replicated trails in other Regions) of a trail that is enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param startLoggingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public Object startLogging(String xAmzTarget, StartLoggingRequest startLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = startLoggingWithHttpInfo(xAmzTarget, startLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts the recording of Amazon Web Services API calls and log file delivery for a trail. For a trail that is enabled in all Regions, this operation must be called from the Region in which the trail was created. This operation cannot be called on the shadow trails (replicated trails in other Regions) of a trail that is enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param startLoggingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> startLoggingWithHttpInfo(String xAmzTarget, StartLoggingRequest startLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startLoggingValidateBeforeCall(xAmzTarget, startLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts the recording of Amazon Web Services API calls and log file delivery for a trail. For a trail that is enabled in all Regions, this operation must be called from the Region in which the trail was created. This operation cannot be called on the shadow trails (replicated trails in other Regions) of a trail that is enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param startLoggingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startLoggingAsync(String xAmzTarget, StartLoggingRequest startLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = startLoggingValidateBeforeCall(xAmzTarget, startLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startQuery
     * @param xAmzTarget  (required)
     * @param startQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidQueryStatementException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MaxConcurrentQueriesException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startQueryCall(String xAmzTarget, StartQueryRequest startQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startQueryRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartQuery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startQueryValidateBeforeCall(String xAmzTarget, StartQueryRequest startQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startQuery(Async)");
        }

        // verify the required parameter 'startQueryRequest' is set
        if (startQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'startQueryRequest' when calling startQuery(Async)");
        }

        return startQueryCall(xAmzTarget, startQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts a CloudTrail Lake query. Use the &lt;code&gt;QueryStatement&lt;/code&gt; parameter to provide your SQL query, enclosed in single quotation marks. Use the optional &lt;code&gt;DeliveryS3Uri&lt;/code&gt; parameter to deliver the query results to an S3 bucket.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartQuery&lt;/code&gt; requires you specify either the &lt;code&gt;QueryStatement&lt;/code&gt; parameter, or a &lt;code&gt;QueryAlias&lt;/code&gt; and any &lt;code&gt;QueryParameters&lt;/code&gt;. In the current release, the &lt;code&gt;QueryAlias&lt;/code&gt; and &lt;code&gt;QueryParameters&lt;/code&gt; parameters are used only for the queries that populate the CloudTrail Lake dashboards.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidQueryStatementException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MaxConcurrentQueriesException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public StartQueryResponse startQuery(String xAmzTarget, StartQueryRequest startQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartQueryResponse> localVarResp = startQueryWithHttpInfo(xAmzTarget, startQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts a CloudTrail Lake query. Use the &lt;code&gt;QueryStatement&lt;/code&gt; parameter to provide your SQL query, enclosed in single quotation marks. Use the optional &lt;code&gt;DeliveryS3Uri&lt;/code&gt; parameter to deliver the query results to an S3 bucket.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartQuery&lt;/code&gt; requires you specify either the &lt;code&gt;QueryStatement&lt;/code&gt; parameter, or a &lt;code&gt;QueryAlias&lt;/code&gt; and any &lt;code&gt;QueryParameters&lt;/code&gt;. In the current release, the &lt;code&gt;QueryAlias&lt;/code&gt; and &lt;code&gt;QueryParameters&lt;/code&gt; parameters are used only for the queries that populate the CloudTrail Lake dashboards.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidQueryStatementException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MaxConcurrentQueriesException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartQueryResponse> startQueryWithHttpInfo(String xAmzTarget, StartQueryRequest startQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startQueryValidateBeforeCall(xAmzTarget, startQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts a CloudTrail Lake query. Use the &lt;code&gt;QueryStatement&lt;/code&gt; parameter to provide your SQL query, enclosed in single quotation marks. Use the optional &lt;code&gt;DeliveryS3Uri&lt;/code&gt; parameter to deliver the query results to an S3 bucket.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartQuery&lt;/code&gt; requires you specify either the &lt;code&gt;QueryStatement&lt;/code&gt; parameter, or a &lt;code&gt;QueryAlias&lt;/code&gt; and any &lt;code&gt;QueryParameters&lt;/code&gt;. In the current release, the &lt;code&gt;QueryAlias&lt;/code&gt; and &lt;code&gt;QueryParameters&lt;/code&gt; parameters are used only for the queries that populate the CloudTrail Lake dashboards.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startQueryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidQueryStatementException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MaxConcurrentQueriesException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startQueryAsync(String xAmzTarget, StartQueryRequest startQueryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startQueryValidateBeforeCall(xAmzTarget, startQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopEventDataStoreIngestion
     * @param xAmzTarget  (required)
     * @param stopEventDataStoreIngestionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopEventDataStoreIngestionCall(String xAmzTarget, StopEventDataStoreIngestionRequest stopEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopEventDataStoreIngestionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StopEventDataStoreIngestion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopEventDataStoreIngestionValidateBeforeCall(String xAmzTarget, StopEventDataStoreIngestionRequest stopEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling stopEventDataStoreIngestion(Async)");
        }

        // verify the required parameter 'stopEventDataStoreIngestionRequest' is set
        if (stopEventDataStoreIngestionRequest == null) {
            throw new ApiException("Missing the required parameter 'stopEventDataStoreIngestionRequest' when calling stopEventDataStoreIngestion(Async)");
        }

        return stopEventDataStoreIngestionCall(xAmzTarget, stopEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Stops the ingestion of live events on an event data store specified as either an ARN or the ID portion of the ARN. To stop ingestion, the event data store &lt;code&gt;Status&lt;/code&gt; must be &lt;code&gt;ENABLED&lt;/code&gt; and the &lt;code&gt;eventCategory&lt;/code&gt; must be &lt;code&gt;Management&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, or &lt;code&gt;ConfigurationItem&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param stopEventDataStoreIngestionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public Object stopEventDataStoreIngestion(String xAmzTarget, StopEventDataStoreIngestionRequest stopEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = stopEventDataStoreIngestionWithHttpInfo(xAmzTarget, stopEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops the ingestion of live events on an event data store specified as either an ARN or the ID portion of the ARN. To stop ingestion, the event data store &lt;code&gt;Status&lt;/code&gt; must be &lt;code&gt;ENABLED&lt;/code&gt; and the &lt;code&gt;eventCategory&lt;/code&gt; must be &lt;code&gt;Management&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, or &lt;code&gt;ConfigurationItem&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param stopEventDataStoreIngestionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> stopEventDataStoreIngestionWithHttpInfo(String xAmzTarget, StopEventDataStoreIngestionRequest stopEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = stopEventDataStoreIngestionValidateBeforeCall(xAmzTarget, stopEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops the ingestion of live events on an event data store specified as either an ARN or the ID portion of the ARN. To stop ingestion, the event data store &lt;code&gt;Status&lt;/code&gt; must be &lt;code&gt;ENABLED&lt;/code&gt; and the &lt;code&gt;eventCategory&lt;/code&gt; must be &lt;code&gt;Management&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, or &lt;code&gt;ConfigurationItem&lt;/code&gt;.
     * @param xAmzTarget  (required)
     * @param stopEventDataStoreIngestionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidEventDataStoreStatusException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopEventDataStoreIngestionAsync(String xAmzTarget, StopEventDataStoreIngestionRequest stopEventDataStoreIngestionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopEventDataStoreIngestionValidateBeforeCall(xAmzTarget, stopEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopImport
     * @param xAmzTarget  (required)
     * @param stopImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopImportCall(String xAmzTarget, StopImportRequest stopImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopImportRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StopImport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopImportValidateBeforeCall(String xAmzTarget, StopImportRequest stopImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling stopImport(Async)");
        }

        // verify the required parameter 'stopImportRequest' is set
        if (stopImportRequest == null) {
            throw new ApiException("Missing the required parameter 'stopImportRequest' when calling stopImport(Async)");
        }

        return stopImportCall(xAmzTarget, stopImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Stops a specified import. 
     * @param xAmzTarget  (required)
     * @param stopImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StopImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public StopImportResponse stopImport(String xAmzTarget, StopImportRequest stopImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StopImportResponse> localVarResp = stopImportWithHttpInfo(xAmzTarget, stopImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Stops a specified import. 
     * @param xAmzTarget  (required)
     * @param stopImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StopImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopImportResponse> stopImportWithHttpInfo(String xAmzTarget, StopImportRequest stopImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = stopImportValidateBeforeCall(xAmzTarget, stopImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StopImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Stops a specified import. 
     * @param xAmzTarget  (required)
     * @param stopImportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ImportNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopImportAsync(String xAmzTarget, StopImportRequest stopImportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StopImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopImportValidateBeforeCall(xAmzTarget, stopImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StopImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopLogging
     * @param xAmzTarget  (required)
     * @param stopLoggingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopLoggingCall(String xAmzTarget, StopLoggingRequest stopLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopLoggingRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StopLogging";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopLoggingValidateBeforeCall(String xAmzTarget, StopLoggingRequest stopLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling stopLogging(Async)");
        }

        // verify the required parameter 'stopLoggingRequest' is set
        if (stopLoggingRequest == null) {
            throw new ApiException("Missing the required parameter 'stopLoggingRequest' when calling stopLogging(Async)");
        }

        return stopLoggingCall(xAmzTarget, stopLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Suspends the recording of Amazon Web Services API calls and log file delivery for the specified trail. Under most circumstances, there is no need to use this action. You can update a trail without stopping it first. This action is the only way to stop recording. For a trail enabled in all Regions, this operation must be called from the Region in which the trail was created, or an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; will occur. This operation cannot be called on the shadow trails (replicated trails in other Regions) of a trail enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param stopLoggingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public Object stopLogging(String xAmzTarget, StopLoggingRequest stopLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = stopLoggingWithHttpInfo(xAmzTarget, stopLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Suspends the recording of Amazon Web Services API calls and log file delivery for the specified trail. Under most circumstances, there is no need to use this action. You can update a trail without stopping it first. This action is the only way to stop recording. For a trail enabled in all Regions, this operation must be called from the Region in which the trail was created, or an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; will occur. This operation cannot be called on the shadow trails (replicated trails in other Regions) of a trail enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param stopLoggingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> stopLoggingWithHttpInfo(String xAmzTarget, StopLoggingRequest stopLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = stopLoggingValidateBeforeCall(xAmzTarget, stopLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Suspends the recording of Amazon Web Services API calls and log file delivery for the specified trail. Under most circumstances, there is no need to use this action. You can update a trail without stopping it first. This action is the only way to stop recording. For a trail enabled in all Regions, this operation must be called from the Region in which the trail was created, or an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; will occur. This operation cannot be called on the shadow trails (replicated trails in other Regions) of a trail enabled in all Regions.
     * @param xAmzTarget  (required)
     * @param stopLoggingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopLoggingAsync(String xAmzTarget, StopLoggingRequest stopLoggingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopLoggingValidateBeforeCall(xAmzTarget, stopLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannel
     * @param xAmzTarget  (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChannelAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelCall(String xAmzTarget, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateChannelRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateChannel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelValidateBeforeCall(String xAmzTarget, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateChannel(Async)");
        }

        // verify the required parameter 'updateChannelRequest' is set
        if (updateChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'updateChannelRequest' when calling updateChannel(Async)");
        }

        return updateChannelCall(xAmzTarget, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates a channel specified by a required channel ARN or UUID.
     * @param xAmzTarget  (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChannelAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChannelResponse updateChannel(String xAmzTarget, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateChannelResponse> localVarResp = updateChannelWithHttpInfo(xAmzTarget, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a channel specified by a required channel ARN or UUID.
     * @param xAmzTarget  (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChannelAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateChannelResponse> updateChannelWithHttpInfo(String xAmzTarget, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(xAmzTarget, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a channel specified by a required channel ARN or UUID.
     * @param xAmzTarget  (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChannelARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChannelNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ChannelAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEventDataStoreCategoryException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelAsync(String xAmzTarget, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(xAmzTarget, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEventDataStore
     * @param xAmzTarget  (required)
     * @param updateEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventDataStoreCall(String xAmzTarget, UpdateEventDataStoreRequest updateEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEventDataStoreRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateEventDataStore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventDataStoreValidateBeforeCall(String xAmzTarget, UpdateEventDataStoreRequest updateEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateEventDataStore(Async)");
        }

        // verify the required parameter 'updateEventDataStoreRequest' is set
        if (updateEventDataStoreRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEventDataStoreRequest' when calling updateEventDataStore(Async)");
        }

        return updateEventDataStoreCall(xAmzTarget, updateEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates an event data store. The required &lt;code&gt;EventDataStore&lt;/code&gt; value is an ARN or the ID portion of the ARN. Other parameters are optional, but at least one optional parameter must be specified, or CloudTrail throws an error. &lt;code&gt;RetentionPeriod&lt;/code&gt; is in days, and valid values are integers between 90 and 2557. By default, &lt;code&gt;TerminationProtection&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;For event data stores for CloudTrail events, &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; includes or excludes management and data events in your event data store. For more information about &lt;code&gt;AdvancedEventSelectors&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_AdvancedEventSelector.html\&quot;&gt;AdvancedEventSelectors&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For event data stores for Config configuration items, Audit Manager evidence, or non-Amazon Web Services events, &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; includes events of that type in your event data store.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateEventDataStoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEventDataStoreResponse updateEventDataStore(String xAmzTarget, UpdateEventDataStoreRequest updateEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateEventDataStoreResponse> localVarResp = updateEventDataStoreWithHttpInfo(xAmzTarget, updateEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates an event data store. The required &lt;code&gt;EventDataStore&lt;/code&gt; value is an ARN or the ID portion of the ARN. Other parameters are optional, but at least one optional parameter must be specified, or CloudTrail throws an error. &lt;code&gt;RetentionPeriod&lt;/code&gt; is in days, and valid values are integers between 90 and 2557. By default, &lt;code&gt;TerminationProtection&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;For event data stores for CloudTrail events, &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; includes or excludes management and data events in your event data store. For more information about &lt;code&gt;AdvancedEventSelectors&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_AdvancedEventSelector.html\&quot;&gt;AdvancedEventSelectors&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For event data stores for Config configuration items, Audit Manager evidence, or non-Amazon Web Services events, &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; includes events of that type in your event data store.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateEventDataStoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateEventDataStoreResponse> updateEventDataStoreWithHttpInfo(String xAmzTarget, UpdateEventDataStoreRequest updateEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateEventDataStoreValidateBeforeCall(xAmzTarget, updateEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateEventDataStoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates an event data store. The required &lt;code&gt;EventDataStore&lt;/code&gt; value is an ARN or the ID portion of the ARN. Other parameters are optional, but at least one optional parameter must be specified, or CloudTrail throws an error. &lt;code&gt;RetentionPeriod&lt;/code&gt; is in days, and valid values are integers between 90 and 2557. By default, &lt;code&gt;TerminationProtection&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;For event data stores for CloudTrail events, &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; includes or excludes management and data events in your event data store. For more information about &lt;code&gt;AdvancedEventSelectors&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_AdvancedEventSelector.html\&quot;&gt;AdvancedEventSelectors&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For event data stores for Config configuration items, Audit Manager evidence, or non-Amazon Web Services events, &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; includes events of that type in your event data store.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateEventDataStoreRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> EventDataStoreAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> EventDataStoreARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> EventDataStoreNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> EventDataStoreHasOngoingImportException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InactiveEventDataStoreException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEventDataStoreAsync(String xAmzTarget, UpdateEventDataStoreRequest updateEventDataStoreRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateEventDataStoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventDataStoreValidateBeforeCall(xAmzTarget, updateEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateEventDataStoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrail
     * @param xAmzTarget  (required)
     * @param updateTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientSnsTopicPolicyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSnsTopicNameException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TrailNotProvidedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KmsKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidCloudWatchLogsLogGroupArnException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidCloudWatchLogsRoleArnException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> CloudWatchLogsDeliveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> CloudTrailInvalidClientTokenIdException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrailCall(String xAmzTarget, UpdateTrailRequest updateTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTrailRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.UpdateTrail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrailValidateBeforeCall(String xAmzTarget, UpdateTrailRequest updateTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateTrail(Async)");
        }

        // verify the required parameter 'updateTrailRequest' is set
        if (updateTrailRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTrailRequest' when calling updateTrail(Async)");
        }

        return updateTrailCall(xAmzTarget, updateTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates trail settings that control what events you are logging, and how to handle log files. Changes to a trail do not require stopping the CloudTrail service. Use this action to designate an existing bucket for log delivery. If the existing bucket has previously been a target for CloudTrail log files, an IAM policy exists for the bucket. &lt;code&gt;UpdateTrail&lt;/code&gt; must be called from the Region in which the trail was created; otherwise, an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; is thrown.
     * @param xAmzTarget  (required)
     * @param updateTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTrailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientSnsTopicPolicyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSnsTopicNameException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TrailNotProvidedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KmsKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidCloudWatchLogsLogGroupArnException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidCloudWatchLogsRoleArnException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> CloudWatchLogsDeliveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> CloudTrailInvalidClientTokenIdException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTrailResponse updateTrail(String xAmzTarget, UpdateTrailRequest updateTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTrailResponse> localVarResp = updateTrailWithHttpInfo(xAmzTarget, updateTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates trail settings that control what events you are logging, and how to handle log files. Changes to a trail do not require stopping the CloudTrail service. Use this action to designate an existing bucket for log delivery. If the existing bucket has previously been a target for CloudTrail log files, an IAM policy exists for the bucket. &lt;code&gt;UpdateTrail&lt;/code&gt; must be called from the Region in which the trail was created; otherwise, an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; is thrown.
     * @param xAmzTarget  (required)
     * @param updateTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTrailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientSnsTopicPolicyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSnsTopicNameException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TrailNotProvidedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KmsKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidCloudWatchLogsLogGroupArnException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidCloudWatchLogsRoleArnException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> CloudWatchLogsDeliveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> CloudTrailInvalidClientTokenIdException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTrailResponse> updateTrailWithHttpInfo(String xAmzTarget, UpdateTrailRequest updateTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTrailValidateBeforeCall(xAmzTarget, updateTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTrailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates trail settings that control what events you are logging, and how to handle log files. Changes to a trail do not require stopping the CloudTrail service. Use this action to designate an existing bucket for log delivery. If the existing bucket has previously been a target for CloudTrail log files, an IAM policy exists for the bucket. &lt;code&gt;UpdateTrail&lt;/code&gt; must be called from the Region in which the trail was created; otherwise, an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; is thrown.
     * @param xAmzTarget  (required)
     * @param updateTrailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> S3BucketDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientS3BucketPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientSnsTopicPolicyException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientEncryptionPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TrailNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidS3BucketNameException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidS3PrefixException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSnsTopicNameException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidKmsKeyIdException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidTrailNameException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TrailNotProvidedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidEventSelectorsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CloudTrailARNInvalidException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidHomeRegionException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> KmsKeyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> KmsKeyDisabledException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> KmsException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> InvalidCloudWatchLogsLogGroupArnException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InvalidCloudWatchLogsRoleArnException </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> CloudWatchLogsDeliveryUnavailableException </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> OperationNotPermittedException </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> CloudTrailAccessNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 505 </td><td> InsufficientDependencyServiceAccessPermissionException </td><td>  -  </td></tr>
        <tr><td> 506 </td><td> OrganizationsNotInUseException </td><td>  -  </td></tr>
        <tr><td> 507 </td><td> NotOrganizationMasterAccountException </td><td>  -  </td></tr>
        <tr><td> 508 </td><td> OrganizationNotInAllFeaturesModeException </td><td>  -  </td></tr>
        <tr><td> 509 </td><td> NoManagementAccountSLRExistsException </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> CloudTrailInvalidClientTokenIdException </td><td>  -  </td></tr>
        <tr><td> 511 </td><td> InvalidParameterException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrailAsync(String xAmzTarget, UpdateTrailRequest updateTrailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateTrailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrailValidateBeforeCall(xAmzTarget, updateTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTrailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
