/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReadWriteType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Use event selectors to further specify the management and data event settings for your trail. By default, trails created without specific event selectors will be configured to log all read and write management events, and no data events. When an event occurs in your account, CloudTrail evaluates the event selector for all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn&#39;t match any event selector, the trail doesn&#39;t log the event.&lt;/p&gt; &lt;p&gt;You can configure up to five event selectors for a trail.&lt;/p&gt; &lt;p&gt;You cannot apply both event selectors and advanced event selectors to a trail.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventSelector {
  public static final String SERIALIZED_NAME_READ_WRITE_TYPE = "ReadWriteType";
  @SerializedName(SERIALIZED_NAME_READ_WRITE_TYPE)
  private ReadWriteType readWriteType;

  public static final String SERIALIZED_NAME_INCLUDE_MANAGEMENT_EVENTS = "IncludeManagementEvents";
  @SerializedName(SERIALIZED_NAME_INCLUDE_MANAGEMENT_EVENTS)
  private Boolean includeManagementEvents;

  public static final String SERIALIZED_NAME_DATA_RESOURCES = "DataResources";
  @SerializedName(SERIALIZED_NAME_DATA_RESOURCES)
  private List dataResources;

  public static final String SERIALIZED_NAME_EXCLUDE_MANAGEMENT_EVENT_SOURCES = "ExcludeManagementEventSources";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_MANAGEMENT_EVENT_SOURCES)
  private List excludeManagementEventSources;

  public EventSelector() {
  }

  public EventSelector readWriteType(ReadWriteType readWriteType) {
    this.readWriteType = readWriteType;
    return this;
  }

  /**
   * Get readWriteType
   * @return readWriteType
   */
  @javax.annotation.Nullable
  public ReadWriteType getReadWriteType() {
    return readWriteType;
  }

  public void setReadWriteType(ReadWriteType readWriteType) {
    this.readWriteType = readWriteType;
  }


  public EventSelector includeManagementEvents(Boolean includeManagementEvents) {
    this.includeManagementEvents = includeManagementEvents;
    return this;
  }

  /**
   * Get includeManagementEvents
   * @return includeManagementEvents
   */
  @javax.annotation.Nullable
  public Boolean getIncludeManagementEvents() {
    return includeManagementEvents;
  }

  public void setIncludeManagementEvents(Boolean includeManagementEvents) {
    this.includeManagementEvents = includeManagementEvents;
  }


  public EventSelector dataResources(List dataResources) {
    this.dataResources = dataResources;
    return this;
  }

  /**
   * Get dataResources
   * @return dataResources
   */
  @javax.annotation.Nullable
  public List getDataResources() {
    return dataResources;
  }

  public void setDataResources(List dataResources) {
    this.dataResources = dataResources;
  }


  public EventSelector excludeManagementEventSources(List excludeManagementEventSources) {
    this.excludeManagementEventSources = excludeManagementEventSources;
    return this;
  }

  /**
   * Get excludeManagementEventSources
   * @return excludeManagementEventSources
   */
  @javax.annotation.Nullable
  public List getExcludeManagementEventSources() {
    return excludeManagementEventSources;
  }

  public void setExcludeManagementEventSources(List excludeManagementEventSources) {
    this.excludeManagementEventSources = excludeManagementEventSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSelector eventSelector = (EventSelector) o;
    return Objects.equals(this.readWriteType, eventSelector.readWriteType) &&
        Objects.equals(this.includeManagementEvents, eventSelector.includeManagementEvents) &&
        Objects.equals(this.dataResources, eventSelector.dataResources) &&
        Objects.equals(this.excludeManagementEventSources, eventSelector.excludeManagementEventSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(readWriteType, includeManagementEvents, dataResources, excludeManagementEventSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSelector {\n");
    sb.append("    readWriteType: ").append(toIndentedString(readWriteType)).append("\n");
    sb.append("    includeManagementEvents: ").append(toIndentedString(includeManagementEvents)).append("\n");
    sb.append("    dataResources: ").append(toIndentedString(dataResources)).append("\n");
    sb.append("    excludeManagementEventSources: ").append(toIndentedString(excludeManagementEventSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReadWriteType");
    openapiFields.add("IncludeManagementEvents");
    openapiFields.add("DataResources");
    openapiFields.add("ExcludeManagementEventSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventSelector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventSelector is not found in the empty JSON string", EventSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReadWriteType`
      if (jsonObj.get("ReadWriteType") != null && !jsonObj.get("ReadWriteType").isJsonNull()) {
        ReadWriteType.validateJsonElement(jsonObj.get("ReadWriteType"));
      }
      // validate the optional field `IncludeManagementEvents`
      if (jsonObj.get("IncludeManagementEvents") != null && !jsonObj.get("IncludeManagementEvents").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeManagementEvents"));
      }
      // validate the optional field `DataResources`
      if (jsonObj.get("DataResources") != null && !jsonObj.get("DataResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DataResources"));
      }
      // validate the optional field `ExcludeManagementEventSources`
      if (jsonObj.get("ExcludeManagementEventSources") != null && !jsonObj.get("ExcludeManagementEventSources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExcludeManagementEventSources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<EventSelector>() {
           @Override
           public void write(JsonWriter out, EventSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventSelector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventSelector
   * @throws IOException if the JSON string is invalid with respect to EventSelector
   */
  public static EventSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventSelector.class);
  }

  /**
   * Convert an instance of EventSelector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

