/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a returned public key.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicKey {
  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_VALIDITY_START_TIME = "ValidityStartTime";
  @SerializedName(SERIALIZED_NAME_VALIDITY_START_TIME)
  private OffsetDateTime validityStartTime;

  public static final String SERIALIZED_NAME_VALIDITY_END_TIME = "ValidityEndTime";
  @SerializedName(SERIALIZED_NAME_VALIDITY_END_TIME)
  private OffsetDateTime validityEndTime;

  public static final String SERIALIZED_NAME_FINGERPRINT = "Fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public PublicKey() {
  }

  public PublicKey value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public PublicKey validityStartTime(OffsetDateTime validityStartTime) {
    this.validityStartTime = validityStartTime;
    return this;
  }

  /**
   * Get validityStartTime
   * @return validityStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidityStartTime() {
    return validityStartTime;
  }

  public void setValidityStartTime(OffsetDateTime validityStartTime) {
    this.validityStartTime = validityStartTime;
  }


  public PublicKey validityEndTime(OffsetDateTime validityEndTime) {
    this.validityEndTime = validityEndTime;
    return this;
  }

  /**
   * Get validityEndTime
   * @return validityEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidityEndTime() {
    return validityEndTime;
  }

  public void setValidityEndTime(OffsetDateTime validityEndTime) {
    this.validityEndTime = validityEndTime;
  }


  public PublicKey fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Get fingerprint
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicKey publicKey = (PublicKey) o;
    return Objects.equals(this.value, publicKey.value) &&
        Objects.equals(this.validityStartTime, publicKey.validityStartTime) &&
        Objects.equals(this.validityEndTime, publicKey.validityEndTime) &&
        Objects.equals(this.fingerprint, publicKey.fingerprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, validityStartTime, validityEndTime, fingerprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicKey {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    validityStartTime: ").append(toIndentedString(validityStartTime)).append("\n");
    sb.append("    validityEndTime: ").append(toIndentedString(validityEndTime)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Value");
    openapiFields.add("ValidityStartTime");
    openapiFields.add("ValidityEndTime");
    openapiFields.add("Fingerprint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicKey is not found in the empty JSON string", PublicKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Value`
      if (jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Value"));
      }
      // validate the optional field `ValidityStartTime`
      if (jsonObj.get("ValidityStartTime") != null && !jsonObj.get("ValidityStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ValidityStartTime"));
      }
      // validate the optional field `ValidityEndTime`
      if (jsonObj.get("ValidityEndTime") != null && !jsonObj.get("ValidityEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ValidityEndTime"));
      }
      // validate the optional field `Fingerprint`
      if (jsonObj.get("Fingerprint") != null && !jsonObj.get("Fingerprint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Fingerprint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicKey.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicKey>() {
           @Override
           public void write(JsonWriter out, PublicKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicKey
   * @throws IOException if the JSON string is invalid with respect to PublicKey
   */
  public static PublicKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicKey.class);
  }

  /**
   * Convert an instance of PublicKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

