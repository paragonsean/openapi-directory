/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetChannelResponseIngestionStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetChannelResponseIngestionStatus {
  public static final String SERIALIZED_NAME_LATEST_INGESTION_SUCCESS_TIME = "LatestIngestionSuccessTime";
  @SerializedName(SERIALIZED_NAME_LATEST_INGESTION_SUCCESS_TIME)
  private OffsetDateTime latestIngestionSuccessTime;

  public static final String SERIALIZED_NAME_LATEST_INGESTION_SUCCESS_EVENT_I_D = "LatestIngestionSuccessEventID";
  @SerializedName(SERIALIZED_NAME_LATEST_INGESTION_SUCCESS_EVENT_I_D)
  private String latestIngestionSuccessEventID;

  public static final String SERIALIZED_NAME_LATEST_INGESTION_ERROR_CODE = "LatestIngestionErrorCode";
  @SerializedName(SERIALIZED_NAME_LATEST_INGESTION_ERROR_CODE)
  private String latestIngestionErrorCode;

  public static final String SERIALIZED_NAME_LATEST_INGESTION_ATTEMPT_TIME = "LatestIngestionAttemptTime";
  @SerializedName(SERIALIZED_NAME_LATEST_INGESTION_ATTEMPT_TIME)
  private OffsetDateTime latestIngestionAttemptTime;

  public static final String SERIALIZED_NAME_LATEST_INGESTION_ATTEMPT_EVENT_I_D = "LatestIngestionAttemptEventID";
  @SerializedName(SERIALIZED_NAME_LATEST_INGESTION_ATTEMPT_EVENT_I_D)
  private String latestIngestionAttemptEventID;

  public GetChannelResponseIngestionStatus() {
  }

  public GetChannelResponseIngestionStatus latestIngestionSuccessTime(OffsetDateTime latestIngestionSuccessTime) {
    this.latestIngestionSuccessTime = latestIngestionSuccessTime;
    return this;
  }

  /**
   * Get latestIngestionSuccessTime
   * @return latestIngestionSuccessTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestIngestionSuccessTime() {
    return latestIngestionSuccessTime;
  }

  public void setLatestIngestionSuccessTime(OffsetDateTime latestIngestionSuccessTime) {
    this.latestIngestionSuccessTime = latestIngestionSuccessTime;
  }


  public GetChannelResponseIngestionStatus latestIngestionSuccessEventID(String latestIngestionSuccessEventID) {
    this.latestIngestionSuccessEventID = latestIngestionSuccessEventID;
    return this;
  }

  /**
   * Get latestIngestionSuccessEventID
   * @return latestIngestionSuccessEventID
   */
  @javax.annotation.Nullable
  public String getLatestIngestionSuccessEventID() {
    return latestIngestionSuccessEventID;
  }

  public void setLatestIngestionSuccessEventID(String latestIngestionSuccessEventID) {
    this.latestIngestionSuccessEventID = latestIngestionSuccessEventID;
  }


  public GetChannelResponseIngestionStatus latestIngestionErrorCode(String latestIngestionErrorCode) {
    this.latestIngestionErrorCode = latestIngestionErrorCode;
    return this;
  }

  /**
   * Get latestIngestionErrorCode
   * @return latestIngestionErrorCode
   */
  @javax.annotation.Nullable
  public String getLatestIngestionErrorCode() {
    return latestIngestionErrorCode;
  }

  public void setLatestIngestionErrorCode(String latestIngestionErrorCode) {
    this.latestIngestionErrorCode = latestIngestionErrorCode;
  }


  public GetChannelResponseIngestionStatus latestIngestionAttemptTime(OffsetDateTime latestIngestionAttemptTime) {
    this.latestIngestionAttemptTime = latestIngestionAttemptTime;
    return this;
  }

  /**
   * Get latestIngestionAttemptTime
   * @return latestIngestionAttemptTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestIngestionAttemptTime() {
    return latestIngestionAttemptTime;
  }

  public void setLatestIngestionAttemptTime(OffsetDateTime latestIngestionAttemptTime) {
    this.latestIngestionAttemptTime = latestIngestionAttemptTime;
  }


  public GetChannelResponseIngestionStatus latestIngestionAttemptEventID(String latestIngestionAttemptEventID) {
    this.latestIngestionAttemptEventID = latestIngestionAttemptEventID;
    return this;
  }

  /**
   * Get latestIngestionAttemptEventID
   * @return latestIngestionAttemptEventID
   */
  @javax.annotation.Nullable
  public String getLatestIngestionAttemptEventID() {
    return latestIngestionAttemptEventID;
  }

  public void setLatestIngestionAttemptEventID(String latestIngestionAttemptEventID) {
    this.latestIngestionAttemptEventID = latestIngestionAttemptEventID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetChannelResponseIngestionStatus getChannelResponseIngestionStatus = (GetChannelResponseIngestionStatus) o;
    return Objects.equals(this.latestIngestionSuccessTime, getChannelResponseIngestionStatus.latestIngestionSuccessTime) &&
        Objects.equals(this.latestIngestionSuccessEventID, getChannelResponseIngestionStatus.latestIngestionSuccessEventID) &&
        Objects.equals(this.latestIngestionErrorCode, getChannelResponseIngestionStatus.latestIngestionErrorCode) &&
        Objects.equals(this.latestIngestionAttemptTime, getChannelResponseIngestionStatus.latestIngestionAttemptTime) &&
        Objects.equals(this.latestIngestionAttemptEventID, getChannelResponseIngestionStatus.latestIngestionAttemptEventID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(latestIngestionSuccessTime, latestIngestionSuccessEventID, latestIngestionErrorCode, latestIngestionAttemptTime, latestIngestionAttemptEventID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetChannelResponseIngestionStatus {\n");
    sb.append("    latestIngestionSuccessTime: ").append(toIndentedString(latestIngestionSuccessTime)).append("\n");
    sb.append("    latestIngestionSuccessEventID: ").append(toIndentedString(latestIngestionSuccessEventID)).append("\n");
    sb.append("    latestIngestionErrorCode: ").append(toIndentedString(latestIngestionErrorCode)).append("\n");
    sb.append("    latestIngestionAttemptTime: ").append(toIndentedString(latestIngestionAttemptTime)).append("\n");
    sb.append("    latestIngestionAttemptEventID: ").append(toIndentedString(latestIngestionAttemptEventID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LatestIngestionSuccessTime");
    openapiFields.add("LatestIngestionSuccessEventID");
    openapiFields.add("LatestIngestionErrorCode");
    openapiFields.add("LatestIngestionAttemptTime");
    openapiFields.add("LatestIngestionAttemptEventID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetChannelResponseIngestionStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetChannelResponseIngestionStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetChannelResponseIngestionStatus is not found in the empty JSON string", GetChannelResponseIngestionStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetChannelResponseIngestionStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetChannelResponseIngestionStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LatestIngestionSuccessTime`
      if (jsonObj.get("LatestIngestionSuccessTime") != null && !jsonObj.get("LatestIngestionSuccessTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LatestIngestionSuccessTime"));
      }
      // validate the optional field `LatestIngestionSuccessEventID`
      if (jsonObj.get("LatestIngestionSuccessEventID") != null && !jsonObj.get("LatestIngestionSuccessEventID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestIngestionSuccessEventID"));
      }
      // validate the optional field `LatestIngestionErrorCode`
      if (jsonObj.get("LatestIngestionErrorCode") != null && !jsonObj.get("LatestIngestionErrorCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestIngestionErrorCode"));
      }
      // validate the optional field `LatestIngestionAttemptTime`
      if (jsonObj.get("LatestIngestionAttemptTime") != null && !jsonObj.get("LatestIngestionAttemptTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LatestIngestionAttemptTime"));
      }
      // validate the optional field `LatestIngestionAttemptEventID`
      if (jsonObj.get("LatestIngestionAttemptEventID") != null && !jsonObj.get("LatestIngestionAttemptEventID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestIngestionAttemptEventID"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetChannelResponseIngestionStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetChannelResponseIngestionStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetChannelResponseIngestionStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetChannelResponseIngestionStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<GetChannelResponseIngestionStatus>() {
           @Override
           public void write(JsonWriter out, GetChannelResponseIngestionStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetChannelResponseIngestionStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetChannelResponseIngestionStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetChannelResponseIngestionStatus
   * @throws IOException if the JSON string is invalid with respect to GetChannelResponseIngestionStatus
   */
  public static GetChannelResponseIngestionStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetChannelResponseIngestionStatus.class);
  }

  /**
   * Convert an instance of GetChannelResponseIngestionStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

