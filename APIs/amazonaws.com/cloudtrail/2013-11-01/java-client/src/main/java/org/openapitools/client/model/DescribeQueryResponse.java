/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeliveryStatus;
import org.openapitools.client.model.DescribeQueryResponseQueryStatistics;
import org.openapitools.client.model.QueryStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeQueryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeQueryResponse {
  public static final String SERIALIZED_NAME_QUERY_ID = "QueryId";
  @SerializedName(SERIALIZED_NAME_QUERY_ID)
  private String queryId;

  public static final String SERIALIZED_NAME_QUERY_STRING = "QueryString";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING)
  private String queryString;

  public static final String SERIALIZED_NAME_QUERY_STATUS = "QueryStatus";
  @SerializedName(SERIALIZED_NAME_QUERY_STATUS)
  private QueryStatus queryStatus;

  public static final String SERIALIZED_NAME_QUERY_STATISTICS = "QueryStatistics";
  @SerializedName(SERIALIZED_NAME_QUERY_STATISTICS)
  private DescribeQueryResponseQueryStatistics queryStatistics;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_DELIVERY_S3_URI = "DeliveryS3Uri";
  @SerializedName(SERIALIZED_NAME_DELIVERY_S3_URI)
  private String deliveryS3Uri;

  public static final String SERIALIZED_NAME_DELIVERY_STATUS = "DeliveryStatus";
  @SerializedName(SERIALIZED_NAME_DELIVERY_STATUS)
  private DeliveryStatus deliveryStatus;

  public DescribeQueryResponse() {
  }

  public DescribeQueryResponse queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

  /**
   * Get queryId
   * @return queryId
   */
  @javax.annotation.Nullable
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }


  public DescribeQueryResponse queryString(String queryString) {
    this.queryString = queryString;
    return this;
  }

  /**
   * Get queryString
   * @return queryString
   */
  @javax.annotation.Nullable
  public String getQueryString() {
    return queryString;
  }

  public void setQueryString(String queryString) {
    this.queryString = queryString;
  }


  public DescribeQueryResponse queryStatus(QueryStatus queryStatus) {
    this.queryStatus = queryStatus;
    return this;
  }

  /**
   * Get queryStatus
   * @return queryStatus
   */
  @javax.annotation.Nullable
  public QueryStatus getQueryStatus() {
    return queryStatus;
  }

  public void setQueryStatus(QueryStatus queryStatus) {
    this.queryStatus = queryStatus;
  }


  public DescribeQueryResponse queryStatistics(DescribeQueryResponseQueryStatistics queryStatistics) {
    this.queryStatistics = queryStatistics;
    return this;
  }

  /**
   * Get queryStatistics
   * @return queryStatistics
   */
  @javax.annotation.Nullable
  public DescribeQueryResponseQueryStatistics getQueryStatistics() {
    return queryStatistics;
  }

  public void setQueryStatistics(DescribeQueryResponseQueryStatistics queryStatistics) {
    this.queryStatistics = queryStatistics;
  }


  public DescribeQueryResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public DescribeQueryResponse deliveryS3Uri(String deliveryS3Uri) {
    this.deliveryS3Uri = deliveryS3Uri;
    return this;
  }

  /**
   * Get deliveryS3Uri
   * @return deliveryS3Uri
   */
  @javax.annotation.Nullable
  public String getDeliveryS3Uri() {
    return deliveryS3Uri;
  }

  public void setDeliveryS3Uri(String deliveryS3Uri) {
    this.deliveryS3Uri = deliveryS3Uri;
  }


  public DescribeQueryResponse deliveryStatus(DeliveryStatus deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
    return this;
  }

  /**
   * Get deliveryStatus
   * @return deliveryStatus
   */
  @javax.annotation.Nullable
  public DeliveryStatus getDeliveryStatus() {
    return deliveryStatus;
  }

  public void setDeliveryStatus(DeliveryStatus deliveryStatus) {
    this.deliveryStatus = deliveryStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeQueryResponse describeQueryResponse = (DescribeQueryResponse) o;
    return Objects.equals(this.queryId, describeQueryResponse.queryId) &&
        Objects.equals(this.queryString, describeQueryResponse.queryString) &&
        Objects.equals(this.queryStatus, describeQueryResponse.queryStatus) &&
        Objects.equals(this.queryStatistics, describeQueryResponse.queryStatistics) &&
        Objects.equals(this.errorMessage, describeQueryResponse.errorMessage) &&
        Objects.equals(this.deliveryS3Uri, describeQueryResponse.deliveryS3Uri) &&
        Objects.equals(this.deliveryStatus, describeQueryResponse.deliveryStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryId, queryString, queryStatus, queryStatistics, errorMessage, deliveryS3Uri, deliveryStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeQueryResponse {\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    queryString: ").append(toIndentedString(queryString)).append("\n");
    sb.append("    queryStatus: ").append(toIndentedString(queryStatus)).append("\n");
    sb.append("    queryStatistics: ").append(toIndentedString(queryStatistics)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    deliveryS3Uri: ").append(toIndentedString(deliveryS3Uri)).append("\n");
    sb.append("    deliveryStatus: ").append(toIndentedString(deliveryStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("QueryId");
    openapiFields.add("QueryString");
    openapiFields.add("QueryStatus");
    openapiFields.add("QueryStatistics");
    openapiFields.add("ErrorMessage");
    openapiFields.add("DeliveryS3Uri");
    openapiFields.add("DeliveryStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeQueryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeQueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeQueryResponse is not found in the empty JSON string", DescribeQueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeQueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeQueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `QueryId`
      if (jsonObj.get("QueryId") != null && !jsonObj.get("QueryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QueryId"));
      }
      // validate the optional field `QueryString`
      if (jsonObj.get("QueryString") != null && !jsonObj.get("QueryString").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("QueryString"));
      }
      // validate the optional field `QueryStatus`
      if (jsonObj.get("QueryStatus") != null && !jsonObj.get("QueryStatus").isJsonNull()) {
        QueryStatus.validateJsonElement(jsonObj.get("QueryStatus"));
      }
      // validate the optional field `QueryStatistics`
      if (jsonObj.get("QueryStatistics") != null && !jsonObj.get("QueryStatistics").isJsonNull()) {
        DescribeQueryResponseQueryStatistics.validateJsonElement(jsonObj.get("QueryStatistics"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `DeliveryS3Uri`
      if (jsonObj.get("DeliveryS3Uri") != null && !jsonObj.get("DeliveryS3Uri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeliveryS3Uri"));
      }
      // validate the optional field `DeliveryStatus`
      if (jsonObj.get("DeliveryStatus") != null && !jsonObj.get("DeliveryStatus").isJsonNull()) {
        DeliveryStatus.validateJsonElement(jsonObj.get("DeliveryStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeQueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeQueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeQueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeQueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeQueryResponse>() {
           @Override
           public void write(JsonWriter out, DescribeQueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeQueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeQueryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeQueryResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeQueryResponse
   */
  public static DescribeQueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeQueryResponse.class);
  }

  /**
   * Convert an instance of DescribeQueryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

