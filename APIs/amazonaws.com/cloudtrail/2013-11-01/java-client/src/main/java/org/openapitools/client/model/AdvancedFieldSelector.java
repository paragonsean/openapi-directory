/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single selector statement in an advanced event selector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:14.442138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvancedFieldSelector {
  public static final String SERIALIZED_NAME_FIELD = "Field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_EQUALS = "Equals";
  @SerializedName(SERIALIZED_NAME_EQUALS)
  private List equals;

  public static final String SERIALIZED_NAME_STARTS_WITH = "StartsWith";
  @SerializedName(SERIALIZED_NAME_STARTS_WITH)
  private List startsWith;

  public static final String SERIALIZED_NAME_ENDS_WITH = "EndsWith";
  @SerializedName(SERIALIZED_NAME_ENDS_WITH)
  private List endsWith;

  public static final String SERIALIZED_NAME_NOT_EQUALS = "NotEquals";
  @SerializedName(SERIALIZED_NAME_NOT_EQUALS)
  private List notEquals;

  public static final String SERIALIZED_NAME_NOT_STARTS_WITH = "NotStartsWith";
  @SerializedName(SERIALIZED_NAME_NOT_STARTS_WITH)
  private List notStartsWith;

  public static final String SERIALIZED_NAME_NOT_ENDS_WITH = "NotEndsWith";
  @SerializedName(SERIALIZED_NAME_NOT_ENDS_WITH)
  private List notEndsWith;

  public AdvancedFieldSelector() {
  }

  public AdvancedFieldSelector field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Get field
   * @return field
   */
  @javax.annotation.Nonnull
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public AdvancedFieldSelector equals(List equals) {
    this.equals = equals;
    return this;
  }

  /**
   * Get equals
   * @return equals
   */
  @javax.annotation.Nullable
  public List getEquals() {
    return equals;
  }

  public void setEquals(List equals) {
    this.equals = equals;
  }


  public AdvancedFieldSelector startsWith(List startsWith) {
    this.startsWith = startsWith;
    return this;
  }

  /**
   * Get startsWith
   * @return startsWith
   */
  @javax.annotation.Nullable
  public List getStartsWith() {
    return startsWith;
  }

  public void setStartsWith(List startsWith) {
    this.startsWith = startsWith;
  }


  public AdvancedFieldSelector endsWith(List endsWith) {
    this.endsWith = endsWith;
    return this;
  }

  /**
   * Get endsWith
   * @return endsWith
   */
  @javax.annotation.Nullable
  public List getEndsWith() {
    return endsWith;
  }

  public void setEndsWith(List endsWith) {
    this.endsWith = endsWith;
  }


  public AdvancedFieldSelector notEquals(List notEquals) {
    this.notEquals = notEquals;
    return this;
  }

  /**
   * Get notEquals
   * @return notEquals
   */
  @javax.annotation.Nullable
  public List getNotEquals() {
    return notEquals;
  }

  public void setNotEquals(List notEquals) {
    this.notEquals = notEquals;
  }


  public AdvancedFieldSelector notStartsWith(List notStartsWith) {
    this.notStartsWith = notStartsWith;
    return this;
  }

  /**
   * Get notStartsWith
   * @return notStartsWith
   */
  @javax.annotation.Nullable
  public List getNotStartsWith() {
    return notStartsWith;
  }

  public void setNotStartsWith(List notStartsWith) {
    this.notStartsWith = notStartsWith;
  }


  public AdvancedFieldSelector notEndsWith(List notEndsWith) {
    this.notEndsWith = notEndsWith;
    return this;
  }

  /**
   * Get notEndsWith
   * @return notEndsWith
   */
  @javax.annotation.Nullable
  public List getNotEndsWith() {
    return notEndsWith;
  }

  public void setNotEndsWith(List notEndsWith) {
    this.notEndsWith = notEndsWith;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedFieldSelector advancedFieldSelector = (AdvancedFieldSelector) o;
    return Objects.equals(this.field, advancedFieldSelector.field) &&
        Objects.equals(this.equals, advancedFieldSelector.equals) &&
        Objects.equals(this.startsWith, advancedFieldSelector.startsWith) &&
        Objects.equals(this.endsWith, advancedFieldSelector.endsWith) &&
        Objects.equals(this.notEquals, advancedFieldSelector.notEquals) &&
        Objects.equals(this.notStartsWith, advancedFieldSelector.notStartsWith) &&
        Objects.equals(this.notEndsWith, advancedFieldSelector.notEndsWith);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, equals, startsWith, endsWith, notEquals, notStartsWith, notEndsWith);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedFieldSelector {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    equals: ").append(toIndentedString(equals)).append("\n");
    sb.append("    startsWith: ").append(toIndentedString(startsWith)).append("\n");
    sb.append("    endsWith: ").append(toIndentedString(endsWith)).append("\n");
    sb.append("    notEquals: ").append(toIndentedString(notEquals)).append("\n");
    sb.append("    notStartsWith: ").append(toIndentedString(notStartsWith)).append("\n");
    sb.append("    notEndsWith: ").append(toIndentedString(notEndsWith)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Field");
    openapiFields.add("Equals");
    openapiFields.add("StartsWith");
    openapiFields.add("EndsWith");
    openapiFields.add("NotEquals");
    openapiFields.add("NotStartsWith");
    openapiFields.add("NotEndsWith");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Field");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvancedFieldSelector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvancedFieldSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvancedFieldSelector is not found in the empty JSON string", AdvancedFieldSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdvancedFieldSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdvancedFieldSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdvancedFieldSelector.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Field`
      String.validateJsonElement(jsonObj.get("Field"));
      // validate the optional field `Equals`
      if (jsonObj.get("Equals") != null && !jsonObj.get("Equals").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Equals"));
      }
      // validate the optional field `StartsWith`
      if (jsonObj.get("StartsWith") != null && !jsonObj.get("StartsWith").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StartsWith"));
      }
      // validate the optional field `EndsWith`
      if (jsonObj.get("EndsWith") != null && !jsonObj.get("EndsWith").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EndsWith"));
      }
      // validate the optional field `NotEquals`
      if (jsonObj.get("NotEquals") != null && !jsonObj.get("NotEquals").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotEquals"));
      }
      // validate the optional field `NotStartsWith`
      if (jsonObj.get("NotStartsWith") != null && !jsonObj.get("NotStartsWith").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotStartsWith"));
      }
      // validate the optional field `NotEndsWith`
      if (jsonObj.get("NotEndsWith") != null && !jsonObj.get("NotEndsWith").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotEndsWith"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdvancedFieldSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdvancedFieldSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdvancedFieldSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdvancedFieldSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<AdvancedFieldSelector>() {
           @Override
           public void write(JsonWriter out, AdvancedFieldSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdvancedFieldSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdvancedFieldSelector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvancedFieldSelector
   * @throws IOException if the JSON string is invalid with respect to AdvancedFieldSelector
   */
  public static AdvancedFieldSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvancedFieldSelector.class);
  }

  /**
   * Convert an instance of AdvancedFieldSelector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

