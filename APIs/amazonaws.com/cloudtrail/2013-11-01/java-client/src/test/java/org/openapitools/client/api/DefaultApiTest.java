/*
 * AWS CloudTrail
 * <fullname>CloudTrail</fullname> <p>This is the CloudTrail API Reference. It provides descriptions of actions, data types, common parameters, and common errors for CloudTrail.</p> <p>CloudTrail is a web service that records Amazon Web Services API calls for your Amazon Web Services account and delivers log files to an Amazon S3 bucket. The recorded information includes the identity of the user, the start time of the Amazon Web Services API call, the source IP address, the request parameters, and the response elements returned by the service.</p> <note> <p>As an alternative to the API, you can use one of the Amazon Web Services SDKs, which consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide programmatic access to CloudTrail. For example, the SDKs handle cryptographically signing requests, managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools to Build on Amazon Web Services</a>.</p> </note> <p>See the <a href=\"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html\">CloudTrail User Guide</a> for information about the data that is included with each Amazon Web Services API call listed in the log files.</p>
 *
 * The version of the OpenAPI document: 2013-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddTagsRequest;
import org.openapitools.client.model.CancelQueryRequest;
import org.openapitools.client.model.CancelQueryResponse;
import org.openapitools.client.model.CreateChannelRequest;
import org.openapitools.client.model.CreateChannelResponse;
import org.openapitools.client.model.CreateEventDataStoreRequest;
import org.openapitools.client.model.CreateEventDataStoreResponse;
import org.openapitools.client.model.CreateTrailRequest;
import org.openapitools.client.model.CreateTrailResponse;
import org.openapitools.client.model.DeleteChannelRequest;
import org.openapitools.client.model.DeleteEventDataStoreRequest;
import org.openapitools.client.model.DeleteResourcePolicyRequest;
import org.openapitools.client.model.DeleteTrailRequest;
import org.openapitools.client.model.DeregisterOrganizationDelegatedAdminRequest;
import org.openapitools.client.model.DescribeQueryRequest;
import org.openapitools.client.model.DescribeQueryResponse;
import org.openapitools.client.model.DescribeTrailsRequest;
import org.openapitools.client.model.DescribeTrailsResponse;
import org.openapitools.client.model.GetChannelRequest;
import org.openapitools.client.model.GetChannelResponse;
import org.openapitools.client.model.GetEventDataStoreRequest;
import org.openapitools.client.model.GetEventDataStoreResponse;
import org.openapitools.client.model.GetEventSelectorsRequest;
import org.openapitools.client.model.GetEventSelectorsResponse;
import org.openapitools.client.model.GetImportRequest;
import org.openapitools.client.model.GetImportResponse;
import org.openapitools.client.model.GetInsightSelectorsRequest;
import org.openapitools.client.model.GetInsightSelectorsResponse;
import org.openapitools.client.model.GetQueryResultsRequest;
import org.openapitools.client.model.GetQueryResultsResponse;
import org.openapitools.client.model.GetResourcePolicyRequest;
import org.openapitools.client.model.GetResourcePolicyResponse;
import org.openapitools.client.model.GetTrailRequest;
import org.openapitools.client.model.GetTrailResponse;
import org.openapitools.client.model.GetTrailStatusRequest;
import org.openapitools.client.model.GetTrailStatusResponse;
import org.openapitools.client.model.ListChannelsRequest;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListEventDataStoresRequest;
import org.openapitools.client.model.ListEventDataStoresResponse;
import org.openapitools.client.model.ListImportFailuresRequest;
import org.openapitools.client.model.ListImportFailuresResponse;
import org.openapitools.client.model.ListImportsRequest;
import org.openapitools.client.model.ListImportsResponse;
import org.openapitools.client.model.ListPublicKeysRequest;
import org.openapitools.client.model.ListPublicKeysResponse;
import org.openapitools.client.model.ListQueriesRequest;
import org.openapitools.client.model.ListQueriesResponse;
import org.openapitools.client.model.ListTagsRequest;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.ListTrailsRequest;
import org.openapitools.client.model.ListTrailsResponse;
import org.openapitools.client.model.LookupEventsRequest;
import org.openapitools.client.model.LookupEventsResponse;
import org.openapitools.client.model.PutEventSelectorsRequest;
import org.openapitools.client.model.PutEventSelectorsResponse;
import org.openapitools.client.model.PutInsightSelectorsRequest;
import org.openapitools.client.model.PutInsightSelectorsResponse;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.PutResourcePolicyResponse;
import org.openapitools.client.model.RegisterOrganizationDelegatedAdminRequest;
import org.openapitools.client.model.RemoveTagsRequest;
import org.openapitools.client.model.RestoreEventDataStoreRequest;
import org.openapitools.client.model.RestoreEventDataStoreResponse;
import org.openapitools.client.model.StartEventDataStoreIngestionRequest;
import org.openapitools.client.model.StartImportRequest;
import org.openapitools.client.model.StartImportResponse;
import org.openapitools.client.model.StartLoggingRequest;
import org.openapitools.client.model.StartQueryRequest;
import org.openapitools.client.model.StartQueryResponse;
import org.openapitools.client.model.StopEventDataStoreIngestionRequest;
import org.openapitools.client.model.StopImportRequest;
import org.openapitools.client.model.StopImportResponse;
import org.openapitools.client.model.StopLoggingRequest;
import org.openapitools.client.model.UpdateChannelRequest;
import org.openapitools.client.model.UpdateChannelResponse;
import org.openapitools.client.model.UpdateEventDataStoreRequest;
import org.openapitools.client.model.UpdateEventDataStoreResponse;
import org.openapitools.client.model.UpdateTrailRequest;
import org.openapitools.client.model.UpdateTrailResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds one or more tags to a trail, event data store, or channel, up to a limit of 50. Overwrites an existing tag&#39;s value when a new value is specified for an existing tag key. Tag key names must be unique; you cannot have two keys with the same name but different values. If you specify a key without a value, the tag will be created with the specified key and a value of null. You can tag a trail or event data store that applies to all Amazon Web Services Regions only from the Region in which the trail or event data store was created (also known as its home Region).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagsTest() throws ApiException {
        String xAmzTarget = null;
        AddTagsRequest addTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.addTags(xAmzTarget, addTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels a query if the query is not in a terminated state, such as &lt;code&gt;CANCELLED&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;TIMED_OUT&lt;/code&gt;, or &lt;code&gt;FINISHED&lt;/code&gt;. You must specify an ARN value for &lt;code&gt;EventDataStore&lt;/code&gt;. The ID of the query that you want to cancel is also required. When you run &lt;code&gt;CancelQuery&lt;/code&gt;, the query status might show as &lt;code&gt;CANCELLED&lt;/code&gt; even if the operation is not yet finished.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelQueryTest() throws ApiException {
        String xAmzTarget = null;
        CancelQueryRequest cancelQueryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelQueryResponse response = api.cancelQuery(xAmzTarget, cancelQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a channel for CloudTrail to ingest events from a partner or external source. After you create a channel, a CloudTrail Lake event data store can log events from the partner or source that you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelTest() throws ApiException {
        String xAmzTarget = null;
        CreateChannelRequest createChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateChannelResponse response = api.createChannel(xAmzTarget, createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new event data store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventDataStoreTest() throws ApiException {
        String xAmzTarget = null;
        CreateEventDataStoreRequest createEventDataStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEventDataStoreResponse response = api.createEventDataStore(xAmzTarget, createEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrailTest() throws ApiException {
        String xAmzTarget = null;
        CreateTrailRequest createTrailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTrailResponse response = api.createTrail(xAmzTarget, createTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteChannelRequest deleteChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteChannel(xAmzTarget, deleteChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disables the event data store specified by &lt;code&gt;EventDataStore&lt;/code&gt;, which accepts an event data store ARN. After you run &lt;code&gt;DeleteEventDataStore&lt;/code&gt;, the event data store enters a &lt;code&gt;PENDING_DELETION&lt;/code&gt; state, and is automatically deleted after a wait period of seven days. &lt;code&gt;TerminationProtectionEnabled&lt;/code&gt; must be set to &lt;code&gt;False&lt;/code&gt; on the event data store; this operation cannot work if &lt;code&gt;TerminationProtectionEnabled&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you run &lt;code&gt;DeleteEventDataStore&lt;/code&gt; on an event data store, you cannot run &lt;code&gt;ListQueries&lt;/code&gt;, &lt;code&gt;DescribeQuery&lt;/code&gt;, or &lt;code&gt;GetQueryResults&lt;/code&gt; on queries that are using an event data store in a &lt;code&gt;PENDING_DELETION&lt;/code&gt; state. An event data store in the &lt;code&gt;PENDING_DELETION&lt;/code&gt; state does not incur costs.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventDataStoreTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEventDataStoreRequest deleteEventDataStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEventDataStore(xAmzTarget, deleteEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes the resource-based policy attached to the CloudTrail channel. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResourcePolicyRequest deleteResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteResourcePolicy(xAmzTarget, deleteResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a trail. This operation must be called from the Region in which the trail was created. &lt;code&gt;DeleteTrail&lt;/code&gt; cannot be called on the shadow trails (replicated trails in other Regions) of a trail that is enabled in all Regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrailTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTrailRequest deleteTrailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTrail(xAmzTarget, deleteTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes CloudTrail delegated administrator permissions from a member account in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterOrganizationDelegatedAdminTest() throws ApiException {
        String xAmzTarget = null;
        DeregisterOrganizationDelegatedAdminRequest deregisterOrganizationDelegatedAdminRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deregisterOrganizationDelegatedAdmin(xAmzTarget, deregisterOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns metadata about a query, including query run time in milliseconds, number of events scanned and matched, and query status. If the query results were delivered to an S3 bucket, the response also provides the S3 URI and the delivery status.&lt;/p&gt; &lt;p&gt;You must specify either a &lt;code&gt;QueryID&lt;/code&gt; or a &lt;code&gt;QueryAlias&lt;/code&gt;. Specifying the &lt;code&gt;QueryAlias&lt;/code&gt; parameter returns information about the last query run for the alias.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeQueryTest() throws ApiException {
        String xAmzTarget = null;
        DescribeQueryRequest describeQueryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeQueryResponse response = api.describeQuery(xAmzTarget, describeQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves settings for one or more trails associated with the current Region for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTrailsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTrailsRequest describeTrailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTrailsResponse response = api.describeTrails(xAmzTarget, describeTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns information about a specific channel. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelTest() throws ApiException {
        String xAmzTarget = null;
        GetChannelRequest getChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetChannelResponse response = api.getChannel(xAmzTarget, getChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about an event data store specified as either an ARN or the ID portion of the ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventDataStoreTest() throws ApiException {
        String xAmzTarget = null;
        GetEventDataStoreRequest getEventDataStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventDataStoreResponse response = api.getEventDataStore(xAmzTarget, getEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the settings for the event selectors that you configured for your trail. The information returned for your event selectors includes the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If your event selector includes read-only events, write-only events, or all events. This applies to both management events and data events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your event selector includes management events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your event selector includes data events, the resources on which you are logging data events.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about logging management and data events, see the following topics in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html\&quot;&gt;Logging management events&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventSelectorsTest() throws ApiException {
        String xAmzTarget = null;
        GetEventSelectorsRequest getEventSelectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventSelectorsResponse response = api.getEventSelectors(xAmzTarget, getEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Returns information about a specific import. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImportTest() throws ApiException {
        String xAmzTarget = null;
        GetImportRequest getImportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetImportResponse response = api.getImport(xAmzTarget, getImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the settings for the Insights event selectors that you configured for your trail. &lt;code&gt;GetInsightSelectors&lt;/code&gt; shows if CloudTrail Insights event logging is enabled on the trail, and if it is, which insight types are enabled. If you run &lt;code&gt;GetInsightSelectors&lt;/code&gt; on a trail that does not have Insights events enabled, the operation throws the exception &lt;code&gt;InsightNotEnabledException&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html\&quot;&gt;Logging CloudTrail Insights Events for Trails &lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightSelectorsTest() throws ApiException {
        String xAmzTarget = null;
        GetInsightSelectorsRequest getInsightSelectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInsightSelectorsResponse response = api.getInsightSelectors(xAmzTarget, getInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets event data results of a query. You must specify the &lt;code&gt;QueryID&lt;/code&gt; value returned by the &lt;code&gt;StartQuery&lt;/code&gt; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryResultsTest() throws ApiException {
        String xAmzTarget = null;
        GetQueryResultsRequest getQueryResultsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        GetQueryResultsResponse response = api.getQueryResults(xAmzTarget, getQueryResultsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     *  Retrieves the JSON text of the resource-based policy document attached to the CloudTrail channel. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetResourcePolicyRequest getResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourcePolicyResponse response = api.getResourcePolicy(xAmzTarget, getResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns settings information for a specified trail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrailTest() throws ApiException {
        String xAmzTarget = null;
        GetTrailRequest getTrailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTrailResponse response = api.getTrail(xAmzTarget, getTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a JSON-formatted list of information about the specified trail. Fields include information on delivery errors, Amazon SNS and Amazon S3 errors, and start and stop logging times for each trail. This operation returns trail status from a single Region. To return trail status from all Regions, you must call the operation on each Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrailStatusTest() throws ApiException {
        String xAmzTarget = null;
        GetTrailStatusRequest getTrailStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTrailStatusResponse response = api.getTrailStatus(xAmzTarget, getTrailStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Lists the channels in the current account, and their source names. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsTest() throws ApiException {
        String xAmzTarget = null;
        ListChannelsRequest listChannelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListChannelsResponse response = api.listChannels(xAmzTarget, listChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about all event data stores in the account, in the current Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventDataStoresTest() throws ApiException {
        String xAmzTarget = null;
        ListEventDataStoresRequest listEventDataStoresRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEventDataStoresResponse response = api.listEventDataStores(xAmzTarget, listEventDataStoresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns a list of failures for the specified import. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportFailuresTest() throws ApiException {
        String xAmzTarget = null;
        ListImportFailuresRequest listImportFailuresRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImportFailuresResponse response = api.listImportFailures(xAmzTarget, listImportFailuresRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Returns information on all imports, or a select set of imports by &lt;code&gt;ImportStatus&lt;/code&gt; or &lt;code&gt;Destination&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportsTest() throws ApiException {
        String xAmzTarget = null;
        ListImportsRequest listImportsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImportsResponse response = api.listImports(xAmzTarget, listImportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns all public keys whose private keys were used to sign the digest files within the specified time range. The public key is needed to validate digest files that were signed with its corresponding private key.&lt;/p&gt; &lt;note&gt; &lt;p&gt;CloudTrail uses different private and public key pairs per Region. Each digest file is signed with a private key unique to its Region. When you validate a digest file from a specific Region, you must look in the same Region for its corresponding public key.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPublicKeysTest() throws ApiException {
        String xAmzTarget = null;
        ListPublicKeysRequest listPublicKeysRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListPublicKeysResponse response = api.listPublicKeys(xAmzTarget, listPublicKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of queries and query statuses for the past seven days. You must specify an ARN value for &lt;code&gt;EventDataStore&lt;/code&gt;. Optionally, to shorten the list of results, you can specify a time range, formatted as timestamps, by adding &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; parameters, and a &lt;code&gt;QueryStatus&lt;/code&gt; value. Valid values for &lt;code&gt;QueryStatus&lt;/code&gt; include &lt;code&gt;QUEUED&lt;/code&gt;, &lt;code&gt;RUNNING&lt;/code&gt;, &lt;code&gt;FINISHED&lt;/code&gt;, &lt;code&gt;FAILED&lt;/code&gt;, &lt;code&gt;TIMED_OUT&lt;/code&gt;, or &lt;code&gt;CANCELLED&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listQueriesTest() throws ApiException {
        String xAmzTarget = null;
        ListQueriesRequest listQueriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListQueriesResponse response = api.listQueries(xAmzTarget, listQueriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags for the specified trails, event data stores, or channels in the current Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsRequest listTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListTagsResponse response = api.listTags(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists trails that are in the current account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrailsTest() throws ApiException {
        String xAmzTarget = null;
        ListTrailsRequest listTrailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListTrailsResponse response = api.listTrails(xAmzTarget, listTrailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Looks up &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events\&quot;&gt;management events&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-insights-events\&quot;&gt;CloudTrail Insights events&lt;/a&gt; that are captured by CloudTrail. You can look up events that occurred in a Region within the last 90 days. Lookup supports the following attributes for management events:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services access key&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event source&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Read only&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Resource name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Resource type&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;User name&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Lookup supports the following attributes for Insights events:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Event ID&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Event source&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All attributes are optional. The default number of results returned is 50, with a maximum of 50 possible. The response includes a token that you can use to get the next page of results.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The rate of lookup requests is limited to two per second, per account, per Region. If this limit is exceeded, a throttling error occurs.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lookupEventsTest() throws ApiException {
        String xAmzTarget = null;
        LookupEventsRequest lookupEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        LookupEventsResponse response = api.lookupEvents(xAmzTarget, lookupEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Configures an event selector or advanced event selectors for your trail. Use event selectors or advanced event selectors to specify management and data event settings for your trail. If you want your trail to log Insights events, be sure the event selector enables logging of the Insights event types you want configured for your trail. For more information about logging Insights events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-insights-events-with-cloudtrail.html\&quot;&gt;Logging Insights events for trails&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;. By default, trails created without specific event selectors are configured to log all read and write management events, and no data events.&lt;/p&gt; &lt;p&gt;When an event occurs in your account, CloudTrail evaluates the event selectors or advanced event selectors in all trails. For each trail, if the event matches any event selector, the trail processes and logs the event. If the event doesn&#39;t match any event selector, the trail doesn&#39;t log the event.&lt;/p&gt; &lt;p&gt;Example&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;You create an event selector for a trail and specify that you want write-only events.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The EC2 &lt;code&gt;GetConsoleOutput&lt;/code&gt; and &lt;code&gt;RunInstances&lt;/code&gt; API operations occur in your account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CloudTrail evaluates whether the events match your event selectors.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;RunInstances&lt;/code&gt; is a write-only event and it matches your event selector. The trail logs the event.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;GetConsoleOutput&lt;/code&gt; is a read-only event that doesn&#39;t match your event selector. The trail doesn&#39;t log the event. &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The &lt;code&gt;PutEventSelectors&lt;/code&gt; operation must be called from the Region in which the trail was created; otherwise, an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; exception is thrown.&lt;/p&gt; &lt;p&gt;You can configure up to five event selectors for each trail. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-events-with-cloudtrail.html\&quot;&gt;Logging management events&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/WhatIsCloudTrail-Limits.html\&quot;&gt;Quotas in CloudTrail&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can add advanced event selectors, and conditions for your advanced event selectors, up to a maximum of 500 values for all conditions and selectors on a trail. You can use either &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; or &lt;code&gt;EventSelectors&lt;/code&gt;, but not both. If you apply &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; to a trail, any existing &lt;code&gt;EventSelectors&lt;/code&gt; are overwritten. For more information about advanced event selectors, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html\&quot;&gt;Logging data events&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEventSelectorsTest() throws ApiException {
        String xAmzTarget = null;
        PutEventSelectorsRequest putEventSelectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutEventSelectorsResponse response = api.putEventSelectors(xAmzTarget, putEventSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lets you enable Insights event logging by specifying the Insights selectors that you want to enable on an existing trail. You also use &lt;code&gt;PutInsightSelectors&lt;/code&gt; to turn off Insights event logging, by passing an empty list of insight types. The valid Insights event types in this release are &lt;code&gt;ApiErrorRateInsight&lt;/code&gt; and &lt;code&gt;ApiCallRateInsight&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To log CloudTrail Insights events on API call volume, the trail must log &lt;code&gt;write&lt;/code&gt; management events. To log CloudTrail Insights events on API error rate, the trail must log &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; management events. You can call &lt;code&gt;GetEventSelectors&lt;/code&gt; on a trail to check whether the trail logs management events.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putInsightSelectorsTest() throws ApiException {
        String xAmzTarget = null;
        PutInsightSelectorsRequest putInsightSelectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutInsightSelectorsResponse response = api.putInsightSelectors(xAmzTarget, putInsightSelectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Attaches a resource-based permission policy to a CloudTrail channel that is used for an integration with an event source outside of Amazon Web Services. For more information about resource-based policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/security_iam_resource-based-policy-examples.html\&quot;&gt;CloudTrail resource-based policy examples&lt;/a&gt; in the &lt;i&gt;CloudTrail User Guide&lt;/i&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutResourcePolicyRequest putResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutResourcePolicyResponse response = api.putResourcePolicy(xAmzTarget, putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Registers an organization’s member account as the CloudTrail delegated administrator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerOrganizationDelegatedAdminTest() throws ApiException {
        String xAmzTarget = null;
        RegisterOrganizationDelegatedAdminRequest registerOrganizationDelegatedAdminRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.registerOrganizationDelegatedAdmin(xAmzTarget, registerOrganizationDelegatedAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from a trail, event data store, or channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagsTest() throws ApiException {
        String xAmzTarget = null;
        RemoveTagsRequest removeTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.removeTags(xAmzTarget, removeTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Restores a deleted event data store specified by &lt;code&gt;EventDataStore&lt;/code&gt;, which accepts an event data store ARN. You can only restore a deleted event data store within the seven-day wait period after deletion. Restoring an event data store can take several minutes, depending on the size of the event data store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreEventDataStoreTest() throws ApiException {
        String xAmzTarget = null;
        RestoreEventDataStoreRequest restoreEventDataStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreEventDataStoreResponse response = api.restoreEventDataStore(xAmzTarget, restoreEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the ingestion of live events on an event data store specified as either an ARN or the ID portion of the ARN. To start ingestion, the event data store &lt;code&gt;Status&lt;/code&gt; must be &lt;code&gt;STOPPED_INGESTION&lt;/code&gt; and the &lt;code&gt;eventCategory&lt;/code&gt; must be &lt;code&gt;Management&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, or &lt;code&gt;ConfigurationItem&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startEventDataStoreIngestionTest() throws ApiException {
        String xAmzTarget = null;
        StartEventDataStoreIngestionRequest startEventDataStoreIngestionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startEventDataStoreIngestion(xAmzTarget, startEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Starts an import of logged trail events from a source S3 bucket to a destination event data store. By default, CloudTrail only imports events contained in the S3 bucket&#39;s &lt;code&gt;CloudTrail&lt;/code&gt; prefix and the prefixes inside the &lt;code&gt;CloudTrail&lt;/code&gt; prefix, and does not check prefixes for other Amazon Web Services services. If you want to import CloudTrail events contained in another prefix, you must include the prefix in the &lt;code&gt;S3LocationUri&lt;/code&gt;. For more considerations about importing trail events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-copy-trail-to-lake.html#cloudtrail-trail-copy-considerations\&quot;&gt;Considerations&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you start a new import, the &lt;code&gt;Destinations&lt;/code&gt; and &lt;code&gt;ImportSource&lt;/code&gt; parameters are required. Before starting a new import, disable any access control lists (ACLs) attached to the source S3 bucket. For more information about disabling ACLs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html\&quot;&gt;Controlling ownership of objects and disabling ACLs for your bucket&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you retry an import, the &lt;code&gt;ImportID&lt;/code&gt; parameter is required. &lt;/p&gt; &lt;note&gt; &lt;p&gt; If the destination event data store is for an organization, you must use the management account to import trail events. You cannot use the delegated administrator account for the organization. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startImportTest() throws ApiException {
        String xAmzTarget = null;
        StartImportRequest startImportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartImportResponse response = api.startImport(xAmzTarget, startImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the recording of Amazon Web Services API calls and log file delivery for a trail. For a trail that is enabled in all Regions, this operation must be called from the Region in which the trail was created. This operation cannot be called on the shadow trails (replicated trails in other Regions) of a trail that is enabled in all Regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startLoggingTest() throws ApiException {
        String xAmzTarget = null;
        StartLoggingRequest startLoggingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startLogging(xAmzTarget, startLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a CloudTrail Lake query. Use the &lt;code&gt;QueryStatement&lt;/code&gt; parameter to provide your SQL query, enclosed in single quotation marks. Use the optional &lt;code&gt;DeliveryS3Uri&lt;/code&gt; parameter to deliver the query results to an S3 bucket.&lt;/p&gt; &lt;p&gt; &lt;code&gt;StartQuery&lt;/code&gt; requires you specify either the &lt;code&gt;QueryStatement&lt;/code&gt; parameter, or a &lt;code&gt;QueryAlias&lt;/code&gt; and any &lt;code&gt;QueryParameters&lt;/code&gt;. In the current release, the &lt;code&gt;QueryAlias&lt;/code&gt; and &lt;code&gt;QueryParameters&lt;/code&gt; parameters are used only for the queries that populate the CloudTrail Lake dashboards.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startQueryTest() throws ApiException {
        String xAmzTarget = null;
        StartQueryRequest startQueryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartQueryResponse response = api.startQuery(xAmzTarget, startQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the ingestion of live events on an event data store specified as either an ARN or the ID portion of the ARN. To stop ingestion, the event data store &lt;code&gt;Status&lt;/code&gt; must be &lt;code&gt;ENABLED&lt;/code&gt; and the &lt;code&gt;eventCategory&lt;/code&gt; must be &lt;code&gt;Management&lt;/code&gt;, &lt;code&gt;Data&lt;/code&gt;, or &lt;code&gt;ConfigurationItem&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopEventDataStoreIngestionTest() throws ApiException {
        String xAmzTarget = null;
        StopEventDataStoreIngestionRequest stopEventDataStoreIngestionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopEventDataStoreIngestion(xAmzTarget, stopEventDataStoreIngestionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Stops a specified import. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopImportTest() throws ApiException {
        String xAmzTarget = null;
        StopImportRequest stopImportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopImportResponse response = api.stopImport(xAmzTarget, stopImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Suspends the recording of Amazon Web Services API calls and log file delivery for the specified trail. Under most circumstances, there is no need to use this action. You can update a trail without stopping it first. This action is the only way to stop recording. For a trail enabled in all Regions, this operation must be called from the Region in which the trail was created, or an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; will occur. This operation cannot be called on the shadow trails (replicated trails in other Regions) of a trail enabled in all Regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopLoggingTest() throws ApiException {
        String xAmzTarget = null;
        StopLoggingRequest stopLoggingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopLogging(xAmzTarget, stopLoggingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a channel specified by a required channel ARN or UUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelTest() throws ApiException {
        String xAmzTarget = null;
        UpdateChannelRequest updateChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateChannelResponse response = api.updateChannel(xAmzTarget, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an event data store. The required &lt;code&gt;EventDataStore&lt;/code&gt; value is an ARN or the ID portion of the ARN. Other parameters are optional, but at least one optional parameter must be specified, or CloudTrail throws an error. &lt;code&gt;RetentionPeriod&lt;/code&gt; is in days, and valid values are integers between 90 and 2557. By default, &lt;code&gt;TerminationProtection&lt;/code&gt; is enabled.&lt;/p&gt; &lt;p&gt;For event data stores for CloudTrail events, &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; includes or excludes management and data events in your event data store. For more information about &lt;code&gt;AdvancedEventSelectors&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/awscloudtrail/latest/APIReference/API_AdvancedEventSelector.html\&quot;&gt;AdvancedEventSelectors&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For event data stores for Config configuration items, Audit Manager evidence, or non-Amazon Web Services events, &lt;code&gt;AdvancedEventSelectors&lt;/code&gt; includes events of that type in your event data store.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventDataStoreTest() throws ApiException {
        String xAmzTarget = null;
        UpdateEventDataStoreRequest updateEventDataStoreRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEventDataStoreResponse response = api.updateEventDataStore(xAmzTarget, updateEventDataStoreRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates trail settings that control what events you are logging, and how to handle log files. Changes to a trail do not require stopping the CloudTrail service. Use this action to designate an existing bucket for log delivery. If the existing bucket has previously been a target for CloudTrail log files, an IAM policy exists for the bucket. &lt;code&gt;UpdateTrail&lt;/code&gt; must be called from the Region in which the trail was created; otherwise, an &lt;code&gt;InvalidHomeRegionException&lt;/code&gt; is thrown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrailTest() throws ApiException {
        String xAmzTarget = null;
        UpdateTrailRequest updateTrailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTrailResponse response = api.updateTrail(xAmzTarget, updateTrailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
