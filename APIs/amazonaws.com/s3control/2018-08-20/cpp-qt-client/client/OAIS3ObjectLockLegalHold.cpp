/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ObjectLockLegalHold.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ObjectLockLegalHold::OAIS3ObjectLockLegalHold(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ObjectLockLegalHold::OAIS3ObjectLockLegalHold() {
    this->initializeModel();
}

OAIS3ObjectLockLegalHold::~OAIS3ObjectLockLegalHold() {}

void OAIS3ObjectLockLegalHold::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIS3ObjectLockLegalHold::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3ObjectLockLegalHold::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIS3ObjectLockLegalHold::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3ObjectLockLegalHold::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIS3ObjectLockLegalHoldStatus OAIS3ObjectLockLegalHold::getStatus() const {
    return m_status;
}
void OAIS3ObjectLockLegalHold::setStatus(const OAIS3ObjectLockLegalHoldStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIS3ObjectLockLegalHold::is_status_Set() const{
    return m_status_isSet;
}

bool OAIS3ObjectLockLegalHold::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIS3ObjectLockLegalHold::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3ObjectLockLegalHold::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
