/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3AccessControlPolicy_AccessControlList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3AccessControlPolicy_AccessControlList::OAIS3AccessControlPolicy_AccessControlList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3AccessControlPolicy_AccessControlList::OAIS3AccessControlPolicy_AccessControlList() {
    this->initializeModel();
}

OAIS3AccessControlPolicy_AccessControlList::~OAIS3AccessControlPolicy_AccessControlList() {}

void OAIS3AccessControlPolicy_AccessControlList::initializeModel() {

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_grants_isSet = false;
    m_grants_isValid = false;
}

void OAIS3AccessControlPolicy_AccessControlList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3AccessControlPolicy_AccessControlList::fromJsonObject(QJsonObject json) {

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_grants_isValid = ::OpenAPI::fromJsonValue(m_grants, json[QString("Grants")]);
    m_grants_isSet = !json[QString("Grants")].isNull() && m_grants_isValid;
}

QString OAIS3AccessControlPolicy_AccessControlList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3AccessControlPolicy_AccessControlList::asJsonObject() const {
    QJsonObject obj;
    if (m_owner.isSet()) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_grants.isSet()) {
        obj.insert(QString("Grants"), ::OpenAPI::toJsonValue(m_grants));
    }
    return obj;
}

OAIS3AccessControlList_Owner OAIS3AccessControlPolicy_AccessControlList::getOwner() const {
    return m_owner;
}
void OAIS3AccessControlPolicy_AccessControlList::setOwner(const OAIS3AccessControlList_Owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIS3AccessControlPolicy_AccessControlList::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIS3AccessControlPolicy_AccessControlList::is_owner_Valid() const{
    return m_owner_isValid;
}

QList OAIS3AccessControlPolicy_AccessControlList::getGrants() const {
    return m_grants;
}
void OAIS3AccessControlPolicy_AccessControlList::setGrants(const QList &grants) {
    m_grants = grants;
    m_grants_isSet = true;
}

bool OAIS3AccessControlPolicy_AccessControlList::is_grants_Set() const{
    return m_grants_isSet;
}

bool OAIS3AccessControlPolicy_AccessControlList::is_grants_Valid() const{
    return m_grants_isValid;
}

bool OAIS3AccessControlPolicy_AccessControlList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grants.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3AccessControlPolicy_AccessControlList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_owner_isValid && true;
}

} // namespace OpenAPI
