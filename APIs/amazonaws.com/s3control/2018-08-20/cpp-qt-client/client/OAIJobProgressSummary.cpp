/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobProgressSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobProgressSummary::OAIJobProgressSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobProgressSummary::OAIJobProgressSummary() {
    this->initializeModel();
}

OAIJobProgressSummary::~OAIJobProgressSummary() {}

void OAIJobProgressSummary::initializeModel() {

    m_total_number_of_tasks_isSet = false;
    m_total_number_of_tasks_isValid = false;

    m_number_of_tasks_succeeded_isSet = false;
    m_number_of_tasks_succeeded_isValid = false;

    m_number_of_tasks_failed_isSet = false;
    m_number_of_tasks_failed_isValid = false;

    m_timers_isSet = false;
    m_timers_isValid = false;
}

void OAIJobProgressSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobProgressSummary::fromJsonObject(QJsonObject json) {

    m_total_number_of_tasks_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_tasks, json[QString("TotalNumberOfTasks")]);
    m_total_number_of_tasks_isSet = !json[QString("TotalNumberOfTasks")].isNull() && m_total_number_of_tasks_isValid;

    m_number_of_tasks_succeeded_isValid = ::OpenAPI::fromJsonValue(m_number_of_tasks_succeeded, json[QString("NumberOfTasksSucceeded")]);
    m_number_of_tasks_succeeded_isSet = !json[QString("NumberOfTasksSucceeded")].isNull() && m_number_of_tasks_succeeded_isValid;

    m_number_of_tasks_failed_isValid = ::OpenAPI::fromJsonValue(m_number_of_tasks_failed, json[QString("NumberOfTasksFailed")]);
    m_number_of_tasks_failed_isSet = !json[QString("NumberOfTasksFailed")].isNull() && m_number_of_tasks_failed_isValid;

    m_timers_isValid = ::OpenAPI::fromJsonValue(m_timers, json[QString("Timers")]);
    m_timers_isSet = !json[QString("Timers")].isNull() && m_timers_isValid;
}

QString OAIJobProgressSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobProgressSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_total_number_of_tasks_isSet) {
        obj.insert(QString("TotalNumberOfTasks"), ::OpenAPI::toJsonValue(m_total_number_of_tasks));
    }
    if (m_number_of_tasks_succeeded_isSet) {
        obj.insert(QString("NumberOfTasksSucceeded"), ::OpenAPI::toJsonValue(m_number_of_tasks_succeeded));
    }
    if (m_number_of_tasks_failed_isSet) {
        obj.insert(QString("NumberOfTasksFailed"), ::OpenAPI::toJsonValue(m_number_of_tasks_failed));
    }
    if (m_timers.isSet()) {
        obj.insert(QString("Timers"), ::OpenAPI::toJsonValue(m_timers));
    }
    return obj;
}

qint32 OAIJobProgressSummary::getTotalNumberOfTasks() const {
    return m_total_number_of_tasks;
}
void OAIJobProgressSummary::setTotalNumberOfTasks(const qint32 &total_number_of_tasks) {
    m_total_number_of_tasks = total_number_of_tasks;
    m_total_number_of_tasks_isSet = true;
}

bool OAIJobProgressSummary::is_total_number_of_tasks_Set() const{
    return m_total_number_of_tasks_isSet;
}

bool OAIJobProgressSummary::is_total_number_of_tasks_Valid() const{
    return m_total_number_of_tasks_isValid;
}

qint32 OAIJobProgressSummary::getNumberOfTasksSucceeded() const {
    return m_number_of_tasks_succeeded;
}
void OAIJobProgressSummary::setNumberOfTasksSucceeded(const qint32 &number_of_tasks_succeeded) {
    m_number_of_tasks_succeeded = number_of_tasks_succeeded;
    m_number_of_tasks_succeeded_isSet = true;
}

bool OAIJobProgressSummary::is_number_of_tasks_succeeded_Set() const{
    return m_number_of_tasks_succeeded_isSet;
}

bool OAIJobProgressSummary::is_number_of_tasks_succeeded_Valid() const{
    return m_number_of_tasks_succeeded_isValid;
}

qint32 OAIJobProgressSummary::getNumberOfTasksFailed() const {
    return m_number_of_tasks_failed;
}
void OAIJobProgressSummary::setNumberOfTasksFailed(const qint32 &number_of_tasks_failed) {
    m_number_of_tasks_failed = number_of_tasks_failed;
    m_number_of_tasks_failed_isSet = true;
}

bool OAIJobProgressSummary::is_number_of_tasks_failed_Set() const{
    return m_number_of_tasks_failed_isSet;
}

bool OAIJobProgressSummary::is_number_of_tasks_failed_Valid() const{
    return m_number_of_tasks_failed_isValid;
}

OAIJobProgressSummary_Timers OAIJobProgressSummary::getTimers() const {
    return m_timers;
}
void OAIJobProgressSummary::setTimers(const OAIJobProgressSummary_Timers &timers) {
    m_timers = timers;
    m_timers_isSet = true;
}

bool OAIJobProgressSummary::is_timers_Set() const{
    return m_timers_isSet;
}

bool OAIJobProgressSummary::is_timers_Valid() const{
    return m_timers_isValid;
}

bool OAIJobProgressSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_number_of_tasks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_tasks_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_tasks_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobProgressSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
