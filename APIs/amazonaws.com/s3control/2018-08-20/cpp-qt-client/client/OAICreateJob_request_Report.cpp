/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJob_request_Report.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJob_request_Report::OAICreateJob_request_Report(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJob_request_Report::OAICreateJob_request_Report() {
    this->initializeModel();
}

OAICreateJob_request_Report::~OAICreateJob_request_Report() {}

void OAICreateJob_request_Report::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_report_scope_isSet = false;
    m_report_scope_isValid = false;
}

void OAICreateJob_request_Report::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJob_request_Report::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_report_scope_isValid = ::OpenAPI::fromJsonValue(m_report_scope, json[QString("ReportScope")]);
    m_report_scope_isSet = !json[QString("ReportScope")].isNull() && m_report_scope_isValid;
}

QString OAICreateJob_request_Report::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJob_request_Report::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_report_scope.isSet()) {
        obj.insert(QString("ReportScope"), ::OpenAPI::toJsonValue(m_report_scope));
    }
    return obj;
}

QString OAICreateJob_request_Report::getBucket() const {
    return m_bucket;
}
void OAICreateJob_request_Report::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAICreateJob_request_Report::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAICreateJob_request_Report::is_bucket_Valid() const{
    return m_bucket_isValid;
}

OAIJobReportFormat OAICreateJob_request_Report::getFormat() const {
    return m_format;
}
void OAICreateJob_request_Report::setFormat(const OAIJobReportFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICreateJob_request_Report::is_format_Set() const{
    return m_format_isSet;
}

bool OAICreateJob_request_Report::is_format_Valid() const{
    return m_format_isValid;
}

bool OAICreateJob_request_Report::getEnabled() const {
    return m_enabled;
}
void OAICreateJob_request_Report::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateJob_request_Report::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateJob_request_Report::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICreateJob_request_Report::getPrefix() const {
    return m_prefix;
}
void OAICreateJob_request_Report::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAICreateJob_request_Report::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAICreateJob_request_Report::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAIJobReportScope OAICreateJob_request_Report::getReportScope() const {
    return m_report_scope;
}
void OAICreateJob_request_Report::setReportScope(const OAIJobReportScope &report_scope) {
    m_report_scope = report_scope;
    m_report_scope_isSet = true;
}

bool OAICreateJob_request_Report::is_report_scope_Set() const{
    return m_report_scope_isSet;
}

bool OAICreateJob_request_Report::is_report_scope_Valid() const{
    return m_report_scope_isValid;
}

bool OAICreateJob_request_Report::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJob_request_Report::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
