/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsyncRequestParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsyncRequestParameters::OAIAsyncRequestParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsyncRequestParameters::OAIAsyncRequestParameters() {
    this->initializeModel();
}

OAIAsyncRequestParameters::~OAIAsyncRequestParameters() {}

void OAIAsyncRequestParameters::initializeModel() {

    m_create_multi_region_access_point_request_isSet = false;
    m_create_multi_region_access_point_request_isValid = false;

    m_delete_multi_region_access_point_request_isSet = false;
    m_delete_multi_region_access_point_request_isValid = false;

    m_put_multi_region_access_point_policy_request_isSet = false;
    m_put_multi_region_access_point_policy_request_isValid = false;
}

void OAIAsyncRequestParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsyncRequestParameters::fromJsonObject(QJsonObject json) {

    m_create_multi_region_access_point_request_isValid = ::OpenAPI::fromJsonValue(m_create_multi_region_access_point_request, json[QString("CreateMultiRegionAccessPointRequest")]);
    m_create_multi_region_access_point_request_isSet = !json[QString("CreateMultiRegionAccessPointRequest")].isNull() && m_create_multi_region_access_point_request_isValid;

    m_delete_multi_region_access_point_request_isValid = ::OpenAPI::fromJsonValue(m_delete_multi_region_access_point_request, json[QString("DeleteMultiRegionAccessPointRequest")]);
    m_delete_multi_region_access_point_request_isSet = !json[QString("DeleteMultiRegionAccessPointRequest")].isNull() && m_delete_multi_region_access_point_request_isValid;

    m_put_multi_region_access_point_policy_request_isValid = ::OpenAPI::fromJsonValue(m_put_multi_region_access_point_policy_request, json[QString("PutMultiRegionAccessPointPolicyRequest")]);
    m_put_multi_region_access_point_policy_request_isSet = !json[QString("PutMultiRegionAccessPointPolicyRequest")].isNull() && m_put_multi_region_access_point_policy_request_isValid;
}

QString OAIAsyncRequestParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsyncRequestParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_create_multi_region_access_point_request.isSet()) {
        obj.insert(QString("CreateMultiRegionAccessPointRequest"), ::OpenAPI::toJsonValue(m_create_multi_region_access_point_request));
    }
    if (m_delete_multi_region_access_point_request.isSet()) {
        obj.insert(QString("DeleteMultiRegionAccessPointRequest"), ::OpenAPI::toJsonValue(m_delete_multi_region_access_point_request));
    }
    if (m_put_multi_region_access_point_policy_request.isSet()) {
        obj.insert(QString("PutMultiRegionAccessPointPolicyRequest"), ::OpenAPI::toJsonValue(m_put_multi_region_access_point_policy_request));
    }
    return obj;
}

OAIAsyncRequestParameters_CreateMultiRegionAccessPointRequest OAIAsyncRequestParameters::getCreateMultiRegionAccessPointRequest() const {
    return m_create_multi_region_access_point_request;
}
void OAIAsyncRequestParameters::setCreateMultiRegionAccessPointRequest(const OAIAsyncRequestParameters_CreateMultiRegionAccessPointRequest &create_multi_region_access_point_request) {
    m_create_multi_region_access_point_request = create_multi_region_access_point_request;
    m_create_multi_region_access_point_request_isSet = true;
}

bool OAIAsyncRequestParameters::is_create_multi_region_access_point_request_Set() const{
    return m_create_multi_region_access_point_request_isSet;
}

bool OAIAsyncRequestParameters::is_create_multi_region_access_point_request_Valid() const{
    return m_create_multi_region_access_point_request_isValid;
}

OAIAsyncRequestParameters_DeleteMultiRegionAccessPointRequest OAIAsyncRequestParameters::getDeleteMultiRegionAccessPointRequest() const {
    return m_delete_multi_region_access_point_request;
}
void OAIAsyncRequestParameters::setDeleteMultiRegionAccessPointRequest(const OAIAsyncRequestParameters_DeleteMultiRegionAccessPointRequest &delete_multi_region_access_point_request) {
    m_delete_multi_region_access_point_request = delete_multi_region_access_point_request;
    m_delete_multi_region_access_point_request_isSet = true;
}

bool OAIAsyncRequestParameters::is_delete_multi_region_access_point_request_Set() const{
    return m_delete_multi_region_access_point_request_isSet;
}

bool OAIAsyncRequestParameters::is_delete_multi_region_access_point_request_Valid() const{
    return m_delete_multi_region_access_point_request_isValid;
}

OAIAsyncRequestParameters_PutMultiRegionAccessPointPolicyRequest OAIAsyncRequestParameters::getPutMultiRegionAccessPointPolicyRequest() const {
    return m_put_multi_region_access_point_policy_request;
}
void OAIAsyncRequestParameters::setPutMultiRegionAccessPointPolicyRequest(const OAIAsyncRequestParameters_PutMultiRegionAccessPointPolicyRequest &put_multi_region_access_point_policy_request) {
    m_put_multi_region_access_point_policy_request = put_multi_region_access_point_policy_request;
    m_put_multi_region_access_point_policy_request_isSet = true;
}

bool OAIAsyncRequestParameters::is_put_multi_region_access_point_policy_request_Set() const{
    return m_put_multi_region_access_point_policy_request_isSet;
}

bool OAIAsyncRequestParameters::is_put_multi_region_access_point_policy_request_Valid() const{
    return m_put_multi_region_access_point_policy_request_isValid;
}

bool OAIAsyncRequestParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_multi_region_access_point_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_multi_region_access_point_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_put_multi_region_access_point_policy_request.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsyncRequestParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
