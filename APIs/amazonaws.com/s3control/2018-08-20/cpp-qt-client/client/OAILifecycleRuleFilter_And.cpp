/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecycleRuleFilter_And.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecycleRuleFilter_And::OAILifecycleRuleFilter_And(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecycleRuleFilter_And::OAILifecycleRuleFilter_And() {
    this->initializeModel();
}

OAILifecycleRuleFilter_And::~OAILifecycleRuleFilter_And() {}

void OAILifecycleRuleFilter_And::initializeModel() {

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_object_size_greater_than_isSet = false;
    m_object_size_greater_than_isValid = false;

    m_object_size_less_than_isSet = false;
    m_object_size_less_than_isValid = false;
}

void OAILifecycleRuleFilter_And::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifecycleRuleFilter_And::fromJsonObject(QJsonObject json) {

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_object_size_greater_than_isValid = ::OpenAPI::fromJsonValue(m_object_size_greater_than, json[QString("ObjectSizeGreaterThan")]);
    m_object_size_greater_than_isSet = !json[QString("ObjectSizeGreaterThan")].isNull() && m_object_size_greater_than_isValid;

    m_object_size_less_than_isValid = ::OpenAPI::fromJsonValue(m_object_size_less_than, json[QString("ObjectSizeLessThan")]);
    m_object_size_less_than_isSet = !json[QString("ObjectSizeLessThan")].isNull() && m_object_size_less_than_isValid;
}

QString OAILifecycleRuleFilter_And::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifecycleRuleFilter_And::asJsonObject() const {
    QJsonObject obj;
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_object_size_greater_than_isSet) {
        obj.insert(QString("ObjectSizeGreaterThan"), ::OpenAPI::toJsonValue(m_object_size_greater_than));
    }
    if (m_object_size_less_than_isSet) {
        obj.insert(QString("ObjectSizeLessThan"), ::OpenAPI::toJsonValue(m_object_size_less_than));
    }
    return obj;
}

QString OAILifecycleRuleFilter_And::getPrefix() const {
    return m_prefix;
}
void OAILifecycleRuleFilter_And::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAILifecycleRuleFilter_And::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAILifecycleRuleFilter_And::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QList OAILifecycleRuleFilter_And::getTags() const {
    return m_tags;
}
void OAILifecycleRuleFilter_And::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAILifecycleRuleFilter_And::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAILifecycleRuleFilter_And::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAILifecycleRuleFilter_And::getObjectSizeGreaterThan() const {
    return m_object_size_greater_than;
}
void OAILifecycleRuleFilter_And::setObjectSizeGreaterThan(const qint32 &object_size_greater_than) {
    m_object_size_greater_than = object_size_greater_than;
    m_object_size_greater_than_isSet = true;
}

bool OAILifecycleRuleFilter_And::is_object_size_greater_than_Set() const{
    return m_object_size_greater_than_isSet;
}

bool OAILifecycleRuleFilter_And::is_object_size_greater_than_Valid() const{
    return m_object_size_greater_than_isValid;
}

qint32 OAILifecycleRuleFilter_And::getObjectSizeLessThan() const {
    return m_object_size_less_than;
}
void OAILifecycleRuleFilter_And::setObjectSizeLessThan(const qint32 &object_size_less_than) {
    m_object_size_less_than = object_size_less_than;
    m_object_size_less_than_isSet = true;
}

bool OAILifecycleRuleFilter_And::is_object_size_less_than_Set() const{
    return m_object_size_less_than_isSet;
}

bool OAILifecycleRuleFilter_And::is_object_size_less_than_Valid() const{
    return m_object_size_less_than_isValid;
}

bool OAILifecycleRuleFilter_And::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_size_greater_than_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_size_less_than_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifecycleRuleFilter_And::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
