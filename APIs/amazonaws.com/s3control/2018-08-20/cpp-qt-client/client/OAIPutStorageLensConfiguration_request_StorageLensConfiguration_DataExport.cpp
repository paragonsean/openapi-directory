/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport() {
    this->initializeModel();
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::~OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport() {}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::initializeModel() {

    m_s3_bucket_destination_isSet = false;
    m_s3_bucket_destination_isValid = false;

    m_cloud_watch_metrics_isSet = false;
    m_cloud_watch_metrics_isValid = false;
}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::fromJsonObject(QJsonObject json) {

    m_s3_bucket_destination_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_destination, json[QString("S3BucketDestination")]);
    m_s3_bucket_destination_isSet = !json[QString("S3BucketDestination")].isNull() && m_s3_bucket_destination_isValid;

    m_cloud_watch_metrics_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_metrics, json[QString("CloudWatchMetrics")]);
    m_cloud_watch_metrics_isSet = !json[QString("CloudWatchMetrics")].isNull() && m_cloud_watch_metrics_isValid;
}

QString OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_destination.isSet()) {
        obj.insert(QString("S3BucketDestination"), ::OpenAPI::toJsonValue(m_s3_bucket_destination));
    }
    if (m_cloud_watch_metrics.isSet()) {
        obj.insert(QString("CloudWatchMetrics"), ::OpenAPI::toJsonValue(m_cloud_watch_metrics));
    }
    return obj;
}

OAIStorageLensDataExport_S3BucketDestination OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::getS3BucketDestination() const {
    return m_s3_bucket_destination;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::setS3BucketDestination(const OAIStorageLensDataExport_S3BucketDestination &s3_bucket_destination) {
    m_s3_bucket_destination = s3_bucket_destination;
    m_s3_bucket_destination_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::is_s3_bucket_destination_Set() const{
    return m_s3_bucket_destination_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::is_s3_bucket_destination_Valid() const{
    return m_s3_bucket_destination_isValid;
}

OAIStorageLensDataExport_CloudWatchMetrics OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::getCloudWatchMetrics() const {
    return m_cloud_watch_metrics;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::setCloudWatchMetrics(const OAIStorageLensDataExport_CloudWatchMetrics &cloud_watch_metrics) {
    m_cloud_watch_metrics = cloud_watch_metrics;
    m_cloud_watch_metrics_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::is_cloud_watch_metrics_Set() const{
    return m_cloud_watch_metrics_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::is_cloud_watch_metrics_Valid() const{
    return m_cloud_watch_metrics_isValid;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
