/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobManifestGeneratorFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobManifestGeneratorFilter::OAIJobManifestGeneratorFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobManifestGeneratorFilter::OAIJobManifestGeneratorFilter() {
    this->initializeModel();
}

OAIJobManifestGeneratorFilter::~OAIJobManifestGeneratorFilter() {}

void OAIJobManifestGeneratorFilter::initializeModel() {

    m_eligible_for_replication_isSet = false;
    m_eligible_for_replication_isValid = false;

    m_created_after_isSet = false;
    m_created_after_isValid = false;

    m_created_before_isSet = false;
    m_created_before_isValid = false;

    m_object_replication_statuses_isSet = false;
    m_object_replication_statuses_isValid = false;
}

void OAIJobManifestGeneratorFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobManifestGeneratorFilter::fromJsonObject(QJsonObject json) {

    m_eligible_for_replication_isValid = ::OpenAPI::fromJsonValue(m_eligible_for_replication, json[QString("EligibleForReplication")]);
    m_eligible_for_replication_isSet = !json[QString("EligibleForReplication")].isNull() && m_eligible_for_replication_isValid;

    m_created_after_isValid = ::OpenAPI::fromJsonValue(m_created_after, json[QString("CreatedAfter")]);
    m_created_after_isSet = !json[QString("CreatedAfter")].isNull() && m_created_after_isValid;

    m_created_before_isValid = ::OpenAPI::fromJsonValue(m_created_before, json[QString("CreatedBefore")]);
    m_created_before_isSet = !json[QString("CreatedBefore")].isNull() && m_created_before_isValid;

    m_object_replication_statuses_isValid = ::OpenAPI::fromJsonValue(m_object_replication_statuses, json[QString("ObjectReplicationStatuses")]);
    m_object_replication_statuses_isSet = !json[QString("ObjectReplicationStatuses")].isNull() && m_object_replication_statuses_isValid;
}

QString OAIJobManifestGeneratorFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobManifestGeneratorFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_eligible_for_replication_isSet) {
        obj.insert(QString("EligibleForReplication"), ::OpenAPI::toJsonValue(m_eligible_for_replication));
    }
    if (m_created_after_isSet) {
        obj.insert(QString("CreatedAfter"), ::OpenAPI::toJsonValue(m_created_after));
    }
    if (m_created_before_isSet) {
        obj.insert(QString("CreatedBefore"), ::OpenAPI::toJsonValue(m_created_before));
    }
    if (m_object_replication_statuses.isSet()) {
        obj.insert(QString("ObjectReplicationStatuses"), ::OpenAPI::toJsonValue(m_object_replication_statuses));
    }
    return obj;
}

bool OAIJobManifestGeneratorFilter::getEligibleForReplication() const {
    return m_eligible_for_replication;
}
void OAIJobManifestGeneratorFilter::setEligibleForReplication(const bool &eligible_for_replication) {
    m_eligible_for_replication = eligible_for_replication;
    m_eligible_for_replication_isSet = true;
}

bool OAIJobManifestGeneratorFilter::is_eligible_for_replication_Set() const{
    return m_eligible_for_replication_isSet;
}

bool OAIJobManifestGeneratorFilter::is_eligible_for_replication_Valid() const{
    return m_eligible_for_replication_isValid;
}

QDateTime OAIJobManifestGeneratorFilter::getCreatedAfter() const {
    return m_created_after;
}
void OAIJobManifestGeneratorFilter::setCreatedAfter(const QDateTime &created_after) {
    m_created_after = created_after;
    m_created_after_isSet = true;
}

bool OAIJobManifestGeneratorFilter::is_created_after_Set() const{
    return m_created_after_isSet;
}

bool OAIJobManifestGeneratorFilter::is_created_after_Valid() const{
    return m_created_after_isValid;
}

QDateTime OAIJobManifestGeneratorFilter::getCreatedBefore() const {
    return m_created_before;
}
void OAIJobManifestGeneratorFilter::setCreatedBefore(const QDateTime &created_before) {
    m_created_before = created_before;
    m_created_before_isSet = true;
}

bool OAIJobManifestGeneratorFilter::is_created_before_Set() const{
    return m_created_before_isSet;
}

bool OAIJobManifestGeneratorFilter::is_created_before_Valid() const{
    return m_created_before_isValid;
}

QList OAIJobManifestGeneratorFilter::getObjectReplicationStatuses() const {
    return m_object_replication_statuses;
}
void OAIJobManifestGeneratorFilter::setObjectReplicationStatuses(const QList &object_replication_statuses) {
    m_object_replication_statuses = object_replication_statuses;
    m_object_replication_statuses_isSet = true;
}

bool OAIJobManifestGeneratorFilter::is_object_replication_statuses_Set() const{
    return m_object_replication_statuses_isSet;
}

bool OAIJobManifestGeneratorFilter::is_object_replication_statuses_Valid() const{
    return m_object_replication_statuses_isValid;
}

bool OAIJobManifestGeneratorFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eligible_for_replication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_replication_statuses.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobManifestGeneratorFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
