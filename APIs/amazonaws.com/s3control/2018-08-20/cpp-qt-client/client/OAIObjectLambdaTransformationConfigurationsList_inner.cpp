/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectLambdaTransformationConfigurationsList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectLambdaTransformationConfigurationsList_inner::OAIObjectLambdaTransformationConfigurationsList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectLambdaTransformationConfigurationsList_inner::OAIObjectLambdaTransformationConfigurationsList_inner() {
    this->initializeModel();
}

OAIObjectLambdaTransformationConfigurationsList_inner::~OAIObjectLambdaTransformationConfigurationsList_inner() {}

void OAIObjectLambdaTransformationConfigurationsList_inner::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_content_transformation_isSet = false;
    m_content_transformation_isValid = false;
}

void OAIObjectLambdaTransformationConfigurationsList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectLambdaTransformationConfigurationsList_inner::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;

    m_content_transformation_isValid = ::OpenAPI::fromJsonValue(m_content_transformation, json[QString("ContentTransformation")]);
    m_content_transformation_isSet = !json[QString("ContentTransformation")].isNull() && m_content_transformation_isValid;
}

QString OAIObjectLambdaTransformationConfigurationsList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectLambdaTransformationConfigurationsList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_content_transformation.isSet()) {
        obj.insert(QString("ContentTransformation"), ::OpenAPI::toJsonValue(m_content_transformation));
    }
    return obj;
}

QList OAIObjectLambdaTransformationConfigurationsList_inner::getActions() const {
    return m_actions;
}
void OAIObjectLambdaTransformationConfigurationsList_inner::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIObjectLambdaTransformationConfigurationsList_inner::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIObjectLambdaTransformationConfigurationsList_inner::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIObjectLambdaTransformationConfiguration_ContentTransformation OAIObjectLambdaTransformationConfigurationsList_inner::getContentTransformation() const {
    return m_content_transformation;
}
void OAIObjectLambdaTransformationConfigurationsList_inner::setContentTransformation(const OAIObjectLambdaTransformationConfiguration_ContentTransformation &content_transformation) {
    m_content_transformation = content_transformation;
    m_content_transformation_isSet = true;
}

bool OAIObjectLambdaTransformationConfigurationsList_inner::is_content_transformation_Set() const{
    return m_content_transformation_isSet;
}

bool OAIObjectLambdaTransformationConfigurationsList_inner::is_content_transformation_Valid() const{
    return m_content_transformation_isValid;
}

bool OAIObjectLambdaTransformationConfigurationsList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_transformation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectLambdaTransformationConfigurationsList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actions_isValid && m_content_transformation_isValid && true;
}

} // namespace OpenAPI
