/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutStorageLensConfiguration_request_StorageLensConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutStorageLensConfiguration_request_StorageLensConfiguration::OAIPutStorageLensConfiguration_request_StorageLensConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration::OAIPutStorageLensConfiguration_request_StorageLensConfiguration() {
    this->initializeModel();
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration::~OAIPutStorageLensConfiguration_request_StorageLensConfiguration() {}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_account_level_isSet = false;
    m_account_level_isValid = false;

    m_include_isSet = false;
    m_include_isValid = false;

    m_exclude_isSet = false;
    m_exclude_isValid = false;

    m_data_export_isSet = false;
    m_data_export_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_aws_org_isSet = false;
    m_aws_org_isValid = false;

    m_storage_lens_arn_isSet = false;
    m_storage_lens_arn_isValid = false;
}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_account_level_isValid = ::OpenAPI::fromJsonValue(m_account_level, json[QString("AccountLevel")]);
    m_account_level_isSet = !json[QString("AccountLevel")].isNull() && m_account_level_isValid;

    m_include_isValid = ::OpenAPI::fromJsonValue(m_include, json[QString("Include")]);
    m_include_isSet = !json[QString("Include")].isNull() && m_include_isValid;

    m_exclude_isValid = ::OpenAPI::fromJsonValue(m_exclude, json[QString("Exclude")]);
    m_exclude_isSet = !json[QString("Exclude")].isNull() && m_exclude_isValid;

    m_data_export_isValid = ::OpenAPI::fromJsonValue(m_data_export, json[QString("DataExport")]);
    m_data_export_isSet = !json[QString("DataExport")].isNull() && m_data_export_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("IsEnabled")]);
    m_is_enabled_isSet = !json[QString("IsEnabled")].isNull() && m_is_enabled_isValid;

    m_aws_org_isValid = ::OpenAPI::fromJsonValue(m_aws_org, json[QString("AwsOrg")]);
    m_aws_org_isSet = !json[QString("AwsOrg")].isNull() && m_aws_org_isValid;

    m_storage_lens_arn_isValid = ::OpenAPI::fromJsonValue(m_storage_lens_arn, json[QString("StorageLensArn")]);
    m_storage_lens_arn_isSet = !json[QString("StorageLensArn")].isNull() && m_storage_lens_arn_isValid;
}

QString OAIPutStorageLensConfiguration_request_StorageLensConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutStorageLensConfiguration_request_StorageLensConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_account_level.isSet()) {
        obj.insert(QString("AccountLevel"), ::OpenAPI::toJsonValue(m_account_level));
    }
    if (m_include.isSet()) {
        obj.insert(QString("Include"), ::OpenAPI::toJsonValue(m_include));
    }
    if (m_exclude.isSet()) {
        obj.insert(QString("Exclude"), ::OpenAPI::toJsonValue(m_exclude));
    }
    if (m_data_export.isSet()) {
        obj.insert(QString("DataExport"), ::OpenAPI::toJsonValue(m_data_export));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("IsEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_aws_org.isSet()) {
        obj.insert(QString("AwsOrg"), ::OpenAPI::toJsonValue(m_aws_org));
    }
    if (m_storage_lens_arn_isSet) {
        obj.insert(QString("StorageLensArn"), ::OpenAPI::toJsonValue(m_storage_lens_arn));
    }
    return obj;
}

QString OAIPutStorageLensConfiguration_request_StorageLensConfiguration::getId() const {
    return m_id;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_id_Valid() const{
    return m_id_isValid;
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_AccountLevel OAIPutStorageLensConfiguration_request_StorageLensConfiguration::getAccountLevel() const {
    return m_account_level;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::setAccountLevel(const OAIPutStorageLensConfiguration_request_StorageLensConfiguration_AccountLevel &account_level) {
    m_account_level = account_level;
    m_account_level_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_account_level_Set() const{
    return m_account_level_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_account_level_Valid() const{
    return m_account_level_isValid;
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Include OAIPutStorageLensConfiguration_request_StorageLensConfiguration::getInclude() const {
    return m_include;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::setInclude(const OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Include &include) {
    m_include = include;
    m_include_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_include_Set() const{
    return m_include_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_include_Valid() const{
    return m_include_isValid;
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude OAIPutStorageLensConfiguration_request_StorageLensConfiguration::getExclude() const {
    return m_exclude;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::setExclude(const OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude &exclude) {
    m_exclude = exclude;
    m_exclude_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_exclude_Set() const{
    return m_exclude_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_exclude_Valid() const{
    return m_exclude_isValid;
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport OAIPutStorageLensConfiguration_request_StorageLensConfiguration::getDataExport() const {
    return m_data_export;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::setDataExport(const OAIPutStorageLensConfiguration_request_StorageLensConfiguration_DataExport &data_export) {
    m_data_export = data_export;
    m_data_export_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_data_export_Set() const{
    return m_data_export_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_data_export_Valid() const{
    return m_data_export_isValid;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::getIsEnabled() const {
    return m_is_enabled;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_AwsOrg OAIPutStorageLensConfiguration_request_StorageLensConfiguration::getAwsOrg() const {
    return m_aws_org;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::setAwsOrg(const OAIPutStorageLensConfiguration_request_StorageLensConfiguration_AwsOrg &aws_org) {
    m_aws_org = aws_org;
    m_aws_org_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_aws_org_Set() const{
    return m_aws_org_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_aws_org_Valid() const{
    return m_aws_org_isValid;
}

QString OAIPutStorageLensConfiguration_request_StorageLensConfiguration::getStorageLensArn() const {
    return m_storage_lens_arn;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration::setStorageLensArn(const QString &storage_lens_arn) {
    m_storage_lens_arn = storage_lens_arn;
    m_storage_lens_arn_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_storage_lens_arn_Set() const{
    return m_storage_lens_arn_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::is_storage_lens_arn_Valid() const{
    return m_storage_lens_arn_isValid;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_export.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_org.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_lens_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
