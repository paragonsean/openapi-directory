/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecycleExpiration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecycleExpiration::OAILifecycleExpiration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecycleExpiration::OAILifecycleExpiration() {
    this->initializeModel();
}

OAILifecycleExpiration::~OAILifecycleExpiration() {}

void OAILifecycleExpiration::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_days_isSet = false;
    m_days_isValid = false;

    m_expired_object_delete_marker_isSet = false;
    m_expired_object_delete_marker_isValid = false;
}

void OAILifecycleExpiration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifecycleExpiration::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("Date")]);
    m_date_isSet = !json[QString("Date")].isNull() && m_date_isValid;

    m_days_isValid = ::OpenAPI::fromJsonValue(m_days, json[QString("Days")]);
    m_days_isSet = !json[QString("Days")].isNull() && m_days_isValid;

    m_expired_object_delete_marker_isValid = ::OpenAPI::fromJsonValue(m_expired_object_delete_marker, json[QString("ExpiredObjectDeleteMarker")]);
    m_expired_object_delete_marker_isSet = !json[QString("ExpiredObjectDeleteMarker")].isNull() && m_expired_object_delete_marker_isValid;
}

QString OAILifecycleExpiration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifecycleExpiration::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("Date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_days_isSet) {
        obj.insert(QString("Days"), ::OpenAPI::toJsonValue(m_days));
    }
    if (m_expired_object_delete_marker_isSet) {
        obj.insert(QString("ExpiredObjectDeleteMarker"), ::OpenAPI::toJsonValue(m_expired_object_delete_marker));
    }
    return obj;
}

QDateTime OAILifecycleExpiration::getDate() const {
    return m_date;
}
void OAILifecycleExpiration::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAILifecycleExpiration::is_date_Set() const{
    return m_date_isSet;
}

bool OAILifecycleExpiration::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAILifecycleExpiration::getDays() const {
    return m_days;
}
void OAILifecycleExpiration::setDays(const qint32 &days) {
    m_days = days;
    m_days_isSet = true;
}

bool OAILifecycleExpiration::is_days_Set() const{
    return m_days_isSet;
}

bool OAILifecycleExpiration::is_days_Valid() const{
    return m_days_isValid;
}

bool OAILifecycleExpiration::getExpiredObjectDeleteMarker() const {
    return m_expired_object_delete_marker;
}
void OAILifecycleExpiration::setExpiredObjectDeleteMarker(const bool &expired_object_delete_marker) {
    m_expired_object_delete_marker = expired_object_delete_marker;
    m_expired_object_delete_marker_isSet = true;
}

bool OAILifecycleExpiration::is_expired_object_delete_marker_Set() const{
    return m_expired_object_delete_marker_isSet;
}

bool OAILifecycleExpiration::is_expired_object_delete_marker_Valid() const{
    return m_expired_object_delete_marker_isValid;
}

bool OAILifecycleExpiration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_object_delete_marker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifecycleExpiration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
