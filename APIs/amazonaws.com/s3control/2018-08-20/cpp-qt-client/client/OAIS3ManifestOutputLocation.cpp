/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ManifestOutputLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ManifestOutputLocation::OAIS3ManifestOutputLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ManifestOutputLocation::OAIS3ManifestOutputLocation() {
    this->initializeModel();
}

OAIS3ManifestOutputLocation::~OAIS3ManifestOutputLocation() {}

void OAIS3ManifestOutputLocation::initializeModel() {

    m_expected_manifest_bucket_owner_isSet = false;
    m_expected_manifest_bucket_owner_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_manifest_prefix_isSet = false;
    m_manifest_prefix_isValid = false;

    m_manifest_encryption_isSet = false;
    m_manifest_encryption_isValid = false;

    m_manifest_format_isSet = false;
    m_manifest_format_isValid = false;
}

void OAIS3ManifestOutputLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3ManifestOutputLocation::fromJsonObject(QJsonObject json) {

    m_expected_manifest_bucket_owner_isValid = ::OpenAPI::fromJsonValue(m_expected_manifest_bucket_owner, json[QString("ExpectedManifestBucketOwner")]);
    m_expected_manifest_bucket_owner_isSet = !json[QString("ExpectedManifestBucketOwner")].isNull() && m_expected_manifest_bucket_owner_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_manifest_prefix_isValid = ::OpenAPI::fromJsonValue(m_manifest_prefix, json[QString("ManifestPrefix")]);
    m_manifest_prefix_isSet = !json[QString("ManifestPrefix")].isNull() && m_manifest_prefix_isValid;

    m_manifest_encryption_isValid = ::OpenAPI::fromJsonValue(m_manifest_encryption, json[QString("ManifestEncryption")]);
    m_manifest_encryption_isSet = !json[QString("ManifestEncryption")].isNull() && m_manifest_encryption_isValid;

    m_manifest_format_isValid = ::OpenAPI::fromJsonValue(m_manifest_format, json[QString("ManifestFormat")]);
    m_manifest_format_isSet = !json[QString("ManifestFormat")].isNull() && m_manifest_format_isValid;
}

QString OAIS3ManifestOutputLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3ManifestOutputLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_manifest_bucket_owner_isSet) {
        obj.insert(QString("ExpectedManifestBucketOwner"), ::OpenAPI::toJsonValue(m_expected_manifest_bucket_owner));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_manifest_prefix_isSet) {
        obj.insert(QString("ManifestPrefix"), ::OpenAPI::toJsonValue(m_manifest_prefix));
    }
    if (m_manifest_encryption.isSet()) {
        obj.insert(QString("ManifestEncryption"), ::OpenAPI::toJsonValue(m_manifest_encryption));
    }
    if (m_manifest_format.isSet()) {
        obj.insert(QString("ManifestFormat"), ::OpenAPI::toJsonValue(m_manifest_format));
    }
    return obj;
}

QString OAIS3ManifestOutputLocation::getExpectedManifestBucketOwner() const {
    return m_expected_manifest_bucket_owner;
}
void OAIS3ManifestOutputLocation::setExpectedManifestBucketOwner(const QString &expected_manifest_bucket_owner) {
    m_expected_manifest_bucket_owner = expected_manifest_bucket_owner;
    m_expected_manifest_bucket_owner_isSet = true;
}

bool OAIS3ManifestOutputLocation::is_expected_manifest_bucket_owner_Set() const{
    return m_expected_manifest_bucket_owner_isSet;
}

bool OAIS3ManifestOutputLocation::is_expected_manifest_bucket_owner_Valid() const{
    return m_expected_manifest_bucket_owner_isValid;
}

QString OAIS3ManifestOutputLocation::getBucket() const {
    return m_bucket;
}
void OAIS3ManifestOutputLocation::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIS3ManifestOutputLocation::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIS3ManifestOutputLocation::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIS3ManifestOutputLocation::getManifestPrefix() const {
    return m_manifest_prefix;
}
void OAIS3ManifestOutputLocation::setManifestPrefix(const QString &manifest_prefix) {
    m_manifest_prefix = manifest_prefix;
    m_manifest_prefix_isSet = true;
}

bool OAIS3ManifestOutputLocation::is_manifest_prefix_Set() const{
    return m_manifest_prefix_isSet;
}

bool OAIS3ManifestOutputLocation::is_manifest_prefix_Valid() const{
    return m_manifest_prefix_isValid;
}

OAIS3ManifestOutputLocation_ManifestEncryption OAIS3ManifestOutputLocation::getManifestEncryption() const {
    return m_manifest_encryption;
}
void OAIS3ManifestOutputLocation::setManifestEncryption(const OAIS3ManifestOutputLocation_ManifestEncryption &manifest_encryption) {
    m_manifest_encryption = manifest_encryption;
    m_manifest_encryption_isSet = true;
}

bool OAIS3ManifestOutputLocation::is_manifest_encryption_Set() const{
    return m_manifest_encryption_isSet;
}

bool OAIS3ManifestOutputLocation::is_manifest_encryption_Valid() const{
    return m_manifest_encryption_isValid;
}

OAIGeneratedManifestFormat OAIS3ManifestOutputLocation::getManifestFormat() const {
    return m_manifest_format;
}
void OAIS3ManifestOutputLocation::setManifestFormat(const OAIGeneratedManifestFormat &manifest_format) {
    m_manifest_format = manifest_format;
    m_manifest_format_isSet = true;
}

bool OAIS3ManifestOutputLocation::is_manifest_format_Set() const{
    return m_manifest_format_isSet;
}

bool OAIS3ManifestOutputLocation::is_manifest_format_Valid() const{
    return m_manifest_format_isValid;
}

bool OAIS3ManifestOutputLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_manifest_bucket_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3ManifestOutputLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_manifest_format_isValid && true;
}

} // namespace OpenAPI
