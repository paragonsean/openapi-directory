/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAccessPointResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAccessPointResult::OAIGetAccessPointResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAccessPointResult::OAIGetAccessPointResult() {
    this->initializeModel();
}

OAIGetAccessPointResult::~OAIGetAccessPointResult() {}

void OAIGetAccessPointResult::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_network_origin_isSet = false;
    m_network_origin_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_public_access_block_configuration_isSet = false;
    m_public_access_block_configuration_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_access_point_arn_isSet = false;
    m_access_point_arn_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_bucket_account_id_isSet = false;
    m_bucket_account_id_isValid = false;
}

void OAIGetAccessPointResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAccessPointResult::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_network_origin_isValid = ::OpenAPI::fromJsonValue(m_network_origin, json[QString("NetworkOrigin")]);
    m_network_origin_isSet = !json[QString("NetworkOrigin")].isNull() && m_network_origin_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("VpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("VpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_public_access_block_configuration_isValid = ::OpenAPI::fromJsonValue(m_public_access_block_configuration, json[QString("PublicAccessBlockConfiguration")]);
    m_public_access_block_configuration_isSet = !json[QString("PublicAccessBlockConfiguration")].isNull() && m_public_access_block_configuration_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_access_point_arn_isValid = ::OpenAPI::fromJsonValue(m_access_point_arn, json[QString("AccessPointArn")]);
    m_access_point_arn_isSet = !json[QString("AccessPointArn")].isNull() && m_access_point_arn_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;

    m_bucket_account_id_isValid = ::OpenAPI::fromJsonValue(m_bucket_account_id, json[QString("BucketAccountId")]);
    m_bucket_account_id_isSet = !json[QString("BucketAccountId")].isNull() && m_bucket_account_id_isValid;
}

QString OAIGetAccessPointResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAccessPointResult::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_network_origin.isSet()) {
        obj.insert(QString("NetworkOrigin"), ::OpenAPI::toJsonValue(m_network_origin));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("VpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_public_access_block_configuration.isSet()) {
        obj.insert(QString("PublicAccessBlockConfiguration"), ::OpenAPI::toJsonValue(m_public_access_block_configuration));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_access_point_arn_isSet) {
        obj.insert(QString("AccessPointArn"), ::OpenAPI::toJsonValue(m_access_point_arn));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_bucket_account_id_isSet) {
        obj.insert(QString("BucketAccountId"), ::OpenAPI::toJsonValue(m_bucket_account_id));
    }
    return obj;
}

QString OAIGetAccessPointResult::getName() const {
    return m_name;
}
void OAIGetAccessPointResult::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetAccessPointResult::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetAccessPointResult::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetAccessPointResult::getBucket() const {
    return m_bucket;
}
void OAIGetAccessPointResult::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIGetAccessPointResult::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIGetAccessPointResult::is_bucket_Valid() const{
    return m_bucket_isValid;
}

OAINetworkOrigin OAIGetAccessPointResult::getNetworkOrigin() const {
    return m_network_origin;
}
void OAIGetAccessPointResult::setNetworkOrigin(const OAINetworkOrigin &network_origin) {
    m_network_origin = network_origin;
    m_network_origin_isSet = true;
}

bool OAIGetAccessPointResult::is_network_origin_Set() const{
    return m_network_origin_isSet;
}

bool OAIGetAccessPointResult::is_network_origin_Valid() const{
    return m_network_origin_isValid;
}

OAIGetAccessPointResult_VpcConfiguration OAIGetAccessPointResult::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIGetAccessPointResult::setVpcConfiguration(const OAIGetAccessPointResult_VpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIGetAccessPointResult::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIGetAccessPointResult::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

OAIPublicAccessBlockConfiguration OAIGetAccessPointResult::getPublicAccessBlockConfiguration() const {
    return m_public_access_block_configuration;
}
void OAIGetAccessPointResult::setPublicAccessBlockConfiguration(const OAIPublicAccessBlockConfiguration &public_access_block_configuration) {
    m_public_access_block_configuration = public_access_block_configuration;
    m_public_access_block_configuration_isSet = true;
}

bool OAIGetAccessPointResult::is_public_access_block_configuration_Set() const{
    return m_public_access_block_configuration_isSet;
}

bool OAIGetAccessPointResult::is_public_access_block_configuration_Valid() const{
    return m_public_access_block_configuration_isValid;
}

QDateTime OAIGetAccessPointResult::getCreationDate() const {
    return m_creation_date;
}
void OAIGetAccessPointResult::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGetAccessPointResult::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGetAccessPointResult::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIGetAccessPointResult::getAlias() const {
    return m_alias;
}
void OAIGetAccessPointResult::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIGetAccessPointResult::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIGetAccessPointResult::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIGetAccessPointResult::getAccessPointArn() const {
    return m_access_point_arn;
}
void OAIGetAccessPointResult::setAccessPointArn(const QString &access_point_arn) {
    m_access_point_arn = access_point_arn;
    m_access_point_arn_isSet = true;
}

bool OAIGetAccessPointResult::is_access_point_arn_Set() const{
    return m_access_point_arn_isSet;
}

bool OAIGetAccessPointResult::is_access_point_arn_Valid() const{
    return m_access_point_arn_isValid;
}

QMap OAIGetAccessPointResult::getEndpoints() const {
    return m_endpoints;
}
void OAIGetAccessPointResult::setEndpoints(const QMap &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIGetAccessPointResult::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIGetAccessPointResult::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAIGetAccessPointResult::getBucketAccountId() const {
    return m_bucket_account_id;
}
void OAIGetAccessPointResult::setBucketAccountId(const QString &bucket_account_id) {
    m_bucket_account_id = bucket_account_id;
    m_bucket_account_id_isSet = true;
}

bool OAIGetAccessPointResult::is_bucket_account_id_Set() const{
    return m_bucket_account_id_isSet;
}

bool OAIGetAccessPointResult::is_bucket_account_id_Valid() const{
    return m_bucket_account_id_isValid;
}

bool OAIGetAccessPointResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_access_block_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAccessPointResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
