/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3BucketDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3BucketDestination::OAIS3BucketDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3BucketDestination::OAIS3BucketDestination() {
    this->initializeModel();
}

OAIS3BucketDestination::~OAIS3BucketDestination() {}

void OAIS3BucketDestination::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_output_schema_version_isSet = false;
    m_output_schema_version_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;
}

void OAIS3BucketDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3BucketDestination::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_output_schema_version_isValid = ::OpenAPI::fromJsonValue(m_output_schema_version, json[QString("OutputSchemaVersion")]);
    m_output_schema_version_isSet = !json[QString("OutputSchemaVersion")].isNull() && m_output_schema_version_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;
}

QString OAIS3BucketDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3BucketDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_output_schema_version.isSet()) {
        obj.insert(QString("OutputSchemaVersion"), ::OpenAPI::toJsonValue(m_output_schema_version));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    return obj;
}

OAIFormat OAIS3BucketDestination::getFormat() const {
    return m_format;
}
void OAIS3BucketDestination::setFormat(const OAIFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIS3BucketDestination::is_format_Set() const{
    return m_format_isSet;
}

bool OAIS3BucketDestination::is_format_Valid() const{
    return m_format_isValid;
}

OAIOutputSchemaVersion OAIS3BucketDestination::getOutputSchemaVersion() const {
    return m_output_schema_version;
}
void OAIS3BucketDestination::setOutputSchemaVersion(const OAIOutputSchemaVersion &output_schema_version) {
    m_output_schema_version = output_schema_version;
    m_output_schema_version_isSet = true;
}

bool OAIS3BucketDestination::is_output_schema_version_Set() const{
    return m_output_schema_version_isSet;
}

bool OAIS3BucketDestination::is_output_schema_version_Valid() const{
    return m_output_schema_version_isValid;
}

QString OAIS3BucketDestination::getAccountId() const {
    return m_account_id;
}
void OAIS3BucketDestination::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIS3BucketDestination::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIS3BucketDestination::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIS3BucketDestination::getArn() const {
    return m_arn;
}
void OAIS3BucketDestination::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIS3BucketDestination::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIS3BucketDestination::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIS3BucketDestination::getPrefix() const {
    return m_prefix;
}
void OAIS3BucketDestination::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIS3BucketDestination::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIS3BucketDestination::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAIS3BucketDestination_Encryption OAIS3BucketDestination::getEncryption() const {
    return m_encryption;
}
void OAIS3BucketDestination::setEncryption(const OAIS3BucketDestination_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIS3BucketDestination::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIS3BucketDestination::is_encryption_Valid() const{
    return m_encryption_isValid;
}

bool OAIS3BucketDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_schema_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3BucketDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_output_schema_version_isValid && m_account_id_isValid && m_arn_isValid && true;
}

} // namespace OpenAPI
