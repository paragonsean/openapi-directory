/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3CopyObjectOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3CopyObjectOperation::OAIS3CopyObjectOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3CopyObjectOperation::OAIS3CopyObjectOperation() {
    this->initializeModel();
}

OAIS3CopyObjectOperation::~OAIS3CopyObjectOperation() {}

void OAIS3CopyObjectOperation::initializeModel() {

    m_target_resource_isSet = false;
    m_target_resource_isValid = false;

    m_canned_access_control_list_isSet = false;
    m_canned_access_control_list_isValid = false;

    m_access_control_grants_isSet = false;
    m_access_control_grants_isValid = false;

    m_metadata_directive_isSet = false;
    m_metadata_directive_isValid = false;

    m_modified_since_constraint_isSet = false;
    m_modified_since_constraint_isValid = false;

    m_new_object_metadata_isSet = false;
    m_new_object_metadata_isValid = false;

    m_new_object_tagging_isSet = false;
    m_new_object_tagging_isValid = false;

    m_redirect_location_isSet = false;
    m_redirect_location_isValid = false;

    m_requester_pays_isSet = false;
    m_requester_pays_isValid = false;

    m_storage_class_isSet = false;
    m_storage_class_isValid = false;

    m_un_modified_since_constraint_isSet = false;
    m_un_modified_since_constraint_isValid = false;

    m_sse_aws_kms_key_id_isSet = false;
    m_sse_aws_kms_key_id_isValid = false;

    m_target_key_prefix_isSet = false;
    m_target_key_prefix_isValid = false;

    m_object_lock_legal_hold_status_isSet = false;
    m_object_lock_legal_hold_status_isValid = false;

    m_object_lock_mode_isSet = false;
    m_object_lock_mode_isValid = false;

    m_object_lock_retain_until_date_isSet = false;
    m_object_lock_retain_until_date_isValid = false;

    m_bucket_key_enabled_isSet = false;
    m_bucket_key_enabled_isValid = false;

    m_checksum_algorithm_isSet = false;
    m_checksum_algorithm_isValid = false;
}

void OAIS3CopyObjectOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3CopyObjectOperation::fromJsonObject(QJsonObject json) {

    m_target_resource_isValid = ::OpenAPI::fromJsonValue(m_target_resource, json[QString("TargetResource")]);
    m_target_resource_isSet = !json[QString("TargetResource")].isNull() && m_target_resource_isValid;

    m_canned_access_control_list_isValid = ::OpenAPI::fromJsonValue(m_canned_access_control_list, json[QString("CannedAccessControlList")]);
    m_canned_access_control_list_isSet = !json[QString("CannedAccessControlList")].isNull() && m_canned_access_control_list_isValid;

    m_access_control_grants_isValid = ::OpenAPI::fromJsonValue(m_access_control_grants, json[QString("AccessControlGrants")]);
    m_access_control_grants_isSet = !json[QString("AccessControlGrants")].isNull() && m_access_control_grants_isValid;

    m_metadata_directive_isValid = ::OpenAPI::fromJsonValue(m_metadata_directive, json[QString("MetadataDirective")]);
    m_metadata_directive_isSet = !json[QString("MetadataDirective")].isNull() && m_metadata_directive_isValid;

    m_modified_since_constraint_isValid = ::OpenAPI::fromJsonValue(m_modified_since_constraint, json[QString("ModifiedSinceConstraint")]);
    m_modified_since_constraint_isSet = !json[QString("ModifiedSinceConstraint")].isNull() && m_modified_since_constraint_isValid;

    m_new_object_metadata_isValid = ::OpenAPI::fromJsonValue(m_new_object_metadata, json[QString("NewObjectMetadata")]);
    m_new_object_metadata_isSet = !json[QString("NewObjectMetadata")].isNull() && m_new_object_metadata_isValid;

    m_new_object_tagging_isValid = ::OpenAPI::fromJsonValue(m_new_object_tagging, json[QString("NewObjectTagging")]);
    m_new_object_tagging_isSet = !json[QString("NewObjectTagging")].isNull() && m_new_object_tagging_isValid;

    m_redirect_location_isValid = ::OpenAPI::fromJsonValue(m_redirect_location, json[QString("RedirectLocation")]);
    m_redirect_location_isSet = !json[QString("RedirectLocation")].isNull() && m_redirect_location_isValid;

    m_requester_pays_isValid = ::OpenAPI::fromJsonValue(m_requester_pays, json[QString("RequesterPays")]);
    m_requester_pays_isSet = !json[QString("RequesterPays")].isNull() && m_requester_pays_isValid;

    m_storage_class_isValid = ::OpenAPI::fromJsonValue(m_storage_class, json[QString("StorageClass")]);
    m_storage_class_isSet = !json[QString("StorageClass")].isNull() && m_storage_class_isValid;

    m_un_modified_since_constraint_isValid = ::OpenAPI::fromJsonValue(m_un_modified_since_constraint, json[QString("UnModifiedSinceConstraint")]);
    m_un_modified_since_constraint_isSet = !json[QString("UnModifiedSinceConstraint")].isNull() && m_un_modified_since_constraint_isValid;

    m_sse_aws_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_sse_aws_kms_key_id, json[QString("SSEAwsKmsKeyId")]);
    m_sse_aws_kms_key_id_isSet = !json[QString("SSEAwsKmsKeyId")].isNull() && m_sse_aws_kms_key_id_isValid;

    m_target_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_target_key_prefix, json[QString("TargetKeyPrefix")]);
    m_target_key_prefix_isSet = !json[QString("TargetKeyPrefix")].isNull() && m_target_key_prefix_isValid;

    m_object_lock_legal_hold_status_isValid = ::OpenAPI::fromJsonValue(m_object_lock_legal_hold_status, json[QString("ObjectLockLegalHoldStatus")]);
    m_object_lock_legal_hold_status_isSet = !json[QString("ObjectLockLegalHoldStatus")].isNull() && m_object_lock_legal_hold_status_isValid;

    m_object_lock_mode_isValid = ::OpenAPI::fromJsonValue(m_object_lock_mode, json[QString("ObjectLockMode")]);
    m_object_lock_mode_isSet = !json[QString("ObjectLockMode")].isNull() && m_object_lock_mode_isValid;

    m_object_lock_retain_until_date_isValid = ::OpenAPI::fromJsonValue(m_object_lock_retain_until_date, json[QString("ObjectLockRetainUntilDate")]);
    m_object_lock_retain_until_date_isSet = !json[QString("ObjectLockRetainUntilDate")].isNull() && m_object_lock_retain_until_date_isValid;

    m_bucket_key_enabled_isValid = ::OpenAPI::fromJsonValue(m_bucket_key_enabled, json[QString("BucketKeyEnabled")]);
    m_bucket_key_enabled_isSet = !json[QString("BucketKeyEnabled")].isNull() && m_bucket_key_enabled_isValid;

    m_checksum_algorithm_isValid = ::OpenAPI::fromJsonValue(m_checksum_algorithm, json[QString("ChecksumAlgorithm")]);
    m_checksum_algorithm_isSet = !json[QString("ChecksumAlgorithm")].isNull() && m_checksum_algorithm_isValid;
}

QString OAIS3CopyObjectOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3CopyObjectOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_target_resource_isSet) {
        obj.insert(QString("TargetResource"), ::OpenAPI::toJsonValue(m_target_resource));
    }
    if (m_canned_access_control_list.isSet()) {
        obj.insert(QString("CannedAccessControlList"), ::OpenAPI::toJsonValue(m_canned_access_control_list));
    }
    if (m_access_control_grants.isSet()) {
        obj.insert(QString("AccessControlGrants"), ::OpenAPI::toJsonValue(m_access_control_grants));
    }
    if (m_metadata_directive.isSet()) {
        obj.insert(QString("MetadataDirective"), ::OpenAPI::toJsonValue(m_metadata_directive));
    }
    if (m_modified_since_constraint_isSet) {
        obj.insert(QString("ModifiedSinceConstraint"), ::OpenAPI::toJsonValue(m_modified_since_constraint));
    }
    if (m_new_object_metadata.isSet()) {
        obj.insert(QString("NewObjectMetadata"), ::OpenAPI::toJsonValue(m_new_object_metadata));
    }
    if (m_new_object_tagging.isSet()) {
        obj.insert(QString("NewObjectTagging"), ::OpenAPI::toJsonValue(m_new_object_tagging));
    }
    if (m_redirect_location_isSet) {
        obj.insert(QString("RedirectLocation"), ::OpenAPI::toJsonValue(m_redirect_location));
    }
    if (m_requester_pays_isSet) {
        obj.insert(QString("RequesterPays"), ::OpenAPI::toJsonValue(m_requester_pays));
    }
    if (m_storage_class.isSet()) {
        obj.insert(QString("StorageClass"), ::OpenAPI::toJsonValue(m_storage_class));
    }
    if (m_un_modified_since_constraint_isSet) {
        obj.insert(QString("UnModifiedSinceConstraint"), ::OpenAPI::toJsonValue(m_un_modified_since_constraint));
    }
    if (m_sse_aws_kms_key_id_isSet) {
        obj.insert(QString("SSEAwsKmsKeyId"), ::OpenAPI::toJsonValue(m_sse_aws_kms_key_id));
    }
    if (m_target_key_prefix_isSet) {
        obj.insert(QString("TargetKeyPrefix"), ::OpenAPI::toJsonValue(m_target_key_prefix));
    }
    if (m_object_lock_legal_hold_status.isSet()) {
        obj.insert(QString("ObjectLockLegalHoldStatus"), ::OpenAPI::toJsonValue(m_object_lock_legal_hold_status));
    }
    if (m_object_lock_mode.isSet()) {
        obj.insert(QString("ObjectLockMode"), ::OpenAPI::toJsonValue(m_object_lock_mode));
    }
    if (m_object_lock_retain_until_date_isSet) {
        obj.insert(QString("ObjectLockRetainUntilDate"), ::OpenAPI::toJsonValue(m_object_lock_retain_until_date));
    }
    if (m_bucket_key_enabled_isSet) {
        obj.insert(QString("BucketKeyEnabled"), ::OpenAPI::toJsonValue(m_bucket_key_enabled));
    }
    if (m_checksum_algorithm.isSet()) {
        obj.insert(QString("ChecksumAlgorithm"), ::OpenAPI::toJsonValue(m_checksum_algorithm));
    }
    return obj;
}

QString OAIS3CopyObjectOperation::getTargetResource() const {
    return m_target_resource;
}
void OAIS3CopyObjectOperation::setTargetResource(const QString &target_resource) {
    m_target_resource = target_resource;
    m_target_resource_isSet = true;
}

bool OAIS3CopyObjectOperation::is_target_resource_Set() const{
    return m_target_resource_isSet;
}

bool OAIS3CopyObjectOperation::is_target_resource_Valid() const{
    return m_target_resource_isValid;
}

OAIS3CannedAccessControlList OAIS3CopyObjectOperation::getCannedAccessControlList() const {
    return m_canned_access_control_list;
}
void OAIS3CopyObjectOperation::setCannedAccessControlList(const OAIS3CannedAccessControlList &canned_access_control_list) {
    m_canned_access_control_list = canned_access_control_list;
    m_canned_access_control_list_isSet = true;
}

bool OAIS3CopyObjectOperation::is_canned_access_control_list_Set() const{
    return m_canned_access_control_list_isSet;
}

bool OAIS3CopyObjectOperation::is_canned_access_control_list_Valid() const{
    return m_canned_access_control_list_isValid;
}

QList OAIS3CopyObjectOperation::getAccessControlGrants() const {
    return m_access_control_grants;
}
void OAIS3CopyObjectOperation::setAccessControlGrants(const QList &access_control_grants) {
    m_access_control_grants = access_control_grants;
    m_access_control_grants_isSet = true;
}

bool OAIS3CopyObjectOperation::is_access_control_grants_Set() const{
    return m_access_control_grants_isSet;
}

bool OAIS3CopyObjectOperation::is_access_control_grants_Valid() const{
    return m_access_control_grants_isValid;
}

OAIS3MetadataDirective OAIS3CopyObjectOperation::getMetadataDirective() const {
    return m_metadata_directive;
}
void OAIS3CopyObjectOperation::setMetadataDirective(const OAIS3MetadataDirective &metadata_directive) {
    m_metadata_directive = metadata_directive;
    m_metadata_directive_isSet = true;
}

bool OAIS3CopyObjectOperation::is_metadata_directive_Set() const{
    return m_metadata_directive_isSet;
}

bool OAIS3CopyObjectOperation::is_metadata_directive_Valid() const{
    return m_metadata_directive_isValid;
}

QDateTime OAIS3CopyObjectOperation::getModifiedSinceConstraint() const {
    return m_modified_since_constraint;
}
void OAIS3CopyObjectOperation::setModifiedSinceConstraint(const QDateTime &modified_since_constraint) {
    m_modified_since_constraint = modified_since_constraint;
    m_modified_since_constraint_isSet = true;
}

bool OAIS3CopyObjectOperation::is_modified_since_constraint_Set() const{
    return m_modified_since_constraint_isSet;
}

bool OAIS3CopyObjectOperation::is_modified_since_constraint_Valid() const{
    return m_modified_since_constraint_isValid;
}

OAIS3CopyObjectOperation_NewObjectMetadata OAIS3CopyObjectOperation::getNewObjectMetadata() const {
    return m_new_object_metadata;
}
void OAIS3CopyObjectOperation::setNewObjectMetadata(const OAIS3CopyObjectOperation_NewObjectMetadata &new_object_metadata) {
    m_new_object_metadata = new_object_metadata;
    m_new_object_metadata_isSet = true;
}

bool OAIS3CopyObjectOperation::is_new_object_metadata_Set() const{
    return m_new_object_metadata_isSet;
}

bool OAIS3CopyObjectOperation::is_new_object_metadata_Valid() const{
    return m_new_object_metadata_isValid;
}

QList OAIS3CopyObjectOperation::getNewObjectTagging() const {
    return m_new_object_tagging;
}
void OAIS3CopyObjectOperation::setNewObjectTagging(const QList &new_object_tagging) {
    m_new_object_tagging = new_object_tagging;
    m_new_object_tagging_isSet = true;
}

bool OAIS3CopyObjectOperation::is_new_object_tagging_Set() const{
    return m_new_object_tagging_isSet;
}

bool OAIS3CopyObjectOperation::is_new_object_tagging_Valid() const{
    return m_new_object_tagging_isValid;
}

QString OAIS3CopyObjectOperation::getRedirectLocation() const {
    return m_redirect_location;
}
void OAIS3CopyObjectOperation::setRedirectLocation(const QString &redirect_location) {
    m_redirect_location = redirect_location;
    m_redirect_location_isSet = true;
}

bool OAIS3CopyObjectOperation::is_redirect_location_Set() const{
    return m_redirect_location_isSet;
}

bool OAIS3CopyObjectOperation::is_redirect_location_Valid() const{
    return m_redirect_location_isValid;
}

bool OAIS3CopyObjectOperation::getRequesterPays() const {
    return m_requester_pays;
}
void OAIS3CopyObjectOperation::setRequesterPays(const bool &requester_pays) {
    m_requester_pays = requester_pays;
    m_requester_pays_isSet = true;
}

bool OAIS3CopyObjectOperation::is_requester_pays_Set() const{
    return m_requester_pays_isSet;
}

bool OAIS3CopyObjectOperation::is_requester_pays_Valid() const{
    return m_requester_pays_isValid;
}

OAIS3StorageClass OAIS3CopyObjectOperation::getStorageClass() const {
    return m_storage_class;
}
void OAIS3CopyObjectOperation::setStorageClass(const OAIS3StorageClass &storage_class) {
    m_storage_class = storage_class;
    m_storage_class_isSet = true;
}

bool OAIS3CopyObjectOperation::is_storage_class_Set() const{
    return m_storage_class_isSet;
}

bool OAIS3CopyObjectOperation::is_storage_class_Valid() const{
    return m_storage_class_isValid;
}

QDateTime OAIS3CopyObjectOperation::getUnModifiedSinceConstraint() const {
    return m_un_modified_since_constraint;
}
void OAIS3CopyObjectOperation::setUnModifiedSinceConstraint(const QDateTime &un_modified_since_constraint) {
    m_un_modified_since_constraint = un_modified_since_constraint;
    m_un_modified_since_constraint_isSet = true;
}

bool OAIS3CopyObjectOperation::is_un_modified_since_constraint_Set() const{
    return m_un_modified_since_constraint_isSet;
}

bool OAIS3CopyObjectOperation::is_un_modified_since_constraint_Valid() const{
    return m_un_modified_since_constraint_isValid;
}

QString OAIS3CopyObjectOperation::getSseAwsKmsKeyId() const {
    return m_sse_aws_kms_key_id;
}
void OAIS3CopyObjectOperation::setSseAwsKmsKeyId(const QString &sse_aws_kms_key_id) {
    m_sse_aws_kms_key_id = sse_aws_kms_key_id;
    m_sse_aws_kms_key_id_isSet = true;
}

bool OAIS3CopyObjectOperation::is_sse_aws_kms_key_id_Set() const{
    return m_sse_aws_kms_key_id_isSet;
}

bool OAIS3CopyObjectOperation::is_sse_aws_kms_key_id_Valid() const{
    return m_sse_aws_kms_key_id_isValid;
}

QString OAIS3CopyObjectOperation::getTargetKeyPrefix() const {
    return m_target_key_prefix;
}
void OAIS3CopyObjectOperation::setTargetKeyPrefix(const QString &target_key_prefix) {
    m_target_key_prefix = target_key_prefix;
    m_target_key_prefix_isSet = true;
}

bool OAIS3CopyObjectOperation::is_target_key_prefix_Set() const{
    return m_target_key_prefix_isSet;
}

bool OAIS3CopyObjectOperation::is_target_key_prefix_Valid() const{
    return m_target_key_prefix_isValid;
}

OAIS3ObjectLockLegalHoldStatus OAIS3CopyObjectOperation::getObjectLockLegalHoldStatus() const {
    return m_object_lock_legal_hold_status;
}
void OAIS3CopyObjectOperation::setObjectLockLegalHoldStatus(const OAIS3ObjectLockLegalHoldStatus &object_lock_legal_hold_status) {
    m_object_lock_legal_hold_status = object_lock_legal_hold_status;
    m_object_lock_legal_hold_status_isSet = true;
}

bool OAIS3CopyObjectOperation::is_object_lock_legal_hold_status_Set() const{
    return m_object_lock_legal_hold_status_isSet;
}

bool OAIS3CopyObjectOperation::is_object_lock_legal_hold_status_Valid() const{
    return m_object_lock_legal_hold_status_isValid;
}

OAIS3ObjectLockMode OAIS3CopyObjectOperation::getObjectLockMode() const {
    return m_object_lock_mode;
}
void OAIS3CopyObjectOperation::setObjectLockMode(const OAIS3ObjectLockMode &object_lock_mode) {
    m_object_lock_mode = object_lock_mode;
    m_object_lock_mode_isSet = true;
}

bool OAIS3CopyObjectOperation::is_object_lock_mode_Set() const{
    return m_object_lock_mode_isSet;
}

bool OAIS3CopyObjectOperation::is_object_lock_mode_Valid() const{
    return m_object_lock_mode_isValid;
}

QDateTime OAIS3CopyObjectOperation::getObjectLockRetainUntilDate() const {
    return m_object_lock_retain_until_date;
}
void OAIS3CopyObjectOperation::setObjectLockRetainUntilDate(const QDateTime &object_lock_retain_until_date) {
    m_object_lock_retain_until_date = object_lock_retain_until_date;
    m_object_lock_retain_until_date_isSet = true;
}

bool OAIS3CopyObjectOperation::is_object_lock_retain_until_date_Set() const{
    return m_object_lock_retain_until_date_isSet;
}

bool OAIS3CopyObjectOperation::is_object_lock_retain_until_date_Valid() const{
    return m_object_lock_retain_until_date_isValid;
}

bool OAIS3CopyObjectOperation::getBucketKeyEnabled() const {
    return m_bucket_key_enabled;
}
void OAIS3CopyObjectOperation::setBucketKeyEnabled(const bool &bucket_key_enabled) {
    m_bucket_key_enabled = bucket_key_enabled;
    m_bucket_key_enabled_isSet = true;
}

bool OAIS3CopyObjectOperation::is_bucket_key_enabled_Set() const{
    return m_bucket_key_enabled_isSet;
}

bool OAIS3CopyObjectOperation::is_bucket_key_enabled_Valid() const{
    return m_bucket_key_enabled_isValid;
}

OAIS3ChecksumAlgorithm OAIS3CopyObjectOperation::getChecksumAlgorithm() const {
    return m_checksum_algorithm;
}
void OAIS3CopyObjectOperation::setChecksumAlgorithm(const OAIS3ChecksumAlgorithm &checksum_algorithm) {
    m_checksum_algorithm = checksum_algorithm;
    m_checksum_algorithm_isSet = true;
}

bool OAIS3CopyObjectOperation::is_checksum_algorithm_Set() const{
    return m_checksum_algorithm_isSet;
}

bool OAIS3CopyObjectOperation::is_checksum_algorithm_Valid() const{
    return m_checksum_algorithm_isValid;
}

bool OAIS3CopyObjectOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canned_access_control_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_control_grants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_directive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_since_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_object_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_object_tagging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_pays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_un_modified_since_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sse_aws_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_lock_legal_hold_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_lock_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_lock_retain_until_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_key_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3CopyObjectOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
