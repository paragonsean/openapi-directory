/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateAccessPointForObjectLambdaResult.h"
#include "OAICreateAccessPointForObjectLambda_request.h"
#include "OAICreateAccessPointResult.h"
#include "OAICreateAccessPoint_request.h"
#include "OAICreateBucketResult.h"
#include "OAICreateBucket_request.h"
#include "OAICreateJobResult.h"
#include "OAICreateJob_request.h"
#include "OAICreateMultiRegionAccessPointResult.h"
#include "OAICreateMultiRegionAccessPoint_request.h"
#include "OAIDeleteMultiRegionAccessPointResult.h"
#include "OAIDeleteMultiRegionAccessPoint_request.h"
#include "OAIDescribeJobResult.h"
#include "OAIDescribeMultiRegionAccessPointOperationResult.h"
#include "OAIGetAccessPointConfigurationForObjectLambdaResult.h"
#include "OAIGetAccessPointForObjectLambdaResult.h"
#include "OAIGetAccessPointPolicyForObjectLambdaResult.h"
#include "OAIGetAccessPointPolicyResult.h"
#include "OAIGetAccessPointPolicyStatusForObjectLambdaResult.h"
#include "OAIGetAccessPointPolicyStatusResult.h"
#include "OAIGetAccessPointResult.h"
#include "OAIGetBucketLifecycleConfigurationResult.h"
#include "OAIGetBucketPolicyResult.h"
#include "OAIGetBucketReplicationResult.h"
#include "OAIGetBucketResult.h"
#include "OAIGetBucketTaggingResult.h"
#include "OAIGetBucketVersioningResult.h"
#include "OAIGetJobTaggingResult.h"
#include "OAIGetMultiRegionAccessPointPolicyResult.h"
#include "OAIGetMultiRegionAccessPointPolicyStatusResult.h"
#include "OAIGetMultiRegionAccessPointResult.h"
#include "OAIGetMultiRegionAccessPointRoutesResult.h"
#include "OAIGetPublicAccessBlockOutput.h"
#include "OAIGetStorageLensConfigurationResult.h"
#include "OAIGetStorageLensConfigurationTaggingResult.h"
#include "OAIJobStatus.h"
#include "OAIListAccessPointsForObjectLambdaResult.h"
#include "OAIListAccessPointsResult.h"
#include "OAIListJobsResult.h"
#include "OAIListMultiRegionAccessPointsResult.h"
#include "OAIListRegionalBucketsResult.h"
#include "OAIListStorageLensConfigurationsResult.h"
#include "OAIObject.h"
#include "OAIPutAccessPointPolicyForObjectLambda_request.h"
#include "OAIPutAccessPointPolicy_request.h"
#include "OAIPutBucketLifecycleConfiguration_request.h"
#include "OAIPutBucketPolicy_request.h"
#include "OAIPutBucketReplication_request.h"
#include "OAIPutBucketTagging_request.h"
#include "OAIPutBucketVersioning_request.h"
#include "OAIPutJobTagging_request.h"
#include "OAIPutMultiRegionAccessPointPolicyResult.h"
#include "OAIPutMultiRegionAccessPointPolicy_request.h"
#include "OAIPutPublicAccessBlock_request.h"
#include "OAIPutStorageLensConfigurationTagging_request.h"
#include "OAIPutStorageLensConfiguration_request.h"
#include "OAISubmitMultiRegionAccessPointRoutes_request.h"
#include "OAIUpdateJobPriorityResult.h"
#include "OAIUpdateJobStatusResult.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_create_access_point_request OAICreateAccessPoint_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAccessPoint(const QString &x_amz_account_id, const QString &name, const OAICreateAccessPoint_request &oai_create_access_point_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_create_access_point_for_object_lambda_request OAICreateAccessPointForObjectLambda_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAccessPointForObjectLambda(const QString &x_amz_account_id, const QString &name, const OAICreateAccessPointForObjectLambda_request &oai_create_access_point_for_object_lambda_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  oai_create_bucket_request OAICreateBucket_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_acl QString [optional]
    * @param[in]  x_amz_grant_full_control QString [optional]
    * @param[in]  x_amz_grant_read QString [optional]
    * @param[in]  x_amz_grant_read_acp QString [optional]
    * @param[in]  x_amz_grant_write QString [optional]
    * @param[in]  x_amz_grant_write_acp QString [optional]
    * @param[in]  x_amz_bucket_object_lock_enabled bool [optional]
    * @param[in]  x_amz_outpost_id QString [optional]
    */
    virtual void createBucket(const QString &name, const OAICreateBucket_request &oai_create_bucket_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_acl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_grant_full_control = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_grant_read = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_grant_read_acp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_grant_write = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_grant_write_acp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_amz_bucket_object_lock_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_amz_outpost_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  oai_create_job_request OAICreateJob_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createJob(const QString &x_amz_account_id, const OAICreateJob_request &oai_create_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  oai_create_multi_region_access_point_request OAICreateMultiRegionAccessPoint_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createMultiRegionAccessPoint(const QString &x_amz_account_id, const OAICreateMultiRegionAccessPoint_request &oai_create_multi_region_access_point_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAccessPoint(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAccessPointForObjectLambda(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAccessPointPolicy(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAccessPointPolicyForObjectLambda(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteBucket(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteBucketLifecycleConfiguration(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteBucketPolicy(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteBucketReplication(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteBucketTagging(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteJobTagging(const QString &x_amz_account_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  oai_delete_multi_region_access_point_request OAIDeleteMultiRegionAccessPoint_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteMultiRegionAccessPoint(const QString &x_amz_account_id, const OAIDeleteMultiRegionAccessPoint_request &oai_delete_multi_region_access_point_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deletePublicAccessBlock(const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  storagelensid QString [required]
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteStorageLensConfiguration(const QString &storagelensid, const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  storagelensid QString [required]
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteStorageLensConfigurationTagging(const QString &storagelensid, const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeJob(const QString &x_amz_account_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  request_token QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeMultiRegionAccessPointOperation(const QString &x_amz_account_id, const QString &request_token, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccessPoint(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccessPointConfigurationForObjectLambda(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccessPointForObjectLambda(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccessPointPolicy(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccessPointPolicyForObjectLambda(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccessPointPolicyStatus(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccessPointPolicyStatusForObjectLambda(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getBucket(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getBucketLifecycleConfiguration(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getBucketPolicy(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getBucketReplication(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getBucketTagging(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getBucketVersioning(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getJobTagging(const QString &x_amz_account_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getMultiRegionAccessPoint(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getMultiRegionAccessPointPolicy(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getMultiRegionAccessPointPolicyStatus(const QString &x_amz_account_id, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  mrap QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getMultiRegionAccessPointRoutes(const QString &x_amz_account_id, const QString &mrap, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPublicAccessBlock(const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  storagelensid QString [required]
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStorageLensConfiguration(const QString &storagelensid, const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  storagelensid QString [required]
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getStorageLensConfigurationTagging(const QString &storagelensid, const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  bucket QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listAccessPoints(const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listAccessPointsForObjectLambda(const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  job_statuses QList<OAIJobStatus> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listJobs(const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIJobStatus>> &job_statuses = ::OpenAPI::OptionalParam<QList<OAIJobStatus>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listMultiRegionAccessPoints(const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  x_amz_outpost_id QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listRegionalBuckets(const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_amz_outpost_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listStorageLensConfigurations(const QString &x_amz_account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_create_access_point_for_object_lambda_request OAICreateAccessPointForObjectLambda_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putAccessPointConfigurationForObjectLambda(const QString &x_amz_account_id, const QString &name, const OAICreateAccessPointForObjectLambda_request &oai_create_access_point_for_object_lambda_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_put_access_point_policy_request OAIPutAccessPointPolicy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putAccessPointPolicy(const QString &x_amz_account_id, const QString &name, const OAIPutAccessPointPolicy_request &oai_put_access_point_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_put_access_point_policy_for_object_lambda_request OAIPutAccessPointPolicyForObjectLambda_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putAccessPointPolicyForObjectLambda(const QString &x_amz_account_id, const QString &name, const OAIPutAccessPointPolicyForObjectLambda_request &oai_put_access_point_policy_for_object_lambda_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_put_bucket_lifecycle_configuration_request OAIPutBucketLifecycleConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putBucketLifecycleConfiguration(const QString &x_amz_account_id, const QString &name, const OAIPutBucketLifecycleConfiguration_request &oai_put_bucket_lifecycle_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_put_bucket_policy_request OAIPutBucketPolicy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_confirm_remove_self_bucket_access bool [optional]
    */
    virtual void putBucketPolicy(const QString &x_amz_account_id, const QString &name, const OAIPutBucketPolicy_request &oai_put_bucket_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_amz_confirm_remove_self_bucket_access = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_put_bucket_replication_request OAIPutBucketReplication_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putBucketReplication(const QString &x_amz_account_id, const QString &name, const OAIPutBucketReplication_request &oai_put_bucket_replication_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_put_bucket_tagging_request OAIPutBucketTagging_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putBucketTagging(const QString &x_amz_account_id, const QString &name, const OAIPutBucketTagging_request &oai_put_bucket_tagging_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  oai_put_bucket_versioning_request OAIPutBucketVersioning_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_mfa QString [optional]
    */
    virtual void putBucketVersioning(const QString &x_amz_account_id, const QString &name, const OAIPutBucketVersioning_request &oai_put_bucket_versioning_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_mfa = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_put_job_tagging_request OAIPutJobTagging_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putJobTagging(const QString &x_amz_account_id, const QString &id, const OAIPutJobTagging_request &oai_put_job_tagging_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  oai_put_multi_region_access_point_policy_request OAIPutMultiRegionAccessPointPolicy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putMultiRegionAccessPointPolicy(const QString &x_amz_account_id, const OAIPutMultiRegionAccessPointPolicy_request &oai_put_multi_region_access_point_policy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  oai_put_public_access_block_request OAIPutPublicAccessBlock_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putPublicAccessBlock(const QString &x_amz_account_id, const OAIPutPublicAccessBlock_request &oai_put_public_access_block_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  storagelensid QString [required]
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  oai_put_storage_lens_configuration_request OAIPutStorageLensConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putStorageLensConfiguration(const QString &storagelensid, const QString &x_amz_account_id, const OAIPutStorageLensConfiguration_request &oai_put_storage_lens_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  storagelensid QString [required]
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  oai_put_storage_lens_configuration_tagging_request OAIPutStorageLensConfigurationTagging_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putStorageLensConfigurationTagging(const QString &storagelensid, const QString &x_amz_account_id, const OAIPutStorageLensConfigurationTagging_request &oai_put_storage_lens_configuration_tagging_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  mrap QString [required]
    * @param[in]  oai_submit_multi_region_access_point_routes_request OAISubmitMultiRegionAccessPointRoutes_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void submitMultiRegionAccessPointRoutes(const QString &x_amz_account_id, const QString &mrap, const OAISubmitMultiRegionAccessPointRoutes_request &oai_submit_multi_region_access_point_routes_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  priority qint32 [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateJobPriority(const QString &x_amz_account_id, const QString &id, const qint32 &priority, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_account_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  requested_job_status QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  status_update_reason QString [optional]
    */
    virtual void updateJobStatus(const QString &x_amz_account_id, const QString &id, const QString &requested_job_status, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_update_reason = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAccessPointCallback(OAIHttpRequestWorker *worker);
    void createAccessPointForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void createBucketCallback(OAIHttpRequestWorker *worker);
    void createJobCallback(OAIHttpRequestWorker *worker);
    void createMultiRegionAccessPointCallback(OAIHttpRequestWorker *worker);
    void deleteAccessPointCallback(OAIHttpRequestWorker *worker);
    void deleteAccessPointForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void deleteAccessPointPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteAccessPointPolicyForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void deleteBucketCallback(OAIHttpRequestWorker *worker);
    void deleteBucketLifecycleConfigurationCallback(OAIHttpRequestWorker *worker);
    void deleteBucketPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteBucketReplicationCallback(OAIHttpRequestWorker *worker);
    void deleteBucketTaggingCallback(OAIHttpRequestWorker *worker);
    void deleteJobTaggingCallback(OAIHttpRequestWorker *worker);
    void deleteMultiRegionAccessPointCallback(OAIHttpRequestWorker *worker);
    void deletePublicAccessBlockCallback(OAIHttpRequestWorker *worker);
    void deleteStorageLensConfigurationCallback(OAIHttpRequestWorker *worker);
    void deleteStorageLensConfigurationTaggingCallback(OAIHttpRequestWorker *worker);
    void describeJobCallback(OAIHttpRequestWorker *worker);
    void describeMultiRegionAccessPointOperationCallback(OAIHttpRequestWorker *worker);
    void getAccessPointCallback(OAIHttpRequestWorker *worker);
    void getAccessPointConfigurationForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void getAccessPointForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void getAccessPointPolicyCallback(OAIHttpRequestWorker *worker);
    void getAccessPointPolicyForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void getAccessPointPolicyStatusCallback(OAIHttpRequestWorker *worker);
    void getAccessPointPolicyStatusForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void getBucketCallback(OAIHttpRequestWorker *worker);
    void getBucketLifecycleConfigurationCallback(OAIHttpRequestWorker *worker);
    void getBucketPolicyCallback(OAIHttpRequestWorker *worker);
    void getBucketReplicationCallback(OAIHttpRequestWorker *worker);
    void getBucketTaggingCallback(OAIHttpRequestWorker *worker);
    void getBucketVersioningCallback(OAIHttpRequestWorker *worker);
    void getJobTaggingCallback(OAIHttpRequestWorker *worker);
    void getMultiRegionAccessPointCallback(OAIHttpRequestWorker *worker);
    void getMultiRegionAccessPointPolicyCallback(OAIHttpRequestWorker *worker);
    void getMultiRegionAccessPointPolicyStatusCallback(OAIHttpRequestWorker *worker);
    void getMultiRegionAccessPointRoutesCallback(OAIHttpRequestWorker *worker);
    void getPublicAccessBlockCallback(OAIHttpRequestWorker *worker);
    void getStorageLensConfigurationCallback(OAIHttpRequestWorker *worker);
    void getStorageLensConfigurationTaggingCallback(OAIHttpRequestWorker *worker);
    void listAccessPointsCallback(OAIHttpRequestWorker *worker);
    void listAccessPointsForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void listJobsCallback(OAIHttpRequestWorker *worker);
    void listMultiRegionAccessPointsCallback(OAIHttpRequestWorker *worker);
    void listRegionalBucketsCallback(OAIHttpRequestWorker *worker);
    void listStorageLensConfigurationsCallback(OAIHttpRequestWorker *worker);
    void putAccessPointConfigurationForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void putAccessPointPolicyCallback(OAIHttpRequestWorker *worker);
    void putAccessPointPolicyForObjectLambdaCallback(OAIHttpRequestWorker *worker);
    void putBucketLifecycleConfigurationCallback(OAIHttpRequestWorker *worker);
    void putBucketPolicyCallback(OAIHttpRequestWorker *worker);
    void putBucketReplicationCallback(OAIHttpRequestWorker *worker);
    void putBucketTaggingCallback(OAIHttpRequestWorker *worker);
    void putBucketVersioningCallback(OAIHttpRequestWorker *worker);
    void putJobTaggingCallback(OAIHttpRequestWorker *worker);
    void putMultiRegionAccessPointPolicyCallback(OAIHttpRequestWorker *worker);
    void putPublicAccessBlockCallback(OAIHttpRequestWorker *worker);
    void putStorageLensConfigurationCallback(OAIHttpRequestWorker *worker);
    void putStorageLensConfigurationTaggingCallback(OAIHttpRequestWorker *worker);
    void submitMultiRegionAccessPointRoutesCallback(OAIHttpRequestWorker *worker);
    void updateJobPriorityCallback(OAIHttpRequestWorker *worker);
    void updateJobStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAccessPointSignal(OAICreateAccessPointResult summary);
    void createAccessPointForObjectLambdaSignal(OAICreateAccessPointForObjectLambdaResult summary);
    void createBucketSignal(OAICreateBucketResult summary);
    void createJobSignal(OAICreateJobResult summary);
    void createMultiRegionAccessPointSignal(OAICreateMultiRegionAccessPointResult summary);
    void deleteAccessPointSignal();
    void deleteAccessPointForObjectLambdaSignal();
    void deleteAccessPointPolicySignal();
    void deleteAccessPointPolicyForObjectLambdaSignal();
    void deleteBucketSignal();
    void deleteBucketLifecycleConfigurationSignal();
    void deleteBucketPolicySignal();
    void deleteBucketReplicationSignal();
    void deleteBucketTaggingSignal();
    void deleteJobTaggingSignal(OAIObject summary);
    void deleteMultiRegionAccessPointSignal(OAIDeleteMultiRegionAccessPointResult summary);
    void deletePublicAccessBlockSignal();
    void deleteStorageLensConfigurationSignal();
    void deleteStorageLensConfigurationTaggingSignal(OAIObject summary);
    void describeJobSignal(OAIDescribeJobResult summary);
    void describeMultiRegionAccessPointOperationSignal(OAIDescribeMultiRegionAccessPointOperationResult summary);
    void getAccessPointSignal(OAIGetAccessPointResult summary);
    void getAccessPointConfigurationForObjectLambdaSignal(OAIGetAccessPointConfigurationForObjectLambdaResult summary);
    void getAccessPointForObjectLambdaSignal(OAIGetAccessPointForObjectLambdaResult summary);
    void getAccessPointPolicySignal(OAIGetAccessPointPolicyResult summary);
    void getAccessPointPolicyForObjectLambdaSignal(OAIGetAccessPointPolicyForObjectLambdaResult summary);
    void getAccessPointPolicyStatusSignal(OAIGetAccessPointPolicyStatusResult summary);
    void getAccessPointPolicyStatusForObjectLambdaSignal(OAIGetAccessPointPolicyStatusForObjectLambdaResult summary);
    void getBucketSignal(OAIGetBucketResult summary);
    void getBucketLifecycleConfigurationSignal(OAIGetBucketLifecycleConfigurationResult summary);
    void getBucketPolicySignal(OAIGetBucketPolicyResult summary);
    void getBucketReplicationSignal(OAIGetBucketReplicationResult summary);
    void getBucketTaggingSignal(OAIGetBucketTaggingResult summary);
    void getBucketVersioningSignal(OAIGetBucketVersioningResult summary);
    void getJobTaggingSignal(OAIGetJobTaggingResult summary);
    void getMultiRegionAccessPointSignal(OAIGetMultiRegionAccessPointResult summary);
    void getMultiRegionAccessPointPolicySignal(OAIGetMultiRegionAccessPointPolicyResult summary);
    void getMultiRegionAccessPointPolicyStatusSignal(OAIGetMultiRegionAccessPointPolicyStatusResult summary);
    void getMultiRegionAccessPointRoutesSignal(OAIGetMultiRegionAccessPointRoutesResult summary);
    void getPublicAccessBlockSignal(OAIGetPublicAccessBlockOutput summary);
    void getStorageLensConfigurationSignal(OAIGetStorageLensConfigurationResult summary);
    void getStorageLensConfigurationTaggingSignal(OAIGetStorageLensConfigurationTaggingResult summary);
    void listAccessPointsSignal(OAIListAccessPointsResult summary);
    void listAccessPointsForObjectLambdaSignal(OAIListAccessPointsForObjectLambdaResult summary);
    void listJobsSignal(OAIListJobsResult summary);
    void listMultiRegionAccessPointsSignal(OAIListMultiRegionAccessPointsResult summary);
    void listRegionalBucketsSignal(OAIListRegionalBucketsResult summary);
    void listStorageLensConfigurationsSignal(OAIListStorageLensConfigurationsResult summary);
    void putAccessPointConfigurationForObjectLambdaSignal();
    void putAccessPointPolicySignal();
    void putAccessPointPolicyForObjectLambdaSignal();
    void putBucketLifecycleConfigurationSignal();
    void putBucketPolicySignal();
    void putBucketReplicationSignal();
    void putBucketTaggingSignal();
    void putBucketVersioningSignal();
    void putJobTaggingSignal(OAIObject summary);
    void putMultiRegionAccessPointPolicySignal(OAIPutMultiRegionAccessPointPolicyResult summary);
    void putPublicAccessBlockSignal();
    void putStorageLensConfigurationSignal();
    void putStorageLensConfigurationTaggingSignal(OAIObject summary);
    void submitMultiRegionAccessPointRoutesSignal(OAIObject summary);
    void updateJobPrioritySignal(OAIUpdateJobPriorityResult summary);
    void updateJobStatusSignal(OAIUpdateJobStatusResult summary);


    void createAccessPointSignalFull(OAIHttpRequestWorker *worker, OAICreateAccessPointResult summary);
    void createAccessPointForObjectLambdaSignalFull(OAIHttpRequestWorker *worker, OAICreateAccessPointForObjectLambdaResult summary);
    void createBucketSignalFull(OAIHttpRequestWorker *worker, OAICreateBucketResult summary);
    void createJobSignalFull(OAIHttpRequestWorker *worker, OAICreateJobResult summary);
    void createMultiRegionAccessPointSignalFull(OAIHttpRequestWorker *worker, OAICreateMultiRegionAccessPointResult summary);
    void deleteAccessPointSignalFull(OAIHttpRequestWorker *worker);
    void deleteAccessPointForObjectLambdaSignalFull(OAIHttpRequestWorker *worker);
    void deleteAccessPointPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteAccessPointPolicyForObjectLambdaSignalFull(OAIHttpRequestWorker *worker);
    void deleteBucketSignalFull(OAIHttpRequestWorker *worker);
    void deleteBucketLifecycleConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void deleteBucketPolicySignalFull(OAIHttpRequestWorker *worker);
    void deleteBucketReplicationSignalFull(OAIHttpRequestWorker *worker);
    void deleteBucketTaggingSignalFull(OAIHttpRequestWorker *worker);
    void deleteJobTaggingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteMultiRegionAccessPointSignalFull(OAIHttpRequestWorker *worker, OAIDeleteMultiRegionAccessPointResult summary);
    void deletePublicAccessBlockSignalFull(OAIHttpRequestWorker *worker);
    void deleteStorageLensConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void deleteStorageLensConfigurationTaggingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void describeJobSignalFull(OAIHttpRequestWorker *worker, OAIDescribeJobResult summary);
    void describeMultiRegionAccessPointOperationSignalFull(OAIHttpRequestWorker *worker, OAIDescribeMultiRegionAccessPointOperationResult summary);
    void getAccessPointSignalFull(OAIHttpRequestWorker *worker, OAIGetAccessPointResult summary);
    void getAccessPointConfigurationForObjectLambdaSignalFull(OAIHttpRequestWorker *worker, OAIGetAccessPointConfigurationForObjectLambdaResult summary);
    void getAccessPointForObjectLambdaSignalFull(OAIHttpRequestWorker *worker, OAIGetAccessPointForObjectLambdaResult summary);
    void getAccessPointPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetAccessPointPolicyResult summary);
    void getAccessPointPolicyForObjectLambdaSignalFull(OAIHttpRequestWorker *worker, OAIGetAccessPointPolicyForObjectLambdaResult summary);
    void getAccessPointPolicyStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetAccessPointPolicyStatusResult summary);
    void getAccessPointPolicyStatusForObjectLambdaSignalFull(OAIHttpRequestWorker *worker, OAIGetAccessPointPolicyStatusForObjectLambdaResult summary);
    void getBucketSignalFull(OAIHttpRequestWorker *worker, OAIGetBucketResult summary);
    void getBucketLifecycleConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetBucketLifecycleConfigurationResult summary);
    void getBucketPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetBucketPolicyResult summary);
    void getBucketReplicationSignalFull(OAIHttpRequestWorker *worker, OAIGetBucketReplicationResult summary);
    void getBucketTaggingSignalFull(OAIHttpRequestWorker *worker, OAIGetBucketTaggingResult summary);
    void getBucketVersioningSignalFull(OAIHttpRequestWorker *worker, OAIGetBucketVersioningResult summary);
    void getJobTaggingSignalFull(OAIHttpRequestWorker *worker, OAIGetJobTaggingResult summary);
    void getMultiRegionAccessPointSignalFull(OAIHttpRequestWorker *worker, OAIGetMultiRegionAccessPointResult summary);
    void getMultiRegionAccessPointPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetMultiRegionAccessPointPolicyResult summary);
    void getMultiRegionAccessPointPolicyStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetMultiRegionAccessPointPolicyStatusResult summary);
    void getMultiRegionAccessPointRoutesSignalFull(OAIHttpRequestWorker *worker, OAIGetMultiRegionAccessPointRoutesResult summary);
    void getPublicAccessBlockSignalFull(OAIHttpRequestWorker *worker, OAIGetPublicAccessBlockOutput summary);
    void getStorageLensConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetStorageLensConfigurationResult summary);
    void getStorageLensConfigurationTaggingSignalFull(OAIHttpRequestWorker *worker, OAIGetStorageLensConfigurationTaggingResult summary);
    void listAccessPointsSignalFull(OAIHttpRequestWorker *worker, OAIListAccessPointsResult summary);
    void listAccessPointsForObjectLambdaSignalFull(OAIHttpRequestWorker *worker, OAIListAccessPointsForObjectLambdaResult summary);
    void listJobsSignalFull(OAIHttpRequestWorker *worker, OAIListJobsResult summary);
    void listMultiRegionAccessPointsSignalFull(OAIHttpRequestWorker *worker, OAIListMultiRegionAccessPointsResult summary);
    void listRegionalBucketsSignalFull(OAIHttpRequestWorker *worker, OAIListRegionalBucketsResult summary);
    void listStorageLensConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIListStorageLensConfigurationsResult summary);
    void putAccessPointConfigurationForObjectLambdaSignalFull(OAIHttpRequestWorker *worker);
    void putAccessPointPolicySignalFull(OAIHttpRequestWorker *worker);
    void putAccessPointPolicyForObjectLambdaSignalFull(OAIHttpRequestWorker *worker);
    void putBucketLifecycleConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void putBucketPolicySignalFull(OAIHttpRequestWorker *worker);
    void putBucketReplicationSignalFull(OAIHttpRequestWorker *worker);
    void putBucketTaggingSignalFull(OAIHttpRequestWorker *worker);
    void putBucketVersioningSignalFull(OAIHttpRequestWorker *worker);
    void putJobTaggingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void putMultiRegionAccessPointPolicySignalFull(OAIHttpRequestWorker *worker, OAIPutMultiRegionAccessPointPolicyResult summary);
    void putPublicAccessBlockSignalFull(OAIHttpRequestWorker *worker);
    void putStorageLensConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void putStorageLensConfigurationTaggingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void submitMultiRegionAccessPointRoutesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateJobPrioritySignalFull(OAIHttpRequestWorker *worker, OAIUpdateJobPriorityResult summary);
    void updateJobStatusSignalFull(OAIHttpRequestWorker *worker, OAIUpdateJobStatusResult summary);

    Q_DECL_DEPRECATED_X("Use createAccessPointSignalError() instead")
    void createAccessPointSignalE(OAICreateAccessPointResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccessPointSignalError(OAICreateAccessPointResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccessPointForObjectLambdaSignalError() instead")
    void createAccessPointForObjectLambdaSignalE(OAICreateAccessPointForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccessPointForObjectLambdaSignalError(OAICreateAccessPointForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBucketSignalError() instead")
    void createBucketSignalE(OAICreateBucketResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBucketSignalError(OAICreateBucketResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createJobSignalError() instead")
    void createJobSignalE(OAICreateJobResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createJobSignalError(OAICreateJobResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMultiRegionAccessPointSignalError() instead")
    void createMultiRegionAccessPointSignalE(OAICreateMultiRegionAccessPointResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMultiRegionAccessPointSignalError(OAICreateMultiRegionAccessPointResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccessPointSignalError() instead")
    void deleteAccessPointSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccessPointSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccessPointForObjectLambdaSignalError() instead")
    void deleteAccessPointForObjectLambdaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccessPointForObjectLambdaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccessPointPolicySignalError() instead")
    void deleteAccessPointPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccessPointPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccessPointPolicyForObjectLambdaSignalError() instead")
    void deleteAccessPointPolicyForObjectLambdaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccessPointPolicyForObjectLambdaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketSignalError() instead")
    void deleteBucketSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketLifecycleConfigurationSignalError() instead")
    void deleteBucketLifecycleConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketLifecycleConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketPolicySignalError() instead")
    void deleteBucketPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketReplicationSignalError() instead")
    void deleteBucketReplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketReplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketTaggingSignalError() instead")
    void deleteBucketTaggingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketTaggingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteJobTaggingSignalError() instead")
    void deleteJobTaggingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJobTaggingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMultiRegionAccessPointSignalError() instead")
    void deleteMultiRegionAccessPointSignalE(OAIDeleteMultiRegionAccessPointResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMultiRegionAccessPointSignalError(OAIDeleteMultiRegionAccessPointResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePublicAccessBlockSignalError() instead")
    void deletePublicAccessBlockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicAccessBlockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStorageLensConfigurationSignalError() instead")
    void deleteStorageLensConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStorageLensConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStorageLensConfigurationTaggingSignalError() instead")
    void deleteStorageLensConfigurationTaggingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStorageLensConfigurationTaggingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeJobSignalError() instead")
    void describeJobSignalE(OAIDescribeJobResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeJobSignalError(OAIDescribeJobResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeMultiRegionAccessPointOperationSignalError() instead")
    void describeMultiRegionAccessPointOperationSignalE(OAIDescribeMultiRegionAccessPointOperationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeMultiRegionAccessPointOperationSignalError(OAIDescribeMultiRegionAccessPointOperationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointSignalError() instead")
    void getAccessPointSignalE(OAIGetAccessPointResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointSignalError(OAIGetAccessPointResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointConfigurationForObjectLambdaSignalError() instead")
    void getAccessPointConfigurationForObjectLambdaSignalE(OAIGetAccessPointConfigurationForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointConfigurationForObjectLambdaSignalError(OAIGetAccessPointConfigurationForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointForObjectLambdaSignalError() instead")
    void getAccessPointForObjectLambdaSignalE(OAIGetAccessPointForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointForObjectLambdaSignalError(OAIGetAccessPointForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointPolicySignalError() instead")
    void getAccessPointPolicySignalE(OAIGetAccessPointPolicyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointPolicySignalError(OAIGetAccessPointPolicyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointPolicyForObjectLambdaSignalError() instead")
    void getAccessPointPolicyForObjectLambdaSignalE(OAIGetAccessPointPolicyForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointPolicyForObjectLambdaSignalError(OAIGetAccessPointPolicyForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointPolicyStatusSignalError() instead")
    void getAccessPointPolicyStatusSignalE(OAIGetAccessPointPolicyStatusResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointPolicyStatusSignalError(OAIGetAccessPointPolicyStatusResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointPolicyStatusForObjectLambdaSignalError() instead")
    void getAccessPointPolicyStatusForObjectLambdaSignalE(OAIGetAccessPointPolicyStatusForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointPolicyStatusForObjectLambdaSignalError(OAIGetAccessPointPolicyStatusForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketSignalError() instead")
    void getBucketSignalE(OAIGetBucketResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketSignalError(OAIGetBucketResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketLifecycleConfigurationSignalError() instead")
    void getBucketLifecycleConfigurationSignalE(OAIGetBucketLifecycleConfigurationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketLifecycleConfigurationSignalError(OAIGetBucketLifecycleConfigurationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketPolicySignalError() instead")
    void getBucketPolicySignalE(OAIGetBucketPolicyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketPolicySignalError(OAIGetBucketPolicyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketReplicationSignalError() instead")
    void getBucketReplicationSignalE(OAIGetBucketReplicationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketReplicationSignalError(OAIGetBucketReplicationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketTaggingSignalError() instead")
    void getBucketTaggingSignalE(OAIGetBucketTaggingResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketTaggingSignalError(OAIGetBucketTaggingResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketVersioningSignalError() instead")
    void getBucketVersioningSignalE(OAIGetBucketVersioningResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketVersioningSignalError(OAIGetBucketVersioningResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobTaggingSignalError() instead")
    void getJobTaggingSignalE(OAIGetJobTaggingResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobTaggingSignalError(OAIGetJobTaggingResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiRegionAccessPointSignalError() instead")
    void getMultiRegionAccessPointSignalE(OAIGetMultiRegionAccessPointResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiRegionAccessPointSignalError(OAIGetMultiRegionAccessPointResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiRegionAccessPointPolicySignalError() instead")
    void getMultiRegionAccessPointPolicySignalE(OAIGetMultiRegionAccessPointPolicyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiRegionAccessPointPolicySignalError(OAIGetMultiRegionAccessPointPolicyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiRegionAccessPointPolicyStatusSignalError() instead")
    void getMultiRegionAccessPointPolicyStatusSignalE(OAIGetMultiRegionAccessPointPolicyStatusResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiRegionAccessPointPolicyStatusSignalError(OAIGetMultiRegionAccessPointPolicyStatusResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiRegionAccessPointRoutesSignalError() instead")
    void getMultiRegionAccessPointRoutesSignalE(OAIGetMultiRegionAccessPointRoutesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiRegionAccessPointRoutesSignalError(OAIGetMultiRegionAccessPointRoutesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicAccessBlockSignalError() instead")
    void getPublicAccessBlockSignalE(OAIGetPublicAccessBlockOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicAccessBlockSignalError(OAIGetPublicAccessBlockOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStorageLensConfigurationSignalError() instead")
    void getStorageLensConfigurationSignalE(OAIGetStorageLensConfigurationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStorageLensConfigurationSignalError(OAIGetStorageLensConfigurationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStorageLensConfigurationTaggingSignalError() instead")
    void getStorageLensConfigurationTaggingSignalE(OAIGetStorageLensConfigurationTaggingResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStorageLensConfigurationTaggingSignalError(OAIGetStorageLensConfigurationTaggingResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccessPointsSignalError() instead")
    void listAccessPointsSignalE(OAIListAccessPointsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccessPointsSignalError(OAIListAccessPointsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccessPointsForObjectLambdaSignalError() instead")
    void listAccessPointsForObjectLambdaSignalE(OAIListAccessPointsForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccessPointsForObjectLambdaSignalError(OAIListAccessPointsForObjectLambdaResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listJobsSignalError() instead")
    void listJobsSignalE(OAIListJobsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listJobsSignalError(OAIListJobsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMultiRegionAccessPointsSignalError() instead")
    void listMultiRegionAccessPointsSignalE(OAIListMultiRegionAccessPointsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMultiRegionAccessPointsSignalError(OAIListMultiRegionAccessPointsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRegionalBucketsSignalError() instead")
    void listRegionalBucketsSignalE(OAIListRegionalBucketsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRegionalBucketsSignalError(OAIListRegionalBucketsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStorageLensConfigurationsSignalError() instead")
    void listStorageLensConfigurationsSignalE(OAIListStorageLensConfigurationsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listStorageLensConfigurationsSignalError(OAIListStorageLensConfigurationsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAccessPointConfigurationForObjectLambdaSignalError() instead")
    void putAccessPointConfigurationForObjectLambdaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putAccessPointConfigurationForObjectLambdaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAccessPointPolicySignalError() instead")
    void putAccessPointPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putAccessPointPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAccessPointPolicyForObjectLambdaSignalError() instead")
    void putAccessPointPolicyForObjectLambdaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putAccessPointPolicyForObjectLambdaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketLifecycleConfigurationSignalError() instead")
    void putBucketLifecycleConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketLifecycleConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketPolicySignalError() instead")
    void putBucketPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketReplicationSignalError() instead")
    void putBucketReplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketReplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketTaggingSignalError() instead")
    void putBucketTaggingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketTaggingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketVersioningSignalError() instead")
    void putBucketVersioningSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketVersioningSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putJobTaggingSignalError() instead")
    void putJobTaggingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putJobTaggingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putMultiRegionAccessPointPolicySignalError() instead")
    void putMultiRegionAccessPointPolicySignalE(OAIPutMultiRegionAccessPointPolicyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putMultiRegionAccessPointPolicySignalError(OAIPutMultiRegionAccessPointPolicyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPublicAccessBlockSignalError() instead")
    void putPublicAccessBlockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putPublicAccessBlockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putStorageLensConfigurationSignalError() instead")
    void putStorageLensConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putStorageLensConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putStorageLensConfigurationTaggingSignalError() instead")
    void putStorageLensConfigurationTaggingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putStorageLensConfigurationTaggingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitMultiRegionAccessPointRoutesSignalError() instead")
    void submitMultiRegionAccessPointRoutesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void submitMultiRegionAccessPointRoutesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJobPrioritySignalError() instead")
    void updateJobPrioritySignalE(OAIUpdateJobPriorityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJobPrioritySignalError(OAIUpdateJobPriorityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJobStatusSignalError() instead")
    void updateJobStatusSignalE(OAIUpdateJobStatusResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJobStatusSignalError(OAIUpdateJobStatusResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAccessPointSignalErrorFull() instead")
    void createAccessPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccessPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccessPointForObjectLambdaSignalErrorFull() instead")
    void createAccessPointForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccessPointForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBucketSignalErrorFull() instead")
    void createBucketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBucketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createJobSignalErrorFull() instead")
    void createJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMultiRegionAccessPointSignalErrorFull() instead")
    void createMultiRegionAccessPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMultiRegionAccessPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccessPointSignalErrorFull() instead")
    void deleteAccessPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccessPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccessPointForObjectLambdaSignalErrorFull() instead")
    void deleteAccessPointForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccessPointForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccessPointPolicySignalErrorFull() instead")
    void deleteAccessPointPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccessPointPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccessPointPolicyForObjectLambdaSignalErrorFull() instead")
    void deleteAccessPointPolicyForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccessPointPolicyForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketSignalErrorFull() instead")
    void deleteBucketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketLifecycleConfigurationSignalErrorFull() instead")
    void deleteBucketLifecycleConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketLifecycleConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketPolicySignalErrorFull() instead")
    void deleteBucketPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketReplicationSignalErrorFull() instead")
    void deleteBucketReplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketReplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBucketTaggingSignalErrorFull() instead")
    void deleteBucketTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBucketTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteJobTaggingSignalErrorFull() instead")
    void deleteJobTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJobTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMultiRegionAccessPointSignalErrorFull() instead")
    void deleteMultiRegionAccessPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMultiRegionAccessPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePublicAccessBlockSignalErrorFull() instead")
    void deletePublicAccessBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicAccessBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStorageLensConfigurationSignalErrorFull() instead")
    void deleteStorageLensConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStorageLensConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteStorageLensConfigurationTaggingSignalErrorFull() instead")
    void deleteStorageLensConfigurationTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteStorageLensConfigurationTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeJobSignalErrorFull() instead")
    void describeJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeMultiRegionAccessPointOperationSignalErrorFull() instead")
    void describeMultiRegionAccessPointOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeMultiRegionAccessPointOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointSignalErrorFull() instead")
    void getAccessPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointConfigurationForObjectLambdaSignalErrorFull() instead")
    void getAccessPointConfigurationForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointConfigurationForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointForObjectLambdaSignalErrorFull() instead")
    void getAccessPointForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointPolicySignalErrorFull() instead")
    void getAccessPointPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointPolicyForObjectLambdaSignalErrorFull() instead")
    void getAccessPointPolicyForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointPolicyForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointPolicyStatusSignalErrorFull() instead")
    void getAccessPointPolicyStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointPolicyStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccessPointPolicyStatusForObjectLambdaSignalErrorFull() instead")
    void getAccessPointPolicyStatusForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccessPointPolicyStatusForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketSignalErrorFull() instead")
    void getBucketSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketLifecycleConfigurationSignalErrorFull() instead")
    void getBucketLifecycleConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketLifecycleConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketPolicySignalErrorFull() instead")
    void getBucketPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketReplicationSignalErrorFull() instead")
    void getBucketReplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketReplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketTaggingSignalErrorFull() instead")
    void getBucketTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBucketVersioningSignalErrorFull() instead")
    void getBucketVersioningSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBucketVersioningSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJobTaggingSignalErrorFull() instead")
    void getJobTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJobTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiRegionAccessPointSignalErrorFull() instead")
    void getMultiRegionAccessPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiRegionAccessPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiRegionAccessPointPolicySignalErrorFull() instead")
    void getMultiRegionAccessPointPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiRegionAccessPointPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiRegionAccessPointPolicyStatusSignalErrorFull() instead")
    void getMultiRegionAccessPointPolicyStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiRegionAccessPointPolicyStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMultiRegionAccessPointRoutesSignalErrorFull() instead")
    void getMultiRegionAccessPointRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMultiRegionAccessPointRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicAccessBlockSignalErrorFull() instead")
    void getPublicAccessBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicAccessBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStorageLensConfigurationSignalErrorFull() instead")
    void getStorageLensConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStorageLensConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStorageLensConfigurationTaggingSignalErrorFull() instead")
    void getStorageLensConfigurationTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStorageLensConfigurationTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccessPointsSignalErrorFull() instead")
    void listAccessPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccessPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccessPointsForObjectLambdaSignalErrorFull() instead")
    void listAccessPointsForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccessPointsForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listJobsSignalErrorFull() instead")
    void listJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMultiRegionAccessPointsSignalErrorFull() instead")
    void listMultiRegionAccessPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMultiRegionAccessPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRegionalBucketsSignalErrorFull() instead")
    void listRegionalBucketsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRegionalBucketsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listStorageLensConfigurationsSignalErrorFull() instead")
    void listStorageLensConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listStorageLensConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAccessPointConfigurationForObjectLambdaSignalErrorFull() instead")
    void putAccessPointConfigurationForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putAccessPointConfigurationForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAccessPointPolicySignalErrorFull() instead")
    void putAccessPointPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putAccessPointPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAccessPointPolicyForObjectLambdaSignalErrorFull() instead")
    void putAccessPointPolicyForObjectLambdaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putAccessPointPolicyForObjectLambdaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketLifecycleConfigurationSignalErrorFull() instead")
    void putBucketLifecycleConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketLifecycleConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketPolicySignalErrorFull() instead")
    void putBucketPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketReplicationSignalErrorFull() instead")
    void putBucketReplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketReplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketTaggingSignalErrorFull() instead")
    void putBucketTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBucketVersioningSignalErrorFull() instead")
    void putBucketVersioningSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBucketVersioningSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putJobTaggingSignalErrorFull() instead")
    void putJobTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putJobTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putMultiRegionAccessPointPolicySignalErrorFull() instead")
    void putMultiRegionAccessPointPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putMultiRegionAccessPointPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPublicAccessBlockSignalErrorFull() instead")
    void putPublicAccessBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPublicAccessBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putStorageLensConfigurationSignalErrorFull() instead")
    void putStorageLensConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putStorageLensConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putStorageLensConfigurationTaggingSignalErrorFull() instead")
    void putStorageLensConfigurationTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putStorageLensConfigurationTaggingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitMultiRegionAccessPointRoutesSignalErrorFull() instead")
    void submitMultiRegionAccessPointRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitMultiRegionAccessPointRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJobPrioritySignalErrorFull() instead")
    void updateJobPrioritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJobPrioritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJobStatusSignalErrorFull() instead")
    void updateJobStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJobStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
