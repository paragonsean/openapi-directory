/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectLambdaTransformationConfiguration_ContentTransformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectLambdaTransformationConfiguration_ContentTransformation::OAIObjectLambdaTransformationConfiguration_ContentTransformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectLambdaTransformationConfiguration_ContentTransformation::OAIObjectLambdaTransformationConfiguration_ContentTransformation() {
    this->initializeModel();
}

OAIObjectLambdaTransformationConfiguration_ContentTransformation::~OAIObjectLambdaTransformationConfiguration_ContentTransformation() {}

void OAIObjectLambdaTransformationConfiguration_ContentTransformation::initializeModel() {

    m_aws_lambda_isSet = false;
    m_aws_lambda_isValid = false;
}

void OAIObjectLambdaTransformationConfiguration_ContentTransformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectLambdaTransformationConfiguration_ContentTransformation::fromJsonObject(QJsonObject json) {

    m_aws_lambda_isValid = ::OpenAPI::fromJsonValue(m_aws_lambda, json[QString("AwsLambda")]);
    m_aws_lambda_isSet = !json[QString("AwsLambda")].isNull() && m_aws_lambda_isValid;
}

QString OAIObjectLambdaTransformationConfiguration_ContentTransformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectLambdaTransformationConfiguration_ContentTransformation::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_lambda.isSet()) {
        obj.insert(QString("AwsLambda"), ::OpenAPI::toJsonValue(m_aws_lambda));
    }
    return obj;
}

OAIObjectLambdaContentTransformation_AwsLambda OAIObjectLambdaTransformationConfiguration_ContentTransformation::getAwsLambda() const {
    return m_aws_lambda;
}
void OAIObjectLambdaTransformationConfiguration_ContentTransformation::setAwsLambda(const OAIObjectLambdaContentTransformation_AwsLambda &aws_lambda) {
    m_aws_lambda = aws_lambda;
    m_aws_lambda_isSet = true;
}

bool OAIObjectLambdaTransformationConfiguration_ContentTransformation::is_aws_lambda_Set() const{
    return m_aws_lambda_isSet;
}

bool OAIObjectLambdaTransformationConfiguration_ContentTransformation::is_aws_lambda_Valid() const{
    return m_aws_lambda_isValid;
}

bool OAIObjectLambdaTransformationConfiguration_ContentTransformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_lambda.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectLambdaTransformationConfiguration_ContentTransformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
