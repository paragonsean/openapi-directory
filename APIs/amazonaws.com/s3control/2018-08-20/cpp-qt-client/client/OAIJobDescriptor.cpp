/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobDescriptor::OAIJobDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobDescriptor::OAIJobDescriptor() {
    this->initializeModel();
}

OAIJobDescriptor::~OAIJobDescriptor() {}

void OAIJobDescriptor::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_confirmation_required_isSet = false;
    m_confirmation_required_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_job_arn_isSet = false;
    m_job_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_manifest_isSet = false;
    m_manifest_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_progress_summary_isSet = false;
    m_progress_summary_isValid = false;

    m_status_update_reason_isSet = false;
    m_status_update_reason_isValid = false;

    m_failure_reasons_isSet = false;
    m_failure_reasons_isValid = false;

    m_report_isSet = false;
    m_report_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_termination_date_isSet = false;
    m_termination_date_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_suspended_date_isSet = false;
    m_suspended_date_isValid = false;

    m_suspended_cause_isSet = false;
    m_suspended_cause_isValid = false;

    m_manifest_generator_isSet = false;
    m_manifest_generator_isValid = false;

    m_generated_manifest_descriptor_isSet = false;
    m_generated_manifest_descriptor_isValid = false;
}

void OAIJobDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobDescriptor::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_confirmation_required_isValid = ::OpenAPI::fromJsonValue(m_confirmation_required, json[QString("ConfirmationRequired")]);
    m_confirmation_required_isSet = !json[QString("ConfirmationRequired")].isNull() && m_confirmation_required_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_job_arn_isValid = ::OpenAPI::fromJsonValue(m_job_arn, json[QString("JobArn")]);
    m_job_arn_isSet = !json[QString("JobArn")].isNull() && m_job_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_manifest_isValid = ::OpenAPI::fromJsonValue(m_manifest, json[QString("Manifest")]);
    m_manifest_isSet = !json[QString("Manifest")].isNull() && m_manifest_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("Operation")]);
    m_operation_isSet = !json[QString("Operation")].isNull() && m_operation_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_progress_summary_isValid = ::OpenAPI::fromJsonValue(m_progress_summary, json[QString("ProgressSummary")]);
    m_progress_summary_isSet = !json[QString("ProgressSummary")].isNull() && m_progress_summary_isValid;

    m_status_update_reason_isValid = ::OpenAPI::fromJsonValue(m_status_update_reason, json[QString("StatusUpdateReason")]);
    m_status_update_reason_isSet = !json[QString("StatusUpdateReason")].isNull() && m_status_update_reason_isValid;

    m_failure_reasons_isValid = ::OpenAPI::fromJsonValue(m_failure_reasons, json[QString("FailureReasons")]);
    m_failure_reasons_isSet = !json[QString("FailureReasons")].isNull() && m_failure_reasons_isValid;

    m_report_isValid = ::OpenAPI::fromJsonValue(m_report, json[QString("Report")]);
    m_report_isSet = !json[QString("Report")].isNull() && m_report_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_termination_date_isValid = ::OpenAPI::fromJsonValue(m_termination_date, json[QString("TerminationDate")]);
    m_termination_date_isSet = !json[QString("TerminationDate")].isNull() && m_termination_date_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_suspended_date_isValid = ::OpenAPI::fromJsonValue(m_suspended_date, json[QString("SuspendedDate")]);
    m_suspended_date_isSet = !json[QString("SuspendedDate")].isNull() && m_suspended_date_isValid;

    m_suspended_cause_isValid = ::OpenAPI::fromJsonValue(m_suspended_cause, json[QString("SuspendedCause")]);
    m_suspended_cause_isSet = !json[QString("SuspendedCause")].isNull() && m_suspended_cause_isValid;

    m_manifest_generator_isValid = ::OpenAPI::fromJsonValue(m_manifest_generator, json[QString("ManifestGenerator")]);
    m_manifest_generator_isSet = !json[QString("ManifestGenerator")].isNull() && m_manifest_generator_isValid;

    m_generated_manifest_descriptor_isValid = ::OpenAPI::fromJsonValue(m_generated_manifest_descriptor, json[QString("GeneratedManifestDescriptor")]);
    m_generated_manifest_descriptor_isSet = !json[QString("GeneratedManifestDescriptor")].isNull() && m_generated_manifest_descriptor_isValid;
}

QString OAIJobDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_confirmation_required_isSet) {
        obj.insert(QString("ConfirmationRequired"), ::OpenAPI::toJsonValue(m_confirmation_required));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_job_arn_isSet) {
        obj.insert(QString("JobArn"), ::OpenAPI::toJsonValue(m_job_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_manifest.isSet()) {
        obj.insert(QString("Manifest"), ::OpenAPI::toJsonValue(m_manifest));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("Operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_progress_summary.isSet()) {
        obj.insert(QString("ProgressSummary"), ::OpenAPI::toJsonValue(m_progress_summary));
    }
    if (m_status_update_reason_isSet) {
        obj.insert(QString("StatusUpdateReason"), ::OpenAPI::toJsonValue(m_status_update_reason));
    }
    if (m_failure_reasons.isSet()) {
        obj.insert(QString("FailureReasons"), ::OpenAPI::toJsonValue(m_failure_reasons));
    }
    if (m_report.isSet()) {
        obj.insert(QString("Report"), ::OpenAPI::toJsonValue(m_report));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_termination_date_isSet) {
        obj.insert(QString("TerminationDate"), ::OpenAPI::toJsonValue(m_termination_date));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_suspended_date_isSet) {
        obj.insert(QString("SuspendedDate"), ::OpenAPI::toJsonValue(m_suspended_date));
    }
    if (m_suspended_cause_isSet) {
        obj.insert(QString("SuspendedCause"), ::OpenAPI::toJsonValue(m_suspended_cause));
    }
    if (m_manifest_generator.isSet()) {
        obj.insert(QString("ManifestGenerator"), ::OpenAPI::toJsonValue(m_manifest_generator));
    }
    if (m_generated_manifest_descriptor.isSet()) {
        obj.insert(QString("GeneratedManifestDescriptor"), ::OpenAPI::toJsonValue(m_generated_manifest_descriptor));
    }
    return obj;
}

QString OAIJobDescriptor::getJobId() const {
    return m_job_id;
}
void OAIJobDescriptor::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobDescriptor::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobDescriptor::is_job_id_Valid() const{
    return m_job_id_isValid;
}

bool OAIJobDescriptor::getConfirmationRequired() const {
    return m_confirmation_required;
}
void OAIJobDescriptor::setConfirmationRequired(const bool &confirmation_required) {
    m_confirmation_required = confirmation_required;
    m_confirmation_required_isSet = true;
}

bool OAIJobDescriptor::is_confirmation_required_Set() const{
    return m_confirmation_required_isSet;
}

bool OAIJobDescriptor::is_confirmation_required_Valid() const{
    return m_confirmation_required_isValid;
}

QString OAIJobDescriptor::getDescription() const {
    return m_description;
}
void OAIJobDescriptor::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJobDescriptor::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJobDescriptor::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIJobDescriptor::getJobArn() const {
    return m_job_arn;
}
void OAIJobDescriptor::setJobArn(const QString &job_arn) {
    m_job_arn = job_arn;
    m_job_arn_isSet = true;
}

bool OAIJobDescriptor::is_job_arn_Set() const{
    return m_job_arn_isSet;
}

bool OAIJobDescriptor::is_job_arn_Valid() const{
    return m_job_arn_isValid;
}

OAIJobStatus OAIJobDescriptor::getStatus() const {
    return m_status;
}
void OAIJobDescriptor::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobDescriptor::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobDescriptor::is_status_Valid() const{
    return m_status_isValid;
}

OAIJobDescriptor_Manifest OAIJobDescriptor::getManifest() const {
    return m_manifest;
}
void OAIJobDescriptor::setManifest(const OAIJobDescriptor_Manifest &manifest) {
    m_manifest = manifest;
    m_manifest_isSet = true;
}

bool OAIJobDescriptor::is_manifest_Set() const{
    return m_manifest_isSet;
}

bool OAIJobDescriptor::is_manifest_Valid() const{
    return m_manifest_isValid;
}

OAIJobDescriptor_Operation OAIJobDescriptor::getOperation() const {
    return m_operation;
}
void OAIJobDescriptor::setOperation(const OAIJobDescriptor_Operation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIJobDescriptor::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIJobDescriptor::is_operation_Valid() const{
    return m_operation_isValid;
}

qint32 OAIJobDescriptor::getPriority() const {
    return m_priority;
}
void OAIJobDescriptor::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIJobDescriptor::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIJobDescriptor::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIJobDescriptor_ProgressSummary OAIJobDescriptor::getProgressSummary() const {
    return m_progress_summary;
}
void OAIJobDescriptor::setProgressSummary(const OAIJobDescriptor_ProgressSummary &progress_summary) {
    m_progress_summary = progress_summary;
    m_progress_summary_isSet = true;
}

bool OAIJobDescriptor::is_progress_summary_Set() const{
    return m_progress_summary_isSet;
}

bool OAIJobDescriptor::is_progress_summary_Valid() const{
    return m_progress_summary_isValid;
}

QString OAIJobDescriptor::getStatusUpdateReason() const {
    return m_status_update_reason;
}
void OAIJobDescriptor::setStatusUpdateReason(const QString &status_update_reason) {
    m_status_update_reason = status_update_reason;
    m_status_update_reason_isSet = true;
}

bool OAIJobDescriptor::is_status_update_reason_Set() const{
    return m_status_update_reason_isSet;
}

bool OAIJobDescriptor::is_status_update_reason_Valid() const{
    return m_status_update_reason_isValid;
}

QList OAIJobDescriptor::getFailureReasons() const {
    return m_failure_reasons;
}
void OAIJobDescriptor::setFailureReasons(const QList &failure_reasons) {
    m_failure_reasons = failure_reasons;
    m_failure_reasons_isSet = true;
}

bool OAIJobDescriptor::is_failure_reasons_Set() const{
    return m_failure_reasons_isSet;
}

bool OAIJobDescriptor::is_failure_reasons_Valid() const{
    return m_failure_reasons_isValid;
}

OAIJobDescriptor_Report OAIJobDescriptor::getReport() const {
    return m_report;
}
void OAIJobDescriptor::setReport(const OAIJobDescriptor_Report &report) {
    m_report = report;
    m_report_isSet = true;
}

bool OAIJobDescriptor::is_report_Set() const{
    return m_report_isSet;
}

bool OAIJobDescriptor::is_report_Valid() const{
    return m_report_isValid;
}

QDateTime OAIJobDescriptor::getCreationTime() const {
    return m_creation_time;
}
void OAIJobDescriptor::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIJobDescriptor::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIJobDescriptor::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIJobDescriptor::getTerminationDate() const {
    return m_termination_date;
}
void OAIJobDescriptor::setTerminationDate(const QDateTime &termination_date) {
    m_termination_date = termination_date;
    m_termination_date_isSet = true;
}

bool OAIJobDescriptor::is_termination_date_Set() const{
    return m_termination_date_isSet;
}

bool OAIJobDescriptor::is_termination_date_Valid() const{
    return m_termination_date_isValid;
}

QString OAIJobDescriptor::getRoleArn() const {
    return m_role_arn;
}
void OAIJobDescriptor::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIJobDescriptor::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIJobDescriptor::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIJobDescriptor::getSuspendedDate() const {
    return m_suspended_date;
}
void OAIJobDescriptor::setSuspendedDate(const QDateTime &suspended_date) {
    m_suspended_date = suspended_date;
    m_suspended_date_isSet = true;
}

bool OAIJobDescriptor::is_suspended_date_Set() const{
    return m_suspended_date_isSet;
}

bool OAIJobDescriptor::is_suspended_date_Valid() const{
    return m_suspended_date_isValid;
}

QString OAIJobDescriptor::getSuspendedCause() const {
    return m_suspended_cause;
}
void OAIJobDescriptor::setSuspendedCause(const QString &suspended_cause) {
    m_suspended_cause = suspended_cause;
    m_suspended_cause_isSet = true;
}

bool OAIJobDescriptor::is_suspended_cause_Set() const{
    return m_suspended_cause_isSet;
}

bool OAIJobDescriptor::is_suspended_cause_Valid() const{
    return m_suspended_cause_isValid;
}

OAIJobDescriptor_ManifestGenerator OAIJobDescriptor::getManifestGenerator() const {
    return m_manifest_generator;
}
void OAIJobDescriptor::setManifestGenerator(const OAIJobDescriptor_ManifestGenerator &manifest_generator) {
    m_manifest_generator = manifest_generator;
    m_manifest_generator_isSet = true;
}

bool OAIJobDescriptor::is_manifest_generator_Set() const{
    return m_manifest_generator_isSet;
}

bool OAIJobDescriptor::is_manifest_generator_Valid() const{
    return m_manifest_generator_isValid;
}

OAIJobDescriptor_GeneratedManifestDescriptor OAIJobDescriptor::getGeneratedManifestDescriptor() const {
    return m_generated_manifest_descriptor;
}
void OAIJobDescriptor::setGeneratedManifestDescriptor(const OAIJobDescriptor_GeneratedManifestDescriptor &generated_manifest_descriptor) {
    m_generated_manifest_descriptor = generated_manifest_descriptor;
    m_generated_manifest_descriptor_isSet = true;
}

bool OAIJobDescriptor::is_generated_manifest_descriptor_Set() const{
    return m_generated_manifest_descriptor_isSet;
}

bool OAIJobDescriptor::is_generated_manifest_descriptor_Valid() const{
    return m_generated_manifest_descriptor_isValid;
}

bool OAIJobDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_update_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_termination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_cause_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_generator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_manifest_descriptor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
