/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionalBucketList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionalBucketList_inner::OAIRegionalBucketList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionalBucketList_inner::OAIRegionalBucketList_inner() {
    this->initializeModel();
}

OAIRegionalBucketList_inner::~OAIRegionalBucketList_inner() {}

void OAIRegionalBucketList_inner::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_public_access_block_enabled_isSet = false;
    m_public_access_block_enabled_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_outpost_id_isSet = false;
    m_outpost_id_isValid = false;
}

void OAIRegionalBucketList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionalBucketList_inner::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("BucketArn")]);
    m_bucket_arn_isSet = !json[QString("BucketArn")].isNull() && m_bucket_arn_isValid;

    m_public_access_block_enabled_isValid = ::OpenAPI::fromJsonValue(m_public_access_block_enabled, json[QString("PublicAccessBlockEnabled")]);
    m_public_access_block_enabled_isSet = !json[QString("PublicAccessBlockEnabled")].isNull() && m_public_access_block_enabled_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_outpost_id_isValid = ::OpenAPI::fromJsonValue(m_outpost_id, json[QString("OutpostId")]);
    m_outpost_id_isSet = !json[QString("OutpostId")].isNull() && m_outpost_id_isValid;
}

QString OAIRegionalBucketList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionalBucketList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_bucket_arn_isSet) {
        obj.insert(QString("BucketArn"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_public_access_block_enabled_isSet) {
        obj.insert(QString("PublicAccessBlockEnabled"), ::OpenAPI::toJsonValue(m_public_access_block_enabled));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_outpost_id_isSet) {
        obj.insert(QString("OutpostId"), ::OpenAPI::toJsonValue(m_outpost_id));
    }
    return obj;
}

QString OAIRegionalBucketList_inner::getBucket() const {
    return m_bucket;
}
void OAIRegionalBucketList_inner::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIRegionalBucketList_inner::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIRegionalBucketList_inner::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIRegionalBucketList_inner::getBucketArn() const {
    return m_bucket_arn;
}
void OAIRegionalBucketList_inner::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAIRegionalBucketList_inner::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAIRegionalBucketList_inner::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

bool OAIRegionalBucketList_inner::getPublicAccessBlockEnabled() const {
    return m_public_access_block_enabled;
}
void OAIRegionalBucketList_inner::setPublicAccessBlockEnabled(const bool &public_access_block_enabled) {
    m_public_access_block_enabled = public_access_block_enabled;
    m_public_access_block_enabled_isSet = true;
}

bool OAIRegionalBucketList_inner::is_public_access_block_enabled_Set() const{
    return m_public_access_block_enabled_isSet;
}

bool OAIRegionalBucketList_inner::is_public_access_block_enabled_Valid() const{
    return m_public_access_block_enabled_isValid;
}

QDateTime OAIRegionalBucketList_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIRegionalBucketList_inner::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIRegionalBucketList_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIRegionalBucketList_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIRegionalBucketList_inner::getOutpostId() const {
    return m_outpost_id;
}
void OAIRegionalBucketList_inner::setOutpostId(const QString &outpost_id) {
    m_outpost_id = outpost_id;
    m_outpost_id_isSet = true;
}

bool OAIRegionalBucketList_inner::is_outpost_id_Set() const{
    return m_outpost_id_isSet;
}

bool OAIRegionalBucketList_inner::is_outpost_id_Valid() const{
    return m_outpost_id_isValid;
}

bool OAIRegionalBucketList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_access_block_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outpost_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionalBucketList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_public_access_block_enabled_isValid && m_creation_date_isValid && true;
}

} // namespace OpenAPI
