/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude() {
    this->initializeModel();
}

OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::~OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude() {}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::initializeModel() {

    m_buckets_isSet = false;
    m_buckets_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;
}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::fromJsonObject(QJsonObject json) {

    m_buckets_isValid = ::OpenAPI::fromJsonValue(m_buckets, json[QString("Buckets")]);
    m_buckets_isSet = !json[QString("Buckets")].isNull() && m_buckets_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("Regions")]);
    m_regions_isSet = !json[QString("Regions")].isNull() && m_regions_isValid;
}

QString OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::asJsonObject() const {
    QJsonObject obj;
    if (m_buckets.isSet()) {
        obj.insert(QString("Buckets"), ::OpenAPI::toJsonValue(m_buckets));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("Regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    return obj;
}

QList OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::getBuckets() const {
    return m_buckets;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::setBuckets(const QList &buckets) {
    m_buckets = buckets;
    m_buckets_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::is_buckets_Set() const{
    return m_buckets_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::is_buckets_Valid() const{
    return m_buckets_isValid;
}

QList OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::getRegions() const {
    return m_regions;
}
void OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::setRegions(const QList &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::is_regions_Valid() const{
    return m_regions_isValid;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buckets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutStorageLensConfiguration_request_StorageLensConfiguration_Exclude::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
