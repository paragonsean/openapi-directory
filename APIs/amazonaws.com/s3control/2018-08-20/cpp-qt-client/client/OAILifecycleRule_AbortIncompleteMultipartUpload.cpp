/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifecycleRule_AbortIncompleteMultipartUpload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifecycleRule_AbortIncompleteMultipartUpload::OAILifecycleRule_AbortIncompleteMultipartUpload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifecycleRule_AbortIncompleteMultipartUpload::OAILifecycleRule_AbortIncompleteMultipartUpload() {
    this->initializeModel();
}

OAILifecycleRule_AbortIncompleteMultipartUpload::~OAILifecycleRule_AbortIncompleteMultipartUpload() {}

void OAILifecycleRule_AbortIncompleteMultipartUpload::initializeModel() {

    m_days_after_initiation_isSet = false;
    m_days_after_initiation_isValid = false;
}

void OAILifecycleRule_AbortIncompleteMultipartUpload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifecycleRule_AbortIncompleteMultipartUpload::fromJsonObject(QJsonObject json) {

    m_days_after_initiation_isValid = ::OpenAPI::fromJsonValue(m_days_after_initiation, json[QString("DaysAfterInitiation")]);
    m_days_after_initiation_isSet = !json[QString("DaysAfterInitiation")].isNull() && m_days_after_initiation_isValid;
}

QString OAILifecycleRule_AbortIncompleteMultipartUpload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifecycleRule_AbortIncompleteMultipartUpload::asJsonObject() const {
    QJsonObject obj;
    if (m_days_after_initiation_isSet) {
        obj.insert(QString("DaysAfterInitiation"), ::OpenAPI::toJsonValue(m_days_after_initiation));
    }
    return obj;
}

qint32 OAILifecycleRule_AbortIncompleteMultipartUpload::getDaysAfterInitiation() const {
    return m_days_after_initiation;
}
void OAILifecycleRule_AbortIncompleteMultipartUpload::setDaysAfterInitiation(const qint32 &days_after_initiation) {
    m_days_after_initiation = days_after_initiation;
    m_days_after_initiation_isSet = true;
}

bool OAILifecycleRule_AbortIncompleteMultipartUpload::is_days_after_initiation_Set() const{
    return m_days_after_initiation_isSet;
}

bool OAILifecycleRule_AbortIncompleteMultipartUpload::is_days_after_initiation_Valid() const{
    return m_days_after_initiation_isValid;
}

bool OAILifecycleRule_AbortIncompleteMultipartUpload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_days_after_initiation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifecycleRule_AbortIncompleteMultipartUpload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
