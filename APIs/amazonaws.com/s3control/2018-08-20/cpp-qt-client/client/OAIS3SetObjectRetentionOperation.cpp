/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3SetObjectRetentionOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3SetObjectRetentionOperation::OAIS3SetObjectRetentionOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3SetObjectRetentionOperation::OAIS3SetObjectRetentionOperation() {
    this->initializeModel();
}

OAIS3SetObjectRetentionOperation::~OAIS3SetObjectRetentionOperation() {}

void OAIS3SetObjectRetentionOperation::initializeModel() {

    m_bypass_governance_retention_isSet = false;
    m_bypass_governance_retention_isValid = false;

    m_retention_isSet = false;
    m_retention_isValid = false;
}

void OAIS3SetObjectRetentionOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3SetObjectRetentionOperation::fromJsonObject(QJsonObject json) {

    m_bypass_governance_retention_isValid = ::OpenAPI::fromJsonValue(m_bypass_governance_retention, json[QString("BypassGovernanceRetention")]);
    m_bypass_governance_retention_isSet = !json[QString("BypassGovernanceRetention")].isNull() && m_bypass_governance_retention_isValid;

    m_retention_isValid = ::OpenAPI::fromJsonValue(m_retention, json[QString("Retention")]);
    m_retention_isSet = !json[QString("Retention")].isNull() && m_retention_isValid;
}

QString OAIS3SetObjectRetentionOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3SetObjectRetentionOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_bypass_governance_retention_isSet) {
        obj.insert(QString("BypassGovernanceRetention"), ::OpenAPI::toJsonValue(m_bypass_governance_retention));
    }
    if (m_retention.isSet()) {
        obj.insert(QString("Retention"), ::OpenAPI::toJsonValue(m_retention));
    }
    return obj;
}

bool OAIS3SetObjectRetentionOperation::getBypassGovernanceRetention() const {
    return m_bypass_governance_retention;
}
void OAIS3SetObjectRetentionOperation::setBypassGovernanceRetention(const bool &bypass_governance_retention) {
    m_bypass_governance_retention = bypass_governance_retention;
    m_bypass_governance_retention_isSet = true;
}

bool OAIS3SetObjectRetentionOperation::is_bypass_governance_retention_Set() const{
    return m_bypass_governance_retention_isSet;
}

bool OAIS3SetObjectRetentionOperation::is_bypass_governance_retention_Valid() const{
    return m_bypass_governance_retention_isValid;
}

OAIS3SetObjectRetentionOperation_Retention OAIS3SetObjectRetentionOperation::getRetention() const {
    return m_retention;
}
void OAIS3SetObjectRetentionOperation::setRetention(const OAIS3SetObjectRetentionOperation_Retention &retention) {
    m_retention = retention;
    m_retention_isSet = true;
}

bool OAIS3SetObjectRetentionOperation::is_retention_Set() const{
    return m_retention_isSet;
}

bool OAIS3SetObjectRetentionOperation::is_retention_Valid() const{
    return m_retention_isValid;
}

bool OAIS3SetObjectRetentionOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bypass_governance_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3SetObjectRetentionOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_retention_isValid && true;
}

} // namespace OpenAPI
