/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReplicationRule.h
 *
 * Specifies which S3 on Outposts objects to replicate and where to store the replicas.
 */

#ifndef OAIReplicationRule_H
#define OAIReplicationRule_H

#include <QJsonObject>

#include "OAIReplicationRuleStatus.h"
#include "OAIReplicationRule_DeleteMarkerReplication.h"
#include "OAIReplicationRule_Destination.h"
#include "OAIReplicationRule_ExistingObjectReplication.h"
#include "OAIReplicationRule_Filter.h"
#include "OAIReplicationRule_SourceSelectionCriteria.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReplicationRule_Filter;
class OAIReplicationRule_SourceSelectionCriteria;
class OAIReplicationRule_ExistingObjectReplication;
class OAIReplicationRule_Destination;
class OAIReplicationRule_DeleteMarkerReplication;

class OAIReplicationRule : public OAIObject {
public:
    OAIReplicationRule();
    OAIReplicationRule(QString json);
    ~OAIReplicationRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getPriority() const;
    void setPriority(const qint32 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    OAIReplicationRule_Filter getFilter() const;
    void setFilter(const OAIReplicationRule_Filter &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    OAIReplicationRuleStatus getStatus() const;
    void setStatus(const OAIReplicationRuleStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIReplicationRule_SourceSelectionCriteria getSourceSelectionCriteria() const;
    void setSourceSelectionCriteria(const OAIReplicationRule_SourceSelectionCriteria &source_selection_criteria);
    bool is_source_selection_criteria_Set() const;
    bool is_source_selection_criteria_Valid() const;

    OAIReplicationRule_ExistingObjectReplication getExistingObjectReplication() const;
    void setExistingObjectReplication(const OAIReplicationRule_ExistingObjectReplication &existing_object_replication);
    bool is_existing_object_replication_Set() const;
    bool is_existing_object_replication_Valid() const;

    OAIReplicationRule_Destination getDestination() const;
    void setDestination(const OAIReplicationRule_Destination &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    OAIReplicationRule_DeleteMarkerReplication getDeleteMarkerReplication() const;
    void setDeleteMarkerReplication(const OAIReplicationRule_DeleteMarkerReplication &delete_marker_replication);
    bool is_delete_marker_replication_Set() const;
    bool is_delete_marker_replication_Valid() const;

    QString getBucket() const;
    void setBucket(const QString &bucket);
    bool is_bucket_Set() const;
    bool is_bucket_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    OAIReplicationRule_Filter m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    OAIReplicationRuleStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIReplicationRule_SourceSelectionCriteria m_source_selection_criteria;
    bool m_source_selection_criteria_isSet;
    bool m_source_selection_criteria_isValid;

    OAIReplicationRule_ExistingObjectReplication m_existing_object_replication;
    bool m_existing_object_replication_isSet;
    bool m_existing_object_replication_isValid;

    OAIReplicationRule_Destination m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    OAIReplicationRule_DeleteMarkerReplication m_delete_marker_replication;
    bool m_delete_marker_replication_isSet;
    bool m_delete_marker_replication_isValid;

    QString m_bucket;
    bool m_bucket_isSet;
    bool m_bucket_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReplicationRule)

#endif // OAIReplicationRule_H
