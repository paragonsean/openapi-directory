/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectLambdaAccessPointList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectLambdaAccessPointList_inner::OAIObjectLambdaAccessPointList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectLambdaAccessPointList_inner::OAIObjectLambdaAccessPointList_inner() {
    this->initializeModel();
}

OAIObjectLambdaAccessPointList_inner::~OAIObjectLambdaAccessPointList_inner() {}

void OAIObjectLambdaAccessPointList_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_lambda_access_point_arn_isSet = false;
    m_object_lambda_access_point_arn_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;
}

void OAIObjectLambdaAccessPointList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectLambdaAccessPointList_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_object_lambda_access_point_arn_isValid = ::OpenAPI::fromJsonValue(m_object_lambda_access_point_arn, json[QString("ObjectLambdaAccessPointArn")]);
    m_object_lambda_access_point_arn_isSet = !json[QString("ObjectLambdaAccessPointArn")].isNull() && m_object_lambda_access_point_arn_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;
}

QString OAIObjectLambdaAccessPointList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectLambdaAccessPointList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_lambda_access_point_arn_isSet) {
        obj.insert(QString("ObjectLambdaAccessPointArn"), ::OpenAPI::toJsonValue(m_object_lambda_access_point_arn));
    }
    if (m_alias.isSet()) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    return obj;
}

QString OAIObjectLambdaAccessPointList_inner::getName() const {
    return m_name;
}
void OAIObjectLambdaAccessPointList_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjectLambdaAccessPointList_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjectLambdaAccessPointList_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIObjectLambdaAccessPointList_inner::getObjectLambdaAccessPointArn() const {
    return m_object_lambda_access_point_arn;
}
void OAIObjectLambdaAccessPointList_inner::setObjectLambdaAccessPointArn(const QString &object_lambda_access_point_arn) {
    m_object_lambda_access_point_arn = object_lambda_access_point_arn;
    m_object_lambda_access_point_arn_isSet = true;
}

bool OAIObjectLambdaAccessPointList_inner::is_object_lambda_access_point_arn_Set() const{
    return m_object_lambda_access_point_arn_isSet;
}

bool OAIObjectLambdaAccessPointList_inner::is_object_lambda_access_point_arn_Valid() const{
    return m_object_lambda_access_point_arn_isValid;
}

OAICreateAccessPointForObjectLambdaResult_Alias OAIObjectLambdaAccessPointList_inner::getAlias() const {
    return m_alias;
}
void OAIObjectLambdaAccessPointList_inner::setAlias(const OAICreateAccessPointForObjectLambdaResult_Alias &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIObjectLambdaAccessPointList_inner::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIObjectLambdaAccessPointList_inner::is_alias_Valid() const{
    return m_alias_isValid;
}

bool OAIObjectLambdaAccessPointList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_lambda_access_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectLambdaAccessPointList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
