/**
 * AWS S3 Control
 *  Amazon Web Services S3 Control provides access to Amazon S3 control plane actions. 
 *
 * The version of the OpenAPI document: 2018-08-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJobRequest_Operation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJobRequest_Operation::OAICreateJobRequest_Operation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJobRequest_Operation::OAICreateJobRequest_Operation() {
    this->initializeModel();
}

OAICreateJobRequest_Operation::~OAICreateJobRequest_Operation() {}

void OAICreateJobRequest_Operation::initializeModel() {

    m_lambda_invoke_isSet = false;
    m_lambda_invoke_isValid = false;

    m_s3_put_object_copy_isSet = false;
    m_s3_put_object_copy_isValid = false;

    m_s3_put_object_acl_isSet = false;
    m_s3_put_object_acl_isValid = false;

    m_s3_put_object_tagging_isSet = false;
    m_s3_put_object_tagging_isValid = false;

    m_s3_delete_object_tagging_isSet = false;
    m_s3_delete_object_tagging_isValid = false;

    m_s3_initiate_restore_object_isSet = false;
    m_s3_initiate_restore_object_isValid = false;

    m_s3_put_object_legal_hold_isSet = false;
    m_s3_put_object_legal_hold_isValid = false;

    m_s3_put_object_retention_isSet = false;
    m_s3_put_object_retention_isValid = false;

    m_s3_replicate_object_isSet = false;
    m_s3_replicate_object_isValid = false;
}

void OAICreateJobRequest_Operation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJobRequest_Operation::fromJsonObject(QJsonObject json) {

    m_lambda_invoke_isValid = ::OpenAPI::fromJsonValue(m_lambda_invoke, json[QString("LambdaInvoke")]);
    m_lambda_invoke_isSet = !json[QString("LambdaInvoke")].isNull() && m_lambda_invoke_isValid;

    m_s3_put_object_copy_isValid = ::OpenAPI::fromJsonValue(m_s3_put_object_copy, json[QString("S3PutObjectCopy")]);
    m_s3_put_object_copy_isSet = !json[QString("S3PutObjectCopy")].isNull() && m_s3_put_object_copy_isValid;

    m_s3_put_object_acl_isValid = ::OpenAPI::fromJsonValue(m_s3_put_object_acl, json[QString("S3PutObjectAcl")]);
    m_s3_put_object_acl_isSet = !json[QString("S3PutObjectAcl")].isNull() && m_s3_put_object_acl_isValid;

    m_s3_put_object_tagging_isValid = ::OpenAPI::fromJsonValue(m_s3_put_object_tagging, json[QString("S3PutObjectTagging")]);
    m_s3_put_object_tagging_isSet = !json[QString("S3PutObjectTagging")].isNull() && m_s3_put_object_tagging_isValid;

    m_s3_delete_object_tagging_isValid = ::OpenAPI::fromJsonValue(m_s3_delete_object_tagging, json[QString("S3DeleteObjectTagging")]);
    m_s3_delete_object_tagging_isSet = !json[QString("S3DeleteObjectTagging")].isNull() && m_s3_delete_object_tagging_isValid;

    m_s3_initiate_restore_object_isValid = ::OpenAPI::fromJsonValue(m_s3_initiate_restore_object, json[QString("S3InitiateRestoreObject")]);
    m_s3_initiate_restore_object_isSet = !json[QString("S3InitiateRestoreObject")].isNull() && m_s3_initiate_restore_object_isValid;

    m_s3_put_object_legal_hold_isValid = ::OpenAPI::fromJsonValue(m_s3_put_object_legal_hold, json[QString("S3PutObjectLegalHold")]);
    m_s3_put_object_legal_hold_isSet = !json[QString("S3PutObjectLegalHold")].isNull() && m_s3_put_object_legal_hold_isValid;

    m_s3_put_object_retention_isValid = ::OpenAPI::fromJsonValue(m_s3_put_object_retention, json[QString("S3PutObjectRetention")]);
    m_s3_put_object_retention_isSet = !json[QString("S3PutObjectRetention")].isNull() && m_s3_put_object_retention_isValid;

    m_s3_replicate_object_isValid = ::OpenAPI::fromJsonValue(m_s3_replicate_object, json[QString("S3ReplicateObject")]);
    m_s3_replicate_object_isSet = !json[QString("S3ReplicateObject")].isNull() && m_s3_replicate_object_isValid;
}

QString OAICreateJobRequest_Operation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJobRequest_Operation::asJsonObject() const {
    QJsonObject obj;
    if (m_lambda_invoke.isSet()) {
        obj.insert(QString("LambdaInvoke"), ::OpenAPI::toJsonValue(m_lambda_invoke));
    }
    if (m_s3_put_object_copy.isSet()) {
        obj.insert(QString("S3PutObjectCopy"), ::OpenAPI::toJsonValue(m_s3_put_object_copy));
    }
    if (m_s3_put_object_acl.isSet()) {
        obj.insert(QString("S3PutObjectAcl"), ::OpenAPI::toJsonValue(m_s3_put_object_acl));
    }
    if (m_s3_put_object_tagging.isSet()) {
        obj.insert(QString("S3PutObjectTagging"), ::OpenAPI::toJsonValue(m_s3_put_object_tagging));
    }
    if (m_s3_delete_object_tagging.isSet()) {
        obj.insert(QString("S3DeleteObjectTagging"), ::OpenAPI::toJsonValue(m_s3_delete_object_tagging));
    }
    if (m_s3_initiate_restore_object.isSet()) {
        obj.insert(QString("S3InitiateRestoreObject"), ::OpenAPI::toJsonValue(m_s3_initiate_restore_object));
    }
    if (m_s3_put_object_legal_hold.isSet()) {
        obj.insert(QString("S3PutObjectLegalHold"), ::OpenAPI::toJsonValue(m_s3_put_object_legal_hold));
    }
    if (m_s3_put_object_retention.isSet()) {
        obj.insert(QString("S3PutObjectRetention"), ::OpenAPI::toJsonValue(m_s3_put_object_retention));
    }
    if (m_s3_replicate_object.isSet()) {
        obj.insert(QString("S3ReplicateObject"), ::OpenAPI::toJsonValue(m_s3_replicate_object));
    }
    return obj;
}

OAICreateJob_request_Operation_LambdaInvoke OAICreateJobRequest_Operation::getLambdaInvoke() const {
    return m_lambda_invoke;
}
void OAICreateJobRequest_Operation::setLambdaInvoke(const OAICreateJob_request_Operation_LambdaInvoke &lambda_invoke) {
    m_lambda_invoke = lambda_invoke;
    m_lambda_invoke_isSet = true;
}

bool OAICreateJobRequest_Operation::is_lambda_invoke_Set() const{
    return m_lambda_invoke_isSet;
}

bool OAICreateJobRequest_Operation::is_lambda_invoke_Valid() const{
    return m_lambda_invoke_isValid;
}

OAICreateJob_request_Operation_S3PutObjectCopy OAICreateJobRequest_Operation::getS3PutObjectCopy() const {
    return m_s3_put_object_copy;
}
void OAICreateJobRequest_Operation::setS3PutObjectCopy(const OAICreateJob_request_Operation_S3PutObjectCopy &s3_put_object_copy) {
    m_s3_put_object_copy = s3_put_object_copy;
    m_s3_put_object_copy_isSet = true;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_copy_Set() const{
    return m_s3_put_object_copy_isSet;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_copy_Valid() const{
    return m_s3_put_object_copy_isValid;
}

OAICreateJob_request_Operation_S3PutObjectAcl OAICreateJobRequest_Operation::getS3PutObjectAcl() const {
    return m_s3_put_object_acl;
}
void OAICreateJobRequest_Operation::setS3PutObjectAcl(const OAICreateJob_request_Operation_S3PutObjectAcl &s3_put_object_acl) {
    m_s3_put_object_acl = s3_put_object_acl;
    m_s3_put_object_acl_isSet = true;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_acl_Set() const{
    return m_s3_put_object_acl_isSet;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_acl_Valid() const{
    return m_s3_put_object_acl_isValid;
}

OAICreateJob_request_Operation_S3PutObjectTagging OAICreateJobRequest_Operation::getS3PutObjectTagging() const {
    return m_s3_put_object_tagging;
}
void OAICreateJobRequest_Operation::setS3PutObjectTagging(const OAICreateJob_request_Operation_S3PutObjectTagging &s3_put_object_tagging) {
    m_s3_put_object_tagging = s3_put_object_tagging;
    m_s3_put_object_tagging_isSet = true;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_tagging_Set() const{
    return m_s3_put_object_tagging_isSet;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_tagging_Valid() const{
    return m_s3_put_object_tagging_isValid;
}

OAIObject OAICreateJobRequest_Operation::getS3DeleteObjectTagging() const {
    return m_s3_delete_object_tagging;
}
void OAICreateJobRequest_Operation::setS3DeleteObjectTagging(const OAIObject &s3_delete_object_tagging) {
    m_s3_delete_object_tagging = s3_delete_object_tagging;
    m_s3_delete_object_tagging_isSet = true;
}

bool OAICreateJobRequest_Operation::is_s3_delete_object_tagging_Set() const{
    return m_s3_delete_object_tagging_isSet;
}

bool OAICreateJobRequest_Operation::is_s3_delete_object_tagging_Valid() const{
    return m_s3_delete_object_tagging_isValid;
}

OAICreateJob_request_Operation_S3InitiateRestoreObject OAICreateJobRequest_Operation::getS3InitiateRestoreObject() const {
    return m_s3_initiate_restore_object;
}
void OAICreateJobRequest_Operation::setS3InitiateRestoreObject(const OAICreateJob_request_Operation_S3InitiateRestoreObject &s3_initiate_restore_object) {
    m_s3_initiate_restore_object = s3_initiate_restore_object;
    m_s3_initiate_restore_object_isSet = true;
}

bool OAICreateJobRequest_Operation::is_s3_initiate_restore_object_Set() const{
    return m_s3_initiate_restore_object_isSet;
}

bool OAICreateJobRequest_Operation::is_s3_initiate_restore_object_Valid() const{
    return m_s3_initiate_restore_object_isValid;
}

OAIS3SetObjectLegalHoldOperation OAICreateJobRequest_Operation::getS3PutObjectLegalHold() const {
    return m_s3_put_object_legal_hold;
}
void OAICreateJobRequest_Operation::setS3PutObjectLegalHold(const OAIS3SetObjectLegalHoldOperation &s3_put_object_legal_hold) {
    m_s3_put_object_legal_hold = s3_put_object_legal_hold;
    m_s3_put_object_legal_hold_isSet = true;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_legal_hold_Set() const{
    return m_s3_put_object_legal_hold_isSet;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_legal_hold_Valid() const{
    return m_s3_put_object_legal_hold_isValid;
}

OAIS3SetObjectRetentionOperation OAICreateJobRequest_Operation::getS3PutObjectRetention() const {
    return m_s3_put_object_retention;
}
void OAICreateJobRequest_Operation::setS3PutObjectRetention(const OAIS3SetObjectRetentionOperation &s3_put_object_retention) {
    m_s3_put_object_retention = s3_put_object_retention;
    m_s3_put_object_retention_isSet = true;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_retention_Set() const{
    return m_s3_put_object_retention_isSet;
}

bool OAICreateJobRequest_Operation::is_s3_put_object_retention_Valid() const{
    return m_s3_put_object_retention_isValid;
}

OAIObject OAICreateJobRequest_Operation::getS3ReplicateObject() const {
    return m_s3_replicate_object;
}
void OAICreateJobRequest_Operation::setS3ReplicateObject(const OAIObject &s3_replicate_object) {
    m_s3_replicate_object = s3_replicate_object;
    m_s3_replicate_object_isSet = true;
}

bool OAICreateJobRequest_Operation::is_s3_replicate_object_Set() const{
    return m_s3_replicate_object_isSet;
}

bool OAICreateJobRequest_Operation::is_s3_replicate_object_Valid() const{
    return m_s3_replicate_object_isValid;
}

bool OAICreateJobRequest_Operation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lambda_invoke.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_put_object_copy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_put_object_acl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_put_object_tagging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_delete_object_tagging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_initiate_restore_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_put_object_legal_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_put_object_retention.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_replicate_object.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJobRequest_Operation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
